import 'package:json_annotation/json_annotation.dart';
import 'package:json_annotation/json_annotation.dart';
import 'package:collection/collection.dart';

import 'package:chopper/chopper.dart';
import 'package:chopper/chopper.dart' as chopper;
import 'settings.enums.swagger.dart' as enums;
export 'settings.enums.swagger.dart';

part 'settings.swagger.chopper.dart';
part 'settings.swagger.g.dart';

// **************************************************************************
// SwaggerChopperGenerator
// **************************************************************************

@ChopperApi()
abstract class Settings extends ChopperService {
  static Settings create([ChopperClient? client]) {
    if (client != null) {
      return _$Settings(client);
    }

    final newClient = ChopperClient(
      services: [_$Settings()],
      converter: JsonSerializableConverter(), /*baseUrl: YOUR_BASE_URL*/
    );
    return _$Settings(newClient);
  }

  ///
  @Post(path: '/accountingsettings/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      accountingsettingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/accountingsettings/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      accountingsettingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/accountingsettings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogic>>
      accountingsettingsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/accountingsettings')
  Future<
          chopper.Response<
              WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings>>
      accountingsettingsPost(
          {@Body()
              required WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings?
                  body});

  ///
  ///@param id
  @Get(path: '/accountingsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings>>
      accountingsettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/accountingsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings>>
      accountingsettingsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings?
                  body});

  ///Get an empty object
  @Get(path: '/accountingsettings/emptyobject')
  Future<chopper.Response> accountingsettingsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/accountingsettings/emptybrowseobject')
  Future<chopper.Response> accountingsettingsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/accountingsettings/keyfieldnames')
  Future<chopper.Response> accountingsettingsKeyfieldnamesGet();

  ///
  @Post(path: '/activitystatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      activitystatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/activitystatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      activitystatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/activitystatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogic>>
      activitystatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/activitystatus')
  Future<chopper.Response<WebApiModulesSettingsActivityStatusActivityStatus>>
      activitystatusPost(
          {@Body()
              required WebApiModulesSettingsActivityStatusActivityStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/activitystatus/{id}')
  Future<chopper.Response<WebApiModulesSettingsActivityStatusActivityStatus>>
      activitystatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/activitystatus/{id}')
  Future<chopper.Response<WebApiModulesSettingsActivityStatusActivityStatus>>
      activitystatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsActivityStatusActivityStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/activitystatus/{id}')
  Future<chopper.Response<bool>> activitystatusIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/activitystatus/sort')
  Future<chopper.Response<WebApiLogicSortItemsResponse>> activitystatusSortPost(
      {@Body()
          required WebApiModulesSettingsActivityStatusSortActivityStatusRequest?
              body});

  ///Get an empty object
  @Get(path: '/activitystatus/emptyobject')
  Future<chopper.Response> activitystatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/activitystatus/emptybrowseobject')
  Future<chopper.Response> activitystatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/activitystatus/keyfieldnames')
  Future<chopper.Response> activitystatusKeyfieldnamesGet();

  ///
  @Post(path: '/activitytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      activitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/activitytype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      activitytypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/activitytype/legend')
  Future<chopper.Response<Object>> activitytypeLegendGet();

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/activitytype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogic>>
      activitytypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/activitytype')
  Future<chopper.Response<WebApiModulesSettingsActivityTypeActivityType>>
      activitytypePost(
          {@Body()
              required WebApiModulesSettingsActivityTypeActivityType? body});

  ///
  ///@param id
  @Get(path: '/activitytype/{id}')
  Future<chopper.Response<WebApiModulesSettingsActivityTypeActivityType>>
      activitytypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/activitytype/{id}')
  Future<chopper.Response<WebApiModulesSettingsActivityTypeActivityType>>
      activitytypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsActivityTypeActivityType? body});

  ///
  ///@param id
  @Delete(path: '/activitytype/{id}')
  Future<chopper.Response<bool>> activitytypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/activitytype/emptyobject')
  Future<chopper.Response> activitytypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/activitytype/emptybrowseobject')
  Future<chopper.Response> activitytypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/activitytype/keyfieldnames')
  Future<chopper.Response> activitytypeKeyfieldnamesGet();

  ///
  @Post(path: '/appreportdesigner/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      appreportdesignerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/appreportdesigner/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      appreportdesignerExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/appreportdesigner')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogic>>
      appreportdesignerGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/appreportdesigner')
  Future<
          chopper.Response<
              WebApiModulesSettingsAppReportDesignerAppReportDesigner>>
      appreportdesignerPost(
          {@Body()
              required WebApiModulesSettingsAppReportDesignerAppReportDesigner?
                  body});

  ///
  ///@param id
  @Get(path: '/appreportdesigner/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsAppReportDesignerAppReportDesigner>>
      appreportdesignerIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/appreportdesigner/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsAppReportDesignerAppReportDesigner>>
      appreportdesignerIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsAppReportDesignerAppReportDesigner?
                  body});

  ///
  ///@param id
  @Delete(path: '/appreportdesigner/{id}')
  Future<chopper.Response<bool>> appreportdesignerIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/appreportdesigner/emptyobject')
  Future<chopper.Response> appreportdesignerEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/appreportdesigner/emptybrowseobject')
  Future<chopper.Response> appreportdesignerEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/appreportdesigner/keyfieldnames')
  Future<chopper.Response> appreportdesignerKeyfieldnamesGet();

  ///
  @Post(path: '/attribute/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      attributeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/attribute/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      attributeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/attribute')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogic>>
      attributeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/attribute')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsAttributeAttribute>>
      attributePost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsAttributeAttribute?
                  body});

  ///
  ///@param id
  @Get(path: '/attribute/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsAttributeAttribute>>
      attributeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/attribute/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsAttributeAttribute>>
      attributeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsAttributeAttribute?
                  body});

  ///
  ///@param id
  @Delete(path: '/attribute/{id}')
  Future<chopper.Response<bool>> attributeIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/attribute/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      attributeValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/attribute/emptyobject')
  Future<chopper.Response> attributeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/attribute/emptybrowseobject')
  Future<chopper.Response> attributeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/attribute/keyfieldnames')
  Future<chopper.Response> attributeKeyfieldnamesGet();

  ///
  @Post(path: '/attributevalue/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      attributevalueBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/attributevalue/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      attributevalueExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/attributevalue')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogic>>
      attributevalueGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/attributevalue')
  Future<chopper.Response<WebApiModulesSettingsAttributeValueAttributeValue>>
      attributevaluePost(
          {@Body()
              required WebApiModulesSettingsAttributeValueAttributeValue?
                  body});

  ///
  ///@param id
  @Get(path: '/attributevalue/{id}')
  Future<chopper.Response<WebApiModulesSettingsAttributeValueAttributeValue>>
      attributevalueIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/attributevalue/{id}')
  Future<chopper.Response<WebApiModulesSettingsAttributeValueAttributeValue>>
      attributevalueIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsAttributeValueAttributeValue?
                  body});

  ///
  ///@param id
  @Delete(path: '/attributevalue/{id}')
  Future<chopper.Response<bool>> attributevalueIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/attributevalue/emptyobject')
  Future<chopper.Response> attributevalueEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/attributevalue/emptybrowseobject')
  Future<chopper.Response> attributevalueEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/attributevalue/keyfieldnames')
  Future<chopper.Response> attributevalueKeyfieldnamesGet();

  ///
  @Post(path: '/availabilitykeepfreshlog/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      availabilitykeepfreshlogBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/availabilitykeepfreshlog/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      availabilitykeepfreshlogExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/availabilitykeepfreshlog')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogic>>
      availabilitykeepfreshlogGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  ///@param id
  @Get(path: '/availabilitykeepfreshlog/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog>>
      availabilitykeepfreshlogIdGet({@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/availabilitykeepfreshlog/emptyobject')
  Future<chopper.Response> availabilitykeepfreshlogEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/availabilitykeepfreshlog/emptybrowseobject')
  Future<chopper.Response> availabilitykeepfreshlogEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/availabilitykeepfreshlog/keyfieldnames')
  Future<chopper.Response> availabilitykeepfreshlogKeyfieldnamesGet();

  ///
  @Post(path: '/availabilitysettings/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      availabilitysettingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/availabilitysettings/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      availabilitysettingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/availabilitysettings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogic>>
      availabilitysettingsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/availabilitysettings')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings>>
      availabilitysettingsPost(
          {@Body()
              required WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings?
                  body});

  ///
  ///@param id
  @Get(path: '/availabilitysettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings>>
      availabilitysettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/availabilitysettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings>>
      availabilitysettingsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings?
                  body});

  ///
  @Post(path: '/availabilitysettings/validatedefaultcustomerstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      availabilitysettingsValidatedefaultcustomerstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/availabilitysettings/validatedefaultdealstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      availabilitysettingsValidatedefaultdealstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/availabilitysettings/validatedefaultdealbillingcycle/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      availabilitysettingsValidatedefaultdealbillingcycleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/availabilitysettings/validatedefaultunit/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      availabilitysettingsValidatedefaultunitBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/availabilitysettings/validatedefaultrank/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      availabilitysettingsValidatedefaultrankBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path:
          '/availabilitysettings/validatedefaultnonrecurringbillingcycle/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      availabilitysettingsValidatedefaultnonrecurringbillingcycleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/availabilitysettings/validatedefaultcontactgroup/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      availabilitysettingsValidatedefaultcontactgroupBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/availabilitysettings/emptyobject')
  Future<chopper.Response> availabilitysettingsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/availabilitysettings/emptybrowseobject')
  Future<chopper.Response> availabilitysettingsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/availabilitysettings/keyfieldnames')
  Future<chopper.Response> availabilitysettingsKeyfieldnamesGet();

  ///
  @Post(path: '/availablewidget/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      availablewidgetBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/availablewidget/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      availablewidgetExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/availablewidget/emptyobject')
  Future<chopper.Response> availablewidgetEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/availablewidget/emptybrowseobject')
  Future<chopper.Response> availablewidgetEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/availablewidget/keyfieldnames')
  Future<chopper.Response> availablewidgetKeyfieldnamesGet();

  ///
  @Post(path: '/barcoderange/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      barcoderangeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/barcoderange/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      barcoderangeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/barcoderange')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogic>>
      barcoderangeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/barcoderange')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange>>
      barcoderangePost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange?
                  body});

  ///
  ///@param id
  @Get(path: '/barcoderange/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange>>
      barcoderangeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/barcoderange/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange>>
      barcoderangeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange?
                  body});

  ///
  ///@param id
  @Delete(path: '/barcoderange/{id}')
  Future<chopper.Response<bool>> barcoderangeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/barcoderange/emptyobject')
  Future<chopper.Response> barcoderangeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/barcoderange/emptybrowseobject')
  Future<chopper.Response> barcoderangeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/barcoderange/keyfieldnames')
  Future<chopper.Response> barcoderangeKeyfieldnamesGet();

  ///
  @Post(path: '/billingcycle/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingcycleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingcycle/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      billingcycleExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/billingcycle')
  Future<
          chopper.Response<
              List<
                  WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle>>>
      billingcycleGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/billingcycle')
  Future<
          chopper.Response<
              WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle>>
      billingcyclePost(
          {@Body()
              required WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle?
                  body});

  ///
  ///@param id
  @Get(path: '/billingcycle/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle>>
      billingcycleIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/billingcycle/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle>>
      billingcycleIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle?
                  body});

  ///
  ///@param id
  @Delete(path: '/billingcycle/{id}')
  Future<chopper.Response<bool>> billingcycleIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/billingcycle/emptyobject')
  Future<chopper.Response> billingcycleEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/billingcycle/emptybrowseobject')
  Future<chopper.Response> billingcycleEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/billingcycle/keyfieldnames')
  Future<chopper.Response> billingcycleKeyfieldnamesGet();

  ///
  @Post(path: '/billingcycleevent/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingcycleeventBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingcycleevent/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      billingcycleeventExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/billingcycleevent')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogic>>
      billingcycleeventGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/billingcycleevent')
  Future<
          chopper.Response<
              WebApiModulesSettingsBillingCycleEventBillingCycleEvent>>
      billingcycleeventPost(
          {@Body()
              required WebApiModulesSettingsBillingCycleEventBillingCycleEvent?
                  body});

  ///
  ///@param id
  @Get(path: '/billingcycleevent/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsBillingCycleEventBillingCycleEvent>>
      billingcycleeventIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/billingcycleevent/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsBillingCycleEventBillingCycleEvent>>
      billingcycleeventIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsBillingCycleEventBillingCycleEvent?
                  body});

  ///
  ///@param id
  @Delete(path: '/billingcycleevent/{id}')
  Future<chopper.Response<bool>> billingcycleeventIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/billingcycleevent/emptyobject')
  Future<chopper.Response> billingcycleeventEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/billingcycleevent/emptybrowseobject')
  Future<chopper.Response> billingcycleeventEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/billingcycleevent/keyfieldnames')
  Future<chopper.Response> billingcycleeventKeyfieldnamesGet();

  ///
  @Post(path: '/blackoutstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      blackoutstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/blackoutstatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      blackoutstatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/blackoutstatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogic>>
      blackoutstatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/blackoutstatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus>>
      blackoutstatusPost(
          {@Body()
              required WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/blackoutstatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus>>
      blackoutstatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/blackoutstatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus>>
      blackoutstatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/blackoutstatus/{id}')
  Future<chopper.Response<bool>> blackoutstatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/blackoutstatus/emptyobject')
  Future<chopper.Response> blackoutstatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/blackoutstatus/emptybrowseobject')
  Future<chopper.Response> blackoutstatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/blackoutstatus/keyfieldnames')
  Future<chopper.Response> blackoutstatusKeyfieldnamesGet();

  ///
  @Post(path: '/building/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      buildingBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/building/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      buildingExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/building')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogic>>
      buildingGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/building')
  Future<
          chopper
              .Response<WebApiModulesSettingsFacilitySettingsBuildingBuilding>>
      buildingPost(
          {@Body()
              required WebApiModulesSettingsFacilitySettingsBuildingBuilding?
                  body});

  ///
  ///@param id
  @Get(path: '/building/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsFacilitySettingsBuildingBuilding>>
      buildingIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/building/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsFacilitySettingsBuildingBuilding>>
      buildingIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsFacilitySettingsBuildingBuilding?
                  body});

  ///
  ///@param id
  @Delete(path: '/building/{id}')
  Future<chopper.Response<bool>> buildingIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/building/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      buildingValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/building/emptyobject')
  Future<chopper.Response> buildingEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/building/emptybrowseobject')
  Future<chopper.Response> buildingEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/building/keyfieldnames')
  Future<chopper.Response> buildingKeyfieldnamesGet();

  ///
  @Post(path: '/category/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      categoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/category/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      categoryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/category/sort')
  Future<chopper.Response<WebApiLogicSortItemsResponse>> categorySortPost(
      {@Body()
          required WebApiModulesSettingsCategorySortCategoryRequest? body});

  ///Get an empty object
  @Get(path: '/category/emptyobject')
  Future<chopper.Response> categoryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/category/emptybrowseobject')
  Future<chopper.Response> categoryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/category/keyfieldnames')
  Future<chopper.Response> categoryKeyfieldnamesGet();

  ///
  @Post(path: '/contactevent/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contacteventBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/contactevent/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      contacteventExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/contactevent')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogic>>
      contacteventGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/contactevent')
  Future<
          chopper.Response<
              WebApiModulesSettingsContactSettingsContactEventContactEvent>>
      contacteventPost(
          {@Body()
              required WebApiModulesSettingsContactSettingsContactEventContactEvent?
                  body});

  ///
  ///@param id
  @Get(path: '/contactevent/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsContactSettingsContactEventContactEvent>>
      contacteventIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/contactevent/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsContactSettingsContactEventContactEvent>>
      contacteventIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsContactSettingsContactEventContactEvent?
                  body});

  ///
  ///@param id
  @Delete(path: '/contactevent/{id}')
  Future<chopper.Response<bool>> contacteventIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/contactevent/emptyobject')
  Future<chopper.Response> contacteventEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/contactevent/emptybrowseobject')
  Future<chopper.Response> contacteventEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/contactevent/keyfieldnames')
  Future<chopper.Response> contacteventKeyfieldnamesGet();

  ///
  @Post(path: '/contacttitle/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contacttitleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/contacttitle/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      contacttitleExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/contacttitle')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogic>>
      contacttitleGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/contacttitle')
  Future<
          chopper.Response<
              WebApiModulesSettingsContactSettingsContactTitleContactTitle>>
      contacttitlePost(
          {@Body()
              required WebApiModulesSettingsContactSettingsContactTitleContactTitle?
                  body});

  ///
  ///@param id
  @Get(path: '/contacttitle/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsContactSettingsContactTitleContactTitle>>
      contacttitleIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/contacttitle/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsContactSettingsContactTitleContactTitle>>
      contacttitleIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsContactSettingsContactTitleContactTitle?
                  body});

  ///
  ///@param id
  @Delete(path: '/contacttitle/{id}')
  Future<chopper.Response<bool>> contacttitleIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/contacttitle/emptyobject')
  Future<chopper.Response> contacttitleEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/contacttitle/emptybrowseobject')
  Future<chopper.Response> contacttitleEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/contacttitle/keyfieldnames')
  Future<chopper.Response> contacttitleKeyfieldnamesGet();

  ///
  @Post(path: '/country/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      countryBrowsePost({@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/country/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      countryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/country')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic>>
      countryGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/country')
  Future<chopper.Response<WebApiModulesSettingsAddressSettingsCountryCountry>>
      countryPost(
          {@Body()
              required WebApiModulesSettingsAddressSettingsCountryCountry?
                  body});

  ///
  ///@param id
  @Get(path: '/country/{id}')
  Future<chopper.Response<WebApiModulesSettingsAddressSettingsCountryCountry>>
      countryIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/country/{id}')
  Future<chopper.Response<WebApiModulesSettingsAddressSettingsCountryCountry>>
      countryIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsAddressSettingsCountryCountry?
                  body});

  ///
  ///@param id
  @Delete(path: '/country/{id}')
  Future<chopper.Response<bool>> countryIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/country/emptyobject')
  Future<chopper.Response> countryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/country/emptybrowseobject')
  Future<chopper.Response> countryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/country/keyfieldnames')
  Future<chopper.Response> countryKeyfieldnamesGet();

  ///
  @Post(path: '/coverletter/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      coverletterBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/coverletter/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      coverletterExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/coverletter')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogic>>
      coverletterGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/coverletter')
  Future<
          chopper.Response<
              WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter>>
      coverletterPost(
          {@Body()
              required WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter?
                  body});

  ///
  ///@param id
  @Get(path: '/coverletter/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter>>
      coverletterIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/coverletter/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter>>
      coverletterIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter?
                  body});

  ///
  ///@param id
  @Delete(path: '/coverletter/{id}')
  Future<chopper.Response<bool>> coverletterIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/coverletter/emptyobject')
  Future<chopper.Response> coverletterEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/coverletter/emptybrowseobject')
  Future<chopper.Response> coverletterEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/coverletter/keyfieldnames')
  Future<chopper.Response> coverletterKeyfieldnamesGet();

  ///
  @Post(path: '/creditcardpaymenttype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditcardpaymenttypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/creditcardpaymenttype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      creditcardpaymenttypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/creditcardpaymenttype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogic>>
      creditcardpaymenttypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/creditcardpaymenttype')
  Future<
          chopper.Response<
              WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType>>
      creditcardpaymenttypePost(
          {@Body()
              required WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType?
                  body});

  ///
  ///@param id
  @Get(path: '/creditcardpaymenttype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType>>
      creditcardpaymenttypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/creditcardpaymenttype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType>>
      creditcardpaymenttypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType?
                  body});

  ///
  ///@param id
  @Delete(path: '/creditcardpaymenttype/{id}')
  Future<chopper.Response<bool>> creditcardpaymenttypeIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/creditcardpaymenttype/validatepaymenttype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditcardpaymenttypeValidatepaymenttypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/creditcardpaymenttype/emptyobject')
  Future<chopper.Response> creditcardpaymenttypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/creditcardpaymenttype/emptybrowseobject')
  Future<chopper.Response> creditcardpaymenttypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/creditcardpaymenttype/keyfieldnames')
  Future<chopper.Response> creditcardpaymenttypeKeyfieldnamesGet();

  ///
  @Post(path: '/creditcardpinpad/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditcardpinpadBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/creditcardpinpad/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      creditcardpinpadExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/creditcardpinpad')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogic>>
      creditcardpinpadGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/creditcardpinpad')
  Future<
          chopper.Response<
              WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad>>
      creditcardpinpadPost(
          {@Body()
              required WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad?
                  body});

  ///
  ///@param id
  @Get(path: '/creditcardpinpad/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad>>
      creditcardpinpadIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/creditcardpinpad/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad>>
      creditcardpinpadIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad?
                  body});

  ///
  ///@param id
  @Delete(path: '/creditcardpinpad/{id}')
  Future<chopper.Response<bool>> creditcardpinpadIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/creditcardpinpad/emptyobject')
  Future<chopper.Response> creditcardpinpadEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/creditcardpinpad/emptybrowseobject')
  Future<chopper.Response> creditcardpinpadEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/creditcardpinpad/keyfieldnames')
  Future<chopper.Response> creditcardpinpadKeyfieldnamesGet();

  ///
  @Post(path: '/creditstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/creditstatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      creditstatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/creditstatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogic>>
      creditstatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/creditstatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus>>
      creditstatusPost(
          {@Body()
              required WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/creditstatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus>>
      creditstatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/creditstatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus>>
      creditstatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/creditstatus/{id}')
  Future<chopper.Response<bool>> creditstatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/creditstatus/emptyobject')
  Future<chopper.Response> creditstatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/creditstatus/emptybrowseobject')
  Future<chopper.Response> creditstatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/creditstatus/keyfieldnames')
  Future<chopper.Response> creditstatusKeyfieldnamesGet();

  ///
  @Post(path: '/crew/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> crewBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/crew/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      crewExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/crew')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogic>>
      crewGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/crew')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsCrewCrew>> crewPost(
      {@Body() required WebApiModulesSettingsLaborSettingsCrewCrew? body});

  ///
  ///@param id
  @Get(path: '/crew/{id}')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsCrewCrew>>
      crewIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/crew/{id}')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsCrewCrew>>
      crewIdPut(
          {@Path('id') required String? id,
          @Body() required WebApiModulesSettingsLaborSettingsCrewCrew? body});

  ///
  ///@param id
  @Delete(path: '/crew/{id}')
  Future<chopper.Response<bool>> crewIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/crew/validatecontacttitle/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewValidatecontacttitleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/crew/validatecountry/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewValidatecountryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/crew/emptyobject')
  Future<chopper.Response> crewEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/crew/emptybrowseobject')
  Future<chopper.Response> crewEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/crew/keyfieldnames')
  Future<chopper.Response> crewKeyfieldnamesGet();

  ///
  @Post(path: '/crewlocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewlocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/crewlocation/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      crewlocationExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/crewlocation')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogic>>
      crewlocationGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/crewlocation')
  Future<chopper.Response<WebApiModulesSettingsCrewLocationCrewLocation>>
      crewlocationPost(
          {@Body()
              required WebApiModulesSettingsCrewLocationCrewLocation? body});

  ///
  ///@param id
  @Get(path: '/crewlocation/{id}')
  Future<chopper.Response<WebApiModulesSettingsCrewLocationCrewLocation>>
      crewlocationIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/crewlocation/{id}')
  Future<chopper.Response<WebApiModulesSettingsCrewLocationCrewLocation>>
      crewlocationIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCrewLocationCrewLocation? body});

  ///
  ///@param id
  @Delete(path: '/crewlocation/{id}')
  Future<chopper.Response<bool>> crewlocationIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/crewlocation/validatelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewlocationValidatelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/crewlocation/emptyobject')
  Future<chopper.Response> crewlocationEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/crewlocation/emptybrowseobject')
  Future<chopper.Response> crewlocationEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/crewlocation/keyfieldnames')
  Future<chopper.Response> crewlocationKeyfieldnamesGet();

  ///
  @Post(path: '/crewposition/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewpositionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/crewposition/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      crewpositionExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/crewposition')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogic>>
      crewpositionGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/crewposition')
  Future<chopper.Response<WebApiModulesSettingsCrewPositionCrewPosition>>
      crewpositionPost(
          {@Body()
              required WebApiModulesSettingsCrewPositionCrewPosition? body});

  ///
  ///@param id
  @Get(path: '/crewposition/{id}')
  Future<chopper.Response<WebApiModulesSettingsCrewPositionCrewPosition>>
      crewpositionIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/crewposition/{id}')
  Future<chopper.Response<WebApiModulesSettingsCrewPositionCrewPosition>>
      crewpositionIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCrewPositionCrewPosition? body});

  ///
  ///@param id
  @Delete(path: '/crewposition/{id}')
  Future<chopper.Response<bool>> crewpositionIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/crewposition/validatelabortype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewpositionValidatelabortypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/crewposition/validaterate/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewpositionValidaterateBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/crewposition/emptyobject')
  Future<chopper.Response> crewpositionEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/crewposition/emptybrowseobject')
  Future<chopper.Response> crewpositionEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/crewposition/keyfieldnames')
  Future<chopper.Response> crewpositionKeyfieldnamesGet();

  ///
  @Post(path: '/crewschedulestatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewschedulestatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/crewschedulestatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      crewschedulestatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/crewschedulestatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogic>>
      crewschedulestatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/crewschedulestatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus>>
      crewschedulestatusPost(
          {@Body()
              required WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/crewschedulestatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus>>
      crewschedulestatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/crewschedulestatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus>>
      crewschedulestatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/crewschedulestatus/{id}')
  Future<chopper.Response<bool>> crewschedulestatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/crewschedulestatus/emptyobject')
  Future<chopper.Response> crewschedulestatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/crewschedulestatus/emptybrowseobject')
  Future<chopper.Response> crewschedulestatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/crewschedulestatus/keyfieldnames')
  Future<chopper.Response> crewschedulestatusKeyfieldnamesGet();

  ///
  @Post(path: '/crewstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/crewstatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      crewstatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/crewstatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogic>>
      crewstatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/crewstatus')
  Future<
          chopper
              .Response<WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus>>
      crewstatusPost(
          {@Body()
              required WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/crewstatus/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus>>
      crewstatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/crewstatus/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus>>
      crewstatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/crewstatus/{id}')
  Future<chopper.Response<bool>> crewstatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/crewstatus/emptyobject')
  Future<chopper.Response> crewstatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/crewstatus/emptybrowseobject')
  Future<chopper.Response> crewstatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/crewstatus/keyfieldnames')
  Future<chopper.Response> crewstatusKeyfieldnamesGet();

  ///
  @Post(path: '/currency/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      currencyBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/currency/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      currencyExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/currency')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic>>
      currencyGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/currency')
  Future<
          chopper
              .Response<WebApiModulesSettingsCurrencySettingsCurrencyCurrency>>
      currencyPost(
          {@Body()
              required WebApiModulesSettingsCurrencySettingsCurrencyCurrency?
                  body});

  ///
  ///@param id
  @Get(path: '/currency/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsCurrencySettingsCurrencyCurrency>>
      currencyIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/currency/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsCurrencySettingsCurrencyCurrency>>
      currencyIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCurrencySettingsCurrencyCurrency?
                  body});

  ///
  ///@param id
  @Delete(path: '/currency/{id}')
  Future<chopper.Response<bool>> currencyIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/currency/emptyobject')
  Future<chopper.Response> currencyEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/currency/emptybrowseobject')
  Future<chopper.Response> currencyEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/currency/keyfieldnames')
  Future<chopper.Response> currencyKeyfieldnamesGet();

  ///
  @Post(path: '/currencyexchangerate/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      currencyexchangerateBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/currencyexchangerate/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      currencyexchangerateExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/currencyexchangerate')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogic>>
      currencyexchangerateGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/currencyexchangerate')
  Future<
          chopper.Response<
              WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate>>
      currencyexchangeratePost(
          {@Body()
              required WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate?
                  body});

  ///
  ///@param id
  @Get(path: '/currencyexchangerate/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate>>
      currencyexchangerateIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/currencyexchangerate/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate>>
      currencyexchangerateIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate?
                  body});

  ///
  ///@param id
  @Delete(path: '/currencyexchangerate/{id}')
  Future<chopper.Response<bool>> currencyexchangerateIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/currencyexchangerate/emptyobject')
  Future<chopper.Response> currencyexchangerateEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/currencyexchangerate/emptybrowseobject')
  Future<chopper.Response> currencyexchangerateEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/currencyexchangerate/keyfieldnames')
  Future<chopper.Response> currencyexchangerateKeyfieldnamesGet();

  ///
  @Post(path: '/customercategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customercategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customercategory/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      customercategoryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/customercategory')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogic>>
      customercategoryGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/customercategory')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory>>
      customercategoryPost(
          {@Body()
              required WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory?
                  body});

  ///
  ///@param id
  @Get(path: '/customercategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory>>
      customercategoryIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/customercategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory>>
      customercategoryIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory?
                  body});

  ///
  ///@param id
  @Delete(path: '/customercategory/{id}')
  Future<chopper.Response<bool>> customercategoryIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/customercategory/emptyobject')
  Future<chopper.Response> customercategoryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/customercategory/emptybrowseobject')
  Future<chopper.Response> customercategoryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/customercategory/keyfieldnames')
  Future<chopper.Response> customercategoryKeyfieldnamesGet();

  ///
  @Post(path: '/customerstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerstatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      customerstatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/customerstatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogic>>
      customerstatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/customerstatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus>>
      customerstatusPost(
          {@Body()
              required WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/customerstatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus>>
      customerstatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/customerstatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus>>
      customerstatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/customerstatus/{id}')
  Future<chopper.Response<bool>> customerstatusIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/customerstatus/validatecreditstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerstatusValidatecreditstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/customerstatus/emptyobject')
  Future<chopper.Response> customerstatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/customerstatus/emptybrowseobject')
  Future<chopper.Response> customerstatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/customerstatus/keyfieldnames')
  Future<chopper.Response> customerstatusKeyfieldnamesGet();

  ///
  @Post(path: '/customertype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customertypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customertype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      customertypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/customertype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogic>>
      customertypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/customertype')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType>>
      customertypePost(
          {@Body()
              required WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType?
                  body});

  ///
  ///@param id
  @Get(path: '/customertype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType>>
      customertypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/customertype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType>>
      customertypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType?
                  body});

  ///
  ///@param id
  @Delete(path: '/customertype/{id}')
  Future<chopper.Response<bool>> customertypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/customertype/emptyobject')
  Future<chopper.Response> customertypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/customertype/emptybrowseobject')
  Future<chopper.Response> customertypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/customertype/keyfieldnames')
  Future<chopper.Response> customertypeKeyfieldnamesGet();

  ///
  @Post(path: '/dataexportformat/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dataexportformatBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dataexportformat/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dataexportformatExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/dataexportformat')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogic>>
      dataexportformatGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/dataexportformat')
  Future<
          chopper.Response<
              WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat>>
      dataexportformatPost(
          {@Body()
              required WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat?
                  body});

  ///
  ///@param id
  @Get(path: '/dataexportformat/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat>>
      dataexportformatIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/dataexportformat/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat>>
      dataexportformatIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat?
                  body});

  ///
  ///@param id
  @Delete(path: '/dataexportformat/{id}')
  Future<chopper.Response<bool>> dataexportformatIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/dataexportformat/emptyobject')
  Future<chopper.Response> dataexportformatEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/dataexportformat/emptybrowseobject')
  Future<chopper.Response> dataexportformatEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/dataexportformat/keyfieldnames')
  Future<chopper.Response> dataexportformatKeyfieldnamesGet();

  ///
  @Post(path: '/dealclassification/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealclassificationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealclassification/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dealclassificationExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/dealclassification')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogic>>
      dealclassificationGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/dealclassification')
  Future<
          chopper.Response<
              WebApiModulesSettingsDealSettingsDealClassificationDealClassification>>
      dealclassificationPost(
          {@Body()
              required WebApiModulesSettingsDealSettingsDealClassificationDealClassification?
                  body});

  ///
  ///@param id
  @Get(path: '/dealclassification/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDealSettingsDealClassificationDealClassification>>
      dealclassificationIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/dealclassification/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDealSettingsDealClassificationDealClassification>>
      dealclassificationIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDealSettingsDealClassificationDealClassification?
                  body});

  ///
  ///@param id
  @Delete(path: '/dealclassification/{id}')
  Future<chopper.Response<bool>> dealclassificationIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/dealclassification/emptyobject')
  Future<chopper.Response> dealclassificationEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/dealclassification/emptybrowseobject')
  Future<chopper.Response> dealclassificationEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/dealclassification/keyfieldnames')
  Future<chopper.Response> dealclassificationKeyfieldnamesGet();

  ///
  @Post(path: '/dealstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealstatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dealstatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/dealstatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogic>>
      dealstatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/dealstatus')
  Future<
          chopper
              .Response<WebApiModulesSettingsDealSettingsDealStatusDealStatus>>
      dealstatusPost(
          {@Body()
              required WebApiModulesSettingsDealSettingsDealStatusDealStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/dealstatus/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsDealSettingsDealStatusDealStatus>>
      dealstatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/dealstatus/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsDealSettingsDealStatusDealStatus>>
      dealstatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDealSettingsDealStatusDealStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/dealstatus/{id}')
  Future<chopper.Response<bool>> dealstatusIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/dealstatus/validatecreditstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealstatusValidatecreditstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/dealstatus/emptyobject')
  Future<chopper.Response> dealstatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/dealstatus/emptybrowseobject')
  Future<chopper.Response> dealstatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/dealstatus/keyfieldnames')
  Future<chopper.Response> dealstatusKeyfieldnamesGet();

  ///
  @Post(path: '/dealtype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealtype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dealtypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/dealtype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogic>>
      dealtypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/dealtype')
  Future<chopper.Response<WebApiModulesSettingsDealSettingsDealTypeDealType>>
      dealtypePost(
          {@Body()
              required WebApiModulesSettingsDealSettingsDealTypeDealType?
                  body});

  ///
  ///@param id
  @Get(path: '/dealtype/{id}')
  Future<chopper.Response<WebApiModulesSettingsDealSettingsDealTypeDealType>>
      dealtypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/dealtype/{id}')
  Future<chopper.Response<WebApiModulesSettingsDealSettingsDealTypeDealType>>
      dealtypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDealSettingsDealTypeDealType?
                  body});

  ///
  ///@param id
  @Delete(path: '/dealtype/{id}')
  Future<chopper.Response<bool>> dealtypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/dealtype/emptyobject')
  Future<chopper.Response> dealtypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/dealtype/emptybrowseobject')
  Future<chopper.Response> dealtypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/dealtype/keyfieldnames')
  Future<chopper.Response> dealtypeKeyfieldnamesGet();

  ///
  @Post(path: '/defaultsettings/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      defaultsettingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/defaultsettings/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      defaultsettingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/defaultsettings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogic>>
      defaultsettingsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/defaultsettings')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings>>
      defaultsettingsPost(
          {@Body()
              required WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings?
                  body});

  ///
  ///@param id
  @Get(path: '/defaultsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings>>
      defaultsettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/defaultsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings>>
      defaultsettingsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings?
                  body});

  ///
  @Post(path: '/defaultsettings/validatedefaultcustomerstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      defaultsettingsValidatedefaultcustomerstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/defaultsettings/validatedefaultpaymentterms/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      defaultsettingsValidatedefaultpaymenttermsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/defaultsettings/validatedefaultcreditstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      defaultsettingsValidatedefaultcreditstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/defaultsettings/validatedefaultdealstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      defaultsettingsValidatedefaultdealstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/defaultsettings/validatedefaultdealbillingcycle/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      defaultsettingsValidatedefaultdealbillingcycleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/defaultsettings/validatedefaultunit/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      defaultsettingsValidatedefaultunitBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/defaultsettings/validatedefaultrank/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      defaultsettingsValidatedefaultrankBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/defaultsettings/validatedefaultnonrecurringbillingcycle/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      defaultsettingsValidatedefaultnonrecurringbillingcycleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/defaultsettings/validatedefaultcontactgroup/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      defaultsettingsValidatedefaultcontactgroupBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/defaultsettings/emptyobject')
  Future<chopper.Response> defaultsettingsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/defaultsettings/emptybrowseobject')
  Future<chopper.Response> defaultsettingsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/defaultsettings/keyfieldnames')
  Future<chopper.Response> defaultsettingsKeyfieldnamesGet();

  ///
  @Post(path: '/department/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      departmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/department/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      departmentExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/department')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogic>>
      departmentGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/department')
  Future<
          chopper.Response<
              WebApiModulesSettingsDepartmentSettingsDepartmentDepartment>>
      departmentPost(
          {@Body()
              required WebApiModulesSettingsDepartmentSettingsDepartmentDepartment?
                  body});

  ///
  ///@param id
  @Get(path: '/department/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDepartmentSettingsDepartmentDepartment>>
      departmentIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/department/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDepartmentSettingsDepartmentDepartment>>
      departmentIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDepartmentSettingsDepartmentDepartment?
                  body});

  ///
  ///@param id
  @Delete(path: '/department/{id}')
  Future<chopper.Response<bool>> departmentIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/department/emptyobject')
  Future<chopper.Response> departmentEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/department/emptybrowseobject')
  Future<chopper.Response> departmentEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/department/keyfieldnames')
  Future<chopper.Response> departmentKeyfieldnamesGet();

  ///
  @Post(path: '/departmentinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      departmentinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param fileDownloadName
  @Post(path: '/departmentinventorytype/exportexcelxlsx/{filedownloadname}')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      departmentinventorytypeExportexcelxlsxFiledownloadnamePost(
          {@Path('fileDownloadName') required String? fileDownloadName,
          @Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/departmentinventorytype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogic>>
      departmentinventorytypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/departmentinventorytype')
  Future<
          chopper.Response<
              WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType>>
      departmentinventorytypePost(
          {@Body()
              required WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType?
                  body});

  ///
  ///@param id
  @Get(path: '/departmentinventorytype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType>>
      departmentinventorytypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/departmentinventorytype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType>>
      departmentinventorytypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType?
                  body});

  ///
  ///@param id
  @Delete(path: '/departmentinventorytype/{id}')
  Future<chopper.Response<bool>> departmentinventorytypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/departmentinventorytype/emptyobject')
  Future<chopper.Response> departmentinventorytypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/departmentinventorytype/emptybrowseobject')
  Future<chopper.Response> departmentinventorytypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/departmentinventorytype/keyfieldnames')
  Future<chopper.Response> departmentinventorytypeKeyfieldnamesGet();

  ///
  @Post(path: '/departmentlocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      departmentlocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/departmentlocation/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      departmentlocationExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/departmentlocation')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogic>>
      departmentlocationGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/departmentlocation')
  Future<
          chopper.Response<
              WebApiModulesSettingsDepartmentLocationDepartmentLocation>>
      departmentlocationPost(
          {@Body()
              required WebApiModulesSettingsDepartmentLocationDepartmentLocation?
                  body});

  ///
  ///@param id
  @Get(path: '/departmentlocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDepartmentLocationDepartmentLocation>>
      departmentlocationIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/departmentlocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDepartmentLocationDepartmentLocation>>
      departmentlocationIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDepartmentLocationDepartmentLocation?
                  body});

  ///Get an empty object
  @Get(path: '/departmentlocation/emptyobject')
  Future<chopper.Response> departmentlocationEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/departmentlocation/emptybrowseobject')
  Future<chopper.Response> departmentlocationEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/departmentlocation/keyfieldnames')
  Future<chopper.Response> departmentlocationKeyfieldnamesGet();

  ///
  @Post(path: '/discountitem/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      discountitemExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/discountitem')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogic>>
      discountitemGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/discountitem')
  Future<chopper.Response<WebApiModulesSettingsDiscountItemDiscountItem>>
      discountitemPost(
          {@Body()
              required WebApiModulesSettingsDiscountItemDiscountItem? body});

  ///
  ///@param id
  @Get(path: '/discountitem/{id}')
  Future<chopper.Response<WebApiModulesSettingsDiscountItemDiscountItem>>
      discountitemIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/discountitem/{id}')
  Future<chopper.Response<WebApiModulesSettingsDiscountItemDiscountItem>>
      discountitemIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDiscountItemDiscountItem? body});

  ///
  ///@param id
  @Delete(path: '/discountitem/{id}')
  Future<chopper.Response<bool>> discountitemIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/discountitem/validateordertype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidateordertypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validatelaborinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidatelaborinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validatelaborcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidatelaborcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validatelaborinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidatelaborinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validatemiscinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidatemiscinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validatemisccategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidatemisccategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validatemiscinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidatemiscinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validatesalescategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidatesalescategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountitem/validatesalesinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountitemValidatesalesinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/discountitem/emptyobject')
  Future<chopper.Response> discountitemEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/discountitem/emptybrowseobject')
  Future<chopper.Response> discountitemEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/discountitem/keyfieldnames')
  Future<chopper.Response> discountitemKeyfieldnamesGet();

  ///
  @Post(path: '/discountreason/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discountreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discountreason/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      discountreasonExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/discountreason')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogic>>
      discountreasonGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/discountreason')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason>>
      discountreasonPost(
          {@Body()
              required WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason?
                  body});

  ///
  ///@param id
  @Get(path: '/discountreason/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason>>
      discountreasonIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/discountreason/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason>>
      discountreasonIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason?
                  body});

  ///
  ///@param id
  @Delete(path: '/discountreason/{id}')
  Future<chopper.Response<bool>> discountreasonIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/discountreason/emptyobject')
  Future<chopper.Response> discountreasonEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/discountreason/emptybrowseobject')
  Future<chopper.Response> discountreasonEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/discountreason/keyfieldnames')
  Future<chopper.Response> discountreasonKeyfieldnamesGet();

  ///
  @Post(path: '/discounttemplate/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discounttemplateBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/discounttemplate/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      discounttemplateExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/discounttemplate')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogic>>
      discounttemplateGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/discounttemplate')
  Future<
          chopper.Response<
              WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate>>
      discounttemplatePost(
          {@Body()
              required WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate?
                  body});

  ///
  ///@param id
  @Get(path: '/discounttemplate/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate>>
      discounttemplateIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/discounttemplate/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate>>
      discounttemplateIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate?
                  body});

  ///
  ///@param id
  @Delete(path: '/discounttemplate/{id}')
  Future<chopper.Response<bool>> discounttemplateIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/discounttemplate/addallitems')
  Future<
          chopper.Response<
              WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponse>>
      discounttemplateAddallitemsPost(
          {@Body()
              required WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequest?
                  body});

  ///
  @Post(path: '/discounttemplate/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      discounttemplateValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/discounttemplate/emptyobject')
  Future<chopper.Response> discounttemplateEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/discounttemplate/emptybrowseobject')
  Future<chopper.Response> discounttemplateEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/discounttemplate/keyfieldnames')
  Future<chopper.Response> discounttemplateKeyfieldnamesGet();

  ///
  @Post(path: '/documentbarcodesettings/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      documentbarcodesettingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/documentbarcodesettings/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      documentbarcodesettingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/documentbarcodesettings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogic>>
      documentbarcodesettingsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  ///@param id
  @Get(path: '/documentbarcodesettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings>>
      documentbarcodesettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/documentbarcodesettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings>>
      documentbarcodesettingsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings?
                  body});

  ///Get an empty object
  @Get(path: '/documentbarcodesettings/emptyobject')
  Future<chopper.Response> documentbarcodesettingsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/documentbarcodesettings/emptybrowseobject')
  Future<chopper.Response> documentbarcodesettingsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/documentbarcodesettings/keyfieldnames')
  Future<chopper.Response> documentbarcodesettingsKeyfieldnamesGet();

  ///
  @Post(path: '/documenttype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      documenttypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/documenttype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      documenttypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/documenttype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogic>>
      documenttypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/documenttype')
  Future<
          chopper.Response<
              WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType>>
      documenttypePost(
          {@Body()
              required WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType?
                  body});

  ///
  ///@param id
  @Get(path: '/documenttype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType>>
      documenttypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/documenttype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType>>
      documenttypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType?
                  body});

  ///
  ///@param id
  @Delete(path: '/documenttype/{id}')
  Future<chopper.Response<bool>> documenttypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/documenttype/emptyobject')
  Future<chopper.Response> documenttypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/documenttype/emptybrowseobject')
  Future<chopper.Response> documenttypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/documenttype/keyfieldnames')
  Future<chopper.Response> documenttypeKeyfieldnamesGet();

  ///
  @Post(path: '/emailsettings/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      emailsettingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/emailsettings/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      emailsettingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/emailsettings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogic>>
      emailsettingsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/emailsettings')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings>>
      emailsettingsPost(
          {@Body()
              required WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings?
                  body});

  ///
  ///@param id
  @Get(path: '/emailsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings>>
      emailsettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/emailsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings>>
      emailsettingsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings?
                  body});

  ///Get an empty object
  @Get(path: '/emailsettings/emptyobject')
  Future<chopper.Response> emailsettingsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/emailsettings/emptybrowseobject')
  Future<chopper.Response> emailsettingsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/emailsettings/keyfieldnames')
  Future<chopper.Response> emailsettingsKeyfieldnamesGet();

  ///
  @Post(path: '/eventcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      eventcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/eventcategory/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      eventcategoryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/eventcategory')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogic>>
      eventcategoryGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/eventcategory')
  Future<
          chopper.Response<
              WebApiModulesSettingsEventSettingsEventCategoryEventCategory>>
      eventcategoryPost(
          {@Body()
              required WebApiModulesSettingsEventSettingsEventCategoryEventCategory?
                  body});

  ///
  ///@param id
  @Get(path: '/eventcategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsEventSettingsEventCategoryEventCategory>>
      eventcategoryIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/eventcategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsEventSettingsEventCategoryEventCategory>>
      eventcategoryIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsEventSettingsEventCategoryEventCategory?
                  body});

  ///
  ///@param id
  @Delete(path: '/eventcategory/{id}')
  Future<chopper.Response<bool>> eventcategoryIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/eventcategory/emptyobject')
  Future<chopper.Response> eventcategoryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/eventcategory/emptybrowseobject')
  Future<chopper.Response> eventcategoryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/eventcategory/keyfieldnames')
  Future<chopper.Response> eventcategoryKeyfieldnamesGet();

  ///
  @Post(path: '/eventtype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      eventtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/eventtype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      eventtypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/eventtype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogic>>
      eventtypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/eventtype')
  Future<chopper.Response<WebApiModulesSettingsEventSettingsEventTypeEventType>>
      eventtypePost(
          {@Body()
              required WebApiModulesSettingsEventSettingsEventTypeEventType?
                  body});

  ///
  ///@param id
  @Get(path: '/eventtype/{id}')
  Future<chopper.Response<WebApiModulesSettingsEventSettingsEventTypeEventType>>
      eventtypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/eventtype/{id}')
  Future<chopper.Response<WebApiModulesSettingsEventSettingsEventTypeEventType>>
      eventtypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsEventSettingsEventTypeEventType?
                  body});

  ///
  ///@param id
  @Delete(path: '/eventtype/{id}')
  Future<chopper.Response<bool>> eventtypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/eventtype/emptyobject')
  Future<chopper.Response> eventtypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/eventtype/emptybrowseobject')
  Future<chopper.Response> eventtypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/eventtype/keyfieldnames')
  Future<chopper.Response> eventtypeKeyfieldnamesGet();

  ///
  @Post(path: '/eventtypepersonneltype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      eventtypepersonneltypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/eventtypepersonneltype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      eventtypepersonneltypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/eventtypepersonneltype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogic>>
      eventtypepersonneltypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/eventtypepersonneltype')
  Future<
          chopper.Response<
              WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType>>
      eventtypepersonneltypePost(
          {@Body()
              required WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType?
                  body});

  ///
  ///@param id
  @Get(path: '/eventtypepersonneltype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType>>
      eventtypepersonneltypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/eventtypepersonneltype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType>>
      eventtypepersonneltypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType?
                  body});

  ///
  ///@param id
  @Delete(path: '/eventtypepersonneltype/{id}')
  Future<chopper.Response<bool>> eventtypepersonneltypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/eventtypepersonneltype/emptyobject')
  Future<chopper.Response> eventtypepersonneltypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/eventtypepersonneltype/emptybrowseobject')
  Future<chopper.Response> eventtypepersonneltypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/eventtypepersonneltype/keyfieldnames')
  Future<chopper.Response> eventtypepersonneltypeKeyfieldnamesGet();

  ///
  @Post(path: '/facilitycategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      facilitycategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/facilitycategory/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      facilitycategoryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/facilitycategory')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogic>>
      facilitycategoryGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/facilitycategory')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory>>
      facilitycategoryPost(
          {@Body()
              required WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory?
                  body});

  ///
  ///@param id
  @Get(path: '/facilitycategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory>>
      facilitycategoryIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/facilitycategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory>>
      facilitycategoryIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory?
                  body});

  ///
  ///@param id
  @Delete(path: '/facilitycategory/{id}')
  Future<chopper.Response<bool>> facilitycategoryIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/facilitycategory/validatefacilitytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      facilitycategoryValidatefacilitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/facilitycategory/validateincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      facilitycategoryValidateincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/facilitycategory/emptyobject')
  Future<chopper.Response> facilitycategoryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/facilitycategory/emptybrowseobject')
  Future<chopper.Response> facilitycategoryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/facilitycategory/keyfieldnames')
  Future<chopper.Response> facilitycategoryKeyfieldnamesGet();

  ///
  @Post(path: '/facilityrate/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      facilityrateBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/facilityrate/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      facilityrateExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/facilityrate')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogic>>
      facilityrateGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/facilityrate')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate>>
      facilityratePost(
          {@Body()
              required WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate?
                  body});

  ///
  ///@param id
  @Get(path: '/facilityrate/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate>>
      facilityrateIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/facilityrate/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate>>
      facilityrateIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate?
                  body});

  ///
  ///@param id
  @Delete(path: '/facilityrate/{id}')
  Future<chopper.Response<bool>> facilityrateIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/facilityrate/validatefacilitytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      facilityrateValidatefacilitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/facilityrate/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      facilityrateValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/facilityrate/validateunit/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      facilityrateValidateunitBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/facilityrate/validateprofitandlosscategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      facilityrateValidateprofitandlosscategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/facilityrate/emptyobject')
  Future<chopper.Response> facilityrateEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/facilityrate/emptybrowseobject')
  Future<chopper.Response> facilityrateEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/facilityrate/keyfieldnames')
  Future<chopper.Response> facilityrateKeyfieldnamesGet();

  ///
  @Post(path: '/facilityschedulestatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      facilityschedulestatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/facilityschedulestatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      facilityschedulestatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/facilityschedulestatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogic>>
      facilityschedulestatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/facilityschedulestatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus>>
      facilityschedulestatusPost(
          {@Body()
              required WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/facilityschedulestatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus>>
      facilityschedulestatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/facilityschedulestatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus>>
      facilityschedulestatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/facilityschedulestatus/{id}')
  Future<chopper.Response<bool>> facilityschedulestatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/facilityschedulestatus/emptyobject')
  Future<chopper.Response> facilityschedulestatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/facilityschedulestatus/emptybrowseobject')
  Future<chopper.Response> facilityschedulestatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/facilityschedulestatus/keyfieldnames')
  Future<chopper.Response> facilityschedulestatusKeyfieldnamesGet();

  ///
  @Post(path: '/facilitystatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      facilitystatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/facilitystatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      facilitystatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/facilitystatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogic>>
      facilitystatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/facilitystatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus>>
      facilitystatusPost(
          {@Body()
              required WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/facilitystatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus>>
      facilitystatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/facilitystatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus>>
      facilitystatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/facilitystatus/{id}')
  Future<chopper.Response<bool>> facilitystatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/facilitystatus/emptyobject')
  Future<chopper.Response> facilitystatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/facilitystatus/emptybrowseobject')
  Future<chopper.Response> facilitystatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/facilitystatus/keyfieldnames')
  Future<chopper.Response> facilitystatusKeyfieldnamesGet();

  ///
  @Post(path: '/facilitytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      facilitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/facilitytype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      facilitytypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/facilitytype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogic>>
      facilitytypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/facilitytype')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType>>
      facilitytypePost(
          {@Body()
              required WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType?
                  body});

  ///
  ///@param id
  @Get(path: '/facilitytype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType>>
      facilitytypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/facilitytype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType>>
      facilitytypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType?
                  body});

  ///
  ///@param id
  @Delete(path: '/facilitytype/{id}')
  Future<chopper.Response<bool>> facilitytypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/facilitytype/emptyobject')
  Future<chopper.Response> facilitytypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/facilitytype/emptybrowseobject')
  Future<chopper.Response> facilitytypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/facilitytype/keyfieldnames')
  Future<chopper.Response> facilitytypeKeyfieldnamesGet();

  ///
  @Post(path: '/fiscalmonth/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fiscalmonthBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/fiscalmonth/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      fiscalmonthExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/fiscalmonth')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogic>>
      fiscalmonthGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/fiscalmonth')
  Future<chopper.Response<WebApiModulesSettingsFiscalMonthFiscalMonth>>
      fiscalmonthPost(
          {@Body() required WebApiModulesSettingsFiscalMonthFiscalMonth? body});

  ///
  ///@param id
  @Get(path: '/fiscalmonth/{id}')
  Future<chopper.Response<WebApiModulesSettingsFiscalMonthFiscalMonth>>
      fiscalmonthIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/fiscalmonth/{id}')
  Future<chopper.Response<WebApiModulesSettingsFiscalMonthFiscalMonth>>
      fiscalmonthIdPut(
          {@Path('id') required String? id,
          @Body() required WebApiModulesSettingsFiscalMonthFiscalMonth? body});

  ///
  ///@param id
  @Delete(path: '/fiscalmonth/{id}')
  Future<chopper.Response<bool>> fiscalmonthIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/fiscalmonth/many')
  Future<
          chopper.Response<
              List<
                  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogic>>>
      fiscalmonthManyPost(
          {@Body()
              required List<WebApiModulesSettingsFiscalMonthFiscalMonth>?
                  body});

  ///Get an empty object
  @Get(path: '/fiscalmonth/emptyobject')
  Future<chopper.Response> fiscalmonthEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/fiscalmonth/emptybrowseobject')
  Future<chopper.Response> fiscalmonthEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/fiscalmonth/keyfieldnames')
  Future<chopper.Response> fiscalmonthKeyfieldnamesGet();

  ///
  @Post(path: '/fiscalyear/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fiscalyearBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/fiscalyear/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      fiscalyearExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/fiscalyear')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogic>>
      fiscalyearGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/fiscalyear')
  Future<chopper.Response<WebApiModulesSettingsFiscalYearFiscalYear>>
      fiscalyearPost(
          {@Body() required WebApiModulesSettingsFiscalYearFiscalYear? body});

  ///
  ///@param id
  @Get(path: '/fiscalyear/{id}')
  Future<chopper.Response<WebApiModulesSettingsFiscalYearFiscalYear>>
      fiscalyearIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/fiscalyear/{id}')
  Future<chopper.Response<WebApiModulesSettingsFiscalYearFiscalYear>>
      fiscalyearIdPut(
          {@Path('id') required String? id,
          @Body() required WebApiModulesSettingsFiscalYearFiscalYear? body});

  ///
  ///@param id
  @Delete(path: '/fiscalyear/{id}')
  Future<chopper.Response<bool>> fiscalyearIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/fiscalyear/emptyobject')
  Future<chopper.Response> fiscalyearEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/fiscalyear/emptybrowseobject')
  Future<chopper.Response> fiscalyearEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/fiscalyear/keyfieldnames')
  Future<chopper.Response> fiscalyearKeyfieldnamesGet();

  ///
  @Post(path: '/floor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> floorBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/floor/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      floorExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/floor')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogic>>
      floorGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/floor')
  Future<chopper.Response<WebApiModulesSettingsFloorFloor>> floorPost(
      {@Body() required WebApiModulesSettingsFloorFloor? body});

  ///
  ///@param id
  @Get(path: '/floor/{id}')
  Future<chopper.Response<WebApiModulesSettingsFloorFloor>> floorIdGet(
      {@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/floor/{id}')
  Future<chopper.Response<WebApiModulesSettingsFloorFloor>> floorIdPut(
      {@Path('id') required String? id,
      @Body() required WebApiModulesSettingsFloorFloor? body});

  ///
  ///@param id
  @Delete(path: '/floor/{id}')
  Future<chopper.Response<bool>> floorIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/floor/sort')
  Future<chopper.Response<WebApiLogicSortItemsResponse>> floorSortPost(
      {@Body()
          required WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequest?
              body});

  ///Get an empty object
  @Get(path: '/floor/emptyobject')
  Future<chopper.Response> floorEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/floor/emptybrowseobject')
  Future<chopper.Response> floorEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/floor/keyfieldnames')
  Future<chopper.Response> floorKeyfieldnamesGet();

  ///
  @Post(path: '/formdesign/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      formdesignBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/formdesign/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      formdesignExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/formdesign')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogic>>
      formdesignGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/formdesign')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationSettingsFormDesignFormDesign>>
      formdesignPost(
          {@Body()
              required WebApiModulesSettingsPresentationSettingsFormDesignFormDesign?
                  body});

  ///
  ///@param id
  @Get(path: '/formdesign/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationSettingsFormDesignFormDesign>>
      formdesignIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/formdesign/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationSettingsFormDesignFormDesign>>
      formdesignIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPresentationSettingsFormDesignFormDesign?
                  body});

  ///
  ///@param id
  @Delete(path: '/formdesign/{id}')
  Future<chopper.Response<bool>> formdesignIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/formdesign/emptyobject')
  Future<chopper.Response> formdesignEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/formdesign/emptybrowseobject')
  Future<chopper.Response> formdesignEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/formdesign/keyfieldnames')
  Future<chopper.Response> formdesignKeyfieldnamesGet();

  ///
  @Post(path: '/generatorfueltype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatorfueltypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatorfueltype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      generatorfueltypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/generatorfueltype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogic>>
      generatorfueltypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/generatorfueltype')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType>>
      generatorfueltypePost(
          {@Body()
              required WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType?
                  body});

  ///
  ///@param id
  @Get(path: '/generatorfueltype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType>>
      generatorfueltypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/generatorfueltype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType>>
      generatorfueltypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType?
                  body});

  ///
  ///@param id
  @Delete(path: '/generatorfueltype/{id}')
  Future<chopper.Response<bool>> generatorfueltypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/generatorfueltype/emptyobject')
  Future<chopper.Response> generatorfueltypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/generatorfueltype/emptybrowseobject')
  Future<chopper.Response> generatorfueltypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/generatorfueltype/keyfieldnames')
  Future<chopper.Response> generatorfueltypeKeyfieldnamesGet();

  ///
  @Post(path: '/generatormake/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatormakeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatormake/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      generatormakeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/generatormake')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogic>>
      generatormakeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/generatormake')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake>>
      generatormakePost(
          {@Body()
              required WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake?
                  body});

  ///
  ///@param id
  @Get(path: '/generatormake/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake>>
      generatormakeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/generatormake/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake>>
      generatormakeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake?
                  body});

  ///
  ///@param id
  @Delete(path: '/generatormake/{id}')
  Future<chopper.Response<bool>> generatormakeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/generatormake/emptyobject')
  Future<chopper.Response> generatormakeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/generatormake/emptybrowseobject')
  Future<chopper.Response> generatormakeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/generatormake/keyfieldnames')
  Future<chopper.Response> generatormakeKeyfieldnamesGet();

  ///
  @Post(path: '/generatormodel/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatormodelBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatormodel/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      generatormodelExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/generatormodel')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogic>>
      generatormodelGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/generatormodel')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel>>
      generatormodelPost(
          {@Body()
              required WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel?
                  body});

  ///
  ///@param id
  @Get(path: '/generatormodel/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel>>
      generatormodelIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/generatormodel/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel>>
      generatormodelIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel?
                  body});

  ///
  ///@param id
  @Delete(path: '/generatormodel/{id}')
  Future<chopper.Response<bool>> generatormodelIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/generatormodel/emptyobject')
  Future<chopper.Response> generatormodelEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/generatormodel/emptybrowseobject')
  Future<chopper.Response> generatormodelEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/generatormodel/keyfieldnames')
  Future<chopper.Response> generatormodelKeyfieldnamesGet();

  ///
  @Post(path: '/generatorrating/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatorratingBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatorrating/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      generatorratingExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/generatorrating')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogic>>
      generatorratingGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/generatorrating')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating>>
      generatorratingPost(
          {@Body()
              required WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating?
                  body});

  ///
  ///@param id
  @Get(path: '/generatorrating/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating>>
      generatorratingIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/generatorrating/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating>>
      generatorratingIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating?
                  body});

  ///
  ///@param id
  @Delete(path: '/generatorrating/{id}')
  Future<chopper.Response<bool>> generatorratingIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/generatorrating/emptyobject')
  Future<chopper.Response> generatorratingEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/generatorrating/emptybrowseobject')
  Future<chopper.Response> generatorratingEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/generatorrating/keyfieldnames')
  Future<chopper.Response> generatorratingKeyfieldnamesGet();

  ///
  @Post(path: '/generatortype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatortypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatortype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      generatortypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/generatortype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogic>>
      generatortypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/generatortype')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType>>
      generatortypePost(
          {@Body()
              required WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType?
                  body});

  ///
  ///@param id
  @Get(path: '/generatortype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType>>
      generatortypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/generatortype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType>>
      generatortypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType?
                  body});

  ///
  ///@param id
  @Delete(path: '/generatortype/{id}')
  Future<chopper.Response<bool>> generatortypeIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/generatortype/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatortypeValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatortype/validateunit/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatortypeValidateunitBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatortype/validateassetaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatortypeValidateassetaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatortype/validateincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatortypeValidateincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatortype/validatesubincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatortypeValidatesubincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatortype/validateequipmentsaleincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatortypeValidateequipmentsaleincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatortype/validateldincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatortypeValidateldincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatortype/validatecostofgoodssoldexpenseaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatortypeValidatecostofgoodssoldexpenseaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatortype/validatecostofgoodsrentedexpenseaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatortypeValidatecostofgoodsrentedexpenseaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/generatortype/emptyobject')
  Future<chopper.Response> generatortypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/generatortype/emptybrowseobject')
  Future<chopper.Response> generatortypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/generatortype/keyfieldnames')
  Future<chopper.Response> generatortypeKeyfieldnamesGet();

  ///
  @Post(path: '/generatortypewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatortypewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatortypewarehouse/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      generatortypewarehouseExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/generatortypewarehouse')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogic>>
      generatortypewarehouseGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/generatortypewarehouse')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse>>
      generatortypewarehousePost(
          {@Body()
              required WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse?
                  body});

  ///
  ///@param id
  @Get(path: '/generatortypewarehouse/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse>>
      generatortypewarehouseIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/generatortypewarehouse/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse>>
      generatortypewarehouseIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse?
                  body});

  ///
  ///@param id
  @Delete(path: '/generatortypewarehouse/{id}')
  Future<chopper.Response<bool>> generatortypewarehouseIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/generatortypewarehouse/emptyobject')
  Future<chopper.Response> generatortypewarehouseEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/generatortypewarehouse/emptybrowseobject')
  Future<chopper.Response> generatortypewarehouseEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/generatortypewarehouse/keyfieldnames')
  Future<chopper.Response> generatortypewarehouseKeyfieldnamesGet();

  ///
  @Post(path: '/generatorwatts/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      generatorwattsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/generatorwatts/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      generatorwattsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/generatorwatts')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogic>>
      generatorwattsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/generatorwatts')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts>>
      generatorwattsPost(
          {@Body()
              required WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts?
                  body});

  ///
  ///@param id
  @Get(path: '/generatorwatts/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts>>
      generatorwattsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/generatorwatts/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts>>
      generatorwattsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts?
                  body});

  ///
  ///@param id
  @Delete(path: '/generatorwatts/{id}')
  Future<chopper.Response<bool>> generatorwattsIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/generatorwatts/emptyobject')
  Future<chopper.Response> generatorwattsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/generatorwatts/emptybrowseobject')
  Future<chopper.Response> generatorwattsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/generatorwatts/keyfieldnames')
  Future<chopper.Response> generatorwattsKeyfieldnamesGet();

  ///
  @Post(path: '/glaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      glaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/glaccount/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      glaccountExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/glaccount')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogic>>
      glaccountGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/glaccount')
  Future<
          chopper.Response<
              WebApiModulesSettingsAccountingSettingsGlAccountGlAccount>>
      glaccountPost(
          {@Body()
              required WebApiModulesSettingsAccountingSettingsGlAccountGlAccount?
                  body});

  ///
  ///@param id
  @Get(path: '/glaccount/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsAccountingSettingsGlAccountGlAccount>>
      glaccountIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/glaccount/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsAccountingSettingsGlAccountGlAccount>>
      glaccountIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsAccountingSettingsGlAccountGlAccount?
                  body});

  ///
  ///@param id
  @Delete(path: '/glaccount/{id}')
  Future<chopper.Response<bool>> glaccountIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/glaccount/emptyobject')
  Future<chopper.Response> glaccountEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/glaccount/emptybrowseobject')
  Future<chopper.Response> glaccountEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/glaccount/keyfieldnames')
  Future<chopper.Response> glaccountKeyfieldnamesGet();

  ///
  @Post(path: '/gldistributionrule/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionruleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/gldistributionrule/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      gldistributionruleExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/gldistributionrule')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogic>>
      gldistributionruleGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  ///@param id
  @Get(path: '/gldistributionrule/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule>>
      gldistributionruleIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/gldistributionrule/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule>>
      gldistributionruleIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule?
                  body});

  ///
  @Post(path: '/gldistributionrule/validateglaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionruleValidateglaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/gldistributionrule/emptyobject')
  Future<chopper.Response> gldistributionruleEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/gldistributionrule/emptybrowseobject')
  Future<chopper.Response> gldistributionruleEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/gldistributionrule/keyfieldnames')
  Future<chopper.Response> gldistributionruleKeyfieldnamesGet();

  ///
  @Post(path: '/holiday/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      holidayBrowsePost({@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/holiday/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      holidayExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/holiday')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogic>>
      holidayGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/holiday')
  Future<chopper.Response<WebApiModulesSettingsCalendarSettingsHolidayHoliday>>
      holidayPost(
          {@Body()
              required WebApiModulesSettingsCalendarSettingsHolidayHoliday?
                  body});

  ///
  ///@param id
  @Get(path: '/holiday/{id}')
  Future<chopper.Response<WebApiModulesSettingsCalendarSettingsHolidayHoliday>>
      holidayIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/holiday/{id}')
  Future<chopper.Response<WebApiModulesSettingsCalendarSettingsHolidayHoliday>>
      holidayIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsCalendarSettingsHolidayHoliday?
                  body});

  ///
  ///@param id
  @Delete(path: '/holiday/{id}')
  Future<chopper.Response<bool>> holidayIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/holiday/validatecountry/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      holidayValidatecountryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/holiday/emptyobject')
  Future<chopper.Response> holidayEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/holiday/emptybrowseobject')
  Future<chopper.Response> holidayEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/holiday/keyfieldnames')
  Future<chopper.Response> holidayKeyfieldnamesGet();

  ///
  @Post(path: '/inventoryadjustmentreason/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryadjustmentreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventoryadjustmentreason/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventoryadjustmentreasonExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventoryadjustmentreason')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogic>>
      inventoryadjustmentreasonGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/inventoryadjustmentreason')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason>>
      inventoryadjustmentreasonPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason?
                  body});

  ///
  ///@param id
  @Get(path: '/inventoryadjustmentreason/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason>>
      inventoryadjustmentreasonIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/inventoryadjustmentreason/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason>>
      inventoryadjustmentreasonIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason?
                  body});

  ///
  ///@param id
  @Delete(path: '/inventoryadjustmentreason/{id}')
  Future<chopper.Response<bool>> inventoryadjustmentreasonIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/inventoryadjustmentreason/emptyobject')
  Future<chopper.Response> inventoryadjustmentreasonEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/inventoryadjustmentreason/emptybrowseobject')
  Future<chopper.Response> inventoryadjustmentreasonEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/inventoryadjustmentreason/keyfieldnames')
  Future<chopper.Response> inventoryadjustmentreasonKeyfieldnamesGet();

  ///
  @Post(path: '/inventorycondition/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryconditionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventorycondition/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventoryconditionExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorycondition')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogic>>
      inventoryconditionGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/inventorycondition')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition>>
      inventoryconditionPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition?
                  body});

  ///
  ///@param id
  @Get(path: '/inventorycondition/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition>>
      inventoryconditionIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/inventorycondition/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition>>
      inventoryconditionIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition?
                  body});

  ///
  ///@param id
  @Delete(path: '/inventorycondition/{id}')
  Future<chopper.Response<bool>> inventoryconditionIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/inventorycondition/emptyobject')
  Future<chopper.Response> inventoryconditionEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/inventorycondition/emptybrowseobject')
  Future<chopper.Response> inventoryconditionEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/inventorycondition/keyfieldnames')
  Future<chopper.Response> inventoryconditionKeyfieldnamesGet();

  ///
  @Post(path: '/inventorygroup/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorygroupBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventorygroup/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorygroupExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorygroup')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogic>>
      inventorygroupGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/inventorygroup')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup>>
      inventorygroupPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup?
                  body});

  ///
  ///@param id
  @Get(path: '/inventorygroup/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup>>
      inventorygroupIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/inventorygroup/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup>>
      inventorygroupIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup?
                  body});

  ///
  ///@param id
  @Delete(path: '/inventorygroup/{id}')
  Future<chopper.Response<bool>> inventorygroupIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/inventorygroup/emptyobject')
  Future<chopper.Response> inventorygroupEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/inventorygroup/emptybrowseobject')
  Future<chopper.Response> inventorygroupEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/inventorygroup/keyfieldnames')
  Future<chopper.Response> inventorygroupKeyfieldnamesGet();

  ///
  @Post(path: '/inventorygroupinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorygroupinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventorygroupinventory/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorygroupinventoryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorygroupinventory')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogic>>
      inventorygroupinventoryGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/inventorygroupinventory')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory>>
      inventorygroupinventoryPost(
          {@Body()
              required WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory?
                  body});

  ///
  ///@param id
  @Get(path: '/inventorygroupinventory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory>>
      inventorygroupinventoryIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/inventorygroupinventory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory>>
      inventorygroupinventoryIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory?
                  body});

  ///
  ///@param id
  @Delete(path: '/inventorygroupinventory/{id}')
  Future<chopper.Response<bool>> inventorygroupinventoryIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/inventorygroupinventory/validateicoderental/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorygroupinventoryValidateicoderentalBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventorygroupinventory/validateicodesales/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorygroupinventoryValidateicodesalesBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventorygroupinventory/validateicodeparts/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorygroupinventoryValidateicodepartsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/inventorygroupinventory/emptyobject')
  Future<chopper.Response> inventorygroupinventoryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/inventorygroupinventory/emptybrowseobject')
  Future<chopper.Response> inventorygroupinventoryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/inventorygroupinventory/keyfieldnames')
  Future<chopper.Response> inventorygroupinventoryKeyfieldnamesGet();

  ///
  @Post(path: '/inventoryrank/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryrankBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventoryrank/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventoryrankExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventoryrank')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogic>>
      inventoryrankGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/inventoryrank')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank>>
      inventoryrankPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank?
                  body});

  ///
  ///@param id
  @Get(path: '/inventoryrank/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank>>
      inventoryrankIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/inventoryrank/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank>>
      inventoryrankIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank?
                  body});

  ///
  ///@param id
  @Delete(path: '/inventoryrank/{id}')
  Future<chopper.Response<bool>> inventoryrankIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/inventoryrank/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryrankValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventoryrank/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryrankValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/inventoryrank/emptyobject')
  Future<chopper.Response> inventoryrankEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/inventoryrank/emptybrowseobject')
  Future<chopper.Response> inventoryrankEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/inventoryrank/keyfieldnames')
  Future<chopper.Response> inventoryrankKeyfieldnamesGet();

  ///
  @Post(path: '/inventorysettings/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorysettingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventorysettings/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorysettingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorysettings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogic>>
      inventorysettingsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/inventorysettings')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings>>
      inventorysettingsPost(
          {@Body()
              required WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings?
                  body});

  ///
  ///@param id
  @Get(path: '/inventorysettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings>>
      inventorysettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/inventorysettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings>>
      inventorysettingsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings?
                  body});

  ///Get an empty object
  @Get(path: '/inventorysettings/emptyobject')
  Future<chopper.Response> inventorysettingsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/inventorysettings/emptybrowseobject')
  Future<chopper.Response> inventorysettingsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/inventorysettings/keyfieldnames')
  Future<chopper.Response> inventorysettingsKeyfieldnamesGet();

  ///
  @Post(path: '/inventorystatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventorystatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorystatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorystatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogic>>
      inventorystatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/inventorystatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus>>
      inventorystatusPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/inventorystatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus>>
      inventorystatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/inventorystatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus>>
      inventorystatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/inventorystatus/{id}')
  Future<chopper.Response<bool>> inventorystatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/inventorystatus/emptyobject')
  Future<chopper.Response> inventorystatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/inventorystatus/emptybrowseobject')
  Future<chopper.Response> inventorystatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/inventorystatus/keyfieldnames')
  Future<chopper.Response> inventorystatusKeyfieldnamesGet();

  ///
  @Post(path: '/inventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventorytype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorytypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorytype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogic>>
      inventorytypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/inventorytype')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType>>
      inventorytypePost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType?
                  body});

  ///
  ///@param id
  @Get(path: '/inventorytype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType>>
      inventorytypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/inventorytype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType>>
      inventorytypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType?
                  body});

  ///
  ///@param id
  @Delete(path: '/inventorytype/{id}')
  Future<chopper.Response<bool>> inventorytypeIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/inventorytype/sort')
  Future<chopper.Response<WebApiLogicSortItemsResponse>> inventorytypeSortPost(
      {@Body()
          required WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequest?
              body});

  ///Get an empty object
  @Get(path: '/inventorytype/emptyobject')
  Future<chopper.Response> inventorytypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/inventorytype/emptybrowseobject')
  Future<chopper.Response> inventorytypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/inventorytype/keyfieldnames')
  Future<chopper.Response> inventorytypeKeyfieldnamesGet();

  ///
  @Post(path: '/laborcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      laborcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/laborcategory/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      laborcategoryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/laborcategory')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogic>>
      laborcategoryGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/laborcategory')
  Future<
          chopper.Response<
              WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory>>
      laborcategoryPost(
          {@Body()
              required WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory?
                  body});

  ///
  ///@param id
  @Get(path: '/laborcategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory>>
      laborcategoryIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/laborcategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory>>
      laborcategoryIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory?
                  body});

  ///
  ///@param id
  @Delete(path: '/laborcategory/{id}')
  Future<chopper.Response<bool>> laborcategoryIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/laborcategory/validatelabortype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      laborcategoryValidatelabortypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/laborcategory/validateprofitandlosscategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      laborcategoryValidateprofitandlosscategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/laborcategory/validateincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      laborcategoryValidateincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/laborcategory/validatesubincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      laborcategoryValidatesubincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/laborcategory/validateexpenseaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      laborcategoryValidateexpenseaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/laborcategory/emptyobject')
  Future<chopper.Response> laborcategoryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/laborcategory/emptybrowseobject')
  Future<chopper.Response> laborcategoryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/laborcategory/keyfieldnames')
  Future<chopper.Response> laborcategoryKeyfieldnamesGet();

  ///
  @Post(path: '/laborrate/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      laborrateBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/laborrate/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      laborrateExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/laborrate')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogic>>
      laborrateGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/laborrate')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsLaborRateLaborRate>>
      laborratePost(
          {@Body()
              required WebApiModulesSettingsLaborSettingsLaborRateLaborRate?
                  body});

  ///
  ///@param id
  @Get(path: '/laborrate/{id}')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsLaborRateLaborRate>>
      laborrateIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/laborrate/{id}')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsLaborRateLaborRate>>
      laborrateIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsLaborSettingsLaborRateLaborRate?
                  body});

  ///
  ///@param id
  @Delete(path: '/laborrate/{id}')
  Future<chopper.Response<bool>> laborrateIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/laborrate/validatelabortype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      laborrateValidatelabortypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/laborrate/validatelaborcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      laborrateValidatelaborcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/laborrate/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      laborrateValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/laborrate/validateunit/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      laborrateValidateunitBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/laborrate/emptyobject')
  Future<chopper.Response> laborrateEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/laborrate/emptybrowseobject')
  Future<chopper.Response> laborrateEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/laborrate/keyfieldnames')
  Future<chopper.Response> laborrateKeyfieldnamesGet();

  ///
  @Post(path: '/labortype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      labortypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/labortype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      labortypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/labortype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogic>>
      labortypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/labortype')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsLaborTypeLaborType>>
      labortypePost(
          {@Body()
              required WebApiModulesSettingsLaborSettingsLaborTypeLaborType?
                  body});

  ///
  ///@param id
  @Get(path: '/labortype/{id}')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsLaborTypeLaborType>>
      labortypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/labortype/{id}')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsLaborTypeLaborType>>
      labortypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsLaborSettingsLaborTypeLaborType?
                  body});

  ///
  ///@param id
  @Delete(path: '/labortype/{id}')
  Future<chopper.Response<bool>> labortypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/labortype/emptyobject')
  Future<chopper.Response> labortypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/labortype/emptybrowseobject')
  Future<chopper.Response> labortypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/labortype/keyfieldnames')
  Future<chopper.Response> labortypeKeyfieldnamesGet();

  ///
  @Post(path: '/licenseclass/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      licenseclassBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/licenseclass/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      licenseclassExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/licenseclass')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogic>>
      licenseclassGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/licenseclass')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass>>
      licenseclassPost(
          {@Body()
              required WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass?
                  body});

  ///
  ///@param id
  @Get(path: '/licenseclass/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass>>
      licenseclassIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/licenseclass/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass>>
      licenseclassIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass?
                  body});

  ///
  ///@param id
  @Delete(path: '/licenseclass/{id}')
  Future<chopper.Response<bool>> licenseclassIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/licenseclass/emptyobject')
  Future<chopper.Response> licenseclassEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/licenseclass/emptybrowseobject')
  Future<chopper.Response> licenseclassEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/licenseclass/keyfieldnames')
  Future<chopper.Response> licenseclassKeyfieldnamesGet();

  ///
  @Post(path: '/logosettings/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      logosettingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/logosettings/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      logosettingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/logosettings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogic>>
      logosettingsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/logosettings')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings>>
      logosettingsPost(
          {@Body()
              required WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings?
                  body});

  ///
  ///@param id
  @Get(path: '/logosettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings>>
      logosettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/logosettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings>>
      logosettingsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings?
                  body});

  ///Get an empty object
  @Get(path: '/logosettings/emptyobject')
  Future<chopper.Response> logosettingsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/logosettings/emptybrowseobject')
  Future<chopper.Response> logosettingsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/logosettings/keyfieldnames')
  Future<chopper.Response> logosettingsKeyfieldnamesGet();

  ///
  @Post(path: '/maillist/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      maillistBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/maillist/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      maillistExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/maillist')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogic>>
      maillistGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/maillist')
  Future<chopper.Response<WebApiModulesSettingsContactSettingsMailListMailList>>
      maillistPost(
          {@Body()
              required WebApiModulesSettingsContactSettingsMailListMailList?
                  body});

  ///
  ///@param id
  @Get(path: '/maillist/{id}')
  Future<chopper.Response<WebApiModulesSettingsContactSettingsMailListMailList>>
      maillistIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/maillist/{id}')
  Future<chopper.Response<WebApiModulesSettingsContactSettingsMailListMailList>>
      maillistIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsContactSettingsMailListMailList?
                  body});

  ///
  ///@param id
  @Delete(path: '/maillist/{id}')
  Future<chopper.Response<bool>> maillistIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/maillist/emptyobject')
  Future<chopper.Response> maillistEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/maillist/emptybrowseobject')
  Future<chopper.Response> maillistEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/maillist/keyfieldnames')
  Future<chopper.Response> maillistKeyfieldnamesGet();

  ///
  @Post(path: '/marketsegment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      marketsegmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/marketsegment/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      marketsegmentExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/marketsegment')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogic>>
      marketsegmentGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/marketsegment')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment>>
      marketsegmentPost(
          {@Body()
              required WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment?
                  body});

  ///
  ///@param id
  @Get(path: '/marketsegment/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment>>
      marketsegmentIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/marketsegment/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment>>
      marketsegmentIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment?
                  body});

  ///
  ///@param id
  @Delete(path: '/marketsegment/{id}')
  Future<chopper.Response<bool>> marketsegmentIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/marketsegment/validatemarkettype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      marketsegmentValidatemarkettypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/marketsegment/emptyobject')
  Future<chopper.Response> marketsegmentEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/marketsegment/emptybrowseobject')
  Future<chopper.Response> marketsegmentEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/marketsegment/keyfieldnames')
  Future<chopper.Response> marketsegmentKeyfieldnamesGet();

  ///
  @Post(path: '/marketsegmentjob/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      marketsegmentjobBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/marketsegmentjob/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      marketsegmentjobExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/marketsegmentjob')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogic>>
      marketsegmentjobGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/marketsegmentjob')
  Future<
          chopper
              .Response<WebApiModulesSettingsMarketSegmentJobMarketSegmentJob>>
      marketsegmentjobPost(
          {@Body()
              required WebApiModulesSettingsMarketSegmentJobMarketSegmentJob?
                  body});

  ///
  ///@param id
  @Get(path: '/marketsegmentjob/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsMarketSegmentJobMarketSegmentJob>>
      marketsegmentjobIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/marketsegmentjob/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsMarketSegmentJobMarketSegmentJob>>
      marketsegmentjobIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsMarketSegmentJobMarketSegmentJob?
                  body});

  ///
  ///@param id
  @Delete(path: '/marketsegmentjob/{id}')
  Future<chopper.Response<bool>> marketsegmentjobIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/marketsegmentjob/emptyobject')
  Future<chopper.Response> marketsegmentjobEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/marketsegmentjob/emptybrowseobject')
  Future<chopper.Response> marketsegmentjobEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/marketsegmentjob/keyfieldnames')
  Future<chopper.Response> marketsegmentjobKeyfieldnamesGet();

  ///
  @Post(path: '/markettype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      markettypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/markettype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      markettypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/markettype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogic>>
      markettypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/markettype')
  Future<
          chopper
              .Response<WebApiModulesSettingsOrderSettingsMarketTypeMarketType>>
      markettypePost(
          {@Body()
              required WebApiModulesSettingsOrderSettingsMarketTypeMarketType?
                  body});

  ///
  ///@param id
  @Get(path: '/markettype/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsOrderSettingsMarketTypeMarketType>>
      markettypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/markettype/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsOrderSettingsMarketTypeMarketType>>
      markettypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsOrderSettingsMarketTypeMarketType?
                  body});

  ///
  ///@param id
  @Delete(path: '/markettype/{id}')
  Future<chopper.Response<bool>> markettypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/markettype/emptyobject')
  Future<chopper.Response> markettypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/markettype/emptybrowseobject')
  Future<chopper.Response> markettypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/markettype/keyfieldnames')
  Future<chopper.Response> markettypeKeyfieldnamesGet();

  ///
  @Post(path: '/misccategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      misccategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/misccategory/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      misccategoryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/misccategory')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogic>>
      misccategoryGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/misccategory')
  Future<
          chopper.Response<
              WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory>>
      misccategoryPost(
          {@Body()
              required WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory?
                  body});

  ///
  ///@param id
  @Get(path: '/misccategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory>>
      misccategoryIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/misccategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory>>
      misccategoryIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory?
                  body});

  ///
  ///@param id
  @Delete(path: '/misccategory/{id}')
  Future<chopper.Response<bool>> misccategoryIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/misccategory/validatemisctype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      misccategoryValidatemisctypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/misccategory/validateprofitandlosscategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      misccategoryValidateprofitandlosscategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/misccategory/validateincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      misccategoryValidateincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/misccategory/validatesubincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      misccategoryValidatesubincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/misccategory/validateexpenseaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      misccategoryValidateexpenseaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/misccategory/emptyobject')
  Future<chopper.Response> misccategoryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/misccategory/emptybrowseobject')
  Future<chopper.Response> misccategoryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/misccategory/keyfieldnames')
  Future<chopper.Response> misccategoryKeyfieldnamesGet();

  ///
  @Post(path: '/miscrate/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      miscrateBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/miscrate/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      miscrateExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/miscrate')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogic>>
      miscrateGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/miscrate')
  Future<
          chopper.Response<
              WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate>>
      miscratePost(
          {@Body()
              required WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate?
                  body});

  ///
  ///@param id
  @Get(path: '/miscrate/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate>>
      miscrateIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/miscrate/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate>>
      miscrateIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate?
                  body});

  ///
  ///@param id
  @Delete(path: '/miscrate/{id}')
  Future<chopper.Response<bool>> miscrateIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/miscrate/emptyobject')
  Future<chopper.Response> miscrateEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/miscrate/emptybrowseobject')
  Future<chopper.Response> miscrateEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/miscrate/keyfieldnames')
  Future<chopper.Response> miscrateKeyfieldnamesGet();

  ///
  @Post(path: '/misctype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      misctypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/misctype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      misctypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/misctype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogic>>
      misctypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/misctype')
  Future<
          chopper.Response<
              WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType>>
      misctypePost(
          {@Body()
              required WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType?
                  body});

  ///
  ///@param id
  @Get(path: '/misctype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType>>
      misctypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/misctype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType>>
      misctypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType?
                  body});

  ///
  ///@param id
  @Delete(path: '/misctype/{id}')
  Future<chopper.Response<bool>> misctypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/misctype/emptyobject')
  Future<chopper.Response> misctypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/misctype/emptybrowseobject')
  Future<chopper.Response> misctypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/misctype/keyfieldnames')
  Future<chopper.Response> misctypeKeyfieldnamesGet();

  ///
  @Post(path: '/numberformat/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      numberformatBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/numberformat/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      numberformatExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/numberformat')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogic>>
      numberformatGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  ///@param id
  @Get(path: '/numberformat/{id}')
  Future<chopper.Response<WebApiModulesSettingsNumberFormatNumberFormat>>
      numberformatIdGet({@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/numberformat/emptyobject')
  Future<chopper.Response> numberformatEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/numberformat/emptybrowseobject')
  Future<chopper.Response> numberformatEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/numberformat/keyfieldnames')
  Future<chopper.Response> numberformatKeyfieldnamesGet();

  ///
  @Post(path: '/officelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      officelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/officelocation/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      officelocationExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/officelocation')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogic>>
      officelocationGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/officelocation')
  Future<
          chopper.Response<
              WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation>>
      officelocationPost(
          {@Body()
              required WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation?
                  body});

  ///
  ///@param id
  @Get(path: '/officelocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation>>
      officelocationIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/officelocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation>>
      officelocationIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation?
                  body});

  ///
  ///@param id
  @Delete(path: '/officelocation/{id}')
  Future<chopper.Response<bool>> officelocationIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/officelocation/validateratetype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      officelocationValidateratetypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/officelocation/validatedefaultpurchasepotype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      officelocationValidatedefaultpurchasepotypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/officelocation/emptyobject')
  Future<chopper.Response> officelocationEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/officelocation/emptybrowseobject')
  Future<chopper.Response> officelocationEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/officelocation/keyfieldnames')
  Future<chopper.Response> officelocationKeyfieldnamesGet();

  ///
  @Post(path: '/orderitemrectype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderitemrectypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/orderitemrectype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      orderitemrectypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/orderitemrectype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogic>>
      orderitemrectypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  ///@param id
  @Get(path: '/orderitemrectype/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsOrderItemRecTypeOrderItemRecType>>
      orderitemrectypeIdGet({@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/orderitemrectype/emptyobject')
  Future<chopper.Response> orderitemrectypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/orderitemrectype/emptybrowseobject')
  Future<chopper.Response> orderitemrectypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/orderitemrectype/keyfieldnames')
  Future<chopper.Response> orderitemrectypeKeyfieldnamesGet();

  ///
  @Post(path: '/orderlocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderlocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/orderlocation/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      orderlocationExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/orderlocation')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogic>>
      orderlocationGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/orderlocation')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation>>
      orderlocationPost(
          {@Body()
              required WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation?
                  body});

  ///
  ///@param id
  @Get(path: '/orderlocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation>>
      orderlocationIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/orderlocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation>>
      orderlocationIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation?
                  body});

  ///
  ///@param id
  @Delete(path: '/orderlocation/{id}')
  Future<chopper.Response<bool>> orderlocationIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/orderlocation/validatelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderlocationValidatelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/orderlocation/emptyobject')
  Future<chopper.Response> orderlocationEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/orderlocation/emptybrowseobject')
  Future<chopper.Response> orderlocationEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/orderlocation/keyfieldnames')
  Future<chopper.Response> orderlocationKeyfieldnamesGet();

  ///
  @Post(path: '/ordersetno/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersetnoBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordersetno/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      ordersetnoExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/ordersetno')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogic>>
      ordersetnoGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/ordersetno')
  Future<
          chopper
              .Response<WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo>>
      ordersetnoPost(
          {@Body()
              required WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo?
                  body});

  ///
  ///@param id
  @Get(path: '/ordersetno/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo>>
      ordersetnoIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/ordersetno/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo>>
      ordersetnoIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo?
                  body});

  ///
  ///@param id
  @Delete(path: '/ordersetno/{id}')
  Future<chopper.Response<bool>> ordersetnoIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/ordersetno/emptyobject')
  Future<chopper.Response> ordersetnoEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/ordersetno/emptybrowseobject')
  Future<chopper.Response> ordersetnoEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/ordersetno/keyfieldnames')
  Future<chopper.Response> ordersetnoKeyfieldnamesGet();

  ///
  @Post(path: '/orderstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/orderstatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      orderstatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/orderstatus/emptyobject')
  Future<chopper.Response> orderstatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/orderstatus/emptybrowseobject')
  Future<chopper.Response> orderstatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/orderstatus/keyfieldnames')
  Future<chopper.Response> orderstatusKeyfieldnamesGet();

  ///
  @Post(path: '/ordertype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordertypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordertype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      ordertypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/ordertype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogic>>
      ordertypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/ordertype')
  Future<chopper.Response<WebApiModulesSettingsOrderSettingsOrderTypeOrderType>>
      ordertypePost(
          {@Body()
              required WebApiModulesSettingsOrderSettingsOrderTypeOrderType?
                  body});

  ///
  ///@param id
  @Get(path: '/ordertype/{id}')
  Future<chopper.Response<WebApiModulesSettingsOrderSettingsOrderTypeOrderType>>
      ordertypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/ordertype/{id}')
  Future<chopper.Response<WebApiModulesSettingsOrderSettingsOrderTypeOrderType>>
      ordertypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsOrderSettingsOrderTypeOrderType?
                  body});

  ///
  ///@param id
  @Delete(path: '/ordertype/{id}')
  Future<chopper.Response<bool>> ordertypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/ordertype/emptyobject')
  Future<chopper.Response> ordertypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/ordertype/emptybrowseobject')
  Future<chopper.Response> ordertypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/ordertype/keyfieldnames')
  Future<chopper.Response> ordertypeKeyfieldnamesGet();

  ///
  @Post(path: '/ordertypecontacttitle/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordertypecontacttitleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordertypecontacttitle/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      ordertypecontacttitleExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/ordertypecontacttitle')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogic>>
      ordertypecontacttitleGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/ordertypecontacttitle')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle>>
      ordertypecontacttitlePost(
          {@Body()
              required WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle?
                  body});

  ///
  ///@param id
  @Get(path: '/ordertypecontacttitle/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle>>
      ordertypecontacttitleIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/ordertypecontacttitle/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle>>
      ordertypecontacttitleIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle?
                  body});

  ///
  ///@param id
  @Delete(path: '/ordertypecontacttitle/{id}')
  Future<chopper.Response<bool>> ordertypecontacttitleIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/ordertypecontacttitle/validatecontacttitle/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordertypecontacttitleValidatecontacttitleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/ordertypecontacttitle/emptyobject')
  Future<chopper.Response> ordertypecontacttitleEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/ordertypecontacttitle/emptybrowseobject')
  Future<chopper.Response> ordertypecontacttitleEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/ordertypecontacttitle/keyfieldnames')
  Future<chopper.Response> ordertypecontacttitleKeyfieldnamesGet();

  ///
  @Post(path: '/ordertypedatetype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordertypedatetypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordertypedatetype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      ordertypedatetypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/ordertypedatetype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogic>>
      ordertypedatetypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/ordertypedatetype')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType>>
      ordertypedatetypePost(
          {@Body()
              required WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType?
                  body});

  ///
  ///@param id
  @Get(path: '/ordertypedatetype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType>>
      ordertypedatetypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/ordertypedatetype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType>>
      ordertypedatetypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType?
                  body});

  ///
  ///@param id
  @Delete(path: '/ordertypedatetype/{id}')
  Future<chopper.Response<bool>> ordertypedatetypeIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/ordertypedatetype/sort')
  Future<
      chopper
          .Response<WebApiLogicSortItemsResponse>> ordertypedatetypeSortPost(
      {@Body()
          required WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequest?
              body});

  ///Get an empty object
  @Get(path: '/ordertypedatetype/emptyobject')
  Future<chopper.Response> ordertypedatetypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/ordertypedatetype/emptybrowseobject')
  Future<chopper.Response> ordertypedatetypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/ordertypedatetype/keyfieldnames')
  Future<chopper.Response> ordertypedatetypeKeyfieldnamesGet();

  ///
  @Post(path: '/ordertypelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordertypelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordertypelocation/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      ordertypelocationExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/ordertypelocation')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogic>>
      ordertypelocationGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/ordertypelocation')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderTypeLocationOrderTypeLocation>>
      ordertypelocationPost(
          {@Body()
              required WebApiModulesSettingsOrderTypeLocationOrderTypeLocation?
                  body});

  ///
  ///@param id
  @Get(path: '/ordertypelocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderTypeLocationOrderTypeLocation>>
      ordertypelocationIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/ordertypelocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsOrderTypeLocationOrderTypeLocation>>
      ordertypelocationIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsOrderTypeLocationOrderTypeLocation?
                  body});

  ///
  ///@param id
  @Delete(path: '/ordertypelocation/{id}')
  Future<chopper.Response<bool>> ordertypelocationIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/ordertypelocation/validatetermsconditions/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordertypelocationValidatetermsconditionsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordertypelocation/validatecoverletter/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordertypelocationValidatecoverletterBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/ordertypelocation/emptyobject')
  Future<chopper.Response> ordertypelocationEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/ordertypelocation/emptybrowseobject')
  Future<chopper.Response> ordertypelocationEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/ordertypelocation/keyfieldnames')
  Future<chopper.Response> ordertypelocationKeyfieldnamesGet();

  ///
  @Post(path: '/ordertypenote/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordertypenoteBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordertypenote/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      ordertypenoteExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/ordertypenote')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogic>>
      ordertypenoteGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/ordertypenote')
  Future<chopper.Response<WebApiModulesSettingsOrderTypeNoteOrderTypeNote>>
      ordertypenotePost(
          {@Body()
              required WebApiModulesSettingsOrderTypeNoteOrderTypeNote? body});

  ///
  ///@param id
  @Get(path: '/ordertypenote/{id}')
  Future<chopper.Response<WebApiModulesSettingsOrderTypeNoteOrderTypeNote>>
      ordertypenoteIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/ordertypenote/{id}')
  Future<chopper.Response<WebApiModulesSettingsOrderTypeNoteOrderTypeNote>>
      ordertypenoteIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsOrderTypeNoteOrderTypeNote? body});

  ///
  ///@param id
  @Delete(path: '/ordertypenote/{id}')
  Future<chopper.Response<bool>> ordertypenoteIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/ordertypenote/emptyobject')
  Future<chopper.Response> ordertypenoteEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/ordertypenote/emptybrowseobject')
  Future<chopper.Response> ordertypenoteEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/ordertypenote/keyfieldnames')
  Future<chopper.Response> ordertypenoteKeyfieldnamesGet();

  ///
  @Post(path: '/organizationtype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      organizationtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/organizationtype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      organizationtypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/organizationtype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogic>>
      organizationtypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/organizationtype')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType>>
      organizationtypePost(
          {@Body()
              required WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType?
                  body});

  ///
  ///@param id
  @Get(path: '/organizationtype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType>>
      organizationtypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/organizationtype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType>>
      organizationtypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType?
                  body});

  ///
  ///@param id
  @Delete(path: '/organizationtype/{id}')
  Future<chopper.Response<bool>> organizationtypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/organizationtype/emptyobject')
  Future<chopper.Response> organizationtypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/organizationtype/emptybrowseobject')
  Future<chopper.Response> organizationtypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/organizationtype/keyfieldnames')
  Future<chopper.Response> organizationtypeKeyfieldnamesGet();

  ///
  @Post(path: '/partscategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partscategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partscategory/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partscategoryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/partscategory')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic>>
      partscategoryGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/partscategory')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory>>
      partscategoryPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory?
                  body});

  ///
  ///@param id
  @Get(path: '/partscategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory>>
      partscategoryIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/partscategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory>>
      partscategoryIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory?
                  body});

  ///
  ///@param id
  @Delete(path: '/partscategory/{id}')
  Future<chopper.Response<bool>> partscategoryIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/partscategory/many')
  Future<
          chopper.Response<
              List<
                  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic>>>
      partscategoryManyPost(
          {@Body()
              required List<
                      WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory>?
                  body});

  ///
  @Post(path: '/partscategory/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partscategoryValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partscategory/validateprofitandlosscategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partscategoryValidateprofitandlosscategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partscategory/validateassetaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partscategoryValidateassetaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partscategory/validateincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partscategoryValidateincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partscategory/validatecostofgoodssoldexpenseaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partscategoryValidatecostofgoodssoldexpenseaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/partscategory/emptyobject')
  Future<chopper.Response> partscategoryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/partscategory/emptybrowseobject')
  Future<chopper.Response> partscategoryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/partscategory/keyfieldnames')
  Future<chopper.Response> partscategoryKeyfieldnamesGet();

  ///
  @Post(path: '/paymentterms/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      paymenttermsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/paymentterms/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      paymenttermsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/paymentterms')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogic>>
      paymenttermsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/paymentterms')
  Future<
          chopper.Response<
              WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms>>
      paymenttermsPost(
          {@Body()
              required WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms?
                  body});

  ///
  ///@param id
  @Get(path: '/paymentterms/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms>>
      paymenttermsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/paymentterms/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms>>
      paymenttermsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms?
                  body});

  ///
  ///@param id
  @Delete(path: '/paymentterms/{id}')
  Future<chopper.Response<bool>> paymenttermsIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/paymentterms/emptyobject')
  Future<chopper.Response> paymenttermsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/paymentterms/emptybrowseobject')
  Future<chopper.Response> paymenttermsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/paymentterms/keyfieldnames')
  Future<chopper.Response> paymenttermsKeyfieldnamesGet();

  ///
  @Post(path: '/paymenttype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      paymenttypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/paymenttype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      paymenttypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/paymenttype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogic>>
      paymenttypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/paymenttype')
  Future<
          chopper.Response<
              WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType>>
      paymenttypePost(
          {@Body()
              required WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType?
                  body});

  ///
  ///@param id
  @Get(path: '/paymenttype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType>>
      paymenttypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/paymenttype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType>>
      paymenttypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType?
                  body});

  ///
  ///@param id
  @Delete(path: '/paymenttype/{id}')
  Future<chopper.Response<bool>> paymenttypeIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/paymenttype/validateglaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      paymenttypeValidateglaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/paymenttype/emptyobject')
  Future<chopper.Response> paymenttypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/paymenttype/emptybrowseobject')
  Future<chopper.Response> paymenttypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/paymenttype/keyfieldnames')
  Future<chopper.Response> paymenttypeKeyfieldnamesGet();

  ///
  @Post(path: '/personneltype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      personneltypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/personneltype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      personneltypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/personneltype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogic>>
      personneltypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/personneltype')
  Future<chopper.Response<WebApiModulesSettingsPersonnelTypePersonnelType>>
      personneltypePost(
          {@Body()
              required WebApiModulesSettingsPersonnelTypePersonnelType? body});

  ///
  ///@param id
  @Get(path: '/personneltype/{id}')
  Future<chopper.Response<WebApiModulesSettingsPersonnelTypePersonnelType>>
      personneltypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/personneltype/{id}')
  Future<chopper.Response<WebApiModulesSettingsPersonnelTypePersonnelType>>
      personneltypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPersonnelTypePersonnelType? body});

  ///
  ///@param id
  @Delete(path: '/personneltype/{id}')
  Future<chopper.Response<bool>> personneltypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/personneltype/emptyobject')
  Future<chopper.Response> personneltypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/personneltype/emptybrowseobject')
  Future<chopper.Response> personneltypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/personneltype/keyfieldnames')
  Future<chopper.Response> personneltypeKeyfieldnamesGet();

  ///
  @Post(path: '/photographytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      photographytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/photographytype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      photographytypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/photographytype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogic>>
      photographytypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/photographytype')
  Future<
          chopper.Response<
              WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType>>
      photographytypePost(
          {@Body()
              required WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType?
                  body});

  ///
  ///@param id
  @Get(path: '/photographytype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType>>
      photographytypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/photographytype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType>>
      photographytypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType?
                  body});

  ///
  ///@param id
  @Delete(path: '/photographytype/{id}')
  Future<chopper.Response<bool>> photographytypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/photographytype/emptyobject')
  Future<chopper.Response> photographytypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/photographytype/emptybrowseobject')
  Future<chopper.Response> photographytypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/photographytype/keyfieldnames')
  Future<chopper.Response> photographytypeKeyfieldnamesGet();

  ///
  @Post(path: '/pickuplocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      pickuplocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/pickuplocation')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogic>>
      pickuplocationGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/pickuplocation')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation>>
      pickuplocationPost(
          {@Body()
              required WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation?
                  body});

  ///
  ///@param id
  @Get(path: '/pickuplocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation>>
      pickuplocationIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/pickuplocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation>>
      pickuplocationIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation?
                  body});

  ///
  ///@param id
  @Delete(path: '/pickuplocation/{id}')
  Future<chopper.Response<bool>> pickuplocationIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/pickuplocation/validatewarehouselocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      pickuplocationValidatewarehouselocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/pickuplocation/emptyobject')
  Future<chopper.Response> pickuplocationEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/pickuplocation/emptybrowseobject')
  Future<chopper.Response> pickuplocationEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/pickuplocation/keyfieldnames')
  Future<chopper.Response> pickuplocationKeyfieldnamesGet();

  ///
  @Post(path: '/poapprovalstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      poapprovalstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/poapprovalstatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      poapprovalstatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/poapprovalstatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogic>>
      poapprovalstatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/poapprovalstatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus>>
      poapprovalstatusPost(
          {@Body()
              required WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/poapprovalstatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus>>
      poapprovalstatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/poapprovalstatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus>>
      poapprovalstatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/poapprovalstatus/{id}')
  Future<chopper.Response<bool>> poapprovalstatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/poapprovalstatus/emptyobject')
  Future<chopper.Response> poapprovalstatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/poapprovalstatus/emptybrowseobject')
  Future<chopper.Response> poapprovalstatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/poapprovalstatus/keyfieldnames')
  Future<chopper.Response> poapprovalstatusKeyfieldnamesGet();

  ///
  @Post(path: '/poapprover/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      poapproverBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/poapprover/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      poapproverExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/poapprover')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogic>>
      poapproverGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/poapprover')
  Future<chopper.Response<WebApiModulesSettingsPoSettingsPoApproverPoApprover>>
      poapproverPost(
          {@Body()
              required WebApiModulesSettingsPoSettingsPoApproverPoApprover?
                  body});

  ///
  ///@param id
  @Get(path: '/poapprover/{id}')
  Future<chopper.Response<WebApiModulesSettingsPoSettingsPoApproverPoApprover>>
      poapproverIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/poapprover/{id}')
  Future<chopper.Response<WebApiModulesSettingsPoSettingsPoApproverPoApprover>>
      poapproverIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPoSettingsPoApproverPoApprover?
                  body});

  ///
  ///@param id
  @Delete(path: '/poapprover/{id}')
  Future<chopper.Response<bool>> poapproverIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/poapprover/validateuser/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      poapproverValidateuserBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/poapprover/validaterole/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      poapproverValidateroleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/poapprover/validatelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      poapproverValidatelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/poapprover/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      poapproverValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/poapprover/emptyobject')
  Future<chopper.Response> poapproverEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/poapprover/emptybrowseobject')
  Future<chopper.Response> poapproverEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/poapprover/keyfieldnames')
  Future<chopper.Response> poapproverKeyfieldnamesGet();

  ///
  @Post(path: '/poapproverrole/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      poapproverroleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/poapproverrole/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      poapproverroleExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/poapproverrole')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogic>>
      poapproverroleGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/poapproverrole')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole>>
      poapproverrolePost(
          {@Body()
              required WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole?
                  body});

  ///
  ///@param id
  @Get(path: '/poapproverrole/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole>>
      poapproverroleIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/poapproverrole/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole>>
      poapproverroleIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole?
                  body});

  ///
  ///@param id
  @Delete(path: '/poapproverrole/{id}')
  Future<chopper.Response<bool>> poapproverroleIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/poapproverrole/emptyobject')
  Future<chopper.Response> poapproverroleEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/poapproverrole/emptybrowseobject')
  Future<chopper.Response> poapproverroleEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/poapproverrole/keyfieldnames')
  Future<chopper.Response> poapproverroleKeyfieldnamesGet();

  ///
  @Post(path: '/poclassification/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      poclassificationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/poclassification/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      poclassificationExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/poclassification')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogic>>
      poclassificationGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/poclassification')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoClassificationPoClassification>>
      poclassificationPost(
          {@Body()
              required WebApiModulesSettingsPoSettingsPoClassificationPoClassification?
                  body});

  ///
  ///@param id
  @Get(path: '/poclassification/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoClassificationPoClassification>>
      poclassificationIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/poclassification/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoClassificationPoClassification>>
      poclassificationIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPoSettingsPoClassificationPoClassification?
                  body});

  ///
  ///@param id
  @Delete(path: '/poclassification/{id}')
  Future<chopper.Response<bool>> poclassificationIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/poclassification/emptyobject')
  Future<chopper.Response> poclassificationEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/poclassification/emptybrowseobject')
  Future<chopper.Response> poclassificationEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/poclassification/keyfieldnames')
  Future<chopper.Response> poclassificationKeyfieldnamesGet();

  ///
  @Post(path: '/poimportance/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      poimportanceBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/poimportance/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      poimportanceExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/poimportance')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogic>>
      poimportanceGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/poimportance')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoImportancePoImportance>>
      poimportancePost(
          {@Body()
              required WebApiModulesSettingsPoSettingsPoImportancePoImportance?
                  body});

  ///
  ///@param id
  @Get(path: '/poimportance/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoImportancePoImportance>>
      poimportanceIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/poimportance/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoImportancePoImportance>>
      poimportanceIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPoSettingsPoImportancePoImportance?
                  body});

  ///
  ///@param id
  @Delete(path: '/poimportance/{id}')
  Future<chopper.Response<bool>> poimportanceIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/poimportance/emptyobject')
  Future<chopper.Response> poimportanceEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/poimportance/emptybrowseobject')
  Future<chopper.Response> poimportanceEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/poimportance/keyfieldnames')
  Future<chopper.Response> poimportanceKeyfieldnamesGet();

  ///
  @Post(path: '/porejectreason/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      porejectreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/porejectreason/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      porejectreasonExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/porejectreason')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogic>>
      porejectreasonGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/porejectreason')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason>>
      porejectreasonPost(
          {@Body()
              required WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason?
                  body});

  ///
  ///@param id
  @Get(path: '/porejectreason/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason>>
      porejectreasonIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/porejectreason/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason>>
      porejectreasonIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason?
                  body});

  ///
  ///@param id
  @Delete(path: '/porejectreason/{id}')
  Future<chopper.Response<bool>> porejectreasonIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/porejectreason/emptyobject')
  Future<chopper.Response> porejectreasonEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/porejectreason/emptybrowseobject')
  Future<chopper.Response> porejectreasonEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/porejectreason/keyfieldnames')
  Future<chopper.Response> porejectreasonKeyfieldnamesGet();

  ///
  @Post(path: '/position/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      positionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/position/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      positionExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/position')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogic>>
      positionGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/position')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsPositionPosition>>
      positionPost(
          {@Body()
              required WebApiModulesSettingsLaborSettingsPositionPosition?
                  body});

  ///
  ///@param id
  @Get(path: '/position/{id}')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsPositionPosition>>
      positionIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/position/{id}')
  Future<chopper.Response<WebApiModulesSettingsLaborSettingsPositionPosition>>
      positionIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsLaborSettingsPositionPosition?
                  body});

  ///
  ///@param id
  @Delete(path: '/position/{id}')
  Future<chopper.Response<bool>> positionIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/position/validatelabortype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      positionValidatelabortypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/position/validatelaborcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      positionValidatelaborcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/position/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      positionValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/position/validateunit/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      positionValidateunitBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/position/emptyobject')
  Future<chopper.Response> positionEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/position/emptybrowseobject')
  Future<chopper.Response> positionEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/position/keyfieldnames')
  Future<chopper.Response> positionKeyfieldnamesGet();

  ///
  @Post(path: '/potype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> potypeBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/potype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      potypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/potype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogic>>
      potypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/potype')
  Future<chopper.Response<WebApiModulesSettingsPoSettingsPoTypePoType>>
      potypePost(
          {@Body() required WebApiModulesSettingsPoSettingsPoTypePoType? body});

  ///
  ///@param id
  @Get(path: '/potype/{id}')
  Future<chopper.Response<WebApiModulesSettingsPoSettingsPoTypePoType>>
      potypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/potype/{id}')
  Future<chopper.Response<WebApiModulesSettingsPoSettingsPoTypePoType>>
      potypeIdPut(
          {@Path('id') required String? id,
          @Body() required WebApiModulesSettingsPoSettingsPoTypePoType? body});

  ///
  ///@param id
  @Delete(path: '/potype/{id}')
  Future<chopper.Response<bool>> potypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/potype/emptyobject')
  Future<chopper.Response> potypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/potype/emptybrowseobject')
  Future<chopper.Response> potypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/potype/keyfieldnames')
  Future<chopper.Response> potypeKeyfieldnamesGet();

  ///
  @Post(path: '/presentationlayer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      presentationlayerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/presentationlayer/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      presentationlayerExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/presentationlayer')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogic>>
      presentationlayerGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/presentationlayer')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer>>
      presentationlayerPost(
          {@Body()
              required WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer?
                  body});

  ///
  ///@param id
  @Get(path: '/presentationlayer/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer>>
      presentationlayerIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/presentationlayer/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer>>
      presentationlayerIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer?
                  body});

  ///
  ///@param id
  @Delete(path: '/presentationlayer/{id}')
  Future<chopper.Response<bool>> presentationlayerIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/presentationlayer/emptyobject')
  Future<chopper.Response> presentationlayerEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/presentationlayer/emptybrowseobject')
  Future<chopper.Response> presentationlayerEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/presentationlayer/keyfieldnames')
  Future<chopper.Response> presentationlayerKeyfieldnamesGet();

  ///
  @Get(path: '/presentationlayeractivity/legend')
  Future<chopper.Response<Object>> presentationlayeractivityLegendGet();

  ///
  @Post(path: '/presentationlayeractivity/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      presentationlayeractivityBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/presentationlayeractivity/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      presentationlayeractivityExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/presentationlayeractivity')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogic>>
      presentationlayeractivityGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/presentationlayeractivity')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity>>
      presentationlayeractivityPost(
          {@Body()
              required WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity?
                  body});

  ///
  ///@param id
  @Get(path: '/presentationlayeractivity/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity>>
      presentationlayeractivityIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/presentationlayeractivity/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity>>
      presentationlayeractivityIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity?
                  body});

  ///
  ///@param id
  @Delete(path: '/presentationlayeractivity/{id}')
  Future<chopper.Response<bool>> presentationlayeractivityIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/presentationlayeractivity/sort')
  Future<
      chopper.Response<
          WebApiLogicSortItemsResponse>> presentationlayeractivitySortPost(
      {@Body()
          required WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequest?
              body});

  ///Get an empty object
  @Get(path: '/presentationlayeractivity/emptyobject')
  Future<chopper.Response> presentationlayeractivityEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/presentationlayeractivity/emptybrowseobject')
  Future<chopper.Response> presentationlayeractivityEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/presentationlayeractivity/keyfieldnames')
  Future<chopper.Response> presentationlayeractivityKeyfieldnamesGet();

  ///
  @Get(path: '/presentationlayeractivityoverride/legend')
  Future<chopper.Response<Object>> presentationlayeractivityoverrideLegendGet();

  ///
  @Post(path: '/presentationlayeractivityoverride/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      presentationlayeractivityoverrideBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/presentationlayeractivityoverride/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      presentationlayeractivityoverrideExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/presentationlayeractivityoverride')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogic>>
      presentationlayeractivityoverrideGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/presentationlayeractivityoverride')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride>>
      presentationlayeractivityoverridePost(
          {@Body()
              required WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride?
                  body});

  ///
  ///@param id
  @Get(path: '/presentationlayeractivityoverride/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride>>
      presentationlayeractivityoverrideIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/presentationlayeractivityoverride/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride>>
      presentationlayeractivityoverrideIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride?
                  body});

  ///
  ///@param id
  @Delete(path: '/presentationlayeractivityoverride/{id}')
  Future<chopper.Response<bool>> presentationlayeractivityoverrideIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(
      path:
          '/presentationlayeractivityoverride/validatepresentationlayeractivity/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      presentationlayeractivityoverrideValidatepresentationlayeractivityBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/presentationlayeractivityoverride/validatemaster/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      presentationlayeractivityoverrideValidatemasterBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/presentationlayeractivityoverride/emptyobject')
  Future<chopper.Response> presentationlayeractivityoverrideEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/presentationlayeractivityoverride/emptybrowseobject')
  Future<chopper.Response>
      presentationlayeractivityoverrideEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/presentationlayeractivityoverride/keyfieldnames')
  Future<chopper.Response> presentationlayeractivityoverrideKeyfieldnamesGet();

  ///
  @Post(path: '/presentationlayerform/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      presentationlayerformBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/presentationlayerform/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      presentationlayerformExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/presentationlayerform')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogic>>
      presentationlayerformGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/presentationlayerform')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationLayerFormPresentationLayerForm>>
      presentationlayerformPost(
          {@Body()
              required WebApiModulesSettingsPresentationLayerFormPresentationLayerForm?
                  body});

  ///
  ///@param id
  @Get(path: '/presentationlayerform/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationLayerFormPresentationLayerForm>>
      presentationlayerformIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/presentationlayerform/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPresentationLayerFormPresentationLayerForm>>
      presentationlayerformIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPresentationLayerFormPresentationLayerForm?
                  body});

  ///
  ///@param id
  @Delete(path: '/presentationlayerform/{id}')
  Future<chopper.Response<bool>> presentationlayerformIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/presentationlayerform/emptyobject')
  Future<chopper.Response> presentationlayerformEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/presentationlayerform/emptybrowseobject')
  Future<chopper.Response> presentationlayerformEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/presentationlayerform/keyfieldnames')
  Future<chopper.Response> presentationlayerformKeyfieldnamesGet();

  ///
  @Post(path: '/productiontype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      productiontypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/productiontype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      productiontypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/productiontype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogic>>
      productiontypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/productiontype')
  Future<
          chopper.Response<
              WebApiModulesSettingsDealSettingsProductionTypeProductionType>>
      productiontypePost(
          {@Body()
              required WebApiModulesSettingsDealSettingsProductionTypeProductionType?
                  body});

  ///
  ///@param id
  @Get(path: '/productiontype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDealSettingsProductionTypeProductionType>>
      productiontypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/productiontype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDealSettingsProductionTypeProductionType>>
      productiontypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDealSettingsProductionTypeProductionType?
                  body});

  ///
  ///@param id
  @Delete(path: '/productiontype/{id}')
  Future<chopper.Response<bool>> productiontypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/productiontype/emptyobject')
  Future<chopper.Response> productiontypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/productiontype/emptybrowseobject')
  Future<chopper.Response> productiontypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/productiontype/keyfieldnames')
  Future<chopper.Response> productiontypeKeyfieldnamesGet();

  ///
  @Post(path: '/projectasbuild/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectasbuildBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/projectasbuild/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      projectasbuildExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/projectasbuild')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogic>>
      projectasbuildGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/projectasbuild')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild>>
      projectasbuildPost(
          {@Body()
              required WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild?
                  body});

  ///
  ///@param id
  @Get(path: '/projectasbuild/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild>>
      projectasbuildIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/projectasbuild/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild>>
      projectasbuildIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild?
                  body});

  ///
  ///@param id
  @Delete(path: '/projectasbuild/{id}')
  Future<chopper.Response<bool>> projectasbuildIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/projectasbuild/emptyobject')
  Future<chopper.Response> projectasbuildEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/projectasbuild/emptybrowseobject')
  Future<chopper.Response> projectasbuildEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/projectasbuild/keyfieldnames')
  Future<chopper.Response> projectasbuildKeyfieldnamesGet();

  ///
  @Post(path: '/projectcommissioning/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectcommissioningBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/projectcommissioning/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      projectcommissioningExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/projectcommissioning')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogic>>
      projectcommissioningGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/projectcommissioning')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning>>
      projectcommissioningPost(
          {@Body()
              required WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning?
                  body});

  ///
  ///@param id
  @Get(path: '/projectcommissioning/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning>>
      projectcommissioningIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/projectcommissioning/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning>>
      projectcommissioningIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning?
                  body});

  ///
  ///@param id
  @Delete(path: '/projectcommissioning/{id}')
  Future<chopper.Response<bool>> projectcommissioningIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/projectcommissioning/emptyobject')
  Future<chopper.Response> projectcommissioningEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/projectcommissioning/emptybrowseobject')
  Future<chopper.Response> projectcommissioningEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/projectcommissioning/keyfieldnames')
  Future<chopper.Response> projectcommissioningKeyfieldnamesGet();

  ///
  @Post(path: '/projectdeposit/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectdepositBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/projectdeposit/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      projectdepositExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/projectdeposit')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogic>>
      projectdepositGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/projectdeposit')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit>>
      projectdepositPost(
          {@Body()
              required WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit?
                  body});

  ///
  ///@param id
  @Get(path: '/projectdeposit/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit>>
      projectdepositIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/projectdeposit/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit>>
      projectdepositIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit?
                  body});

  ///
  ///@param id
  @Delete(path: '/projectdeposit/{id}')
  Future<chopper.Response<bool>> projectdepositIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/projectdeposit/emptyobject')
  Future<chopper.Response> projectdepositEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/projectdeposit/emptybrowseobject')
  Future<chopper.Response> projectdepositEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/projectdeposit/keyfieldnames')
  Future<chopper.Response> projectdepositKeyfieldnamesGet();

  ///
  @Post(path: '/projectdrawings/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectdrawingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/projectdrawings/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      projectdrawingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/projectdrawings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogic>>
      projectdrawingsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/projectdrawings')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings>>
      projectdrawingsPost(
          {@Body()
              required WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings?
                  body});

  ///
  ///@param id
  @Get(path: '/projectdrawings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings>>
      projectdrawingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/projectdrawings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings>>
      projectdrawingsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings?
                  body});

  ///
  ///@param id
  @Delete(path: '/projectdrawings/{id}')
  Future<chopper.Response<bool>> projectdrawingsIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/projectdrawings/emptyobject')
  Future<chopper.Response> projectdrawingsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/projectdrawings/emptybrowseobject')
  Future<chopper.Response> projectdrawingsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/projectdrawings/keyfieldnames')
  Future<chopper.Response> projectdrawingsKeyfieldnamesGet();

  ///
  @Post(path: '/projectdropshipitems/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectdropshipitemsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/projectdropshipitems/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      projectdropshipitemsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/projectdropshipitems')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogic>>
      projectdropshipitemsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/projectdropshipitems')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems>>
      projectdropshipitemsPost(
          {@Body()
              required WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems?
                  body});

  ///
  ///@param id
  @Get(path: '/projectdropshipitems/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems>>
      projectdropshipitemsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/projectdropshipitems/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems>>
      projectdropshipitemsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems?
                  body});

  ///
  ///@param id
  @Delete(path: '/projectdropshipitems/{id}')
  Future<chopper.Response<bool>> projectdropshipitemsIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/projectdropshipitems/emptyobject')
  Future<chopper.Response> projectdropshipitemsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/projectdropshipitems/emptybrowseobject')
  Future<chopper.Response> projectdropshipitemsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/projectdropshipitems/keyfieldnames')
  Future<chopper.Response> projectdropshipitemsKeyfieldnamesGet();

  ///
  @Post(path: '/projectitemsordered/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectitemsorderedBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/projectitemsordered/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      projectitemsorderedExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/projectitemsordered')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogic>>
      projectitemsorderedGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/projectitemsordered')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered>>
      projectitemsorderedPost(
          {@Body()
              required WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered?
                  body});

  ///
  ///@param id
  @Get(path: '/projectitemsordered/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered>>
      projectitemsorderedIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/projectitemsordered/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered>>
      projectitemsorderedIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered?
                  body});

  ///
  ///@param id
  @Delete(path: '/projectitemsordered/{id}')
  Future<chopper.Response<bool>> projectitemsorderedIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/projectitemsordered/emptyobject')
  Future<chopper.Response> projectitemsorderedEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/projectitemsordered/emptybrowseobject')
  Future<chopper.Response> projectitemsorderedEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/projectitemsordered/keyfieldnames')
  Future<chopper.Response> projectitemsorderedKeyfieldnamesGet();

  ///
  @Post(path: '/propscondition/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      propsconditionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/propscondition/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      propsconditionExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/propscondition')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogic>>
      propsconditionGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/propscondition')
  Future<
          chopper.Response<
              WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition>>
      propsconditionPost(
          {@Body()
              required WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition?
                  body});

  ///
  ///@param id
  @Get(path: '/propscondition/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition>>
      propsconditionIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/propscondition/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition>>
      propsconditionIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition?
                  body});

  ///
  ///@param id
  @Delete(path: '/propscondition/{id}')
  Future<chopper.Response<bool>> propsconditionIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/propscondition/emptyobject')
  Future<chopper.Response> propsconditionEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/propscondition/emptybrowseobject')
  Future<chopper.Response> propsconditionEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/propscondition/keyfieldnames')
  Future<chopper.Response> propsconditionKeyfieldnamesGet();

  ///
  @Post(path: '/quikreceipttemplate/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikreceipttemplateBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/quikreceipttemplate/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      quikreceipttemplateExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/quikreceipttemplate')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogic>>
      quikreceipttemplateGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/quikreceipttemplate')
  Future<
          chopper.Response<
              WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate>>
      quikreceipttemplatePost(
          {@Body()
              required WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate?
                  body});

  ///
  ///@param id
  @Get(path: '/quikreceipttemplate/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate>>
      quikreceipttemplateIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/quikreceipttemplate/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate>>
      quikreceipttemplateIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate?
                  body});

  ///
  ///@param id
  @Delete(path: '/quikreceipttemplate/{id}')
  Future<chopper.Response<bool>> quikreceipttemplateIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/quikreceipttemplate/sort')
  Future<
      chopper
          .Response<WebApiLogicSortItemsResponse>> quikreceipttemplateSortPost(
      {@Body()
          required WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequest?
              body});

  ///Get an empty object
  @Get(path: '/quikreceipttemplate/emptyobject')
  Future<chopper.Response> quikreceipttemplateEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/quikreceipttemplate/emptybrowseobject')
  Future<chopper.Response> quikreceipttemplateEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/quikreceipttemplate/keyfieldnames')
  Future<chopper.Response> quikreceipttemplateKeyfieldnamesGet();

  ///
  @Post(path: '/rank/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> rankBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rank/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rankExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/rank')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogic>>
      rankGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  ///@param id
  @Get(path: '/rank/{id}')
  Future<chopper.Response<WebApiModulesSettingsRankRank>> rankIdGet(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/rank/emptyobject')
  Future<chopper.Response> rankEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/rank/emptybrowseobject')
  Future<chopper.Response> rankEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/rank/keyfieldnames')
  Future<chopper.Response> rankKeyfieldnamesGet();

  ///
  @Post(path: '/ratelocationtax/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ratelocationtaxBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ratelocationtax/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      ratelocationtaxExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/ratelocationtax')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogic>>
      ratelocationtaxGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/ratelocationtax')
  Future<chopper.Response<WebApiModulesSettingsRateLocationTaxRateLocationTax>>
      ratelocationtaxPost(
          {@Body()
              required WebApiModulesSettingsRateLocationTaxRateLocationTax?
                  body});

  ///
  ///@param id
  @Get(path: '/ratelocationtax/{id}')
  Future<chopper.Response<WebApiModulesSettingsRateLocationTaxRateLocationTax>>
      ratelocationtaxIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/ratelocationtax/{id}')
  Future<chopper.Response<WebApiModulesSettingsRateLocationTaxRateLocationTax>>
      ratelocationtaxIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsRateLocationTaxRateLocationTax?
                  body});

  ///
  ///@param id
  @Delete(path: '/ratelocationtax/{id}')
  Future<chopper.Response<bool>> ratelocationtaxIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/ratelocationtax/emptyobject')
  Future<chopper.Response> ratelocationtaxEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/ratelocationtax/emptybrowseobject')
  Future<chopper.Response> ratelocationtaxEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/ratelocationtax/keyfieldnames')
  Future<chopper.Response> ratelocationtaxKeyfieldnamesGet();

  ///
  @Post(path: '/ratetype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ratetypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ratetype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      ratetypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/ratetype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogic>>
      ratetypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  ///@param id
  @Get(path: '/ratetype/{id}')
  Future<chopper.Response<WebApiModulesSettingsRateTypeRateType>> ratetypeIdGet(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/ratetype/emptyobject')
  Future<chopper.Response> ratetypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/ratetype/emptybrowseobject')
  Future<chopper.Response> ratetypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/ratetype/keyfieldnames')
  Future<chopper.Response> ratetypeKeyfieldnamesGet();

  ///
  @Post(path: '/ratewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ratewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ratewarehouse/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      ratewarehouseExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/ratewarehouse')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogic>>
      ratewarehouseGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/ratewarehouse')
  Future<chopper.Response<WebApiModulesSettingsRateWarehouseRateWarehouse>>
      ratewarehousePost(
          {@Body()
              required WebApiModulesSettingsRateWarehouseRateWarehouse? body});

  ///
  ///@param id
  @Get(path: '/ratewarehouse/{id}')
  Future<chopper.Response<WebApiModulesSettingsRateWarehouseRateWarehouse>>
      ratewarehouseIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/ratewarehouse/{id}')
  Future<chopper.Response<WebApiModulesSettingsRateWarehouseRateWarehouse>>
      ratewarehouseIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsRateWarehouseRateWarehouse? body});

  ///
  ///@param id
  @Delete(path: '/ratewarehouse/{id}')
  Future<chopper.Response<bool>> ratewarehouseIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/ratewarehouse/emptyobject')
  Future<chopper.Response> ratewarehouseEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/ratewarehouse/emptybrowseobject')
  Future<chopper.Response> ratewarehouseEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/ratewarehouse/keyfieldnames')
  Future<chopper.Response> ratewarehouseKeyfieldnamesGet();

  ///
  @Post(path: '/region/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> regionBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/region/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      regionExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/region')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogic>>
      regionGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/region')
  Future<chopper.Response<WebApiModulesSettingsRegionSettingsRegionRegion>>
      regionPost(
          {@Body()
              required WebApiModulesSettingsRegionSettingsRegionRegion? body});

  ///
  ///@param id
  @Get(path: '/region/{id}')
  Future<chopper.Response<WebApiModulesSettingsRegionSettingsRegionRegion>>
      regionIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/region/{id}')
  Future<chopper.Response<WebApiModulesSettingsRegionSettingsRegionRegion>>
      regionIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsRegionSettingsRegionRegion? body});

  ///
  ///@param id
  @Delete(path: '/region/{id}')
  Future<chopper.Response<bool>> regionIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/region/emptyobject')
  Future<chopper.Response> regionEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/region/emptybrowseobject')
  Future<chopper.Response> regionEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/region/keyfieldnames')
  Future<chopper.Response> regionKeyfieldnamesGet();

  ///
  @Post(path: '/rentalcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalcategory/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalcategoryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/rentalcategory')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic>>
      rentalcategoryGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/rentalcategory')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory>>
      rentalcategoryPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory?
                  body});

  ///
  ///@param id
  @Get(path: '/rentalcategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory>>
      rentalcategoryIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/rentalcategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory>>
      rentalcategoryIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory?
                  body});

  ///
  ///@param id
  @Delete(path: '/rentalcategory/{id}')
  Future<chopper.Response<bool>> rentalcategoryIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/rentalcategory/many')
  Future<
          chopper.Response<
              List<
                  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic>>>
      rentalcategoryManyPost(
          {@Body()
              required List<
                      WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory>?
                  body});

  ///
  @Post(path: '/rentalcategory/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalcategory/validateinventorybarcodedesigner/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryValidateinventorybarcodedesignerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalcategory/validatebarcodedesigner/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryValidatebarcodedesignerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalcategory/validateassetaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryValidateassetaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalcategory/validateincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryValidateincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalcategory/validatesubincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryValidatesubincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalcategory/validateconsignmentincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryValidateconsignmentincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalcategory/validateequipmentsaleincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryValidateequipmentsaleincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalcategory/validateldincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryValidateldincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalcategory/validatecostofgoodssoldexpenseaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryValidatecostofgoodssoldexpenseaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalcategory/validatecostofgoodsrentedexpenseaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalcategoryValidatecostofgoodsrentedexpenseaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/rentalcategory/emptyobject')
  Future<chopper.Response> rentalcategoryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/rentalcategory/emptybrowseobject')
  Future<chopper.Response> rentalcategoryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/rentalcategory/keyfieldnames')
  Future<chopper.Response> rentalcategoryKeyfieldnamesGet();

  ///
  @Post(path: '/repairitemstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairitemstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/repairitemstatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      repairitemstatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/repairitemstatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogic>>
      repairitemstatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/repairitemstatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus>>
      repairitemstatusPost(
          {@Body()
              required WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/repairitemstatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus>>
      repairitemstatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/repairitemstatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus>>
      repairitemstatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/repairitemstatus/{id}')
  Future<chopper.Response<bool>> repairitemstatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/repairitemstatus/emptyobject')
  Future<chopper.Response> repairitemstatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/repairitemstatus/emptybrowseobject')
  Future<chopper.Response> repairitemstatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/repairitemstatus/keyfieldnames')
  Future<chopper.Response> repairitemstatusKeyfieldnamesGet();

  ///
  @Post(path: '/retiredreason/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/retiredreason/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      retiredreasonExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/retiredreason')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogic>>
      retiredreasonGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/retiredreason')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason>>
      retiredreasonPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason?
                  body});

  ///
  ///@param id
  @Get(path: '/retiredreason/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason>>
      retiredreasonIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/retiredreason/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason>>
      retiredreasonIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason?
                  body});

  ///
  ///@param id
  @Delete(path: '/retiredreason/{id}')
  Future<chopper.Response<bool>> retiredreasonIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/retiredreason/emptyobject')
  Future<chopper.Response> retiredreasonEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/retiredreason/emptybrowseobject')
  Future<chopper.Response> retiredreasonEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/retiredreason/keyfieldnames')
  Future<chopper.Response> retiredreasonKeyfieldnamesGet();

  ///
  @Post(path: '/salescategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salescategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salescategory/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salescategoryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/salescategory')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic>>
      salescategoryGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/salescategory')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory>>
      salescategoryPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory?
                  body});

  ///
  ///@param id
  @Get(path: '/salescategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory>>
      salescategoryIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/salescategory/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory>>
      salescategoryIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory?
                  body});

  ///
  ///@param id
  @Delete(path: '/salescategory/{id}')
  Future<chopper.Response<bool>> salescategoryIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/salescategory/many')
  Future<
          chopper.Response<
              List<
                  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic>>>
      salescategoryManyPost(
          {@Body()
              required List<
                      WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory>?
                  body});

  ///
  @Post(path: '/salescategory/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salescategoryValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salescategory/validateinventorybarcodedesigner/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salescategoryValidateinventorybarcodedesignerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salescategory/validatebarcodedesigner/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salescategoryValidatebarcodedesignerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salescategory/validateprofitandlosscategoryid/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salescategoryValidateprofitandlosscategoryidBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salescategory/validateassetaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salescategoryValidateassetaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salescategory/validateincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salescategoryValidateincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salescategory/validatesubincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salescategoryValidatesubincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salescategory/validatecostofgoodssoldexpenseaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salescategoryValidatecostofgoodssoldexpenseaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/salescategory/emptyobject')
  Future<chopper.Response> salescategoryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/salescategory/emptybrowseobject')
  Future<chopper.Response> salescategoryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/salescategory/keyfieldnames')
  Future<chopper.Response> salescategoryKeyfieldnamesGet();

  ///
  @Post(path: '/sapvendorinvoicestatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      sapvendorinvoicestatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/sapvendorinvoicestatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      sapvendorinvoicestatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/sapvendorinvoicestatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogic>>
      sapvendorinvoicestatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/sapvendorinvoicestatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus>>
      sapvendorinvoicestatusPost(
          {@Body()
              required WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/sapvendorinvoicestatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus>>
      sapvendorinvoicestatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/sapvendorinvoicestatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus>>
      sapvendorinvoicestatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/sapvendorinvoicestatus/{id}')
  Future<chopper.Response<bool>> sapvendorinvoicestatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/sapvendorinvoicestatus/emptyobject')
  Future<chopper.Response> sapvendorinvoicestatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/sapvendorinvoicestatus/emptybrowseobject')
  Future<chopper.Response> sapvendorinvoicestatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/sapvendorinvoicestatus/keyfieldnames')
  Future<chopper.Response> sapvendorinvoicestatusKeyfieldnamesGet();

  ///
  @Post(path: '/scheduletype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      scheduletypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/scheduletype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      scheduletypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/scheduletype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogic>>
      scheduletypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/scheduletype')
  Future<
          chopper.Response<
              WebApiModulesSettingsDealSettingsScheduleTypeScheduleType>>
      scheduletypePost(
          {@Body()
              required WebApiModulesSettingsDealSettingsScheduleTypeScheduleType?
                  body});

  ///
  ///@param id
  @Get(path: '/scheduletype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDealSettingsScheduleTypeScheduleType>>
      scheduletypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/scheduletype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDealSettingsScheduleTypeScheduleType>>
      scheduletypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDealSettingsScheduleTypeScheduleType?
                  body});

  ///
  ///@param id
  @Delete(path: '/scheduletype/{id}')
  Future<chopper.Response<bool>> scheduletypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/scheduletype/emptyobject')
  Future<chopper.Response> scheduletypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/scheduletype/emptybrowseobject')
  Future<chopper.Response> scheduletypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/scheduletype/keyfieldnames')
  Future<chopper.Response> scheduletypeKeyfieldnamesGet();

  ///
  @Post(path: '/setcondition/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      setconditionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/setcondition/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      setconditionExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/setcondition')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogic>>
      setconditionGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/setcondition')
  Future<
          chopper.Response<
              WebApiModulesSettingsSetSettingsSetConditionSetCondition>>
      setconditionPost(
          {@Body()
              required WebApiModulesSettingsSetSettingsSetConditionSetCondition?
                  body});

  ///
  ///@param id
  @Get(path: '/setcondition/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSetSettingsSetConditionSetCondition>>
      setconditionIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/setcondition/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSetSettingsSetConditionSetCondition>>
      setconditionIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSetSettingsSetConditionSetCondition?
                  body});

  ///
  ///@param id
  @Delete(path: '/setcondition/{id}')
  Future<chopper.Response<bool>> setconditionIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/setcondition/emptyobject')
  Future<chopper.Response> setconditionEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/setcondition/emptybrowseobject')
  Future<chopper.Response> setconditionEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/setcondition/keyfieldnames')
  Future<chopper.Response> setconditionKeyfieldnamesGet();

  ///
  @Post(path: '/setopening/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      setopeningBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/setopening/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      setopeningExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/setopening')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogic>>
      setopeningGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/setopening')
  Future<chopper.Response<WebApiModulesSettingsSetSettingsSetOpeningSetOpening>>
      setopeningPost(
          {@Body()
              required WebApiModulesSettingsSetSettingsSetOpeningSetOpening?
                  body});

  ///
  ///@param id
  @Get(path: '/setopening/{id}')
  Future<chopper.Response<WebApiModulesSettingsSetSettingsSetOpeningSetOpening>>
      setopeningIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/setopening/{id}')
  Future<chopper.Response<WebApiModulesSettingsSetSettingsSetOpeningSetOpening>>
      setopeningIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSetSettingsSetOpeningSetOpening?
                  body});

  ///
  ///@param id
  @Delete(path: '/setopening/{id}')
  Future<chopper.Response<bool>> setopeningIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/setopening/emptyobject')
  Future<chopper.Response> setopeningEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/setopening/emptybrowseobject')
  Future<chopper.Response> setopeningEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/setopening/keyfieldnames')
  Future<chopper.Response> setopeningKeyfieldnamesGet();

  ///
  @Post(path: '/setsurface/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      setsurfaceBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/setsurface/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      setsurfaceExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/setsurface')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogic>>
      setsurfaceGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/setsurface')
  Future<chopper.Response<WebApiModulesSettingsSetSettingsSetSurfaceSetSurface>>
      setsurfacePost(
          {@Body()
              required WebApiModulesSettingsSetSettingsSetSurfaceSetSurface?
                  body});

  ///
  ///@param id
  @Get(path: '/setsurface/{id}')
  Future<chopper.Response<WebApiModulesSettingsSetSettingsSetSurfaceSetSurface>>
      setsurfaceIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/setsurface/{id}')
  Future<chopper.Response<WebApiModulesSettingsSetSettingsSetSurfaceSetSurface>>
      setsurfaceIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSetSettingsSetSurfaceSetSurface?
                  body});

  ///
  ///@param id
  @Delete(path: '/setsurface/{id}')
  Future<chopper.Response<bool>> setsurfaceIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/setsurface/emptyobject')
  Future<chopper.Response> setsurfaceEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/setsurface/emptybrowseobject')
  Future<chopper.Response> setsurfaceEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/setsurface/keyfieldnames')
  Future<chopper.Response> setsurfaceKeyfieldnamesGet();

  ///
  @Post(path: '/shipvia/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      shipviaBrowsePost({@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/shipvia/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      shipviaExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/shipvia')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogic>>
      shipviaGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/shipvia')
  Future<chopper.Response<WebApiModulesSettingsShipViaSettingsShipViaShipVia>>
      shipviaPost(
          {@Body()
              required WebApiModulesSettingsShipViaSettingsShipViaShipVia?
                  body});

  ///
  ///@param id
  @Get(path: '/shipvia/{id}')
  Future<chopper.Response<WebApiModulesSettingsShipViaSettingsShipViaShipVia>>
      shipviaIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/shipvia/{id}')
  Future<chopper.Response<WebApiModulesSettingsShipViaSettingsShipViaShipVia>>
      shipviaIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsShipViaSettingsShipViaShipVia?
                  body});

  ///
  ///@param id
  @Delete(path: '/shipvia/{id}')
  Future<chopper.Response<bool>> shipviaIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/shipvia/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      shipviaValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/shipvia/emptyobject')
  Future<chopper.Response> shipviaEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/shipvia/emptybrowseobject')
  Future<chopper.Response> shipviaEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/shipvia/keyfieldnames')
  Future<chopper.Response> shipviaKeyfieldnamesGet();

  ///
  @Post(path: '/sound/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> soundBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/sound/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      soundExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/sound')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogic>>
      soundGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/sound')
  Future<chopper.Response<WebApiModulesSettingsUserSettingsSoundSound>>
      soundPost(
          {@Body() required WebApiModulesSettingsUserSettingsSoundSound? body});

  ///
  ///@param id
  @Get(path: '/sound/{id}')
  Future<chopper.Response<WebApiModulesSettingsUserSettingsSoundSound>>
      soundIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/sound/{id}')
  Future<chopper.Response<WebApiModulesSettingsUserSettingsSoundSound>>
      soundIdPut(
          {@Path('id') required String? id,
          @Body() required WebApiModulesSettingsUserSettingsSoundSound? body});

  ///
  ///@param id
  @Delete(path: '/sound/{id}')
  Future<chopper.Response<bool>> soundIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/sound/emptyobject')
  Future<chopper.Response> soundEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/sound/emptybrowseobject')
  Future<chopper.Response> soundEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/sound/keyfieldnames')
  Future<chopper.Response> soundKeyfieldnamesGet();

  ///
  @Post(path: '/source/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> sourceBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/source/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      sourceExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/source')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogic>>
      sourceGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/source')
  Future<chopper.Response<WebApiModulesSettingsSourceSettingsSourceSource>>
      sourcePost(
          {@Body()
              required WebApiModulesSettingsSourceSettingsSourceSource? body});

  ///
  ///@param id
  @Get(path: '/source/{id}')
  Future<chopper.Response<WebApiModulesSettingsSourceSettingsSourceSource>>
      sourceIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/source/{id}')
  Future<chopper.Response<WebApiModulesSettingsSourceSettingsSourceSource>>
      sourceIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSourceSettingsSourceSource? body});

  ///
  ///@param id
  @Delete(path: '/source/{id}')
  Future<chopper.Response<bool>> sourceIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/source/emptyobject')
  Future<chopper.Response> sourceEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/source/emptybrowseobject')
  Future<chopper.Response> sourceEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/source/keyfieldnames')
  Future<chopper.Response> sourceKeyfieldnamesGet();

  ///
  @Post(path: '/space/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> spaceBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/space/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      spaceExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/space')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogic>>
      spaceGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/space')
  Future<chopper.Response<WebApiModulesSettingsSpaceSpace>> spacePost(
      {@Body() required WebApiModulesSettingsSpaceSpace? body});

  ///
  ///@param id
  @Get(path: '/space/{id}')
  Future<chopper.Response<WebApiModulesSettingsSpaceSpace>> spaceIdGet(
      {@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/space/{id}')
  Future<chopper.Response<WebApiModulesSettingsSpaceSpace>> spaceIdPut(
      {@Path('id') required String? id,
      @Body() required WebApiModulesSettingsSpaceSpace? body});

  ///
  ///@param id
  @Delete(path: '/space/{id}')
  Future<chopper.Response<bool>> spaceIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/space/sort')
  Future<chopper.Response<WebApiLogicSortItemsResponse>> spaceSortPost(
      {@Body()
          required WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequest?
              body});

  ///Get an empty object
  @Get(path: '/space/emptyobject')
  Future<chopper.Response> spaceEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/space/emptybrowseobject')
  Future<chopper.Response> spaceEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/space/keyfieldnames')
  Future<chopper.Response> spaceKeyfieldnamesGet();

  ///
  @Post(path: '/spacerate/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      spacerateBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/spacerate/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      spacerateExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/spacerate')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogic>>
      spacerateGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/spacerate')
  Future<chopper.Response<WebApiModulesSettingsSpaceRateSpaceRate>>
      spaceratePost(
          {@Body() required WebApiModulesSettingsSpaceRateSpaceRate? body});

  ///
  ///@param id
  @Get(path: '/spacerate/{id}')
  Future<chopper.Response<WebApiModulesSettingsSpaceRateSpaceRate>>
      spacerateIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/spacerate/{id}')
  Future<chopper.Response<WebApiModulesSettingsSpaceRateSpaceRate>>
      spacerateIdPut(
          {@Path('id') required String? id,
          @Body() required WebApiModulesSettingsSpaceRateSpaceRate? body});

  ///
  ///@param id
  @Delete(path: '/spacerate/{id}')
  Future<chopper.Response<bool>> spacerateIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/spacerate/sort')
  Future<chopper.Response<WebApiLogicSortItemsResponse>> spacerateSortPost(
      {@Body()
          required WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequest?
              body});

  ///Get an empty object
  @Get(path: '/spacerate/emptyobject')
  Future<chopper.Response> spacerateEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/spacerate/emptybrowseobject')
  Future<chopper.Response> spacerateEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/spacerate/keyfieldnames')
  Future<chopper.Response> spacerateKeyfieldnamesGet();

  ///
  @Post(path: '/spacetype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      spacetypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/spacetype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      spacetypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/spacetype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogic>>
      spacetypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/spacetype')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType>>
      spacetypePost(
          {@Body()
              required WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType?
                  body});

  ///
  ///@param id
  @Get(path: '/spacetype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType>>
      spacetypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/spacetype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType>>
      spacetypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType?
                  body});

  ///
  ///@param id
  @Delete(path: '/spacetype/{id}')
  Future<chopper.Response<bool>> spacetypeIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/spacetype/validatefacilitytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      spacetypeValidatefacilitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/spacetype/validaterate/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      spacetypeValidaterateBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/spacetype/emptyobject')
  Future<chopper.Response> spacetypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/spacetype/emptybrowseobject')
  Future<chopper.Response> spacetypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/spacetype/keyfieldnames')
  Future<chopper.Response> spacetypeKeyfieldnamesGet();

  ///
  @Post(path: '/state/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> stateBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/state/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      stateExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/state')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogic>>
      stateGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/state')
  Future<chopper.Response<WebApiModulesSettingsAddressSettingsStateState>>
      statePost(
          {@Body()
              required WebApiModulesSettingsAddressSettingsStateState? body});

  ///
  ///@param id
  @Get(path: '/state/{id}')
  Future<chopper.Response<WebApiModulesSettingsAddressSettingsStateState>>
      stateIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/state/{id}')
  Future<chopper.Response<WebApiModulesSettingsAddressSettingsStateState>>
      stateIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsAddressSettingsStateState? body});

  ///
  ///@param id
  @Delete(path: '/state/{id}')
  Future<chopper.Response<bool>> stateIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/state/emptyobject')
  Future<chopper.Response> stateEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/state/emptybrowseobject')
  Future<chopper.Response> stateEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/state/keyfieldnames')
  Future<chopper.Response> stateKeyfieldnamesGet();

  ///
  ///@param storagecontainerid
  @Post(path: '/storagecontainer/{storagecontainerid}/items/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      storagecontainerStoragecontaineridItemsBrowsePost(
          {@Path('storagecontainerid') required String? storagecontainerid,
          @Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param storagecontainerid
  @Post(path: '/storagecontainer/{storagecontainerid}/items/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      storagecontainerStoragecontaineridItemsExportexcelxlsxPost(
          {@Path('storagecontainerid') required String? storagecontainerid,
          @Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param storagecontainerid
  @Post(path: '/storagecontainer/{storagecontainerid}/items')
  Future<
          chopper.Response<
              WebApiModulesInventoryStorageContainerStorageContainerItem>>
      storagecontainerStoragecontaineridItemsPost(
          {@Path('storagecontainerid')
              required String? storagecontainerid,
          @Body()
              required WebApiModulesInventoryStorageContainerStorageContainerItem?
                  body});

  ///
  ///@param id
  ///@param storagecontainerid
  @Put(path: '/storagecontainer/{storagecontainerid}/items/{id}')
  Future<
          chopper.Response<
              WebApiModulesInventoryStorageContainerStorageContainerItem>>
      storagecontainerStoragecontaineridItemsIdPut(
          {@Path('id')
              required String? id,
          @Path('storagecontainerid')
              required String? storagecontainerid,
          @Body()
              required WebApiModulesInventoryStorageContainerStorageContainerItem?
                  body});

  ///
  ///@param id
  ///@param storagecontainerid
  @Delete(path: '/storagecontainer/{storagecontainerid}/items/{id}')
  Future<chopper.Response<bool>>
      storagecontainerStoragecontaineridItemsIdDelete(
          {@Path('id') required String? id,
          @Path('storagecontainerid') required String? storagecontainerid});

  ///
  @Get(path: '/storagecontainer/storagecontainer/items/emptyobject')
  Future<chopper.Response>
      storagecontainerStoragecontainerItemsEmptyobjectGet();

  ///
  @Post(path: '/storagecontainer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      storagecontainerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/storagecontainer/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      storagecontainerExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/storagecontainer')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogic>>
      storagecontainerGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/storagecontainer')
  Future<
          chopper
              .Response<WebApiModulesInventoryStorageContainerStorageContainer>>
      storagecontainerPost(
          {@Body()
              required WebApiModulesInventoryStorageContainerStorageContainer?
                  body});

  ///
  ///@param id
  @Get(path: '/storagecontainer/{id}')
  Future<
          chopper
              .Response<WebApiModulesInventoryStorageContainerStorageContainer>>
      storagecontainerIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/storagecontainer/{id}')
  Future<
          chopper
              .Response<WebApiModulesInventoryStorageContainerStorageContainer>>
      storagecontainerIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesInventoryStorageContainerStorageContainer?
                  body});

  ///Get an empty object
  @Get(path: '/storagecontainer/emptyobject')
  Future<chopper.Response> storagecontainerEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/storagecontainer/emptybrowseobject')
  Future<chopper.Response> storagecontainerEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/storagecontainer/keyfieldnames')
  Future<chopper.Response> storagecontainerKeyfieldnamesGet();

  ///
  @Post(path: '/subcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subcategory/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      subcategoryExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/subcategory')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogic>>
      subcategoryGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/subcategory')
  Future<chopper.Response<WebApiModulesSettingsSubCategorySubCategory>>
      subcategoryPost(
          {@Body() required WebApiModulesSettingsSubCategorySubCategory? body});

  ///
  ///@param id
  @Get(path: '/subcategory/{id}')
  Future<chopper.Response<WebApiModulesSettingsSubCategorySubCategory>>
      subcategoryIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/subcategory/{id}')
  Future<chopper.Response<WebApiModulesSettingsSubCategorySubCategory>>
      subcategoryIdPut(
          {@Path('id') required String? id,
          @Body() required WebApiModulesSettingsSubCategorySubCategory? body});

  ///
  ///@param id
  @Delete(path: '/subcategory/{id}')
  Future<chopper.Response<bool>> subcategoryIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/subcategory/sort')
  Future<chopper.Response<WebApiLogicSortItemsResponse>> subcategorySortPost(
      {@Body()
          required WebApiModulesSettingsSubCategorySortSubCategoriesRequest?
              body});

  ///Get an empty object
  @Get(path: '/subcategory/emptyobject')
  Future<chopper.Response> subcategoryEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/subcategory/emptybrowseobject')
  Future<chopper.Response> subcategoryEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/subcategory/keyfieldnames')
  Future<chopper.Response> subcategoryKeyfieldnamesGet();

  ///
  @Post(path: '/systemnumber/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      systemnumberBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/systemnumber/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      systemnumberExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/systemnumber')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogic>>
      systemnumberGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  ///@param id
  @Get(path: '/systemnumber/{id}')
  Future<chopper.Response<WebApiModulesSettingsSystemNumberSystemNumber>>
      systemnumberIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/systemnumber/{id}')
  Future<chopper.Response<WebApiModulesSettingsSystemNumberSystemNumber>>
      systemnumberIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSystemNumberSystemNumber? body});

  ///Get an empty object
  @Get(path: '/systemnumber/emptyobject')
  Future<chopper.Response> systemnumberEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/systemnumber/emptybrowseobject')
  Future<chopper.Response> systemnumberEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/systemnumber/keyfieldnames')
  Future<chopper.Response> systemnumberKeyfieldnamesGet();

  ///
  @Post(path: '/systemsettings/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      systemsettingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/systemsettings/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      systemsettingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/systemsettings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogic>>
      systemsettingsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/systemsettings')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings>>
      systemsettingsPost(
          {@Body()
              required WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings?
                  body});

  ///
  ///@param id
  @Get(path: '/systemsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings>>
      systemsettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/systemsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings>>
      systemsettingsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings?
                  body});

  ///Get an empty object
  @Get(path: '/systemsettings/emptyobject')
  Future<chopper.Response> systemsettingsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/systemsettings/emptybrowseobject')
  Future<chopper.Response> systemsettingsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/systemsettings/keyfieldnames')
  Future<chopper.Response> systemsettingsKeyfieldnamesGet();

  ///
  @Post(path: '/taxoption/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxoptionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/taxoption/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      taxoptionExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/taxoption')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogic>>
      taxoptionGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/taxoption')
  Future<chopper.Response<WebApiModulesSettingsTaxSettingsTaxOptionTaxOption>>
      taxoptionPost(
          {@Body()
              required WebApiModulesSettingsTaxSettingsTaxOptionTaxOption?
                  body});

  ///
  ///@param id
  @Get(path: '/taxoption/{id}')
  Future<chopper.Response<WebApiModulesSettingsTaxSettingsTaxOptionTaxOption>>
      taxoptionIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/taxoption/{id}')
  Future<chopper.Response<WebApiModulesSettingsTaxSettingsTaxOptionTaxOption>>
      taxoptionIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsTaxSettingsTaxOptionTaxOption?
                  body});

  ///
  ///@param id
  @Delete(path: '/taxoption/{id}')
  Future<chopper.Response<bool>> taxoptionIdDelete(
      {@Path('id') required String? id});

  ///
  ///@param id
  @Post(path: '/taxoption/{id}/forcerates', optionalBody: true)
  Future<chopper.Response<bool>> taxoptionIdForceratesPost(
      {@Path('id') required String? id});

  ///
  @Post(path: '/taxoption/validatedetaxaccount1/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxoptionValidatedetaxaccount1BrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/taxoption/validatetaxaccount2/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxoptionValidatetaxaccount2BrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/taxoption/validatedetaxontaxaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxoptionValidatedetaxontaxaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/taxoption/emptyobject')
  Future<chopper.Response> taxoptionEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/taxoption/emptybrowseobject')
  Future<chopper.Response> taxoptionEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/taxoption/keyfieldnames')
  Future<chopper.Response> taxoptionKeyfieldnamesGet();

  ///
  @Post(path: '/template/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      templateBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/template/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      templateExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/template')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogic>>
      templateGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/template')
  Future<
          chopper
              .Response<WebApiModulesSettingsTemplateSettingsTemplateTemplate>>
      templatePost(
          {@Body()
              required WebApiModulesSettingsTemplateSettingsTemplateTemplate?
                  body});

  ///
  ///@param id
  @Get(path: '/template/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsTemplateSettingsTemplateTemplate>>
      templateIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/template/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsTemplateSettingsTemplateTemplate>>
      templateIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsTemplateSettingsTemplateTemplate?
                  body});

  ///
  ///@param id
  @Delete(path: '/template/{id}')
  Future<chopper.Response<bool>> templateIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/template/validatederate/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      templateValidatederateBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/template/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      templateValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/template/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      templateValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/template/emptyobject')
  Future<chopper.Response> templateEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/template/emptybrowseobject')
  Future<chopper.Response> templateEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/template/keyfieldnames')
  Future<chopper.Response> templateKeyfieldnamesGet();

  ///
  @Post(path: '/termsconditions/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      termsconditionsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/termsconditions/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      termsconditionsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/termsconditions')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogic>>
      termsconditionsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/termsconditions')
  Future<
          chopper.Response<
              WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions>>
      termsconditionsPost(
          {@Body()
              required WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions?
                  body});

  ///
  ///@param id
  @Get(path: '/termsconditions/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions>>
      termsconditionsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/termsconditions/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions>>
      termsconditionsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions?
                  body});

  ///
  ///@param id
  @Delete(path: '/termsconditions/{id}')
  Future<chopper.Response<bool>> termsconditionsIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/termsconditions/emptyobject')
  Future<chopper.Response> termsconditionsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/termsconditions/emptybrowseobject')
  Future<chopper.Response> termsconditionsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/termsconditions/keyfieldnames')
  Future<chopper.Response> termsconditionsKeyfieldnamesGet();

  ///
  @Post(path: '/unit/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> unitBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/unit/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      unitExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/unit')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogic>>
      unitGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/unit')
  Future<chopper.Response<WebApiModulesSettingsInventorySettingsUnitUnit>>
      unitPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsUnitUnit? body});

  ///
  ///@param id
  @Get(path: '/unit/{id}')
  Future<chopper.Response<WebApiModulesSettingsInventorySettingsUnitUnit>>
      unitIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/unit/{id}')
  Future<chopper.Response<WebApiModulesSettingsInventorySettingsUnitUnit>>
      unitIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsUnitUnit? body});

  ///
  ///@param id
  @Delete(path: '/unit/{id}')
  Future<chopper.Response<bool>> unitIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/unit/emptyobject')
  Future<chopper.Response> unitEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/unit/emptybrowseobject')
  Future<chopper.Response> unitEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/unit/keyfieldnames')
  Future<chopper.Response> unitKeyfieldnamesGet();

  ///
  @Post(path: '/unretiredreason/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/unretiredreason/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      unretiredreasonExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/unretiredreason')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogic>>
      unretiredreasonGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/unretiredreason')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason>>
      unretiredreasonPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason?
                  body});

  ///
  ///@param id
  @Get(path: '/unretiredreason/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason>>
      unretiredreasonIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/unretiredreason/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason>>
      unretiredreasonIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason?
                  body});

  ///
  ///@param id
  @Delete(path: '/unretiredreason/{id}')
  Future<chopper.Response<bool>> unretiredreasonIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/unretiredreason/emptyobject')
  Future<chopper.Response> unretiredreasonEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/unretiredreason/emptybrowseobject')
  Future<chopper.Response> unretiredreasonEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/unretiredreason/keyfieldnames')
  Future<chopper.Response> unretiredreasonKeyfieldnamesGet();

  ///
  ///@param id
  @Get(path: '/userprofile/{id}')
  Future<chopper.Response<WebApiModulesSettingsUserProfileUserProfile>>
      userprofileIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/userprofile/{id}')
  Future<chopper.Response<WebApiModulesSettingsUserProfileUserProfile>>
      userprofileIdPut(
          {@Path('id') required String? id,
          @Body() required WebApiModulesSettingsUserProfileUserProfile? body});

  ///
  @Post(path: '/userprofile')
  Future<chopper.Response<WebApiModulesSettingsUserProfileUserProfile>>
      userprofilePost(
          {@Body() required WebApiModulesSettingsUserProfileUserProfile? body});

  ///Get an empty object
  @Get(path: '/userprofile/emptyobject')
  Future<chopper.Response> userprofileEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/userprofile/emptybrowseobject')
  Future<chopper.Response> userprofileEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/userprofile/keyfieldnames')
  Future<chopper.Response> userprofileKeyfieldnamesGet();

  ///
  ///@param id
  @Get(path: '/usersearchsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsUserSearchSettingsUserSearchSettings>>
      usersearchsettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/usersearchsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsUserSearchSettingsUserSearchSettings>>
      usersearchsettingsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsUserSearchSettingsUserSearchSettings?
                  body});

  ///Get an empty object
  @Get(path: '/usersearchsettings/emptyobject')
  Future<chopper.Response> usersearchsettingsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/usersearchsettings/emptybrowseobject')
  Future<chopper.Response> usersearchsettingsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/usersearchsettings/keyfieldnames')
  Future<chopper.Response> usersearchsettingsKeyfieldnamesGet();

  ///
  @Post(path: '/userstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      userstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/userstatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      userstatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/userstatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogic>>
      userstatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/userstatus')
  Future<
          chopper
              .Response<WebApiModulesSettingsUserSettingsUserStatusUserStatus>>
      userstatusPost(
          {@Body()
              required WebApiModulesSettingsUserSettingsUserStatusUserStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/userstatus/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsUserSettingsUserStatusUserStatus>>
      userstatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/userstatus/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsUserSettingsUserStatusUserStatus>>
      userstatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsUserSettingsUserStatusUserStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/userstatus/{id}')
  Future<chopper.Response<bool>> userstatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/userstatus/emptyobject')
  Future<chopper.Response> userstatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/userstatus/emptybrowseobject')
  Future<chopper.Response> userstatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/userstatus/keyfieldnames')
  Future<chopper.Response> userstatusKeyfieldnamesGet();

  ///
  @Post(path: '/userwidget/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      userwidgetBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/userwidget/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      userwidgetExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/userwidget')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogic>>
      userwidgetGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/userwidget')
  Future<chopper.Response<WebApiModulesSettingsWebUserWidgetUserWidget>>
      userwidgetPost(
          {@Body()
              required WebApiModulesSettingsWebUserWidgetUserWidget? body});

  ///
  ///@param id
  @Get(path: '/userwidget/{id}')
  Future<chopper.Response<WebApiModulesSettingsWebUserWidgetUserWidget>>
      userwidgetIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/userwidget/{id}')
  Future<chopper.Response<WebApiModulesSettingsWebUserWidgetUserWidget>>
      userwidgetIdPut(
          {@Path('id') required String? id,
          @Body() required WebApiModulesSettingsWebUserWidgetUserWidget? body});

  ///
  ///@param id
  @Delete(path: '/userwidget/{id}')
  Future<chopper.Response<bool>> userwidgetIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/userwidget/emptyobject')
  Future<chopper.Response> userwidgetEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/userwidget/emptybrowseobject')
  Future<chopper.Response> userwidgetEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/userwidget/keyfieldnames')
  Future<chopper.Response> userwidgetKeyfieldnamesGet();

  ///
  @Post(path: '/vehiclecolor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehiclecolorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehiclecolor/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vehiclecolorExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/vehiclecolor')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogic>>
      vehiclecolorGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/vehiclecolor')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor>>
      vehiclecolorPost(
          {@Body()
              required WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor?
                  body});

  ///
  ///@param id
  @Get(path: '/vehiclecolor/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor>>
      vehiclecolorIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/vehiclecolor/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor>>
      vehiclecolorIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor?
                  body});

  ///
  ///@param id
  @Delete(path: '/vehiclecolor/{id}')
  Future<chopper.Response<bool>> vehiclecolorIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/vehiclecolor/emptyobject')
  Future<chopper.Response> vehiclecolorEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/vehiclecolor/emptybrowseobject')
  Future<chopper.Response> vehiclecolorEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/vehiclecolor/keyfieldnames')
  Future<chopper.Response> vehiclecolorKeyfieldnamesGet();

  ///
  @Post(path: '/vehiclefueltype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehiclefueltypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehiclefueltype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vehiclefueltypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/vehiclefueltype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogic>>
      vehiclefueltypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/vehiclefueltype')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType>>
      vehiclefueltypePost(
          {@Body()
              required WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType?
                  body});

  ///
  ///@param id
  @Get(path: '/vehiclefueltype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType>>
      vehiclefueltypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/vehiclefueltype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType>>
      vehiclefueltypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType?
                  body});

  ///
  ///@param id
  @Delete(path: '/vehiclefueltype/{id}')
  Future<chopper.Response<bool>> vehiclefueltypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/vehiclefueltype/emptyobject')
  Future<chopper.Response> vehiclefueltypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/vehiclefueltype/emptybrowseobject')
  Future<chopper.Response> vehiclefueltypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/vehiclefueltype/keyfieldnames')
  Future<chopper.Response> vehiclefueltypeKeyfieldnamesGet();

  ///
  @Post(path: '/vehiclemake/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehiclemakeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehiclemake/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vehiclemakeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/vehiclemake')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogic>>
      vehiclemakeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/vehiclemake')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake>>
      vehiclemakePost(
          {@Body()
              required WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake?
                  body});

  ///
  ///@param id
  @Get(path: '/vehiclemake/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake>>
      vehiclemakeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/vehiclemake/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake>>
      vehiclemakeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake?
                  body});

  ///
  ///@param id
  @Delete(path: '/vehiclemake/{id}')
  Future<chopper.Response<bool>> vehiclemakeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/vehiclemake/emptyobject')
  Future<chopper.Response> vehiclemakeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/vehiclemake/emptybrowseobject')
  Future<chopper.Response> vehiclemakeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/vehiclemake/keyfieldnames')
  Future<chopper.Response> vehiclemakeKeyfieldnamesGet();

  ///
  @Post(path: '/vehiclemodel/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehiclemodelBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehiclemodel/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vehiclemodelExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/vehiclemodel')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogic>>
      vehiclemodelGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/vehiclemodel')
  Future<chopper.Response<WebApiModulesSettingsVehicleModelVehicleModel>>
      vehiclemodelPost(
          {@Body()
              required WebApiModulesSettingsVehicleModelVehicleModel? body});

  ///
  ///@param id
  @Get(path: '/vehiclemodel/{id}')
  Future<chopper.Response<WebApiModulesSettingsVehicleModelVehicleModel>>
      vehiclemodelIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/vehiclemodel/{id}')
  Future<chopper.Response<WebApiModulesSettingsVehicleModelVehicleModel>>
      vehiclemodelIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVehicleModelVehicleModel? body});

  ///
  ///@param id
  @Delete(path: '/vehiclemodel/{id}')
  Future<chopper.Response<bool>> vehiclemodelIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/vehiclemodel/emptyobject')
  Future<chopper.Response> vehiclemodelEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/vehiclemodel/emptybrowseobject')
  Future<chopper.Response> vehiclemodelEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/vehiclemodel/keyfieldnames')
  Future<chopper.Response> vehiclemodelKeyfieldnamesGet();

  ///
  @Post(path: '/vehicleschedulestatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicleschedulestatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicleschedulestatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vehicleschedulestatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/vehicleschedulestatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogic>>
      vehicleschedulestatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/vehicleschedulestatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus>>
      vehicleschedulestatusPost(
          {@Body()
              required WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/vehicleschedulestatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus>>
      vehicleschedulestatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/vehicleschedulestatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus>>
      vehicleschedulestatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/vehicleschedulestatus/{id}')
  Future<chopper.Response<bool>> vehicleschedulestatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/vehicleschedulestatus/emptyobject')
  Future<chopper.Response> vehicleschedulestatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/vehicleschedulestatus/emptybrowseobject')
  Future<chopper.Response> vehicleschedulestatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/vehicleschedulestatus/keyfieldnames')
  Future<chopper.Response> vehicleschedulestatusKeyfieldnamesGet();

  ///
  @Post(path: '/vehiclestatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehiclestatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehiclestatus/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vehiclestatusExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/vehiclestatus')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogic>>
      vehiclestatusGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/vehiclestatus')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus>>
      vehiclestatusPost(
          {@Body()
              required WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus?
                  body});

  ///
  ///@param id
  @Get(path: '/vehiclestatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus>>
      vehiclestatusIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/vehiclestatus/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus>>
      vehiclestatusIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus?
                  body});

  ///
  ///@param id
  @Delete(path: '/vehiclestatus/{id}')
  Future<chopper.Response<bool>> vehiclestatusIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/vehiclestatus/emptyobject')
  Future<chopper.Response> vehiclestatusEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/vehiclestatus/emptybrowseobject')
  Future<chopper.Response> vehiclestatusEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/vehiclestatus/keyfieldnames')
  Future<chopper.Response> vehiclestatusKeyfieldnamesGet();

  ///
  @Post(path: '/vehicletype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicletype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vehicletypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/vehicletype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogic>>
      vehicletypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/vehicletype')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType>>
      vehicletypePost(
          {@Body()
              required WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType?
                  body});

  ///
  ///@param id
  @Get(path: '/vehicletype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType>>
      vehicletypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/vehicletype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType>>
      vehicletypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType?
                  body});

  ///
  ///@param id
  @Delete(path: '/vehicletype/{id}')
  Future<chopper.Response<bool>> vehicletypeIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/vehicletype/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypeValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicletype/validatelicenseclass/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypeValidatelicenseclassBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicletype/validateunit/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypeValidateunitBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicletype/validateassetaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypeValidateassetaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicletype/validateincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypeValidateincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicletype/validatesubincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypeValidatesubincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicletype/validateequipmentsaleincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypeValidateequipmentsaleincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicletype/validateldincomeaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypeValidateldincomeaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicletype/validatecostofgoodssoldexpenseaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypeValidatecostofgoodssoldexpenseaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicletype/validatecostofgoodsrentedexpenseaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypeValidatecostofgoodsrentedexpenseaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/vehicletype/emptyobject')
  Future<chopper.Response> vehicletypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/vehicletype/emptybrowseobject')
  Future<chopper.Response> vehicletypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/vehicletype/keyfieldnames')
  Future<chopper.Response> vehicletypeKeyfieldnamesGet();

  ///
  @Post(path: '/vehicletypewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vehicletypewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vehicletypewarehouse/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vehicletypewarehouseExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/vehicletypewarehouse')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogic>>
      vehicletypewarehouseGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/vehicletypewarehouse')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse>>
      vehicletypewarehousePost(
          {@Body()
              required WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse?
                  body});

  ///
  ///@param id
  @Get(path: '/vehicletypewarehouse/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse>>
      vehicletypewarehouseIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/vehicletypewarehouse/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse>>
      vehicletypewarehouseIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse?
                  body});

  ///
  ///@param id
  @Delete(path: '/vehicletypewarehouse/{id}')
  Future<chopper.Response<bool>> vehicletypewarehouseIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/vehicletypewarehouse/emptyobject')
  Future<chopper.Response> vehicletypewarehouseEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/vehicletypewarehouse/emptybrowseobject')
  Future<chopper.Response> vehicletypewarehouseEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/vehicletypewarehouse/keyfieldnames')
  Future<chopper.Response> vehicletypewarehouseKeyfieldnamesGet();

  ///
  @Post(path: '/vendorcatalog/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorcatalogBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorcatalog/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vendorcatalogExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/vendorcatalog')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogic>>
      vendorcatalogGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/vendorcatalog')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog>>
      vendorcatalogPost(
          {@Body()
              required WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog?
                  body});

  ///
  ///@param id
  @Get(path: '/vendorcatalog/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog>>
      vendorcatalogIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/vendorcatalog/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog>>
      vendorcatalogIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog?
                  body});

  ///
  ///@param id
  @Delete(path: '/vendorcatalog/{id}')
  Future<chopper.Response<bool>> vendorcatalogIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/vendorcatalog/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorcatalogValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorcatalog/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorcatalogValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorcatalog/validatecarrier/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorcatalogValidatecarrierBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorcatalog/validateshipvia/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorcatalogValidateshipviaBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/vendorcatalog/emptyobject')
  Future<chopper.Response> vendorcatalogEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/vendorcatalog/emptybrowseobject')
  Future<chopper.Response> vendorcatalogEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/vendorcatalog/keyfieldnames')
  Future<chopper.Response> vendorcatalogKeyfieldnamesGet();

  ///
  @Post(path: '/vendorclass/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorclassBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorclass/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vendorclassExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/vendorclass')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogic>>
      vendorclassGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/vendorclass')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsVendorClassVendorClass>>
      vendorclassPost(
          {@Body()
              required WebApiModulesSettingsVendorSettingsVendorClassVendorClass?
                  body});

  ///
  ///@param id
  @Get(path: '/vendorclass/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsVendorClassVendorClass>>
      vendorclassIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/vendorclass/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsVendorSettingsVendorClassVendorClass>>
      vendorclassIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsVendorSettingsVendorClassVendorClass?
                  body});

  ///
  ///@param id
  @Delete(path: '/vendorclass/{id}')
  Future<chopper.Response<bool>> vendorclassIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/vendorclass/emptyobject')
  Future<chopper.Response> vendorclassEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/vendorclass/emptybrowseobject')
  Future<chopper.Response> vendorclassEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/vendorclass/keyfieldnames')
  Future<chopper.Response> vendorclassKeyfieldnamesGet();

  ///
  @Post(path: '/vendorinvoiceapprover/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoiceapproverBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorinvoiceapprover/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vendorinvoiceapproverExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/vendorinvoiceapprover')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogic>>
      vendorinvoiceapproverGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/vendorinvoiceapprover')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover>>
      vendorinvoiceapproverPost(
          {@Body()
              required WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover?
                  body});

  ///
  ///@param id
  @Get(path: '/vendorinvoiceapprover/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover>>
      vendorinvoiceapproverIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/vendorinvoiceapprover/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover>>
      vendorinvoiceapproverIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover?
                  body});

  ///
  ///@param id
  @Delete(path: '/vendorinvoiceapprover/{id}')
  Future<chopper.Response<bool>> vendorinvoiceapproverIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/vendorinvoiceapprover/validaterole/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoiceapproverValidateroleBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorinvoiceapprover/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoiceapproverValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorinvoiceapprover/validateuser/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoiceapproverValidateuserBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/vendorinvoiceapprover/emptyobject')
  Future<chopper.Response> vendorinvoiceapproverEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/vendorinvoiceapprover/emptybrowseobject')
  Future<chopper.Response> vendorinvoiceapproverEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/vendorinvoiceapprover/keyfieldnames')
  Future<chopper.Response> vendorinvoiceapproverKeyfieldnamesGet();

  ///
  @Post(path: '/venue/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> venueBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/venue/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      venueExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/venue')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogic>>
      venueGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/venue')
  Future<chopper.Response<WebApiModulesSettingsFacilitySettingsVenueVenue>>
      venuePost(
          {@Body()
              required WebApiModulesSettingsFacilitySettingsVenueVenue? body});

  ///
  ///@param id
  @Get(path: '/venue/{id}')
  Future<chopper.Response<WebApiModulesSettingsFacilitySettingsVenueVenue>>
      venueIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/venue/{id}')
  Future<chopper.Response<WebApiModulesSettingsFacilitySettingsVenueVenue>>
      venueIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsFacilitySettingsVenueVenue? body});

  ///
  ///@param id
  @Delete(path: '/venue/{id}')
  Future<chopper.Response<bool>> venueIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/venue/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      venueValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/venue/validatetaxoption/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      venueValidatetaxoptionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/venue/emptyobject')
  Future<chopper.Response> venueEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/venue/emptybrowseobject')
  Future<chopper.Response> venueEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/venue/keyfieldnames')
  Future<chopper.Response> venueKeyfieldnamesGet();

  ///
  @Post(path: '/walldescription/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      walldescriptionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/walldescription/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      walldescriptionExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/walldescription')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogic>>
      walldescriptionGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/walldescription')
  Future<
          chopper.Response<
              WebApiModulesSettingsSetSettingsWallDescriptionWallDescription>>
      walldescriptionPost(
          {@Body()
              required WebApiModulesSettingsSetSettingsWallDescriptionWallDescription?
                  body});

  ///
  ///@param id
  @Get(path: '/walldescription/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSetSettingsWallDescriptionWallDescription>>
      walldescriptionIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/walldescription/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsSetSettingsWallDescriptionWallDescription>>
      walldescriptionIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSetSettingsWallDescriptionWallDescription?
                  body});

  ///
  ///@param id
  @Delete(path: '/walldescription/{id}')
  Future<chopper.Response<bool>> walldescriptionIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/walldescription/emptyobject')
  Future<chopper.Response> walldescriptionEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/walldescription/emptybrowseobject')
  Future<chopper.Response> walldescriptionEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/walldescription/keyfieldnames')
  Future<chopper.Response> walldescriptionKeyfieldnamesGet();

  ///
  @Post(path: '/walltype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      walltypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/walltype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      walltypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/walltype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogic>>
      walltypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/walltype')
  Future<chopper.Response<WebApiModulesSettingsSetSettingsWallTypeWallType>>
      walltypePost(
          {@Body()
              required WebApiModulesSettingsSetSettingsWallTypeWallType? body});

  ///
  ///@param id
  @Get(path: '/walltype/{id}')
  Future<chopper.Response<WebApiModulesSettingsSetSettingsWallTypeWallType>>
      walltypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/walltype/{id}')
  Future<chopper.Response<WebApiModulesSettingsSetSettingsWallTypeWallType>>
      walltypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsSetSettingsWallTypeWallType? body});

  ///
  ///@param id
  @Delete(path: '/walltype/{id}')
  Future<chopper.Response<bool>> walltypeIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/walltype/emptyobject')
  Future<chopper.Response> walltypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/walltype/emptybrowseobject')
  Future<chopper.Response> walltypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/walltype/keyfieldnames')
  Future<chopper.Response> walltypeKeyfieldnamesGet();

  ///
  @Post(path: '/wardrobecare/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      wardrobecareBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/wardrobecare/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      wardrobecareExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/wardrobecare')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogic>>
      wardrobecareGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/wardrobecare')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare>>
      wardrobecarePost(
          {@Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare?
                  body});

  ///
  ///@param id
  @Get(path: '/wardrobecare/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare>>
      wardrobecareIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/wardrobecare/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare>>
      wardrobecareIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare?
                  body});

  ///
  ///@param id
  @Delete(path: '/wardrobecare/{id}')
  Future<chopper.Response<bool>> wardrobecareIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/wardrobecare/emptyobject')
  Future<chopper.Response> wardrobecareEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/wardrobecare/emptybrowseobject')
  Future<chopper.Response> wardrobecareEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/wardrobecare/keyfieldnames')
  Future<chopper.Response> wardrobecareKeyfieldnamesGet();

  ///
  @Post(path: '/wardrobecolor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      wardrobecolorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/wardrobecolor/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      wardrobecolorExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/wardrobecolor')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogic>>
      wardrobecolorGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/wardrobecolor')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor>>
      wardrobecolorPost(
          {@Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor?
                  body});

  ///
  ///@param id
  @Get(path: '/wardrobecolor/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor>>
      wardrobecolorIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/wardrobecolor/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor>>
      wardrobecolorIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor?
                  body});

  ///
  ///@param id
  @Delete(path: '/wardrobecolor/{id}')
  Future<chopper.Response<bool>> wardrobecolorIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/wardrobecolor/emptyobject')
  Future<chopper.Response> wardrobecolorEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/wardrobecolor/emptybrowseobject')
  Future<chopper.Response> wardrobecolorEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/wardrobecolor/keyfieldnames')
  Future<chopper.Response> wardrobecolorKeyfieldnamesGet();

  ///
  @Post(path: '/wardrobecondition/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      wardrobeconditionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/wardrobecondition/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      wardrobeconditionExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/wardrobecondition')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogic>>
      wardrobeconditionGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/wardrobecondition')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition>>
      wardrobeconditionPost(
          {@Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition?
                  body});

  ///
  ///@param id
  @Get(path: '/wardrobecondition/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition>>
      wardrobeconditionIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/wardrobecondition/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition>>
      wardrobeconditionIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition?
                  body});

  ///
  ///@param id
  @Delete(path: '/wardrobecondition/{id}')
  Future<chopper.Response<bool>> wardrobeconditionIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/wardrobecondition/emptyobject')
  Future<chopper.Response> wardrobeconditionEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/wardrobecondition/emptybrowseobject')
  Future<chopper.Response> wardrobeconditionEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/wardrobecondition/keyfieldnames')
  Future<chopper.Response> wardrobeconditionKeyfieldnamesGet();

  ///
  @Post(path: '/wardrobegender/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      wardrobegenderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/wardrobegender/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      wardrobegenderExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/wardrobegender')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogic>>
      wardrobegenderGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/wardrobegender')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender>>
      wardrobegenderPost(
          {@Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender?
                  body});

  ///
  ///@param id
  @Get(path: '/wardrobegender/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender>>
      wardrobegenderIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/wardrobegender/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender>>
      wardrobegenderIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender?
                  body});

  ///
  ///@param id
  @Delete(path: '/wardrobegender/{id}')
  Future<chopper.Response<bool>> wardrobegenderIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/wardrobegender/emptyobject')
  Future<chopper.Response> wardrobegenderEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/wardrobegender/emptybrowseobject')
  Future<chopper.Response> wardrobegenderEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/wardrobegender/keyfieldnames')
  Future<chopper.Response> wardrobegenderKeyfieldnamesGet();

  ///
  @Post(path: '/wardrobelabel/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      wardrobelabelBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/wardrobelabel/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      wardrobelabelExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/wardrobelabel')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogic>>
      wardrobelabelGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/wardrobelabel')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel>>
      wardrobelabelPost(
          {@Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel?
                  body});

  ///
  ///@param id
  @Get(path: '/wardrobelabel/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel>>
      wardrobelabelIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/wardrobelabel/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel>>
      wardrobelabelIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel?
                  body});

  ///
  ///@param id
  @Delete(path: '/wardrobelabel/{id}')
  Future<chopper.Response<bool>> wardrobelabelIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/wardrobelabel/emptyobject')
  Future<chopper.Response> wardrobelabelEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/wardrobelabel/emptybrowseobject')
  Future<chopper.Response> wardrobelabelEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/wardrobelabel/keyfieldnames')
  Future<chopper.Response> wardrobelabelKeyfieldnamesGet();

  ///
  @Post(path: '/wardrobematerial/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      wardrobematerialBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/wardrobematerial/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      wardrobematerialExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/wardrobematerial')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogic>>
      wardrobematerialGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/wardrobematerial')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial>>
      wardrobematerialPost(
          {@Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial?
                  body});

  ///
  ///@param id
  @Get(path: '/wardrobematerial/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial>>
      wardrobematerialIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/wardrobematerial/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial>>
      wardrobematerialIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial?
                  body});

  ///
  ///@param id
  @Delete(path: '/wardrobematerial/{id}')
  Future<chopper.Response<bool>> wardrobematerialIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/wardrobematerial/emptyobject')
  Future<chopper.Response> wardrobematerialEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/wardrobematerial/emptybrowseobject')
  Future<chopper.Response> wardrobematerialEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/wardrobematerial/keyfieldnames')
  Future<chopper.Response> wardrobematerialKeyfieldnamesGet();

  ///
  @Post(path: '/wardrobepattern/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      wardrobepatternBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/wardrobepattern/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      wardrobepatternExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/wardrobepattern')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogic>>
      wardrobepatternGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/wardrobepattern')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern>>
      wardrobepatternPost(
          {@Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern?
                  body});

  ///
  ///@param id
  @Get(path: '/wardrobepattern/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern>>
      wardrobepatternIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/wardrobepattern/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern>>
      wardrobepatternIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern?
                  body});

  ///
  ///@param id
  @Delete(path: '/wardrobepattern/{id}')
  Future<chopper.Response<bool>> wardrobepatternIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/wardrobepattern/emptyobject')
  Future<chopper.Response> wardrobepatternEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/wardrobepattern/emptybrowseobject')
  Future<chopper.Response> wardrobepatternEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/wardrobepattern/keyfieldnames')
  Future<chopper.Response> wardrobepatternKeyfieldnamesGet();

  ///
  @Post(path: '/wardrobeperiod/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      wardrobeperiodBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/wardrobeperiod/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      wardrobeperiodExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/wardrobeperiod')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogic>>
      wardrobeperiodGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/wardrobeperiod')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod>>
      wardrobeperiodPost(
          {@Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod?
                  body});

  ///
  ///@param id
  @Get(path: '/wardrobeperiod/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod>>
      wardrobeperiodIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/wardrobeperiod/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod>>
      wardrobeperiodIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod?
                  body});

  ///
  ///@param id
  @Delete(path: '/wardrobeperiod/{id}')
  Future<chopper.Response<bool>> wardrobeperiodIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/wardrobeperiod/emptyobject')
  Future<chopper.Response> wardrobeperiodEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/wardrobeperiod/emptybrowseobject')
  Future<chopper.Response> wardrobeperiodEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/wardrobeperiod/keyfieldnames')
  Future<chopper.Response> wardrobeperiodKeyfieldnamesGet();

  ///
  @Post(path: '/wardrobesource/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      wardrobesourceBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/wardrobesource/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      wardrobesourceExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/wardrobesource')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogic>>
      wardrobesourceGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/wardrobesource')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource>>
      wardrobesourcePost(
          {@Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource?
                  body});

  ///
  ///@param id
  @Get(path: '/wardrobesource/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource>>
      wardrobesourceIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/wardrobesource/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource>>
      wardrobesourceIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource?
                  body});

  ///
  ///@param id
  @Delete(path: '/wardrobesource/{id}')
  Future<chopper.Response<bool>> wardrobesourceIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/wardrobesource/emptyobject')
  Future<chopper.Response> wardrobesourceEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/wardrobesource/emptybrowseobject')
  Future<chopper.Response> wardrobesourceEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/wardrobesource/keyfieldnames')
  Future<chopper.Response> wardrobesourceKeyfieldnamesGet();

  ///
  @Post(path: '/warehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouse/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehouseExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/warehouse')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic>>
      warehouseGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/warehouse')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse>>
      warehousePost(
          {@Body()
              required WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse?
                  body});

  ///
  ///@param id
  @Get(path: '/warehouse/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse>>
      warehouseIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/warehouse/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse>>
      warehouseIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse?
                  body});

  ///
  ///@param id
  @Delete(path: '/warehouse/{id}')
  Future<chopper.Response<bool>> warehouseIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/warehouse/validatecountry/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseValidatecountryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouse/validateregion/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseValidateregionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouse/validatecurrency/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseValidatecurrencyBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouse/validaterentalbarcoderange/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseValidaterentalbarcoderangeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouse/validatesalesbarcoderange/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseValidatesalesbarcoderangeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouse/validaterentalfixedassetbarcoderange/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseValidaterentalfixedassetbarcoderangeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouse/validateinternalvendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseValidateinternalvendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouse/validateinternaldeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseValidateinternaldealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouse/validatetaxoption/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseValidatetaxoptionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouse/validatetermsconditions/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseValidatetermsconditionsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/warehouse/emptyobject')
  Future<chopper.Response> warehouseEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/warehouse/emptybrowseobject')
  Future<chopper.Response> warehouseEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/warehouse/keyfieldnames')
  Future<chopper.Response> warehouseKeyfieldnamesGet();

  ///
  @Post(path: '/warehouseavailabilityhour/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseavailabilityhourBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouseavailabilityhour/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehouseavailabilityhourExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/warehouseavailabilityhour')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogic>>
      warehouseavailabilityhourGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/warehouseavailabilityhour')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour>>
      warehouseavailabilityhourPost(
          {@Body()
              required WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour?
                  body});

  ///
  ///@param id
  @Get(path: '/warehouseavailabilityhour/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour>>
      warehouseavailabilityhourIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/warehouseavailabilityhour/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour>>
      warehouseavailabilityhourIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour?
                  body});

  ///
  ///@param id
  @Delete(path: '/warehouseavailabilityhour/{id}')
  Future<chopper.Response<bool>> warehouseavailabilityhourIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/warehouseavailabilityhour/emptyobject')
  Future<chopper.Response> warehouseavailabilityhourEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/warehouseavailabilityhour/emptybrowseobject')
  Future<chopper.Response> warehouseavailabilityhourEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/warehouseavailabilityhour/keyfieldnames')
  Future<chopper.Response> warehouseavailabilityhourKeyfieldnamesGet();

  ///
  @Post(path: '/warehousebarcodeskip/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousebarcodeskipBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehousebarcodeskip/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehousebarcodeskipExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/warehousebarcodeskip')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogic>>
      warehousebarcodeskipGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/warehousebarcodeskip')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip>>
      warehousebarcodeskipPost(
          {@Body()
              required WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip?
                  body});

  ///
  ///@param id
  @Get(path: '/warehousebarcodeskip/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip>>
      warehousebarcodeskipIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/warehousebarcodeskip/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip>>
      warehousebarcodeskipIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip?
                  body});

  ///
  ///@param id
  @Delete(path: '/warehousebarcodeskip/{id}')
  Future<chopper.Response<bool>> warehousebarcodeskipIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/warehousebarcodeskip/emptyobject')
  Future<chopper.Response> warehousebarcodeskipEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/warehousebarcodeskip/emptybrowseobject')
  Future<chopper.Response> warehousebarcodeskipEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/warehousebarcodeskip/keyfieldnames')
  Future<chopper.Response> warehousebarcodeskipKeyfieldnamesGet();

  ///
  @Post(path: '/warehousecatalog/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousecatalogBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehousecatalog/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehousecatalogExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/warehousecatalog')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogic>>
      warehousecatalogGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/warehousecatalog')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog>>
      warehousecatalogPost(
          {@Body()
              required WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog?
                  body});

  ///
  ///@param id
  @Get(path: '/warehousecatalog/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog>>
      warehousecatalogIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/warehousecatalog/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog>>
      warehousecatalogIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog?
                  body});

  ///
  ///@param id
  @Delete(path: '/warehousecatalog/{id}')
  Future<chopper.Response<bool>> warehousecatalogIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/warehousecatalog/emptyobject')
  Future<chopper.Response> warehousecatalogEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/warehousecatalog/emptybrowseobject')
  Future<chopper.Response> warehousecatalogEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/warehousecatalog/keyfieldnames')
  Future<chopper.Response> warehousecatalogKeyfieldnamesGet();

  ///
  @Post(path: '/warehousedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehousedepartment/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehousedepartmentExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/warehousedepartment')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogic>>
      warehousedepartmentGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/warehousedepartment')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment>>
      warehousedepartmentPost(
          {@Body()
              required WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment?
                  body});

  ///
  ///@param id
  @Get(path: '/warehousedepartment/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment>>
      warehousedepartmentIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/warehousedepartment/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment>>
      warehousedepartmentIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment?
                  body});

  ///
  @Post(path: '/warehousedepartment/validaterequestto/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedepartmentValidaterequesttoBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/warehousedepartment/emptyobject')
  Future<chopper.Response> warehousedepartmentEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/warehousedepartment/emptybrowseobject')
  Future<chopper.Response> warehousedepartmentEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/warehousedepartment/keyfieldnames')
  Future<chopper.Response> warehousedepartmentKeyfieldnamesGet();

  ///
  @Post(path: '/warehouseinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouseinventorytype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehouseinventorytypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/warehouseinventorytype')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogic>>
      warehouseinventorytypeGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/warehouseinventorytype')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType>>
      warehouseinventorytypePost(
          {@Body()
              required WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType?
                  body});

  ///
  ///@param id
  @Get(path: '/warehouseinventorytype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType>>
      warehouseinventorytypeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/warehouseinventorytype/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType>>
      warehouseinventorytypeIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType?
                  body});

  ///Get an empty object
  @Get(path: '/warehouseinventorytype/emptyobject')
  Future<chopper.Response> warehouseinventorytypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/warehouseinventorytype/emptybrowseobject')
  Future<chopper.Response> warehouseinventorytypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/warehouseinventorytype/keyfieldnames')
  Future<chopper.Response> warehouseinventorytypeKeyfieldnamesGet();

  ///
  @Post(path: '/warehouselocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouselocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouselocation/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehouselocationExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/warehouselocation')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogic>>
      warehouselocationGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/warehouselocation')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseLocationWarehouseLocation>>
      warehouselocationPost(
          {@Body()
              required WebApiModulesSettingsWarehouseLocationWarehouseLocation?
                  body});

  ///
  ///@param id
  @Get(path: '/warehouselocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseLocationWarehouseLocation>>
      warehouselocationIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/warehouselocation/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseLocationWarehouseLocation>>
      warehouselocationIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWarehouseLocationWarehouseLocation?
                  body});

  ///
  ///@param id
  @Delete(path: '/warehouselocation/{id}')
  Future<chopper.Response<bool>> warehouselocationIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/warehouselocation/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouselocationValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/warehouselocation/emptyobject')
  Future<chopper.Response> warehouselocationEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/warehouselocation/emptybrowseobject')
  Future<chopper.Response> warehouselocationEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/warehouselocation/keyfieldnames')
  Future<chopper.Response> warehouselocationKeyfieldnamesGet();

  ///
  @Post(path: '/warehousequiklocateapprover/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousequiklocateapproverBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehousequiklocateapprover/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehousequiklocateapproverExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/warehousequiklocateapprover')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogic>>
      warehousequiklocateapproverGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/warehousequiklocateapprover')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover>>
      warehousequiklocateapproverPost(
          {@Body()
              required WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover?
                  body});

  ///
  ///@param id
  @Get(path: '/warehousequiklocateapprover/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover>>
      warehousequiklocateapproverIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/warehousequiklocateapprover/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover>>
      warehousequiklocateapproverIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover?
                  body});

  ///
  ///@param id
  @Delete(path: '/warehousequiklocateapprover/{id}')
  Future<chopper.Response<bool>> warehousequiklocateapproverIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/warehousequiklocateapprover/validateuser/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousequiklocateapproverValidateuserBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/warehousequiklocateapprover/emptyobject')
  Future<chopper.Response> warehousequiklocateapproverEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/warehousequiklocateapprover/emptybrowseobject')
  Future<chopper.Response> warehousequiklocateapproverEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/warehousequiklocateapprover/keyfieldnames')
  Future<chopper.Response> warehousequiklocateapproverKeyfieldnamesGet();

  ///
  @Post(path: '/webcatalog/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      webcatalogBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/webcatalog/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      webcatalogExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/webcatalog')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogic>>
      webcatalogGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/webcatalog')
  Future<
          chopper.Response<
              WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog>>
      webcatalogPost(
          {@Body()
              required WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog?
                  body});

  ///
  ///@param id
  @Get(path: '/webcatalog/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog>>
      webcatalogIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/webcatalog/{id}')
  Future<
          chopper.Response<
              WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog>>
      webcatalogIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog?
                  body});

  ///
  ///@param id
  @Delete(path: '/webcatalog/{id}')
  Future<chopper.Response<bool>> webcatalogIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/webcatalog/emptyobject')
  Future<chopper.Response> webcatalogEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/webcatalog/emptybrowseobject')
  Future<chopper.Response> webcatalogEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/webcatalog/keyfieldnames')
  Future<chopper.Response> webcatalogKeyfieldnamesGet();

  ///
  @Post(path: '/widget/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>> widgetBrowsePost(
      {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/widget/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      widgetExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/widget')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogic>>
      widgetGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/widget')
  Future<chopper.Response<WebApiModulesSettingsWidgetSettingsWidgetWidget>>
      widgetPost(
          {@Body()
              required WebApiModulesSettingsWidgetSettingsWidgetWidget? body});

  ///
  ///@param id
  @Get(path: '/widget/{id}')
  Future<chopper.Response<WebApiModulesSettingsWidgetSettingsWidgetWidget>>
      widgetIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/widget/{id}')
  Future<chopper.Response<WebApiModulesSettingsWidgetSettingsWidgetWidget>>
      widgetIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWidgetSettingsWidgetWidget? body});

  ///
  ///@param id
  @Delete(path: '/widget/{id}')
  Future<chopper.Response<bool>> widgetIdDelete(
      {@Path('id') required String? id});

  ///
  @Post(path: '/widget/validatedatebehavior/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      widgetValidatedatebehaviorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/widget/validateaxisnumberformat/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      widgetValidateaxisnumberformatBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/widget/validatedatanumberformat/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      widgetValidatedatanumberformatBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/widget/emptyobject')
  Future<chopper.Response> widgetEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/widget/emptybrowseobject')
  Future<chopper.Response> widgetEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/widget/keyfieldnames')
  Future<chopper.Response> widgetKeyfieldnamesGet();

  ///
  @Post(path: '/widgetdatebehavior/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      widgetdatebehaviorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/widgetdatebehavior/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      widgetdatebehaviorExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/widgetdatebehavior/emptyobject')
  Future<chopper.Response> widgetdatebehaviorEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/widgetdatebehavior/emptybrowseobject')
  Future<chopper.Response> widgetdatebehaviorEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/widgetdatebehavior/keyfieldnames')
  Future<chopper.Response> widgetdatebehaviorKeyfieldnamesGet();

  ///
  @Post(path: '/workweek/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      workweekBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/workweek/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      workweekExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/workweek')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogic>>
      workweekGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/workweek')
  Future<
          chopper
              .Response<WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek>>
      workweekPost(
          {@Body()
              required WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek?
                  body});

  ///
  ///@param id
  @Get(path: '/workweek/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek>>
      workweekIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/workweek/{id}')
  Future<
          chopper
              .Response<WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek>>
      workweekIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek?
                  body});

  ///
  ///@param id
  @Delete(path: '/workweek/{id}')
  Future<chopper.Response<bool>> workweekIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/workweek/emptyobject')
  Future<chopper.Response> workweekEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/workweek/emptybrowseobject')
  Future<chopper.Response> workweekEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/workweek/keyfieldnames')
  Future<chopper.Response> workweekKeyfieldnamesGet();
}

final Map<Type, Object Function(Map<String, dynamic>)>
    SettingsJsonDecoderMappings = {
  FwCoreApiSwashbuckleBadRequestResponse:
      FwCoreApiSwashbuckleBadRequestResponse.fromJsonFactory,
  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult:
      FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
          .fromJsonFactory,
  FwStandardBusinessLogicFwBusinessLogicFieldDefinition:
      FwStandardBusinessLogicFwBusinessLogicFieldDefinition.fromJsonFactory,
  FwStandardDataFwCustomValue: FwStandardDataFwCustomValue.fromJsonFactory,
  FwStandardDataFwDefaultAttribute:
      FwStandardDataFwDefaultAttribute.fromJsonFactory,
  FwStandardModelsBrowseRequest: FwStandardModelsBrowseRequest.fromJsonFactory,
  FwStandardModelsCheckBoxListItem:
      FwStandardModelsCheckBoxListItem.fromJsonFactory,
  FwStandardModelsFwApiException:
      FwStandardModelsFwApiException.fromJsonFactory,
  FwStandardModelsFwQueryFilter: FwStandardModelsFwQueryFilter.fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogic:
      FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogic
          .fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogic:
      FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogic
          .fromJsonFactory,
  FwStandardSqlServerFwJsonDataTable:
      FwStandardSqlServerFwJsonDataTable.fromJsonFactory,
  FwStandardSqlServerFwJsonDataTableColumn:
      FwStandardSqlServerFwJsonDataTableColumn.fromJsonFactory,
  MicrosoftAspNetCoreMvcActionResult:
      MicrosoftAspNetCoreMvcActionResult.fromJsonFactory,
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogic:
      MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogic
          .fromJsonFactory,
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic:
      MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic
          .fromJsonFactory,
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic:
      MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic
          .fromJsonFactory,
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic:
      MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic
          .fromJsonFactory,
  WebApiLogicSortItemsResponse: WebApiLogicSortItemsResponse.fromJsonFactory,
  WebApiModulesInventoryStorageContainerStorageContainer:
      WebApiModulesInventoryStorageContainerStorageContainer.fromJsonFactory,
  WebApiModulesInventoryStorageContainerStorageContainerItem:
      WebApiModulesInventoryStorageContainerStorageContainerItem
          .fromJsonFactory,
  WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings:
      WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings
          .fromJsonFactory,
  WebApiModulesSettingsAccountingSettingsGlAccountGlAccount:
      WebApiModulesSettingsAccountingSettingsGlAccountGlAccount.fromJsonFactory,
  WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule:
      WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule
          .fromJsonFactory,
  WebApiModulesSettingsActivityStatusActivityStatus:
      WebApiModulesSettingsActivityStatusActivityStatus.fromJsonFactory,
  WebApiModulesSettingsActivityStatusSortActivityStatusRequest:
      WebApiModulesSettingsActivityStatusSortActivityStatusRequest
          .fromJsonFactory,
  WebApiModulesSettingsActivityTypeActivityType:
      WebApiModulesSettingsActivityTypeActivityType.fromJsonFactory,
  WebApiModulesSettingsAddressSettingsCountryCountry:
      WebApiModulesSettingsAddressSettingsCountryCountry.fromJsonFactory,
  WebApiModulesSettingsAddressSettingsStateState:
      WebApiModulesSettingsAddressSettingsStateState.fromJsonFactory,
  WebApiModulesSettingsAppReportDesignerAppReportDesigner:
      WebApiModulesSettingsAppReportDesignerAppReportDesigner.fromJsonFactory,
  WebApiModulesSettingsAttributeValueAttributeValue:
      WebApiModulesSettingsAttributeValueAttributeValue.fromJsonFactory,
  WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog:
      WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog
          .fromJsonFactory,
  WebApiModulesSettingsBillingCycleEventBillingCycleEvent:
      WebApiModulesSettingsBillingCycleEventBillingCycleEvent.fromJsonFactory,
  WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle:
      WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle
          .fromJsonFactory,
  WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus:
      WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus
          .fromJsonFactory,
  WebApiModulesSettingsCalendarSettingsHolidayHoliday:
      WebApiModulesSettingsCalendarSettingsHolidayHoliday.fromJsonFactory,
  WebApiModulesSettingsCategorySortCategoryRequest:
      WebApiModulesSettingsCategorySortCategoryRequest.fromJsonFactory,
  WebApiModulesSettingsContactSettingsContactEventContactEvent:
      WebApiModulesSettingsContactSettingsContactEventContactEvent
          .fromJsonFactory,
  WebApiModulesSettingsContactSettingsContactTitleContactTitle:
      WebApiModulesSettingsContactSettingsContactTitleContactTitle
          .fromJsonFactory,
  WebApiModulesSettingsContactSettingsMailListMailList:
      WebApiModulesSettingsContactSettingsMailListMailList.fromJsonFactory,
  WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType:
      WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType
          .fromJsonFactory,
  WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad:
      WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad
          .fromJsonFactory,
  WebApiModulesSettingsCrewLocationCrewLocation:
      WebApiModulesSettingsCrewLocationCrewLocation.fromJsonFactory,
  WebApiModulesSettingsCrewPositionCrewPosition:
      WebApiModulesSettingsCrewPositionCrewPosition.fromJsonFactory,
  WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate:
      WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate
          .fromJsonFactory,
  WebApiModulesSettingsCurrencySettingsCurrencyCurrency:
      WebApiModulesSettingsCurrencySettingsCurrencyCurrency.fromJsonFactory,
  WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus:
      WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus
          .fromJsonFactory,
  WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory:
      WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory
          .fromJsonFactory,
  WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus:
      WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus
          .fromJsonFactory,
  WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType:
      WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType
          .fromJsonFactory,
  WebApiModulesSettingsDealSettingsDealClassificationDealClassification:
      WebApiModulesSettingsDealSettingsDealClassificationDealClassification
          .fromJsonFactory,
  WebApiModulesSettingsDealSettingsDealStatusDealStatus:
      WebApiModulesSettingsDealSettingsDealStatusDealStatus.fromJsonFactory,
  WebApiModulesSettingsDealSettingsDealTypeDealType:
      WebApiModulesSettingsDealSettingsDealTypeDealType.fromJsonFactory,
  WebApiModulesSettingsDealSettingsProductionTypeProductionType:
      WebApiModulesSettingsDealSettingsProductionTypeProductionType
          .fromJsonFactory,
  WebApiModulesSettingsDealSettingsScheduleTypeScheduleType:
      WebApiModulesSettingsDealSettingsScheduleTypeScheduleType.fromJsonFactory,
  WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType:
      WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType
          .fromJsonFactory,
  WebApiModulesSettingsDepartmentLocationDepartmentLocation:
      WebApiModulesSettingsDepartmentLocationDepartmentLocation.fromJsonFactory,
  WebApiModulesSettingsDepartmentSettingsDepartmentDepartment:
      WebApiModulesSettingsDepartmentSettingsDepartmentDepartment
          .fromJsonFactory,
  WebApiModulesSettingsDiscountItemDiscountItem:
      WebApiModulesSettingsDiscountItemDiscountItem.fromJsonFactory,
  WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequest:
      WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequest
          .fromJsonFactory,
  WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponse:
      WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponse
          .fromJsonFactory,
  WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate:
      WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate
          .fromJsonFactory,
  WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings:
      WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings
          .fromJsonFactory,
  WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter:
      WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter
          .fromJsonFactory,
  WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType:
      WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType
          .fromJsonFactory,
  WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions:
      WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions
          .fromJsonFactory,
  WebApiModulesSettingsEventSettingsEventCategoryEventCategory:
      WebApiModulesSettingsEventSettingsEventCategoryEventCategory
          .fromJsonFactory,
  WebApiModulesSettingsEventSettingsEventTypeEventType:
      WebApiModulesSettingsEventSettingsEventTypeEventType.fromJsonFactory,
  WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType:
      WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType
          .fromJsonFactory,
  WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType:
      WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType
          .fromJsonFactory,
  WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat:
      WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat
          .fromJsonFactory,
  WebApiModulesSettingsFacilitySettingsBuildingBuilding:
      WebApiModulesSettingsFacilitySettingsBuildingBuilding.fromJsonFactory,
  WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequest:
      WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequest
          .fromJsonFactory,
  WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequest:
      WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequest
          .fromJsonFactory,
  WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequest:
      WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequest
          .fromJsonFactory,
  WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory:
      WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory
          .fromJsonFactory,
  WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate:
      WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate
          .fromJsonFactory,
  WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus:
      WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus
          .fromJsonFactory,
  WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus:
      WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus
          .fromJsonFactory,
  WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType:
      WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType
          .fromJsonFactory,
  WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType:
      WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType.fromJsonFactory,
  WebApiModulesSettingsFacilitySettingsVenueVenue:
      WebApiModulesSettingsFacilitySettingsVenueVenue.fromJsonFactory,
  WebApiModulesSettingsFiscalMonthFiscalMonth:
      WebApiModulesSettingsFiscalMonthFiscalMonth.fromJsonFactory,
  WebApiModulesSettingsFiscalYearFiscalYear:
      WebApiModulesSettingsFiscalYearFiscalYear.fromJsonFactory,
  WebApiModulesSettingsFloorFloor:
      WebApiModulesSettingsFloorFloor.fromJsonFactory,
  WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType:
      WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType.fromJsonFactory,
  WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake:
      WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake
          .fromJsonFactory,
  WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel:
      WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel
          .fromJsonFactory,
  WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating:
      WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating
          .fromJsonFactory,
  WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType:
      WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType
          .fromJsonFactory,
  WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts:
      WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts
          .fromJsonFactory,
  WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse:
      WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse
          .fromJsonFactory,
  WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory:
      WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsAttributeAttribute:
      WebApiModulesSettingsInventorySettingsAttributeAttribute.fromJsonFactory,
  WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange:
      WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason:
      WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition:
      WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup:
      WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank:
      WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus:
      WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType:
      WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequest:
      WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequest
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory:
      WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory:
      WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason:
      WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory:
      WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsUnitUnit:
      WebApiModulesSettingsInventorySettingsUnitUnit.fromJsonFactory,
  WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason:
      WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason
          .fromJsonFactory,
  WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog:
      WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog
          .fromJsonFactory,
  WebApiModulesSettingsLaborSettingsCrewCrew:
      WebApiModulesSettingsLaborSettingsCrewCrew.fromJsonFactory,
  WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus:
      WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus
          .fromJsonFactory,
  WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus:
      WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus.fromJsonFactory,
  WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory:
      WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory
          .fromJsonFactory,
  WebApiModulesSettingsLaborSettingsLaborRateLaborRate:
      WebApiModulesSettingsLaborSettingsLaborRateLaborRate.fromJsonFactory,
  WebApiModulesSettingsLaborSettingsLaborTypeLaborType:
      WebApiModulesSettingsLaborSettingsLaborTypeLaborType.fromJsonFactory,
  WebApiModulesSettingsLaborSettingsPositionPosition:
      WebApiModulesSettingsLaborSettingsPositionPosition.fromJsonFactory,
  WebApiModulesSettingsMarketSegmentJobMarketSegmentJob:
      WebApiModulesSettingsMarketSegmentJobMarketSegmentJob.fromJsonFactory,
  WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory:
      WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory
          .fromJsonFactory,
  WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate:
      WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate
          .fromJsonFactory,
  WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType:
      WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType
          .fromJsonFactory,
  WebApiModulesSettingsNumberFormatNumberFormat:
      WebApiModulesSettingsNumberFormatNumberFormat.fromJsonFactory,
  WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation:
      WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation
          .fromJsonFactory,
  WebApiModulesSettingsOrderItemRecTypeOrderItemRecType:
      WebApiModulesSettingsOrderItemRecTypeOrderItemRecType.fromJsonFactory,
  WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason:
      WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason
          .fromJsonFactory,
  WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment:
      WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment
          .fromJsonFactory,
  WebApiModulesSettingsOrderSettingsMarketTypeMarketType:
      WebApiModulesSettingsOrderSettingsMarketTypeMarketType.fromJsonFactory,
  WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation:
      WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation
          .fromJsonFactory,
  WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo:
      WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo.fromJsonFactory,
  WebApiModulesSettingsOrderSettingsOrderTypeOrderType:
      WebApiModulesSettingsOrderSettingsOrderTypeOrderType.fromJsonFactory,
  WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle:
      WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle
          .fromJsonFactory,
  WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType:
      WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType.fromJsonFactory,
  WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequest:
      WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequest
          .fromJsonFactory,
  WebApiModulesSettingsOrderTypeLocationOrderTypeLocation:
      WebApiModulesSettingsOrderTypeLocationOrderTypeLocation.fromJsonFactory,
  WebApiModulesSettingsOrderTypeNoteOrderTypeNote:
      WebApiModulesSettingsOrderTypeNoteOrderTypeNote.fromJsonFactory,
  WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms:
      WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms
          .fromJsonFactory,
  WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType:
      WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType
          .fromJsonFactory,
  WebApiModulesSettingsPersonnelTypePersonnelType:
      WebApiModulesSettingsPersonnelTypePersonnelType.fromJsonFactory,
  WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus:
      WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus
          .fromJsonFactory,
  WebApiModulesSettingsPoSettingsPoApproverPoApprover:
      WebApiModulesSettingsPoSettingsPoApproverPoApprover.fromJsonFactory,
  WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole:
      WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole
          .fromJsonFactory,
  WebApiModulesSettingsPoSettingsPoClassificationPoClassification:
      WebApiModulesSettingsPoSettingsPoClassificationPoClassification
          .fromJsonFactory,
  WebApiModulesSettingsPoSettingsPoImportancePoImportance:
      WebApiModulesSettingsPoSettingsPoImportancePoImportance.fromJsonFactory,
  WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason:
      WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason
          .fromJsonFactory,
  WebApiModulesSettingsPoSettingsPoTypePoType:
      WebApiModulesSettingsPoSettingsPoTypePoType.fromJsonFactory,
  WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover:
      WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover
          .fromJsonFactory,
  WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity:
      WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity
          .fromJsonFactory,
  WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequest:
      WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequest
          .fromJsonFactory,
  WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride:
      WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride
          .fromJsonFactory,
  WebApiModulesSettingsPresentationLayerFormPresentationLayerForm:
      WebApiModulesSettingsPresentationLayerFormPresentationLayerForm
          .fromJsonFactory,
  WebApiModulesSettingsPresentationSettingsFormDesignFormDesign:
      WebApiModulesSettingsPresentationSettingsFormDesignFormDesign
          .fromJsonFactory,
  WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer:
      WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer
          .fromJsonFactory,
  WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild:
      WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild
          .fromJsonFactory,
  WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning:
      WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning
          .fromJsonFactory,
  WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit:
      WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit
          .fromJsonFactory,
  WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings:
      WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings
          .fromJsonFactory,
  WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems:
      WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems
          .fromJsonFactory,
  WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered:
      WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered
          .fromJsonFactory,
  WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition:
      WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition
          .fromJsonFactory,
  WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate:
      WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate
          .fromJsonFactory,
  WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequest:
      WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequest
          .fromJsonFactory,
  WebApiModulesSettingsRankRank: WebApiModulesSettingsRankRank.fromJsonFactory,
  WebApiModulesSettingsRateLocationTaxRateLocationTax:
      WebApiModulesSettingsRateLocationTaxRateLocationTax.fromJsonFactory,
  WebApiModulesSettingsRateTypeRateType:
      WebApiModulesSettingsRateTypeRateType.fromJsonFactory,
  WebApiModulesSettingsRateWarehouseRateWarehouse:
      WebApiModulesSettingsRateWarehouseRateWarehouse.fromJsonFactory,
  WebApiModulesSettingsRegionSettingsRegionRegion:
      WebApiModulesSettingsRegionSettingsRegionRegion.fromJsonFactory,
  WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus:
      WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus
          .fromJsonFactory,
  WebApiModulesSettingsSetSettingsSetConditionSetCondition:
      WebApiModulesSettingsSetSettingsSetConditionSetCondition.fromJsonFactory,
  WebApiModulesSettingsSetSettingsSetOpeningSetOpening:
      WebApiModulesSettingsSetSettingsSetOpeningSetOpening.fromJsonFactory,
  WebApiModulesSettingsSetSettingsSetSurfaceSetSurface:
      WebApiModulesSettingsSetSettingsSetSurfaceSetSurface.fromJsonFactory,
  WebApiModulesSettingsSetSettingsWallDescriptionWallDescription:
      WebApiModulesSettingsSetSettingsWallDescriptionWallDescription
          .fromJsonFactory,
  WebApiModulesSettingsSetSettingsWallTypeWallType:
      WebApiModulesSettingsSetSettingsWallTypeWallType.fromJsonFactory,
  WebApiModulesSettingsShipViaSettingsShipViaShipVia:
      WebApiModulesSettingsShipViaSettingsShipViaShipVia.fromJsonFactory,
  WebApiModulesSettingsSourceSettingsSourceSource:
      WebApiModulesSettingsSourceSettingsSourceSource.fromJsonFactory,
  WebApiModulesSettingsSpaceSpace:
      WebApiModulesSettingsSpaceSpace.fromJsonFactory,
  WebApiModulesSettingsSpaceRateSpaceRate:
      WebApiModulesSettingsSpaceRateSpaceRate.fromJsonFactory,
  WebApiModulesSettingsSubCategorySortSubCategoriesRequest:
      WebApiModulesSettingsSubCategorySortSubCategoriesRequest.fromJsonFactory,
  WebApiModulesSettingsSubCategorySubCategory:
      WebApiModulesSettingsSubCategorySubCategory.fromJsonFactory,
  WebApiModulesSettingsSystemNumberSystemNumber:
      WebApiModulesSettingsSystemNumberSystemNumber.fromJsonFactory,
  WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings:
      WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings
          .fromJsonFactory,
  WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings:
      WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings
          .fromJsonFactory,
  WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings:
      WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings
          .fromJsonFactory,
  WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings:
      WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings
          .fromJsonFactory,
  WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings:
      WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings
          .fromJsonFactory,
  WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings:
      WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings
          .fromJsonFactory,
  WebApiModulesSettingsTaxSettingsTaxOptionTaxOption:
      WebApiModulesSettingsTaxSettingsTaxOptionTaxOption.fromJsonFactory,
  WebApiModulesSettingsTemplateSettingsTemplateTemplate:
      WebApiModulesSettingsTemplateSettingsTemplateTemplate.fromJsonFactory,
  WebApiModulesSettingsUserProfileUserProfile:
      WebApiModulesSettingsUserProfileUserProfile.fromJsonFactory,
  WebApiModulesSettingsUserSearchSettingsUserSearchSettings:
      WebApiModulesSettingsUserSearchSettingsUserSearchSettings.fromJsonFactory,
  WebApiModulesSettingsUserSettingsSoundSound:
      WebApiModulesSettingsUserSettingsSoundSound.fromJsonFactory,
  WebApiModulesSettingsUserSettingsUserStatusUserStatus:
      WebApiModulesSettingsUserSettingsUserStatusUserStatus.fromJsonFactory,
  WebApiModulesSettingsVehicleModelVehicleModel:
      WebApiModulesSettingsVehicleModelVehicleModel.fromJsonFactory,
  WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass:
      WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass
          .fromJsonFactory,
  WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor:
      WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor
          .fromJsonFactory,
  WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType:
      WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType
          .fromJsonFactory,
  WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake:
      WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake
          .fromJsonFactory,
  WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus:
      WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus
          .fromJsonFactory,
  WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus:
      WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus
          .fromJsonFactory,
  WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType:
      WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType
          .fromJsonFactory,
  WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse:
      WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse
          .fromJsonFactory,
  WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType:
      WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType
          .fromJsonFactory,
  WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus:
      WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus
          .fromJsonFactory,
  WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog:
      WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog
          .fromJsonFactory,
  WebApiModulesSettingsVendorSettingsVendorClassVendorClass:
      WebApiModulesSettingsVendorSettingsVendorClassVendorClass.fromJsonFactory,
  WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare:
      WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare
          .fromJsonFactory,
  WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor:
      WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor
          .fromJsonFactory,
  WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition:
      WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition
          .fromJsonFactory,
  WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender:
      WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender
          .fromJsonFactory,
  WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel:
      WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel
          .fromJsonFactory,
  WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial:
      WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial
          .fromJsonFactory,
  WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern:
      WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern
          .fromJsonFactory,
  WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod:
      WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod
          .fromJsonFactory,
  WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource:
      WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource
          .fromJsonFactory,
  WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour:
      WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour
          .fromJsonFactory,
  WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip:
      WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip
          .fromJsonFactory,
  WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment:
      WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment
          .fromJsonFactory,
  WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType:
      WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType
          .fromJsonFactory,
  WebApiModulesSettingsWarehouseLocationWarehouseLocation:
      WebApiModulesSettingsWarehouseLocationWarehouseLocation.fromJsonFactory,
  WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover:
      WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover
          .fromJsonFactory,
  WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation:
      WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation
          .fromJsonFactory,
  WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse:
      WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse.fromJsonFactory,
  WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog:
      WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog
          .fromJsonFactory,
  WebApiModulesSettingsWebUserWidgetUserWidget:
      WebApiModulesSettingsWebUserWidgetUserWidget.fromJsonFactory,
  WebApiModulesSettingsWidgetSettingsWidgetWidget:
      WebApiModulesSettingsWidgetSettingsWidgetWidget.fromJsonFactory,
  WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek:
      WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek.fromJsonFactory,
};

@JsonSerializable(explicitToJson: true)
class FwCoreApiSwashbuckleBadRequestResponse {
  FwCoreApiSwashbuckleBadRequestResponse();

  factory FwCoreApiSwashbuckleBadRequestResponse.fromJson(
          Map<String, dynamic> json) =>
      _$FwCoreApiSwashbuckleBadRequestResponseFromJson(json);

  static const fromJsonFactory =
      _$FwCoreApiSwashbuckleBadRequestResponseFromJson;
  static const toJsonFactory = _$FwCoreApiSwashbuckleBadRequestResponseToJson;
  Map<String, dynamic> toJson() =>
      _$FwCoreApiSwashbuckleBadRequestResponseToJson(this);
}

@JsonSerializable(explicitToJson: true)
class FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult {
  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult({
    this.downloadUrl,
  });

  factory FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult.fromJson(
          Map<String, dynamic> json) =>
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultFromJson(
          json);

  @JsonKey(name: 'downloadUrl', includeIfNull: false)
  final String? downloadUrl;
  static const fromJsonFactory =
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultFromJson;
  static const toJsonFactory =
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultToJson;
  Map<String, dynamic> toJson() =>
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult &&
            (identical(other.downloadUrl, downloadUrl) ||
                const DeepCollectionEquality()
                    .equals(other.downloadUrl, downloadUrl)));
  }
}

extension $FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultExtension
    on FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult {
  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
      copyWith({String? downloadUrl}) {
    return FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult(
        downloadUrl: downloadUrl ?? this.downloadUrl);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardBusinessLogicFwBusinessLogicFieldDefinition {
  FwStandardBusinessLogicFwBusinessLogicFieldDefinition({
    this.name,
    this.dataType,
  });

  factory FwStandardBusinessLogicFwBusinessLogicFieldDefinition.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionFromJson(json);

  @JsonKey(name: 'Name', includeIfNull: false)
  final String? name;
  @JsonKey(
      name: 'DataType',
      includeIfNull: false,
      toJson: fwStandardSqlServerFwDataTypesToJson,
      fromJson: fwStandardSqlServerFwDataTypesFromJson)
  final enums.FwStandardSqlServerFwDataTypes? dataType;
  static const fromJsonFactory =
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionFromJson;
  static const toJsonFactory =
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardBusinessLogicFwBusinessLogicFieldDefinition &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.dataType, dataType) ||
                const DeepCollectionEquality()
                    .equals(other.dataType, dataType)));
  }
}

extension $FwStandardBusinessLogicFwBusinessLogicFieldDefinitionExtension
    on FwStandardBusinessLogicFwBusinessLogicFieldDefinition {
  FwStandardBusinessLogicFwBusinessLogicFieldDefinition copyWith(
      {String? name, enums.FwStandardSqlServerFwDataTypes? dataType}) {
    return FwStandardBusinessLogicFwBusinessLogicFieldDefinition(
        name: name ?? this.name, dataType: dataType ?? this.dataType);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardDataFwCustomValue {
  FwStandardDataFwCustomValue({
    this.fieldName,
    this.fieldValue,
    this.fieldType,
  });

  factory FwStandardDataFwCustomValue.fromJson(Map<String, dynamic> json) =>
      _$FwStandardDataFwCustomValueFromJson(json);

  @JsonKey(name: 'FieldName', includeIfNull: false)
  final String? fieldName;
  @JsonKey(name: 'FieldValue', includeIfNull: false)
  final String? fieldValue;
  @JsonKey(name: 'FieldType', includeIfNull: false)
  final String? fieldType;
  static const fromJsonFactory = _$FwStandardDataFwCustomValueFromJson;
  static const toJsonFactory = _$FwStandardDataFwCustomValueToJson;
  Map<String, dynamic> toJson() => _$FwStandardDataFwCustomValueToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardDataFwCustomValue &&
            (identical(other.fieldName, fieldName) ||
                const DeepCollectionEquality()
                    .equals(other.fieldName, fieldName)) &&
            (identical(other.fieldValue, fieldValue) ||
                const DeepCollectionEquality()
                    .equals(other.fieldValue, fieldValue)) &&
            (identical(other.fieldType, fieldType) ||
                const DeepCollectionEquality()
                    .equals(other.fieldType, fieldType)));
  }
}

extension $FwStandardDataFwCustomValueExtension on FwStandardDataFwCustomValue {
  FwStandardDataFwCustomValue copyWith(
      {String? fieldName, String? fieldValue, String? fieldType}) {
    return FwStandardDataFwCustomValue(
        fieldName: fieldName ?? this.fieldName,
        fieldValue: fieldValue ?? this.fieldValue,
        fieldType: fieldType ?? this.fieldType);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardDataFwDefaultAttribute {
  FwStandardDataFwDefaultAttribute({
    this.fieldName,
    this.attributeName,
    this.defaultValue,
  });

  factory FwStandardDataFwDefaultAttribute.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardDataFwDefaultAttributeFromJson(json);

  @JsonKey(name: 'FieldName', includeIfNull: false)
  final String? fieldName;
  @JsonKey(name: 'AttributeName', includeIfNull: false)
  final String? attributeName;
  @JsonKey(name: 'DefaultValue', includeIfNull: false)
  final String? defaultValue;
  static const fromJsonFactory = _$FwStandardDataFwDefaultAttributeFromJson;
  static const toJsonFactory = _$FwStandardDataFwDefaultAttributeToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardDataFwDefaultAttributeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardDataFwDefaultAttribute &&
            (identical(other.fieldName, fieldName) ||
                const DeepCollectionEquality()
                    .equals(other.fieldName, fieldName)) &&
            (identical(other.attributeName, attributeName) ||
                const DeepCollectionEquality()
                    .equals(other.attributeName, attributeName)) &&
            (identical(other.defaultValue, defaultValue) ||
                const DeepCollectionEquality()
                    .equals(other.defaultValue, defaultValue)));
  }
}

extension $FwStandardDataFwDefaultAttributeExtension
    on FwStandardDataFwDefaultAttribute {
  FwStandardDataFwDefaultAttribute copyWith(
      {String? fieldName, String? attributeName, String? defaultValue}) {
    return FwStandardDataFwDefaultAttribute(
        fieldName: fieldName ?? this.fieldName,
        attributeName: attributeName ?? this.attributeName,
        defaultValue: defaultValue ?? this.defaultValue);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsBrowseRequest {
  FwStandardModelsBrowseRequest({
    this.miscfields,
    this.module,
    this.options,
    this.orderby,
    this.orderbydirection,
    this.top,
    this.pageno,
    this.pagesize,
    this.searchfieldoperators,
    this.searchfields,
    this.searchfieldvalues,
    this.searchfieldtypes,
    this.searchseparators,
    this.searchcondition,
    this.searchconjunctions,
    this.uniqueids,
    this.boundids,
    this.filterfields,
    this.activeview,
    this.emptyobject,
    this.forexcel,
    this.excelfields,
    this.totalfields,
    this.activeviewfields,
  });

  factory FwStandardModelsBrowseRequest.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsBrowseRequestFromJson(json);

  @JsonKey(name: 'miscfields', includeIfNull: false)
  final dynamic? miscfields;
  @JsonKey(name: 'module', includeIfNull: false)
  final String? module;
  @JsonKey(name: 'options', includeIfNull: false)
  final dynamic? options;
  @JsonKey(name: 'orderby', includeIfNull: false)
  final String? orderby;
  @JsonKey(name: 'orderbydirection', includeIfNull: false)
  final String? orderbydirection;
  @JsonKey(name: 'top', includeIfNull: false)
  final int? top;
  @JsonKey(name: 'pageno', includeIfNull: false)
  final int? pageno;
  @JsonKey(name: 'pagesize', includeIfNull: false)
  final int? pagesize;
  @JsonKey(
      name: 'searchfieldoperators',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? searchfieldoperators;
  @JsonKey(name: 'searchfields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfields;
  @JsonKey(
      name: 'searchfieldvalues', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfieldvalues;
  @JsonKey(
      name: 'searchfieldtypes', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfieldtypes;
  @JsonKey(
      name: 'searchseparators', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchseparators;
  @JsonKey(
      name: 'searchcondition', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchcondition;
  @JsonKey(
      name: 'searchconjunctions',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? searchconjunctions;
  @JsonKey(name: 'uniqueids', includeIfNull: false)
  final dynamic? uniqueids;
  @JsonKey(name: 'boundids', includeIfNull: false)
  final dynamic? boundids;
  @JsonKey(name: 'filterfields', includeIfNull: false)
  final Object? filterfields;
  @JsonKey(name: 'activeview', includeIfNull: false)
  final String? activeview;
  @JsonKey(name: 'emptyobject', includeIfNull: false)
  final bool? emptyobject;
  @JsonKey(name: 'forexcel', includeIfNull: false)
  final bool? forexcel;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'totalfields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? totalfields;
  @JsonKey(name: 'activeviewfields', includeIfNull: false)
  final Object? activeviewfields;
  static const fromJsonFactory = _$FwStandardModelsBrowseRequestFromJson;
  static const toJsonFactory = _$FwStandardModelsBrowseRequestToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsBrowseRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsBrowseRequest &&
            (identical(other.miscfields, miscfields) ||
                const DeepCollectionEquality()
                    .equals(other.miscfields, miscfields)) &&
            (identical(other.module, module) ||
                const DeepCollectionEquality().equals(other.module, module)) &&
            (identical(other.options, options) ||
                const DeepCollectionEquality()
                    .equals(other.options, options)) &&
            (identical(other.orderby, orderby) ||
                const DeepCollectionEquality()
                    .equals(other.orderby, orderby)) &&
            (identical(other.orderbydirection, orderbydirection) ||
                const DeepCollectionEquality()
                    .equals(other.orderbydirection, orderbydirection)) &&
            (identical(other.top, top) ||
                const DeepCollectionEquality().equals(other.top, top)) &&
            (identical(other.pageno, pageno) ||
                const DeepCollectionEquality().equals(other.pageno, pageno)) &&
            (identical(other.pagesize, pagesize) ||
                const DeepCollectionEquality()
                    .equals(other.pagesize, pagesize)) &&
            (identical(other.searchfieldoperators, searchfieldoperators) ||
                const DeepCollectionEquality().equals(
                    other.searchfieldoperators, searchfieldoperators)) &&
            (identical(other.searchfields, searchfields) ||
                const DeepCollectionEquality()
                    .equals(other.searchfields, searchfields)) &&
            (identical(other.searchfieldvalues, searchfieldvalues) ||
                const DeepCollectionEquality()
                    .equals(other.searchfieldvalues, searchfieldvalues)) &&
            (identical(other.searchfieldtypes, searchfieldtypes) ||
                const DeepCollectionEquality()
                    .equals(other.searchfieldtypes, searchfieldtypes)) &&
            (identical(other.searchseparators, searchseparators) ||
                const DeepCollectionEquality()
                    .equals(other.searchseparators, searchseparators)) &&
            (identical(other.searchcondition, searchcondition) ||
                const DeepCollectionEquality()
                    .equals(other.searchcondition, searchcondition)) &&
            (identical(other.searchconjunctions, searchconjunctions) ||
                const DeepCollectionEquality()
                    .equals(other.searchconjunctions, searchconjunctions)) &&
            (identical(other.uniqueids, uniqueids) ||
                const DeepCollectionEquality()
                    .equals(other.uniqueids, uniqueids)) &&
            (identical(other.boundids, boundids) ||
                const DeepCollectionEquality()
                    .equals(other.boundids, boundids)) &&
            (identical(other.filterfields, filterfields) ||
                const DeepCollectionEquality()
                    .equals(other.filterfields, filterfields)) &&
            (identical(other.activeview, activeview) ||
                const DeepCollectionEquality()
                    .equals(other.activeview, activeview)) &&
            (identical(other.emptyobject, emptyobject) ||
                const DeepCollectionEquality()
                    .equals(other.emptyobject, emptyobject)) &&
            (identical(other.forexcel, forexcel) ||
                const DeepCollectionEquality()
                    .equals(other.forexcel, forexcel)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.totalfields, totalfields) ||
                const DeepCollectionEquality()
                    .equals(other.totalfields, totalfields)) &&
            (identical(other.activeviewfields, activeviewfields) || const DeepCollectionEquality().equals(other.activeviewfields, activeviewfields)));
  }
}

extension $FwStandardModelsBrowseRequestExtension
    on FwStandardModelsBrowseRequest {
  FwStandardModelsBrowseRequest copyWith(
      {dynamic? miscfields,
      String? module,
      dynamic? options,
      String? orderby,
      String? orderbydirection,
      int? top,
      int? pageno,
      int? pagesize,
      List<String>? searchfieldoperators,
      List<String>? searchfields,
      List<String>? searchfieldvalues,
      List<String>? searchfieldtypes,
      List<String>? searchseparators,
      List<String>? searchcondition,
      List<String>? searchconjunctions,
      dynamic? uniqueids,
      dynamic? boundids,
      Object? filterfields,
      String? activeview,
      bool? emptyobject,
      bool? forexcel,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      List<String>? totalfields,
      Object? activeviewfields}) {
    return FwStandardModelsBrowseRequest(
        miscfields: miscfields ?? this.miscfields,
        module: module ?? this.module,
        options: options ?? this.options,
        orderby: orderby ?? this.orderby,
        orderbydirection: orderbydirection ?? this.orderbydirection,
        top: top ?? this.top,
        pageno: pageno ?? this.pageno,
        pagesize: pagesize ?? this.pagesize,
        searchfieldoperators: searchfieldoperators ?? this.searchfieldoperators,
        searchfields: searchfields ?? this.searchfields,
        searchfieldvalues: searchfieldvalues ?? this.searchfieldvalues,
        searchfieldtypes: searchfieldtypes ?? this.searchfieldtypes,
        searchseparators: searchseparators ?? this.searchseparators,
        searchcondition: searchcondition ?? this.searchcondition,
        searchconjunctions: searchconjunctions ?? this.searchconjunctions,
        uniqueids: uniqueids ?? this.uniqueids,
        boundids: boundids ?? this.boundids,
        filterfields: filterfields ?? this.filterfields,
        activeview: activeview ?? this.activeview,
        emptyobject: emptyobject ?? this.emptyobject,
        forexcel: forexcel ?? this.forexcel,
        excelfields: excelfields ?? this.excelfields,
        totalfields: totalfields ?? this.totalfields,
        activeviewfields: activeviewfields ?? this.activeviewfields);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsCheckBoxListItem {
  FwStandardModelsCheckBoxListItem({
    this.value,
    this.text,
    this.selected,
  });

  factory FwStandardModelsCheckBoxListItem.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsCheckBoxListItemFromJson(json);

  @JsonKey(name: 'value', includeIfNull: false)
  final String? value;
  @JsonKey(name: 'text', includeIfNull: false)
  final String? text;
  @JsonKey(name: 'selected', includeIfNull: false)
  final bool? selected;
  static const fromJsonFactory = _$FwStandardModelsCheckBoxListItemFromJson;
  static const toJsonFactory = _$FwStandardModelsCheckBoxListItemToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsCheckBoxListItemToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsCheckBoxListItem &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)) &&
            (identical(other.text, text) ||
                const DeepCollectionEquality().equals(other.text, text)) &&
            (identical(other.selected, selected) ||
                const DeepCollectionEquality()
                    .equals(other.selected, selected)));
  }
}

extension $FwStandardModelsCheckBoxListItemExtension
    on FwStandardModelsCheckBoxListItem {
  FwStandardModelsCheckBoxListItem copyWith(
      {String? value, String? text, bool? selected}) {
    return FwStandardModelsCheckBoxListItem(
        value: value ?? this.value,
        text: text ?? this.text,
        selected: selected ?? this.selected);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwApiException {
  FwStandardModelsFwApiException({
    this.statusCode,
    this.message,
    this.stackTrace,
  });

  factory FwStandardModelsFwApiException.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsFwApiExceptionFromJson(json);

  @JsonKey(name: 'StatusCode', includeIfNull: false)
  final int? statusCode;
  @JsonKey(name: 'Message', includeIfNull: false)
  final String? message;
  @JsonKey(name: 'StackTrace', includeIfNull: false)
  final String? stackTrace;
  static const fromJsonFactory = _$FwStandardModelsFwApiExceptionFromJson;
  static const toJsonFactory = _$FwStandardModelsFwApiExceptionToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsFwApiExceptionToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwApiException &&
            (identical(other.statusCode, statusCode) ||
                const DeepCollectionEquality()
                    .equals(other.statusCode, statusCode)) &&
            (identical(other.message, message) ||
                const DeepCollectionEquality()
                    .equals(other.message, message)) &&
            (identical(other.stackTrace, stackTrace) ||
                const DeepCollectionEquality()
                    .equals(other.stackTrace, stackTrace)));
  }
}

extension $FwStandardModelsFwApiExceptionExtension
    on FwStandardModelsFwApiException {
  FwStandardModelsFwApiException copyWith(
      {int? statusCode, String? message, String? stackTrace}) {
    return FwStandardModelsFwApiException(
        statusCode: statusCode ?? this.statusCode,
        message: message ?? this.message,
        stackTrace: stackTrace ?? this.stackTrace);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryFilter {
  FwStandardModelsFwQueryFilter({
    this.field,
    this.op,
    this.value,
  });

  factory FwStandardModelsFwQueryFilter.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryFilterFromJson(json);

  @JsonKey(name: 'Field', includeIfNull: false)
  final String? field;
  @JsonKey(name: 'Op', includeIfNull: false)
  final String? op;
  @JsonKey(name: 'Value', includeIfNull: false)
  final String? value;
  static const fromJsonFactory = _$FwStandardModelsFwQueryFilterFromJson;
  static const toJsonFactory = _$FwStandardModelsFwQueryFilterToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsFwQueryFilterToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryFilter &&
            (identical(other.field, field) ||
                const DeepCollectionEquality().equals(other.field, field)) &&
            (identical(other.op, op) ||
                const DeepCollectionEquality().equals(other.op, op)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }
}

extension $FwStandardModelsFwQueryFilterExtension
    on FwStandardModelsFwQueryFilter {
  FwStandardModelsFwQueryFilter copyWith(
      {String? field, String? op, String? value}) {
    return FwStandardModelsFwQueryFilter(
        field: field ?? this.field,
        op: op ?? this.op,
        value: value ?? this.value);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogic {
  FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesInventoryStorageContainerStorageContainer>[])
  final List<WebApiModulesInventoryStorageContainerStorageContainer>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogic {
  FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogic
      copyWith(
          {List<WebApiModulesInventoryStorageContainerStorageContainer>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesInventoryStorageContainerStorageContainerLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings>[])
  final List<
          WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogic
      copyWith(
          {List<WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsAccountingSettingsGlAccountGlAccount>[])
  final List<WebApiModulesSettingsAccountingSettingsGlAccountGlAccount>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogic
      copyWith(
          {List<WebApiModulesSettingsAccountingSettingsGlAccountGlAccount>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlAccountGlAccountLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule>[])
  final List<
          WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogic
      copyWith(
          {List<WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsActivityStatusActivityStatus>[])
  final List<WebApiModulesSettingsActivityStatusActivityStatus>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogic
      copyWith(
          {List<WebApiModulesSettingsActivityStatusActivityStatus>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityStatusActivityStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsActivityTypeActivityType>[])
  final List<WebApiModulesSettingsActivityTypeActivityType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogic
      copyWith(
          {List<WebApiModulesSettingsActivityTypeActivityType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsActivityTypeActivityTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsAddressSettingsCountryCountry>[])
  final List<WebApiModulesSettingsAddressSettingsCountryCountry>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic
      copyWith(
          {List<WebApiModulesSettingsAddressSettingsCountryCountry>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsAddressSettingsStateState>[])
  final List<WebApiModulesSettingsAddressSettingsStateState>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogic
      copyWith(
          {List<WebApiModulesSettingsAddressSettingsStateState>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsStateStateLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsAppReportDesignerAppReportDesigner>[])
  final List<WebApiModulesSettingsAppReportDesignerAppReportDesigner>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogic
      copyWith(
          {List<WebApiModulesSettingsAppReportDesignerAppReportDesigner>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsAppReportDesignerAppReportDesignerLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsAttributeValueAttributeValue>[])
  final List<WebApiModulesSettingsAttributeValueAttributeValue>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogic
      copyWith(
          {List<WebApiModulesSettingsAttributeValueAttributeValue>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsAttributeValueAttributeValueLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog>[])
  final List<
          WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogic
      copyWith(
          {List<WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsBillingCycleEventBillingCycleEvent>[])
  final List<WebApiModulesSettingsBillingCycleEventBillingCycleEvent>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogic
      copyWith(
          {List<WebApiModulesSettingsBillingCycleEventBillingCycleEvent>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsBillingCycleEventBillingCycleEventLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus>[])
  final List<WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogic
      copyWith(
          {List<WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsCalendarSettingsHolidayHoliday>[])
  final List<WebApiModulesSettingsCalendarSettingsHolidayHoliday>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogic
      copyWith(
          {List<WebApiModulesSettingsCalendarSettingsHolidayHoliday>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCalendarSettingsHolidayHolidayLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsContactSettingsContactEventContactEvent>[])
  final List<WebApiModulesSettingsContactSettingsContactEventContactEvent>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogic
      copyWith(
          {List<WebApiModulesSettingsContactSettingsContactEventContactEvent>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactEventContactEventLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsContactSettingsContactTitleContactTitle>[])
  final List<WebApiModulesSettingsContactSettingsContactTitleContactTitle>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogic
      copyWith(
          {List<WebApiModulesSettingsContactSettingsContactTitleContactTitle>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsContactTitleContactTitleLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsContactSettingsMailListMailList>[])
  final List<WebApiModulesSettingsContactSettingsMailListMailList>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogic
      copyWith(
          {List<WebApiModulesSettingsContactSettingsMailListMailList>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsContactSettingsMailListMailListLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType>[])
  final List<
          WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogic
      copyWith(
          {List<WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad>[])
  final List<
          WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogic
      copyWith(
          {List<WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsCrewLocationCrewLocation>[])
  final List<WebApiModulesSettingsCrewLocationCrewLocation>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogic
      copyWith(
          {List<WebApiModulesSettingsCrewLocationCrewLocation>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewLocationCrewLocationLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsCrewPositionCrewPosition>[])
  final List<WebApiModulesSettingsCrewPositionCrewPosition>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogic
      copyWith(
          {List<WebApiModulesSettingsCrewPositionCrewPosition>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCrewPositionCrewPositionLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate>[])
  final List<WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogic
      copyWith(
          {List<WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsCurrencySettingsCurrencyCurrency>[])
  final List<WebApiModulesSettingsCurrencySettingsCurrencyCurrency>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic
      copyWith(
          {List<WebApiModulesSettingsCurrencySettingsCurrencyCurrency>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus>[])
  final List<WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogic
      copyWith(
          {List<WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory>[])
  final List<
          WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogic
      copyWith(
          {List<WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus>[])
  final List<WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogic
      copyWith(
          {List<WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType>[])
  final List<WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogic
      copyWith(
          {List<WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsDealSettingsDealClassificationDealClassification>[])
  final List<
          WebApiModulesSettingsDealSettingsDealClassificationDealClassification>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogic
      copyWith(
          {List<WebApiModulesSettingsDealSettingsDealClassificationDealClassification>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealClassificationDealClassificationLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsDealSettingsDealStatusDealStatus>[])
  final List<WebApiModulesSettingsDealSettingsDealStatusDealStatus>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogic
      copyWith(
          {List<WebApiModulesSettingsDealSettingsDealStatusDealStatus>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealStatusDealStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsDealSettingsDealTypeDealType>[])
  final List<WebApiModulesSettingsDealSettingsDealTypeDealType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogic
      copyWith(
          {List<WebApiModulesSettingsDealSettingsDealTypeDealType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsDealTypeDealTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsDealSettingsProductionTypeProductionType>[])
  final List<WebApiModulesSettingsDealSettingsProductionTypeProductionType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogic
      copyWith(
          {List<WebApiModulesSettingsDealSettingsProductionTypeProductionType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsProductionTypeProductionTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsDealSettingsScheduleTypeScheduleType>[])
  final List<WebApiModulesSettingsDealSettingsScheduleTypeScheduleType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogic
      copyWith(
          {List<WebApiModulesSettingsDealSettingsScheduleTypeScheduleType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType>[])
  final List<
          WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogic
      copyWith(
          {List<WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsDepartmentLocationDepartmentLocation>[])
  final List<WebApiModulesSettingsDepartmentLocationDepartmentLocation>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogic
      copyWith(
          {List<WebApiModulesSettingsDepartmentLocationDepartmentLocation>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentLocationDepartmentLocationLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsDepartmentSettingsDepartmentDepartment>[])
  final List<WebApiModulesSettingsDepartmentSettingsDepartmentDepartment>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogic
      copyWith(
          {List<WebApiModulesSettingsDepartmentSettingsDepartmentDepartment>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDepartmentSettingsDepartmentDepartmentLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsDiscountItemDiscountItem>[])
  final List<WebApiModulesSettingsDiscountItemDiscountItem>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogic
      copyWith(
          {List<WebApiModulesSettingsDiscountItemDiscountItem>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountItemDiscountItemLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate>[])
  final List<
          WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogic
      copyWith(
          {List<WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings>[])
  final List<
          WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogic
      copyWith(
          {List<WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter>[])
  final List<WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogic
      copyWith(
          {List<WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType>[])
  final List<WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogic
      copyWith(
          {List<WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions>[])
  final List<
          WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogic
      copyWith(
          {List<WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsEventSettingsEventCategoryEventCategory>[])
  final List<WebApiModulesSettingsEventSettingsEventCategoryEventCategory>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogic
      copyWith(
          {List<WebApiModulesSettingsEventSettingsEventCategoryEventCategory>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventCategoryEventCategoryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsEventSettingsEventTypeEventType>[])
  final List<WebApiModulesSettingsEventSettingsEventTypeEventType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogic
      copyWith(
          {List<WebApiModulesSettingsEventSettingsEventTypeEventType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypeEventTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType>[])
  final List<
          WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogic
      copyWith(
          {List<WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType>[])
  final List<WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogic
      copyWith(
          {List<WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat>[])
  final List<
          WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogic
      copyWith(
          {List<WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsFacilitySettingsBuildingBuilding>[])
  final List<WebApiModulesSettingsFacilitySettingsBuildingBuilding>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogic
      copyWith(
          {List<WebApiModulesSettingsFacilitySettingsBuildingBuilding>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsBuildingBuildingLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory>[])
  final List<
          WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogic
      copyWith(
          {List<WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate>[])
  final List<WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogic
      copyWith(
          {List<WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus>[])
  final List<
          WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogic
      copyWith(
          {List<WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus>[])
  final List<WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogic
      copyWith(
          {List<WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType>[])
  final List<WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogic
      copyWith(
          {List<WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType>[])
  final List<WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogic
      copyWith(
          {List<WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsFacilitySettingsVenueVenue>[])
  final List<WebApiModulesSettingsFacilitySettingsVenueVenue>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogic
      copyWith(
          {List<WebApiModulesSettingsFacilitySettingsVenueVenue>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsFacilitySettingsVenueVenueLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsFiscalMonthFiscalMonth>[])
  final List<WebApiModulesSettingsFiscalMonthFiscalMonth>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogic
      copyWith(
          {List<WebApiModulesSettingsFiscalMonthFiscalMonth>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalMonthFiscalMonthLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsFiscalYearFiscalYear>[])
  final List<WebApiModulesSettingsFiscalYearFiscalYear>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogic
      copyWith(
          {List<WebApiModulesSettingsFiscalYearFiscalYear>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsFiscalYearFiscalYearLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsFloorFloor>[])
  final List<WebApiModulesSettingsFloorFloor>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogic copyWith(
      {List<WebApiModulesSettingsFloorFloor>? items,
      int? pageNo,
      int? pageSize,
      int? totalItems,
      String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsFloorFloorLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType>[])
  final List<WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogic
      copyWith(
          {List<WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake>[])
  final List<WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogic
      copyWith(
          {List<WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel>[])
  final List<
          WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogic
      copyWith(
          {List<WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating>[])
  final List<
          WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogic
      copyWith(
          {List<WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType>[])
  final List<WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogic
      copyWith(
          {List<WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts>[])
  final List<
          WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogic
      copyWith(
          {List<WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse>[])
  final List<WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogic
      copyWith(
          {List<WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory>[])
  final List<
          WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogic
      copyWith(
          {List<WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsAttributeAttribute>[])
  final List<WebApiModulesSettingsInventorySettingsAttributeAttribute>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsAttributeAttribute>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsAttributeAttributeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange>[])
  final List<WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason>[])
  final List<
          WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition>[])
  final List<
          WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup>[])
  final List<
          WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank>[])
  final List<WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryRankInventoryRankLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus>[])
  final List<
          WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType>[])
  final List<WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory>[])
  final List<WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory>[])
  final List<
          WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason>[])
  final List<WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory>[])
  final List<WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsInventorySettingsUnitUnit>[])
  final List<WebApiModulesSettingsInventorySettingsUnitUnit>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsUnitUnit>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnitUnitLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason>[])
  final List<
          WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog>[])
  final List<
          WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogic
      copyWith(
          {List<WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsLaborSettingsCrewCrew>[])
  final List<WebApiModulesSettingsLaborSettingsCrewCrew>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogic
      copyWith(
          {List<WebApiModulesSettingsLaborSettingsCrewCrew>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewCrewLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus>[])
  final List<
          WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogic
      copyWith(
          {List<WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus>[])
  final List<WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogic
      copyWith(
          {List<WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsCrewStatusCrewStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory>[])
  final List<WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogic
      copyWith(
          {List<WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsLaborSettingsLaborRateLaborRate>[])
  final List<WebApiModulesSettingsLaborSettingsLaborRateLaborRate>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogic
      copyWith(
          {List<WebApiModulesSettingsLaborSettingsLaborRateLaborRate>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborRateLaborRateLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsLaborSettingsLaborTypeLaborType>[])
  final List<WebApiModulesSettingsLaborSettingsLaborTypeLaborType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogic
      copyWith(
          {List<WebApiModulesSettingsLaborSettingsLaborTypeLaborType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsLaborTypeLaborTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsLaborSettingsPositionPosition>[])
  final List<WebApiModulesSettingsLaborSettingsPositionPosition>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogic
      copyWith(
          {List<WebApiModulesSettingsLaborSettingsPositionPosition>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsLaborSettingsPositionPositionLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsMarketSegmentJobMarketSegmentJob>[])
  final List<WebApiModulesSettingsMarketSegmentJobMarketSegmentJob>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogic
      copyWith(
          {List<WebApiModulesSettingsMarketSegmentJobMarketSegmentJob>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsMarketSegmentJobMarketSegmentJobLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory>[])
  final List<
          WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogic
      copyWith(
          {List<WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate>[])
  final List<WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogic
      copyWith(
          {List<WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType>[])
  final List<WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogic
      copyWith(
          {List<WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsNumberFormatNumberFormat>[])
  final List<WebApiModulesSettingsNumberFormatNumberFormat>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogic
      copyWith(
          {List<WebApiModulesSettingsNumberFormatNumberFormat>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsNumberFormatNumberFormatLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation>[])
  final List<
          WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogic
      copyWith(
          {List<WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsOrderItemRecTypeOrderItemRecType>[])
  final List<WebApiModulesSettingsOrderItemRecTypeOrderItemRecType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogic
      copyWith(
          {List<WebApiModulesSettingsOrderItemRecTypeOrderItemRecType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason>[])
  final List<WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogic
      copyWith(
          {List<WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment>[])
  final List<WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogic
      copyWith(
          {List<WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsOrderSettingsMarketTypeMarketType>[])
  final List<WebApiModulesSettingsOrderSettingsMarketTypeMarketType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogic
      copyWith(
          {List<WebApiModulesSettingsOrderSettingsMarketTypeMarketType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsMarketTypeMarketTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation>[])
  final List<WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogic
      copyWith(
          {List<WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderLocationOrderLocationLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo>[])
  final List<WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogic
      copyWith(
          {List<WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsOrderSettingsOrderTypeOrderType>[])
  final List<WebApiModulesSettingsOrderSettingsOrderTypeOrderType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogic
      copyWith(
          {List<WebApiModulesSettingsOrderSettingsOrderTypeOrderType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderSettingsOrderTypeOrderTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle>[])
  final List<WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogic
      copyWith(
          {List<WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType>[])
  final List<WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogic
      copyWith(
          {List<WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsOrderTypeLocationOrderTypeLocation>[])
  final List<WebApiModulesSettingsOrderTypeLocationOrderTypeLocation>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogic
      copyWith(
          {List<WebApiModulesSettingsOrderTypeLocationOrderTypeLocation>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeLocationOrderTypeLocationLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsOrderTypeNoteOrderTypeNote>[])
  final List<WebApiModulesSettingsOrderTypeNoteOrderTypeNote>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogic
      copyWith(
          {List<WebApiModulesSettingsOrderTypeNoteOrderTypeNote>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsOrderTypeNoteOrderTypeNoteLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms>[])
  final List<WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogic
      copyWith(
          {List<WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType>[])
  final List<WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogic
      copyWith(
          {List<WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsPersonnelTypePersonnelType>[])
  final List<WebApiModulesSettingsPersonnelTypePersonnelType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogic
      copyWith(
          {List<WebApiModulesSettingsPersonnelTypePersonnelType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPersonnelTypePersonnelTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus>[])
  final List<WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogic
      copyWith(
          {List<WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsPoSettingsPoApproverPoApprover>[])
  final List<WebApiModulesSettingsPoSettingsPoApproverPoApprover>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogic
      copyWith(
          {List<WebApiModulesSettingsPoSettingsPoApproverPoApprover>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverPoApproverLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole>[])
  final List<WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogic
      copyWith(
          {List<WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPoSettingsPoClassificationPoClassification>[])
  final List<WebApiModulesSettingsPoSettingsPoClassificationPoClassification>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogic
      copyWith(
          {List<WebApiModulesSettingsPoSettingsPoClassificationPoClassification>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoClassificationPoClassificationLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsPoSettingsPoImportancePoImportance>[])
  final List<WebApiModulesSettingsPoSettingsPoImportancePoImportance>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogic
      copyWith(
          {List<WebApiModulesSettingsPoSettingsPoImportancePoImportance>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoImportancePoImportanceLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason>[])
  final List<WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogic
      copyWith(
          {List<WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsPoSettingsPoTypePoType>[])
  final List<WebApiModulesSettingsPoSettingsPoTypePoType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogic
      copyWith(
          {List<WebApiModulesSettingsPoSettingsPoTypePoType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsPoTypePoTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover>[])
  final List<
          WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogic
      copyWith(
          {List<WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity>[])
  final List<
          WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogic
      copyWith(
          {List<WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride>[])
  final List<
          WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogic
      copyWith(
          {List<WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPresentationLayerFormPresentationLayerForm>[])
  final List<WebApiModulesSettingsPresentationLayerFormPresentationLayerForm>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogic
      copyWith(
          {List<WebApiModulesSettingsPresentationLayerFormPresentationLayerForm>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationLayerFormPresentationLayerFormLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPresentationSettingsFormDesignFormDesign>[])
  final List<WebApiModulesSettingsPresentationSettingsFormDesignFormDesign>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogic
      copyWith(
          {List<WebApiModulesSettingsPresentationSettingsFormDesignFormDesign>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsFormDesignFormDesignLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer>[])
  final List<
          WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogic
      copyWith(
          {List<WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild>[])
  final List<WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogic
      copyWith(
          {List<WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning>[])
  final List<
          WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogic
      copyWith(
          {List<WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit>[])
  final List<WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogic
      copyWith(
          {List<WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDepositProjectDepositLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings>[])
  final List<
          WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogic
      copyWith(
          {List<WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems>[])
  final List<
          WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogic
      copyWith(
          {List<WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered>[])
  final List<
          WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogic
      copyWith(
          {List<WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition>[])
  final List<WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogic
      copyWith(
          {List<WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsPropsSettingsPropsConditionPropsConditionLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate>[])
  final List<WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogic
      copyWith(
          {List<WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsRankRank>[])
  final List<WebApiModulesSettingsRankRank>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogic copyWith(
      {List<WebApiModulesSettingsRankRank>? items,
      int? pageNo,
      int? pageSize,
      int? totalItems,
      String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsRankRankLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsRateLocationTaxRateLocationTax>[])
  final List<WebApiModulesSettingsRateLocationTaxRateLocationTax>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogic
      copyWith(
          {List<WebApiModulesSettingsRateLocationTaxRateLocationTax>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsRateLocationTaxRateLocationTaxLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsRateTypeRateType>[])
  final List<WebApiModulesSettingsRateTypeRateType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogic
      copyWith(
          {List<WebApiModulesSettingsRateTypeRateType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsRateTypeRateTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsRateWarehouseRateWarehouse>[])
  final List<WebApiModulesSettingsRateWarehouseRateWarehouse>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogic
      copyWith(
          {List<WebApiModulesSettingsRateWarehouseRateWarehouse>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsRateWarehouseRateWarehouseLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsRegionSettingsRegionRegion>[])
  final List<WebApiModulesSettingsRegionSettingsRegionRegion>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogic
      copyWith(
          {List<WebApiModulesSettingsRegionSettingsRegionRegion>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsRegionSettingsRegionRegionLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus>[])
  final List<
          WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogic
      copyWith(
          {List<WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsSetSettingsSetConditionSetCondition>[])
  final List<WebApiModulesSettingsSetSettingsSetConditionSetCondition>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogic
      copyWith(
          {List<WebApiModulesSettingsSetSettingsSetConditionSetCondition>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetConditionSetConditionLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsSetSettingsSetOpeningSetOpening>[])
  final List<WebApiModulesSettingsSetSettingsSetOpeningSetOpening>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogic
      copyWith(
          {List<WebApiModulesSettingsSetSettingsSetOpeningSetOpening>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetOpeningSetOpeningLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsSetSettingsSetSurfaceSetSurface>[])
  final List<WebApiModulesSettingsSetSettingsSetSurfaceSetSurface>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogic
      copyWith(
          {List<WebApiModulesSettingsSetSettingsSetSurfaceSetSurface>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsSetSettingsWallDescriptionWallDescription>[])
  final List<WebApiModulesSettingsSetSettingsWallDescriptionWallDescription>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogic
      copyWith(
          {List<WebApiModulesSettingsSetSettingsWallDescriptionWallDescription>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsSetSettingsWallTypeWallType>[])
  final List<WebApiModulesSettingsSetSettingsWallTypeWallType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogic
      copyWith(
          {List<WebApiModulesSettingsSetSettingsWallTypeWallType>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSetSettingsWallTypeWallTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsShipViaSettingsShipViaShipVia>[])
  final List<WebApiModulesSettingsShipViaSettingsShipViaShipVia>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogic
      copyWith(
          {List<WebApiModulesSettingsShipViaSettingsShipViaShipVia>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsShipViaSettingsShipViaShipViaLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsSourceSettingsSourceSource>[])
  final List<WebApiModulesSettingsSourceSettingsSourceSource>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogic
      copyWith(
          {List<WebApiModulesSettingsSourceSettingsSourceSource>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSourceSettingsSourceSourceLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsSpaceSpace>[])
  final List<WebApiModulesSettingsSpaceSpace>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogic copyWith(
      {List<WebApiModulesSettingsSpaceSpace>? items,
      int? pageNo,
      int? pageSize,
      int? totalItems,
      String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceSpaceLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsSpaceRateSpaceRate>[])
  final List<WebApiModulesSettingsSpaceRateSpaceRate>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogic
      copyWith(
          {List<WebApiModulesSettingsSpaceRateSpaceRate>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSpaceRateSpaceRateLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsSubCategorySubCategory>[])
  final List<WebApiModulesSettingsSubCategorySubCategory>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogic
      copyWith(
          {List<WebApiModulesSettingsSubCategorySubCategory>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSubCategorySubCategoryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsSystemNumberSystemNumber>[])
  final List<WebApiModulesSettingsSystemNumberSystemNumber>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogic
      copyWith(
          {List<WebApiModulesSettingsSystemNumberSystemNumber>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemNumberSystemNumberLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings>[])
  final List<
          WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogic
      copyWith(
          {List<WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings>[])
  final List<WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogic
      copyWith(
          {List<WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings>[])
  final List<WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogic
      copyWith(
          {List<WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings>[])
  final List<
          WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogic
      copyWith(
          {List<WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings>[])
  final List<WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogic
      copyWith(
          {List<WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings>[])
  final List<WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogic
      copyWith(
          {List<WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsTaxSettingsTaxOptionTaxOption>[])
  final List<WebApiModulesSettingsTaxSettingsTaxOptionTaxOption>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogic
      copyWith(
          {List<WebApiModulesSettingsTaxSettingsTaxOptionTaxOption>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsTaxSettingsTaxOptionTaxOptionLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsTemplateSettingsTemplateTemplate>[])
  final List<WebApiModulesSettingsTemplateSettingsTemplateTemplate>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogic
      copyWith(
          {List<WebApiModulesSettingsTemplateSettingsTemplateTemplate>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsTemplateSettingsTemplateTemplateLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsUserSettingsSoundSound>[])
  final List<WebApiModulesSettingsUserSettingsSoundSound>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogic
      copyWith(
          {List<WebApiModulesSettingsUserSettingsSoundSound>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsSoundSoundLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsUserSettingsUserStatusUserStatus>[])
  final List<WebApiModulesSettingsUserSettingsUserStatusUserStatus>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogic
      copyWith(
          {List<WebApiModulesSettingsUserSettingsUserStatusUserStatus>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsUserSettingsUserStatusUserStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsVehicleModelVehicleModel>[])
  final List<WebApiModulesSettingsVehicleModelVehicleModel>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogic
      copyWith(
          {List<WebApiModulesSettingsVehicleModelVehicleModel>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleModelVehicleModelLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass>[])
  final List<WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogic
      copyWith(
          {List<WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor>[])
  final List<WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogic
      copyWith(
          {List<WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType>[])
  final List<
          WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogic
      copyWith(
          {List<WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake>[])
  final List<WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogic
      copyWith(
          {List<WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus>[])
  final List<
          WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogic
      copyWith(
          {List<WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus>[])
  final List<WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogic
      copyWith(
          {List<WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType>[])
  final List<WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogic
      copyWith(
          {List<WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse>[])
  final List<WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogic
      copyWith(
          {List<WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType>[])
  final List<
          WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogic
      copyWith(
          {List<WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus>[])
  final List<
          WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogic
      copyWith(
          {List<WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog>[])
  final List<WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogic
      copyWith(
          {List<WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsVendorSettingsVendorClassVendorClass>[])
  final List<WebApiModulesSettingsVendorSettingsVendorClassVendorClass>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogic
      copyWith(
          {List<WebApiModulesSettingsVendorSettingsVendorClassVendorClass>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsVendorSettingsVendorClassVendorClassLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare>[])
  final List<WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogic
      copyWith(
          {List<WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor>[])
  final List<WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogic
      copyWith(
          {List<WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition>[])
  final List<
          WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogic
      copyWith(
          {List<WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender>[])
  final List<WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogic
      copyWith(
          {List<WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel>[])
  final List<WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogic
      copyWith(
          {List<WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial>[])
  final List<
          WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogic
      copyWith(
          {List<WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern>[])
  final List<
          WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogic
      copyWith(
          {List<WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod>[])
  final List<WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogic
      copyWith(
          {List<WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource>[])
  final List<WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogic
      copyWith(
          {List<WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour>[])
  final List<
          WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogic
      copyWith(
          {List<WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip>[])
  final List<WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogic
      copyWith(
          {List<WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment>[])
  final List<WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogic
      copyWith(
          {List<WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType>[])
  final List<WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogic
      copyWith(
          {List<WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsWarehouseLocationWarehouseLocation>[])
  final List<WebApiModulesSettingsWarehouseLocationWarehouseLocation>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogic
      copyWith(
          {List<WebApiModulesSettingsWarehouseLocationWarehouseLocation>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseLocationWarehouseLocationLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover>[])
  final List<
          WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogic
      copyWith(
          {List<WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation>[])
  final List<
          WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogic
      copyWith(
          {List<WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse>[])
  final List<WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic
      copyWith(
          {List<WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog>[])
  final List<WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogic
      copyWith(
          {List<WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsWebUserWidgetUserWidget>[])
  final List<WebApiModulesSettingsWebUserWidgetUserWidget>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogic
      copyWith(
          {List<WebApiModulesSettingsWebUserWidgetUserWidget>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWebUserWidgetUserWidgetLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsWidgetSettingsWidgetWidget>[])
  final List<WebApiModulesSettingsWidgetSettingsWidgetWidget>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogic
      copyWith(
          {List<WebApiModulesSettingsWidgetSettingsWidgetWidget>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWidgetSettingsWidgetWidgetLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek>[])
  final List<WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogic
      copyWith(
          {List<WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardSqlServerFwJsonDataTable {
  FwStandardSqlServerFwJsonDataTable({
    this.columnIndex,
    this.totals,
    this.columns,
    this.rows,
    this.pageNo,
    this.pageSize,
    this.totalPages,
    this.totalRows,
    this.dateFields,
    this.columnNameByIndex,
  });

  factory FwStandardSqlServerFwJsonDataTable.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardSqlServerFwJsonDataTableFromJson(json);

  @JsonKey(name: 'ColumnIndex', includeIfNull: false)
  final Object? columnIndex;
  @JsonKey(name: 'Totals', includeIfNull: false)
  final Object? totals;
  @JsonKey(
      name: 'Columns',
      includeIfNull: false,
      defaultValue: <FwStandardSqlServerFwJsonDataTableColumn>[])
  final List<FwStandardSqlServerFwJsonDataTableColumn>? columns;
  @JsonKey(name: 'Rows', includeIfNull: false, defaultValue: <List<Object>>[])
  final List<List<Object>>? rows;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalPages', includeIfNull: false)
  final int? totalPages;
  @JsonKey(name: 'TotalRows', includeIfNull: false)
  final int? totalRows;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(name: 'ColumnNameByIndex', includeIfNull: false)
  final Object? columnNameByIndex;
  static const fromJsonFactory = _$FwStandardSqlServerFwJsonDataTableFromJson;
  static const toJsonFactory = _$FwStandardSqlServerFwJsonDataTableToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardSqlServerFwJsonDataTableToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardSqlServerFwJsonDataTable &&
            (identical(other.columnIndex, columnIndex) ||
                const DeepCollectionEquality()
                    .equals(other.columnIndex, columnIndex)) &&
            (identical(other.totals, totals) ||
                const DeepCollectionEquality().equals(other.totals, totals)) &&
            (identical(other.columns, columns) ||
                const DeepCollectionEquality()
                    .equals(other.columns, columns)) &&
            (identical(other.rows, rows) ||
                const DeepCollectionEquality().equals(other.rows, rows)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalPages, totalPages) ||
                const DeepCollectionEquality()
                    .equals(other.totalPages, totalPages)) &&
            (identical(other.totalRows, totalRows) ||
                const DeepCollectionEquality()
                    .equals(other.totalRows, totalRows)) &&
            (identical(other.dateFields, dateFields) ||
                const DeepCollectionEquality()
                    .equals(other.dateFields, dateFields)) &&
            (identical(other.columnNameByIndex, columnNameByIndex) ||
                const DeepCollectionEquality()
                    .equals(other.columnNameByIndex, columnNameByIndex)));
  }
}

extension $FwStandardSqlServerFwJsonDataTableExtension
    on FwStandardSqlServerFwJsonDataTable {
  FwStandardSqlServerFwJsonDataTable copyWith(
      {Object? columnIndex,
      Object? totals,
      List<FwStandardSqlServerFwJsonDataTableColumn>? columns,
      List<List<Object>>? rows,
      int? pageNo,
      int? pageSize,
      int? totalPages,
      int? totalRows,
      List<String>? dateFields,
      Object? columnNameByIndex}) {
    return FwStandardSqlServerFwJsonDataTable(
        columnIndex: columnIndex ?? this.columnIndex,
        totals: totals ?? this.totals,
        columns: columns ?? this.columns,
        rows: rows ?? this.rows,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalPages: totalPages ?? this.totalPages,
        totalRows: totalRows ?? this.totalRows,
        dateFields: dateFields ?? this.dateFields,
        columnNameByIndex: columnNameByIndex ?? this.columnNameByIndex);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardSqlServerFwJsonDataTableColumn {
  FwStandardSqlServerFwJsonDataTableColumn({
    this.name,
    this.dataField,
    this.dataType,
    this.isUniqueId,
    this.isVisible,
  });

  factory FwStandardSqlServerFwJsonDataTableColumn.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardSqlServerFwJsonDataTableColumnFromJson(json);

  @JsonKey(name: 'Name', includeIfNull: false)
  final String? name;
  @JsonKey(name: 'DataField', includeIfNull: false)
  final String? dataField;
  @JsonKey(
      name: 'DataType',
      includeIfNull: false,
      toJson: fwStandardSqlServerFwDataTypesToJson,
      fromJson: fwStandardSqlServerFwDataTypesFromJson)
  final enums.FwStandardSqlServerFwDataTypes? dataType;
  @JsonKey(name: 'IsUniqueId', includeIfNull: false)
  final bool? isUniqueId;
  @JsonKey(name: 'IsVisible', includeIfNull: false)
  final bool? isVisible;
  static const fromJsonFactory =
      _$FwStandardSqlServerFwJsonDataTableColumnFromJson;
  static const toJsonFactory = _$FwStandardSqlServerFwJsonDataTableColumnToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardSqlServerFwJsonDataTableColumnToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardSqlServerFwJsonDataTableColumn &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.dataField, dataField) ||
                const DeepCollectionEquality()
                    .equals(other.dataField, dataField)) &&
            (identical(other.dataType, dataType) ||
                const DeepCollectionEquality()
                    .equals(other.dataType, dataType)) &&
            (identical(other.isUniqueId, isUniqueId) ||
                const DeepCollectionEquality()
                    .equals(other.isUniqueId, isUniqueId)) &&
            (identical(other.isVisible, isVisible) ||
                const DeepCollectionEquality()
                    .equals(other.isVisible, isVisible)));
  }
}

extension $FwStandardSqlServerFwJsonDataTableColumnExtension
    on FwStandardSqlServerFwJsonDataTableColumn {
  FwStandardSqlServerFwJsonDataTableColumn copyWith(
      {String? name,
      String? dataField,
      enums.FwStandardSqlServerFwDataTypes? dataType,
      bool? isUniqueId,
      bool? isVisible}) {
    return FwStandardSqlServerFwJsonDataTableColumn(
        name: name ?? this.name,
        dataField: dataField ?? this.dataField,
        dataType: dataType ?? this.dataType,
        isUniqueId: isUniqueId ?? this.isUniqueId,
        isVisible: isVisible ?? this.isVisible);
  }
}

@JsonSerializable(explicitToJson: true)
class MicrosoftAspNetCoreMvcActionResult {
  MicrosoftAspNetCoreMvcActionResult();

  factory MicrosoftAspNetCoreMvcActionResult.fromJson(
          Map<String, dynamic> json) =>
      _$MicrosoftAspNetCoreMvcActionResultFromJson(json);

  static const fromJsonFactory = _$MicrosoftAspNetCoreMvcActionResultFromJson;
  static const toJsonFactory = _$MicrosoftAspNetCoreMvcActionResultToJson;
  Map<String, dynamic> toJson() =>
      _$MicrosoftAspNetCoreMvcActionResultToJson(this);
}

@JsonSerializable(explicitToJson: true)
class MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogic({
    this.result,
    this.value,
  });

  factory MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogic.fromJson(
          Map<String, dynamic> json) =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogicFromJson(
          json);

  @JsonKey(name: 'Result', includeIfNull: false)
  final MicrosoftAspNetCoreMvcActionResult? result;
  @JsonKey(name: 'Value', includeIfNull: false)
  final WebApiModulesSettingsFiscalMonthFiscalMonth? value;
  static const fromJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogicFromJson;
  static const toJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogicToJson;
  Map<String, dynamic> toJson() =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogic &&
            (identical(other.result, result) ||
                const DeepCollectionEquality().equals(other.result, result)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }
}

extension $MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogicExtension
    on MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogic
      copyWith(
          {MicrosoftAspNetCoreMvcActionResult? result,
          WebApiModulesSettingsFiscalMonthFiscalMonth? value}) {
    return MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsFiscalMonthFiscalMonthLogic(
        result: result ?? this.result, value: value ?? this.value);
  }
}

@JsonSerializable(explicitToJson: true)
class MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic({
    this.result,
    this.value,
  });

  factory MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogicFromJson(
          json);

  @JsonKey(name: 'Result', includeIfNull: false)
  final MicrosoftAspNetCoreMvcActionResult? result;
  @JsonKey(name: 'Value', includeIfNull: false)
  final WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory? value;
  static const fromJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogicFromJson;
  static const toJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic &&
            (identical(other.result, result) ||
                const DeepCollectionEquality().equals(other.result, result)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }
}

extension $MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogicExtension
    on MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic
      copyWith(
          {MicrosoftAspNetCoreMvcActionResult? result,
          WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory?
              value}) {
    return MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryLogic(
        result: result ?? this.result, value: value ?? this.value);
  }
}

@JsonSerializable(explicitToJson: true)
class MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic({
    this.result,
    this.value,
  });

  factory MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogicFromJson(
          json);

  @JsonKey(name: 'Result', includeIfNull: false)
  final MicrosoftAspNetCoreMvcActionResult? result;
  @JsonKey(name: 'Value', includeIfNull: false)
  final WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory?
      value;
  static const fromJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogicFromJson;
  static const toJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic &&
            (identical(other.result, result) ||
                const DeepCollectionEquality().equals(other.result, result)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }
}

extension $MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogicExtension
    on MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic
      copyWith(
          {MicrosoftAspNetCoreMvcActionResult? result,
          WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory?
              value}) {
    return MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryLogic(
        result: result ?? this.result, value: value ?? this.value);
  }
}

@JsonSerializable(explicitToJson: true)
class MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic({
    this.result,
    this.value,
  });

  factory MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogicFromJson(
          json);

  @JsonKey(name: 'Result', includeIfNull: false)
  final MicrosoftAspNetCoreMvcActionResult? result;
  @JsonKey(name: 'Value', includeIfNull: false)
  final WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory? value;
  static const fromJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogicFromJson;
  static const toJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic &&
            (identical(other.result, result) ||
                const DeepCollectionEquality().equals(other.result, result)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }
}

extension $MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogicExtension
    on MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic
      copyWith(
          {MicrosoftAspNetCoreMvcActionResult? result,
          WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory?
              value}) {
    return MicrosoftAspNetCoreMvcActionResultWebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryLogic(
        result: result ?? this.result, value: value ?? this.value);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiLogicSortItemsResponse {
  WebApiLogicSortItemsResponse({
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiLogicSortItemsResponse.fromJson(Map<String, dynamic> json) =>
      _$WebApiLogicSortItemsResponseFromJson(json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory = _$WebApiLogicSortItemsResponseFromJson;
  static const toJsonFactory = _$WebApiLogicSortItemsResponseToJson;
  Map<String, dynamic> toJson() => _$WebApiLogicSortItemsResponseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiLogicSortItemsResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }
}

extension $WebApiLogicSortItemsResponseExtension
    on WebApiLogicSortItemsResponse {
  WebApiLogicSortItemsResponse copyWith(
      {int? status, bool? success, String? msg}) {
    return WebApiLogicSortItemsResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesInventoryStorageContainerStorageContainer {
  WebApiModulesInventoryStorageContainerStorageContainer({
    this.storageContainerId,
    this.storageContainer,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesInventoryStorageContainerStorageContainer.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesInventoryStorageContainerStorageContainerFromJson(json);

  @JsonKey(name: 'StorageContainerId', includeIfNull: false)
  final int? storageContainerId;
  @JsonKey(name: 'StorageContainer', includeIfNull: false)
  final String? storageContainer;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesInventoryStorageContainerStorageContainerFromJson;
  static const toJsonFactory =
      _$WebApiModulesInventoryStorageContainerStorageContainerToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesInventoryStorageContainerStorageContainerToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesInventoryStorageContainerStorageContainer &&
            (identical(other.storageContainerId, storageContainerId) ||
                const DeepCollectionEquality()
                    .equals(other.storageContainerId, storageContainerId)) &&
            (identical(other.storageContainer, storageContainer) ||
                const DeepCollectionEquality()
                    .equals(other.storageContainer, storageContainer)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesInventoryStorageContainerStorageContainerExtension
    on WebApiModulesInventoryStorageContainerStorageContainer {
  WebApiModulesInventoryStorageContainerStorageContainer copyWith(
      {int? storageContainerId,
      String? storageContainer,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesInventoryStorageContainerStorageContainer(
        storageContainerId: storageContainerId ?? this.storageContainerId,
        storageContainer: storageContainer ?? this.storageContainer,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesInventoryStorageContainerStorageContainerItem {
  WebApiModulesInventoryStorageContainerStorageContainerItem({
    this.storageContainerItemId,
    this.storageContainerId,
    this.storageContainerBarcode,
    this.aisleShelf,
    this.orderNumber,
    this.orderDescription,
    this.deal,
    this.pickupLocation,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesInventoryStorageContainerStorageContainerItem.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesInventoryStorageContainerStorageContainerItemFromJson(
          json);

  @JsonKey(name: 'StorageContainerItemId', includeIfNull: false)
  final int? storageContainerItemId;
  @JsonKey(name: 'StorageContainerId', includeIfNull: false)
  final int? storageContainerId;
  @JsonKey(name: 'StorageContainerBarcode', includeIfNull: false)
  final String? storageContainerBarcode;
  @JsonKey(name: 'AisleShelf', includeIfNull: false)
  final String? aisleShelf;
  @JsonKey(name: 'OrderNumber', includeIfNull: false)
  final String? orderNumber;
  @JsonKey(name: 'OrderDescription', includeIfNull: false)
  final String? orderDescription;
  @JsonKey(name: 'Deal', includeIfNull: false)
  final String? deal;
  @JsonKey(name: 'PickupLocation', includeIfNull: false)
  final String? pickupLocation;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesInventoryStorageContainerStorageContainerItemFromJson;
  static const toJsonFactory =
      _$WebApiModulesInventoryStorageContainerStorageContainerItemToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesInventoryStorageContainerStorageContainerItemToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesInventoryStorageContainerStorageContainerItem &&
            (identical(other.storageContainerItemId, storageContainerItemId) ||
                const DeepCollectionEquality().equals(
                    other.storageContainerItemId, storageContainerItemId)) &&
            (identical(other.storageContainerId, storageContainerId) ||
                const DeepCollectionEquality()
                    .equals(other.storageContainerId, storageContainerId)) &&
            (identical(
                    other.storageContainerBarcode, storageContainerBarcode) ||
                const DeepCollectionEquality().equals(
                    other.storageContainerBarcode, storageContainerBarcode)) &&
            (identical(other.aisleShelf, aisleShelf) ||
                const DeepCollectionEquality()
                    .equals(other.aisleShelf, aisleShelf)) &&
            (identical(other.orderNumber, orderNumber) ||
                const DeepCollectionEquality()
                    .equals(other.orderNumber, orderNumber)) &&
            (identical(other.orderDescription, orderDescription) ||
                const DeepCollectionEquality()
                    .equals(other.orderDescription, orderDescription)) &&
            (identical(other.deal, deal) ||
                const DeepCollectionEquality().equals(other.deal, deal)) &&
            (identical(other.pickupLocation, pickupLocation) ||
                const DeepCollectionEquality()
                    .equals(other.pickupLocation, pickupLocation)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesInventoryStorageContainerStorageContainerItemExtension
    on WebApiModulesInventoryStorageContainerStorageContainerItem {
  WebApiModulesInventoryStorageContainerStorageContainerItem copyWith(
      {int? storageContainerItemId,
      int? storageContainerId,
      String? storageContainerBarcode,
      String? aisleShelf,
      String? orderNumber,
      String? orderDescription,
      String? deal,
      String? pickupLocation,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesInventoryStorageContainerStorageContainerItem(
        storageContainerItemId:
            storageContainerItemId ?? this.storageContainerItemId,
        storageContainerId: storageContainerId ?? this.storageContainerId,
        storageContainerBarcode:
            storageContainerBarcode ?? this.storageContainerBarcode,
        aisleShelf: aisleShelf ?? this.aisleShelf,
        orderNumber: orderNumber ?? this.orderNumber,
        orderDescription: orderDescription ?? this.orderDescription,
        deal: deal ?? this.deal,
        pickupLocation: pickupLocation ?? this.pickupLocation,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings {
  WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings({
    this.controlId,
    this.name,
    this.usePrefixOnAssetAccounts,
    this.usePrefixOnIncomeAccounts,
    this.usePrefixOnExpenseAccounts,
    this.usePrefixOnLiabilityAccounts,
    this.useSuffixOnAssetAccounts,
    this.useSuffixOnExpenseAccounts,
    this.useSuffixOnIncomeAccounts,
    this.useSuffixOnLiabilityAccounts,
    this.assetUnitCostThreshold,
    this.purchaseUseCompleteKitAccounts,
    this.enableForeignSubRentalWithholding,
    this.foreignSubRentalWithholdingCountryId,
    this.foreignSubRentalWithholdingCountry,
    this.foreignSubRentalWithholdingPercent,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsFromJson(
          json);

  @JsonKey(name: 'ControlId', includeIfNull: false)
  final String? controlId;
  @JsonKey(name: 'Name', includeIfNull: false)
  final String? name;
  @JsonKey(name: 'UsePrefixOnAssetAccounts', includeIfNull: false)
  final bool? usePrefixOnAssetAccounts;
  @JsonKey(name: 'UsePrefixOnIncomeAccounts', includeIfNull: false)
  final bool? usePrefixOnIncomeAccounts;
  @JsonKey(name: 'UsePrefixOnExpenseAccounts', includeIfNull: false)
  final bool? usePrefixOnExpenseAccounts;
  @JsonKey(name: 'UsePrefixOnLiabilityAccounts', includeIfNull: false)
  final bool? usePrefixOnLiabilityAccounts;
  @JsonKey(name: 'UseSuffixOnAssetAccounts', includeIfNull: false)
  final bool? useSuffixOnAssetAccounts;
  @JsonKey(name: 'UseSuffixOnExpenseAccounts', includeIfNull: false)
  final bool? useSuffixOnExpenseAccounts;
  @JsonKey(name: 'UseSuffixOnIncomeAccounts', includeIfNull: false)
  final bool? useSuffixOnIncomeAccounts;
  @JsonKey(name: 'UseSuffixOnLiabilityAccounts', includeIfNull: false)
  final bool? useSuffixOnLiabilityAccounts;
  @JsonKey(name: 'AssetUnitCostThreshold', includeIfNull: false)
  final double? assetUnitCostThreshold;
  @JsonKey(name: 'PurchaseUseCompleteKitAccounts', includeIfNull: false)
  final bool? purchaseUseCompleteKitAccounts;
  @JsonKey(name: 'EnableForeignSubRentalWithholding', includeIfNull: false)
  final bool? enableForeignSubRentalWithholding;
  @JsonKey(name: 'ForeignSubRentalWithholdingCountryId', includeIfNull: false)
  final String? foreignSubRentalWithholdingCountryId;
  @JsonKey(name: 'ForeignSubRentalWithholdingCountry', includeIfNull: false)
  final String? foreignSubRentalWithholdingCountry;
  @JsonKey(name: 'ForeignSubRentalWithholdingPercent', includeIfNull: false)
  final double? foreignSubRentalWithholdingPercent;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings &&
            (identical(other.controlId, controlId) ||
                const DeepCollectionEquality()
                    .equals(other.controlId, controlId)) &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.usePrefixOnAssetAccounts, usePrefixOnAssetAccounts) ||
                const DeepCollectionEquality().equals(
                    other.usePrefixOnAssetAccounts,
                    usePrefixOnAssetAccounts)) &&
            (identical(other.usePrefixOnIncomeAccounts, usePrefixOnIncomeAccounts) ||
                const DeepCollectionEquality().equals(
                    other.usePrefixOnIncomeAccounts,
                    usePrefixOnIncomeAccounts)) &&
            (identical(other.usePrefixOnExpenseAccounts, usePrefixOnExpenseAccounts) ||
                const DeepCollectionEquality().equals(
                    other.usePrefixOnExpenseAccounts,
                    usePrefixOnExpenseAccounts)) &&
            (identical(other.usePrefixOnLiabilityAccounts, usePrefixOnLiabilityAccounts) ||
                const DeepCollectionEquality().equals(
                    other.usePrefixOnLiabilityAccounts,
                    usePrefixOnLiabilityAccounts)) &&
            (identical(other.useSuffixOnAssetAccounts, useSuffixOnAssetAccounts) ||
                const DeepCollectionEquality().equals(
                    other.useSuffixOnAssetAccounts,
                    useSuffixOnAssetAccounts)) &&
            (identical(other.useSuffixOnExpenseAccounts, useSuffixOnExpenseAccounts) ||
                const DeepCollectionEquality().equals(
                    other.useSuffixOnExpenseAccounts, useSuffixOnExpenseAccounts)) &&
            (identical(other.useSuffixOnIncomeAccounts, useSuffixOnIncomeAccounts) || const DeepCollectionEquality().equals(other.useSuffixOnIncomeAccounts, useSuffixOnIncomeAccounts)) &&
            (identical(other.useSuffixOnLiabilityAccounts, useSuffixOnLiabilityAccounts) || const DeepCollectionEquality().equals(other.useSuffixOnLiabilityAccounts, useSuffixOnLiabilityAccounts)) &&
            (identical(other.assetUnitCostThreshold, assetUnitCostThreshold) || const DeepCollectionEquality().equals(other.assetUnitCostThreshold, assetUnitCostThreshold)) &&
            (identical(other.purchaseUseCompleteKitAccounts, purchaseUseCompleteKitAccounts) || const DeepCollectionEquality().equals(other.purchaseUseCompleteKitAccounts, purchaseUseCompleteKitAccounts)) &&
            (identical(other.enableForeignSubRentalWithholding, enableForeignSubRentalWithholding) || const DeepCollectionEquality().equals(other.enableForeignSubRentalWithholding, enableForeignSubRentalWithholding)) &&
            (identical(other.foreignSubRentalWithholdingCountryId, foreignSubRentalWithholdingCountryId) || const DeepCollectionEquality().equals(other.foreignSubRentalWithholdingCountryId, foreignSubRentalWithholdingCountryId)) &&
            (identical(other.foreignSubRentalWithholdingCountry, foreignSubRentalWithholdingCountry) || const DeepCollectionEquality().equals(other.foreignSubRentalWithholdingCountry, foreignSubRentalWithholdingCountry)) &&
            (identical(other.foreignSubRentalWithholdingPercent, foreignSubRentalWithholdingPercent) || const DeepCollectionEquality().equals(other.foreignSubRentalWithholdingPercent, foreignSubRentalWithholdingPercent)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettingsExtension
    on WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings {
  WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings
      copyWith(
          {String? controlId,
          String? name,
          bool? usePrefixOnAssetAccounts,
          bool? usePrefixOnIncomeAccounts,
          bool? usePrefixOnExpenseAccounts,
          bool? usePrefixOnLiabilityAccounts,
          bool? useSuffixOnAssetAccounts,
          bool? useSuffixOnExpenseAccounts,
          bool? useSuffixOnIncomeAccounts,
          bool? useSuffixOnLiabilityAccounts,
          double? assetUnitCostThreshold,
          bool? purchaseUseCompleteKitAccounts,
          bool? enableForeignSubRentalWithholding,
          String? foreignSubRentalWithholdingCountryId,
          String? foreignSubRentalWithholdingCountry,
          double? foreignSubRentalWithholdingPercent,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsAccountingSettingsAccountingSettingsAccountingSettings(
        controlId: controlId ?? this.controlId,
        name: name ?? this.name,
        usePrefixOnAssetAccounts:
            usePrefixOnAssetAccounts ?? this.usePrefixOnAssetAccounts,
        usePrefixOnIncomeAccounts:
            usePrefixOnIncomeAccounts ?? this.usePrefixOnIncomeAccounts,
        usePrefixOnExpenseAccounts:
            usePrefixOnExpenseAccounts ?? this.usePrefixOnExpenseAccounts,
        usePrefixOnLiabilityAccounts:
            usePrefixOnLiabilityAccounts ?? this.usePrefixOnLiabilityAccounts,
        useSuffixOnAssetAccounts:
            useSuffixOnAssetAccounts ?? this.useSuffixOnAssetAccounts,
        useSuffixOnExpenseAccounts:
            useSuffixOnExpenseAccounts ?? this.useSuffixOnExpenseAccounts,
        useSuffixOnIncomeAccounts:
            useSuffixOnIncomeAccounts ?? this.useSuffixOnIncomeAccounts,
        useSuffixOnLiabilityAccounts:
            useSuffixOnLiabilityAccounts ?? this.useSuffixOnLiabilityAccounts,
        assetUnitCostThreshold:
            assetUnitCostThreshold ?? this.assetUnitCostThreshold,
        purchaseUseCompleteKitAccounts: purchaseUseCompleteKitAccounts ??
            this.purchaseUseCompleteKitAccounts,
        enableForeignSubRentalWithholding: enableForeignSubRentalWithholding ??
            this.enableForeignSubRentalWithholding,
        foreignSubRentalWithholdingCountryId:
            foreignSubRentalWithholdingCountryId ??
                this.foreignSubRentalWithholdingCountryId,
        foreignSubRentalWithholdingCountry:
            foreignSubRentalWithholdingCountry ??
                this.foreignSubRentalWithholdingCountry,
        foreignSubRentalWithholdingPercent:
            foreignSubRentalWithholdingPercent ??
                this.foreignSubRentalWithholdingPercent,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsAccountingSettingsGlAccountGlAccount {
  WebApiModulesSettingsAccountingSettingsGlAccountGlAccount({
    this.glAccountId,
    this.glAccountNo,
    this.glAccountDescription,
    this.glAccountType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsAccountingSettingsGlAccountGlAccount.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsAccountingSettingsGlAccountGlAccountFromJson(json);

  @JsonKey(name: 'GlAccountId', includeIfNull: false)
  final String? glAccountId;
  @JsonKey(name: 'GlAccountNo', includeIfNull: false)
  final String? glAccountNo;
  @JsonKey(name: 'GlAccountDescription', includeIfNull: false)
  final String? glAccountDescription;
  @JsonKey(name: 'GlAccountType', includeIfNull: false)
  final String? glAccountType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsAccountingSettingsGlAccountGlAccountFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsAccountingSettingsGlAccountGlAccountToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsAccountingSettingsGlAccountGlAccountToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsAccountingSettingsGlAccountGlAccount &&
            (identical(other.glAccountId, glAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.glAccountId, glAccountId)) &&
            (identical(other.glAccountNo, glAccountNo) ||
                const DeepCollectionEquality()
                    .equals(other.glAccountNo, glAccountNo)) &&
            (identical(other.glAccountDescription, glAccountDescription) ||
                const DeepCollectionEquality().equals(
                    other.glAccountDescription, glAccountDescription)) &&
            (identical(other.glAccountType, glAccountType) ||
                const DeepCollectionEquality()
                    .equals(other.glAccountType, glAccountType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsAccountingSettingsGlAccountGlAccountExtension
    on WebApiModulesSettingsAccountingSettingsGlAccountGlAccount {
  WebApiModulesSettingsAccountingSettingsGlAccountGlAccount copyWith(
      {String? glAccountId,
      String? glAccountNo,
      String? glAccountDescription,
      String? glAccountType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsAccountingSettingsGlAccountGlAccount(
        glAccountId: glAccountId ?? this.glAccountId,
        glAccountNo: glAccountNo ?? this.glAccountNo,
        glAccountDescription: glAccountDescription ?? this.glAccountDescription,
        glAccountType: glAccountType ?? this.glAccountType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule {
  WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule({
    this.glDistributionId,
    this.glAccountId,
    this.accountType,
    this.accountTypeDescription,
    this.glAccountNo,
    this.glAccountDescription,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleFromJson(
          json);

  @JsonKey(name: 'GlDistributionId', includeIfNull: false)
  final String? glDistributionId;
  @JsonKey(name: 'GlAccountId', includeIfNull: false)
  final String? glAccountId;
  @JsonKey(name: 'AccountType', includeIfNull: false)
  final String? accountType;
  @JsonKey(name: 'AccountTypeDescription', includeIfNull: false)
  final String? accountTypeDescription;
  @JsonKey(name: 'GlAccountNo', includeIfNull: false)
  final String? glAccountNo;
  @JsonKey(name: 'GlAccountDescription', includeIfNull: false)
  final String? glAccountDescription;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule &&
            (identical(other.glDistributionId, glDistributionId) ||
                const DeepCollectionEquality()
                    .equals(other.glDistributionId, glDistributionId)) &&
            (identical(other.glAccountId, glAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.glAccountId, glAccountId)) &&
            (identical(other.accountType, accountType) ||
                const DeepCollectionEquality()
                    .equals(other.accountType, accountType)) &&
            (identical(other.accountTypeDescription, accountTypeDescription) ||
                const DeepCollectionEquality().equals(
                    other.accountTypeDescription, accountTypeDescription)) &&
            (identical(other.glAccountNo, glAccountNo) ||
                const DeepCollectionEquality()
                    .equals(other.glAccountNo, glAccountNo)) &&
            (identical(other.glAccountDescription, glAccountDescription) ||
                const DeepCollectionEquality().equals(
                    other.glAccountDescription, glAccountDescription)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRuleExtension
    on WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule {
  WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule
      copyWith(
          {String? glDistributionId,
          String? glAccountId,
          String? accountType,
          String? accountTypeDescription,
          String? glAccountNo,
          String? glAccountDescription,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsAccountingSettingsGlDistributionRuleGlDistributionRule(
        glDistributionId: glDistributionId ?? this.glDistributionId,
        glAccountId: glAccountId ?? this.glAccountId,
        accountType: accountType ?? this.accountType,
        accountTypeDescription:
            accountTypeDescription ?? this.accountTypeDescription,
        glAccountNo: glAccountNo ?? this.glAccountNo,
        glAccountDescription: glAccountDescription ?? this.glAccountDescription,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsActivityStatusActivityStatus {
  WebApiModulesSettingsActivityStatusActivityStatus({
    this.activityStatusId,
    this.activityStatus,
    this.rename,
    this.activityStatusDescription,
    this.isSystemStatus,
    this.activityTypeId,
    this.activityType,
    this.color,
    this.textColor,
    this.inactive,
    this.orderBy,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsActivityStatusActivityStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsActivityStatusActivityStatusFromJson(json);

  @JsonKey(name: 'ActivityStatusId', includeIfNull: false)
  final int? activityStatusId;
  @JsonKey(name: 'ActivityStatus', includeIfNull: false)
  final String? activityStatus;
  @JsonKey(name: 'Rename', includeIfNull: false)
  final String? rename;
  @JsonKey(name: 'ActivityStatusDescription', includeIfNull: false)
  final String? activityStatusDescription;
  @JsonKey(name: 'IsSystemStatus', includeIfNull: false)
  final bool? isSystemStatus;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final int? activityTypeId;
  @JsonKey(name: 'ActivityType', includeIfNull: false)
  final String? activityType;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'TextColor', includeIfNull: false)
  final String? textColor;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final int? orderBy;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsActivityStatusActivityStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsActivityStatusActivityStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsActivityStatusActivityStatusToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsActivityStatusActivityStatus &&
            (identical(other.activityStatusId, activityStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.activityStatusId, activityStatusId)) &&
            (identical(other.activityStatus, activityStatus) ||
                const DeepCollectionEquality()
                    .equals(other.activityStatus, activityStatus)) &&
            (identical(other.rename, rename) ||
                const DeepCollectionEquality().equals(other.rename, rename)) &&
            (identical(other.activityStatusDescription,
                    activityStatusDescription) ||
                const DeepCollectionEquality().equals(
                    other.activityStatusDescription,
                    activityStatusDescription)) &&
            (identical(other.isSystemStatus, isSystemStatus) ||
                const DeepCollectionEquality()
                    .equals(other.isSystemStatus, isSystemStatus)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.activityType, activityType) ||
                const DeepCollectionEquality()
                    .equals(other.activityType, activityType)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.textColor, textColor) ||
                const DeepCollectionEquality()
                    .equals(other.textColor, textColor)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsActivityStatusActivityStatusExtension
    on WebApiModulesSettingsActivityStatusActivityStatus {
  WebApiModulesSettingsActivityStatusActivityStatus copyWith(
      {int? activityStatusId,
      String? activityStatus,
      String? rename,
      String? activityStatusDescription,
      bool? isSystemStatus,
      int? activityTypeId,
      String? activityType,
      String? color,
      String? textColor,
      bool? inactive,
      int? orderBy,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsActivityStatusActivityStatus(
        activityStatusId: activityStatusId ?? this.activityStatusId,
        activityStatus: activityStatus ?? this.activityStatus,
        rename: rename ?? this.rename,
        activityStatusDescription:
            activityStatusDescription ?? this.activityStatusDescription,
        isSystemStatus: isSystemStatus ?? this.isSystemStatus,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        activityType: activityType ?? this.activityType,
        color: color ?? this.color,
        textColor: textColor ?? this.textColor,
        inactive: inactive ?? this.inactive,
        orderBy: orderBy ?? this.orderBy,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsActivityStatusSortActivityStatusRequest {
  WebApiModulesSettingsActivityStatusSortActivityStatusRequest({
    this.startAtIndex,
    this.activityStatusIds,
  });

  factory WebApiModulesSettingsActivityStatusSortActivityStatusRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsActivityStatusSortActivityStatusRequestFromJson(
          json);

  @JsonKey(name: 'StartAtIndex', includeIfNull: false)
  final int? startAtIndex;
  @JsonKey(
      name: 'ActivityStatusIds', includeIfNull: false, defaultValue: <String>[])
  final List<String>? activityStatusIds;
  static const fromJsonFactory =
      _$WebApiModulesSettingsActivityStatusSortActivityStatusRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsActivityStatusSortActivityStatusRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsActivityStatusSortActivityStatusRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsActivityStatusSortActivityStatusRequest &&
            (identical(other.startAtIndex, startAtIndex) ||
                const DeepCollectionEquality()
                    .equals(other.startAtIndex, startAtIndex)) &&
            (identical(other.activityStatusIds, activityStatusIds) ||
                const DeepCollectionEquality()
                    .equals(other.activityStatusIds, activityStatusIds)));
  }
}

extension $WebApiModulesSettingsActivityStatusSortActivityStatusRequestExtension
    on WebApiModulesSettingsActivityStatusSortActivityStatusRequest {
  WebApiModulesSettingsActivityStatusSortActivityStatusRequest copyWith(
      {int? startAtIndex, List<String>? activityStatusIds}) {
    return WebApiModulesSettingsActivityStatusSortActivityStatusRequest(
        startAtIndex: startAtIndex ?? this.startAtIndex,
        activityStatusIds: activityStatusIds ?? this.activityStatusIds);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsActivityTypeActivityType {
  WebApiModulesSettingsActivityTypeActivityType({
    this.activityTypeId,
    this.activityType,
    this.description,
    this.descriptionDisplay,
    this.rename,
    this.isSystemType,
    this.systemUser,
    this.systemUserColor,
    this.color,
    this.textColor,
    this.isWarehouseOutbound,
    this.isWarehouseInbound,
    this.isWarehouseDispatch,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsActivityTypeActivityType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsActivityTypeActivityTypeFromJson(json);

  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final int? activityTypeId;
  @JsonKey(name: 'ActivityType', includeIfNull: false)
  final String? activityType;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'DescriptionDisplay', includeIfNull: false)
  final String? descriptionDisplay;
  @JsonKey(name: 'Rename', includeIfNull: false)
  final String? rename;
  @JsonKey(name: 'IsSystemType', includeIfNull: false)
  final bool? isSystemType;
  @JsonKey(name: 'SystemUser', includeIfNull: false)
  final String? systemUser;
  @JsonKey(name: 'SystemUserColor', includeIfNull: false)
  final String? systemUserColor;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'TextColor', includeIfNull: false)
  final String? textColor;
  @JsonKey(name: 'IsWarehouseOutbound', includeIfNull: false)
  final bool? isWarehouseOutbound;
  @JsonKey(name: 'IsWarehouseInbound', includeIfNull: false)
  final bool? isWarehouseInbound;
  @JsonKey(name: 'IsWarehouseDispatch', includeIfNull: false)
  final bool? isWarehouseDispatch;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsActivityTypeActivityTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsActivityTypeActivityTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsActivityTypeActivityTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsActivityTypeActivityType &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.activityType, activityType) ||
                const DeepCollectionEquality()
                    .equals(other.activityType, activityType)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.descriptionDisplay, descriptionDisplay) ||
                const DeepCollectionEquality()
                    .equals(other.descriptionDisplay, descriptionDisplay)) &&
            (identical(other.rename, rename) ||
                const DeepCollectionEquality().equals(other.rename, rename)) &&
            (identical(other.isSystemType, isSystemType) ||
                const DeepCollectionEquality()
                    .equals(other.isSystemType, isSystemType)) &&
            (identical(other.systemUser, systemUser) ||
                const DeepCollectionEquality()
                    .equals(other.systemUser, systemUser)) &&
            (identical(other.systemUserColor, systemUserColor) ||
                const DeepCollectionEquality()
                    .equals(other.systemUserColor, systemUserColor)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.textColor, textColor) ||
                const DeepCollectionEquality()
                    .equals(other.textColor, textColor)) &&
            (identical(other.isWarehouseOutbound, isWarehouseOutbound) ||
                const DeepCollectionEquality()
                    .equals(other.isWarehouseOutbound, isWarehouseOutbound)) &&
            (identical(other.isWarehouseInbound, isWarehouseInbound) ||
                const DeepCollectionEquality()
                    .equals(other.isWarehouseInbound, isWarehouseInbound)) &&
            (identical(other.isWarehouseDispatch, isWarehouseDispatch) ||
                const DeepCollectionEquality()
                    .equals(other.isWarehouseDispatch, isWarehouseDispatch)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsActivityTypeActivityTypeExtension
    on WebApiModulesSettingsActivityTypeActivityType {
  WebApiModulesSettingsActivityTypeActivityType copyWith(
      {int? activityTypeId,
      String? activityType,
      String? description,
      String? descriptionDisplay,
      String? rename,
      bool? isSystemType,
      String? systemUser,
      String? systemUserColor,
      String? color,
      String? textColor,
      bool? isWarehouseOutbound,
      bool? isWarehouseInbound,
      bool? isWarehouseDispatch,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsActivityTypeActivityType(
        activityTypeId: activityTypeId ?? this.activityTypeId,
        activityType: activityType ?? this.activityType,
        description: description ?? this.description,
        descriptionDisplay: descriptionDisplay ?? this.descriptionDisplay,
        rename: rename ?? this.rename,
        isSystemType: isSystemType ?? this.isSystemType,
        systemUser: systemUser ?? this.systemUser,
        systemUserColor: systemUserColor ?? this.systemUserColor,
        color: color ?? this.color,
        textColor: textColor ?? this.textColor,
        isWarehouseOutbound: isWarehouseOutbound ?? this.isWarehouseOutbound,
        isWarehouseInbound: isWarehouseInbound ?? this.isWarehouseInbound,
        isWarehouseDispatch: isWarehouseDispatch ?? this.isWarehouseDispatch,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsAddressSettingsCountryCountry {
  WebApiModulesSettingsAddressSettingsCountryCountry({
    this.countryId,
    this.country,
    this.countryCode,
    this.isUSA,
    this.metric,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsAddressSettingsCountryCountry.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsAddressSettingsCountryCountryFromJson(json);

  @JsonKey(name: 'CountryId', includeIfNull: false)
  final String? countryId;
  @JsonKey(name: 'Country', includeIfNull: false)
  final String? country;
  @JsonKey(name: 'CountryCode', includeIfNull: false)
  final String? countryCode;
  @JsonKey(name: 'IsUSA', includeIfNull: false)
  final bool? isUSA;
  @JsonKey(name: 'Metric', includeIfNull: false)
  final bool? metric;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsAddressSettingsCountryCountryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsAddressSettingsCountryCountryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsAddressSettingsCountryCountryToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsAddressSettingsCountryCountry &&
            (identical(other.countryId, countryId) ||
                const DeepCollectionEquality()
                    .equals(other.countryId, countryId)) &&
            (identical(other.country, country) ||
                const DeepCollectionEquality()
                    .equals(other.country, country)) &&
            (identical(other.countryCode, countryCode) ||
                const DeepCollectionEquality()
                    .equals(other.countryCode, countryCode)) &&
            (identical(other.isUSA, isUSA) ||
                const DeepCollectionEquality().equals(other.isUSA, isUSA)) &&
            (identical(other.metric, metric) ||
                const DeepCollectionEquality().equals(other.metric, metric)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsAddressSettingsCountryCountryExtension
    on WebApiModulesSettingsAddressSettingsCountryCountry {
  WebApiModulesSettingsAddressSettingsCountryCountry copyWith(
      {String? countryId,
      String? country,
      String? countryCode,
      bool? isUSA,
      bool? metric,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsAddressSettingsCountryCountry(
        countryId: countryId ?? this.countryId,
        country: country ?? this.country,
        countryCode: countryCode ?? this.countryCode,
        isUSA: isUSA ?? this.isUSA,
        metric: metric ?? this.metric,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsAddressSettingsStateState {
  WebApiModulesSettingsAddressSettingsStateState({
    this.stateId,
    this.state,
    this.stateCode,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsAddressSettingsStateState.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsAddressSettingsStateStateFromJson(json);

  @JsonKey(name: 'StateId', includeIfNull: false)
  final String? stateId;
  @JsonKey(name: 'State', includeIfNull: false)
  final String? state;
  @JsonKey(name: 'StateCode', includeIfNull: false)
  final String? stateCode;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsAddressSettingsStateStateFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsAddressSettingsStateStateToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsAddressSettingsStateStateToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsAddressSettingsStateState &&
            (identical(other.stateId, stateId) ||
                const DeepCollectionEquality()
                    .equals(other.stateId, stateId)) &&
            (identical(other.state, state) ||
                const DeepCollectionEquality().equals(other.state, state)) &&
            (identical(other.stateCode, stateCode) ||
                const DeepCollectionEquality()
                    .equals(other.stateCode, stateCode)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsAddressSettingsStateStateExtension
    on WebApiModulesSettingsAddressSettingsStateState {
  WebApiModulesSettingsAddressSettingsStateState copyWith(
      {String? stateId,
      String? state,
      String? stateCode,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsAddressSettingsStateState(
        stateId: stateId ?? this.stateId,
        state: state ?? this.state,
        stateCode: stateCode ?? this.stateCode,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsAppReportDesignerAppReportDesigner {
  WebApiModulesSettingsAppReportDesignerAppReportDesigner({
    this.appReportDesignerId,
    this.category,
    this.description,
    this.inactive,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsAppReportDesignerAppReportDesigner.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsAppReportDesignerAppReportDesignerFromJson(json);

  @JsonKey(name: 'AppReportDesignerId', includeIfNull: false)
  final String? appReportDesignerId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsAppReportDesignerAppReportDesignerFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsAppReportDesignerAppReportDesignerToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsAppReportDesignerAppReportDesignerToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsAppReportDesignerAppReportDesigner &&
            (identical(other.appReportDesignerId, appReportDesignerId) ||
                const DeepCollectionEquality()
                    .equals(other.appReportDesignerId, appReportDesignerId)) &&
            (identical(other.category, category) ||
                const DeepCollectionEquality()
                    .equals(other.category, category)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsAppReportDesignerAppReportDesignerExtension
    on WebApiModulesSettingsAppReportDesignerAppReportDesigner {
  WebApiModulesSettingsAppReportDesignerAppReportDesigner copyWith(
      {String? appReportDesignerId,
      String? category,
      String? description,
      bool? inactive,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsAppReportDesignerAppReportDesigner(
        appReportDesignerId: appReportDesignerId ?? this.appReportDesignerId,
        category: category ?? this.category,
        description: description ?? this.description,
        inactive: inactive ?? this.inactive,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsAttributeValueAttributeValue {
  WebApiModulesSettingsAttributeValueAttributeValue({
    this.attributeValueId,
    this.attributeValue,
    this.attributeId,
    this.attribute,
    this.inventoryTypeId,
    this.inventoryType,
    this.numericOnly,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsAttributeValueAttributeValue.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsAttributeValueAttributeValueFromJson(json);

  @JsonKey(name: 'AttributeValueId', includeIfNull: false)
  final String? attributeValueId;
  @JsonKey(name: 'AttributeValue', includeIfNull: false)
  final String? attributeValue;
  @JsonKey(name: 'AttributeId', includeIfNull: false)
  final String? attributeId;
  @JsonKey(name: 'Attribute', includeIfNull: false)
  final String? attribute;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'NumericOnly', includeIfNull: false)
  final bool? numericOnly;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsAttributeValueAttributeValueFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsAttributeValueAttributeValueToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsAttributeValueAttributeValueToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsAttributeValueAttributeValue &&
            (identical(other.attributeValueId, attributeValueId) ||
                const DeepCollectionEquality()
                    .equals(other.attributeValueId, attributeValueId)) &&
            (identical(other.attributeValue, attributeValue) ||
                const DeepCollectionEquality()
                    .equals(other.attributeValue, attributeValue)) &&
            (identical(other.attributeId, attributeId) ||
                const DeepCollectionEquality()
                    .equals(other.attributeId, attributeId)) &&
            (identical(other.attribute, attribute) ||
                const DeepCollectionEquality()
                    .equals(other.attribute, attribute)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.numericOnly, numericOnly) ||
                const DeepCollectionEquality()
                    .equals(other.numericOnly, numericOnly)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsAttributeValueAttributeValueExtension
    on WebApiModulesSettingsAttributeValueAttributeValue {
  WebApiModulesSettingsAttributeValueAttributeValue copyWith(
      {String? attributeValueId,
      String? attributeValue,
      String? attributeId,
      String? attribute,
      String? inventoryTypeId,
      String? inventoryType,
      bool? numericOnly,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsAttributeValueAttributeValue(
        attributeValueId: attributeValueId ?? this.attributeValueId,
        attributeValue: attributeValue ?? this.attributeValue,
        attributeId: attributeId ?? this.attributeId,
        attribute: attribute ?? this.attribute,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        numericOnly: numericOnly ?? this.numericOnly,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog {
  WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog({
    this.id,
    this.batchSize,
    this.startDateTime,
    this.startDateTimeString,
    this.endDateTime,
    this.endDateTimeString,
    this.durationInSeconds,
    this.durationInMinutes,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogFromJson(
          json);

  @JsonKey(name: 'Id', includeIfNull: false)
  final int? id;
  @JsonKey(name: 'BatchSize', includeIfNull: false)
  final int? batchSize;
  @JsonKey(name: 'StartDateTime', includeIfNull: false)
  final DateTime? startDateTime;
  @JsonKey(name: 'StartDateTimeString', includeIfNull: false)
  final String? startDateTimeString;
  @JsonKey(name: 'EndDateTime', includeIfNull: false)
  final DateTime? endDateTime;
  @JsonKey(name: 'EndDateTimeString', includeIfNull: false)
  final String? endDateTimeString;
  @JsonKey(name: 'DurationInSeconds', includeIfNull: false)
  final double? durationInSeconds;
  @JsonKey(name: 'DurationInMinutes', includeIfNull: false)
  final double? durationInMinutes;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.batchSize, batchSize) ||
                const DeepCollectionEquality()
                    .equals(other.batchSize, batchSize)) &&
            (identical(other.startDateTime, startDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.startDateTime, startDateTime)) &&
            (identical(other.startDateTimeString, startDateTimeString) ||
                const DeepCollectionEquality()
                    .equals(other.startDateTimeString, startDateTimeString)) &&
            (identical(other.endDateTime, endDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.endDateTime, endDateTime)) &&
            (identical(other.endDateTimeString, endDateTimeString) ||
                const DeepCollectionEquality()
                    .equals(other.endDateTimeString, endDateTimeString)) &&
            (identical(other.durationInSeconds, durationInSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.durationInSeconds, durationInSeconds)) &&
            (identical(other.durationInMinutes, durationInMinutes) ||
                const DeepCollectionEquality()
                    .equals(other.durationInMinutes, durationInMinutes)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLogExtension
    on WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog {
  WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog
      copyWith(
          {int? id,
          int? batchSize,
          DateTime? startDateTime,
          String? startDateTimeString,
          DateTime? endDateTime,
          String? endDateTimeString,
          double? durationInSeconds,
          double? durationInMinutes,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsAvailabilityKeepFreshLogAvailabilityKeepFreshLog(
        id: id ?? this.id,
        batchSize: batchSize ?? this.batchSize,
        startDateTime: startDateTime ?? this.startDateTime,
        startDateTimeString: startDateTimeString ?? this.startDateTimeString,
        endDateTime: endDateTime ?? this.endDateTime,
        endDateTimeString: endDateTimeString ?? this.endDateTimeString,
        durationInSeconds: durationInSeconds ?? this.durationInSeconds,
        durationInMinutes: durationInMinutes ?? this.durationInMinutes,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsBillingCycleEventBillingCycleEvent {
  WebApiModulesSettingsBillingCycleEventBillingCycleEvent({
    this.billingCycleId,
    this.billingCycleEventId,
    this.billingCycleEvent,
    this.billPercent,
    this.orderBy,
    this.actualRevenue,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsBillingCycleEventBillingCycleEvent.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsBillingCycleEventBillingCycleEventFromJson(json);

  @JsonKey(name: 'BillingCycleId', includeIfNull: false)
  final String? billingCycleId;
  @JsonKey(name: 'BillingCycleEventId', includeIfNull: false)
  final String? billingCycleEventId;
  @JsonKey(name: 'BillingCycleEvent', includeIfNull: false)
  final String? billingCycleEvent;
  @JsonKey(name: 'BillPercent', includeIfNull: false)
  final int? billPercent;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final int? orderBy;
  @JsonKey(name: 'ActualRevenue', includeIfNull: false)
  final bool? actualRevenue;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsBillingCycleEventBillingCycleEventFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsBillingCycleEventBillingCycleEventToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsBillingCycleEventBillingCycleEventToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsBillingCycleEventBillingCycleEvent &&
            (identical(other.billingCycleId, billingCycleId) ||
                const DeepCollectionEquality()
                    .equals(other.billingCycleId, billingCycleId)) &&
            (identical(other.billingCycleEventId, billingCycleEventId) ||
                const DeepCollectionEquality()
                    .equals(other.billingCycleEventId, billingCycleEventId)) &&
            (identical(other.billingCycleEvent, billingCycleEvent) ||
                const DeepCollectionEquality()
                    .equals(other.billingCycleEvent, billingCycleEvent)) &&
            (identical(other.billPercent, billPercent) ||
                const DeepCollectionEquality()
                    .equals(other.billPercent, billPercent)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.actualRevenue, actualRevenue) ||
                const DeepCollectionEquality()
                    .equals(other.actualRevenue, actualRevenue)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsBillingCycleEventBillingCycleEventExtension
    on WebApiModulesSettingsBillingCycleEventBillingCycleEvent {
  WebApiModulesSettingsBillingCycleEventBillingCycleEvent copyWith(
      {String? billingCycleId,
      String? billingCycleEventId,
      String? billingCycleEvent,
      int? billPercent,
      int? orderBy,
      bool? actualRevenue,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsBillingCycleEventBillingCycleEvent(
        billingCycleId: billingCycleId ?? this.billingCycleId,
        billingCycleEventId: billingCycleEventId ?? this.billingCycleEventId,
        billingCycleEvent: billingCycleEvent ?? this.billingCycleEvent,
        billPercent: billPercent ?? this.billPercent,
        orderBy: orderBy ?? this.orderBy,
        actualRevenue: actualRevenue ?? this.actualRevenue,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle {
  WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle({
    this.billingCycleId,
    this.billingCycle,
    this.billingCycleType,
    this.nextBillingCycleId,
    this.nextBillingCycle,
    this.prorateMonthly,
    this.monthlyWeekdaysOnly,
    this.billOnPeriodStartOrEnd,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycleFromJson(
          json);

  @JsonKey(name: 'BillingCycleId', includeIfNull: false)
  final String? billingCycleId;
  @JsonKey(name: 'BillingCycle', includeIfNull: false)
  final String? billingCycle;
  @JsonKey(name: 'BillingCycleType', includeIfNull: false)
  final String? billingCycleType;
  @JsonKey(name: 'NextBillingCycleId', includeIfNull: false)
  final String? nextBillingCycleId;
  @JsonKey(name: 'NextBillingCycle', includeIfNull: false)
  final String? nextBillingCycle;
  @JsonKey(name: 'ProrateMonthly', includeIfNull: false)
  final bool? prorateMonthly;
  @JsonKey(name: 'MonthlyWeekdaysOnly', includeIfNull: false)
  final bool? monthlyWeekdaysOnly;
  @JsonKey(name: 'BillOnPeriodStartOrEnd', includeIfNull: false)
  final String? billOnPeriodStartOrEnd;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycleFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycleToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycleToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle &&
            (identical(other.billingCycleId, billingCycleId) ||
                const DeepCollectionEquality()
                    .equals(other.billingCycleId, billingCycleId)) &&
            (identical(other.billingCycle, billingCycle) ||
                const DeepCollectionEquality()
                    .equals(other.billingCycle, billingCycle)) &&
            (identical(other.billingCycleType, billingCycleType) ||
                const DeepCollectionEquality()
                    .equals(other.billingCycleType, billingCycleType)) &&
            (identical(other.nextBillingCycleId, nextBillingCycleId) ||
                const DeepCollectionEquality()
                    .equals(other.nextBillingCycleId, nextBillingCycleId)) &&
            (identical(other.nextBillingCycle, nextBillingCycle) ||
                const DeepCollectionEquality()
                    .equals(other.nextBillingCycle, nextBillingCycle)) &&
            (identical(other.prorateMonthly, prorateMonthly) ||
                const DeepCollectionEquality()
                    .equals(other.prorateMonthly, prorateMonthly)) &&
            (identical(other.monthlyWeekdaysOnly, monthlyWeekdaysOnly) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyWeekdaysOnly, monthlyWeekdaysOnly)) &&
            (identical(other.billOnPeriodStartOrEnd, billOnPeriodStartOrEnd) ||
                const DeepCollectionEquality().equals(
                    other.billOnPeriodStartOrEnd, billOnPeriodStartOrEnd)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycleExtension
    on WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle {
  WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle copyWith(
      {String? billingCycleId,
      String? billingCycle,
      String? billingCycleType,
      String? nextBillingCycleId,
      String? nextBillingCycle,
      bool? prorateMonthly,
      bool? monthlyWeekdaysOnly,
      String? billOnPeriodStartOrEnd,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsBillingCycleSettingsBillingCycleBillingCycle(
        billingCycleId: billingCycleId ?? this.billingCycleId,
        billingCycle: billingCycle ?? this.billingCycle,
        billingCycleType: billingCycleType ?? this.billingCycleType,
        nextBillingCycleId: nextBillingCycleId ?? this.nextBillingCycleId,
        nextBillingCycle: nextBillingCycle ?? this.nextBillingCycle,
        prorateMonthly: prorateMonthly ?? this.prorateMonthly,
        monthlyWeekdaysOnly: monthlyWeekdaysOnly ?? this.monthlyWeekdaysOnly,
        billOnPeriodStartOrEnd:
            billOnPeriodStartOrEnd ?? this.billOnPeriodStartOrEnd,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus {
  WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus({
    this.blackoutStatusId,
    this.blackoutStatus,
    this.availableToSchedule,
    this.color,
    this.whiteText,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusFromJson(
          json);

  @JsonKey(name: 'BlackoutStatusId', includeIfNull: false)
  final String? blackoutStatusId;
  @JsonKey(name: 'BlackoutStatus', includeIfNull: false)
  final String? blackoutStatus;
  @JsonKey(name: 'AvailableToSchedule', includeIfNull: false)
  final bool? availableToSchedule;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'WhiteText', includeIfNull: false)
  final bool? whiteText;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus &&
            (identical(other.blackoutStatusId, blackoutStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.blackoutStatusId, blackoutStatusId)) &&
            (identical(other.blackoutStatus, blackoutStatus) ||
                const DeepCollectionEquality()
                    .equals(other.blackoutStatus, blackoutStatus)) &&
            (identical(other.availableToSchedule, availableToSchedule) ||
                const DeepCollectionEquality()
                    .equals(other.availableToSchedule, availableToSchedule)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.whiteText, whiteText) ||
                const DeepCollectionEquality()
                    .equals(other.whiteText, whiteText)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatusExtension
    on WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus {
  WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus copyWith(
      {String? blackoutStatusId,
      String? blackoutStatus,
      bool? availableToSchedule,
      String? color,
      bool? whiteText,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCalendarSettingsBlackoutStatusBlackoutStatus(
        blackoutStatusId: blackoutStatusId ?? this.blackoutStatusId,
        blackoutStatus: blackoutStatus ?? this.blackoutStatus,
        availableToSchedule: availableToSchedule ?? this.availableToSchedule,
        color: color ?? this.color,
        whiteText: whiteText ?? this.whiteText,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCalendarSettingsHolidayHoliday {
  WebApiModulesSettingsCalendarSettingsHolidayHoliday({
    this.holidayId,
    this.holiday,
    this.countryId,
    this.country,
    this.custom,
    this.observed,
    this.type,
    this.fixedMonth,
    this.fixedDay,
    this.fixedYear,
    this.dayOfWeek,
    this.weekOfMonth,
    this.adjustment,
    this.offsetHolidayId,
    this.offsetHoliday,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.$custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCalendarSettingsHolidayHoliday.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCalendarSettingsHolidayHolidayFromJson(json);

  @JsonKey(name: 'HolidayId', includeIfNull: false)
  final String? holidayId;
  @JsonKey(name: 'Holiday', includeIfNull: false)
  final String? holiday;
  @JsonKey(name: 'CountryId', includeIfNull: false)
  final String? countryId;
  @JsonKey(name: 'Country', includeIfNull: false)
  final String? country;
  @JsonKey(name: 'Custom', includeIfNull: false)
  final bool? custom;
  @JsonKey(name: 'Observed', includeIfNull: false)
  final bool? observed;
  @JsonKey(name: 'Type', includeIfNull: false)
  final String? type;
  @JsonKey(name: 'FixedMonth', includeIfNull: false)
  final int? fixedMonth;
  @JsonKey(name: 'FixedDay', includeIfNull: false)
  final int? fixedDay;
  @JsonKey(name: 'FixedYear', includeIfNull: false)
  final int? fixedYear;
  @JsonKey(name: 'DayOfWeek', includeIfNull: false)
  final int? dayOfWeek;
  @JsonKey(name: 'WeekOfMonth', includeIfNull: false)
  final int? weekOfMonth;
  @JsonKey(name: 'Adjustment', includeIfNull: false)
  final int? adjustment;
  @JsonKey(name: 'OffsetHolidayId', includeIfNull: false)
  final String? offsetHolidayId;
  @JsonKey(name: 'OffsetHoliday', includeIfNull: false)
  final String? offsetHoliday;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? $custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCalendarSettingsHolidayHolidayFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCalendarSettingsHolidayHolidayToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCalendarSettingsHolidayHolidayToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCalendarSettingsHolidayHoliday &&
            (identical(other.holidayId, holidayId) ||
                const DeepCollectionEquality()
                    .equals(other.holidayId, holidayId)) &&
            (identical(other.holiday, holiday) ||
                const DeepCollectionEquality()
                    .equals(other.holiday, holiday)) &&
            (identical(other.countryId, countryId) ||
                const DeepCollectionEquality()
                    .equals(other.countryId, countryId)) &&
            (identical(other.country, country) ||
                const DeepCollectionEquality()
                    .equals(other.country, country)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.observed, observed) ||
                const DeepCollectionEquality()
                    .equals(other.observed, observed)) &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.fixedMonth, fixedMonth) ||
                const DeepCollectionEquality()
                    .equals(other.fixedMonth, fixedMonth)) &&
            (identical(other.fixedDay, fixedDay) ||
                const DeepCollectionEquality()
                    .equals(other.fixedDay, fixedDay)) &&
            (identical(other.fixedYear, fixedYear) ||
                const DeepCollectionEquality()
                    .equals(other.fixedYear, fixedYear)) &&
            (identical(other.dayOfWeek, dayOfWeek) ||
                const DeepCollectionEquality()
                    .equals(other.dayOfWeek, dayOfWeek)) &&
            (identical(other.weekOfMonth, weekOfMonth) ||
                const DeepCollectionEquality()
                    .equals(other.weekOfMonth, weekOfMonth)) &&
            (identical(other.adjustment, adjustment) ||
                const DeepCollectionEquality()
                    .equals(other.adjustment, adjustment)) &&
            (identical(other.offsetHolidayId, offsetHolidayId) ||
                const DeepCollectionEquality()
                    .equals(other.offsetHolidayId, offsetHolidayId)) &&
            (identical(other.offsetHoliday, offsetHoliday) ||
                const DeepCollectionEquality()
                    .equals(other.offsetHoliday, offsetHoliday)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.$custom, $custom) ||
                const DeepCollectionEquality()
                    .equals(other.$custom, $custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCalendarSettingsHolidayHolidayExtension
    on WebApiModulesSettingsCalendarSettingsHolidayHoliday {
  WebApiModulesSettingsCalendarSettingsHolidayHoliday copyWith(
      {String? holidayId,
      String? holiday,
      String? countryId,
      String? country,
      bool? custom,
      bool? observed,
      String? type,
      int? fixedMonth,
      int? fixedDay,
      int? fixedYear,
      int? dayOfWeek,
      int? weekOfMonth,
      int? adjustment,
      String? offsetHolidayId,
      String? offsetHoliday,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? $custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCalendarSettingsHolidayHoliday(
        holidayId: holidayId ?? this.holidayId,
        holiday: holiday ?? this.holiday,
        countryId: countryId ?? this.countryId,
        country: country ?? this.country,
        custom: custom ?? this.custom,
        observed: observed ?? this.observed,
        type: type ?? this.type,
        fixedMonth: fixedMonth ?? this.fixedMonth,
        fixedDay: fixedDay ?? this.fixedDay,
        fixedYear: fixedYear ?? this.fixedYear,
        dayOfWeek: dayOfWeek ?? this.dayOfWeek,
        weekOfMonth: weekOfMonth ?? this.weekOfMonth,
        adjustment: adjustment ?? this.adjustment,
        offsetHolidayId: offsetHolidayId ?? this.offsetHolidayId,
        offsetHoliday: offsetHoliday ?? this.offsetHoliday,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        $custom: $custom ?? this.$custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCategorySortCategoryRequest {
  WebApiModulesSettingsCategorySortCategoryRequest({
    this.startAtIndex,
    this.categoryIds,
  });

  factory WebApiModulesSettingsCategorySortCategoryRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCategorySortCategoryRequestFromJson(json);

  @JsonKey(name: 'StartAtIndex', includeIfNull: false)
  final int? startAtIndex;
  @JsonKey(name: 'CategoryIds', includeIfNull: false, defaultValue: <String>[])
  final List<String>? categoryIds;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCategorySortCategoryRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCategorySortCategoryRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCategorySortCategoryRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCategorySortCategoryRequest &&
            (identical(other.startAtIndex, startAtIndex) ||
                const DeepCollectionEquality()
                    .equals(other.startAtIndex, startAtIndex)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)));
  }
}

extension $WebApiModulesSettingsCategorySortCategoryRequestExtension
    on WebApiModulesSettingsCategorySortCategoryRequest {
  WebApiModulesSettingsCategorySortCategoryRequest copyWith(
      {int? startAtIndex, List<String>? categoryIds}) {
    return WebApiModulesSettingsCategorySortCategoryRequest(
        startAtIndex: startAtIndex ?? this.startAtIndex,
        categoryIds: categoryIds ?? this.categoryIds);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsContactSettingsContactEventContactEvent {
  WebApiModulesSettingsContactSettingsContactEventContactEvent({
    this.contactEventId,
    this.contactEvent,
    this.color,
    this.whiteText,
    this.recurring,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsContactSettingsContactEventContactEvent.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsContactSettingsContactEventContactEventFromJson(
          json);

  @JsonKey(name: 'ContactEventId', includeIfNull: false)
  final String? contactEventId;
  @JsonKey(name: 'ContactEvent', includeIfNull: false)
  final String? contactEvent;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'WhiteText', includeIfNull: false)
  final bool? whiteText;
  @JsonKey(name: 'Recurring', includeIfNull: false)
  final bool? recurring;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsContactSettingsContactEventContactEventFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsContactSettingsContactEventContactEventToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsContactSettingsContactEventContactEventToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsContactSettingsContactEventContactEvent &&
            (identical(other.contactEventId, contactEventId) ||
                const DeepCollectionEquality()
                    .equals(other.contactEventId, contactEventId)) &&
            (identical(other.contactEvent, contactEvent) ||
                const DeepCollectionEquality()
                    .equals(other.contactEvent, contactEvent)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.whiteText, whiteText) ||
                const DeepCollectionEquality()
                    .equals(other.whiteText, whiteText)) &&
            (identical(other.recurring, recurring) ||
                const DeepCollectionEquality()
                    .equals(other.recurring, recurring)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsContactSettingsContactEventContactEventExtension
    on WebApiModulesSettingsContactSettingsContactEventContactEvent {
  WebApiModulesSettingsContactSettingsContactEventContactEvent copyWith(
      {String? contactEventId,
      String? contactEvent,
      String? color,
      bool? whiteText,
      bool? recurring,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsContactSettingsContactEventContactEvent(
        contactEventId: contactEventId ?? this.contactEventId,
        contactEvent: contactEvent ?? this.contactEvent,
        color: color ?? this.color,
        whiteText: whiteText ?? this.whiteText,
        recurring: recurring ?? this.recurring,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsContactSettingsContactTitleContactTitle {
  WebApiModulesSettingsContactSettingsContactTitleContactTitle({
    this.contactTitleId,
    this.contactTitle,
    this.titleType,
    this.accountsPayable,
    this.accountsReceivable,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsContactSettingsContactTitleContactTitle.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsContactSettingsContactTitleContactTitleFromJson(
          json);

  @JsonKey(name: 'ContactTitleId', includeIfNull: false)
  final String? contactTitleId;
  @JsonKey(name: 'ContactTitle', includeIfNull: false)
  final String? contactTitle;
  @JsonKey(name: 'TitleType', includeIfNull: false)
  final String? titleType;
  @JsonKey(name: 'AccountsPayable', includeIfNull: false)
  final bool? accountsPayable;
  @JsonKey(name: 'AccountsReceivable', includeIfNull: false)
  final bool? accountsReceivable;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsContactSettingsContactTitleContactTitleFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsContactSettingsContactTitleContactTitleToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsContactSettingsContactTitleContactTitleToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsContactSettingsContactTitleContactTitle &&
            (identical(other.contactTitleId, contactTitleId) ||
                const DeepCollectionEquality()
                    .equals(other.contactTitleId, contactTitleId)) &&
            (identical(other.contactTitle, contactTitle) ||
                const DeepCollectionEquality()
                    .equals(other.contactTitle, contactTitle)) &&
            (identical(other.titleType, titleType) ||
                const DeepCollectionEquality()
                    .equals(other.titleType, titleType)) &&
            (identical(other.accountsPayable, accountsPayable) ||
                const DeepCollectionEquality()
                    .equals(other.accountsPayable, accountsPayable)) &&
            (identical(other.accountsReceivable, accountsReceivable) ||
                const DeepCollectionEquality()
                    .equals(other.accountsReceivable, accountsReceivable)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsContactSettingsContactTitleContactTitleExtension
    on WebApiModulesSettingsContactSettingsContactTitleContactTitle {
  WebApiModulesSettingsContactSettingsContactTitleContactTitle copyWith(
      {String? contactTitleId,
      String? contactTitle,
      String? titleType,
      bool? accountsPayable,
      bool? accountsReceivable,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsContactSettingsContactTitleContactTitle(
        contactTitleId: contactTitleId ?? this.contactTitleId,
        contactTitle: contactTitle ?? this.contactTitle,
        titleType: titleType ?? this.titleType,
        accountsPayable: accountsPayable ?? this.accountsPayable,
        accountsReceivable: accountsReceivable ?? this.accountsReceivable,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsContactSettingsMailListMailList {
  WebApiModulesSettingsContactSettingsMailListMailList({
    this.mailListId,
    this.mailList,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsContactSettingsMailListMailList.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsContactSettingsMailListMailListFromJson(json);

  @JsonKey(name: 'MailListId', includeIfNull: false)
  final String? mailListId;
  @JsonKey(name: 'MailList', includeIfNull: false)
  final String? mailList;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsContactSettingsMailListMailListFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsContactSettingsMailListMailListToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsContactSettingsMailListMailListToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsContactSettingsMailListMailList &&
            (identical(other.mailListId, mailListId) ||
                const DeepCollectionEquality()
                    .equals(other.mailListId, mailListId)) &&
            (identical(other.mailList, mailList) ||
                const DeepCollectionEquality()
                    .equals(other.mailList, mailList)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsContactSettingsMailListMailListExtension
    on WebApiModulesSettingsContactSettingsMailListMailList {
  WebApiModulesSettingsContactSettingsMailListMailList copyWith(
      {String? mailListId,
      String? mailList,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsContactSettingsMailListMailList(
        mailListId: mailListId ?? this.mailListId,
        mailList: mailList ?? this.mailList,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType {
  WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType({
    this.creditCardPaymentTypeId,
    this.description,
    this.chargePaymentTypeId,
    this.chargePaymentType,
    this.refundPaymentTypeId,
    this.refundPaymentType,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeFromJson(
          json);

  @JsonKey(name: 'CreditCardPaymentTypeId', includeIfNull: false)
  final int? creditCardPaymentTypeId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'ChargePaymentTypeId', includeIfNull: false)
  final String? chargePaymentTypeId;
  @JsonKey(name: 'ChargePaymentType', includeIfNull: false)
  final String? chargePaymentType;
  @JsonKey(name: 'RefundPaymentTypeId', includeIfNull: false)
  final String? refundPaymentTypeId;
  @JsonKey(name: 'RefundPaymentType', includeIfNull: false)
  final String? refundPaymentType;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType &&
            (identical(
                    other.creditCardPaymentTypeId, creditCardPaymentTypeId) ||
                const DeepCollectionEquality().equals(
                    other.creditCardPaymentTypeId, creditCardPaymentTypeId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.chargePaymentTypeId, chargePaymentTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.chargePaymentTypeId, chargePaymentTypeId)) &&
            (identical(other.chargePaymentType, chargePaymentType) ||
                const DeepCollectionEquality()
                    .equals(other.chargePaymentType, chargePaymentType)) &&
            (identical(other.refundPaymentTypeId, refundPaymentTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.refundPaymentTypeId, refundPaymentTypeId)) &&
            (identical(other.refundPaymentType, refundPaymentType) ||
                const DeepCollectionEquality()
                    .equals(other.refundPaymentType, refundPaymentType)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentTypeExtension
    on WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType {
  WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType
      copyWith(
          {int? creditCardPaymentTypeId,
          String? description,
          String? chargePaymentTypeId,
          String? chargePaymentType,
          String? refundPaymentTypeId,
          String? refundPaymentType,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCreditCardSettingsCreditCardPaymentTypeCreditCardPaymentType(
        creditCardPaymentTypeId:
            creditCardPaymentTypeId ?? this.creditCardPaymentTypeId,
        description: description ?? this.description,
        chargePaymentTypeId: chargePaymentTypeId ?? this.chargePaymentTypeId,
        chargePaymentType: chargePaymentType ?? this.chargePaymentType,
        refundPaymentTypeId: refundPaymentTypeId ?? this.refundPaymentTypeId,
        refundPaymentType: refundPaymentType ?? this.refundPaymentType,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad {
  WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad({
    this.creditCardPinPadId,
    this.code,
    this.description,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadFromJson(
          json);

  @JsonKey(name: 'CreditCardPinPadId', includeIfNull: false)
  final int? creditCardPinPadId;
  @JsonKey(name: 'Code', includeIfNull: false)
  final String? code;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad &&
            (identical(other.creditCardPinPadId, creditCardPinPadId) ||
                const DeepCollectionEquality()
                    .equals(other.creditCardPinPadId, creditCardPinPadId)) &&
            (identical(other.code, code) ||
                const DeepCollectionEquality().equals(other.code, code)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPadExtension
    on WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad {
  WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad
      copyWith(
          {int? creditCardPinPadId,
          String? code,
          String? description,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCreditCardSettingsCreditCardPinPadCreditCardPinPad(
        creditCardPinPadId: creditCardPinPadId ?? this.creditCardPinPadId,
        code: code ?? this.code,
        description: description ?? this.description,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCrewLocationCrewLocation {
  WebApiModulesSettingsCrewLocationCrewLocation({
    this.crewLocationId,
    this.crewId,
    this.locationId,
    this.location,
    this.isPrimary,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCrewLocationCrewLocation.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCrewLocationCrewLocationFromJson(json);

  @JsonKey(name: 'CrewLocationId', includeIfNull: false)
  final String? crewLocationId;
  @JsonKey(name: 'CrewId', includeIfNull: false)
  final String? crewId;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'Location', includeIfNull: false)
  final String? location;
  @JsonKey(name: 'IsPrimary', includeIfNull: false)
  final bool? isPrimary;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCrewLocationCrewLocationFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCrewLocationCrewLocationToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCrewLocationCrewLocationToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCrewLocationCrewLocation &&
            (identical(other.crewLocationId, crewLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.crewLocationId, crewLocationId)) &&
            (identical(other.crewId, crewId) ||
                const DeepCollectionEquality().equals(other.crewId, crewId)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.location, location) ||
                const DeepCollectionEquality()
                    .equals(other.location, location)) &&
            (identical(other.isPrimary, isPrimary) ||
                const DeepCollectionEquality()
                    .equals(other.isPrimary, isPrimary)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCrewLocationCrewLocationExtension
    on WebApiModulesSettingsCrewLocationCrewLocation {
  WebApiModulesSettingsCrewLocationCrewLocation copyWith(
      {String? crewLocationId,
      String? crewId,
      String? locationId,
      String? location,
      bool? isPrimary,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCrewLocationCrewLocation(
        crewLocationId: crewLocationId ?? this.crewLocationId,
        crewId: crewId ?? this.crewId,
        locationId: locationId ?? this.locationId,
        location: location ?? this.location,
        isPrimary: isPrimary ?? this.isPrimary,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCrewPositionCrewPosition {
  WebApiModulesSettingsCrewPositionCrewPosition({
    this.crewPositionId,
    this.crewId,
    this.rateId,
    this.laborTypeId,
    this.laborType,
    this.description,
    this.costHourly,
    this.costDaily,
    this.costWeekly,
    this.costMonthly,
    this.isPrimary,
    this.effectiveDate,
    this.endDate,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCrewPositionCrewPosition.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCrewPositionCrewPositionFromJson(json);

  @JsonKey(name: 'CrewPositionId', includeIfNull: false)
  final String? crewPositionId;
  @JsonKey(name: 'CrewId', includeIfNull: false)
  final String? crewId;
  @JsonKey(name: 'RateId', includeIfNull: false)
  final String? rateId;
  @JsonKey(name: 'LaborTypeId', includeIfNull: false)
  final String? laborTypeId;
  @JsonKey(name: 'LaborType', includeIfNull: false)
  final String? laborType;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'CostHourly', includeIfNull: false)
  final double? costHourly;
  @JsonKey(name: 'CostDaily', includeIfNull: false)
  final double? costDaily;
  @JsonKey(name: 'CostWeekly', includeIfNull: false)
  final double? costWeekly;
  @JsonKey(name: 'CostMonthly', includeIfNull: false)
  final double? costMonthly;
  @JsonKey(name: 'IsPrimary', includeIfNull: false)
  final bool? isPrimary;
  @JsonKey(name: 'EffectiveDate', includeIfNull: false)
  final String? effectiveDate;
  @JsonKey(name: 'EndDate', includeIfNull: false)
  final String? endDate;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCrewPositionCrewPositionFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCrewPositionCrewPositionToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCrewPositionCrewPositionToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCrewPositionCrewPosition &&
            (identical(other.crewPositionId, crewPositionId) ||
                const DeepCollectionEquality()
                    .equals(other.crewPositionId, crewPositionId)) &&
            (identical(other.crewId, crewId) ||
                const DeepCollectionEquality().equals(other.crewId, crewId)) &&
            (identical(other.rateId, rateId) ||
                const DeepCollectionEquality().equals(other.rateId, rateId)) &&
            (identical(other.laborTypeId, laborTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.laborTypeId, laborTypeId)) &&
            (identical(other.laborType, laborType) ||
                const DeepCollectionEquality()
                    .equals(other.laborType, laborType)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.costHourly, costHourly) ||
                const DeepCollectionEquality()
                    .equals(other.costHourly, costHourly)) &&
            (identical(other.costDaily, costDaily) ||
                const DeepCollectionEquality()
                    .equals(other.costDaily, costDaily)) &&
            (identical(other.costWeekly, costWeekly) ||
                const DeepCollectionEquality()
                    .equals(other.costWeekly, costWeekly)) &&
            (identical(other.costMonthly, costMonthly) ||
                const DeepCollectionEquality()
                    .equals(other.costMonthly, costMonthly)) &&
            (identical(other.isPrimary, isPrimary) ||
                const DeepCollectionEquality()
                    .equals(other.isPrimary, isPrimary)) &&
            (identical(other.effectiveDate, effectiveDate) ||
                const DeepCollectionEquality()
                    .equals(other.effectiveDate, effectiveDate)) &&
            (identical(other.endDate, endDate) ||
                const DeepCollectionEquality()
                    .equals(other.endDate, endDate)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCrewPositionCrewPositionExtension
    on WebApiModulesSettingsCrewPositionCrewPosition {
  WebApiModulesSettingsCrewPositionCrewPosition copyWith(
      {String? crewPositionId,
      String? crewId,
      String? rateId,
      String? laborTypeId,
      String? laborType,
      String? description,
      double? costHourly,
      double? costDaily,
      double? costWeekly,
      double? costMonthly,
      bool? isPrimary,
      String? effectiveDate,
      String? endDate,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCrewPositionCrewPosition(
        crewPositionId: crewPositionId ?? this.crewPositionId,
        crewId: crewId ?? this.crewId,
        rateId: rateId ?? this.rateId,
        laborTypeId: laborTypeId ?? this.laborTypeId,
        laborType: laborType ?? this.laborType,
        description: description ?? this.description,
        costHourly: costHourly ?? this.costHourly,
        costDaily: costDaily ?? this.costDaily,
        costWeekly: costWeekly ?? this.costWeekly,
        costMonthly: costMonthly ?? this.costMonthly,
        isPrimary: isPrimary ?? this.isPrimary,
        effectiveDate: effectiveDate ?? this.effectiveDate,
        endDate: endDate ?? this.endDate,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate {
  WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate({
    this.currencyExchangeRateId,
    this.asOfDate,
    this.fromCurrencyId,
    this.importDate,
    this.exchangeRate,
    this.toCurrencyId,
    this.fromCurrencyCode,
    this.fromCurrency,
    this.fromCurrencySymbol,
    this.toCurrencyCode,
    this.toCurrency,
    this.toCurrencySymbol,
    this.inactive,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateFromJson(
          json);

  @JsonKey(name: 'CurrencyExchangeRateId', includeIfNull: false)
  final String? currencyExchangeRateId;
  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final String? asOfDate;
  @JsonKey(name: 'FromCurrencyId', includeIfNull: false)
  final String? fromCurrencyId;
  @JsonKey(name: 'ImportDate', includeIfNull: false)
  final String? importDate;
  @JsonKey(name: 'ExchangeRate', includeIfNull: false)
  final double? exchangeRate;
  @JsonKey(name: 'ToCurrencyId', includeIfNull: false)
  final String? toCurrencyId;
  @JsonKey(name: 'FromCurrencyCode', includeIfNull: false)
  final String? fromCurrencyCode;
  @JsonKey(name: 'FromCurrency', includeIfNull: false)
  final String? fromCurrency;
  @JsonKey(name: 'FromCurrencySymbol', includeIfNull: false)
  final String? fromCurrencySymbol;
  @JsonKey(name: 'ToCurrencyCode', includeIfNull: false)
  final String? toCurrencyCode;
  @JsonKey(name: 'ToCurrency', includeIfNull: false)
  final String? toCurrency;
  @JsonKey(name: 'ToCurrencySymbol', includeIfNull: false)
  final String? toCurrencySymbol;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate &&
            (identical(other.currencyExchangeRateId, currencyExchangeRateId) ||
                const DeepCollectionEquality().equals(
                    other.currencyExchangeRateId, currencyExchangeRateId)) &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.fromCurrencyId, fromCurrencyId) ||
                const DeepCollectionEquality()
                    .equals(other.fromCurrencyId, fromCurrencyId)) &&
            (identical(other.importDate, importDate) ||
                const DeepCollectionEquality()
                    .equals(other.importDate, importDate)) &&
            (identical(other.exchangeRate, exchangeRate) ||
                const DeepCollectionEquality()
                    .equals(other.exchangeRate, exchangeRate)) &&
            (identical(other.toCurrencyId, toCurrencyId) ||
                const DeepCollectionEquality()
                    .equals(other.toCurrencyId, toCurrencyId)) &&
            (identical(other.fromCurrencyCode, fromCurrencyCode) ||
                const DeepCollectionEquality()
                    .equals(other.fromCurrencyCode, fromCurrencyCode)) &&
            (identical(other.fromCurrency, fromCurrency) ||
                const DeepCollectionEquality()
                    .equals(other.fromCurrency, fromCurrency)) &&
            (identical(other.fromCurrencySymbol, fromCurrencySymbol) ||
                const DeepCollectionEquality()
                    .equals(other.fromCurrencySymbol, fromCurrencySymbol)) &&
            (identical(other.toCurrencyCode, toCurrencyCode) ||
                const DeepCollectionEquality()
                    .equals(other.toCurrencyCode, toCurrencyCode)) &&
            (identical(other.toCurrency, toCurrency) ||
                const DeepCollectionEquality()
                    .equals(other.toCurrency, toCurrency)) &&
            (identical(other.toCurrencySymbol, toCurrencySymbol) ||
                const DeepCollectionEquality()
                    .equals(other.toCurrencySymbol, toCurrencySymbol)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRateExtension
    on WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate {
  WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate copyWith(
      {String? currencyExchangeRateId,
      String? asOfDate,
      String? fromCurrencyId,
      String? importDate,
      double? exchangeRate,
      String? toCurrencyId,
      String? fromCurrencyCode,
      String? fromCurrency,
      String? fromCurrencySymbol,
      String? toCurrencyCode,
      String? toCurrency,
      String? toCurrencySymbol,
      bool? inactive,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCurrencyExchangeRateCurrencyExchangeRate(
        currencyExchangeRateId:
            currencyExchangeRateId ?? this.currencyExchangeRateId,
        asOfDate: asOfDate ?? this.asOfDate,
        fromCurrencyId: fromCurrencyId ?? this.fromCurrencyId,
        importDate: importDate ?? this.importDate,
        exchangeRate: exchangeRate ?? this.exchangeRate,
        toCurrencyId: toCurrencyId ?? this.toCurrencyId,
        fromCurrencyCode: fromCurrencyCode ?? this.fromCurrencyCode,
        fromCurrency: fromCurrency ?? this.fromCurrency,
        fromCurrencySymbol: fromCurrencySymbol ?? this.fromCurrencySymbol,
        toCurrencyCode: toCurrencyCode ?? this.toCurrencyCode,
        toCurrency: toCurrency ?? this.toCurrency,
        toCurrencySymbol: toCurrencySymbol ?? this.toCurrencySymbol,
        inactive: inactive ?? this.inactive,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCurrencySettingsCurrencyCurrency {
  WebApiModulesSettingsCurrencySettingsCurrencyCurrency({
    this.currencyId,
    this.currency,
    this.currencyCode,
    this.currencySymbol,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCurrencySettingsCurrencyCurrency.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCurrencySettingsCurrencyCurrencyFromJson(json);

  @JsonKey(name: 'CurrencyId', includeIfNull: false)
  final String? currencyId;
  @JsonKey(name: 'Currency', includeIfNull: false)
  final String? currency;
  @JsonKey(name: 'CurrencyCode', includeIfNull: false)
  final String? currencyCode;
  @JsonKey(name: 'CurrencySymbol', includeIfNull: false)
  final String? currencySymbol;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCurrencySettingsCurrencyCurrencyFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCurrencySettingsCurrencyCurrencyToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCurrencySettingsCurrencyCurrencyToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCurrencySettingsCurrencyCurrency &&
            (identical(other.currencyId, currencyId) ||
                const DeepCollectionEquality()
                    .equals(other.currencyId, currencyId)) &&
            (identical(other.currency, currency) ||
                const DeepCollectionEquality()
                    .equals(other.currency, currency)) &&
            (identical(other.currencyCode, currencyCode) ||
                const DeepCollectionEquality()
                    .equals(other.currencyCode, currencyCode)) &&
            (identical(other.currencySymbol, currencySymbol) ||
                const DeepCollectionEquality()
                    .equals(other.currencySymbol, currencySymbol)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCurrencySettingsCurrencyCurrencyExtension
    on WebApiModulesSettingsCurrencySettingsCurrencyCurrency {
  WebApiModulesSettingsCurrencySettingsCurrencyCurrency copyWith(
      {String? currencyId,
      String? currency,
      String? currencyCode,
      String? currencySymbol,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCurrencySettingsCurrencyCurrency(
        currencyId: currencyId ?? this.currencyId,
        currency: currency ?? this.currency,
        currencyCode: currencyCode ?? this.currencyCode,
        currencySymbol: currencySymbol ?? this.currencySymbol,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus {
  WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus({
    this.creditStatusId,
    this.creditStatus,
    this.createContractAllowed,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusFromJson(
          json);

  @JsonKey(name: 'CreditStatusId', includeIfNull: false)
  final String? creditStatusId;
  @JsonKey(name: 'CreditStatus', includeIfNull: false)
  final String? creditStatus;
  @JsonKey(name: 'CreateContractAllowed', includeIfNull: false)
  final bool? createContractAllowed;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus &&
            (identical(other.creditStatusId, creditStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.creditStatusId, creditStatusId)) &&
            (identical(other.creditStatus, creditStatus) ||
                const DeepCollectionEquality()
                    .equals(other.creditStatus, creditStatus)) &&
            (identical(other.createContractAllowed, createContractAllowed) ||
                const DeepCollectionEquality().equals(
                    other.createContractAllowed, createContractAllowed)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatusExtension
    on WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus {
  WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus copyWith(
      {String? creditStatusId,
      String? creditStatus,
      bool? createContractAllowed,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCustomerSettingsCreditStatusCreditStatus(
        creditStatusId: creditStatusId ?? this.creditStatusId,
        creditStatus: creditStatus ?? this.creditStatus,
        createContractAllowed:
            createContractAllowed ?? this.createContractAllowed,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory {
  WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory({
    this.customerCategoryId,
    this.customerCategory,
    this.dateStamp,
    this.inactive,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryFromJson(
          json);

  @JsonKey(name: 'CustomerCategoryId', includeIfNull: false)
  final String? customerCategoryId;
  @JsonKey(name: 'CustomerCategory', includeIfNull: false)
  final String? customerCategory;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory &&
            (identical(other.customerCategoryId, customerCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.customerCategoryId, customerCategoryId)) &&
            (identical(other.customerCategory, customerCategory) ||
                const DeepCollectionEquality()
                    .equals(other.customerCategory, customerCategory)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategoryExtension
    on WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory {
  WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory
      copyWith(
          {String? customerCategoryId,
          String? customerCategory,
          String? dateStamp,
          bool? inactive,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCustomerSettingsCustomerCategoryCustomerCategory(
        customerCategoryId: customerCategoryId ?? this.customerCategoryId,
        customerCategory: customerCategory ?? this.customerCategory,
        dateStamp: dateStamp ?? this.dateStamp,
        inactive: inactive ?? this.inactive,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus {
  WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus({
    this.customerStatusId,
    this.customerStatus,
    this.statusType,
    this.creditStatusId,
    this.creditStatus,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusFromJson(
          json);

  @JsonKey(name: 'CustomerStatusId', includeIfNull: false)
  final String? customerStatusId;
  @JsonKey(name: 'CustomerStatus', includeIfNull: false)
  final String? customerStatus;
  @JsonKey(name: 'StatusType', includeIfNull: false)
  final String? statusType;
  @JsonKey(name: 'CreditStatusId', includeIfNull: false)
  final String? creditStatusId;
  @JsonKey(name: 'CreditStatus', includeIfNull: false)
  final String? creditStatus;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus &&
            (identical(other.customerStatusId, customerStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.customerStatusId, customerStatusId)) &&
            (identical(other.customerStatus, customerStatus) ||
                const DeepCollectionEquality()
                    .equals(other.customerStatus, customerStatus)) &&
            (identical(other.statusType, statusType) ||
                const DeepCollectionEquality()
                    .equals(other.statusType, statusType)) &&
            (identical(other.creditStatusId, creditStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.creditStatusId, creditStatusId)) &&
            (identical(other.creditStatus, creditStatus) ||
                const DeepCollectionEquality()
                    .equals(other.creditStatus, creditStatus)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatusExtension
    on WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus {
  WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus copyWith(
      {String? customerStatusId,
      String? customerStatus,
      String? statusType,
      String? creditStatusId,
      String? creditStatus,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCustomerSettingsCustomerStatusCustomerStatus(
        customerStatusId: customerStatusId ?? this.customerStatusId,
        customerStatus: customerStatus ?? this.customerStatus,
        statusType: statusType ?? this.statusType,
        creditStatusId: creditStatusId ?? this.creditStatusId,
        creditStatus: creditStatus ?? this.creditStatus,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType {
  WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType({
    this.customerTypeId,
    this.customerType,
    this.color,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeFromJson(
          json);

  @JsonKey(name: 'CustomerTypeId', includeIfNull: false)
  final String? customerTypeId;
  @JsonKey(name: 'CustomerType', includeIfNull: false)
  final String? customerType;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType &&
            (identical(other.customerTypeId, customerTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.customerTypeId, customerTypeId)) &&
            (identical(other.customerType, customerType) ||
                const DeepCollectionEquality()
                    .equals(other.customerType, customerType)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerTypeExtension
    on WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType {
  WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType copyWith(
      {String? customerTypeId,
      String? customerType,
      String? color,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCustomerSettingsCustomerTypeCustomerType(
        customerTypeId: customerTypeId ?? this.customerTypeId,
        customerType: customerType ?? this.customerType,
        color: color ?? this.color,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDealSettingsDealClassificationDealClassification {
  WebApiModulesSettingsDealSettingsDealClassificationDealClassification({
    this.dealClassificationId,
    this.dealClassification,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDealSettingsDealClassificationDealClassification.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDealSettingsDealClassificationDealClassificationFromJson(
          json);

  @JsonKey(name: 'DealClassificationId', includeIfNull: false)
  final String? dealClassificationId;
  @JsonKey(name: 'DealClassification', includeIfNull: false)
  final String? dealClassification;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDealSettingsDealClassificationDealClassificationFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDealSettingsDealClassificationDealClassificationToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDealSettingsDealClassificationDealClassificationToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDealSettingsDealClassificationDealClassification &&
            (identical(other.dealClassificationId, dealClassificationId) ||
                const DeepCollectionEquality().equals(
                    other.dealClassificationId, dealClassificationId)) &&
            (identical(other.dealClassification, dealClassification) ||
                const DeepCollectionEquality()
                    .equals(other.dealClassification, dealClassification)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDealSettingsDealClassificationDealClassificationExtension
    on WebApiModulesSettingsDealSettingsDealClassificationDealClassification {
  WebApiModulesSettingsDealSettingsDealClassificationDealClassification
      copyWith(
          {String? dealClassificationId,
          String? dealClassification,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDealSettingsDealClassificationDealClassification(
        dealClassificationId: dealClassificationId ?? this.dealClassificationId,
        dealClassification: dealClassification ?? this.dealClassification,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDealSettingsDealStatusDealStatus {
  WebApiModulesSettingsDealSettingsDealStatusDealStatus({
    this.dealStatusId,
    this.dealStatus,
    this.statusType,
    this.creditStatusId,
    this.creditStatus,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDealSettingsDealStatusDealStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDealSettingsDealStatusDealStatusFromJson(json);

  @JsonKey(name: 'DealStatusId', includeIfNull: false)
  final String? dealStatusId;
  @JsonKey(name: 'DealStatus', includeIfNull: false)
  final String? dealStatus;
  @JsonKey(name: 'StatusType', includeIfNull: false)
  final String? statusType;
  @JsonKey(name: 'CreditStatusId', includeIfNull: false)
  final String? creditStatusId;
  @JsonKey(name: 'CreditStatus', includeIfNull: false)
  final String? creditStatus;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDealSettingsDealStatusDealStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDealSettingsDealStatusDealStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDealSettingsDealStatusDealStatusToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDealSettingsDealStatusDealStatus &&
            (identical(other.dealStatusId, dealStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.dealStatusId, dealStatusId)) &&
            (identical(other.dealStatus, dealStatus) ||
                const DeepCollectionEquality()
                    .equals(other.dealStatus, dealStatus)) &&
            (identical(other.statusType, statusType) ||
                const DeepCollectionEquality()
                    .equals(other.statusType, statusType)) &&
            (identical(other.creditStatusId, creditStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.creditStatusId, creditStatusId)) &&
            (identical(other.creditStatus, creditStatus) ||
                const DeepCollectionEquality()
                    .equals(other.creditStatus, creditStatus)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDealSettingsDealStatusDealStatusExtension
    on WebApiModulesSettingsDealSettingsDealStatusDealStatus {
  WebApiModulesSettingsDealSettingsDealStatusDealStatus copyWith(
      {String? dealStatusId,
      String? dealStatus,
      String? statusType,
      String? creditStatusId,
      String? creditStatus,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDealSettingsDealStatusDealStatus(
        dealStatusId: dealStatusId ?? this.dealStatusId,
        dealStatus: dealStatus ?? this.dealStatus,
        statusType: statusType ?? this.statusType,
        creditStatusId: creditStatusId ?? this.creditStatusId,
        creditStatus: creditStatus ?? this.creditStatus,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDealSettingsDealTypeDealType {
  WebApiModulesSettingsDealSettingsDealTypeDealType({
    this.dealTypeId,
    this.dealType,
    this.color,
    this.whiteText,
    this.glPrefix,
    this.glSuffix,
    this.theatricalProduction,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDealSettingsDealTypeDealType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDealSettingsDealTypeDealTypeFromJson(json);

  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealType', includeIfNull: false)
  final String? dealType;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'WhiteText', includeIfNull: false)
  final bool? whiteText;
  @JsonKey(name: 'GlPrefix', includeIfNull: false)
  final String? glPrefix;
  @JsonKey(name: 'GlSuffix', includeIfNull: false)
  final String? glSuffix;
  @JsonKey(name: 'TheatricalProduction', includeIfNull: false)
  final bool? theatricalProduction;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDealSettingsDealTypeDealTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDealSettingsDealTypeDealTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDealSettingsDealTypeDealTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDealSettingsDealTypeDealType &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealType, dealType) ||
                const DeepCollectionEquality()
                    .equals(other.dealType, dealType)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.whiteText, whiteText) ||
                const DeepCollectionEquality()
                    .equals(other.whiteText, whiteText)) &&
            (identical(other.glPrefix, glPrefix) ||
                const DeepCollectionEquality()
                    .equals(other.glPrefix, glPrefix)) &&
            (identical(other.glSuffix, glSuffix) ||
                const DeepCollectionEquality()
                    .equals(other.glSuffix, glSuffix)) &&
            (identical(other.theatricalProduction, theatricalProduction) ||
                const DeepCollectionEquality().equals(
                    other.theatricalProduction, theatricalProduction)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDealSettingsDealTypeDealTypeExtension
    on WebApiModulesSettingsDealSettingsDealTypeDealType {
  WebApiModulesSettingsDealSettingsDealTypeDealType copyWith(
      {String? dealTypeId,
      String? dealType,
      String? color,
      bool? whiteText,
      String? glPrefix,
      String? glSuffix,
      bool? theatricalProduction,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDealSettingsDealTypeDealType(
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealType: dealType ?? this.dealType,
        color: color ?? this.color,
        whiteText: whiteText ?? this.whiteText,
        glPrefix: glPrefix ?? this.glPrefix,
        glSuffix: glSuffix ?? this.glSuffix,
        theatricalProduction: theatricalProduction ?? this.theatricalProduction,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDealSettingsProductionTypeProductionType {
  WebApiModulesSettingsDealSettingsProductionTypeProductionType({
    this.productionTypeId,
    this.productionType,
    this.productionTypeCode,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDealSettingsProductionTypeProductionType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDealSettingsProductionTypeProductionTypeFromJson(
          json);

  @JsonKey(name: 'ProductionTypeId', includeIfNull: false)
  final String? productionTypeId;
  @JsonKey(name: 'ProductionType', includeIfNull: false)
  final String? productionType;
  @JsonKey(name: 'ProductionTypeCode', includeIfNull: false)
  final String? productionTypeCode;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDealSettingsProductionTypeProductionTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDealSettingsProductionTypeProductionTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDealSettingsProductionTypeProductionTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDealSettingsProductionTypeProductionType &&
            (identical(other.productionTypeId, productionTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.productionTypeId, productionTypeId)) &&
            (identical(other.productionType, productionType) ||
                const DeepCollectionEquality()
                    .equals(other.productionType, productionType)) &&
            (identical(other.productionTypeCode, productionTypeCode) ||
                const DeepCollectionEquality()
                    .equals(other.productionTypeCode, productionTypeCode)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDealSettingsProductionTypeProductionTypeExtension
    on WebApiModulesSettingsDealSettingsProductionTypeProductionType {
  WebApiModulesSettingsDealSettingsProductionTypeProductionType copyWith(
      {String? productionTypeId,
      String? productionType,
      String? productionTypeCode,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDealSettingsProductionTypeProductionType(
        productionTypeId: productionTypeId ?? this.productionTypeId,
        productionType: productionType ?? this.productionType,
        productionTypeCode: productionTypeCode ?? this.productionTypeCode,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDealSettingsScheduleTypeScheduleType {
  WebApiModulesSettingsDealSettingsScheduleTypeScheduleType({
    this.scheduleTypeId,
    this.scheduleType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDealSettingsScheduleTypeScheduleType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeFromJson(json);

  @JsonKey(name: 'ScheduleTypeId', includeIfNull: false)
  final String? scheduleTypeId;
  @JsonKey(name: 'ScheduleType', includeIfNull: false)
  final String? scheduleType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDealSettingsScheduleTypeScheduleType &&
            (identical(other.scheduleTypeId, scheduleTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.scheduleTypeId, scheduleTypeId)) &&
            (identical(other.scheduleType, scheduleType) ||
                const DeepCollectionEquality()
                    .equals(other.scheduleType, scheduleType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDealSettingsScheduleTypeScheduleTypeExtension
    on WebApiModulesSettingsDealSettingsScheduleTypeScheduleType {
  WebApiModulesSettingsDealSettingsScheduleTypeScheduleType copyWith(
      {String? scheduleTypeId,
      String? scheduleType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDealSettingsScheduleTypeScheduleType(
        scheduleTypeId: scheduleTypeId ?? this.scheduleTypeId,
        scheduleType: scheduleType ?? this.scheduleType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType {
  WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType({
    this.id,
    this.departmentId,
    this.inventoryTypeId,
    this.inventoryType,
    this.isInventory,
    this.isRate,
    this.isFacilities,
    this.orderBy,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeFromJson(
          json);

  @JsonKey(name: 'Id', includeIfNull: false)
  final int? id;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'IsInventory', includeIfNull: false)
  final bool? isInventory;
  @JsonKey(name: 'IsRate', includeIfNull: false)
  final bool? isRate;
  @JsonKey(name: 'IsFacilities', includeIfNull: false)
  final bool? isFacilities;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final int? orderBy;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.isInventory, isInventory) ||
                const DeepCollectionEquality()
                    .equals(other.isInventory, isInventory)) &&
            (identical(other.isRate, isRate) ||
                const DeepCollectionEquality().equals(other.isRate, isRate)) &&
            (identical(other.isFacilities, isFacilities) ||
                const DeepCollectionEquality()
                    .equals(other.isFacilities, isFacilities)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryTypeExtension
    on WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType {
  WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType copyWith(
      {int? id,
      String? departmentId,
      String? inventoryTypeId,
      String? inventoryType,
      bool? isInventory,
      bool? isRate,
      bool? isFacilities,
      int? orderBy,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDepartmentInventoryTypeDepartmentInventoryType(
        id: id ?? this.id,
        departmentId: departmentId ?? this.departmentId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        isInventory: isInventory ?? this.isInventory,
        isRate: isRate ?? this.isRate,
        isFacilities: isFacilities ?? this.isFacilities,
        orderBy: orderBy ?? this.orderBy,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDepartmentLocationDepartmentLocation {
  WebApiModulesSettingsDepartmentLocationDepartmentLocation({
    this.departmentId,
    this.locationId,
    this.department,
    this.location,
    this.defaultOrderTypeId,
    this.defaultOrderType,
    this.inactive,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDepartmentLocationDepartmentLocation.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDepartmentLocationDepartmentLocationFromJson(json);

  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'Department', includeIfNull: false)
  final String? department;
  @JsonKey(name: 'Location', includeIfNull: false)
  final String? location;
  @JsonKey(name: 'DefaultOrderTypeId', includeIfNull: false)
  final String? defaultOrderTypeId;
  @JsonKey(name: 'DefaultOrderType', includeIfNull: false)
  final String? defaultOrderType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDepartmentLocationDepartmentLocationFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDepartmentLocationDepartmentLocationToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDepartmentLocationDepartmentLocationToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDepartmentLocationDepartmentLocation &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.department, department) ||
                const DeepCollectionEquality()
                    .equals(other.department, department)) &&
            (identical(other.location, location) ||
                const DeepCollectionEquality()
                    .equals(other.location, location)) &&
            (identical(other.defaultOrderTypeId, defaultOrderTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.defaultOrderTypeId, defaultOrderTypeId)) &&
            (identical(other.defaultOrderType, defaultOrderType) ||
                const DeepCollectionEquality()
                    .equals(other.defaultOrderType, defaultOrderType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDepartmentLocationDepartmentLocationExtension
    on WebApiModulesSettingsDepartmentLocationDepartmentLocation {
  WebApiModulesSettingsDepartmentLocationDepartmentLocation copyWith(
      {String? departmentId,
      String? locationId,
      String? department,
      String? location,
      String? defaultOrderTypeId,
      String? defaultOrderType,
      bool? inactive,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDepartmentLocationDepartmentLocation(
        departmentId: departmentId ?? this.departmentId,
        locationId: locationId ?? this.locationId,
        department: department ?? this.department,
        location: location ?? this.location,
        defaultOrderTypeId: defaultOrderTypeId ?? this.defaultOrderTypeId,
        defaultOrderType: defaultOrderType ?? this.defaultOrderType,
        inactive: inactive ?? this.inactive,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDepartmentSettingsDepartmentDepartment {
  WebApiModulesSettingsDepartmentSettingsDepartmentDepartment({
    this.departmentId,
    this.department,
    this.departmentCode,
    this.divisionCode,
    this.defaultActivityRental,
    this.defaultActivitySales,
    this.defaultActivityLabor,
    this.defaultActivityMiscellaneous,
    this.defaultActivityFacilities,
    this.defaultActivityTransportation,
    this.defaultActivityRentalSale,
    this.disableEditingRentalRate,
    this.disableEditingSalesRate,
    this.disableEditingMiscellaneousRate,
    this.disableEditingLaborRate,
    this.disableEditingRentalSaleRate,
    this.disableEditingLossAndDamageRate,
    this.exportCode,
    this.salesBillingRule,
    this.lockLineItemsWhenCustomDiscountUsed,
    this.defaultDaysPerWeek,
    this.enableProjects,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDepartmentSettingsDepartmentDepartment.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDepartmentSettingsDepartmentDepartmentFromJson(
          json);

  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'Department', includeIfNull: false)
  final String? department;
  @JsonKey(name: 'DepartmentCode', includeIfNull: false)
  final String? departmentCode;
  @JsonKey(name: 'DivisionCode', includeIfNull: false)
  final String? divisionCode;
  @JsonKey(name: 'DefaultActivityRental', includeIfNull: false)
  final bool? defaultActivityRental;
  @JsonKey(name: 'DefaultActivitySales', includeIfNull: false)
  final bool? defaultActivitySales;
  @JsonKey(name: 'DefaultActivityLabor', includeIfNull: false)
  final bool? defaultActivityLabor;
  @JsonKey(name: 'DefaultActivityMiscellaneous', includeIfNull: false)
  final bool? defaultActivityMiscellaneous;
  @JsonKey(name: 'DefaultActivityFacilities', includeIfNull: false)
  final bool? defaultActivityFacilities;
  @JsonKey(name: 'DefaultActivityTransportation', includeIfNull: false)
  final bool? defaultActivityTransportation;
  @JsonKey(name: 'DefaultActivityRentalSale', includeIfNull: false)
  final bool? defaultActivityRentalSale;
  @JsonKey(name: 'DisableEditingRentalRate', includeIfNull: false)
  final bool? disableEditingRentalRate;
  @JsonKey(name: 'DisableEditingSalesRate', includeIfNull: false)
  final bool? disableEditingSalesRate;
  @JsonKey(name: 'DisableEditingMiscellaneousRate', includeIfNull: false)
  final bool? disableEditingMiscellaneousRate;
  @JsonKey(name: 'DisableEditingLaborRate', includeIfNull: false)
  final bool? disableEditingLaborRate;
  @JsonKey(name: 'DisableEditingRentalSaleRate', includeIfNull: false)
  final bool? disableEditingRentalSaleRate;
  @JsonKey(name: 'DisableEditingLossAndDamageRate', includeIfNull: false)
  final bool? disableEditingLossAndDamageRate;
  @JsonKey(name: 'ExportCode', includeIfNull: false)
  final String? exportCode;
  @JsonKey(name: 'SalesBillingRule', includeIfNull: false)
  final String? salesBillingRule;
  @JsonKey(name: 'LockLineItemsWhenCustomDiscountUsed', includeIfNull: false)
  final bool? lockLineItemsWhenCustomDiscountUsed;
  @JsonKey(name: 'DefaultDaysPerWeek', includeIfNull: false)
  final double? defaultDaysPerWeek;
  @JsonKey(name: 'EnableProjects', includeIfNull: false)
  final bool? enableProjects;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDepartmentSettingsDepartmentDepartmentFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDepartmentSettingsDepartmentDepartmentToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDepartmentSettingsDepartmentDepartmentToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDepartmentSettingsDepartmentDepartment &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.department, department) ||
                const DeepCollectionEquality()
                    .equals(other.department, department)) &&
            (identical(other.departmentCode, departmentCode) ||
                const DeepCollectionEquality()
                    .equals(other.departmentCode, departmentCode)) &&
            (identical(other.divisionCode, divisionCode) ||
                const DeepCollectionEquality()
                    .equals(other.divisionCode, divisionCode)) &&
            (identical(other.defaultActivityRental, defaultActivityRental) ||
                const DeepCollectionEquality().equals(
                    other.defaultActivityRental, defaultActivityRental)) &&
            (identical(other.defaultActivitySales, defaultActivitySales) ||
                const DeepCollectionEquality().equals(
                    other.defaultActivitySales, defaultActivitySales)) &&
            (identical(other.defaultActivityLabor, defaultActivityLabor) ||
                const DeepCollectionEquality().equals(
                    other.defaultActivityLabor, defaultActivityLabor)) &&
            (identical(other.defaultActivityMiscellaneous, defaultActivityMiscellaneous) ||
                const DeepCollectionEquality().equals(
                    other.defaultActivityMiscellaneous,
                    defaultActivityMiscellaneous)) &&
            (identical(other.defaultActivityFacilities, defaultActivityFacilities) ||
                const DeepCollectionEquality().equals(
                    other.defaultActivityFacilities,
                    defaultActivityFacilities)) &&
            (identical(other.defaultActivityTransportation, defaultActivityTransportation) ||
                const DeepCollectionEquality().equals(
                    other.defaultActivityTransportation,
                    defaultActivityTransportation)) &&
            (identical(other.defaultActivityRentalSale, defaultActivityRentalSale) ||
                const DeepCollectionEquality().equals(
                    other.defaultActivityRentalSale,
                    defaultActivityRentalSale)) &&
            (identical(other.disableEditingRentalRate, disableEditingRentalRate) ||
                const DeepCollectionEquality().equals(other.disableEditingRentalRate, disableEditingRentalRate)) &&
            (identical(other.disableEditingSalesRate, disableEditingSalesRate) || const DeepCollectionEquality().equals(other.disableEditingSalesRate, disableEditingSalesRate)) &&
            (identical(other.disableEditingMiscellaneousRate, disableEditingMiscellaneousRate) || const DeepCollectionEquality().equals(other.disableEditingMiscellaneousRate, disableEditingMiscellaneousRate)) &&
            (identical(other.disableEditingLaborRate, disableEditingLaborRate) || const DeepCollectionEquality().equals(other.disableEditingLaborRate, disableEditingLaborRate)) &&
            (identical(other.disableEditingRentalSaleRate, disableEditingRentalSaleRate) || const DeepCollectionEquality().equals(other.disableEditingRentalSaleRate, disableEditingRentalSaleRate)) &&
            (identical(other.disableEditingLossAndDamageRate, disableEditingLossAndDamageRate) || const DeepCollectionEquality().equals(other.disableEditingLossAndDamageRate, disableEditingLossAndDamageRate)) &&
            (identical(other.exportCode, exportCode) || const DeepCollectionEquality().equals(other.exportCode, exportCode)) &&
            (identical(other.salesBillingRule, salesBillingRule) || const DeepCollectionEquality().equals(other.salesBillingRule, salesBillingRule)) &&
            (identical(other.lockLineItemsWhenCustomDiscountUsed, lockLineItemsWhenCustomDiscountUsed) || const DeepCollectionEquality().equals(other.lockLineItemsWhenCustomDiscountUsed, lockLineItemsWhenCustomDiscountUsed)) &&
            (identical(other.defaultDaysPerWeek, defaultDaysPerWeek) || const DeepCollectionEquality().equals(other.defaultDaysPerWeek, defaultDaysPerWeek)) &&
            (identical(other.enableProjects, enableProjects) || const DeepCollectionEquality().equals(other.enableProjects, enableProjects)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDepartmentSettingsDepartmentDepartmentExtension
    on WebApiModulesSettingsDepartmentSettingsDepartmentDepartment {
  WebApiModulesSettingsDepartmentSettingsDepartmentDepartment copyWith(
      {String? departmentId,
      String? department,
      String? departmentCode,
      String? divisionCode,
      bool? defaultActivityRental,
      bool? defaultActivitySales,
      bool? defaultActivityLabor,
      bool? defaultActivityMiscellaneous,
      bool? defaultActivityFacilities,
      bool? defaultActivityTransportation,
      bool? defaultActivityRentalSale,
      bool? disableEditingRentalRate,
      bool? disableEditingSalesRate,
      bool? disableEditingMiscellaneousRate,
      bool? disableEditingLaborRate,
      bool? disableEditingRentalSaleRate,
      bool? disableEditingLossAndDamageRate,
      String? exportCode,
      String? salesBillingRule,
      bool? lockLineItemsWhenCustomDiscountUsed,
      double? defaultDaysPerWeek,
      bool? enableProjects,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDepartmentSettingsDepartmentDepartment(
        departmentId: departmentId ?? this.departmentId,
        department: department ?? this.department,
        departmentCode: departmentCode ?? this.departmentCode,
        divisionCode: divisionCode ?? this.divisionCode,
        defaultActivityRental:
            defaultActivityRental ?? this.defaultActivityRental,
        defaultActivitySales: defaultActivitySales ?? this.defaultActivitySales,
        defaultActivityLabor: defaultActivityLabor ?? this.defaultActivityLabor,
        defaultActivityMiscellaneous:
            defaultActivityMiscellaneous ?? this.defaultActivityMiscellaneous,
        defaultActivityFacilities:
            defaultActivityFacilities ?? this.defaultActivityFacilities,
        defaultActivityTransportation:
            defaultActivityTransportation ?? this.defaultActivityTransportation,
        defaultActivityRentalSale:
            defaultActivityRentalSale ?? this.defaultActivityRentalSale,
        disableEditingRentalRate:
            disableEditingRentalRate ?? this.disableEditingRentalRate,
        disableEditingSalesRate:
            disableEditingSalesRate ?? this.disableEditingSalesRate,
        disableEditingMiscellaneousRate: disableEditingMiscellaneousRate ??
            this.disableEditingMiscellaneousRate,
        disableEditingLaborRate:
            disableEditingLaborRate ?? this.disableEditingLaborRate,
        disableEditingRentalSaleRate:
            disableEditingRentalSaleRate ?? this.disableEditingRentalSaleRate,
        disableEditingLossAndDamageRate: disableEditingLossAndDamageRate ??
            this.disableEditingLossAndDamageRate,
        exportCode: exportCode ?? this.exportCode,
        salesBillingRule: salesBillingRule ?? this.salesBillingRule,
        lockLineItemsWhenCustomDiscountUsed:
            lockLineItemsWhenCustomDiscountUsed ??
                this.lockLineItemsWhenCustomDiscountUsed,
        defaultDaysPerWeek: defaultDaysPerWeek ?? this.defaultDaysPerWeek,
        enableProjects: enableProjects ?? this.enableProjects,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDiscountItemDiscountItem {
  WebApiModulesSettingsDiscountItemDiscountItem({
    this.discountItemId,
    this.discountPercent,
    this.daysPerWeek,
    this.marginPercent,
    this.markupPercent,
    this.dailyRate,
    this.weeklyRate,
    this.week2Rate,
    this.week3Rate,
    this.week4Rate,
    this.week5Rate,
    this.monthlyRate,
    this.orderTypeId,
    this.orderType,
    this.orderTypeOrderBy,
    this.inventoryTypeId,
    this.inventoryType,
    this.inventoryTypeOrderBy,
    this.categoryId,
    this.category,
    this.categoryOrderBy,
    this.subCategoryId,
    this.subCategory,
    this.subCategoryOrderBy,
    this.inventoryId,
    this.iCode,
    this.description,
    this.recType,
    this.classification,
    this.warehouseDailyRate,
    this.warehouseWeeklyRate,
    this.warehouseDefaultDailyRate,
    this.warehouseDefaultWeeklyRate,
    this.discountTemplateId,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDiscountItemDiscountItem.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDiscountItemDiscountItemFromJson(json);

  @JsonKey(name: 'DiscountItemId', includeIfNull: false)
  final String? discountItemId;
  @JsonKey(name: 'DiscountPercent', includeIfNull: false)
  final double? discountPercent;
  @JsonKey(name: 'DaysPerWeek', includeIfNull: false)
  final double? daysPerWeek;
  @JsonKey(name: 'MarginPercent', includeIfNull: false)
  final double? marginPercent;
  @JsonKey(name: 'MarkupPercent', includeIfNull: false)
  final double? markupPercent;
  @JsonKey(name: 'DailyRate', includeIfNull: false)
  final double? dailyRate;
  @JsonKey(name: 'WeeklyRate', includeIfNull: false)
  final double? weeklyRate;
  @JsonKey(name: 'Week2Rate', includeIfNull: false)
  final double? week2Rate;
  @JsonKey(name: 'Week3Rate', includeIfNull: false)
  final double? week3Rate;
  @JsonKey(name: 'Week4Rate', includeIfNull: false)
  final double? week4Rate;
  @JsonKey(name: 'Week5Rate', includeIfNull: false)
  final double? week5Rate;
  @JsonKey(name: 'MonthlyRate', includeIfNull: false)
  final double? monthlyRate;
  @JsonKey(name: 'OrderTypeId', includeIfNull: false)
  final String? orderTypeId;
  @JsonKey(name: 'OrderType', includeIfNull: false)
  final String? orderType;
  @JsonKey(name: 'OrderTypeOrderBy', includeIfNull: false)
  final double? orderTypeOrderBy;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'InventoryTypeOrderBy', includeIfNull: false)
  final int? inventoryTypeOrderBy;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'CategoryOrderBy', includeIfNull: false)
  final double? categoryOrderBy;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'SubCategory', includeIfNull: false)
  final String? subCategory;
  @JsonKey(name: 'SubCategoryOrderBy', includeIfNull: false)
  final double? subCategoryOrderBy;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'RecType', includeIfNull: false)
  final String? recType;
  @JsonKey(name: 'Classification', includeIfNull: false)
  final String? classification;
  @JsonKey(name: 'WarehouseDailyRate', includeIfNull: false)
  final double? warehouseDailyRate;
  @JsonKey(name: 'WarehouseWeeklyRate', includeIfNull: false)
  final double? warehouseWeeklyRate;
  @JsonKey(name: 'WarehouseDefaultDailyRate', includeIfNull: false)
  final double? warehouseDefaultDailyRate;
  @JsonKey(name: 'WarehouseDefaultWeeklyRate', includeIfNull: false)
  final double? warehouseDefaultWeeklyRate;
  @JsonKey(name: 'DiscountTemplateId', includeIfNull: false)
  final String? discountTemplateId;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDiscountItemDiscountItemFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDiscountItemDiscountItemToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDiscountItemDiscountItemToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDiscountItemDiscountItem &&
            (identical(other.discountItemId, discountItemId) ||
                const DeepCollectionEquality()
                    .equals(other.discountItemId, discountItemId)) &&
            (identical(other.discountPercent, discountPercent) ||
                const DeepCollectionEquality()
                    .equals(other.discountPercent, discountPercent)) &&
            (identical(other.daysPerWeek, daysPerWeek) ||
                const DeepCollectionEquality()
                    .equals(other.daysPerWeek, daysPerWeek)) &&
            (identical(other.marginPercent, marginPercent) ||
                const DeepCollectionEquality()
                    .equals(other.marginPercent, marginPercent)) &&
            (identical(other.markupPercent, markupPercent) ||
                const DeepCollectionEquality()
                    .equals(other.markupPercent, markupPercent)) &&
            (identical(other.dailyRate, dailyRate) ||
                const DeepCollectionEquality()
                    .equals(other.dailyRate, dailyRate)) &&
            (identical(other.weeklyRate, weeklyRate) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyRate, weeklyRate)) &&
            (identical(other.week2Rate, week2Rate) ||
                const DeepCollectionEquality()
                    .equals(other.week2Rate, week2Rate)) &&
            (identical(other.week3Rate, week3Rate) ||
                const DeepCollectionEquality()
                    .equals(other.week3Rate, week3Rate)) &&
            (identical(other.week4Rate, week4Rate) ||
                const DeepCollectionEquality()
                    .equals(other.week4Rate, week4Rate)) &&
            (identical(other.week5Rate, week5Rate) ||
                const DeepCollectionEquality()
                    .equals(other.week5Rate, week5Rate)) &&
            (identical(other.monthlyRate, monthlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyRate, monthlyRate)) &&
            (identical(other.orderTypeId, orderTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeId, orderTypeId)) &&
            (identical(other.orderType, orderType) ||
                const DeepCollectionEquality()
                    .equals(other.orderType, orderType)) &&
            (identical(other.orderTypeOrderBy, orderTypeOrderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeOrderBy, orderTypeOrderBy)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.inventoryTypeOrderBy, inventoryTypeOrderBy) ||
                const DeepCollectionEquality().equals(
                    other.inventoryTypeOrderBy, inventoryTypeOrderBy)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) ||
                const DeepCollectionEquality()
                    .equals(other.category, category)) &&
            (identical(other.categoryOrderBy, categoryOrderBy) ||
                const DeepCollectionEquality()
                    .equals(other.categoryOrderBy, categoryOrderBy)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality().equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.subCategory, subCategory) || const DeepCollectionEquality().equals(other.subCategory, subCategory)) &&
            (identical(other.subCategoryOrderBy, subCategoryOrderBy) || const DeepCollectionEquality().equals(other.subCategoryOrderBy, subCategoryOrderBy)) &&
            (identical(other.inventoryId, inventoryId) || const DeepCollectionEquality().equals(other.inventoryId, inventoryId)) &&
            (identical(other.iCode, iCode) || const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) || const DeepCollectionEquality().equals(other.description, description)) &&
            (identical(other.recType, recType) || const DeepCollectionEquality().equals(other.recType, recType)) &&
            (identical(other.classification, classification) || const DeepCollectionEquality().equals(other.classification, classification)) &&
            (identical(other.warehouseDailyRate, warehouseDailyRate) || const DeepCollectionEquality().equals(other.warehouseDailyRate, warehouseDailyRate)) &&
            (identical(other.warehouseWeeklyRate, warehouseWeeklyRate) || const DeepCollectionEquality().equals(other.warehouseWeeklyRate, warehouseWeeklyRate)) &&
            (identical(other.warehouseDefaultDailyRate, warehouseDefaultDailyRate) || const DeepCollectionEquality().equals(other.warehouseDefaultDailyRate, warehouseDefaultDailyRate)) &&
            (identical(other.warehouseDefaultWeeklyRate, warehouseDefaultWeeklyRate) || const DeepCollectionEquality().equals(other.warehouseDefaultWeeklyRate, warehouseDefaultWeeklyRate)) &&
            (identical(other.discountTemplateId, discountTemplateId) || const DeepCollectionEquality().equals(other.discountTemplateId, discountTemplateId)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDiscountItemDiscountItemExtension
    on WebApiModulesSettingsDiscountItemDiscountItem {
  WebApiModulesSettingsDiscountItemDiscountItem copyWith(
      {String? discountItemId,
      double? discountPercent,
      double? daysPerWeek,
      double? marginPercent,
      double? markupPercent,
      double? dailyRate,
      double? weeklyRate,
      double? week2Rate,
      double? week3Rate,
      double? week4Rate,
      double? week5Rate,
      double? monthlyRate,
      String? orderTypeId,
      String? orderType,
      double? orderTypeOrderBy,
      String? inventoryTypeId,
      String? inventoryType,
      int? inventoryTypeOrderBy,
      String? categoryId,
      String? category,
      double? categoryOrderBy,
      String? subCategoryId,
      String? subCategory,
      double? subCategoryOrderBy,
      String? inventoryId,
      String? iCode,
      String? description,
      String? recType,
      String? classification,
      double? warehouseDailyRate,
      double? warehouseWeeklyRate,
      double? warehouseDefaultDailyRate,
      double? warehouseDefaultWeeklyRate,
      String? discountTemplateId,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDiscountItemDiscountItem(
        discountItemId: discountItemId ?? this.discountItemId,
        discountPercent: discountPercent ?? this.discountPercent,
        daysPerWeek: daysPerWeek ?? this.daysPerWeek,
        marginPercent: marginPercent ?? this.marginPercent,
        markupPercent: markupPercent ?? this.markupPercent,
        dailyRate: dailyRate ?? this.dailyRate,
        weeklyRate: weeklyRate ?? this.weeklyRate,
        week2Rate: week2Rate ?? this.week2Rate,
        week3Rate: week3Rate ?? this.week3Rate,
        week4Rate: week4Rate ?? this.week4Rate,
        week5Rate: week5Rate ?? this.week5Rate,
        monthlyRate: monthlyRate ?? this.monthlyRate,
        orderTypeId: orderTypeId ?? this.orderTypeId,
        orderType: orderType ?? this.orderType,
        orderTypeOrderBy: orderTypeOrderBy ?? this.orderTypeOrderBy,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        inventoryTypeOrderBy: inventoryTypeOrderBy ?? this.inventoryTypeOrderBy,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        categoryOrderBy: categoryOrderBy ?? this.categoryOrderBy,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        subCategory: subCategory ?? this.subCategory,
        subCategoryOrderBy: subCategoryOrderBy ?? this.subCategoryOrderBy,
        inventoryId: inventoryId ?? this.inventoryId,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        recType: recType ?? this.recType,
        classification: classification ?? this.classification,
        warehouseDailyRate: warehouseDailyRate ?? this.warehouseDailyRate,
        warehouseWeeklyRate: warehouseWeeklyRate ?? this.warehouseWeeklyRate,
        warehouseDefaultDailyRate:
            warehouseDefaultDailyRate ?? this.warehouseDefaultDailyRate,
        warehouseDefaultWeeklyRate:
            warehouseDefaultWeeklyRate ?? this.warehouseDefaultWeeklyRate,
        discountTemplateId: discountTemplateId ?? this.discountTemplateId,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequest {
  WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequest({
    this.discountTemplateId,
    this.warehouseId,
    this.recType,
  });

  factory WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequestFromJson(
          json);

  @JsonKey(name: 'DiscountTemplateId', includeIfNull: false)
  final String? discountTemplateId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'RecType', includeIfNull: false)
  final String? recType;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequest &&
            (identical(other.discountTemplateId, discountTemplateId) ||
                const DeepCollectionEquality()
                    .equals(other.discountTemplateId, discountTemplateId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.recType, recType) ||
                const DeepCollectionEquality().equals(other.recType, recType)));
  }
}

extension $WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequestExtension
    on WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequest {
  WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequest
      copyWith(
          {String? discountTemplateId, String? warehouseId, String? recType}) {
    return WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsRequest(
        discountTemplateId: discountTemplateId ?? this.discountTemplateId,
        warehouseId: warehouseId ?? this.warehouseId,
        recType: recType ?? this.recType);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponse {
  WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponse({
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponseFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }
}

extension $WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponseExtension
    on WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponse {
  WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponse
      copyWith({int? status, bool? success, String? msg}) {
    return WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateAddAllDiscountTemplateItemsResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate {
  WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate({
    this.discountTemplateId,
    this.discountTemplate,
    this.officeLocationId,
    this.officeLocation,
    this.isCompany,
    this.rental,
    this.sales,
    this.labor,
    this.misc,
    this.space,
    this.rentalDiscountPercent,
    this.rentalDaysPerWeek,
    this.salesDiscountPercent,
    this.spaceDiscountPercent,
    this.rentalAsOf,
    this.salesAsOf,
    this.laborAsOf,
    this.miscAsOf,
    this.spaceAsOf,
    this.spaceDaysPerWeek,
    this.companyId,
    this.applyDiscountToCustomRate,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateFromJson(
          json);

  @JsonKey(name: 'DiscountTemplateId', includeIfNull: false)
  final String? discountTemplateId;
  @JsonKey(name: 'DiscountTemplate', includeIfNull: false)
  final String? discountTemplate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'OfficeLocation', includeIfNull: false)
  final String? officeLocation;
  @JsonKey(name: 'IsCompany', includeIfNull: false)
  final bool? isCompany;
  @JsonKey(name: 'Rental', includeIfNull: false)
  final bool? rental;
  @JsonKey(name: 'Sales', includeIfNull: false)
  final bool? sales;
  @JsonKey(name: 'Labor', includeIfNull: false)
  final bool? labor;
  @JsonKey(name: 'Misc', includeIfNull: false)
  final bool? misc;
  @JsonKey(name: 'Space', includeIfNull: false)
  final bool? space;
  @JsonKey(name: 'RentalDiscountPercent', includeIfNull: false)
  final double? rentalDiscountPercent;
  @JsonKey(name: 'RentalDaysPerWeek', includeIfNull: false)
  final double? rentalDaysPerWeek;
  @JsonKey(name: 'SalesDiscountPercent', includeIfNull: false)
  final double? salesDiscountPercent;
  @JsonKey(name: 'SpaceDiscountPercent', includeIfNull: false)
  final double? spaceDiscountPercent;
  @JsonKey(name: 'RentalAsOf', includeIfNull: false)
  final String? rentalAsOf;
  @JsonKey(name: 'SalesAsOf', includeIfNull: false)
  final String? salesAsOf;
  @JsonKey(name: 'LaborAsOf', includeIfNull: false)
  final String? laborAsOf;
  @JsonKey(name: 'MiscAsOf', includeIfNull: false)
  final String? miscAsOf;
  @JsonKey(name: 'SpaceAsOf', includeIfNull: false)
  final String? spaceAsOf;
  @JsonKey(name: 'SpaceDaysPerWeek', includeIfNull: false)
  final double? spaceDaysPerWeek;
  @JsonKey(name: 'CompanyId', includeIfNull: false)
  final String? companyId;
  @JsonKey(name: 'ApplyDiscountToCustomRate', includeIfNull: false)
  final bool? applyDiscountToCustomRate;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate &&
            (identical(other.discountTemplateId, discountTemplateId) ||
                const DeepCollectionEquality()
                    .equals(other.discountTemplateId, discountTemplateId)) &&
            (identical(other.discountTemplate, discountTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.discountTemplate, discountTemplate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.officeLocation, officeLocation) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocation, officeLocation)) &&
            (identical(other.isCompany, isCompany) ||
                const DeepCollectionEquality()
                    .equals(other.isCompany, isCompany)) &&
            (identical(other.rental, rental) ||
                const DeepCollectionEquality().equals(other.rental, rental)) &&
            (identical(other.sales, sales) ||
                const DeepCollectionEquality().equals(other.sales, sales)) &&
            (identical(other.labor, labor) ||
                const DeepCollectionEquality().equals(other.labor, labor)) &&
            (identical(other.misc, misc) ||
                const DeepCollectionEquality().equals(other.misc, misc)) &&
            (identical(other.space, space) ||
                const DeepCollectionEquality().equals(other.space, space)) &&
            (identical(other.rentalDiscountPercent, rentalDiscountPercent) ||
                const DeepCollectionEquality().equals(
                    other.rentalDiscountPercent, rentalDiscountPercent)) &&
            (identical(other.rentalDaysPerWeek, rentalDaysPerWeek) ||
                const DeepCollectionEquality()
                    .equals(other.rentalDaysPerWeek, rentalDaysPerWeek)) &&
            (identical(other.salesDiscountPercent, salesDiscountPercent) ||
                const DeepCollectionEquality().equals(
                    other.salesDiscountPercent, salesDiscountPercent)) &&
            (identical(other.spaceDiscountPercent, spaceDiscountPercent) ||
                const DeepCollectionEquality().equals(
                    other.spaceDiscountPercent, spaceDiscountPercent)) &&
            (identical(other.rentalAsOf, rentalAsOf) ||
                const DeepCollectionEquality()
                    .equals(other.rentalAsOf, rentalAsOf)) &&
            (identical(other.salesAsOf, salesAsOf) ||
                const DeepCollectionEquality()
                    .equals(other.salesAsOf, salesAsOf)) &&
            (identical(other.laborAsOf, laborAsOf) ||
                const DeepCollectionEquality()
                    .equals(other.laborAsOf, laborAsOf)) &&
            (identical(other.miscAsOf, miscAsOf) ||
                const DeepCollectionEquality()
                    .equals(other.miscAsOf, miscAsOf)) &&
            (identical(other.spaceAsOf, spaceAsOf) || const DeepCollectionEquality().equals(other.spaceAsOf, spaceAsOf)) &&
            (identical(other.spaceDaysPerWeek, spaceDaysPerWeek) || const DeepCollectionEquality().equals(other.spaceDaysPerWeek, spaceDaysPerWeek)) &&
            (identical(other.companyId, companyId) || const DeepCollectionEquality().equals(other.companyId, companyId)) &&
            (identical(other.applyDiscountToCustomRate, applyDiscountToCustomRate) || const DeepCollectionEquality().equals(other.applyDiscountToCustomRate, applyDiscountToCustomRate)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplateExtension
    on WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate {
  WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate
      copyWith(
          {String? discountTemplateId,
          String? discountTemplate,
          String? officeLocationId,
          String? officeLocation,
          bool? isCompany,
          bool? rental,
          bool? sales,
          bool? labor,
          bool? misc,
          bool? space,
          double? rentalDiscountPercent,
          double? rentalDaysPerWeek,
          double? salesDiscountPercent,
          double? spaceDiscountPercent,
          String? rentalAsOf,
          String? salesAsOf,
          String? laborAsOf,
          String? miscAsOf,
          String? spaceAsOf,
          double? spaceDaysPerWeek,
          String? companyId,
          bool? applyDiscountToCustomRate,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDiscountTemplateSettingsDiscountTemplateDiscountTemplate(
        discountTemplateId: discountTemplateId ?? this.discountTemplateId,
        discountTemplate: discountTemplate ?? this.discountTemplate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        officeLocation: officeLocation ?? this.officeLocation,
        isCompany: isCompany ?? this.isCompany,
        rental: rental ?? this.rental,
        sales: sales ?? this.sales,
        labor: labor ?? this.labor,
        misc: misc ?? this.misc,
        space: space ?? this.space,
        rentalDiscountPercent:
            rentalDiscountPercent ?? this.rentalDiscountPercent,
        rentalDaysPerWeek: rentalDaysPerWeek ?? this.rentalDaysPerWeek,
        salesDiscountPercent: salesDiscountPercent ?? this.salesDiscountPercent,
        spaceDiscountPercent: spaceDiscountPercent ?? this.spaceDiscountPercent,
        rentalAsOf: rentalAsOf ?? this.rentalAsOf,
        salesAsOf: salesAsOf ?? this.salesAsOf,
        laborAsOf: laborAsOf ?? this.laborAsOf,
        miscAsOf: miscAsOf ?? this.miscAsOf,
        spaceAsOf: spaceAsOf ?? this.spaceAsOf,
        spaceDaysPerWeek: spaceDaysPerWeek ?? this.spaceDaysPerWeek,
        companyId: companyId ?? this.companyId,
        applyDiscountToCustomRate:
            applyDiscountToCustomRate ?? this.applyDiscountToCustomRate,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings {
  WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings({
    this.documentBarCodeSettingsId,
    this.documentBarCodeSettingsName,
    this.documentBarCodeStyle,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsFromJson(
          json);

  @JsonKey(name: 'DocumentBarCodeSettingsId', includeIfNull: false)
  final String? documentBarCodeSettingsId;
  @JsonKey(name: 'DocumentBarCodeSettingsName', includeIfNull: false)
  final String? documentBarCodeSettingsName;
  @JsonKey(name: 'DocumentBarCodeStyle', includeIfNull: false)
  final String? documentBarCodeStyle;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings &&
            (identical(other.documentBarCodeSettingsId,
                    documentBarCodeSettingsId) ||
                const DeepCollectionEquality().equals(
                    other.documentBarCodeSettingsId,
                    documentBarCodeSettingsId)) &&
            (identical(other.documentBarCodeSettingsName,
                    documentBarCodeSettingsName) ||
                const DeepCollectionEquality().equals(
                    other.documentBarCodeSettingsName,
                    documentBarCodeSettingsName)) &&
            (identical(other.documentBarCodeStyle, documentBarCodeStyle) ||
                const DeepCollectionEquality().equals(
                    other.documentBarCodeStyle, documentBarCodeStyle)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettingsExtension
    on WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings {
  WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings copyWith(
      {String? documentBarCodeSettingsId,
      String? documentBarCodeSettingsName,
      String? documentBarCodeStyle,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDocumentBarCodeSettingsDocumentBarCodeSettings(
        documentBarCodeSettingsId:
            documentBarCodeSettingsId ?? this.documentBarCodeSettingsId,
        documentBarCodeSettingsName:
            documentBarCodeSettingsName ?? this.documentBarCodeSettingsName,
        documentBarCodeStyle: documentBarCodeStyle ?? this.documentBarCodeStyle,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter {
  WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter({
    this.coverLetterId,
    this.description,
    this.fileName,
    this.html,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterFromJson(
          json);

  @JsonKey(name: 'CoverLetterId', includeIfNull: false)
  final String? coverLetterId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'FileName', includeIfNull: false)
  final String? fileName;
  @JsonKey(name: 'Html', includeIfNull: false)
  final String? html;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter &&
            (identical(other.coverLetterId, coverLetterId) ||
                const DeepCollectionEquality()
                    .equals(other.coverLetterId, coverLetterId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.fileName, fileName) ||
                const DeepCollectionEquality()
                    .equals(other.fileName, fileName)) &&
            (identical(other.html, html) ||
                const DeepCollectionEquality().equals(other.html, html)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetterExtension
    on WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter {
  WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter copyWith(
      {String? coverLetterId,
      String? description,
      String? fileName,
      String? html,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDocumentSettingsCoverLetterCoverLetter(
        coverLetterId: coverLetterId ?? this.coverLetterId,
        description: description ?? this.description,
        fileName: fileName ?? this.fileName,
        html: html ?? this.html,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType {
  WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType({
    this.documentTypeId,
    this.documentType,
    this.floorplan,
    this.videos,
    this.panoramic,
    this.automaticallyAttachToEmail,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeFromJson(
          json);

  @JsonKey(name: 'DocumentTypeId', includeIfNull: false)
  final String? documentTypeId;
  @JsonKey(name: 'DocumentType', includeIfNull: false)
  final String? documentType;
  @JsonKey(name: 'Floorplan', includeIfNull: false)
  final bool? floorplan;
  @JsonKey(name: 'Videos', includeIfNull: false)
  final bool? videos;
  @JsonKey(name: 'Panoramic', includeIfNull: false)
  final bool? panoramic;
  @JsonKey(name: 'AutomaticallyAttachToEmail', includeIfNull: false)
  final bool? automaticallyAttachToEmail;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType &&
            (identical(other.documentTypeId, documentTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.documentTypeId, documentTypeId)) &&
            (identical(other.documentType, documentType) ||
                const DeepCollectionEquality()
                    .equals(other.documentType, documentType)) &&
            (identical(other.floorplan, floorplan) ||
                const DeepCollectionEquality()
                    .equals(other.floorplan, floorplan)) &&
            (identical(other.videos, videos) ||
                const DeepCollectionEquality().equals(other.videos, videos)) &&
            (identical(other.panoramic, panoramic) ||
                const DeepCollectionEquality()
                    .equals(other.panoramic, panoramic)) &&
            (identical(other.automaticallyAttachToEmail,
                    automaticallyAttachToEmail) ||
                const DeepCollectionEquality().equals(
                    other.automaticallyAttachToEmail,
                    automaticallyAttachToEmail)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentTypeExtension
    on WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType {
  WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType copyWith(
      {String? documentTypeId,
      String? documentType,
      bool? floorplan,
      bool? videos,
      bool? panoramic,
      bool? automaticallyAttachToEmail,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDocumentSettingsDocumentTypeDocumentType(
        documentTypeId: documentTypeId ?? this.documentTypeId,
        documentType: documentType ?? this.documentType,
        floorplan: floorplan ?? this.floorplan,
        videos: videos ?? this.videos,
        panoramic: panoramic ?? this.panoramic,
        automaticallyAttachToEmail:
            automaticallyAttachToEmail ?? this.automaticallyAttachToEmail,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions {
  WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions({
    this.termsConditionsId,
    this.description,
    this.fileName,
    this.html,
    this.startOnNewPage,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsFromJson(
          json);

  @JsonKey(name: 'TermsConditionsId', includeIfNull: false)
  final String? termsConditionsId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'FileName', includeIfNull: false)
  final String? fileName;
  @JsonKey(name: 'Html', includeIfNull: false)
  final String? html;
  @JsonKey(name: 'StartOnNewPage', includeIfNull: false)
  final bool? startOnNewPage;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions &&
            (identical(other.termsConditionsId, termsConditionsId) ||
                const DeepCollectionEquality()
                    .equals(other.termsConditionsId, termsConditionsId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.fileName, fileName) ||
                const DeepCollectionEquality()
                    .equals(other.fileName, fileName)) &&
            (identical(other.html, html) ||
                const DeepCollectionEquality().equals(other.html, html)) &&
            (identical(other.startOnNewPage, startOnNewPage) ||
                const DeepCollectionEquality()
                    .equals(other.startOnNewPage, startOnNewPage)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditionsExtension
    on WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions {
  WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions copyWith(
      {String? termsConditionsId,
      String? description,
      String? fileName,
      String? html,
      bool? startOnNewPage,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsDocumentSettingsTermsConditionsTermsConditions(
        termsConditionsId: termsConditionsId ?? this.termsConditionsId,
        description: description ?? this.description,
        fileName: fileName ?? this.fileName,
        html: html ?? this.html,
        startOnNewPage: startOnNewPage ?? this.startOnNewPage,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsEventSettingsEventCategoryEventCategory {
  WebApiModulesSettingsEventSettingsEventCategoryEventCategory({
    this.eventCategoryId,
    this.eventCategory,
    this.eventCategoryCode,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsEventSettingsEventCategoryEventCategory.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsEventSettingsEventCategoryEventCategoryFromJson(
          json);

  @JsonKey(name: 'EventCategoryId', includeIfNull: false)
  final String? eventCategoryId;
  @JsonKey(name: 'EventCategory', includeIfNull: false)
  final String? eventCategory;
  @JsonKey(name: 'EventCategoryCode', includeIfNull: false)
  final String? eventCategoryCode;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsEventSettingsEventCategoryEventCategoryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsEventSettingsEventCategoryEventCategoryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsEventSettingsEventCategoryEventCategoryToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsEventSettingsEventCategoryEventCategory &&
            (identical(other.eventCategoryId, eventCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.eventCategoryId, eventCategoryId)) &&
            (identical(other.eventCategory, eventCategory) ||
                const DeepCollectionEquality()
                    .equals(other.eventCategory, eventCategory)) &&
            (identical(other.eventCategoryCode, eventCategoryCode) ||
                const DeepCollectionEquality()
                    .equals(other.eventCategoryCode, eventCategoryCode)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsEventSettingsEventCategoryEventCategoryExtension
    on WebApiModulesSettingsEventSettingsEventCategoryEventCategory {
  WebApiModulesSettingsEventSettingsEventCategoryEventCategory copyWith(
      {String? eventCategoryId,
      String? eventCategory,
      String? eventCategoryCode,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsEventSettingsEventCategoryEventCategory(
        eventCategoryId: eventCategoryId ?? this.eventCategoryId,
        eventCategory: eventCategory ?? this.eventCategory,
        eventCategoryCode: eventCategoryCode ?? this.eventCategoryCode,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsEventSettingsEventTypeEventType {
  WebApiModulesSettingsEventSettingsEventTypeEventType({
    this.eventTypeId,
    this.eventType,
    this.rentalShowICode,
    this.rentalICodeWidth,
    this.rentalShowDescription,
    this.rentalDescriptionWidth,
    this.rentalShowPickDate,
    this.rentalShowPickTime,
    this.rentalShowFromDate,
    this.rentalShowFromTime,
    this.rentalShowToDate,
    this.rentalShowToTime,
    this.rentalShowBillablePeriods,
    this.rentalShowEpisodes,
    this.rentalShowSubQuantity,
    this.rentalShowAvailableQuantity,
    this.rentalShowConflictDate,
    this.rentalShowAvailableQuantityAllWarehouses,
    this.rentalShowConflictDateAllWarehouses,
    this.rentalShowReservedItems,
    this.rentalShowConsignmentQuantity,
    this.rentalShowConsignmentAvailableQuantity,
    this.rentalShowConsignmentConflictDate,
    this.rentalShowRate,
    this.rentalShowDaysPerWeek,
    this.rentalShowPremiumPercent,
    this.rentalShowUnit,
    this.rentalShowCost,
    this.rentalShowDiscountPercent,
    this.rentalShowMarkupPercent,
    this.rentalShowMarginPercent,
    this.rentalShowUnitDiscountAmount,
    this.rentalShowUnitExtended,
    this.rentalShowWeeklyDiscountAmount,
    this.rentalShowWeeklyExtended,
    this.rentalShowEpisodeExtended,
    this.rentalShowEpisodeDiscountAmount,
    this.rentalShowMonthlyDiscountAmount,
    this.rentalShowMonthlyExtended,
    this.rentalShowPeriodDiscountAmount,
    this.rentalShowPeriodExtended,
    this.rentalShowWarehouse,
    this.rentalShowTaxable,
    this.rentalShowNotes,
    this.rentalShowReturnToWarehouse,
    this.rentalDateStamp,
    this.salesShowICode,
    this.salesICodeWidth,
    this.salesShowDescription,
    this.salesDescriptionWidth,
    this.salesShowManufacturerPartNumber,
    this.salesManufacturerPartNumberWidth,
    this.salesShowPickDate,
    this.salesShowPickTime,
    this.salesShowSubQuantity,
    this.salesShowCost,
    this.salesShowRate,
    this.salesShowAvailableQuantity,
    this.salesShowConflictDate,
    this.salesShowAvailableQuantityAllWarehouses,
    this.salesShowConflictDateAllWarehouses,
    this.salesShowMarkupPercent,
    this.salesShowMarginPercent,
    this.salesShowUnit,
    this.salesShowPeriodCostExtended,
    this.salesShowDiscountPercent,
    this.salesShowUnitDiscountAmount,
    this.salesShowUnitExtended,
    this.salesShowPeriodDiscountAmount,
    this.salesShowPeriodExtended,
    this.salesShowVariancePercent,
    this.salesShowVarianceExtended,
    this.salesShowWarehouse,
    this.salesShowTaxable,
    this.salesShowNotes,
    this.salesDateStamp,
    this.salesInventoryPrice,
    this.salesInventoryCost,
    this.facilityShowDescription,
    this.facilityDescriptionWidth,
    this.facilityShowFromDate,
    this.facilityShowFromTime,
    this.facilityShowToDate,
    this.facilityShowToTime,
    this.facilityShowWeeksAndDays,
    this.facilityShowMonthsAndDays,
    this.facilityShowBillablePeriods,
    this.facilityShowRate,
    this.facilityShowDaysPerWeek,
    this.facilityShowDiscountPercent,
    this.facilityShowSplit,
    this.facilityShowUnit,
    this.facilityShowUnitDiscountAmount,
    this.facilityShowUnitExtended,
    this.facilityShowWeeklyDiscountAmount,
    this.facilityShowWeeklyExtended,
    this.facilityShowMonthlyDiscountAmount,
    this.facilityShowMonthlyExtended,
    this.facilityShowPeriodDiscountAmount,
    this.facilityShowPeriodExtended,
    this.facilityShowTaxable,
    this.facilityShowNotes,
    this.facilityDateStamp,
    this.facilityDescription,
    this.laborShowICode,
    this.laborICodeWidth,
    this.laborShowDescription,
    this.laborDescriptionWidth,
    this.laborShowOrderActivity,
    this.laborShowCrewName,
    this.laborShowFromDate,
    this.laborShowFromTime,
    this.laborShowToDate,
    this.laborShowToTime,
    this.laborShowBillablePeriods,
    this.laborShowHours,
    this.laborShowSubQuantity,
    this.laborShowCost,
    this.laborShowRate,
    this.laborShowPeriodCostExtended,
    this.laborShowDiscountPercent,
    this.laborShowUnit,
    this.laborShowUnitDiscountAmount,
    this.laborShowUnitExtended,
    this.laborShowWeeklyDiscountAmount,
    this.laborShowWeeklyExtended,
    this.laborShowMonthlyDiscountAmount,
    this.laborShowMonthlyExtended,
    this.laborShowPeriodDiscountAmount,
    this.laborShowPeriodExtended,
    this.laborShowWarehouse,
    this.laborShowTaxable,
    this.laborShowNotes,
    this.laborDateStamp,
    this.hideCrewBreaks,
    this.break1Paid,
    this.break2Paid,
    this.break3Paid,
    this.miscShowICode,
    this.miscICodeWidth,
    this.miscShowDescription,
    this.miscDescriptionWidth,
    this.miscShowFromDate,
    this.miscShowFromTime,
    this.miscShowToDate,
    this.miscShowToTime,
    this.miscShowBillablePeriods,
    this.miscShowSubQuantity,
    this.miscShowWeeksAndDays,
    this.miscShowMonthsAndDays,
    this.miscShowUnit,
    this.miscShowRate,
    this.miscShowCost,
    this.miscShowPeriodCostExtended,
    this.miscShowDiscountPercent,
    this.miscShowUnitDiscountAmount,
    this.miscShowUnitExtended,
    this.miscShowWeeklyDiscountAmount,
    this.miscShowWeeklyExtended,
    this.miscShowMonthlyDiscountAmount,
    this.miscShowMonthlyExtended,
    this.miscShowPeriodDiscountAmount,
    this.miscShowPeriodExtended,
    this.miscShowWarehouse,
    this.miscShowTaxable,
    this.miscShowNotes,
    this.miscShowReturnToWarehouse,
    this.miscDateStamp,
    this.lossAndDamageShowOrderNumber,
    this.lossAndDamageShowBarCode,
    this.lossAndDamageShowSerialNumber,
    this.lossAndDamageShowICode,
    this.lossAndDamageICodeWidth,
    this.lossAndDamageShowDescription,
    this.lossAndDamageDescriptionWidth,
    this.lossAndDamageShowUnit,
    this.lossAndDamageShowRate,
    this.lossAndDamageShowCost,
    this.lossAndDamageShowDiscountPercent,
    this.lossAndDamageShowUnitDiscountAmount,
    this.lossAndDamageShowUnitExtended,
    this.lossAndDamageShowPeriodDiscountAmount,
    this.lossAndDamageShowPeriodExtended,
    this.lossAndDamageShowWarehouse,
    this.lossAndDamageShowTaxable,
    this.lossAndDamageShowNotes,
    this.lossAndDamageDateStamp,
    this.orderBy,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsEventSettingsEventTypeEventType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsEventSettingsEventTypeEventTypeFromJson(json);

  @JsonKey(name: 'EventTypeId', includeIfNull: false)
  final String? eventTypeId;
  @JsonKey(name: 'EventType', includeIfNull: false)
  final String? eventType;
  @JsonKey(name: 'RentalShowICode', includeIfNull: false)
  final bool? rentalShowICode;
  @JsonKey(name: 'RentalICodeWidth', includeIfNull: false)
  final int? rentalICodeWidth;
  @JsonKey(name: 'RentalShowDescription', includeIfNull: false)
  final bool? rentalShowDescription;
  @JsonKey(name: 'RentalDescriptionWidth', includeIfNull: false)
  final int? rentalDescriptionWidth;
  @JsonKey(name: 'RentalShowPickDate', includeIfNull: false)
  final bool? rentalShowPickDate;
  @JsonKey(name: 'RentalShowPickTime', includeIfNull: false)
  final bool? rentalShowPickTime;
  @JsonKey(name: 'RentalShowFromDate', includeIfNull: false)
  final bool? rentalShowFromDate;
  @JsonKey(name: 'RentalShowFromTime', includeIfNull: false)
  final bool? rentalShowFromTime;
  @JsonKey(name: 'RentalShowToDate', includeIfNull: false)
  final bool? rentalShowToDate;
  @JsonKey(name: 'RentalShowToTime', includeIfNull: false)
  final bool? rentalShowToTime;
  @JsonKey(name: 'RentalShowBillablePeriods', includeIfNull: false)
  final bool? rentalShowBillablePeriods;
  @JsonKey(name: 'RentalShowEpisodes', includeIfNull: false)
  final bool? rentalShowEpisodes;
  @JsonKey(name: 'RentalShowSubQuantity', includeIfNull: false)
  final bool? rentalShowSubQuantity;
  @JsonKey(name: 'RentalShowAvailableQuantity', includeIfNull: false)
  final bool? rentalShowAvailableQuantity;
  @JsonKey(name: 'RentalShowConflictDate', includeIfNull: false)
  final bool? rentalShowConflictDate;
  @JsonKey(
      name: 'RentalShowAvailableQuantityAllWarehouses', includeIfNull: false)
  final bool? rentalShowAvailableQuantityAllWarehouses;
  @JsonKey(name: 'RentalShowConflictDateAllWarehouses', includeIfNull: false)
  final bool? rentalShowConflictDateAllWarehouses;
  @JsonKey(name: 'RentalShowReservedItems', includeIfNull: false)
  final bool? rentalShowReservedItems;
  @JsonKey(name: 'RentalShowConsignmentQuantity', includeIfNull: false)
  final bool? rentalShowConsignmentQuantity;
  @JsonKey(name: 'RentalShowConsignmentAvailableQuantity', includeIfNull: false)
  final bool? rentalShowConsignmentAvailableQuantity;
  @JsonKey(name: 'RentalShowConsignmentConflictDate', includeIfNull: false)
  final bool? rentalShowConsignmentConflictDate;
  @JsonKey(name: 'RentalShowRate', includeIfNull: false)
  final bool? rentalShowRate;
  @JsonKey(name: 'RentalShowDaysPerWeek', includeIfNull: false)
  final bool? rentalShowDaysPerWeek;
  @JsonKey(name: 'RentalShowPremiumPercent', includeIfNull: false)
  final bool? rentalShowPremiumPercent;
  @JsonKey(name: 'RentalShowUnit', includeIfNull: false)
  final bool? rentalShowUnit;
  @JsonKey(name: 'RentalShowCost', includeIfNull: false)
  final bool? rentalShowCost;
  @JsonKey(name: 'RentalShowDiscountPercent', includeIfNull: false)
  final bool? rentalShowDiscountPercent;
  @JsonKey(name: 'RentalShowMarkupPercent', includeIfNull: false)
  final bool? rentalShowMarkupPercent;
  @JsonKey(name: 'RentalShowMarginPercent', includeIfNull: false)
  final bool? rentalShowMarginPercent;
  @JsonKey(name: 'RentalShowUnitDiscountAmount', includeIfNull: false)
  final bool? rentalShowUnitDiscountAmount;
  @JsonKey(name: 'RentalShowUnitExtended', includeIfNull: false)
  final bool? rentalShowUnitExtended;
  @JsonKey(name: 'RentalShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? rentalShowWeeklyDiscountAmount;
  @JsonKey(name: 'RentalShowWeeklyExtended', includeIfNull: false)
  final bool? rentalShowWeeklyExtended;
  @JsonKey(name: 'RentalShowEpisodeExtended', includeIfNull: false)
  final bool? rentalShowEpisodeExtended;
  @JsonKey(name: 'RentalShowEpisodeDiscountAmount', includeIfNull: false)
  final bool? rentalShowEpisodeDiscountAmount;
  @JsonKey(name: 'RentalShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? rentalShowMonthlyDiscountAmount;
  @JsonKey(name: 'RentalShowMonthlyExtended', includeIfNull: false)
  final bool? rentalShowMonthlyExtended;
  @JsonKey(name: 'RentalShowPeriodDiscountAmount', includeIfNull: false)
  final bool? rentalShowPeriodDiscountAmount;
  @JsonKey(name: 'RentalShowPeriodExtended', includeIfNull: false)
  final bool? rentalShowPeriodExtended;
  @JsonKey(name: 'RentalShowWarehouse', includeIfNull: false)
  final bool? rentalShowWarehouse;
  @JsonKey(name: 'RentalShowTaxable', includeIfNull: false)
  final bool? rentalShowTaxable;
  @JsonKey(name: 'RentalShowNotes', includeIfNull: false)
  final bool? rentalShowNotes;
  @JsonKey(name: 'RentalShowReturnToWarehouse', includeIfNull: false)
  final bool? rentalShowReturnToWarehouse;
  @JsonKey(name: 'RentalDateStamp', includeIfNull: false)
  final String? rentalDateStamp;
  @JsonKey(name: 'SalesShowICode', includeIfNull: false)
  final bool? salesShowICode;
  @JsonKey(name: 'SalesICodeWidth', includeIfNull: false)
  final int? salesICodeWidth;
  @JsonKey(name: 'SalesShowDescription', includeIfNull: false)
  final bool? salesShowDescription;
  @JsonKey(name: 'SalesDescriptionWidth', includeIfNull: false)
  final int? salesDescriptionWidth;
  @JsonKey(name: 'SalesShowManufacturerPartNumber', includeIfNull: false)
  final bool? salesShowManufacturerPartNumber;
  @JsonKey(name: 'SalesManufacturerPartNumberWidth', includeIfNull: false)
  final int? salesManufacturerPartNumberWidth;
  @JsonKey(name: 'SalesShowPickDate', includeIfNull: false)
  final bool? salesShowPickDate;
  @JsonKey(name: 'SalesShowPickTime', includeIfNull: false)
  final bool? salesShowPickTime;
  @JsonKey(name: 'SalesShowSubQuantity', includeIfNull: false)
  final bool? salesShowSubQuantity;
  @JsonKey(name: 'SalesShowCost', includeIfNull: false)
  final bool? salesShowCost;
  @JsonKey(name: 'SalesShowRate', includeIfNull: false)
  final bool? salesShowRate;
  @JsonKey(name: 'SalesShowAvailableQuantity', includeIfNull: false)
  final bool? salesShowAvailableQuantity;
  @JsonKey(name: 'SalesShowConflictDate', includeIfNull: false)
  final bool? salesShowConflictDate;
  @JsonKey(
      name: 'SalesShowAvailableQuantityAllWarehouses', includeIfNull: false)
  final bool? salesShowAvailableQuantityAllWarehouses;
  @JsonKey(name: 'SalesShowConflictDateAllWarehouses', includeIfNull: false)
  final bool? salesShowConflictDateAllWarehouses;
  @JsonKey(name: 'SalesShowMarkupPercent', includeIfNull: false)
  final bool? salesShowMarkupPercent;
  @JsonKey(name: 'SalesShowMarginPercent', includeIfNull: false)
  final bool? salesShowMarginPercent;
  @JsonKey(name: 'SalesShowUnit', includeIfNull: false)
  final bool? salesShowUnit;
  @JsonKey(name: 'SalesShowPeriodCostExtended', includeIfNull: false)
  final bool? salesShowPeriodCostExtended;
  @JsonKey(name: 'SalesShowDiscountPercent', includeIfNull: false)
  final bool? salesShowDiscountPercent;
  @JsonKey(name: 'SalesShowUnitDiscountAmount', includeIfNull: false)
  final bool? salesShowUnitDiscountAmount;
  @JsonKey(name: 'SalesShowUnitExtended', includeIfNull: false)
  final bool? salesShowUnitExtended;
  @JsonKey(name: 'SalesShowPeriodDiscountAmount', includeIfNull: false)
  final bool? salesShowPeriodDiscountAmount;
  @JsonKey(name: 'SalesShowPeriodExtended', includeIfNull: false)
  final bool? salesShowPeriodExtended;
  @JsonKey(name: 'SalesShowVariancePercent', includeIfNull: false)
  final bool? salesShowVariancePercent;
  @JsonKey(name: 'SalesShowVarianceExtended', includeIfNull: false)
  final bool? salesShowVarianceExtended;
  @JsonKey(name: 'SalesShowWarehouse', includeIfNull: false)
  final bool? salesShowWarehouse;
  @JsonKey(name: 'SalesShowTaxable', includeIfNull: false)
  final bool? salesShowTaxable;
  @JsonKey(name: 'SalesShowNotes', includeIfNull: false)
  final bool? salesShowNotes;
  @JsonKey(name: 'SalesDateStamp', includeIfNull: false)
  final String? salesDateStamp;
  @JsonKey(name: 'SalesInventoryPrice', includeIfNull: false)
  final String? salesInventoryPrice;
  @JsonKey(name: 'SalesInventoryCost', includeIfNull: false)
  final String? salesInventoryCost;
  @JsonKey(name: 'FacilityShowDescription', includeIfNull: false)
  final bool? facilityShowDescription;
  @JsonKey(name: 'FacilityDescriptionWidth', includeIfNull: false)
  final int? facilityDescriptionWidth;
  @JsonKey(name: 'FacilityShowFromDate', includeIfNull: false)
  final bool? facilityShowFromDate;
  @JsonKey(name: 'FacilityShowFromTime', includeIfNull: false)
  final bool? facilityShowFromTime;
  @JsonKey(name: 'FacilityShowToDate', includeIfNull: false)
  final bool? facilityShowToDate;
  @JsonKey(name: 'FacilityShowToTime', includeIfNull: false)
  final bool? facilityShowToTime;
  @JsonKey(name: 'FacilityShowWeeksAndDays', includeIfNull: false)
  final bool? facilityShowWeeksAndDays;
  @JsonKey(name: 'FacilityShowMonthsAndDays', includeIfNull: false)
  final bool? facilityShowMonthsAndDays;
  @JsonKey(name: 'FacilityShowBillablePeriods', includeIfNull: false)
  final bool? facilityShowBillablePeriods;
  @JsonKey(name: 'FacilityShowRate', includeIfNull: false)
  final bool? facilityShowRate;
  @JsonKey(name: 'FacilityShowDaysPerWeek', includeIfNull: false)
  final bool? facilityShowDaysPerWeek;
  @JsonKey(name: 'FacilityShowDiscountPercent', includeIfNull: false)
  final bool? facilityShowDiscountPercent;
  @JsonKey(name: 'FacilityShowSplit', includeIfNull: false)
  final bool? facilityShowSplit;
  @JsonKey(name: 'FacilityShowUnit', includeIfNull: false)
  final bool? facilityShowUnit;
  @JsonKey(name: 'FacilityShowUnitDiscountAmount', includeIfNull: false)
  final bool? facilityShowUnitDiscountAmount;
  @JsonKey(name: 'FacilityShowUnitExtended', includeIfNull: false)
  final bool? facilityShowUnitExtended;
  @JsonKey(name: 'FacilityShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? facilityShowWeeklyDiscountAmount;
  @JsonKey(name: 'FacilityShowWeeklyExtended', includeIfNull: false)
  final bool? facilityShowWeeklyExtended;
  @JsonKey(name: 'FacilityShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? facilityShowMonthlyDiscountAmount;
  @JsonKey(name: 'FacilityShowMonthlyExtended', includeIfNull: false)
  final bool? facilityShowMonthlyExtended;
  @JsonKey(name: 'FacilityShowPeriodDiscountAmount', includeIfNull: false)
  final bool? facilityShowPeriodDiscountAmount;
  @JsonKey(name: 'FacilityShowPeriodExtended', includeIfNull: false)
  final bool? facilityShowPeriodExtended;
  @JsonKey(name: 'FacilityShowTaxable', includeIfNull: false)
  final bool? facilityShowTaxable;
  @JsonKey(name: 'FacilityShowNotes', includeIfNull: false)
  final bool? facilityShowNotes;
  @JsonKey(name: 'FacilityDateStamp', includeIfNull: false)
  final String? facilityDateStamp;
  @JsonKey(name: 'FacilityDescription', includeIfNull: false)
  final String? facilityDescription;
  @JsonKey(name: 'LaborShowICode', includeIfNull: false)
  final bool? laborShowICode;
  @JsonKey(name: 'LaborICodeWidth', includeIfNull: false)
  final int? laborICodeWidth;
  @JsonKey(name: 'LaborShowDescription', includeIfNull: false)
  final bool? laborShowDescription;
  @JsonKey(name: 'LaborDescriptionWidth', includeIfNull: false)
  final int? laborDescriptionWidth;
  @JsonKey(name: 'LaborShowOrderActivity', includeIfNull: false)
  final bool? laborShowOrderActivity;
  @JsonKey(name: 'LaborShowCrewName', includeIfNull: false)
  final bool? laborShowCrewName;
  @JsonKey(name: 'LaborShowFromDate', includeIfNull: false)
  final bool? laborShowFromDate;
  @JsonKey(name: 'LaborShowFromTime', includeIfNull: false)
  final bool? laborShowFromTime;
  @JsonKey(name: 'LaborShowToDate', includeIfNull: false)
  final bool? laborShowToDate;
  @JsonKey(name: 'LaborShowToTime', includeIfNull: false)
  final bool? laborShowToTime;
  @JsonKey(name: 'LaborShowBillablePeriods', includeIfNull: false)
  final bool? laborShowBillablePeriods;
  @JsonKey(name: 'LaborShowHours', includeIfNull: false)
  final bool? laborShowHours;
  @JsonKey(name: 'LaborShowSubQuantity', includeIfNull: false)
  final bool? laborShowSubQuantity;
  @JsonKey(name: 'LaborShowCost', includeIfNull: false)
  final bool? laborShowCost;
  @JsonKey(name: 'LaborShowRate', includeIfNull: false)
  final bool? laborShowRate;
  @JsonKey(name: 'LaborShowPeriodCostExtended', includeIfNull: false)
  final bool? laborShowPeriodCostExtended;
  @JsonKey(name: 'LaborShowDiscountPercent', includeIfNull: false)
  final bool? laborShowDiscountPercent;
  @JsonKey(name: 'LaborShowUnit', includeIfNull: false)
  final bool? laborShowUnit;
  @JsonKey(name: 'LaborShowUnitDiscountAmount', includeIfNull: false)
  final bool? laborShowUnitDiscountAmount;
  @JsonKey(name: 'LaborShowUnitExtended', includeIfNull: false)
  final bool? laborShowUnitExtended;
  @JsonKey(name: 'LaborShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? laborShowWeeklyDiscountAmount;
  @JsonKey(name: 'LaborShowWeeklyExtended', includeIfNull: false)
  final bool? laborShowWeeklyExtended;
  @JsonKey(name: 'LaborShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? laborShowMonthlyDiscountAmount;
  @JsonKey(name: 'LaborShowMonthlyExtended', includeIfNull: false)
  final bool? laborShowMonthlyExtended;
  @JsonKey(name: 'LaborShowPeriodDiscountAmount', includeIfNull: false)
  final bool? laborShowPeriodDiscountAmount;
  @JsonKey(name: 'LaborShowPeriodExtended', includeIfNull: false)
  final bool? laborShowPeriodExtended;
  @JsonKey(name: 'LaborShowWarehouse', includeIfNull: false)
  final bool? laborShowWarehouse;
  @JsonKey(name: 'LaborShowTaxable', includeIfNull: false)
  final bool? laborShowTaxable;
  @JsonKey(name: 'LaborShowNotes', includeIfNull: false)
  final bool? laborShowNotes;
  @JsonKey(name: 'LaborDateStamp', includeIfNull: false)
  final String? laborDateStamp;
  @JsonKey(name: 'HideCrewBreaks', includeIfNull: false)
  final bool? hideCrewBreaks;
  @JsonKey(name: 'Break1Paid', includeIfNull: false)
  final bool? break1Paid;
  @JsonKey(name: 'Break2Paid', includeIfNull: false)
  final bool? break2Paid;
  @JsonKey(name: 'Break3Paid', includeIfNull: false)
  final bool? break3Paid;
  @JsonKey(name: 'MiscShowICode', includeIfNull: false)
  final bool? miscShowICode;
  @JsonKey(name: 'MiscICodeWidth', includeIfNull: false)
  final int? miscICodeWidth;
  @JsonKey(name: 'MiscShowDescription', includeIfNull: false)
  final bool? miscShowDescription;
  @JsonKey(name: 'MiscDescriptionWidth', includeIfNull: false)
  final int? miscDescriptionWidth;
  @JsonKey(name: 'MiscShowFromDate', includeIfNull: false)
  final bool? miscShowFromDate;
  @JsonKey(name: 'MiscShowFromTime', includeIfNull: false)
  final bool? miscShowFromTime;
  @JsonKey(name: 'MiscShowToDate', includeIfNull: false)
  final bool? miscShowToDate;
  @JsonKey(name: 'MiscShowToTime', includeIfNull: false)
  final bool? miscShowToTime;
  @JsonKey(name: 'MiscShowBillablePeriods', includeIfNull: false)
  final bool? miscShowBillablePeriods;
  @JsonKey(name: 'MiscShowSubQuantity', includeIfNull: false)
  final bool? miscShowSubQuantity;
  @JsonKey(name: 'MiscShowWeeksAndDays', includeIfNull: false)
  final bool? miscShowWeeksAndDays;
  @JsonKey(name: 'MiscShowMonthsAndDays', includeIfNull: false)
  final bool? miscShowMonthsAndDays;
  @JsonKey(name: 'MiscShowUnit', includeIfNull: false)
  final bool? miscShowUnit;
  @JsonKey(name: 'MiscShowRate', includeIfNull: false)
  final bool? miscShowRate;
  @JsonKey(name: 'MiscShowCost', includeIfNull: false)
  final bool? miscShowCost;
  @JsonKey(name: 'MiscShowPeriodCostExtended', includeIfNull: false)
  final bool? miscShowPeriodCostExtended;
  @JsonKey(name: 'MiscShowDiscountPercent', includeIfNull: false)
  final bool? miscShowDiscountPercent;
  @JsonKey(name: 'MiscShowUnitDiscountAmount', includeIfNull: false)
  final bool? miscShowUnitDiscountAmount;
  @JsonKey(name: 'MiscShowUnitExtended', includeIfNull: false)
  final bool? miscShowUnitExtended;
  @JsonKey(name: 'MiscShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? miscShowWeeklyDiscountAmount;
  @JsonKey(name: 'MiscShowWeeklyExtended', includeIfNull: false)
  final bool? miscShowWeeklyExtended;
  @JsonKey(name: 'MiscShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? miscShowMonthlyDiscountAmount;
  @JsonKey(name: 'MiscShowMonthlyExtended', includeIfNull: false)
  final bool? miscShowMonthlyExtended;
  @JsonKey(name: 'MiscShowPeriodDiscountAmount', includeIfNull: false)
  final bool? miscShowPeriodDiscountAmount;
  @JsonKey(name: 'MiscShowPeriodExtended', includeIfNull: false)
  final bool? miscShowPeriodExtended;
  @JsonKey(name: 'MiscShowWarehouse', includeIfNull: false)
  final bool? miscShowWarehouse;
  @JsonKey(name: 'MiscShowTaxable', includeIfNull: false)
  final bool? miscShowTaxable;
  @JsonKey(name: 'MiscShowNotes', includeIfNull: false)
  final bool? miscShowNotes;
  @JsonKey(name: 'MiscShowReturnToWarehouse', includeIfNull: false)
  final bool? miscShowReturnToWarehouse;
  @JsonKey(name: 'MiscDateStamp', includeIfNull: false)
  final String? miscDateStamp;
  @JsonKey(name: 'LossAndDamageShowOrderNumber', includeIfNull: false)
  final bool? lossAndDamageShowOrderNumber;
  @JsonKey(name: 'LossAndDamageShowBarCode', includeIfNull: false)
  final bool? lossAndDamageShowBarCode;
  @JsonKey(name: 'LossAndDamageShowSerialNumber', includeIfNull: false)
  final bool? lossAndDamageShowSerialNumber;
  @JsonKey(name: 'LossAndDamageShowICode', includeIfNull: false)
  final bool? lossAndDamageShowICode;
  @JsonKey(name: 'LossAndDamageICodeWidth', includeIfNull: false)
  final int? lossAndDamageICodeWidth;
  @JsonKey(name: 'LossAndDamageShowDescription', includeIfNull: false)
  final bool? lossAndDamageShowDescription;
  @JsonKey(name: 'LossAndDamageDescriptionWidth', includeIfNull: false)
  final int? lossAndDamageDescriptionWidth;
  @JsonKey(name: 'LossAndDamageShowUnit', includeIfNull: false)
  final bool? lossAndDamageShowUnit;
  @JsonKey(name: 'LossAndDamageShowRate', includeIfNull: false)
  final bool? lossAndDamageShowRate;
  @JsonKey(name: 'LossAndDamageShowCost', includeIfNull: false)
  final bool? lossAndDamageShowCost;
  @JsonKey(name: 'LossAndDamageShowDiscountPercent', includeIfNull: false)
  final bool? lossAndDamageShowDiscountPercent;
  @JsonKey(name: 'LossAndDamageShowUnitDiscountAmount', includeIfNull: false)
  final bool? lossAndDamageShowUnitDiscountAmount;
  @JsonKey(name: 'LossAndDamageShowUnitExtended', includeIfNull: false)
  final bool? lossAndDamageShowUnitExtended;
  @JsonKey(name: 'LossAndDamageShowPeriodDiscountAmount', includeIfNull: false)
  final bool? lossAndDamageShowPeriodDiscountAmount;
  @JsonKey(name: 'LossAndDamageShowPeriodExtended', includeIfNull: false)
  final bool? lossAndDamageShowPeriodExtended;
  @JsonKey(name: 'LossAndDamageShowWarehouse', includeIfNull: false)
  final bool? lossAndDamageShowWarehouse;
  @JsonKey(name: 'LossAndDamageShowTaxable', includeIfNull: false)
  final bool? lossAndDamageShowTaxable;
  @JsonKey(name: 'LossAndDamageShowNotes', includeIfNull: false)
  final bool? lossAndDamageShowNotes;
  @JsonKey(name: 'LossAndDamageDateStamp', includeIfNull: false)
  final String? lossAndDamageDateStamp;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsEventSettingsEventTypeEventTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsEventSettingsEventTypeEventTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsEventSettingsEventTypeEventTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsEventSettingsEventTypeEventType &&
            (identical(other.eventTypeId, eventTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.eventTypeId, eventTypeId)) &&
            (identical(other.eventType, eventType) ||
                const DeepCollectionEquality()
                    .equals(other.eventType, eventType)) &&
            (identical(other.rentalShowICode, rentalShowICode) ||
                const DeepCollectionEquality()
                    .equals(other.rentalShowICode, rentalShowICode)) &&
            (identical(other.rentalICodeWidth, rentalICodeWidth) ||
                const DeepCollectionEquality()
                    .equals(other.rentalICodeWidth, rentalICodeWidth)) &&
            (identical(other.rentalShowDescription, rentalShowDescription) ||
                const DeepCollectionEquality().equals(
                    other.rentalShowDescription, rentalShowDescription)) &&
            (identical(other.rentalDescriptionWidth, rentalDescriptionWidth) ||
                const DeepCollectionEquality().equals(
                    other.rentalDescriptionWidth, rentalDescriptionWidth)) &&
            (identical(other.rentalShowPickDate, rentalShowPickDate) ||
                const DeepCollectionEquality()
                    .equals(other.rentalShowPickDate, rentalShowPickDate)) &&
            (identical(other.rentalShowPickTime, rentalShowPickTime) ||
                const DeepCollectionEquality()
                    .equals(other.rentalShowPickTime, rentalShowPickTime)) &&
            (identical(other.rentalShowFromDate, rentalShowFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.rentalShowFromDate, rentalShowFromDate)) &&
            (identical(other.rentalShowFromTime, rentalShowFromTime) ||
                const DeepCollectionEquality()
                    .equals(other.rentalShowFromTime, rentalShowFromTime)) &&
            (identical(other.rentalShowToDate, rentalShowToDate) ||
                const DeepCollectionEquality()
                    .equals(other.rentalShowToDate, rentalShowToDate)) &&
            (identical(other.rentalShowToTime, rentalShowToTime) ||
                const DeepCollectionEquality()
                    .equals(other.rentalShowToTime, rentalShowToTime)) &&
            (identical(other.rentalShowBillablePeriods, rentalShowBillablePeriods) ||
                const DeepCollectionEquality().equals(
                    other.rentalShowBillablePeriods,
                    rentalShowBillablePeriods)) &&
            (identical(other.rentalShowEpisodes, rentalShowEpisodes) ||
                const DeepCollectionEquality()
                    .equals(other.rentalShowEpisodes, rentalShowEpisodes)) &&
            (identical(other.rentalShowSubQuantity, rentalShowSubQuantity) ||
                const DeepCollectionEquality().equals(
                    other.rentalShowSubQuantity, rentalShowSubQuantity)) &&
            (identical(other.rentalShowAvailableQuantity, rentalShowAvailableQuantity) ||
                const DeepCollectionEquality().equals(
                    other.rentalShowAvailableQuantity,
                    rentalShowAvailableQuantity)) &&
            (identical(other.rentalShowConflictDate, rentalShowConflictDate) ||
                const DeepCollectionEquality().equals(
                    other.rentalShowConflictDate, rentalShowConflictDate)) &&
            (identical(other.rentalShowAvailableQuantityAllWarehouses, rentalShowAvailableQuantityAllWarehouses) ||
                const DeepCollectionEquality().equals(
                    other.rentalShowAvailableQuantityAllWarehouses, rentalShowAvailableQuantityAllWarehouses)) &&
            (identical(other.rentalShowConflictDateAllWarehouses, rentalShowConflictDateAllWarehouses) || const DeepCollectionEquality().equals(other.rentalShowConflictDateAllWarehouses, rentalShowConflictDateAllWarehouses)) &&
            (identical(other.rentalShowReservedItems, rentalShowReservedItems) || const DeepCollectionEquality().equals(other.rentalShowReservedItems, rentalShowReservedItems)) &&
            (identical(other.rentalShowConsignmentQuantity, rentalShowConsignmentQuantity) || const DeepCollectionEquality().equals(other.rentalShowConsignmentQuantity, rentalShowConsignmentQuantity)) &&
            (identical(other.rentalShowConsignmentAvailableQuantity, rentalShowConsignmentAvailableQuantity) || const DeepCollectionEquality().equals(other.rentalShowConsignmentAvailableQuantity, rentalShowConsignmentAvailableQuantity)) &&
            (identical(other.rentalShowConsignmentConflictDate, rentalShowConsignmentConflictDate) || const DeepCollectionEquality().equals(other.rentalShowConsignmentConflictDate, rentalShowConsignmentConflictDate)) &&
            (identical(other.rentalShowRate, rentalShowRate) || const DeepCollectionEquality().equals(other.rentalShowRate, rentalShowRate)) &&
            (identical(other.rentalShowDaysPerWeek, rentalShowDaysPerWeek) || const DeepCollectionEquality().equals(other.rentalShowDaysPerWeek, rentalShowDaysPerWeek)) &&
            (identical(other.rentalShowPremiumPercent, rentalShowPremiumPercent) || const DeepCollectionEquality().equals(other.rentalShowPremiumPercent, rentalShowPremiumPercent)) &&
            (identical(other.rentalShowUnit, rentalShowUnit) || const DeepCollectionEquality().equals(other.rentalShowUnit, rentalShowUnit)) &&
            (identical(other.rentalShowCost, rentalShowCost) || const DeepCollectionEquality().equals(other.rentalShowCost, rentalShowCost)) &&
            (identical(other.rentalShowDiscountPercent, rentalShowDiscountPercent) || const DeepCollectionEquality().equals(other.rentalShowDiscountPercent, rentalShowDiscountPercent)) &&
            (identical(other.rentalShowMarkupPercent, rentalShowMarkupPercent) || const DeepCollectionEquality().equals(other.rentalShowMarkupPercent, rentalShowMarkupPercent)) &&
            (identical(other.rentalShowMarginPercent, rentalShowMarginPercent) || const DeepCollectionEquality().equals(other.rentalShowMarginPercent, rentalShowMarginPercent)) &&
            (identical(other.rentalShowUnitDiscountAmount, rentalShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.rentalShowUnitDiscountAmount, rentalShowUnitDiscountAmount)) &&
            (identical(other.rentalShowUnitExtended, rentalShowUnitExtended) || const DeepCollectionEquality().equals(other.rentalShowUnitExtended, rentalShowUnitExtended)) &&
            (identical(other.rentalShowWeeklyDiscountAmount, rentalShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.rentalShowWeeklyDiscountAmount, rentalShowWeeklyDiscountAmount)) &&
            (identical(other.rentalShowWeeklyExtended, rentalShowWeeklyExtended) || const DeepCollectionEquality().equals(other.rentalShowWeeklyExtended, rentalShowWeeklyExtended)) &&
            (identical(other.rentalShowEpisodeExtended, rentalShowEpisodeExtended) || const DeepCollectionEquality().equals(other.rentalShowEpisodeExtended, rentalShowEpisodeExtended)) &&
            (identical(other.rentalShowEpisodeDiscountAmount, rentalShowEpisodeDiscountAmount) || const DeepCollectionEquality().equals(other.rentalShowEpisodeDiscountAmount, rentalShowEpisodeDiscountAmount)) &&
            (identical(other.rentalShowMonthlyDiscountAmount, rentalShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.rentalShowMonthlyDiscountAmount, rentalShowMonthlyDiscountAmount)) &&
            (identical(other.rentalShowMonthlyExtended, rentalShowMonthlyExtended) || const DeepCollectionEquality().equals(other.rentalShowMonthlyExtended, rentalShowMonthlyExtended)) &&
            (identical(other.rentalShowPeriodDiscountAmount, rentalShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.rentalShowPeriodDiscountAmount, rentalShowPeriodDiscountAmount)) &&
            (identical(other.rentalShowPeriodExtended, rentalShowPeriodExtended) || const DeepCollectionEquality().equals(other.rentalShowPeriodExtended, rentalShowPeriodExtended)) &&
            (identical(other.rentalShowWarehouse, rentalShowWarehouse) || const DeepCollectionEquality().equals(other.rentalShowWarehouse, rentalShowWarehouse)) &&
            (identical(other.rentalShowTaxable, rentalShowTaxable) || const DeepCollectionEquality().equals(other.rentalShowTaxable, rentalShowTaxable)) &&
            (identical(other.rentalShowNotes, rentalShowNotes) || const DeepCollectionEquality().equals(other.rentalShowNotes, rentalShowNotes)) &&
            (identical(other.rentalShowReturnToWarehouse, rentalShowReturnToWarehouse) || const DeepCollectionEquality().equals(other.rentalShowReturnToWarehouse, rentalShowReturnToWarehouse)) &&
            (identical(other.rentalDateStamp, rentalDateStamp) || const DeepCollectionEquality().equals(other.rentalDateStamp, rentalDateStamp)) &&
            (identical(other.salesShowICode, salesShowICode) || const DeepCollectionEquality().equals(other.salesShowICode, salesShowICode)) &&
            (identical(other.salesICodeWidth, salesICodeWidth) || const DeepCollectionEquality().equals(other.salesICodeWidth, salesICodeWidth)) &&
            (identical(other.salesShowDescription, salesShowDescription) || const DeepCollectionEquality().equals(other.salesShowDescription, salesShowDescription)) &&
            (identical(other.salesDescriptionWidth, salesDescriptionWidth) || const DeepCollectionEquality().equals(other.salesDescriptionWidth, salesDescriptionWidth)) &&
            (identical(other.salesShowManufacturerPartNumber, salesShowManufacturerPartNumber) || const DeepCollectionEquality().equals(other.salesShowManufacturerPartNumber, salesShowManufacturerPartNumber)) &&
            (identical(other.salesManufacturerPartNumberWidth, salesManufacturerPartNumberWidth) || const DeepCollectionEquality().equals(other.salesManufacturerPartNumberWidth, salesManufacturerPartNumberWidth)) &&
            (identical(other.salesShowPickDate, salesShowPickDate) || const DeepCollectionEquality().equals(other.salesShowPickDate, salesShowPickDate)) &&
            (identical(other.salesShowPickTime, salesShowPickTime) || const DeepCollectionEquality().equals(other.salesShowPickTime, salesShowPickTime)) &&
            (identical(other.salesShowSubQuantity, salesShowSubQuantity) || const DeepCollectionEquality().equals(other.salesShowSubQuantity, salesShowSubQuantity)) &&
            (identical(other.salesShowCost, salesShowCost) || const DeepCollectionEquality().equals(other.salesShowCost, salesShowCost)) &&
            (identical(other.salesShowRate, salesShowRate) || const DeepCollectionEquality().equals(other.salesShowRate, salesShowRate)) &&
            (identical(other.salesShowAvailableQuantity, salesShowAvailableQuantity) || const DeepCollectionEquality().equals(other.salesShowAvailableQuantity, salesShowAvailableQuantity)) &&
            (identical(other.salesShowConflictDate, salesShowConflictDate) || const DeepCollectionEquality().equals(other.salesShowConflictDate, salesShowConflictDate)) &&
            (identical(other.salesShowAvailableQuantityAllWarehouses, salesShowAvailableQuantityAllWarehouses) || const DeepCollectionEquality().equals(other.salesShowAvailableQuantityAllWarehouses, salesShowAvailableQuantityAllWarehouses)) &&
            (identical(other.salesShowConflictDateAllWarehouses, salesShowConflictDateAllWarehouses) || const DeepCollectionEquality().equals(other.salesShowConflictDateAllWarehouses, salesShowConflictDateAllWarehouses)) &&
            (identical(other.salesShowMarkupPercent, salesShowMarkupPercent) || const DeepCollectionEquality().equals(other.salesShowMarkupPercent, salesShowMarkupPercent)) &&
            (identical(other.salesShowMarginPercent, salesShowMarginPercent) || const DeepCollectionEquality().equals(other.salesShowMarginPercent, salesShowMarginPercent)) &&
            (identical(other.salesShowUnit, salesShowUnit) || const DeepCollectionEquality().equals(other.salesShowUnit, salesShowUnit)) &&
            (identical(other.salesShowPeriodCostExtended, salesShowPeriodCostExtended) || const DeepCollectionEquality().equals(other.salesShowPeriodCostExtended, salesShowPeriodCostExtended)) &&
            (identical(other.salesShowDiscountPercent, salesShowDiscountPercent) || const DeepCollectionEquality().equals(other.salesShowDiscountPercent, salesShowDiscountPercent)) &&
            (identical(other.salesShowUnitDiscountAmount, salesShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.salesShowUnitDiscountAmount, salesShowUnitDiscountAmount)) &&
            (identical(other.salesShowUnitExtended, salesShowUnitExtended) || const DeepCollectionEquality().equals(other.salesShowUnitExtended, salesShowUnitExtended)) &&
            (identical(other.salesShowPeriodDiscountAmount, salesShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.salesShowPeriodDiscountAmount, salesShowPeriodDiscountAmount)) &&
            (identical(other.salesShowPeriodExtended, salesShowPeriodExtended) || const DeepCollectionEquality().equals(other.salesShowPeriodExtended, salesShowPeriodExtended)) &&
            (identical(other.salesShowVariancePercent, salesShowVariancePercent) || const DeepCollectionEquality().equals(other.salesShowVariancePercent, salesShowVariancePercent)) &&
            (identical(other.salesShowVarianceExtended, salesShowVarianceExtended) || const DeepCollectionEquality().equals(other.salesShowVarianceExtended, salesShowVarianceExtended)) &&
            (identical(other.salesShowWarehouse, salesShowWarehouse) || const DeepCollectionEquality().equals(other.salesShowWarehouse, salesShowWarehouse)) &&
            (identical(other.salesShowTaxable, salesShowTaxable) || const DeepCollectionEquality().equals(other.salesShowTaxable, salesShowTaxable)) &&
            (identical(other.salesShowNotes, salesShowNotes) || const DeepCollectionEquality().equals(other.salesShowNotes, salesShowNotes)) &&
            (identical(other.salesDateStamp, salesDateStamp) || const DeepCollectionEquality().equals(other.salesDateStamp, salesDateStamp)) &&
            (identical(other.salesInventoryPrice, salesInventoryPrice) || const DeepCollectionEquality().equals(other.salesInventoryPrice, salesInventoryPrice)) &&
            (identical(other.salesInventoryCost, salesInventoryCost) || const DeepCollectionEquality().equals(other.salesInventoryCost, salesInventoryCost)) &&
            (identical(other.facilityShowDescription, facilityShowDescription) || const DeepCollectionEquality().equals(other.facilityShowDescription, facilityShowDescription)) &&
            (identical(other.facilityDescriptionWidth, facilityDescriptionWidth) || const DeepCollectionEquality().equals(other.facilityDescriptionWidth, facilityDescriptionWidth)) &&
            (identical(other.facilityShowFromDate, facilityShowFromDate) || const DeepCollectionEquality().equals(other.facilityShowFromDate, facilityShowFromDate)) &&
            (identical(other.facilityShowFromTime, facilityShowFromTime) || const DeepCollectionEquality().equals(other.facilityShowFromTime, facilityShowFromTime)) &&
            (identical(other.facilityShowToDate, facilityShowToDate) || const DeepCollectionEquality().equals(other.facilityShowToDate, facilityShowToDate)) &&
            (identical(other.facilityShowToTime, facilityShowToTime) || const DeepCollectionEquality().equals(other.facilityShowToTime, facilityShowToTime)) &&
            (identical(other.facilityShowWeeksAndDays, facilityShowWeeksAndDays) || const DeepCollectionEquality().equals(other.facilityShowWeeksAndDays, facilityShowWeeksAndDays)) &&
            (identical(other.facilityShowMonthsAndDays, facilityShowMonthsAndDays) || const DeepCollectionEquality().equals(other.facilityShowMonthsAndDays, facilityShowMonthsAndDays)) &&
            (identical(other.facilityShowBillablePeriods, facilityShowBillablePeriods) || const DeepCollectionEquality().equals(other.facilityShowBillablePeriods, facilityShowBillablePeriods)) &&
            (identical(other.facilityShowRate, facilityShowRate) || const DeepCollectionEquality().equals(other.facilityShowRate, facilityShowRate)) &&
            (identical(other.facilityShowDaysPerWeek, facilityShowDaysPerWeek) || const DeepCollectionEquality().equals(other.facilityShowDaysPerWeek, facilityShowDaysPerWeek)) &&
            (identical(other.facilityShowDiscountPercent, facilityShowDiscountPercent) || const DeepCollectionEquality().equals(other.facilityShowDiscountPercent, facilityShowDiscountPercent)) &&
            (identical(other.facilityShowSplit, facilityShowSplit) || const DeepCollectionEquality().equals(other.facilityShowSplit, facilityShowSplit)) &&
            (identical(other.facilityShowUnit, facilityShowUnit) || const DeepCollectionEquality().equals(other.facilityShowUnit, facilityShowUnit)) &&
            (identical(other.facilityShowUnitDiscountAmount, facilityShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.facilityShowUnitDiscountAmount, facilityShowUnitDiscountAmount)) &&
            (identical(other.facilityShowUnitExtended, facilityShowUnitExtended) || const DeepCollectionEquality().equals(other.facilityShowUnitExtended, facilityShowUnitExtended)) &&
            (identical(other.facilityShowWeeklyDiscountAmount, facilityShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.facilityShowWeeklyDiscountAmount, facilityShowWeeklyDiscountAmount)) &&
            (identical(other.facilityShowWeeklyExtended, facilityShowWeeklyExtended) || const DeepCollectionEquality().equals(other.facilityShowWeeklyExtended, facilityShowWeeklyExtended)) &&
            (identical(other.facilityShowMonthlyDiscountAmount, facilityShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.facilityShowMonthlyDiscountAmount, facilityShowMonthlyDiscountAmount)) &&
            (identical(other.facilityShowMonthlyExtended, facilityShowMonthlyExtended) || const DeepCollectionEquality().equals(other.facilityShowMonthlyExtended, facilityShowMonthlyExtended)) &&
            (identical(other.facilityShowPeriodDiscountAmount, facilityShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.facilityShowPeriodDiscountAmount, facilityShowPeriodDiscountAmount)) &&
            (identical(other.facilityShowPeriodExtended, facilityShowPeriodExtended) || const DeepCollectionEquality().equals(other.facilityShowPeriodExtended, facilityShowPeriodExtended)) &&
            (identical(other.facilityShowTaxable, facilityShowTaxable) || const DeepCollectionEquality().equals(other.facilityShowTaxable, facilityShowTaxable)) &&
            (identical(other.facilityShowNotes, facilityShowNotes) || const DeepCollectionEquality().equals(other.facilityShowNotes, facilityShowNotes)) &&
            (identical(other.facilityDateStamp, facilityDateStamp) || const DeepCollectionEquality().equals(other.facilityDateStamp, facilityDateStamp)) &&
            (identical(other.facilityDescription, facilityDescription) || const DeepCollectionEquality().equals(other.facilityDescription, facilityDescription)) &&
            (identical(other.laborShowICode, laborShowICode) || const DeepCollectionEquality().equals(other.laborShowICode, laborShowICode)) &&
            (identical(other.laborICodeWidth, laborICodeWidth) || const DeepCollectionEquality().equals(other.laborICodeWidth, laborICodeWidth)) &&
            (identical(other.laborShowDescription, laborShowDescription) || const DeepCollectionEquality().equals(other.laborShowDescription, laborShowDescription)) &&
            (identical(other.laborDescriptionWidth, laborDescriptionWidth) || const DeepCollectionEquality().equals(other.laborDescriptionWidth, laborDescriptionWidth)) &&
            (identical(other.laborShowOrderActivity, laborShowOrderActivity) || const DeepCollectionEquality().equals(other.laborShowOrderActivity, laborShowOrderActivity)) &&
            (identical(other.laborShowCrewName, laborShowCrewName) || const DeepCollectionEquality().equals(other.laborShowCrewName, laborShowCrewName)) &&
            (identical(other.laborShowFromDate, laborShowFromDate) || const DeepCollectionEquality().equals(other.laborShowFromDate, laborShowFromDate)) &&
            (identical(other.laborShowFromTime, laborShowFromTime) || const DeepCollectionEquality().equals(other.laborShowFromTime, laborShowFromTime)) &&
            (identical(other.laborShowToDate, laborShowToDate) || const DeepCollectionEquality().equals(other.laborShowToDate, laborShowToDate)) &&
            (identical(other.laborShowToTime, laborShowToTime) || const DeepCollectionEquality().equals(other.laborShowToTime, laborShowToTime)) &&
            (identical(other.laborShowBillablePeriods, laborShowBillablePeriods) || const DeepCollectionEquality().equals(other.laborShowBillablePeriods, laborShowBillablePeriods)) &&
            (identical(other.laborShowHours, laborShowHours) || const DeepCollectionEquality().equals(other.laborShowHours, laborShowHours)) &&
            (identical(other.laborShowSubQuantity, laborShowSubQuantity) || const DeepCollectionEquality().equals(other.laborShowSubQuantity, laborShowSubQuantity)) &&
            (identical(other.laborShowCost, laborShowCost) || const DeepCollectionEquality().equals(other.laborShowCost, laborShowCost)) &&
            (identical(other.laborShowRate, laborShowRate) || const DeepCollectionEquality().equals(other.laborShowRate, laborShowRate)) &&
            (identical(other.laborShowPeriodCostExtended, laborShowPeriodCostExtended) || const DeepCollectionEquality().equals(other.laborShowPeriodCostExtended, laborShowPeriodCostExtended)) &&
            (identical(other.laborShowDiscountPercent, laborShowDiscountPercent) || const DeepCollectionEquality().equals(other.laborShowDiscountPercent, laborShowDiscountPercent)) &&
            (identical(other.laborShowUnit, laborShowUnit) || const DeepCollectionEquality().equals(other.laborShowUnit, laborShowUnit)) &&
            (identical(other.laborShowUnitDiscountAmount, laborShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowUnitDiscountAmount, laborShowUnitDiscountAmount)) &&
            (identical(other.laborShowUnitExtended, laborShowUnitExtended) || const DeepCollectionEquality().equals(other.laborShowUnitExtended, laborShowUnitExtended)) &&
            (identical(other.laborShowWeeklyDiscountAmount, laborShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowWeeklyDiscountAmount, laborShowWeeklyDiscountAmount)) &&
            (identical(other.laborShowWeeklyExtended, laborShowWeeklyExtended) || const DeepCollectionEquality().equals(other.laborShowWeeklyExtended, laborShowWeeklyExtended)) &&
            (identical(other.laborShowMonthlyDiscountAmount, laborShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowMonthlyDiscountAmount, laborShowMonthlyDiscountAmount)) &&
            (identical(other.laborShowMonthlyExtended, laborShowMonthlyExtended) || const DeepCollectionEquality().equals(other.laborShowMonthlyExtended, laborShowMonthlyExtended)) &&
            (identical(other.laborShowPeriodDiscountAmount, laborShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowPeriodDiscountAmount, laborShowPeriodDiscountAmount)) &&
            (identical(other.laborShowPeriodExtended, laborShowPeriodExtended) || const DeepCollectionEquality().equals(other.laborShowPeriodExtended, laborShowPeriodExtended)) &&
            (identical(other.laborShowWarehouse, laborShowWarehouse) || const DeepCollectionEquality().equals(other.laborShowWarehouse, laborShowWarehouse)) &&
            (identical(other.laborShowTaxable, laborShowTaxable) || const DeepCollectionEquality().equals(other.laborShowTaxable, laborShowTaxable)) &&
            (identical(other.laborShowNotes, laborShowNotes) || const DeepCollectionEquality().equals(other.laborShowNotes, laborShowNotes)) &&
            (identical(other.laborDateStamp, laborDateStamp) || const DeepCollectionEquality().equals(other.laborDateStamp, laborDateStamp)) &&
            (identical(other.hideCrewBreaks, hideCrewBreaks) || const DeepCollectionEquality().equals(other.hideCrewBreaks, hideCrewBreaks)) &&
            (identical(other.break1Paid, break1Paid) || const DeepCollectionEquality().equals(other.break1Paid, break1Paid)) &&
            (identical(other.break2Paid, break2Paid) || const DeepCollectionEquality().equals(other.break2Paid, break2Paid)) &&
            (identical(other.break3Paid, break3Paid) || const DeepCollectionEquality().equals(other.break3Paid, break3Paid)) &&
            (identical(other.miscShowICode, miscShowICode) || const DeepCollectionEquality().equals(other.miscShowICode, miscShowICode)) &&
            (identical(other.miscICodeWidth, miscICodeWidth) || const DeepCollectionEquality().equals(other.miscICodeWidth, miscICodeWidth)) &&
            (identical(other.miscShowDescription, miscShowDescription) || const DeepCollectionEquality().equals(other.miscShowDescription, miscShowDescription)) &&
            (identical(other.miscDescriptionWidth, miscDescriptionWidth) || const DeepCollectionEquality().equals(other.miscDescriptionWidth, miscDescriptionWidth)) &&
            (identical(other.miscShowFromDate, miscShowFromDate) || const DeepCollectionEquality().equals(other.miscShowFromDate, miscShowFromDate)) &&
            (identical(other.miscShowFromTime, miscShowFromTime) || const DeepCollectionEquality().equals(other.miscShowFromTime, miscShowFromTime)) &&
            (identical(other.miscShowToDate, miscShowToDate) || const DeepCollectionEquality().equals(other.miscShowToDate, miscShowToDate)) &&
            (identical(other.miscShowToTime, miscShowToTime) || const DeepCollectionEquality().equals(other.miscShowToTime, miscShowToTime)) &&
            (identical(other.miscShowBillablePeriods, miscShowBillablePeriods) || const DeepCollectionEquality().equals(other.miscShowBillablePeriods, miscShowBillablePeriods)) &&
            (identical(other.miscShowSubQuantity, miscShowSubQuantity) || const DeepCollectionEquality().equals(other.miscShowSubQuantity, miscShowSubQuantity)) &&
            (identical(other.miscShowWeeksAndDays, miscShowWeeksAndDays) || const DeepCollectionEquality().equals(other.miscShowWeeksAndDays, miscShowWeeksAndDays)) &&
            (identical(other.miscShowMonthsAndDays, miscShowMonthsAndDays) || const DeepCollectionEquality().equals(other.miscShowMonthsAndDays, miscShowMonthsAndDays)) &&
            (identical(other.miscShowUnit, miscShowUnit) || const DeepCollectionEquality().equals(other.miscShowUnit, miscShowUnit)) &&
            (identical(other.miscShowRate, miscShowRate) || const DeepCollectionEquality().equals(other.miscShowRate, miscShowRate)) &&
            (identical(other.miscShowCost, miscShowCost) || const DeepCollectionEquality().equals(other.miscShowCost, miscShowCost)) &&
            (identical(other.miscShowPeriodCostExtended, miscShowPeriodCostExtended) || const DeepCollectionEquality().equals(other.miscShowPeriodCostExtended, miscShowPeriodCostExtended)) &&
            (identical(other.miscShowDiscountPercent, miscShowDiscountPercent) || const DeepCollectionEquality().equals(other.miscShowDiscountPercent, miscShowDiscountPercent)) &&
            (identical(other.miscShowUnitDiscountAmount, miscShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowUnitDiscountAmount, miscShowUnitDiscountAmount)) &&
            (identical(other.miscShowUnitExtended, miscShowUnitExtended) || const DeepCollectionEquality().equals(other.miscShowUnitExtended, miscShowUnitExtended)) &&
            (identical(other.miscShowWeeklyDiscountAmount, miscShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowWeeklyDiscountAmount, miscShowWeeklyDiscountAmount)) &&
            (identical(other.miscShowWeeklyExtended, miscShowWeeklyExtended) || const DeepCollectionEquality().equals(other.miscShowWeeklyExtended, miscShowWeeklyExtended)) &&
            (identical(other.miscShowMonthlyDiscountAmount, miscShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowMonthlyDiscountAmount, miscShowMonthlyDiscountAmount)) &&
            (identical(other.miscShowMonthlyExtended, miscShowMonthlyExtended) || const DeepCollectionEquality().equals(other.miscShowMonthlyExtended, miscShowMonthlyExtended)) &&
            (identical(other.miscShowPeriodDiscountAmount, miscShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowPeriodDiscountAmount, miscShowPeriodDiscountAmount)) &&
            (identical(other.miscShowPeriodExtended, miscShowPeriodExtended) || const DeepCollectionEquality().equals(other.miscShowPeriodExtended, miscShowPeriodExtended)) &&
            (identical(other.miscShowWarehouse, miscShowWarehouse) || const DeepCollectionEquality().equals(other.miscShowWarehouse, miscShowWarehouse)) &&
            (identical(other.miscShowTaxable, miscShowTaxable) || const DeepCollectionEquality().equals(other.miscShowTaxable, miscShowTaxable)) &&
            (identical(other.miscShowNotes, miscShowNotes) || const DeepCollectionEquality().equals(other.miscShowNotes, miscShowNotes)) &&
            (identical(other.miscShowReturnToWarehouse, miscShowReturnToWarehouse) || const DeepCollectionEquality().equals(other.miscShowReturnToWarehouse, miscShowReturnToWarehouse)) &&
            (identical(other.miscDateStamp, miscDateStamp) || const DeepCollectionEquality().equals(other.miscDateStamp, miscDateStamp)) &&
            (identical(other.lossAndDamageShowOrderNumber, lossAndDamageShowOrderNumber) || const DeepCollectionEquality().equals(other.lossAndDamageShowOrderNumber, lossAndDamageShowOrderNumber)) &&
            (identical(other.lossAndDamageShowBarCode, lossAndDamageShowBarCode) || const DeepCollectionEquality().equals(other.lossAndDamageShowBarCode, lossAndDamageShowBarCode)) &&
            (identical(other.lossAndDamageShowSerialNumber, lossAndDamageShowSerialNumber) || const DeepCollectionEquality().equals(other.lossAndDamageShowSerialNumber, lossAndDamageShowSerialNumber)) &&
            (identical(other.lossAndDamageShowICode, lossAndDamageShowICode) || const DeepCollectionEquality().equals(other.lossAndDamageShowICode, lossAndDamageShowICode)) &&
            (identical(other.lossAndDamageICodeWidth, lossAndDamageICodeWidth) || const DeepCollectionEquality().equals(other.lossAndDamageICodeWidth, lossAndDamageICodeWidth)) &&
            (identical(other.lossAndDamageShowDescription, lossAndDamageShowDescription) || const DeepCollectionEquality().equals(other.lossAndDamageShowDescription, lossAndDamageShowDescription)) &&
            (identical(other.lossAndDamageDescriptionWidth, lossAndDamageDescriptionWidth) || const DeepCollectionEquality().equals(other.lossAndDamageDescriptionWidth, lossAndDamageDescriptionWidth)) &&
            (identical(other.lossAndDamageShowUnit, lossAndDamageShowUnit) || const DeepCollectionEquality().equals(other.lossAndDamageShowUnit, lossAndDamageShowUnit)) &&
            (identical(other.lossAndDamageShowRate, lossAndDamageShowRate) || const DeepCollectionEquality().equals(other.lossAndDamageShowRate, lossAndDamageShowRate)) &&
            (identical(other.lossAndDamageShowCost, lossAndDamageShowCost) || const DeepCollectionEquality().equals(other.lossAndDamageShowCost, lossAndDamageShowCost)) &&
            (identical(other.lossAndDamageShowDiscountPercent, lossAndDamageShowDiscountPercent) || const DeepCollectionEquality().equals(other.lossAndDamageShowDiscountPercent, lossAndDamageShowDiscountPercent)) &&
            (identical(other.lossAndDamageShowUnitDiscountAmount, lossAndDamageShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.lossAndDamageShowUnitDiscountAmount, lossAndDamageShowUnitDiscountAmount)) &&
            (identical(other.lossAndDamageShowUnitExtended, lossAndDamageShowUnitExtended) || const DeepCollectionEquality().equals(other.lossAndDamageShowUnitExtended, lossAndDamageShowUnitExtended)) &&
            (identical(other.lossAndDamageShowPeriodDiscountAmount, lossAndDamageShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.lossAndDamageShowPeriodDiscountAmount, lossAndDamageShowPeriodDiscountAmount)) &&
            (identical(other.lossAndDamageShowPeriodExtended, lossAndDamageShowPeriodExtended) || const DeepCollectionEquality().equals(other.lossAndDamageShowPeriodExtended, lossAndDamageShowPeriodExtended)) &&
            (identical(other.lossAndDamageShowWarehouse, lossAndDamageShowWarehouse) || const DeepCollectionEquality().equals(other.lossAndDamageShowWarehouse, lossAndDamageShowWarehouse)) &&
            (identical(other.lossAndDamageShowTaxable, lossAndDamageShowTaxable) || const DeepCollectionEquality().equals(other.lossAndDamageShowTaxable, lossAndDamageShowTaxable)) &&
            (identical(other.lossAndDamageShowNotes, lossAndDamageShowNotes) || const DeepCollectionEquality().equals(other.lossAndDamageShowNotes, lossAndDamageShowNotes)) &&
            (identical(other.lossAndDamageDateStamp, lossAndDamageDateStamp) || const DeepCollectionEquality().equals(other.lossAndDamageDateStamp, lossAndDamageDateStamp)) &&
            (identical(other.orderBy, orderBy) || const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsEventSettingsEventTypeEventTypeExtension
    on WebApiModulesSettingsEventSettingsEventTypeEventType {
  WebApiModulesSettingsEventSettingsEventTypeEventType copyWith(
      {String? eventTypeId,
      String? eventType,
      bool? rentalShowICode,
      int? rentalICodeWidth,
      bool? rentalShowDescription,
      int? rentalDescriptionWidth,
      bool? rentalShowPickDate,
      bool? rentalShowPickTime,
      bool? rentalShowFromDate,
      bool? rentalShowFromTime,
      bool? rentalShowToDate,
      bool? rentalShowToTime,
      bool? rentalShowBillablePeriods,
      bool? rentalShowEpisodes,
      bool? rentalShowSubQuantity,
      bool? rentalShowAvailableQuantity,
      bool? rentalShowConflictDate,
      bool? rentalShowAvailableQuantityAllWarehouses,
      bool? rentalShowConflictDateAllWarehouses,
      bool? rentalShowReservedItems,
      bool? rentalShowConsignmentQuantity,
      bool? rentalShowConsignmentAvailableQuantity,
      bool? rentalShowConsignmentConflictDate,
      bool? rentalShowRate,
      bool? rentalShowDaysPerWeek,
      bool? rentalShowPremiumPercent,
      bool? rentalShowUnit,
      bool? rentalShowCost,
      bool? rentalShowDiscountPercent,
      bool? rentalShowMarkupPercent,
      bool? rentalShowMarginPercent,
      bool? rentalShowUnitDiscountAmount,
      bool? rentalShowUnitExtended,
      bool? rentalShowWeeklyDiscountAmount,
      bool? rentalShowWeeklyExtended,
      bool? rentalShowEpisodeExtended,
      bool? rentalShowEpisodeDiscountAmount,
      bool? rentalShowMonthlyDiscountAmount,
      bool? rentalShowMonthlyExtended,
      bool? rentalShowPeriodDiscountAmount,
      bool? rentalShowPeriodExtended,
      bool? rentalShowWarehouse,
      bool? rentalShowTaxable,
      bool? rentalShowNotes,
      bool? rentalShowReturnToWarehouse,
      String? rentalDateStamp,
      bool? salesShowICode,
      int? salesICodeWidth,
      bool? salesShowDescription,
      int? salesDescriptionWidth,
      bool? salesShowManufacturerPartNumber,
      int? salesManufacturerPartNumberWidth,
      bool? salesShowPickDate,
      bool? salesShowPickTime,
      bool? salesShowSubQuantity,
      bool? salesShowCost,
      bool? salesShowRate,
      bool? salesShowAvailableQuantity,
      bool? salesShowConflictDate,
      bool? salesShowAvailableQuantityAllWarehouses,
      bool? salesShowConflictDateAllWarehouses,
      bool? salesShowMarkupPercent,
      bool? salesShowMarginPercent,
      bool? salesShowUnit,
      bool? salesShowPeriodCostExtended,
      bool? salesShowDiscountPercent,
      bool? salesShowUnitDiscountAmount,
      bool? salesShowUnitExtended,
      bool? salesShowPeriodDiscountAmount,
      bool? salesShowPeriodExtended,
      bool? salesShowVariancePercent,
      bool? salesShowVarianceExtended,
      bool? salesShowWarehouse,
      bool? salesShowTaxable,
      bool? salesShowNotes,
      String? salesDateStamp,
      String? salesInventoryPrice,
      String? salesInventoryCost,
      bool? facilityShowDescription,
      int? facilityDescriptionWidth,
      bool? facilityShowFromDate,
      bool? facilityShowFromTime,
      bool? facilityShowToDate,
      bool? facilityShowToTime,
      bool? facilityShowWeeksAndDays,
      bool? facilityShowMonthsAndDays,
      bool? facilityShowBillablePeriods,
      bool? facilityShowRate,
      bool? facilityShowDaysPerWeek,
      bool? facilityShowDiscountPercent,
      bool? facilityShowSplit,
      bool? facilityShowUnit,
      bool? facilityShowUnitDiscountAmount,
      bool? facilityShowUnitExtended,
      bool? facilityShowWeeklyDiscountAmount,
      bool? facilityShowWeeklyExtended,
      bool? facilityShowMonthlyDiscountAmount,
      bool? facilityShowMonthlyExtended,
      bool? facilityShowPeriodDiscountAmount,
      bool? facilityShowPeriodExtended,
      bool? facilityShowTaxable,
      bool? facilityShowNotes,
      String? facilityDateStamp,
      String? facilityDescription,
      bool? laborShowICode,
      int? laborICodeWidth,
      bool? laborShowDescription,
      int? laborDescriptionWidth,
      bool? laborShowOrderActivity,
      bool? laborShowCrewName,
      bool? laborShowFromDate,
      bool? laborShowFromTime,
      bool? laborShowToDate,
      bool? laborShowToTime,
      bool? laborShowBillablePeriods,
      bool? laborShowHours,
      bool? laborShowSubQuantity,
      bool? laborShowCost,
      bool? laborShowRate,
      bool? laborShowPeriodCostExtended,
      bool? laborShowDiscountPercent,
      bool? laborShowUnit,
      bool? laborShowUnitDiscountAmount,
      bool? laborShowUnitExtended,
      bool? laborShowWeeklyDiscountAmount,
      bool? laborShowWeeklyExtended,
      bool? laborShowMonthlyDiscountAmount,
      bool? laborShowMonthlyExtended,
      bool? laborShowPeriodDiscountAmount,
      bool? laborShowPeriodExtended,
      bool? laborShowWarehouse,
      bool? laborShowTaxable,
      bool? laborShowNotes,
      String? laborDateStamp,
      bool? hideCrewBreaks,
      bool? break1Paid,
      bool? break2Paid,
      bool? break3Paid,
      bool? miscShowICode,
      int? miscICodeWidth,
      bool? miscShowDescription,
      int? miscDescriptionWidth,
      bool? miscShowFromDate,
      bool? miscShowFromTime,
      bool? miscShowToDate,
      bool? miscShowToTime,
      bool? miscShowBillablePeriods,
      bool? miscShowSubQuantity,
      bool? miscShowWeeksAndDays,
      bool? miscShowMonthsAndDays,
      bool? miscShowUnit,
      bool? miscShowRate,
      bool? miscShowCost,
      bool? miscShowPeriodCostExtended,
      bool? miscShowDiscountPercent,
      bool? miscShowUnitDiscountAmount,
      bool? miscShowUnitExtended,
      bool? miscShowWeeklyDiscountAmount,
      bool? miscShowWeeklyExtended,
      bool? miscShowMonthlyDiscountAmount,
      bool? miscShowMonthlyExtended,
      bool? miscShowPeriodDiscountAmount,
      bool? miscShowPeriodExtended,
      bool? miscShowWarehouse,
      bool? miscShowTaxable,
      bool? miscShowNotes,
      bool? miscShowReturnToWarehouse,
      String? miscDateStamp,
      bool? lossAndDamageShowOrderNumber,
      bool? lossAndDamageShowBarCode,
      bool? lossAndDamageShowSerialNumber,
      bool? lossAndDamageShowICode,
      int? lossAndDamageICodeWidth,
      bool? lossAndDamageShowDescription,
      int? lossAndDamageDescriptionWidth,
      bool? lossAndDamageShowUnit,
      bool? lossAndDamageShowRate,
      bool? lossAndDamageShowCost,
      bool? lossAndDamageShowDiscountPercent,
      bool? lossAndDamageShowUnitDiscountAmount,
      bool? lossAndDamageShowUnitExtended,
      bool? lossAndDamageShowPeriodDiscountAmount,
      bool? lossAndDamageShowPeriodExtended,
      bool? lossAndDamageShowWarehouse,
      bool? lossAndDamageShowTaxable,
      bool? lossAndDamageShowNotes,
      String? lossAndDamageDateStamp,
      double? orderBy,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsEventSettingsEventTypeEventType(
        eventTypeId: eventTypeId ?? this.eventTypeId,
        eventType: eventType ?? this.eventType,
        rentalShowICode: rentalShowICode ?? this.rentalShowICode,
        rentalICodeWidth: rentalICodeWidth ?? this.rentalICodeWidth,
        rentalShowDescription:
            rentalShowDescription ?? this.rentalShowDescription,
        rentalDescriptionWidth:
            rentalDescriptionWidth ?? this.rentalDescriptionWidth,
        rentalShowPickDate: rentalShowPickDate ?? this.rentalShowPickDate,
        rentalShowPickTime: rentalShowPickTime ?? this.rentalShowPickTime,
        rentalShowFromDate: rentalShowFromDate ?? this.rentalShowFromDate,
        rentalShowFromTime: rentalShowFromTime ?? this.rentalShowFromTime,
        rentalShowToDate: rentalShowToDate ?? this.rentalShowToDate,
        rentalShowToTime: rentalShowToTime ?? this.rentalShowToTime,
        rentalShowBillablePeriods:
            rentalShowBillablePeriods ?? this.rentalShowBillablePeriods,
        rentalShowEpisodes: rentalShowEpisodes ?? this.rentalShowEpisodes,
        rentalShowSubQuantity:
            rentalShowSubQuantity ?? this.rentalShowSubQuantity,
        rentalShowAvailableQuantity:
            rentalShowAvailableQuantity ?? this.rentalShowAvailableQuantity,
        rentalShowConflictDate:
            rentalShowConflictDate ?? this.rentalShowConflictDate,
        rentalShowAvailableQuantityAllWarehouses: rentalShowAvailableQuantityAllWarehouses ??
            this.rentalShowAvailableQuantityAllWarehouses,
        rentalShowConflictDateAllWarehouses: rentalShowConflictDateAllWarehouses ??
            this.rentalShowConflictDateAllWarehouses,
        rentalShowReservedItems:
            rentalShowReservedItems ?? this.rentalShowReservedItems,
        rentalShowConsignmentQuantity:
            rentalShowConsignmentQuantity ?? this.rentalShowConsignmentQuantity,
        rentalShowConsignmentAvailableQuantity: rentalShowConsignmentAvailableQuantity ??
            this.rentalShowConsignmentAvailableQuantity,
        rentalShowConsignmentConflictDate: rentalShowConsignmentConflictDate ??
            this.rentalShowConsignmentConflictDate,
        rentalShowRate: rentalShowRate ?? this.rentalShowRate,
        rentalShowDaysPerWeek:
            rentalShowDaysPerWeek ?? this.rentalShowDaysPerWeek,
        rentalShowPremiumPercent:
            rentalShowPremiumPercent ?? this.rentalShowPremiumPercent,
        rentalShowUnit: rentalShowUnit ?? this.rentalShowUnit,
        rentalShowCost: rentalShowCost ?? this.rentalShowCost,
        rentalShowDiscountPercent:
            rentalShowDiscountPercent ?? this.rentalShowDiscountPercent,
        rentalShowMarkupPercent:
            rentalShowMarkupPercent ?? this.rentalShowMarkupPercent,
        rentalShowMarginPercent:
            rentalShowMarginPercent ?? this.rentalShowMarginPercent,
        rentalShowUnitDiscountAmount:
            rentalShowUnitDiscountAmount ?? this.rentalShowUnitDiscountAmount,
        rentalShowUnitExtended:
            rentalShowUnitExtended ?? this.rentalShowUnitExtended,
        rentalShowWeeklyDiscountAmount: rentalShowWeeklyDiscountAmount ??
            this.rentalShowWeeklyDiscountAmount,
        rentalShowWeeklyExtended:
            rentalShowWeeklyExtended ?? this.rentalShowWeeklyExtended,
        rentalShowEpisodeExtended:
            rentalShowEpisodeExtended ?? this.rentalShowEpisodeExtended,
        rentalShowEpisodeDiscountAmount: rentalShowEpisodeDiscountAmount ??
            this.rentalShowEpisodeDiscountAmount,
        rentalShowMonthlyDiscountAmount: rentalShowMonthlyDiscountAmount ??
            this.rentalShowMonthlyDiscountAmount,
        rentalShowMonthlyExtended:
            rentalShowMonthlyExtended ?? this.rentalShowMonthlyExtended,
        rentalShowPeriodDiscountAmount: rentalShowPeriodDiscountAmount ??
            this.rentalShowPeriodDiscountAmount,
        rentalShowPeriodExtended:
            rentalShowPeriodExtended ?? this.rentalShowPeriodExtended,
        rentalShowWarehouse: rentalShowWarehouse ?? this.rentalShowWarehouse,
        rentalShowTaxable: rentalShowTaxable ?? this.rentalShowTaxable,
        rentalShowNotes: rentalShowNotes ?? this.rentalShowNotes,
        rentalShowReturnToWarehouse:
            rentalShowReturnToWarehouse ?? this.rentalShowReturnToWarehouse,
        rentalDateStamp: rentalDateStamp ?? this.rentalDateStamp,
        salesShowICode: salesShowICode ?? this.salesShowICode,
        salesICodeWidth: salesICodeWidth ?? this.salesICodeWidth,
        salesShowDescription: salesShowDescription ?? this.salesShowDescription,
        salesDescriptionWidth:
            salesDescriptionWidth ?? this.salesDescriptionWidth,
        salesShowManufacturerPartNumber: salesShowManufacturerPartNumber ??
            this.salesShowManufacturerPartNumber,
        salesManufacturerPartNumberWidth: salesManufacturerPartNumberWidth ??
            this.salesManufacturerPartNumberWidth,
        salesShowPickDate: salesShowPickDate ?? this.salesShowPickDate,
        salesShowPickTime: salesShowPickTime ?? this.salesShowPickTime,
        salesShowSubQuantity: salesShowSubQuantity ?? this.salesShowSubQuantity,
        salesShowCost: salesShowCost ?? this.salesShowCost,
        salesShowRate: salesShowRate ?? this.salesShowRate,
        salesShowAvailableQuantity:
            salesShowAvailableQuantity ?? this.salesShowAvailableQuantity,
        salesShowConflictDate:
            salesShowConflictDate ?? this.salesShowConflictDate,
        salesShowAvailableQuantityAllWarehouses:
            salesShowAvailableQuantityAllWarehouses ?? this.salesShowAvailableQuantityAllWarehouses,
        salesShowConflictDateAllWarehouses: salesShowConflictDateAllWarehouses ?? this.salesShowConflictDateAllWarehouses,
        salesShowMarkupPercent: salesShowMarkupPercent ?? this.salesShowMarkupPercent,
        salesShowMarginPercent: salesShowMarginPercent ?? this.salesShowMarginPercent,
        salesShowUnit: salesShowUnit ?? this.salesShowUnit,
        salesShowPeriodCostExtended: salesShowPeriodCostExtended ?? this.salesShowPeriodCostExtended,
        salesShowDiscountPercent: salesShowDiscountPercent ?? this.salesShowDiscountPercent,
        salesShowUnitDiscountAmount: salesShowUnitDiscountAmount ?? this.salesShowUnitDiscountAmount,
        salesShowUnitExtended: salesShowUnitExtended ?? this.salesShowUnitExtended,
        salesShowPeriodDiscountAmount: salesShowPeriodDiscountAmount ?? this.salesShowPeriodDiscountAmount,
        salesShowPeriodExtended: salesShowPeriodExtended ?? this.salesShowPeriodExtended,
        salesShowVariancePercent: salesShowVariancePercent ?? this.salesShowVariancePercent,
        salesShowVarianceExtended: salesShowVarianceExtended ?? this.salesShowVarianceExtended,
        salesShowWarehouse: salesShowWarehouse ?? this.salesShowWarehouse,
        salesShowTaxable: salesShowTaxable ?? this.salesShowTaxable,
        salesShowNotes: salesShowNotes ?? this.salesShowNotes,
        salesDateStamp: salesDateStamp ?? this.salesDateStamp,
        salesInventoryPrice: salesInventoryPrice ?? this.salesInventoryPrice,
        salesInventoryCost: salesInventoryCost ?? this.salesInventoryCost,
        facilityShowDescription: facilityShowDescription ?? this.facilityShowDescription,
        facilityDescriptionWidth: facilityDescriptionWidth ?? this.facilityDescriptionWidth,
        facilityShowFromDate: facilityShowFromDate ?? this.facilityShowFromDate,
        facilityShowFromTime: facilityShowFromTime ?? this.facilityShowFromTime,
        facilityShowToDate: facilityShowToDate ?? this.facilityShowToDate,
        facilityShowToTime: facilityShowToTime ?? this.facilityShowToTime,
        facilityShowWeeksAndDays: facilityShowWeeksAndDays ?? this.facilityShowWeeksAndDays,
        facilityShowMonthsAndDays: facilityShowMonthsAndDays ?? this.facilityShowMonthsAndDays,
        facilityShowBillablePeriods: facilityShowBillablePeriods ?? this.facilityShowBillablePeriods,
        facilityShowRate: facilityShowRate ?? this.facilityShowRate,
        facilityShowDaysPerWeek: facilityShowDaysPerWeek ?? this.facilityShowDaysPerWeek,
        facilityShowDiscountPercent: facilityShowDiscountPercent ?? this.facilityShowDiscountPercent,
        facilityShowSplit: facilityShowSplit ?? this.facilityShowSplit,
        facilityShowUnit: facilityShowUnit ?? this.facilityShowUnit,
        facilityShowUnitDiscountAmount: facilityShowUnitDiscountAmount ?? this.facilityShowUnitDiscountAmount,
        facilityShowUnitExtended: facilityShowUnitExtended ?? this.facilityShowUnitExtended,
        facilityShowWeeklyDiscountAmount: facilityShowWeeklyDiscountAmount ?? this.facilityShowWeeklyDiscountAmount,
        facilityShowWeeklyExtended: facilityShowWeeklyExtended ?? this.facilityShowWeeklyExtended,
        facilityShowMonthlyDiscountAmount: facilityShowMonthlyDiscountAmount ?? this.facilityShowMonthlyDiscountAmount,
        facilityShowMonthlyExtended: facilityShowMonthlyExtended ?? this.facilityShowMonthlyExtended,
        facilityShowPeriodDiscountAmount: facilityShowPeriodDiscountAmount ?? this.facilityShowPeriodDiscountAmount,
        facilityShowPeriodExtended: facilityShowPeriodExtended ?? this.facilityShowPeriodExtended,
        facilityShowTaxable: facilityShowTaxable ?? this.facilityShowTaxable,
        facilityShowNotes: facilityShowNotes ?? this.facilityShowNotes,
        facilityDateStamp: facilityDateStamp ?? this.facilityDateStamp,
        facilityDescription: facilityDescription ?? this.facilityDescription,
        laborShowICode: laborShowICode ?? this.laborShowICode,
        laborICodeWidth: laborICodeWidth ?? this.laborICodeWidth,
        laborShowDescription: laborShowDescription ?? this.laborShowDescription,
        laborDescriptionWidth: laborDescriptionWidth ?? this.laborDescriptionWidth,
        laborShowOrderActivity: laborShowOrderActivity ?? this.laborShowOrderActivity,
        laborShowCrewName: laborShowCrewName ?? this.laborShowCrewName,
        laborShowFromDate: laborShowFromDate ?? this.laborShowFromDate,
        laborShowFromTime: laborShowFromTime ?? this.laborShowFromTime,
        laborShowToDate: laborShowToDate ?? this.laborShowToDate,
        laborShowToTime: laborShowToTime ?? this.laborShowToTime,
        laborShowBillablePeriods: laborShowBillablePeriods ?? this.laborShowBillablePeriods,
        laborShowHours: laborShowHours ?? this.laborShowHours,
        laborShowSubQuantity: laborShowSubQuantity ?? this.laborShowSubQuantity,
        laborShowCost: laborShowCost ?? this.laborShowCost,
        laborShowRate: laborShowRate ?? this.laborShowRate,
        laborShowPeriodCostExtended: laborShowPeriodCostExtended ?? this.laborShowPeriodCostExtended,
        laborShowDiscountPercent: laborShowDiscountPercent ?? this.laborShowDiscountPercent,
        laborShowUnit: laborShowUnit ?? this.laborShowUnit,
        laborShowUnitDiscountAmount: laborShowUnitDiscountAmount ?? this.laborShowUnitDiscountAmount,
        laborShowUnitExtended: laborShowUnitExtended ?? this.laborShowUnitExtended,
        laborShowWeeklyDiscountAmount: laborShowWeeklyDiscountAmount ?? this.laborShowWeeklyDiscountAmount,
        laborShowWeeklyExtended: laborShowWeeklyExtended ?? this.laborShowWeeklyExtended,
        laborShowMonthlyDiscountAmount: laborShowMonthlyDiscountAmount ?? this.laborShowMonthlyDiscountAmount,
        laborShowMonthlyExtended: laborShowMonthlyExtended ?? this.laborShowMonthlyExtended,
        laborShowPeriodDiscountAmount: laborShowPeriodDiscountAmount ?? this.laborShowPeriodDiscountAmount,
        laborShowPeriodExtended: laborShowPeriodExtended ?? this.laborShowPeriodExtended,
        laborShowWarehouse: laborShowWarehouse ?? this.laborShowWarehouse,
        laborShowTaxable: laborShowTaxable ?? this.laborShowTaxable,
        laborShowNotes: laborShowNotes ?? this.laborShowNotes,
        laborDateStamp: laborDateStamp ?? this.laborDateStamp,
        hideCrewBreaks: hideCrewBreaks ?? this.hideCrewBreaks,
        break1Paid: break1Paid ?? this.break1Paid,
        break2Paid: break2Paid ?? this.break2Paid,
        break3Paid: break3Paid ?? this.break3Paid,
        miscShowICode: miscShowICode ?? this.miscShowICode,
        miscICodeWidth: miscICodeWidth ?? this.miscICodeWidth,
        miscShowDescription: miscShowDescription ?? this.miscShowDescription,
        miscDescriptionWidth: miscDescriptionWidth ?? this.miscDescriptionWidth,
        miscShowFromDate: miscShowFromDate ?? this.miscShowFromDate,
        miscShowFromTime: miscShowFromTime ?? this.miscShowFromTime,
        miscShowToDate: miscShowToDate ?? this.miscShowToDate,
        miscShowToTime: miscShowToTime ?? this.miscShowToTime,
        miscShowBillablePeriods: miscShowBillablePeriods ?? this.miscShowBillablePeriods,
        miscShowSubQuantity: miscShowSubQuantity ?? this.miscShowSubQuantity,
        miscShowWeeksAndDays: miscShowWeeksAndDays ?? this.miscShowWeeksAndDays,
        miscShowMonthsAndDays: miscShowMonthsAndDays ?? this.miscShowMonthsAndDays,
        miscShowUnit: miscShowUnit ?? this.miscShowUnit,
        miscShowRate: miscShowRate ?? this.miscShowRate,
        miscShowCost: miscShowCost ?? this.miscShowCost,
        miscShowPeriodCostExtended: miscShowPeriodCostExtended ?? this.miscShowPeriodCostExtended,
        miscShowDiscountPercent: miscShowDiscountPercent ?? this.miscShowDiscountPercent,
        miscShowUnitDiscountAmount: miscShowUnitDiscountAmount ?? this.miscShowUnitDiscountAmount,
        miscShowUnitExtended: miscShowUnitExtended ?? this.miscShowUnitExtended,
        miscShowWeeklyDiscountAmount: miscShowWeeklyDiscountAmount ?? this.miscShowWeeklyDiscountAmount,
        miscShowWeeklyExtended: miscShowWeeklyExtended ?? this.miscShowWeeklyExtended,
        miscShowMonthlyDiscountAmount: miscShowMonthlyDiscountAmount ?? this.miscShowMonthlyDiscountAmount,
        miscShowMonthlyExtended: miscShowMonthlyExtended ?? this.miscShowMonthlyExtended,
        miscShowPeriodDiscountAmount: miscShowPeriodDiscountAmount ?? this.miscShowPeriodDiscountAmount,
        miscShowPeriodExtended: miscShowPeriodExtended ?? this.miscShowPeriodExtended,
        miscShowWarehouse: miscShowWarehouse ?? this.miscShowWarehouse,
        miscShowTaxable: miscShowTaxable ?? this.miscShowTaxable,
        miscShowNotes: miscShowNotes ?? this.miscShowNotes,
        miscShowReturnToWarehouse: miscShowReturnToWarehouse ?? this.miscShowReturnToWarehouse,
        miscDateStamp: miscDateStamp ?? this.miscDateStamp,
        lossAndDamageShowOrderNumber: lossAndDamageShowOrderNumber ?? this.lossAndDamageShowOrderNumber,
        lossAndDamageShowBarCode: lossAndDamageShowBarCode ?? this.lossAndDamageShowBarCode,
        lossAndDamageShowSerialNumber: lossAndDamageShowSerialNumber ?? this.lossAndDamageShowSerialNumber,
        lossAndDamageShowICode: lossAndDamageShowICode ?? this.lossAndDamageShowICode,
        lossAndDamageICodeWidth: lossAndDamageICodeWidth ?? this.lossAndDamageICodeWidth,
        lossAndDamageShowDescription: lossAndDamageShowDescription ?? this.lossAndDamageShowDescription,
        lossAndDamageDescriptionWidth: lossAndDamageDescriptionWidth ?? this.lossAndDamageDescriptionWidth,
        lossAndDamageShowUnit: lossAndDamageShowUnit ?? this.lossAndDamageShowUnit,
        lossAndDamageShowRate: lossAndDamageShowRate ?? this.lossAndDamageShowRate,
        lossAndDamageShowCost: lossAndDamageShowCost ?? this.lossAndDamageShowCost,
        lossAndDamageShowDiscountPercent: lossAndDamageShowDiscountPercent ?? this.lossAndDamageShowDiscountPercent,
        lossAndDamageShowUnitDiscountAmount: lossAndDamageShowUnitDiscountAmount ?? this.lossAndDamageShowUnitDiscountAmount,
        lossAndDamageShowUnitExtended: lossAndDamageShowUnitExtended ?? this.lossAndDamageShowUnitExtended,
        lossAndDamageShowPeriodDiscountAmount: lossAndDamageShowPeriodDiscountAmount ?? this.lossAndDamageShowPeriodDiscountAmount,
        lossAndDamageShowPeriodExtended: lossAndDamageShowPeriodExtended ?? this.lossAndDamageShowPeriodExtended,
        lossAndDamageShowWarehouse: lossAndDamageShowWarehouse ?? this.lossAndDamageShowWarehouse,
        lossAndDamageShowTaxable: lossAndDamageShowTaxable ?? this.lossAndDamageShowTaxable,
        lossAndDamageShowNotes: lossAndDamageShowNotes ?? this.lossAndDamageShowNotes,
        lossAndDamageDateStamp: lossAndDamageDateStamp ?? this.lossAndDamageDateStamp,
        orderBy: orderBy ?? this.orderBy,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType {
  WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType({
    this.eventTypePersonnelTypeId,
    this.eventTypeId,
    this.personnelTypeId,
    this.personnelType,
    this.personnelTypeRename,
    this.showOfficePhone,
    this.showOfficeExtension,
    this.showCellular,
    this.orderBy,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeFromJson(
          json);

  @JsonKey(name: 'EventTypePersonnelTypeId', includeIfNull: false)
  final String? eventTypePersonnelTypeId;
  @JsonKey(name: 'EventTypeId', includeIfNull: false)
  final String? eventTypeId;
  @JsonKey(name: 'PersonnelTypeId', includeIfNull: false)
  final String? personnelTypeId;
  @JsonKey(name: 'PersonnelType', includeIfNull: false)
  final String? personnelType;
  @JsonKey(name: 'PersonnelTypeRename', includeIfNull: false)
  final String? personnelTypeRename;
  @JsonKey(name: 'ShowOfficePhone', includeIfNull: false)
  final bool? showOfficePhone;
  @JsonKey(name: 'ShowOfficeExtension', includeIfNull: false)
  final bool? showOfficeExtension;
  @JsonKey(name: 'ShowCellular', includeIfNull: false)
  final bool? showCellular;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType &&
            (identical(other.eventTypePersonnelTypeId, eventTypePersonnelTypeId) ||
                const DeepCollectionEquality().equals(
                    other.eventTypePersonnelTypeId,
                    eventTypePersonnelTypeId)) &&
            (identical(other.eventTypeId, eventTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.eventTypeId, eventTypeId)) &&
            (identical(other.personnelTypeId, personnelTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.personnelTypeId, personnelTypeId)) &&
            (identical(other.personnelType, personnelType) ||
                const DeepCollectionEquality()
                    .equals(other.personnelType, personnelType)) &&
            (identical(other.personnelTypeRename, personnelTypeRename) ||
                const DeepCollectionEquality()
                    .equals(other.personnelTypeRename, personnelTypeRename)) &&
            (identical(other.showOfficePhone, showOfficePhone) ||
                const DeepCollectionEquality()
                    .equals(other.showOfficePhone, showOfficePhone)) &&
            (identical(other.showOfficeExtension, showOfficeExtension) ||
                const DeepCollectionEquality()
                    .equals(other.showOfficeExtension, showOfficeExtension)) &&
            (identical(other.showCellular, showCellular) ||
                const DeepCollectionEquality()
                    .equals(other.showCellular, showCellular)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelTypeExtension
    on WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType {
  WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType
      copyWith(
          {String? eventTypePersonnelTypeId,
          String? eventTypeId,
          String? personnelTypeId,
          String? personnelType,
          String? personnelTypeRename,
          bool? showOfficePhone,
          bool? showOfficeExtension,
          bool? showCellular,
          double? orderBy,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsEventSettingsEventTypePersonnelTypeEventTypePersonnelType(
        eventTypePersonnelTypeId:
            eventTypePersonnelTypeId ?? this.eventTypePersonnelTypeId,
        eventTypeId: eventTypeId ?? this.eventTypeId,
        personnelTypeId: personnelTypeId ?? this.personnelTypeId,
        personnelType: personnelType ?? this.personnelType,
        personnelTypeRename: personnelTypeRename ?? this.personnelTypeRename,
        showOfficePhone: showOfficePhone ?? this.showOfficePhone,
        showOfficeExtension: showOfficeExtension ?? this.showOfficeExtension,
        showCellular: showCellular ?? this.showCellular,
        orderBy: orderBy ?? this.orderBy,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType {
  WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType({
    this.photographyTypeId,
    this.photographyType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeFromJson(
          json);

  @JsonKey(name: 'PhotographyTypeId', includeIfNull: false)
  final String? photographyTypeId;
  @JsonKey(name: 'PhotographyType', includeIfNull: false)
  final String? photographyType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType &&
            (identical(other.photographyTypeId, photographyTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.photographyTypeId, photographyTypeId)) &&
            (identical(other.photographyType, photographyType) ||
                const DeepCollectionEquality()
                    .equals(other.photographyType, photographyType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsEventSettingsPhotographyTypePhotographyTypeExtension
    on WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType {
  WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType copyWith(
      {String? photographyTypeId,
      String? photographyType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsEventSettingsPhotographyTypePhotographyType(
        photographyTypeId: photographyTypeId ?? this.photographyTypeId,
        photographyType: photographyType ?? this.photographyType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat {
  WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat({
    this.dataExportFormatId,
    this.exportType,
    this.description,
    this.active,
    this.exportString,
    this.inactive,
    this.defaultFormat,
    this.fileName,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatFromJson(
          json);

  @JsonKey(name: 'DataExportFormatId', includeIfNull: false)
  final int? dataExportFormatId;
  @JsonKey(name: 'ExportType', includeIfNull: false)
  final String? exportType;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Active', includeIfNull: false)
  final bool? active;
  @JsonKey(name: 'ExportString', includeIfNull: false)
  final String? exportString;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DefaultFormat', includeIfNull: false)
  final bool? defaultFormat;
  @JsonKey(name: 'FileName', includeIfNull: false)
  final String? fileName;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat &&
            (identical(other.dataExportFormatId, dataExportFormatId) ||
                const DeepCollectionEquality()
                    .equals(other.dataExportFormatId, dataExportFormatId)) &&
            (identical(other.exportType, exportType) ||
                const DeepCollectionEquality()
                    .equals(other.exportType, exportType)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.active, active) ||
                const DeepCollectionEquality().equals(other.active, active)) &&
            (identical(other.exportString, exportString) ||
                const DeepCollectionEquality()
                    .equals(other.exportString, exportString)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.defaultFormat, defaultFormat) ||
                const DeepCollectionEquality()
                    .equals(other.defaultFormat, defaultFormat)) &&
            (identical(other.fileName, fileName) ||
                const DeepCollectionEquality()
                    .equals(other.fileName, fileName)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormatExtension
    on WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat {
  WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat copyWith(
      {int? dataExportFormatId,
      String? exportType,
      String? description,
      bool? active,
      String? exportString,
      bool? inactive,
      bool? defaultFormat,
      String? fileName,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsExportSettingsDataExportFormatDataExportFormat(
        dataExportFormatId: dataExportFormatId ?? this.dataExportFormatId,
        exportType: exportType ?? this.exportType,
        description: description ?? this.description,
        active: active ?? this.active,
        exportString: exportString ?? this.exportString,
        inactive: inactive ?? this.inactive,
        defaultFormat: defaultFormat ?? this.defaultFormat,
        fileName: fileName ?? this.fileName,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFacilitySettingsBuildingBuilding {
  WebApiModulesSettingsFacilitySettingsBuildingBuilding({
    this.buildingId,
    this.building,
    this.buildingCode,
    this.officeLocationId,
    this.officeLocation,
    this.inactive,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsFacilitySettingsBuildingBuilding.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFacilitySettingsBuildingBuildingFromJson(json);

  @JsonKey(name: 'BuildingId', includeIfNull: false)
  final String? buildingId;
  @JsonKey(name: 'Building', includeIfNull: false)
  final String? building;
  @JsonKey(name: 'BuildingCode', includeIfNull: false)
  final String? buildingCode;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'OfficeLocation', includeIfNull: false)
  final String? officeLocation;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsBuildingBuildingFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsBuildingBuildingToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFacilitySettingsBuildingBuildingToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFacilitySettingsBuildingBuilding &&
            (identical(other.buildingId, buildingId) ||
                const DeepCollectionEquality()
                    .equals(other.buildingId, buildingId)) &&
            (identical(other.building, building) ||
                const DeepCollectionEquality()
                    .equals(other.building, building)) &&
            (identical(other.buildingCode, buildingCode) ||
                const DeepCollectionEquality()
                    .equals(other.buildingCode, buildingCode)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.officeLocation, officeLocation) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocation, officeLocation)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsFacilitySettingsBuildingBuildingExtension
    on WebApiModulesSettingsFacilitySettingsBuildingBuilding {
  WebApiModulesSettingsFacilitySettingsBuildingBuilding copyWith(
      {String? buildingId,
      String? building,
      String? buildingCode,
      String? officeLocationId,
      String? officeLocation,
      bool? inactive,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsFacilitySettingsBuildingBuilding(
        buildingId: buildingId ?? this.buildingId,
        building: building ?? this.building,
        buildingCode: buildingCode ?? this.buildingCode,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        officeLocation: officeLocation ?? this.officeLocation,
        inactive: inactive ?? this.inactive,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequest {
  WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequest({
    this.startAtIndex,
    this.floorIds,
  });

  factory WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequestFromJson(
          json);

  @JsonKey(name: 'StartAtIndex', includeIfNull: false)
  final int? startAtIndex;
  @JsonKey(name: 'FloorIds', includeIfNull: false, defaultValue: <String>[])
  final List<String>? floorIds;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequest &&
            (identical(other.startAtIndex, startAtIndex) ||
                const DeepCollectionEquality()
                    .equals(other.startAtIndex, startAtIndex)) &&
            (identical(other.floorIds, floorIds) ||
                const DeepCollectionEquality()
                    .equals(other.floorIds, floorIds)));
  }
}

extension $WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequestExtension
    on WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequest {
  WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequest copyWith(
      {int? startAtIndex, List<String>? floorIds}) {
    return WebApiModulesSettingsFacilitySettingsBuildingSortFloorsRequest(
        startAtIndex: startAtIndex ?? this.startAtIndex,
        floorIds: floorIds ?? this.floorIds);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequest {
  WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequest({
    this.startAtIndex,
    this.spaceRatesIds,
  });

  factory WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequestFromJson(
          json);

  @JsonKey(name: 'StartAtIndex', includeIfNull: false)
  final int? startAtIndex;
  @JsonKey(
      name: 'SpaceRatesIds', includeIfNull: false, defaultValue: <String>[])
  final List<String>? spaceRatesIds;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequest &&
            (identical(other.startAtIndex, startAtIndex) ||
                const DeepCollectionEquality()
                    .equals(other.startAtIndex, startAtIndex)) &&
            (identical(other.spaceRatesIds, spaceRatesIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceRatesIds, spaceRatesIds)));
  }
}

extension $WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequestExtension
    on WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequest {
  WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequest copyWith(
      {int? startAtIndex, List<String>? spaceRatesIds}) {
    return WebApiModulesSettingsFacilitySettingsBuildingSortSpaceRatesRequest(
        startAtIndex: startAtIndex ?? this.startAtIndex,
        spaceRatesIds: spaceRatesIds ?? this.spaceRatesIds);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequest {
  WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequest({
    this.startAtIndex,
    this.spaceIds,
  });

  factory WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequestFromJson(
          json);

  @JsonKey(name: 'StartAtIndex', includeIfNull: false)
  final int? startAtIndex;
  @JsonKey(name: 'SpaceIds', includeIfNull: false, defaultValue: <String>[])
  final List<String>? spaceIds;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequest &&
            (identical(other.startAtIndex, startAtIndex) ||
                const DeepCollectionEquality()
                    .equals(other.startAtIndex, startAtIndex)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)));
  }
}

extension $WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequestExtension
    on WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequest {
  WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequest copyWith(
      {int? startAtIndex, List<String>? spaceIds}) {
    return WebApiModulesSettingsFacilitySettingsBuildingSortSpacesRequest(
        startAtIndex: startAtIndex ?? this.startAtIndex,
        spaceIds: spaceIds ?? this.spaceIds);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory {
  WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory({
    this.facilityTypeId,
    this.facilityType,
    this.categoryId,
    this.category,
    this.warehouseCategory,
    this.catalogCategory,
    this.overrideProfitAndLossCategory,
    this.profitAndLossCategoryId,
    this.profitAndLossCategory,
    this.profitAndLossIncludeAsMiscExpense,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.consignmentIncomeAccountId,
    this.consignmentIncomeAccountNo,
    this.consignmentIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationMonths,
    this.salvageValuePercent,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.inventoryTypeOrderBy,
    this.orderBy,
    this.pickListOrderBy,
    this.subCategoryCount,
    this.inventoryCount,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryFromJson(
          json);

  @JsonKey(name: 'FacilityTypeId', includeIfNull: false)
  final String? facilityTypeId;
  @JsonKey(name: 'FacilityType', includeIfNull: false)
  final String? facilityType;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'WarehouseCategory', includeIfNull: false)
  final bool? warehouseCategory;
  @JsonKey(name: 'CatalogCategory', includeIfNull: false)
  final bool? catalogCategory;
  @JsonKey(name: 'OverrideProfitAndLossCategory', includeIfNull: false)
  final bool? overrideProfitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossCategoryId', includeIfNull: false)
  final String? profitAndLossCategoryId;
  @JsonKey(name: 'ProfitAndLossCategory', includeIfNull: false)
  final String? profitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossIncludeAsMiscExpense', includeIfNull: false)
  final bool? profitAndLossIncludeAsMiscExpense;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'ConsignmentIncomeAccountId', includeIfNull: false)
  final String? consignmentIncomeAccountId;
  @JsonKey(name: 'ConsignmentIncomeAccountNo', includeIfNull: false)
  final String? consignmentIncomeAccountNo;
  @JsonKey(name: 'ConsignmentIncomeAccountDescription', includeIfNull: false)
  final String? consignmentIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationMonths', includeIfNull: false)
  final int? depreciationMonths;
  @JsonKey(name: 'SalvageValuePercent', includeIfNull: false)
  final double? salvageValuePercent;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'InventoryTypeOrderBy', includeIfNull: false)
  final double? inventoryTypeOrderBy;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'PickListOrderBy', includeIfNull: false)
  final int? pickListOrderBy;
  @JsonKey(name: 'SubCategoryCount', includeIfNull: false)
  final int? subCategoryCount;
  @JsonKey(name: 'InventoryCount', includeIfNull: false)
  final int? inventoryCount;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory &&
            (identical(other.facilityTypeId, facilityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.facilityTypeId, facilityTypeId)) &&
            (identical(other.facilityType, facilityType) ||
                const DeepCollectionEquality()
                    .equals(other.facilityType, facilityType)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) ||
                const DeepCollectionEquality()
                    .equals(other.category, category)) &&
            (identical(other.warehouseCategory, warehouseCategory) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCategory, warehouseCategory)) &&
            (identical(other.catalogCategory, catalogCategory) ||
                const DeepCollectionEquality()
                    .equals(other.catalogCategory, catalogCategory)) &&
            (identical(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory) ||
                const DeepCollectionEquality().equals(
                    other.overrideProfitAndLossCategory,
                    overrideProfitAndLossCategory)) &&
            (identical(other.profitAndLossCategoryId, profitAndLossCategoryId) ||
                const DeepCollectionEquality().equals(
                    other.profitAndLossCategoryId, profitAndLossCategoryId)) &&
            (identical(other.profitAndLossCategory, profitAndLossCategory) ||
                const DeepCollectionEquality().equals(
                    other.profitAndLossCategory, profitAndLossCategory)) &&
            (identical(other.profitAndLossIncludeAsMiscExpense, profitAndLossIncludeAsMiscExpense) ||
                const DeepCollectionEquality().equals(
                    other.profitAndLossIncludeAsMiscExpense,
                    profitAndLossIncludeAsMiscExpense)) &&
            (identical(other.assetAccountId, assetAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) ||
                const DeepCollectionEquality()
                    .equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) || const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.consignmentIncomeAccountId, consignmentIncomeAccountId) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountId, consignmentIncomeAccountId)) &&
            (identical(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo)) &&
            (identical(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationMonths, depreciationMonths) || const DeepCollectionEquality().equals(other.depreciationMonths, depreciationMonths)) &&
            (identical(other.salvageValuePercent, salvageValuePercent) || const DeepCollectionEquality().equals(other.salvageValuePercent, salvageValuePercent)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.inventoryTypeOrderBy, inventoryTypeOrderBy) || const DeepCollectionEquality().equals(other.inventoryTypeOrderBy, inventoryTypeOrderBy)) &&
            (identical(other.orderBy, orderBy) || const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.pickListOrderBy, pickListOrderBy) || const DeepCollectionEquality().equals(other.pickListOrderBy, pickListOrderBy)) &&
            (identical(other.subCategoryCount, subCategoryCount) || const DeepCollectionEquality().equals(other.subCategoryCount, subCategoryCount)) &&
            (identical(other.inventoryCount, inventoryCount) || const DeepCollectionEquality().equals(other.inventoryCount, inventoryCount)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategoryExtension
    on WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory {
  WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory
      copyWith(
          {String? facilityTypeId,
          String? facilityType,
          String? categoryId,
          String? category,
          bool? warehouseCategory,
          bool? catalogCategory,
          bool? overrideProfitAndLossCategory,
          String? profitAndLossCategoryId,
          String? profitAndLossCategory,
          bool? profitAndLossIncludeAsMiscExpense,
          String? assetAccountId,
          String? assetAccountNo,
          String? assetAccountDescription,
          String? incomeAccountId,
          String? incomeAccountNo,
          String? incomeAccountDescription,
          String? subIncomeAccountId,
          String? subIncomeAccountNo,
          String? subIncomeAccountDescription,
          String? consignmentIncomeAccountId,
          String? consignmentIncomeAccountNo,
          String? consignmentIncomeAccountDescription,
          String? ldIncomeAccountId,
          String? ldIncomeAccountNo,
          String? ldIncomeAccountDescription,
          String? equipmentSaleIncomeAccountId,
          String? equipmentSaleIncomeAccountNo,
          String? equipmentSaleIncomeAccountDescription,
          String? expenseAccountId,
          String? expenseAccountNo,
          String? expenseAccountDescription,
          String? costOfGoodsSoldExpenseAccountId,
          String? costOfGoodsSoldExpenseAccountNo,
          String? costOfGoodsSoldExpenseAccountDescription,
          String? costOfGoodsRentedExpenseAccountId,
          String? costOfGoodsRentedExpenseAccountNo,
          String? costOfGoodsRentedExpenseAccountDescription,
          int? depreciationMonths,
          double? salvageValuePercent,
          String? depreciationExpenseAccountId,
          String? depreciationExpenseAccountNo,
          String? depreciationExpenseAccountDescription,
          String? accumulatedDepreciationExpenseAccountId,
          String? accumulatedDepreciationExpenseAccountNo,
          String? accumulatedDepreciationExpenseAccountDescription,
          double? inventoryTypeOrderBy,
          double? orderBy,
          int? pickListOrderBy,
          int? subCategoryCount,
          int? inventoryCount,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsFacilitySettingsFacilityCategoryFacilityCategory(
        facilityTypeId: facilityTypeId ?? this.facilityTypeId,
        facilityType: facilityType ?? this.facilityType,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        warehouseCategory: warehouseCategory ?? this.warehouseCategory,
        catalogCategory: catalogCategory ?? this.catalogCategory,
        overrideProfitAndLossCategory:
            overrideProfitAndLossCategory ?? this.overrideProfitAndLossCategory,
        profitAndLossCategoryId:
            profitAndLossCategoryId ?? this.profitAndLossCategoryId,
        profitAndLossCategory:
            profitAndLossCategory ?? this.profitAndLossCategory,
        profitAndLossIncludeAsMiscExpense: profitAndLossIncludeAsMiscExpense ??
            this.profitAndLossIncludeAsMiscExpense,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        consignmentIncomeAccountId:
            consignmentIncomeAccountId ?? this.consignmentIncomeAccountId,
        consignmentIncomeAccountNo:
            consignmentIncomeAccountNo ?? this.consignmentIncomeAccountNo,
        consignmentIncomeAccountDescription: consignmentIncomeAccountDescription ??
            this.consignmentIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription: equipmentSaleIncomeAccountDescription ??
            this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription:
            costOfGoodsSoldExpenseAccountDescription ??
                this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationMonths: depreciationMonths ?? this.depreciationMonths,
        salvageValuePercent: salvageValuePercent ?? this.salvageValuePercent,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription:
            depreciationExpenseAccountDescription ??
                this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId:
            accumulatedDepreciationExpenseAccountId ??
                this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo:
            accumulatedDepreciationExpenseAccountNo ??
                this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ??
                this.accumulatedDepreciationExpenseAccountDescription,
        inventoryTypeOrderBy: inventoryTypeOrderBy ?? this.inventoryTypeOrderBy,
        orderBy: orderBy ?? this.orderBy,
        pickListOrderBy: pickListOrderBy ?? this.pickListOrderBy,
        subCategoryCount: subCategoryCount ?? this.subCategoryCount,
        inventoryCount: inventoryCount ?? this.inventoryCount,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate {
  WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate({
    this.rateId,
    this.facilityTypeId,
    this.facilityType,
    this.rateType,
    this.includeAsProfitAndLossCategory,
    this.averageCost,
    this.price,
    this.hourlyRate,
    this.dailyRate,
    this.weeklyRate,
    this.monthlyRate,
    this.hourlyCost,
    this.dailyCost,
    this.weeklyCost,
    this.monthlyCost,
    this.iCode,
    this.description,
    this.availFor,
    this.categoryId,
    this.category,
    this.subCategoryCount,
    this.subCategoryId,
    this.subCategory,
    this.classification,
    this.classificationDescription,
    this.classificationColor,
    this.unitId,
    this.unit,
    this.unitType,
    this.nonDiscountable,
    this.overrideProfitAndLossCategory,
    this.profitAndLossCategoryId,
    this.profitAndLossCategory,
    this.autoCopyNotesToQuoteOrder,
    this.note,
    this.printNoteOnInContract,
    this.printNoteOnOutContract,
    this.printNoteOnReceiveContract,
    this.printNoteOnReturnContract,
    this.printNoteOnInvoice,
    this.printNoteOnOrder,
    this.printNoteOnPickList,
    this.printNoteOnPO,
    this.printNoteOnQuote,
    this.printNoteOnReturnList,
    this.printNoteOnPoReceiveList,
    this.printNoteOnPoReturnList,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.consignmentIncomeAccountId,
    this.consignmentIncomeAccountNo,
    this.consignmentIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.originalShowId,
    this.inactive,
    this.dateStamp,
    this.manifestShippingContainer,
    this.manifestStandAloneItem,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateFromJson(
          json);

  @JsonKey(name: 'RateId', includeIfNull: false)
  final String? rateId;
  @JsonKey(name: 'FacilityTypeId', includeIfNull: false)
  final String? facilityTypeId;
  @JsonKey(name: 'FacilityType', includeIfNull: false)
  final String? facilityType;
  @JsonKey(name: 'RateType', includeIfNull: false)
  final String? rateType;
  @JsonKey(name: 'IncludeAsProfitAndLossCategory', includeIfNull: false)
  final bool? includeAsProfitAndLossCategory;
  @JsonKey(name: 'AverageCost', includeIfNull: false)
  final double? averageCost;
  @JsonKey(name: 'Price', includeIfNull: false)
  final double? price;
  @JsonKey(name: 'HourlyRate', includeIfNull: false)
  final double? hourlyRate;
  @JsonKey(name: 'DailyRate', includeIfNull: false)
  final double? dailyRate;
  @JsonKey(name: 'WeeklyRate', includeIfNull: false)
  final double? weeklyRate;
  @JsonKey(name: 'MonthlyRate', includeIfNull: false)
  final double? monthlyRate;
  @JsonKey(name: 'HourlyCost', includeIfNull: false)
  final double? hourlyCost;
  @JsonKey(name: 'DailyCost', includeIfNull: false)
  final double? dailyCost;
  @JsonKey(name: 'WeeklyCost', includeIfNull: false)
  final double? weeklyCost;
  @JsonKey(name: 'MonthlyCost', includeIfNull: false)
  final double? monthlyCost;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'AvailFor', includeIfNull: false)
  final String? availFor;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'SubCategoryCount', includeIfNull: false)
  final int? subCategoryCount;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'SubCategory', includeIfNull: false)
  final String? subCategory;
  @JsonKey(name: 'Classification', includeIfNull: false)
  final String? classification;
  @JsonKey(name: 'ClassificationDescription', includeIfNull: false)
  final String? classificationDescription;
  @JsonKey(name: 'ClassificationColor', includeIfNull: false)
  final String? classificationColor;
  @JsonKey(name: 'UnitId', includeIfNull: false)
  final String? unitId;
  @JsonKey(name: 'Unit', includeIfNull: false)
  final String? unit;
  @JsonKey(name: 'UnitType', includeIfNull: false)
  final String? unitType;
  @JsonKey(name: 'NonDiscountable', includeIfNull: false)
  final bool? nonDiscountable;
  @JsonKey(name: 'OverrideProfitAndLossCategory', includeIfNull: false)
  final bool? overrideProfitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossCategoryId', includeIfNull: false)
  final String? profitAndLossCategoryId;
  @JsonKey(name: 'ProfitAndLossCategory', includeIfNull: false)
  final String? profitAndLossCategory;
  @JsonKey(name: 'AutoCopyNotesToQuoteOrder', includeIfNull: false)
  final bool? autoCopyNotesToQuoteOrder;
  @JsonKey(name: 'Note', includeIfNull: false)
  final String? note;
  @JsonKey(name: 'PrintNoteOnInContract', includeIfNull: false)
  final bool? printNoteOnInContract;
  @JsonKey(name: 'PrintNoteOnOutContract', includeIfNull: false)
  final bool? printNoteOnOutContract;
  @JsonKey(name: 'PrintNoteOnReceiveContract', includeIfNull: false)
  final bool? printNoteOnReceiveContract;
  @JsonKey(name: 'PrintNoteOnReturnContract', includeIfNull: false)
  final bool? printNoteOnReturnContract;
  @JsonKey(name: 'PrintNoteOnInvoice', includeIfNull: false)
  final bool? printNoteOnInvoice;
  @JsonKey(name: 'PrintNoteOnOrder', includeIfNull: false)
  final bool? printNoteOnOrder;
  @JsonKey(name: 'PrintNoteOnPickList', includeIfNull: false)
  final bool? printNoteOnPickList;
  @JsonKey(name: 'PrintNoteOnPO', includeIfNull: false)
  final bool? printNoteOnPO;
  @JsonKey(name: 'PrintNoteOnQuote', includeIfNull: false)
  final bool? printNoteOnQuote;
  @JsonKey(name: 'PrintNoteOnReturnList', includeIfNull: false)
  final bool? printNoteOnReturnList;
  @JsonKey(name: 'PrintNoteOnPoReceiveList', includeIfNull: false)
  final bool? printNoteOnPoReceiveList;
  @JsonKey(name: 'PrintNoteOnPoReturnList', includeIfNull: false)
  final bool? printNoteOnPoReturnList;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'ConsignmentIncomeAccountId', includeIfNull: false)
  final String? consignmentIncomeAccountId;
  @JsonKey(name: 'ConsignmentIncomeAccountNo', includeIfNull: false)
  final String? consignmentIncomeAccountNo;
  @JsonKey(name: 'ConsignmentIncomeAccountDescription', includeIfNull: false)
  final String? consignmentIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'ManifestShippingContainer', includeIfNull: false)
  final bool? manifestShippingContainer;
  @JsonKey(name: 'ManifestStandAloneItem', includeIfNull: false)
  final bool? manifestStandAloneItem;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate &&
            (identical(other.rateId, rateId) ||
                const DeepCollectionEquality().equals(other.rateId, rateId)) &&
            (identical(other.facilityTypeId, facilityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.facilityTypeId, facilityTypeId)) &&
            (identical(other.facilityType, facilityType) ||
                const DeepCollectionEquality()
                    .equals(other.facilityType, facilityType)) &&
            (identical(other.rateType, rateType) ||
                const DeepCollectionEquality()
                    .equals(other.rateType, rateType)) &&
            (identical(other.includeAsProfitAndLossCategory, includeAsProfitAndLossCategory) ||
                const DeepCollectionEquality().equals(
                    other.includeAsProfitAndLossCategory,
                    includeAsProfitAndLossCategory)) &&
            (identical(other.averageCost, averageCost) ||
                const DeepCollectionEquality()
                    .equals(other.averageCost, averageCost)) &&
            (identical(other.price, price) ||
                const DeepCollectionEquality().equals(other.price, price)) &&
            (identical(other.hourlyRate, hourlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyRate, hourlyRate)) &&
            (identical(other.dailyRate, dailyRate) ||
                const DeepCollectionEquality()
                    .equals(other.dailyRate, dailyRate)) &&
            (identical(other.weeklyRate, weeklyRate) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyRate, weeklyRate)) &&
            (identical(other.monthlyRate, monthlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyRate, monthlyRate)) &&
            (identical(other.hourlyCost, hourlyCost) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyCost, hourlyCost)) &&
            (identical(other.dailyCost, dailyCost) ||
                const DeepCollectionEquality()
                    .equals(other.dailyCost, dailyCost)) &&
            (identical(other.weeklyCost, weeklyCost) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyCost, weeklyCost)) &&
            (identical(other.monthlyCost, monthlyCost) || const DeepCollectionEquality().equals(other.monthlyCost, monthlyCost)) &&
            (identical(other.iCode, iCode) || const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) || const DeepCollectionEquality().equals(other.description, description)) &&
            (identical(other.availFor, availFor) || const DeepCollectionEquality().equals(other.availFor, availFor)) &&
            (identical(other.categoryId, categoryId) || const DeepCollectionEquality().equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) || const DeepCollectionEquality().equals(other.category, category)) &&
            (identical(other.subCategoryCount, subCategoryCount) || const DeepCollectionEquality().equals(other.subCategoryCount, subCategoryCount)) &&
            (identical(other.subCategoryId, subCategoryId) || const DeepCollectionEquality().equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.subCategory, subCategory) || const DeepCollectionEquality().equals(other.subCategory, subCategory)) &&
            (identical(other.classification, classification) || const DeepCollectionEquality().equals(other.classification, classification)) &&
            (identical(other.classificationDescription, classificationDescription) || const DeepCollectionEquality().equals(other.classificationDescription, classificationDescription)) &&
            (identical(other.classificationColor, classificationColor) || const DeepCollectionEquality().equals(other.classificationColor, classificationColor)) &&
            (identical(other.unitId, unitId) || const DeepCollectionEquality().equals(other.unitId, unitId)) &&
            (identical(other.unit, unit) || const DeepCollectionEquality().equals(other.unit, unit)) &&
            (identical(other.unitType, unitType) || const DeepCollectionEquality().equals(other.unitType, unitType)) &&
            (identical(other.nonDiscountable, nonDiscountable) || const DeepCollectionEquality().equals(other.nonDiscountable, nonDiscountable)) &&
            (identical(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory) || const DeepCollectionEquality().equals(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory)) &&
            (identical(other.profitAndLossCategoryId, profitAndLossCategoryId) || const DeepCollectionEquality().equals(other.profitAndLossCategoryId, profitAndLossCategoryId)) &&
            (identical(other.profitAndLossCategory, profitAndLossCategory) || const DeepCollectionEquality().equals(other.profitAndLossCategory, profitAndLossCategory)) &&
            (identical(other.autoCopyNotesToQuoteOrder, autoCopyNotesToQuoteOrder) || const DeepCollectionEquality().equals(other.autoCopyNotesToQuoteOrder, autoCopyNotesToQuoteOrder)) &&
            (identical(other.note, note) || const DeepCollectionEquality().equals(other.note, note)) &&
            (identical(other.printNoteOnInContract, printNoteOnInContract) || const DeepCollectionEquality().equals(other.printNoteOnInContract, printNoteOnInContract)) &&
            (identical(other.printNoteOnOutContract, printNoteOnOutContract) || const DeepCollectionEquality().equals(other.printNoteOnOutContract, printNoteOnOutContract)) &&
            (identical(other.printNoteOnReceiveContract, printNoteOnReceiveContract) || const DeepCollectionEquality().equals(other.printNoteOnReceiveContract, printNoteOnReceiveContract)) &&
            (identical(other.printNoteOnReturnContract, printNoteOnReturnContract) || const DeepCollectionEquality().equals(other.printNoteOnReturnContract, printNoteOnReturnContract)) &&
            (identical(other.printNoteOnInvoice, printNoteOnInvoice) || const DeepCollectionEquality().equals(other.printNoteOnInvoice, printNoteOnInvoice)) &&
            (identical(other.printNoteOnOrder, printNoteOnOrder) || const DeepCollectionEquality().equals(other.printNoteOnOrder, printNoteOnOrder)) &&
            (identical(other.printNoteOnPickList, printNoteOnPickList) || const DeepCollectionEquality().equals(other.printNoteOnPickList, printNoteOnPickList)) &&
            (identical(other.printNoteOnPO, printNoteOnPO) || const DeepCollectionEquality().equals(other.printNoteOnPO, printNoteOnPO)) &&
            (identical(other.printNoteOnQuote, printNoteOnQuote) || const DeepCollectionEquality().equals(other.printNoteOnQuote, printNoteOnQuote)) &&
            (identical(other.printNoteOnReturnList, printNoteOnReturnList) || const DeepCollectionEquality().equals(other.printNoteOnReturnList, printNoteOnReturnList)) &&
            (identical(other.printNoteOnPoReceiveList, printNoteOnPoReceiveList) || const DeepCollectionEquality().equals(other.printNoteOnPoReceiveList, printNoteOnPoReceiveList)) &&
            (identical(other.printNoteOnPoReturnList, printNoteOnPoReturnList) || const DeepCollectionEquality().equals(other.printNoteOnPoReturnList, printNoteOnPoReturnList)) &&
            (identical(other.assetAccountId, assetAccountId) || const DeepCollectionEquality().equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) || const DeepCollectionEquality().equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) || const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.consignmentIncomeAccountId, consignmentIncomeAccountId) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountId, consignmentIncomeAccountId)) &&
            (identical(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo)) &&
            (identical(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.originalShowId, originalShowId) || const DeepCollectionEquality().equals(other.originalShowId, originalShowId)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.manifestShippingContainer, manifestShippingContainer) || const DeepCollectionEquality().equals(other.manifestShippingContainer, manifestShippingContainer)) &&
            (identical(other.manifestStandAloneItem, manifestStandAloneItem) || const DeepCollectionEquality().equals(other.manifestStandAloneItem, manifestStandAloneItem)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRateExtension
    on WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate {
  WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate copyWith(
      {String? rateId,
      String? facilityTypeId,
      String? facilityType,
      String? rateType,
      bool? includeAsProfitAndLossCategory,
      double? averageCost,
      double? price,
      double? hourlyRate,
      double? dailyRate,
      double? weeklyRate,
      double? monthlyRate,
      double? hourlyCost,
      double? dailyCost,
      double? weeklyCost,
      double? monthlyCost,
      String? iCode,
      String? description,
      String? availFor,
      String? categoryId,
      String? category,
      int? subCategoryCount,
      String? subCategoryId,
      String? subCategory,
      String? classification,
      String? classificationDescription,
      String? classificationColor,
      String? unitId,
      String? unit,
      String? unitType,
      bool? nonDiscountable,
      bool? overrideProfitAndLossCategory,
      String? profitAndLossCategoryId,
      String? profitAndLossCategory,
      bool? autoCopyNotesToQuoteOrder,
      String? note,
      bool? printNoteOnInContract,
      bool? printNoteOnOutContract,
      bool? printNoteOnReceiveContract,
      bool? printNoteOnReturnContract,
      bool? printNoteOnInvoice,
      bool? printNoteOnOrder,
      bool? printNoteOnPickList,
      bool? printNoteOnPO,
      bool? printNoteOnQuote,
      bool? printNoteOnReturnList,
      bool? printNoteOnPoReceiveList,
      bool? printNoteOnPoReturnList,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? consignmentIncomeAccountId,
      String? consignmentIncomeAccountNo,
      String? consignmentIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      String? originalShowId,
      bool? inactive,
      String? dateStamp,
      bool? manifestShippingContainer,
      bool? manifestStandAloneItem,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsFacilitySettingsFacilityRateFacilityRate(
        rateId: rateId ?? this.rateId,
        facilityTypeId: facilityTypeId ?? this.facilityTypeId,
        facilityType: facilityType ?? this.facilityType,
        rateType: rateType ?? this.rateType,
        includeAsProfitAndLossCategory: includeAsProfitAndLossCategory ??
            this.includeAsProfitAndLossCategory,
        averageCost: averageCost ?? this.averageCost,
        price: price ?? this.price,
        hourlyRate: hourlyRate ?? this.hourlyRate,
        dailyRate: dailyRate ?? this.dailyRate,
        weeklyRate: weeklyRate ?? this.weeklyRate,
        monthlyRate: monthlyRate ?? this.monthlyRate,
        hourlyCost: hourlyCost ?? this.hourlyCost,
        dailyCost: dailyCost ?? this.dailyCost,
        weeklyCost: weeklyCost ?? this.weeklyCost,
        monthlyCost: monthlyCost ?? this.monthlyCost,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        availFor: availFor ?? this.availFor,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        subCategoryCount: subCategoryCount ?? this.subCategoryCount,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        subCategory: subCategory ?? this.subCategory,
        classification: classification ?? this.classification,
        classificationDescription:
            classificationDescription ?? this.classificationDescription,
        classificationColor: classificationColor ?? this.classificationColor,
        unitId: unitId ?? this.unitId,
        unit: unit ?? this.unit,
        unitType: unitType ?? this.unitType,
        nonDiscountable: nonDiscountable ?? this.nonDiscountable,
        overrideProfitAndLossCategory:
            overrideProfitAndLossCategory ?? this.overrideProfitAndLossCategory,
        profitAndLossCategoryId:
            profitAndLossCategoryId ?? this.profitAndLossCategoryId,
        profitAndLossCategory:
            profitAndLossCategory ?? this.profitAndLossCategory,
        autoCopyNotesToQuoteOrder:
            autoCopyNotesToQuoteOrder ?? this.autoCopyNotesToQuoteOrder,
        note: note ?? this.note,
        printNoteOnInContract:
            printNoteOnInContract ?? this.printNoteOnInContract,
        printNoteOnOutContract:
            printNoteOnOutContract ?? this.printNoteOnOutContract,
        printNoteOnReceiveContract:
            printNoteOnReceiveContract ?? this.printNoteOnReceiveContract,
        printNoteOnReturnContract:
            printNoteOnReturnContract ?? this.printNoteOnReturnContract,
        printNoteOnInvoice: printNoteOnInvoice ?? this.printNoteOnInvoice,
        printNoteOnOrder: printNoteOnOrder ?? this.printNoteOnOrder,
        printNoteOnPickList: printNoteOnPickList ?? this.printNoteOnPickList,
        printNoteOnPO: printNoteOnPO ?? this.printNoteOnPO,
        printNoteOnQuote: printNoteOnQuote ?? this.printNoteOnQuote,
        printNoteOnReturnList:
            printNoteOnReturnList ?? this.printNoteOnReturnList,
        printNoteOnPoReceiveList:
            printNoteOnPoReceiveList ?? this.printNoteOnPoReceiveList,
        printNoteOnPoReturnList:
            printNoteOnPoReturnList ?? this.printNoteOnPoReturnList,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        consignmentIncomeAccountId:
            consignmentIncomeAccountId ?? this.consignmentIncomeAccountId,
        consignmentIncomeAccountNo:
            consignmentIncomeAccountNo ?? this.consignmentIncomeAccountNo,
        consignmentIncomeAccountDescription: consignmentIncomeAccountDescription ??
            this.consignmentIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription: equipmentSaleIncomeAccountDescription ??
            this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription:
            costOfGoodsSoldExpenseAccountDescription ??
                this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription: depreciationExpenseAccountDescription ??
            this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId: accumulatedDepreciationExpenseAccountId ??
            this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo:
            accumulatedDepreciationExpenseAccountNo ??
                this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ??
                this.accumulatedDepreciationExpenseAccountDescription,
        originalShowId: originalShowId ?? this.originalShowId,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        manifestShippingContainer: manifestShippingContainer ?? this.manifestShippingContainer,
        manifestStandAloneItem: manifestStandAloneItem ?? this.manifestStandAloneItem,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus {
  WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus({
    this.scheduleStatusId,
    this.scheduleStatus,
    this.statusAction,
    this.color,
    this.whiteText,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusFromJson(
          json);

  @JsonKey(name: 'ScheduleStatusId', includeIfNull: false)
  final String? scheduleStatusId;
  @JsonKey(name: 'ScheduleStatus', includeIfNull: false)
  final String? scheduleStatus;
  @JsonKey(name: 'StatusAction', includeIfNull: false)
  final String? statusAction;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'WhiteText', includeIfNull: false)
  final bool? whiteText;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus &&
            (identical(other.scheduleStatusId, scheduleStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.scheduleStatusId, scheduleStatusId)) &&
            (identical(other.scheduleStatus, scheduleStatus) ||
                const DeepCollectionEquality()
                    .equals(other.scheduleStatus, scheduleStatus)) &&
            (identical(other.statusAction, statusAction) ||
                const DeepCollectionEquality()
                    .equals(other.statusAction, statusAction)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.whiteText, whiteText) ||
                const DeepCollectionEquality()
                    .equals(other.whiteText, whiteText)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatusExtension
    on WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus {
  WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus
      copyWith(
          {String? scheduleStatusId,
          String? scheduleStatus,
          String? statusAction,
          String? color,
          bool? whiteText,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsFacilitySettingsFacilityScheduleStatusFacilityScheduleStatus(
        scheduleStatusId: scheduleStatusId ?? this.scheduleStatusId,
        scheduleStatus: scheduleStatus ?? this.scheduleStatus,
        statusAction: statusAction ?? this.statusAction,
        color: color ?? this.color,
        whiteText: whiteText ?? this.whiteText,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus {
  WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus({
    this.facilityStatusId,
    this.facilityStatus,
    this.availableToSchedule,
    this.color,
    this.whiteText,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusFromJson(
          json);

  @JsonKey(name: 'FacilityStatusId', includeIfNull: false)
  final String? facilityStatusId;
  @JsonKey(name: 'FacilityStatus', includeIfNull: false)
  final String? facilityStatus;
  @JsonKey(name: 'AvailableToSchedule', includeIfNull: false)
  final bool? availableToSchedule;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'WhiteText', includeIfNull: false)
  final bool? whiteText;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus &&
            (identical(other.facilityStatusId, facilityStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.facilityStatusId, facilityStatusId)) &&
            (identical(other.facilityStatus, facilityStatus) ||
                const DeepCollectionEquality()
                    .equals(other.facilityStatus, facilityStatus)) &&
            (identical(other.availableToSchedule, availableToSchedule) ||
                const DeepCollectionEquality()
                    .equals(other.availableToSchedule, availableToSchedule)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.whiteText, whiteText) ||
                const DeepCollectionEquality()
                    .equals(other.whiteText, whiteText)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatusExtension
    on WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus {
  WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus copyWith(
      {String? facilityStatusId,
      String? facilityStatus,
      bool? availableToSchedule,
      String? color,
      bool? whiteText,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsFacilitySettingsFacilityStatusFacilityStatus(
        facilityStatusId: facilityStatusId ?? this.facilityStatusId,
        facilityStatus: facilityStatus ?? this.facilityStatus,
        availableToSchedule: availableToSchedule ?? this.availableToSchedule,
        color: color ?? this.color,
        whiteText: whiteText ?? this.whiteText,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType {
  WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType({
    this.facilityTypeId,
    this.facilityType,
    this.facilities,
    this.stageScheduling,
    this.facilitiesDefaultDw,
    this.facilitiesDoNotDefaultRateOnBooking,
    this.groupProfitLoss,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeFromJson(
          json);

  @JsonKey(name: 'FacilityTypeId', includeIfNull: false)
  final String? facilityTypeId;
  @JsonKey(name: 'FacilityType', includeIfNull: false)
  final String? facilityType;
  @JsonKey(name: 'Facilities', includeIfNull: false)
  final bool? facilities;
  @JsonKey(name: 'StageScheduling', includeIfNull: false)
  final bool? stageScheduling;
  @JsonKey(name: 'FacilitiesDefaultDw', includeIfNull: false)
  final double? facilitiesDefaultDw;
  @JsonKey(name: 'FacilitiesDoNotDefaultRateOnBooking', includeIfNull: false)
  final bool? facilitiesDoNotDefaultRateOnBooking;
  @JsonKey(name: 'GroupProfitLoss', includeIfNull: false)
  final bool? groupProfitLoss;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType &&
            (identical(other.facilityTypeId, facilityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.facilityTypeId, facilityTypeId)) &&
            (identical(other.facilityType, facilityType) ||
                const DeepCollectionEquality()
                    .equals(other.facilityType, facilityType)) &&
            (identical(other.facilities, facilities) ||
                const DeepCollectionEquality()
                    .equals(other.facilities, facilities)) &&
            (identical(other.stageScheduling, stageScheduling) ||
                const DeepCollectionEquality()
                    .equals(other.stageScheduling, stageScheduling)) &&
            (identical(other.facilitiesDefaultDw, facilitiesDefaultDw) ||
                const DeepCollectionEquality()
                    .equals(other.facilitiesDefaultDw, facilitiesDefaultDw)) &&
            (identical(other.facilitiesDoNotDefaultRateOnBooking,
                    facilitiesDoNotDefaultRateOnBooking) ||
                const DeepCollectionEquality().equals(
                    other.facilitiesDoNotDefaultRateOnBooking,
                    facilitiesDoNotDefaultRateOnBooking)) &&
            (identical(other.groupProfitLoss, groupProfitLoss) ||
                const DeepCollectionEquality()
                    .equals(other.groupProfitLoss, groupProfitLoss)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityTypeExtension
    on WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType {
  WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType copyWith(
      {String? facilityTypeId,
      String? facilityType,
      bool? facilities,
      bool? stageScheduling,
      double? facilitiesDefaultDw,
      bool? facilitiesDoNotDefaultRateOnBooking,
      bool? groupProfitLoss,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsFacilitySettingsFacilityTypeFacilityType(
        facilityTypeId: facilityTypeId ?? this.facilityTypeId,
        facilityType: facilityType ?? this.facilityType,
        facilities: facilities ?? this.facilities,
        stageScheduling: stageScheduling ?? this.stageScheduling,
        facilitiesDefaultDw: facilitiesDefaultDw ?? this.facilitiesDefaultDw,
        facilitiesDoNotDefaultRateOnBooking:
            facilitiesDoNotDefaultRateOnBooking ??
                this.facilitiesDoNotDefaultRateOnBooking,
        groupProfitLoss: groupProfitLoss ?? this.groupProfitLoss,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType {
  WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType({
    this.spaceTypeId,
    this.spaceType,
    this.spaceTypeClassification,
    this.facilityTypeId,
    this.facilityType,
    this.rateId,
    this.rateICode,
    this.rateDescription,
    this.rateUnitId,
    this.rateUnit,
    this.color,
    this.whiteText,
    this.orderBy,
    this.nonBillable,
    this.forReportsOnly,
    this.addToDescription,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeFromJson(json);

  @JsonKey(name: 'SpaceTypeId', includeIfNull: false)
  final String? spaceTypeId;
  @JsonKey(name: 'SpaceType', includeIfNull: false)
  final String? spaceType;
  @JsonKey(name: 'SpaceTypeClassification', includeIfNull: false)
  final String? spaceTypeClassification;
  @JsonKey(name: 'FacilityTypeId', includeIfNull: false)
  final String? facilityTypeId;
  @JsonKey(name: 'FacilityType', includeIfNull: false)
  final String? facilityType;
  @JsonKey(name: 'RateId', includeIfNull: false)
  final String? rateId;
  @JsonKey(name: 'RateICode', includeIfNull: false)
  final String? rateICode;
  @JsonKey(name: 'RateDescription', includeIfNull: false)
  final String? rateDescription;
  @JsonKey(name: 'RateUnitId', includeIfNull: false)
  final String? rateUnitId;
  @JsonKey(name: 'RateUnit', includeIfNull: false)
  final String? rateUnit;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'WhiteText', includeIfNull: false)
  final bool? whiteText;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final int? orderBy;
  @JsonKey(name: 'NonBillable', includeIfNull: false)
  final bool? nonBillable;
  @JsonKey(name: 'ForReportsOnly', includeIfNull: false)
  final bool? forReportsOnly;
  @JsonKey(name: 'AddToDescription', includeIfNull: false)
  final bool? addToDescription;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType &&
            (identical(other.spaceTypeId, spaceTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.spaceTypeId, spaceTypeId)) &&
            (identical(other.spaceType, spaceType) ||
                const DeepCollectionEquality()
                    .equals(other.spaceType, spaceType)) &&
            (identical(other.spaceTypeClassification, spaceTypeClassification) ||
                const DeepCollectionEquality().equals(
                    other.spaceTypeClassification, spaceTypeClassification)) &&
            (identical(other.facilityTypeId, facilityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.facilityTypeId, facilityTypeId)) &&
            (identical(other.facilityType, facilityType) ||
                const DeepCollectionEquality()
                    .equals(other.facilityType, facilityType)) &&
            (identical(other.rateId, rateId) ||
                const DeepCollectionEquality().equals(other.rateId, rateId)) &&
            (identical(other.rateICode, rateICode) ||
                const DeepCollectionEquality()
                    .equals(other.rateICode, rateICode)) &&
            (identical(other.rateDescription, rateDescription) ||
                const DeepCollectionEquality()
                    .equals(other.rateDescription, rateDescription)) &&
            (identical(other.rateUnitId, rateUnitId) ||
                const DeepCollectionEquality()
                    .equals(other.rateUnitId, rateUnitId)) &&
            (identical(other.rateUnit, rateUnit) ||
                const DeepCollectionEquality()
                    .equals(other.rateUnit, rateUnit)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.whiteText, whiteText) ||
                const DeepCollectionEquality()
                    .equals(other.whiteText, whiteText)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.nonBillable, nonBillable) ||
                const DeepCollectionEquality()
                    .equals(other.nonBillable, nonBillable)) &&
            (identical(other.forReportsOnly, forReportsOnly) ||
                const DeepCollectionEquality()
                    .equals(other.forReportsOnly, forReportsOnly)) &&
            (identical(other.addToDescription, addToDescription) ||
                const DeepCollectionEquality()
                    .equals(other.addToDescription, addToDescription)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceTypeExtension
    on WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType {
  WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType copyWith(
      {String? spaceTypeId,
      String? spaceType,
      String? spaceTypeClassification,
      String? facilityTypeId,
      String? facilityType,
      String? rateId,
      String? rateICode,
      String? rateDescription,
      String? rateUnitId,
      String? rateUnit,
      String? color,
      bool? whiteText,
      int? orderBy,
      bool? nonBillable,
      bool? forReportsOnly,
      bool? addToDescription,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsFacilitySettingsSpaceTypeSpaceType(
        spaceTypeId: spaceTypeId ?? this.spaceTypeId,
        spaceType: spaceType ?? this.spaceType,
        spaceTypeClassification:
            spaceTypeClassification ?? this.spaceTypeClassification,
        facilityTypeId: facilityTypeId ?? this.facilityTypeId,
        facilityType: facilityType ?? this.facilityType,
        rateId: rateId ?? this.rateId,
        rateICode: rateICode ?? this.rateICode,
        rateDescription: rateDescription ?? this.rateDescription,
        rateUnitId: rateUnitId ?? this.rateUnitId,
        rateUnit: rateUnit ?? this.rateUnit,
        color: color ?? this.color,
        whiteText: whiteText ?? this.whiteText,
        orderBy: orderBy ?? this.orderBy,
        nonBillable: nonBillable ?? this.nonBillable,
        forReportsOnly: forReportsOnly ?? this.forReportsOnly,
        addToDescription: addToDescription ?? this.addToDescription,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFacilitySettingsVenueVenue {
  WebApiModulesSettingsFacilitySettingsVenueVenue({
    this.venueId,
    this.venue,
    this.venueCode,
    this.officeLocationId,
    this.officeLocation,
    this.addressId,
    this.address1,
    this.address2,
    this.city,
    this.state,
    this.zipCode,
    this.countryId,
    this.country,
    this.phone,
    this.webAddress,
    this.taxOptionId,
    this.taxOption,
    this.tax1Name,
    this.tax2Name,
    this.rentalTaxRate1,
    this.salesTaxRate1,
    this.laborTaxRate1,
    this.rentalTaxRate2,
    this.salesTaxRate2,
    this.laborTaxRate2,
    this.primaryContactId,
    this.primaryCompanyContactId,
    this.primaryContact,
    this.inactive,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsFacilitySettingsVenueVenue.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFacilitySettingsVenueVenueFromJson(json);

  @JsonKey(name: 'VenueId', includeIfNull: false)
  final String? venueId;
  @JsonKey(name: 'Venue', includeIfNull: false)
  final String? venue;
  @JsonKey(name: 'VenueCode', includeIfNull: false)
  final String? venueCode;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'OfficeLocation', includeIfNull: false)
  final String? officeLocation;
  @JsonKey(name: 'AddressId', includeIfNull: false)
  final String? addressId;
  @JsonKey(name: 'Address1', includeIfNull: false)
  final String? address1;
  @JsonKey(name: 'Address2', includeIfNull: false)
  final String? address2;
  @JsonKey(name: 'City', includeIfNull: false)
  final String? city;
  @JsonKey(name: 'State', includeIfNull: false)
  final String? state;
  @JsonKey(name: 'ZipCode', includeIfNull: false)
  final String? zipCode;
  @JsonKey(name: 'CountryId', includeIfNull: false)
  final String? countryId;
  @JsonKey(name: 'Country', includeIfNull: false)
  final String? country;
  @JsonKey(name: 'Phone', includeIfNull: false)
  final String? phone;
  @JsonKey(name: 'WebAddress', includeIfNull: false)
  final String? webAddress;
  @JsonKey(name: 'TaxOptionId', includeIfNull: false)
  final String? taxOptionId;
  @JsonKey(name: 'TaxOption', includeIfNull: false)
  final String? taxOption;
  @JsonKey(name: 'Tax1Name', includeIfNull: false)
  final String? tax1Name;
  @JsonKey(name: 'Tax2Name', includeIfNull: false)
  final String? tax2Name;
  @JsonKey(name: 'RentalTaxRate1', includeIfNull: false)
  final double? rentalTaxRate1;
  @JsonKey(name: 'SalesTaxRate1', includeIfNull: false)
  final double? salesTaxRate1;
  @JsonKey(name: 'LaborTaxRate1', includeIfNull: false)
  final double? laborTaxRate1;
  @JsonKey(name: 'RentalTaxRate2', includeIfNull: false)
  final double? rentalTaxRate2;
  @JsonKey(name: 'SalesTaxRate2', includeIfNull: false)
  final double? salesTaxRate2;
  @JsonKey(name: 'LaborTaxRate2', includeIfNull: false)
  final double? laborTaxRate2;
  @JsonKey(name: 'PrimaryContactId', includeIfNull: false)
  final String? primaryContactId;
  @JsonKey(name: 'PrimaryCompanyContactId', includeIfNull: false)
  final String? primaryCompanyContactId;
  @JsonKey(name: 'PrimaryContact', includeIfNull: false)
  final String? primaryContact;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsVenueVenueFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFacilitySettingsVenueVenueToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFacilitySettingsVenueVenueToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFacilitySettingsVenueVenue &&
            (identical(other.venueId, venueId) ||
                const DeepCollectionEquality()
                    .equals(other.venueId, venueId)) &&
            (identical(other.venue, venue) ||
                const DeepCollectionEquality().equals(other.venue, venue)) &&
            (identical(other.venueCode, venueCode) ||
                const DeepCollectionEquality()
                    .equals(other.venueCode, venueCode)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.officeLocation, officeLocation) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocation, officeLocation)) &&
            (identical(other.addressId, addressId) ||
                const DeepCollectionEquality()
                    .equals(other.addressId, addressId)) &&
            (identical(other.address1, address1) ||
                const DeepCollectionEquality()
                    .equals(other.address1, address1)) &&
            (identical(other.address2, address2) ||
                const DeepCollectionEquality()
                    .equals(other.address2, address2)) &&
            (identical(other.city, city) ||
                const DeepCollectionEquality().equals(other.city, city)) &&
            (identical(other.state, state) ||
                const DeepCollectionEquality().equals(other.state, state)) &&
            (identical(other.zipCode, zipCode) ||
                const DeepCollectionEquality()
                    .equals(other.zipCode, zipCode)) &&
            (identical(other.countryId, countryId) ||
                const DeepCollectionEquality()
                    .equals(other.countryId, countryId)) &&
            (identical(other.country, country) ||
                const DeepCollectionEquality()
                    .equals(other.country, country)) &&
            (identical(other.phone, phone) ||
                const DeepCollectionEquality().equals(other.phone, phone)) &&
            (identical(other.webAddress, webAddress) ||
                const DeepCollectionEquality()
                    .equals(other.webAddress, webAddress)) &&
            (identical(other.taxOptionId, taxOptionId) ||
                const DeepCollectionEquality()
                    .equals(other.taxOptionId, taxOptionId)) &&
            (identical(other.taxOption, taxOption) ||
                const DeepCollectionEquality()
                    .equals(other.taxOption, taxOption)) &&
            (identical(other.tax1Name, tax1Name) ||
                const DeepCollectionEquality()
                    .equals(other.tax1Name, tax1Name)) &&
            (identical(other.tax2Name, tax2Name) ||
                const DeepCollectionEquality()
                    .equals(other.tax2Name, tax2Name)) &&
            (identical(other.rentalTaxRate1, rentalTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.rentalTaxRate1, rentalTaxRate1)) &&
            (identical(other.salesTaxRate1, salesTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.salesTaxRate1, salesTaxRate1)) &&
            (identical(other.laborTaxRate1, laborTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.laborTaxRate1, laborTaxRate1)) &&
            (identical(other.rentalTaxRate2, rentalTaxRate2) ||
                const DeepCollectionEquality()
                    .equals(other.rentalTaxRate2, rentalTaxRate2)) &&
            (identical(other.salesTaxRate2, salesTaxRate2) ||
                const DeepCollectionEquality().equals(other.salesTaxRate2, salesTaxRate2)) &&
            (identical(other.laborTaxRate2, laborTaxRate2) || const DeepCollectionEquality().equals(other.laborTaxRate2, laborTaxRate2)) &&
            (identical(other.primaryContactId, primaryContactId) || const DeepCollectionEquality().equals(other.primaryContactId, primaryContactId)) &&
            (identical(other.primaryCompanyContactId, primaryCompanyContactId) || const DeepCollectionEquality().equals(other.primaryCompanyContactId, primaryCompanyContactId)) &&
            (identical(other.primaryContact, primaryContact) || const DeepCollectionEquality().equals(other.primaryContact, primaryContact)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsFacilitySettingsVenueVenueExtension
    on WebApiModulesSettingsFacilitySettingsVenueVenue {
  WebApiModulesSettingsFacilitySettingsVenueVenue copyWith(
      {String? venueId,
      String? venue,
      String? venueCode,
      String? officeLocationId,
      String? officeLocation,
      String? addressId,
      String? address1,
      String? address2,
      String? city,
      String? state,
      String? zipCode,
      String? countryId,
      String? country,
      String? phone,
      String? webAddress,
      String? taxOptionId,
      String? taxOption,
      String? tax1Name,
      String? tax2Name,
      double? rentalTaxRate1,
      double? salesTaxRate1,
      double? laborTaxRate1,
      double? rentalTaxRate2,
      double? salesTaxRate2,
      double? laborTaxRate2,
      String? primaryContactId,
      String? primaryCompanyContactId,
      String? primaryContact,
      bool? inactive,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsFacilitySettingsVenueVenue(
        venueId: venueId ?? this.venueId,
        venue: venue ?? this.venue,
        venueCode: venueCode ?? this.venueCode,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        officeLocation: officeLocation ?? this.officeLocation,
        addressId: addressId ?? this.addressId,
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        city: city ?? this.city,
        state: state ?? this.state,
        zipCode: zipCode ?? this.zipCode,
        countryId: countryId ?? this.countryId,
        country: country ?? this.country,
        phone: phone ?? this.phone,
        webAddress: webAddress ?? this.webAddress,
        taxOptionId: taxOptionId ?? this.taxOptionId,
        taxOption: taxOption ?? this.taxOption,
        tax1Name: tax1Name ?? this.tax1Name,
        tax2Name: tax2Name ?? this.tax2Name,
        rentalTaxRate1: rentalTaxRate1 ?? this.rentalTaxRate1,
        salesTaxRate1: salesTaxRate1 ?? this.salesTaxRate1,
        laborTaxRate1: laborTaxRate1 ?? this.laborTaxRate1,
        rentalTaxRate2: rentalTaxRate2 ?? this.rentalTaxRate2,
        salesTaxRate2: salesTaxRate2 ?? this.salesTaxRate2,
        laborTaxRate2: laborTaxRate2 ?? this.laborTaxRate2,
        primaryContactId: primaryContactId ?? this.primaryContactId,
        primaryCompanyContactId:
            primaryCompanyContactId ?? this.primaryCompanyContactId,
        primaryContact: primaryContact ?? this.primaryContact,
        inactive: inactive ?? this.inactive,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFiscalMonthFiscalMonth {
  WebApiModulesSettingsFiscalMonthFiscalMonth({
    this.fiscalMonthId,
    this.fiscalYearId,
    this.year,
    this.month,
    this.monthDisplay,
    this.fromDate,
    this.toDate,
    this.monthYear,
    this.workDays,
    this.fiscalOrder,
    this.closed,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsFiscalMonthFiscalMonth.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFiscalMonthFiscalMonthFromJson(json);

  @JsonKey(name: 'FiscalMonthId', includeIfNull: false)
  final String? fiscalMonthId;
  @JsonKey(name: 'FiscalYearId', includeIfNull: false)
  final String? fiscalYearId;
  @JsonKey(name: 'Year', includeIfNull: false)
  final String? year;
  @JsonKey(name: 'Month', includeIfNull: false)
  final int? month;
  @JsonKey(name: 'MonthDisplay', includeIfNull: false)
  final String? monthDisplay;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final String? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final String? toDate;
  @JsonKey(name: 'MonthYear', includeIfNull: false)
  final String? monthYear;
  @JsonKey(name: 'WorkDays', includeIfNull: false)
  final int? workDays;
  @JsonKey(name: 'FiscalOrder', includeIfNull: false)
  final String? fiscalOrder;
  @JsonKey(name: 'Closed', includeIfNull: false)
  final bool? closed;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFiscalMonthFiscalMonthFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFiscalMonthFiscalMonthToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFiscalMonthFiscalMonthToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFiscalMonthFiscalMonth &&
            (identical(other.fiscalMonthId, fiscalMonthId) ||
                const DeepCollectionEquality()
                    .equals(other.fiscalMonthId, fiscalMonthId)) &&
            (identical(other.fiscalYearId, fiscalYearId) ||
                const DeepCollectionEquality()
                    .equals(other.fiscalYearId, fiscalYearId)) &&
            (identical(other.year, year) ||
                const DeepCollectionEquality().equals(other.year, year)) &&
            (identical(other.month, month) ||
                const DeepCollectionEquality().equals(other.month, month)) &&
            (identical(other.monthDisplay, monthDisplay) ||
                const DeepCollectionEquality()
                    .equals(other.monthDisplay, monthDisplay)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.monthYear, monthYear) ||
                const DeepCollectionEquality()
                    .equals(other.monthYear, monthYear)) &&
            (identical(other.workDays, workDays) ||
                const DeepCollectionEquality()
                    .equals(other.workDays, workDays)) &&
            (identical(other.fiscalOrder, fiscalOrder) ||
                const DeepCollectionEquality()
                    .equals(other.fiscalOrder, fiscalOrder)) &&
            (identical(other.closed, closed) ||
                const DeepCollectionEquality().equals(other.closed, closed)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsFiscalMonthFiscalMonthExtension
    on WebApiModulesSettingsFiscalMonthFiscalMonth {
  WebApiModulesSettingsFiscalMonthFiscalMonth copyWith(
      {String? fiscalMonthId,
      String? fiscalYearId,
      String? year,
      int? month,
      String? monthDisplay,
      String? fromDate,
      String? toDate,
      String? monthYear,
      int? workDays,
      String? fiscalOrder,
      bool? closed,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsFiscalMonthFiscalMonth(
        fiscalMonthId: fiscalMonthId ?? this.fiscalMonthId,
        fiscalYearId: fiscalYearId ?? this.fiscalYearId,
        year: year ?? this.year,
        month: month ?? this.month,
        monthDisplay: monthDisplay ?? this.monthDisplay,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        monthYear: monthYear ?? this.monthYear,
        workDays: workDays ?? this.workDays,
        fiscalOrder: fiscalOrder ?? this.fiscalOrder,
        closed: closed ?? this.closed,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFiscalYearFiscalYear {
  WebApiModulesSettingsFiscalYearFiscalYear({
    this.fiscalYearId,
    this.year,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsFiscalYearFiscalYear.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFiscalYearFiscalYearFromJson(json);

  @JsonKey(name: 'FiscalYearId', includeIfNull: false)
  final String? fiscalYearId;
  @JsonKey(name: 'Year', includeIfNull: false)
  final String? year;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsFiscalYearFiscalYearFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsFiscalYearFiscalYearToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFiscalYearFiscalYearToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFiscalYearFiscalYear &&
            (identical(other.fiscalYearId, fiscalYearId) ||
                const DeepCollectionEquality()
                    .equals(other.fiscalYearId, fiscalYearId)) &&
            (identical(other.year, year) ||
                const DeepCollectionEquality().equals(other.year, year)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsFiscalYearFiscalYearExtension
    on WebApiModulesSettingsFiscalYearFiscalYear {
  WebApiModulesSettingsFiscalYearFiscalYear copyWith(
      {String? fiscalYearId,
      String? year,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsFiscalYearFiscalYear(
        fiscalYearId: fiscalYearId ?? this.fiscalYearId,
        year: year ?? this.year,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsFloorFloor {
  WebApiModulesSettingsFloorFloor({
    this.floorId,
    this.floor,
    this.buildingId,
    this.squareFeet,
    this.commonSquareFeet,
    this.floorPlanId,
    this.hasFloorPlan,
    this.orderBy,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsFloorFloor.fromJson(Map<String, dynamic> json) =>
      _$WebApiModulesSettingsFloorFloorFromJson(json);

  @JsonKey(name: 'FloorId', includeIfNull: false)
  final String? floorId;
  @JsonKey(name: 'Floor', includeIfNull: false)
  final String? floor;
  @JsonKey(name: 'BuildingId', includeIfNull: false)
  final String? buildingId;
  @JsonKey(name: 'SquareFeet', includeIfNull: false)
  final double? squareFeet;
  @JsonKey(name: 'CommonSquareFeet', includeIfNull: false)
  final double? commonSquareFeet;
  @JsonKey(name: 'FloorPlanId', includeIfNull: false)
  final String? floorPlanId;
  @JsonKey(name: 'HasFloorPlan', includeIfNull: false)
  final bool? hasFloorPlan;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final int? orderBy;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory = _$WebApiModulesSettingsFloorFloorFromJson;
  static const toJsonFactory = _$WebApiModulesSettingsFloorFloorToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsFloorFloorToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsFloorFloor &&
            (identical(other.floorId, floorId) ||
                const DeepCollectionEquality()
                    .equals(other.floorId, floorId)) &&
            (identical(other.floor, floor) ||
                const DeepCollectionEquality().equals(other.floor, floor)) &&
            (identical(other.buildingId, buildingId) ||
                const DeepCollectionEquality()
                    .equals(other.buildingId, buildingId)) &&
            (identical(other.squareFeet, squareFeet) ||
                const DeepCollectionEquality()
                    .equals(other.squareFeet, squareFeet)) &&
            (identical(other.commonSquareFeet, commonSquareFeet) ||
                const DeepCollectionEquality()
                    .equals(other.commonSquareFeet, commonSquareFeet)) &&
            (identical(other.floorPlanId, floorPlanId) ||
                const DeepCollectionEquality()
                    .equals(other.floorPlanId, floorPlanId)) &&
            (identical(other.hasFloorPlan, hasFloorPlan) ||
                const DeepCollectionEquality()
                    .equals(other.hasFloorPlan, hasFloorPlan)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsFloorFloorExtension
    on WebApiModulesSettingsFloorFloor {
  WebApiModulesSettingsFloorFloor copyWith(
      {String? floorId,
      String? floor,
      String? buildingId,
      double? squareFeet,
      double? commonSquareFeet,
      String? floorPlanId,
      bool? hasFloorPlan,
      int? orderBy,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsFloorFloor(
        floorId: floorId ?? this.floorId,
        floor: floor ?? this.floor,
        buildingId: buildingId ?? this.buildingId,
        squareFeet: squareFeet ?? this.squareFeet,
        commonSquareFeet: commonSquareFeet ?? this.commonSquareFeet,
        floorPlanId: floorPlanId ?? this.floorPlanId,
        hasFloorPlan: hasFloorPlan ?? this.hasFloorPlan,
        orderBy: orderBy ?? this.orderBy,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType {
  WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType({
    this.generatorFuelTypeId,
    this.generatorFuelType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeFromJson(json);

  @JsonKey(name: 'GeneratorFuelTypeId', includeIfNull: false)
  final String? generatorFuelTypeId;
  @JsonKey(name: 'GeneratorFuelType', includeIfNull: false)
  final String? generatorFuelType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType &&
            (identical(other.generatorFuelTypeId, generatorFuelTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.generatorFuelTypeId, generatorFuelTypeId)) &&
            (identical(other.generatorFuelType, generatorFuelType) ||
                const DeepCollectionEquality()
                    .equals(other.generatorFuelType, generatorFuelType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelTypeExtension
    on WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType {
  WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType copyWith(
      {String? generatorFuelTypeId,
      String? generatorFuelType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsGeneratorFuelTypeGeneratorFuelType(
        generatorFuelTypeId: generatorFuelTypeId ?? this.generatorFuelTypeId,
        generatorFuelType: generatorFuelType ?? this.generatorFuelType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake {
  WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake({
    this.generatorMakeId,
    this.generatorMake,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeFromJson(
          json);

  @JsonKey(name: 'GeneratorMakeId', includeIfNull: false)
  final String? generatorMakeId;
  @JsonKey(name: 'GeneratorMake', includeIfNull: false)
  final String? generatorMake;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake &&
            (identical(other.generatorMakeId, generatorMakeId) ||
                const DeepCollectionEquality()
                    .equals(other.generatorMakeId, generatorMakeId)) &&
            (identical(other.generatorMake, generatorMake) ||
                const DeepCollectionEquality()
                    .equals(other.generatorMake, generatorMake)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMakeExtension
    on WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake {
  WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake copyWith(
      {String? generatorMakeId,
      String? generatorMake,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsGeneratorSettingsGeneratorMakeGeneratorMake(
        generatorMakeId: generatorMakeId ?? this.generatorMakeId,
        generatorMake: generatorMake ?? this.generatorMake,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel {
  WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel({
    this.generatorModelId,
    this.generatorModel,
    this.generatorMakeId,
    this.generatorMake,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelFromJson(
          json);

  @JsonKey(name: 'GeneratorModelId', includeIfNull: false)
  final String? generatorModelId;
  @JsonKey(name: 'GeneratorModel', includeIfNull: false)
  final String? generatorModel;
  @JsonKey(name: 'GeneratorMakeId', includeIfNull: false)
  final String? generatorMakeId;
  @JsonKey(name: 'GeneratorMake', includeIfNull: false)
  final String? generatorMake;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel &&
            (identical(other.generatorModelId, generatorModelId) ||
                const DeepCollectionEquality()
                    .equals(other.generatorModelId, generatorModelId)) &&
            (identical(other.generatorModel, generatorModel) ||
                const DeepCollectionEquality()
                    .equals(other.generatorModel, generatorModel)) &&
            (identical(other.generatorMakeId, generatorMakeId) ||
                const DeepCollectionEquality()
                    .equals(other.generatorMakeId, generatorMakeId)) &&
            (identical(other.generatorMake, generatorMake) ||
                const DeepCollectionEquality()
                    .equals(other.generatorMake, generatorMake)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModelExtension
    on WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel {
  WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel copyWith(
      {String? generatorModelId,
      String? generatorModel,
      String? generatorMakeId,
      String? generatorMake,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsGeneratorSettingsGeneratorModelGeneratorModel(
        generatorModelId: generatorModelId ?? this.generatorModelId,
        generatorModel: generatorModel ?? this.generatorModel,
        generatorMakeId: generatorMakeId ?? this.generatorMakeId,
        generatorMake: generatorMake ?? this.generatorMake,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating {
  WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating({
    this.generatorRatingId,
    this.generatorRating,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingFromJson(
          json);

  @JsonKey(name: 'GeneratorRatingId', includeIfNull: false)
  final String? generatorRatingId;
  @JsonKey(name: 'GeneratorRating', includeIfNull: false)
  final String? generatorRating;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating &&
            (identical(other.generatorRatingId, generatorRatingId) ||
                const DeepCollectionEquality()
                    .equals(other.generatorRatingId, generatorRatingId)) &&
            (identical(other.generatorRating, generatorRating) ||
                const DeepCollectionEquality()
                    .equals(other.generatorRating, generatorRating)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRatingExtension
    on WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating {
  WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating copyWith(
      {String? generatorRatingId,
      String? generatorRating,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsGeneratorSettingsGeneratorRatingGeneratorRating(
        generatorRatingId: generatorRatingId ?? this.generatorRatingId,
        generatorRating: generatorRating ?? this.generatorRating,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType {
  WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType({
    this.generatorTypeId,
    this.generatorType,
    this.preventiveMaintenanceCycleHours,
    this.inventoryTypeId,
    this.inventoryType,
    this.unitId,
    this.unit,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationMonths,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.orderBy,
    this.pickListOrderBy,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeFromJson(
          json);

  @JsonKey(name: 'GeneratorTypeId', includeIfNull: false)
  final String? generatorTypeId;
  @JsonKey(name: 'GeneratorType', includeIfNull: false)
  final String? generatorType;
  @JsonKey(name: 'PreventiveMaintenanceCycleHours', includeIfNull: false)
  final int? preventiveMaintenanceCycleHours;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'UnitId', includeIfNull: false)
  final String? unitId;
  @JsonKey(name: 'Unit', includeIfNull: false)
  final String? unit;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationMonths', includeIfNull: false)
  final int? depreciationMonths;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'PickListOrderBy', includeIfNull: false)
  final int? pickListOrderBy;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType &&
            (identical(other.generatorTypeId, generatorTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.generatorTypeId, generatorTypeId)) &&
            (identical(other.generatorType, generatorType) ||
                const DeepCollectionEquality()
                    .equals(other.generatorType, generatorType)) &&
            (identical(other.preventiveMaintenanceCycleHours, preventiveMaintenanceCycleHours) ||
                const DeepCollectionEquality().equals(
                    other.preventiveMaintenanceCycleHours,
                    preventiveMaintenanceCycleHours)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.unitId, unitId) ||
                const DeepCollectionEquality().equals(other.unitId, unitId)) &&
            (identical(other.unit, unit) ||
                const DeepCollectionEquality().equals(other.unit, unit)) &&
            (identical(other.assetAccountId, assetAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) ||
                const DeepCollectionEquality()
                    .equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) ||
                const DeepCollectionEquality().equals(
                    other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) ||
                const DeepCollectionEquality()
                    .equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) ||
                const DeepCollectionEquality().equals(
                    other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationMonths, depreciationMonths) || const DeepCollectionEquality().equals(other.depreciationMonths, depreciationMonths)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.orderBy, orderBy) || const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.pickListOrderBy, pickListOrderBy) || const DeepCollectionEquality().equals(other.pickListOrderBy, pickListOrderBy)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorTypeExtension
    on WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType {
  WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType copyWith(
      {String? generatorTypeId,
      String? generatorType,
      int? preventiveMaintenanceCycleHours,
      String? inventoryTypeId,
      String? inventoryType,
      String? unitId,
      String? unit,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      int? depreciationMonths,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      double? orderBy,
      int? pickListOrderBy,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsGeneratorSettingsGeneratorTypeGeneratorType(
        generatorTypeId: generatorTypeId ?? this.generatorTypeId,
        generatorType: generatorType ?? this.generatorType,
        preventiveMaintenanceCycleHours: preventiveMaintenanceCycleHours ??
            this.preventiveMaintenanceCycleHours,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        unitId: unitId ?? this.unitId,
        unit: unit ?? this.unit,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription:
            equipmentSaleIncomeAccountDescription ??
                this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription:
            costOfGoodsSoldExpenseAccountDescription ??
                this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationMonths: depreciationMonths ?? this.depreciationMonths,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription:
            depreciationExpenseAccountDescription ??
                this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId:
            accumulatedDepreciationExpenseAccountId ??
                this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo:
            accumulatedDepreciationExpenseAccountNo ??
                this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ??
                this.accumulatedDepreciationExpenseAccountDescription,
        orderBy: orderBy ?? this.orderBy,
        pickListOrderBy: pickListOrderBy ?? this.pickListOrderBy,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts {
  WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts({
    this.generatorWattsId,
    this.generatorWatts,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsFromJson(
          json);

  @JsonKey(name: 'GeneratorWattsId', includeIfNull: false)
  final String? generatorWattsId;
  @JsonKey(name: 'GeneratorWatts', includeIfNull: false)
  final String? generatorWatts;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts &&
            (identical(other.generatorWattsId, generatorWattsId) ||
                const DeepCollectionEquality()
                    .equals(other.generatorWattsId, generatorWattsId)) &&
            (identical(other.generatorWatts, generatorWatts) ||
                const DeepCollectionEquality()
                    .equals(other.generatorWatts, generatorWatts)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWattsExtension
    on WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts {
  WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts copyWith(
      {String? generatorWattsId,
      String? generatorWatts,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsGeneratorSettingsGeneratorWattsGeneratorWatts(
        generatorWattsId: generatorWattsId ?? this.generatorWattsId,
        generatorWatts: generatorWatts ?? this.generatorWatts,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse {
  WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse({
    this.generatorTypeId,
    this.hourlyRate,
    this.dailyRate,
    this.weeklyRate,
    this.monthlyRate,
    this.itemDescription,
    this.warehouseId,
    this.warehouseCode,
    this.warehouse,
    this.warehouseOrderBy,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseFromJson(
          json);

  @JsonKey(name: 'GeneratorTypeId', includeIfNull: false)
  final String? generatorTypeId;
  @JsonKey(name: 'HourlyRate', includeIfNull: false)
  final double? hourlyRate;
  @JsonKey(name: 'DailyRate', includeIfNull: false)
  final double? dailyRate;
  @JsonKey(name: 'WeeklyRate', includeIfNull: false)
  final double? weeklyRate;
  @JsonKey(name: 'MonthlyRate', includeIfNull: false)
  final double? monthlyRate;
  @JsonKey(name: 'ItemDescription', includeIfNull: false)
  final String? itemDescription;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'WarehouseOrderBy', includeIfNull: false)
  final int? warehouseOrderBy;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse &&
            (identical(other.generatorTypeId, generatorTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.generatorTypeId, generatorTypeId)) &&
            (identical(other.hourlyRate, hourlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyRate, hourlyRate)) &&
            (identical(other.dailyRate, dailyRate) ||
                const DeepCollectionEquality()
                    .equals(other.dailyRate, dailyRate)) &&
            (identical(other.weeklyRate, weeklyRate) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyRate, weeklyRate)) &&
            (identical(other.monthlyRate, monthlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyRate, monthlyRate)) &&
            (identical(other.itemDescription, itemDescription) ||
                const DeepCollectionEquality()
                    .equals(other.itemDescription, itemDescription)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.warehouseOrderBy, warehouseOrderBy) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseOrderBy, warehouseOrderBy)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouseExtension
    on WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse {
  WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse copyWith(
      {String? generatorTypeId,
      double? hourlyRate,
      double? dailyRate,
      double? weeklyRate,
      double? monthlyRate,
      String? itemDescription,
      String? warehouseId,
      String? warehouseCode,
      String? warehouse,
      int? warehouseOrderBy,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsGeneratorTypeWarehouseGeneratorTypeWarehouse(
        generatorTypeId: generatorTypeId ?? this.generatorTypeId,
        hourlyRate: hourlyRate ?? this.hourlyRate,
        dailyRate: dailyRate ?? this.dailyRate,
        weeklyRate: weeklyRate ?? this.weeklyRate,
        monthlyRate: monthlyRate ?? this.monthlyRate,
        itemDescription: itemDescription ?? this.itemDescription,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        warehouse: warehouse ?? this.warehouse,
        warehouseOrderBy: warehouseOrderBy ?? this.warehouseOrderBy,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory {
  WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory({
    this.inventoryGroupInventoryId,
    this.inventoryGroupId,
    this.inventoryId,
    this.iCode,
    this.description,
    this.category,
    this.rank,
    this.orderBy,
    this.consignorId,
    this.consignor,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryFromJson(
          json);

  @JsonKey(name: 'InventoryGroupInventoryId', includeIfNull: false)
  final int? inventoryGroupInventoryId;
  @JsonKey(name: 'InventoryGroupId', includeIfNull: false)
  final String? inventoryGroupId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'Rank', includeIfNull: false)
  final String? rank;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'ConsignorId', includeIfNull: false)
  final String? consignorId;
  @JsonKey(name: 'Consignor', includeIfNull: false)
  final String? consignor;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory &&
            (identical(other.inventoryGroupInventoryId, inventoryGroupInventoryId) ||
                const DeepCollectionEquality().equals(
                    other.inventoryGroupInventoryId,
                    inventoryGroupInventoryId)) &&
            (identical(other.inventoryGroupId, inventoryGroupId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryGroupId, inventoryGroupId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.iCode, iCode) ||
                const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.category, category) ||
                const DeepCollectionEquality()
                    .equals(other.category, category)) &&
            (identical(other.rank, rank) ||
                const DeepCollectionEquality().equals(other.rank, rank)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.consignorId, consignorId) ||
                const DeepCollectionEquality()
                    .equals(other.consignorId, consignorId)) &&
            (identical(other.consignor, consignor) ||
                const DeepCollectionEquality()
                    .equals(other.consignor, consignor)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventoryExtension
    on WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory {
  WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory copyWith(
      {int? inventoryGroupInventoryId,
      String? inventoryGroupId,
      String? inventoryId,
      String? iCode,
      String? description,
      String? category,
      String? rank,
      double? orderBy,
      String? consignorId,
      String? consignor,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventoryGroupInventoryInventoryGroupInventory(
        inventoryGroupInventoryId:
            inventoryGroupInventoryId ?? this.inventoryGroupInventoryId,
        inventoryGroupId: inventoryGroupId ?? this.inventoryGroupId,
        inventoryId: inventoryId ?? this.inventoryId,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        category: category ?? this.category,
        rank: rank ?? this.rank,
        orderBy: orderBy ?? this.orderBy,
        consignorId: consignorId ?? this.consignorId,
        consignor: consignor ?? this.consignor,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsAttributeAttribute {
  WebApiModulesSettingsInventorySettingsAttributeAttribute({
    this.attributeId,
    this.attribute,
    this.inventoryTypeId,
    this.inventoryType,
    this.numericOnly,
    this.valueCount,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsAttributeAttribute.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsAttributeAttributeFromJson(json);

  @JsonKey(name: 'AttributeId', includeIfNull: false)
  final String? attributeId;
  @JsonKey(name: 'Attribute', includeIfNull: false)
  final String? attribute;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'NumericOnly', includeIfNull: false)
  final bool? numericOnly;
  @JsonKey(name: 'ValueCount', includeIfNull: false)
  final int? valueCount;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsAttributeAttributeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsAttributeAttributeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsAttributeAttributeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsAttributeAttribute &&
            (identical(other.attributeId, attributeId) ||
                const DeepCollectionEquality()
                    .equals(other.attributeId, attributeId)) &&
            (identical(other.attribute, attribute) ||
                const DeepCollectionEquality()
                    .equals(other.attribute, attribute)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.numericOnly, numericOnly) ||
                const DeepCollectionEquality()
                    .equals(other.numericOnly, numericOnly)) &&
            (identical(other.valueCount, valueCount) ||
                const DeepCollectionEquality()
                    .equals(other.valueCount, valueCount)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsAttributeAttributeExtension
    on WebApiModulesSettingsInventorySettingsAttributeAttribute {
  WebApiModulesSettingsInventorySettingsAttributeAttribute copyWith(
      {String? attributeId,
      String? attribute,
      String? inventoryTypeId,
      String? inventoryType,
      bool? numericOnly,
      int? valueCount,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsAttributeAttribute(
        attributeId: attributeId ?? this.attributeId,
        attribute: attribute ?? this.attribute,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        numericOnly: numericOnly ?? this.numericOnly,
        valueCount: valueCount ?? this.valueCount,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange {
  WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange({
    this.barCodeRangeId,
    this.description,
    this.prefix,
    this.barcodeFrom,
    this.barcodeTo,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeFromJson(
          json);

  @JsonKey(name: 'BarCodeRangeId', includeIfNull: false)
  final String? barCodeRangeId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Prefix', includeIfNull: false)
  final String? prefix;
  @JsonKey(name: 'BarcodeFrom', includeIfNull: false)
  final int? barcodeFrom;
  @JsonKey(name: 'BarcodeTo', includeIfNull: false)
  final int? barcodeTo;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange &&
            (identical(other.barCodeRangeId, barCodeRangeId) ||
                const DeepCollectionEquality()
                    .equals(other.barCodeRangeId, barCodeRangeId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.prefix, prefix) ||
                const DeepCollectionEquality().equals(other.prefix, prefix)) &&
            (identical(other.barcodeFrom, barcodeFrom) ||
                const DeepCollectionEquality()
                    .equals(other.barcodeFrom, barcodeFrom)) &&
            (identical(other.barcodeTo, barcodeTo) ||
                const DeepCollectionEquality()
                    .equals(other.barcodeTo, barcodeTo)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRangeExtension
    on WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange {
  WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange copyWith(
      {String? barCodeRangeId,
      String? description,
      String? prefix,
      int? barcodeFrom,
      int? barcodeTo,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsBarCodeRangeBarCodeRange(
        barCodeRangeId: barCodeRangeId ?? this.barCodeRangeId,
        description: description ?? this.description,
        prefix: prefix ?? this.prefix,
        barcodeFrom: barcodeFrom ?? this.barcodeFrom,
        barcodeTo: barcodeTo ?? this.barcodeTo,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason {
  WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason({
    this.inventoryAdjustmentReasonId,
    this.inventoryAdjustmentReason,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonFromJson(
          json);

  @JsonKey(name: 'InventoryAdjustmentReasonId', includeIfNull: false)
  final String? inventoryAdjustmentReasonId;
  @JsonKey(name: 'InventoryAdjustmentReason', includeIfNull: false)
  final String? inventoryAdjustmentReason;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason &&
            (identical(other.inventoryAdjustmentReasonId,
                    inventoryAdjustmentReasonId) ||
                const DeepCollectionEquality().equals(
                    other.inventoryAdjustmentReasonId,
                    inventoryAdjustmentReasonId)) &&
            (identical(other.inventoryAdjustmentReason,
                    inventoryAdjustmentReason) ||
                const DeepCollectionEquality().equals(
                    other.inventoryAdjustmentReason,
                    inventoryAdjustmentReason)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReasonExtension
    on WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason {
  WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason
      copyWith(
          {String? inventoryAdjustmentReasonId,
          String? inventoryAdjustmentReason,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsInventoryAdjustmentReasonInventoryAdjustmentReason(
        inventoryAdjustmentReasonId:
            inventoryAdjustmentReasonId ?? this.inventoryAdjustmentReasonId,
        inventoryAdjustmentReason:
            inventoryAdjustmentReason ?? this.inventoryAdjustmentReason,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition {
  WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition({
    this.inventoryConditionId,
    this.inventoryCondition,
    this.rental,
    this.sales,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionFromJson(
          json);

  @JsonKey(name: 'InventoryConditionId', includeIfNull: false)
  final String? inventoryConditionId;
  @JsonKey(name: 'InventoryCondition', includeIfNull: false)
  final String? inventoryCondition;
  @JsonKey(name: 'Rental', includeIfNull: false)
  final bool? rental;
  @JsonKey(name: 'Sales', includeIfNull: false)
  final bool? sales;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition &&
            (identical(other.inventoryConditionId, inventoryConditionId) ||
                const DeepCollectionEquality().equals(
                    other.inventoryConditionId, inventoryConditionId)) &&
            (identical(other.inventoryCondition, inventoryCondition) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryCondition, inventoryCondition)) &&
            (identical(other.rental, rental) ||
                const DeepCollectionEquality().equals(other.rental, rental)) &&
            (identical(other.sales, sales) ||
                const DeepCollectionEquality().equals(other.sales, sales)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsInventoryConditionInventoryConditionExtension
    on WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition {
  WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition
      copyWith(
          {String? inventoryConditionId,
          String? inventoryCondition,
          bool? rental,
          bool? sales,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsInventoryConditionInventoryCondition(
        inventoryConditionId: inventoryConditionId ?? this.inventoryConditionId,
        inventoryCondition: inventoryCondition ?? this.inventoryCondition,
        rental: rental ?? this.rental,
        sales: sales ?? this.sales,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup {
  WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup({
    this.inventoryGroupId,
    this.inventoryGroup,
    this.recType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupFromJson(
          json);

  @JsonKey(name: 'InventoryGroupId', includeIfNull: false)
  final String? inventoryGroupId;
  @JsonKey(name: 'InventoryGroup', includeIfNull: false)
  final String? inventoryGroup;
  @JsonKey(name: 'RecType', includeIfNull: false)
  final String? recType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup &&
            (identical(other.inventoryGroupId, inventoryGroupId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryGroupId, inventoryGroupId)) &&
            (identical(other.inventoryGroup, inventoryGroup) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryGroup, inventoryGroup)) &&
            (identical(other.recType, recType) ||
                const DeepCollectionEquality()
                    .equals(other.recType, recType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroupExtension
    on WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup {
  WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup copyWith(
      {String? inventoryGroupId,
      String? inventoryGroup,
      String? recType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsInventoryGroupInventoryGroup(
        inventoryGroupId: inventoryGroupId ?? this.inventoryGroupId,
        inventoryGroup: inventoryGroup ?? this.inventoryGroup,
        recType: recType ?? this.recType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank {
  WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank({
    this.inventoryRankId,
    this.inventoryTypeId,
    this.inventoryType,
    this.warehouseId,
    this.warehouseCode,
    this.warehouse,
    this.type,
    this.typeDisplay,
    this.aFromValue,
    this.aToValue,
    this.bFromValue,
    this.bToValue,
    this.cFromValue,
    this.cToValue,
    this.dFromValue,
    this.dToValue,
    this.eFromValue,
    this.eToValue,
    this.fFromValue,
    this.fToValue,
    this.gFromValue,
    this.gToValue,
    this.rankUpdated,
    this.usersId,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsInventoryRankInventoryRankFromJson(
          json);

  @JsonKey(name: 'InventoryRankId', includeIfNull: false)
  final String? inventoryRankId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'Type', includeIfNull: false)
  final String? type;
  @JsonKey(name: 'TypeDisplay', includeIfNull: false)
  final String? typeDisplay;
  @JsonKey(name: 'AFromValue', includeIfNull: false)
  final double? aFromValue;
  @JsonKey(name: 'AToValue', includeIfNull: false)
  final double? aToValue;
  @JsonKey(name: 'BFromValue', includeIfNull: false)
  final double? bFromValue;
  @JsonKey(name: 'BToValue', includeIfNull: false)
  final double? bToValue;
  @JsonKey(name: 'CFromValue', includeIfNull: false)
  final double? cFromValue;
  @JsonKey(name: 'CToValue', includeIfNull: false)
  final double? cToValue;
  @JsonKey(name: 'DFromValue', includeIfNull: false)
  final double? dFromValue;
  @JsonKey(name: 'DToValue', includeIfNull: false)
  final double? dToValue;
  @JsonKey(name: 'EFromValue', includeIfNull: false)
  final double? eFromValue;
  @JsonKey(name: 'EToValue', includeIfNull: false)
  final double? eToValue;
  @JsonKey(name: 'FFromValue', includeIfNull: false)
  final double? fFromValue;
  @JsonKey(name: 'FToValue', includeIfNull: false)
  final double? fToValue;
  @JsonKey(name: 'GFromValue', includeIfNull: false)
  final double? gFromValue;
  @JsonKey(name: 'GToValue', includeIfNull: false)
  final double? gToValue;
  @JsonKey(name: 'RankUpdated', includeIfNull: false)
  final String? rankUpdated;
  @JsonKey(name: 'UsersId', includeIfNull: false)
  final String? usersId;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryRankInventoryRankFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryRankInventoryRankToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsInventoryRankInventoryRankToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank &&
            (identical(other.inventoryRankId, inventoryRankId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryRankId, inventoryRankId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.typeDisplay, typeDisplay) ||
                const DeepCollectionEquality()
                    .equals(other.typeDisplay, typeDisplay)) &&
            (identical(other.aFromValue, aFromValue) ||
                const DeepCollectionEquality()
                    .equals(other.aFromValue, aFromValue)) &&
            (identical(other.aToValue, aToValue) ||
                const DeepCollectionEquality()
                    .equals(other.aToValue, aToValue)) &&
            (identical(other.bFromValue, bFromValue) ||
                const DeepCollectionEquality()
                    .equals(other.bFromValue, bFromValue)) &&
            (identical(other.bToValue, bToValue) ||
                const DeepCollectionEquality()
                    .equals(other.bToValue, bToValue)) &&
            (identical(other.cFromValue, cFromValue) ||
                const DeepCollectionEquality()
                    .equals(other.cFromValue, cFromValue)) &&
            (identical(other.cToValue, cToValue) ||
                const DeepCollectionEquality()
                    .equals(other.cToValue, cToValue)) &&
            (identical(other.dFromValue, dFromValue) ||
                const DeepCollectionEquality()
                    .equals(other.dFromValue, dFromValue)) &&
            (identical(other.dToValue, dToValue) ||
                const DeepCollectionEquality()
                    .equals(other.dToValue, dToValue)) &&
            (identical(other.eFromValue, eFromValue) ||
                const DeepCollectionEquality().equals(other.eFromValue, eFromValue)) &&
            (identical(other.eToValue, eToValue) || const DeepCollectionEquality().equals(other.eToValue, eToValue)) &&
            (identical(other.fFromValue, fFromValue) || const DeepCollectionEquality().equals(other.fFromValue, fFromValue)) &&
            (identical(other.fToValue, fToValue) || const DeepCollectionEquality().equals(other.fToValue, fToValue)) &&
            (identical(other.gFromValue, gFromValue) || const DeepCollectionEquality().equals(other.gFromValue, gFromValue)) &&
            (identical(other.gToValue, gToValue) || const DeepCollectionEquality().equals(other.gToValue, gToValue)) &&
            (identical(other.rankUpdated, rankUpdated) || const DeepCollectionEquality().equals(other.rankUpdated, rankUpdated)) &&
            (identical(other.usersId, usersId) || const DeepCollectionEquality().equals(other.usersId, usersId)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsInventoryRankInventoryRankExtension
    on WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank {
  WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank copyWith(
      {String? inventoryRankId,
      String? inventoryTypeId,
      String? inventoryType,
      String? warehouseId,
      String? warehouseCode,
      String? warehouse,
      String? type,
      String? typeDisplay,
      double? aFromValue,
      double? aToValue,
      double? bFromValue,
      double? bToValue,
      double? cFromValue,
      double? cToValue,
      double? dFromValue,
      double? dToValue,
      double? eFromValue,
      double? eToValue,
      double? fFromValue,
      double? fToValue,
      double? gFromValue,
      double? gToValue,
      String? rankUpdated,
      String? usersId,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsInventoryRankInventoryRank(
        inventoryRankId: inventoryRankId ?? this.inventoryRankId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        warehouse: warehouse ?? this.warehouse,
        type: type ?? this.type,
        typeDisplay: typeDisplay ?? this.typeDisplay,
        aFromValue: aFromValue ?? this.aFromValue,
        aToValue: aToValue ?? this.aToValue,
        bFromValue: bFromValue ?? this.bFromValue,
        bToValue: bToValue ?? this.bToValue,
        cFromValue: cFromValue ?? this.cFromValue,
        cToValue: cToValue ?? this.cToValue,
        dFromValue: dFromValue ?? this.dFromValue,
        dToValue: dToValue ?? this.dToValue,
        eFromValue: eFromValue ?? this.eFromValue,
        eToValue: eToValue ?? this.eToValue,
        fFromValue: fFromValue ?? this.fFromValue,
        fToValue: fToValue ?? this.fToValue,
        gFromValue: gFromValue ?? this.gFromValue,
        gToValue: gToValue ?? this.gToValue,
        rankUpdated: rankUpdated ?? this.rankUpdated,
        usersId: usersId ?? this.usersId,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus {
  WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus({
    this.inventoryStatusId,
    this.inventoryStatus,
    this.statusType,
    this.color,
    this.textColor,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusFromJson(
          json);

  @JsonKey(name: 'InventoryStatusId', includeIfNull: false)
  final String? inventoryStatusId;
  @JsonKey(name: 'InventoryStatus', includeIfNull: false)
  final String? inventoryStatus;
  @JsonKey(name: 'StatusType', includeIfNull: false)
  final String? statusType;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'TextColor', includeIfNull: false)
  final String? textColor;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus &&
            (identical(other.inventoryStatusId, inventoryStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryStatusId, inventoryStatusId)) &&
            (identical(other.inventoryStatus, inventoryStatus) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryStatus, inventoryStatus)) &&
            (identical(other.statusType, statusType) ||
                const DeepCollectionEquality()
                    .equals(other.statusType, statusType)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.textColor, textColor) ||
                const DeepCollectionEquality()
                    .equals(other.textColor, textColor)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatusExtension
    on WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus {
  WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus copyWith(
      {String? inventoryStatusId,
      String? inventoryStatus,
      String? statusType,
      String? color,
      String? textColor,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsInventoryStatusInventoryStatus(
        inventoryStatusId: inventoryStatusId ?? this.inventoryStatusId,
        inventoryStatus: inventoryStatus ?? this.inventoryStatus,
        statusType: statusType ?? this.statusType,
        color: color ?? this.color,
        textColor: textColor ?? this.textColor,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType {
  WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType({
    this.inventoryTypeId,
    this.inventoryType,
    this.rental,
    this.sales,
    this.parts,
    this.sets,
    this.props,
    this.wardrobe,
    this.transportation,
    this.lowAvailabilityPercent,
    this.barCodePrintQty,
    this.barCodePrintUseDesigner,
    this.groupProfitLoss,
    this.categoryCount,
    this.orderBy,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeFromJson(
          json);

  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'Rental', includeIfNull: false)
  final bool? rental;
  @JsonKey(name: 'Sales', includeIfNull: false)
  final bool? sales;
  @JsonKey(name: 'Parts', includeIfNull: false)
  final bool? parts;
  @JsonKey(name: 'Sets', includeIfNull: false)
  final bool? sets;
  @JsonKey(name: 'Props', includeIfNull: false)
  final bool? props;
  @JsonKey(name: 'Wardrobe', includeIfNull: false)
  final bool? wardrobe;
  @JsonKey(name: 'Transportation', includeIfNull: false)
  final bool? transportation;
  @JsonKey(name: 'LowAvailabilityPercent', includeIfNull: false)
  final int? lowAvailabilityPercent;
  @JsonKey(name: 'BarCodePrintQty', includeIfNull: false)
  final int? barCodePrintQty;
  @JsonKey(name: 'BarCodePrintUseDesigner', includeIfNull: false)
  final bool? barCodePrintUseDesigner;
  @JsonKey(name: 'GroupProfitLoss', includeIfNull: false)
  final bool? groupProfitLoss;
  @JsonKey(name: 'CategoryCount', includeIfNull: false)
  final int? categoryCount;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.rental, rental) ||
                const DeepCollectionEquality().equals(other.rental, rental)) &&
            (identical(other.sales, sales) ||
                const DeepCollectionEquality().equals(other.sales, sales)) &&
            (identical(other.parts, parts) ||
                const DeepCollectionEquality().equals(other.parts, parts)) &&
            (identical(other.sets, sets) ||
                const DeepCollectionEquality().equals(other.sets, sets)) &&
            (identical(other.props, props) ||
                const DeepCollectionEquality().equals(other.props, props)) &&
            (identical(other.wardrobe, wardrobe) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobe, wardrobe)) &&
            (identical(other.transportation, transportation) ||
                const DeepCollectionEquality()
                    .equals(other.transportation, transportation)) &&
            (identical(other.lowAvailabilityPercent, lowAvailabilityPercent) ||
                const DeepCollectionEquality().equals(
                    other.lowAvailabilityPercent, lowAvailabilityPercent)) &&
            (identical(other.barCodePrintQty, barCodePrintQty) ||
                const DeepCollectionEquality()
                    .equals(other.barCodePrintQty, barCodePrintQty)) &&
            (identical(other.barCodePrintUseDesigner, barCodePrintUseDesigner) ||
                const DeepCollectionEquality().equals(
                    other.barCodePrintUseDesigner, barCodePrintUseDesigner)) &&
            (identical(other.groupProfitLoss, groupProfitLoss) ||
                const DeepCollectionEquality()
                    .equals(other.groupProfitLoss, groupProfitLoss)) &&
            (identical(other.categoryCount, categoryCount) ||
                const DeepCollectionEquality()
                    .equals(other.categoryCount, categoryCount)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsInventoryTypeInventoryTypeExtension
    on WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType {
  WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType copyWith(
      {String? inventoryTypeId,
      String? inventoryType,
      bool? rental,
      bool? sales,
      bool? parts,
      bool? sets,
      bool? props,
      bool? wardrobe,
      bool? transportation,
      int? lowAvailabilityPercent,
      int? barCodePrintQty,
      bool? barCodePrintUseDesigner,
      bool? groupProfitLoss,
      int? categoryCount,
      double? orderBy,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsInventoryTypeInventoryType(
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        rental: rental ?? this.rental,
        sales: sales ?? this.sales,
        parts: parts ?? this.parts,
        sets: sets ?? this.sets,
        props: props ?? this.props,
        wardrobe: wardrobe ?? this.wardrobe,
        transportation: transportation ?? this.transportation,
        lowAvailabilityPercent:
            lowAvailabilityPercent ?? this.lowAvailabilityPercent,
        barCodePrintQty: barCodePrintQty ?? this.barCodePrintQty,
        barCodePrintUseDesigner:
            barCodePrintUseDesigner ?? this.barCodePrintUseDesigner,
        groupProfitLoss: groupProfitLoss ?? this.groupProfitLoss,
        categoryCount: categoryCount ?? this.categoryCount,
        orderBy: orderBy ?? this.orderBy,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequest {
  WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequest({
    this.startAtIndex,
    this.inventoryTypeIds,
  });

  factory WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequestFromJson(
          json);

  @JsonKey(name: 'StartAtIndex', includeIfNull: false)
  final int? startAtIndex;
  @JsonKey(
      name: 'InventoryTypeIds', includeIfNull: false, defaultValue: <String>[])
  final List<String>? inventoryTypeIds;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequest &&
            (identical(other.startAtIndex, startAtIndex) ||
                const DeepCollectionEquality()
                    .equals(other.startAtIndex, startAtIndex)) &&
            (identical(other.inventoryTypeIds, inventoryTypeIds) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeIds, inventoryTypeIds)));
  }
}

extension $WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequestExtension
    on WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequest {
  WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequest
      copyWith({int? startAtIndex, List<String>? inventoryTypeIds}) {
    return WebApiModulesSettingsInventorySettingsInventoryTypeSortInventoryTypeRequest(
        startAtIndex: startAtIndex ?? this.startAtIndex,
        inventoryTypeIds: inventoryTypeIds ?? this.inventoryTypeIds);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory {
  WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory({
    this.inventoryTypeId,
    this.inventoryType,
    this.subsRequireQc,
    this.allCategoryItemsAreSubstitutes,
    this.barCodePrintUseDesigner,
    this.inventoryBarCodeDesignerId,
    this.inventoryBarCodeDesigner,
    this.barCodeDesignerId,
    this.barCodeDesigner,
    this.barCodeType,
    this.categoryId,
    this.category,
    this.warehouseCategory,
    this.catalogCategory,
    this.overrideProfitAndLossCategory,
    this.profitAndLossCategoryId,
    this.profitAndLossCategory,
    this.profitAndLossIncludeAsMiscExpense,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.consignmentIncomeAccountId,
    this.consignmentIncomeAccountNo,
    this.consignmentIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationMonths,
    this.salvageValuePercent,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.inventoryTypeOrderBy,
    this.orderBy,
    this.pickListOrderBy,
    this.subCategoryCount,
    this.inventoryCount,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryFromJson(
          json);

  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'SubsRequireQc', includeIfNull: false)
  final bool? subsRequireQc;
  @JsonKey(name: 'AllCategoryItemsAreSubstitutes', includeIfNull: false)
  final bool? allCategoryItemsAreSubstitutes;
  @JsonKey(name: 'BarCodePrintUseDesigner', includeIfNull: false)
  final bool? barCodePrintUseDesigner;
  @JsonKey(name: 'InventoryBarCodeDesignerId', includeIfNull: false)
  final String? inventoryBarCodeDesignerId;
  @JsonKey(name: 'InventoryBarCodeDesigner', includeIfNull: false)
  final String? inventoryBarCodeDesigner;
  @JsonKey(name: 'BarCodeDesignerId', includeIfNull: false)
  final String? barCodeDesignerId;
  @JsonKey(name: 'BarCodeDesigner', includeIfNull: false)
  final String? barCodeDesigner;
  @JsonKey(name: 'BarCodeType', includeIfNull: false)
  final String? barCodeType;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'WarehouseCategory', includeIfNull: false)
  final bool? warehouseCategory;
  @JsonKey(name: 'CatalogCategory', includeIfNull: false)
  final bool? catalogCategory;
  @JsonKey(name: 'OverrideProfitAndLossCategory', includeIfNull: false)
  final bool? overrideProfitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossCategoryId', includeIfNull: false)
  final String? profitAndLossCategoryId;
  @JsonKey(name: 'ProfitAndLossCategory', includeIfNull: false)
  final String? profitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossIncludeAsMiscExpense', includeIfNull: false)
  final bool? profitAndLossIncludeAsMiscExpense;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'ConsignmentIncomeAccountId', includeIfNull: false)
  final String? consignmentIncomeAccountId;
  @JsonKey(name: 'ConsignmentIncomeAccountNo', includeIfNull: false)
  final String? consignmentIncomeAccountNo;
  @JsonKey(name: 'ConsignmentIncomeAccountDescription', includeIfNull: false)
  final String? consignmentIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationMonths', includeIfNull: false)
  final int? depreciationMonths;
  @JsonKey(name: 'SalvageValuePercent', includeIfNull: false)
  final double? salvageValuePercent;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'InventoryTypeOrderBy', includeIfNull: false)
  final double? inventoryTypeOrderBy;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'PickListOrderBy', includeIfNull: false)
  final int? pickListOrderBy;
  @JsonKey(name: 'SubCategoryCount', includeIfNull: false)
  final int? subCategoryCount;
  @JsonKey(name: 'InventoryCount', includeIfNull: false)
  final int? inventoryCount;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.subsRequireQc, subsRequireQc) ||
                const DeepCollectionEquality()
                    .equals(other.subsRequireQc, subsRequireQc)) &&
            (identical(other.allCategoryItemsAreSubstitutes, allCategoryItemsAreSubstitutes) ||
                const DeepCollectionEquality().equals(
                    other.allCategoryItemsAreSubstitutes,
                    allCategoryItemsAreSubstitutes)) &&
            (identical(other.barCodePrintUseDesigner, barCodePrintUseDesigner) ||
                const DeepCollectionEquality().equals(
                    other.barCodePrintUseDesigner, barCodePrintUseDesigner)) &&
            (identical(other.inventoryBarCodeDesignerId, inventoryBarCodeDesignerId) ||
                const DeepCollectionEquality().equals(
                    other.inventoryBarCodeDesignerId,
                    inventoryBarCodeDesignerId)) &&
            (identical(other.inventoryBarCodeDesigner, inventoryBarCodeDesigner) ||
                const DeepCollectionEquality().equals(
                    other.inventoryBarCodeDesigner,
                    inventoryBarCodeDesigner)) &&
            (identical(other.barCodeDesignerId, barCodeDesignerId) ||
                const DeepCollectionEquality()
                    .equals(other.barCodeDesignerId, barCodeDesignerId)) &&
            (identical(other.barCodeDesigner, barCodeDesigner) ||
                const DeepCollectionEquality()
                    .equals(other.barCodeDesigner, barCodeDesigner)) &&
            (identical(other.barCodeType, barCodeType) ||
                const DeepCollectionEquality().equals(other.barCodeType, barCodeType)) &&
            (identical(other.categoryId, categoryId) || const DeepCollectionEquality().equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) || const DeepCollectionEquality().equals(other.category, category)) &&
            (identical(other.warehouseCategory, warehouseCategory) || const DeepCollectionEquality().equals(other.warehouseCategory, warehouseCategory)) &&
            (identical(other.catalogCategory, catalogCategory) || const DeepCollectionEquality().equals(other.catalogCategory, catalogCategory)) &&
            (identical(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory) || const DeepCollectionEquality().equals(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory)) &&
            (identical(other.profitAndLossCategoryId, profitAndLossCategoryId) || const DeepCollectionEquality().equals(other.profitAndLossCategoryId, profitAndLossCategoryId)) &&
            (identical(other.profitAndLossCategory, profitAndLossCategory) || const DeepCollectionEquality().equals(other.profitAndLossCategory, profitAndLossCategory)) &&
            (identical(other.profitAndLossIncludeAsMiscExpense, profitAndLossIncludeAsMiscExpense) || const DeepCollectionEquality().equals(other.profitAndLossIncludeAsMiscExpense, profitAndLossIncludeAsMiscExpense)) &&
            (identical(other.assetAccountId, assetAccountId) || const DeepCollectionEquality().equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) || const DeepCollectionEquality().equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) || const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.consignmentIncomeAccountId, consignmentIncomeAccountId) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountId, consignmentIncomeAccountId)) &&
            (identical(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo)) &&
            (identical(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationMonths, depreciationMonths) || const DeepCollectionEquality().equals(other.depreciationMonths, depreciationMonths)) &&
            (identical(other.salvageValuePercent, salvageValuePercent) || const DeepCollectionEquality().equals(other.salvageValuePercent, salvageValuePercent)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.inventoryTypeOrderBy, inventoryTypeOrderBy) || const DeepCollectionEquality().equals(other.inventoryTypeOrderBy, inventoryTypeOrderBy)) &&
            (identical(other.orderBy, orderBy) || const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.pickListOrderBy, pickListOrderBy) || const DeepCollectionEquality().equals(other.pickListOrderBy, pickListOrderBy)) &&
            (identical(other.subCategoryCount, subCategoryCount) || const DeepCollectionEquality().equals(other.subCategoryCount, subCategoryCount)) &&
            (identical(other.inventoryCount, inventoryCount) || const DeepCollectionEquality().equals(other.inventoryCount, inventoryCount)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategoryExtension
    on WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory {
  WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory copyWith(
      {String? inventoryTypeId,
      String? inventoryType,
      bool? subsRequireQc,
      bool? allCategoryItemsAreSubstitutes,
      bool? barCodePrintUseDesigner,
      String? inventoryBarCodeDesignerId,
      String? inventoryBarCodeDesigner,
      String? barCodeDesignerId,
      String? barCodeDesigner,
      String? barCodeType,
      String? categoryId,
      String? category,
      bool? warehouseCategory,
      bool? catalogCategory,
      bool? overrideProfitAndLossCategory,
      String? profitAndLossCategoryId,
      String? profitAndLossCategory,
      bool? profitAndLossIncludeAsMiscExpense,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? consignmentIncomeAccountId,
      String? consignmentIncomeAccountNo,
      String? consignmentIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      int? depreciationMonths,
      double? salvageValuePercent,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      double? inventoryTypeOrderBy,
      double? orderBy,
      int? pickListOrderBy,
      int? subCategoryCount,
      int? inventoryCount,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsPartsCategoryPartsCategory(
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        subsRequireQc: subsRequireQc ?? this.subsRequireQc,
        allCategoryItemsAreSubstitutes: allCategoryItemsAreSubstitutes ??
            this.allCategoryItemsAreSubstitutes,
        barCodePrintUseDesigner:
            barCodePrintUseDesigner ?? this.barCodePrintUseDesigner,
        inventoryBarCodeDesignerId:
            inventoryBarCodeDesignerId ?? this.inventoryBarCodeDesignerId,
        inventoryBarCodeDesigner:
            inventoryBarCodeDesigner ?? this.inventoryBarCodeDesigner,
        barCodeDesignerId: barCodeDesignerId ?? this.barCodeDesignerId,
        barCodeDesigner: barCodeDesigner ?? this.barCodeDesigner,
        barCodeType: barCodeType ?? this.barCodeType,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        warehouseCategory: warehouseCategory ?? this.warehouseCategory,
        catalogCategory: catalogCategory ?? this.catalogCategory,
        overrideProfitAndLossCategory:
            overrideProfitAndLossCategory ?? this.overrideProfitAndLossCategory,
        profitAndLossCategoryId:
            profitAndLossCategoryId ?? this.profitAndLossCategoryId,
        profitAndLossCategory:
            profitAndLossCategory ?? this.profitAndLossCategory,
        profitAndLossIncludeAsMiscExpense: profitAndLossIncludeAsMiscExpense ??
            this.profitAndLossIncludeAsMiscExpense,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        consignmentIncomeAccountId:
            consignmentIncomeAccountId ?? this.consignmentIncomeAccountId,
        consignmentIncomeAccountNo:
            consignmentIncomeAccountNo ?? this.consignmentIncomeAccountNo,
        consignmentIncomeAccountDescription: consignmentIncomeAccountDescription ??
            this.consignmentIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription: equipmentSaleIncomeAccountDescription ??
            this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription:
            costOfGoodsSoldExpenseAccountDescription ??
                this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationMonths: depreciationMonths ?? this.depreciationMonths,
        salvageValuePercent: salvageValuePercent ?? this.salvageValuePercent,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription: depreciationExpenseAccountDescription ??
            this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId:
            accumulatedDepreciationExpenseAccountId ??
                this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo:
            accumulatedDepreciationExpenseAccountNo ??
                this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ??
                this.accumulatedDepreciationExpenseAccountDescription,
        inventoryTypeOrderBy: inventoryTypeOrderBy ?? this.inventoryTypeOrderBy,
        orderBy: orderBy ?? this.orderBy,
        pickListOrderBy: pickListOrderBy ?? this.pickListOrderBy,
        subCategoryCount: subCategoryCount ?? this.subCategoryCount,
        inventoryCount: inventoryCount ?? this.inventoryCount,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory {
  WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory({
    this.inventoryTypeId,
    this.inventoryType,
    this.subsRequireQc,
    this.allCategoryItemsAreSubstitutes,
    this.barCodePrintUseDesigner,
    this.inventoryBarCodeDesignerId,
    this.inventoryBarCodeDesigner,
    this.barCodeDesignerId,
    this.barCodeDesigner,
    this.barCodeType,
    this.scheduleItems,
    this.hasMaintenance,
    this.preventiveMaintenanceCycle,
    this.preventiveMaintenanceCyclePeriod,
    this.categoryId,
    this.category,
    this.warehouseCategory,
    this.catalogCategory,
    this.overrideProfitAndLossCategory,
    this.profitAndLossCategoryId,
    this.profitAndLossCategory,
    this.profitAndLossIncludeAsMiscExpense,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.consignmentIncomeAccountId,
    this.consignmentIncomeAccountNo,
    this.consignmentIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationMonths,
    this.salvageValuePercent,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.inventoryTypeOrderBy,
    this.orderBy,
    this.pickListOrderBy,
    this.subCategoryCount,
    this.inventoryCount,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryFromJson(
          json);

  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'SubsRequireQc', includeIfNull: false)
  final bool? subsRequireQc;
  @JsonKey(name: 'AllCategoryItemsAreSubstitutes', includeIfNull: false)
  final bool? allCategoryItemsAreSubstitutes;
  @JsonKey(name: 'BarCodePrintUseDesigner', includeIfNull: false)
  final bool? barCodePrintUseDesigner;
  @JsonKey(name: 'InventoryBarCodeDesignerId', includeIfNull: false)
  final String? inventoryBarCodeDesignerId;
  @JsonKey(name: 'InventoryBarCodeDesigner', includeIfNull: false)
  final String? inventoryBarCodeDesigner;
  @JsonKey(name: 'BarCodeDesignerId', includeIfNull: false)
  final String? barCodeDesignerId;
  @JsonKey(name: 'BarCodeDesigner', includeIfNull: false)
  final String? barCodeDesigner;
  @JsonKey(name: 'BarCodeType', includeIfNull: false)
  final String? barCodeType;
  @JsonKey(name: 'ScheduleItems', includeIfNull: false)
  final bool? scheduleItems;
  @JsonKey(name: 'HasMaintenance', includeIfNull: false)
  final bool? hasMaintenance;
  @JsonKey(name: 'PreventiveMaintenanceCycle', includeIfNull: false)
  final String? preventiveMaintenanceCycle;
  @JsonKey(name: 'PreventiveMaintenanceCyclePeriod', includeIfNull: false)
  final int? preventiveMaintenanceCyclePeriod;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'WarehouseCategory', includeIfNull: false)
  final bool? warehouseCategory;
  @JsonKey(name: 'CatalogCategory', includeIfNull: false)
  final bool? catalogCategory;
  @JsonKey(name: 'OverrideProfitAndLossCategory', includeIfNull: false)
  final bool? overrideProfitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossCategoryId', includeIfNull: false)
  final String? profitAndLossCategoryId;
  @JsonKey(name: 'ProfitAndLossCategory', includeIfNull: false)
  final String? profitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossIncludeAsMiscExpense', includeIfNull: false)
  final bool? profitAndLossIncludeAsMiscExpense;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'ConsignmentIncomeAccountId', includeIfNull: false)
  final String? consignmentIncomeAccountId;
  @JsonKey(name: 'ConsignmentIncomeAccountNo', includeIfNull: false)
  final String? consignmentIncomeAccountNo;
  @JsonKey(name: 'ConsignmentIncomeAccountDescription', includeIfNull: false)
  final String? consignmentIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationMonths', includeIfNull: false)
  final int? depreciationMonths;
  @JsonKey(name: 'SalvageValuePercent', includeIfNull: false)
  final double? salvageValuePercent;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'InventoryTypeOrderBy', includeIfNull: false)
  final double? inventoryTypeOrderBy;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'PickListOrderBy', includeIfNull: false)
  final int? pickListOrderBy;
  @JsonKey(name: 'SubCategoryCount', includeIfNull: false)
  final int? subCategoryCount;
  @JsonKey(name: 'InventoryCount', includeIfNull: false)
  final int? inventoryCount;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.subsRequireQc, subsRequireQc) ||
                const DeepCollectionEquality()
                    .equals(other.subsRequireQc, subsRequireQc)) &&
            (identical(other.allCategoryItemsAreSubstitutes, allCategoryItemsAreSubstitutes) ||
                const DeepCollectionEquality().equals(
                    other.allCategoryItemsAreSubstitutes,
                    allCategoryItemsAreSubstitutes)) &&
            (identical(other.barCodePrintUseDesigner, barCodePrintUseDesigner) ||
                const DeepCollectionEquality().equals(
                    other.barCodePrintUseDesigner, barCodePrintUseDesigner)) &&
            (identical(other.inventoryBarCodeDesignerId, inventoryBarCodeDesignerId) ||
                const DeepCollectionEquality().equals(
                    other.inventoryBarCodeDesignerId,
                    inventoryBarCodeDesignerId)) &&
            (identical(other.inventoryBarCodeDesigner, inventoryBarCodeDesigner) ||
                const DeepCollectionEquality().equals(
                    other.inventoryBarCodeDesigner,
                    inventoryBarCodeDesigner)) &&
            (identical(other.barCodeDesignerId, barCodeDesignerId) ||
                const DeepCollectionEquality()
                    .equals(other.barCodeDesignerId, barCodeDesignerId)) &&
            (identical(other.barCodeDesigner, barCodeDesigner) ||
                const DeepCollectionEquality()
                    .equals(other.barCodeDesigner, barCodeDesigner)) &&
            (identical(other.barCodeType, barCodeType) ||
                const DeepCollectionEquality().equals(other.barCodeType, barCodeType)) &&
            (identical(other.scheduleItems, scheduleItems) || const DeepCollectionEquality().equals(other.scheduleItems, scheduleItems)) &&
            (identical(other.hasMaintenance, hasMaintenance) || const DeepCollectionEquality().equals(other.hasMaintenance, hasMaintenance)) &&
            (identical(other.preventiveMaintenanceCycle, preventiveMaintenanceCycle) || const DeepCollectionEquality().equals(other.preventiveMaintenanceCycle, preventiveMaintenanceCycle)) &&
            (identical(other.preventiveMaintenanceCyclePeriod, preventiveMaintenanceCyclePeriod) || const DeepCollectionEquality().equals(other.preventiveMaintenanceCyclePeriod, preventiveMaintenanceCyclePeriod)) &&
            (identical(other.categoryId, categoryId) || const DeepCollectionEquality().equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) || const DeepCollectionEquality().equals(other.category, category)) &&
            (identical(other.warehouseCategory, warehouseCategory) || const DeepCollectionEquality().equals(other.warehouseCategory, warehouseCategory)) &&
            (identical(other.catalogCategory, catalogCategory) || const DeepCollectionEquality().equals(other.catalogCategory, catalogCategory)) &&
            (identical(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory) || const DeepCollectionEquality().equals(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory)) &&
            (identical(other.profitAndLossCategoryId, profitAndLossCategoryId) || const DeepCollectionEquality().equals(other.profitAndLossCategoryId, profitAndLossCategoryId)) &&
            (identical(other.profitAndLossCategory, profitAndLossCategory) || const DeepCollectionEquality().equals(other.profitAndLossCategory, profitAndLossCategory)) &&
            (identical(other.profitAndLossIncludeAsMiscExpense, profitAndLossIncludeAsMiscExpense) || const DeepCollectionEquality().equals(other.profitAndLossIncludeAsMiscExpense, profitAndLossIncludeAsMiscExpense)) &&
            (identical(other.assetAccountId, assetAccountId) || const DeepCollectionEquality().equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) || const DeepCollectionEquality().equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) || const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.consignmentIncomeAccountId, consignmentIncomeAccountId) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountId, consignmentIncomeAccountId)) &&
            (identical(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo)) &&
            (identical(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationMonths, depreciationMonths) || const DeepCollectionEquality().equals(other.depreciationMonths, depreciationMonths)) &&
            (identical(other.salvageValuePercent, salvageValuePercent) || const DeepCollectionEquality().equals(other.salvageValuePercent, salvageValuePercent)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.inventoryTypeOrderBy, inventoryTypeOrderBy) || const DeepCollectionEquality().equals(other.inventoryTypeOrderBy, inventoryTypeOrderBy)) &&
            (identical(other.orderBy, orderBy) || const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.pickListOrderBy, pickListOrderBy) || const DeepCollectionEquality().equals(other.pickListOrderBy, pickListOrderBy)) &&
            (identical(other.subCategoryCount, subCategoryCount) || const DeepCollectionEquality().equals(other.subCategoryCount, subCategoryCount)) &&
            (identical(other.inventoryCount, inventoryCount) || const DeepCollectionEquality().equals(other.inventoryCount, inventoryCount)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategoryExtension
    on WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory {
  WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory copyWith(
      {String? inventoryTypeId,
      String? inventoryType,
      bool? subsRequireQc,
      bool? allCategoryItemsAreSubstitutes,
      bool? barCodePrintUseDesigner,
      String? inventoryBarCodeDesignerId,
      String? inventoryBarCodeDesigner,
      String? barCodeDesignerId,
      String? barCodeDesigner,
      String? barCodeType,
      bool? scheduleItems,
      bool? hasMaintenance,
      String? preventiveMaintenanceCycle,
      int? preventiveMaintenanceCyclePeriod,
      String? categoryId,
      String? category,
      bool? warehouseCategory,
      bool? catalogCategory,
      bool? overrideProfitAndLossCategory,
      String? profitAndLossCategoryId,
      String? profitAndLossCategory,
      bool? profitAndLossIncludeAsMiscExpense,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? consignmentIncomeAccountId,
      String? consignmentIncomeAccountNo,
      String? consignmentIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      int? depreciationMonths,
      double? salvageValuePercent,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      double? inventoryTypeOrderBy,
      double? orderBy,
      int? pickListOrderBy,
      int? subCategoryCount,
      int? inventoryCount,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsRentalCategoryRentalCategory(
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        subsRequireQc: subsRequireQc ?? this.subsRequireQc,
        allCategoryItemsAreSubstitutes: allCategoryItemsAreSubstitutes ??
            this.allCategoryItemsAreSubstitutes,
        barCodePrintUseDesigner:
            barCodePrintUseDesigner ?? this.barCodePrintUseDesigner,
        inventoryBarCodeDesignerId:
            inventoryBarCodeDesignerId ?? this.inventoryBarCodeDesignerId,
        inventoryBarCodeDesigner:
            inventoryBarCodeDesigner ?? this.inventoryBarCodeDesigner,
        barCodeDesignerId: barCodeDesignerId ?? this.barCodeDesignerId,
        barCodeDesigner: barCodeDesigner ?? this.barCodeDesigner,
        barCodeType: barCodeType ?? this.barCodeType,
        scheduleItems: scheduleItems ?? this.scheduleItems,
        hasMaintenance: hasMaintenance ?? this.hasMaintenance,
        preventiveMaintenanceCycle:
            preventiveMaintenanceCycle ?? this.preventiveMaintenanceCycle,
        preventiveMaintenanceCyclePeriod: preventiveMaintenanceCyclePeriod ??
            this.preventiveMaintenanceCyclePeriod,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        warehouseCategory: warehouseCategory ?? this.warehouseCategory,
        catalogCategory: catalogCategory ?? this.catalogCategory,
        overrideProfitAndLossCategory:
            overrideProfitAndLossCategory ?? this.overrideProfitAndLossCategory,
        profitAndLossCategoryId:
            profitAndLossCategoryId ?? this.profitAndLossCategoryId,
        profitAndLossCategory:
            profitAndLossCategory ?? this.profitAndLossCategory,
        profitAndLossIncludeAsMiscExpense: profitAndLossIncludeAsMiscExpense ??
            this.profitAndLossIncludeAsMiscExpense,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        consignmentIncomeAccountId:
            consignmentIncomeAccountId ?? this.consignmentIncomeAccountId,
        consignmentIncomeAccountNo:
            consignmentIncomeAccountNo ?? this.consignmentIncomeAccountNo,
        consignmentIncomeAccountDescription: consignmentIncomeAccountDescription ??
            this.consignmentIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription: equipmentSaleIncomeAccountDescription ??
            this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription:
            costOfGoodsSoldExpenseAccountDescription ??
                this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationMonths: depreciationMonths ?? this.depreciationMonths,
        salvageValuePercent: salvageValuePercent ?? this.salvageValuePercent,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription: depreciationExpenseAccountDescription ??
            this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId: accumulatedDepreciationExpenseAccountId ??
            this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo:
            accumulatedDepreciationExpenseAccountNo ??
                this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ??
                this.accumulatedDepreciationExpenseAccountDescription,
        inventoryTypeOrderBy: inventoryTypeOrderBy ?? this.inventoryTypeOrderBy,
        orderBy: orderBy ?? this.orderBy,
        pickListOrderBy: pickListOrderBy ?? this.pickListOrderBy,
        subCategoryCount: subCategoryCount ?? this.subCategoryCount,
        inventoryCount: inventoryCount ?? this.inventoryCount,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason {
  WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason({
    this.retiredReasonId,
    this.retiredReason,
    this.reasonType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonFromJson(
          json);

  @JsonKey(name: 'RetiredReasonId', includeIfNull: false)
  final String? retiredReasonId;
  @JsonKey(name: 'RetiredReason', includeIfNull: false)
  final String? retiredReason;
  @JsonKey(name: 'ReasonType', includeIfNull: false)
  final String? reasonType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason &&
            (identical(other.retiredReasonId, retiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.retiredReasonId, retiredReasonId)) &&
            (identical(other.retiredReason, retiredReason) ||
                const DeepCollectionEquality()
                    .equals(other.retiredReason, retiredReason)) &&
            (identical(other.reasonType, reasonType) ||
                const DeepCollectionEquality()
                    .equals(other.reasonType, reasonType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReasonExtension
    on WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason {
  WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason copyWith(
      {String? retiredReasonId,
      String? retiredReason,
      String? reasonType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsRetiredReasonRetiredReason(
        retiredReasonId: retiredReasonId ?? this.retiredReasonId,
        retiredReason: retiredReason ?? this.retiredReason,
        reasonType: reasonType ?? this.reasonType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory {
  WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory({
    this.inventoryTypeId,
    this.inventoryType,
    this.subsRequireQc,
    this.allCategoryItemsAreSubstitutes,
    this.barCodePrintUseDesigner,
    this.inventoryBarCodeDesignerId,
    this.inventoryBarCodeDesigner,
    this.barCodeDesignerId,
    this.barCodeDesigner,
    this.barCodeType,
    this.categoryId,
    this.category,
    this.warehouseCategory,
    this.catalogCategory,
    this.overrideProfitAndLossCategory,
    this.profitAndLossCategoryId,
    this.profitAndLossCategory,
    this.profitAndLossIncludeAsMiscExpense,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.consignmentIncomeAccountId,
    this.consignmentIncomeAccountNo,
    this.consignmentIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationMonths,
    this.salvageValuePercent,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.inventoryTypeOrderBy,
    this.orderBy,
    this.pickListOrderBy,
    this.subCategoryCount,
    this.inventoryCount,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryFromJson(
          json);

  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'SubsRequireQc', includeIfNull: false)
  final bool? subsRequireQc;
  @JsonKey(name: 'AllCategoryItemsAreSubstitutes', includeIfNull: false)
  final bool? allCategoryItemsAreSubstitutes;
  @JsonKey(name: 'BarCodePrintUseDesigner', includeIfNull: false)
  final bool? barCodePrintUseDesigner;
  @JsonKey(name: 'InventoryBarCodeDesignerId', includeIfNull: false)
  final String? inventoryBarCodeDesignerId;
  @JsonKey(name: 'InventoryBarCodeDesigner', includeIfNull: false)
  final String? inventoryBarCodeDesigner;
  @JsonKey(name: 'BarCodeDesignerId', includeIfNull: false)
  final String? barCodeDesignerId;
  @JsonKey(name: 'BarCodeDesigner', includeIfNull: false)
  final String? barCodeDesigner;
  @JsonKey(name: 'BarCodeType', includeIfNull: false)
  final String? barCodeType;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'WarehouseCategory', includeIfNull: false)
  final bool? warehouseCategory;
  @JsonKey(name: 'CatalogCategory', includeIfNull: false)
  final bool? catalogCategory;
  @JsonKey(name: 'OverrideProfitAndLossCategory', includeIfNull: false)
  final bool? overrideProfitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossCategoryId', includeIfNull: false)
  final String? profitAndLossCategoryId;
  @JsonKey(name: 'ProfitAndLossCategory', includeIfNull: false)
  final String? profitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossIncludeAsMiscExpense', includeIfNull: false)
  final bool? profitAndLossIncludeAsMiscExpense;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'ConsignmentIncomeAccountId', includeIfNull: false)
  final String? consignmentIncomeAccountId;
  @JsonKey(name: 'ConsignmentIncomeAccountNo', includeIfNull: false)
  final String? consignmentIncomeAccountNo;
  @JsonKey(name: 'ConsignmentIncomeAccountDescription', includeIfNull: false)
  final String? consignmentIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationMonths', includeIfNull: false)
  final int? depreciationMonths;
  @JsonKey(name: 'SalvageValuePercent', includeIfNull: false)
  final double? salvageValuePercent;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'InventoryTypeOrderBy', includeIfNull: false)
  final double? inventoryTypeOrderBy;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'PickListOrderBy', includeIfNull: false)
  final int? pickListOrderBy;
  @JsonKey(name: 'SubCategoryCount', includeIfNull: false)
  final int? subCategoryCount;
  @JsonKey(name: 'InventoryCount', includeIfNull: false)
  final int? inventoryCount;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.subsRequireQc, subsRequireQc) ||
                const DeepCollectionEquality()
                    .equals(other.subsRequireQc, subsRequireQc)) &&
            (identical(other.allCategoryItemsAreSubstitutes, allCategoryItemsAreSubstitutes) ||
                const DeepCollectionEquality().equals(
                    other.allCategoryItemsAreSubstitutes,
                    allCategoryItemsAreSubstitutes)) &&
            (identical(other.barCodePrintUseDesigner, barCodePrintUseDesigner) ||
                const DeepCollectionEquality().equals(
                    other.barCodePrintUseDesigner, barCodePrintUseDesigner)) &&
            (identical(other.inventoryBarCodeDesignerId, inventoryBarCodeDesignerId) ||
                const DeepCollectionEquality().equals(
                    other.inventoryBarCodeDesignerId,
                    inventoryBarCodeDesignerId)) &&
            (identical(other.inventoryBarCodeDesigner, inventoryBarCodeDesigner) ||
                const DeepCollectionEquality().equals(
                    other.inventoryBarCodeDesigner,
                    inventoryBarCodeDesigner)) &&
            (identical(other.barCodeDesignerId, barCodeDesignerId) ||
                const DeepCollectionEquality()
                    .equals(other.barCodeDesignerId, barCodeDesignerId)) &&
            (identical(other.barCodeDesigner, barCodeDesigner) ||
                const DeepCollectionEquality()
                    .equals(other.barCodeDesigner, barCodeDesigner)) &&
            (identical(other.barCodeType, barCodeType) ||
                const DeepCollectionEquality().equals(other.barCodeType, barCodeType)) &&
            (identical(other.categoryId, categoryId) || const DeepCollectionEquality().equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) || const DeepCollectionEquality().equals(other.category, category)) &&
            (identical(other.warehouseCategory, warehouseCategory) || const DeepCollectionEquality().equals(other.warehouseCategory, warehouseCategory)) &&
            (identical(other.catalogCategory, catalogCategory) || const DeepCollectionEquality().equals(other.catalogCategory, catalogCategory)) &&
            (identical(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory) || const DeepCollectionEquality().equals(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory)) &&
            (identical(other.profitAndLossCategoryId, profitAndLossCategoryId) || const DeepCollectionEquality().equals(other.profitAndLossCategoryId, profitAndLossCategoryId)) &&
            (identical(other.profitAndLossCategory, profitAndLossCategory) || const DeepCollectionEquality().equals(other.profitAndLossCategory, profitAndLossCategory)) &&
            (identical(other.profitAndLossIncludeAsMiscExpense, profitAndLossIncludeAsMiscExpense) || const DeepCollectionEquality().equals(other.profitAndLossIncludeAsMiscExpense, profitAndLossIncludeAsMiscExpense)) &&
            (identical(other.assetAccountId, assetAccountId) || const DeepCollectionEquality().equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) || const DeepCollectionEquality().equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) || const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.consignmentIncomeAccountId, consignmentIncomeAccountId) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountId, consignmentIncomeAccountId)) &&
            (identical(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo)) &&
            (identical(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationMonths, depreciationMonths) || const DeepCollectionEquality().equals(other.depreciationMonths, depreciationMonths)) &&
            (identical(other.salvageValuePercent, salvageValuePercent) || const DeepCollectionEquality().equals(other.salvageValuePercent, salvageValuePercent)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.inventoryTypeOrderBy, inventoryTypeOrderBy) || const DeepCollectionEquality().equals(other.inventoryTypeOrderBy, inventoryTypeOrderBy)) &&
            (identical(other.orderBy, orderBy) || const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.pickListOrderBy, pickListOrderBy) || const DeepCollectionEquality().equals(other.pickListOrderBy, pickListOrderBy)) &&
            (identical(other.subCategoryCount, subCategoryCount) || const DeepCollectionEquality().equals(other.subCategoryCount, subCategoryCount)) &&
            (identical(other.inventoryCount, inventoryCount) || const DeepCollectionEquality().equals(other.inventoryCount, inventoryCount)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsSalesCategorySalesCategoryExtension
    on WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory {
  WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory copyWith(
      {String? inventoryTypeId,
      String? inventoryType,
      bool? subsRequireQc,
      bool? allCategoryItemsAreSubstitutes,
      bool? barCodePrintUseDesigner,
      String? inventoryBarCodeDesignerId,
      String? inventoryBarCodeDesigner,
      String? barCodeDesignerId,
      String? barCodeDesigner,
      String? barCodeType,
      String? categoryId,
      String? category,
      bool? warehouseCategory,
      bool? catalogCategory,
      bool? overrideProfitAndLossCategory,
      String? profitAndLossCategoryId,
      String? profitAndLossCategory,
      bool? profitAndLossIncludeAsMiscExpense,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? consignmentIncomeAccountId,
      String? consignmentIncomeAccountNo,
      String? consignmentIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      int? depreciationMonths,
      double? salvageValuePercent,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      double? inventoryTypeOrderBy,
      double? orderBy,
      int? pickListOrderBy,
      int? subCategoryCount,
      int? inventoryCount,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsSalesCategorySalesCategory(
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        subsRequireQc: subsRequireQc ?? this.subsRequireQc,
        allCategoryItemsAreSubstitutes: allCategoryItemsAreSubstitutes ??
            this.allCategoryItemsAreSubstitutes,
        barCodePrintUseDesigner:
            barCodePrintUseDesigner ?? this.barCodePrintUseDesigner,
        inventoryBarCodeDesignerId:
            inventoryBarCodeDesignerId ?? this.inventoryBarCodeDesignerId,
        inventoryBarCodeDesigner:
            inventoryBarCodeDesigner ?? this.inventoryBarCodeDesigner,
        barCodeDesignerId: barCodeDesignerId ?? this.barCodeDesignerId,
        barCodeDesigner: barCodeDesigner ?? this.barCodeDesigner,
        barCodeType: barCodeType ?? this.barCodeType,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        warehouseCategory: warehouseCategory ?? this.warehouseCategory,
        catalogCategory: catalogCategory ?? this.catalogCategory,
        overrideProfitAndLossCategory:
            overrideProfitAndLossCategory ?? this.overrideProfitAndLossCategory,
        profitAndLossCategoryId:
            profitAndLossCategoryId ?? this.profitAndLossCategoryId,
        profitAndLossCategory:
            profitAndLossCategory ?? this.profitAndLossCategory,
        profitAndLossIncludeAsMiscExpense: profitAndLossIncludeAsMiscExpense ??
            this.profitAndLossIncludeAsMiscExpense,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        consignmentIncomeAccountId:
            consignmentIncomeAccountId ?? this.consignmentIncomeAccountId,
        consignmentIncomeAccountNo:
            consignmentIncomeAccountNo ?? this.consignmentIncomeAccountNo,
        consignmentIncomeAccountDescription: consignmentIncomeAccountDescription ??
            this.consignmentIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription: equipmentSaleIncomeAccountDescription ??
            this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription:
            costOfGoodsSoldExpenseAccountDescription ??
                this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationMonths: depreciationMonths ?? this.depreciationMonths,
        salvageValuePercent: salvageValuePercent ?? this.salvageValuePercent,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription: depreciationExpenseAccountDescription ??
            this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId:
            accumulatedDepreciationExpenseAccountId ??
                this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo:
            accumulatedDepreciationExpenseAccountNo ??
                this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ??
                this.accumulatedDepreciationExpenseAccountDescription,
        inventoryTypeOrderBy: inventoryTypeOrderBy ?? this.inventoryTypeOrderBy,
        orderBy: orderBy ?? this.orderBy,
        pickListOrderBy: pickListOrderBy ?? this.pickListOrderBy,
        subCategoryCount: subCategoryCount ?? this.subCategoryCount,
        inventoryCount: inventoryCount ?? this.inventoryCount,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsUnitUnit {
  WebApiModulesSettingsInventorySettingsUnitUnit({
    this.unitId,
    this.unit,
    this.description,
    this.unitType,
    this.pluralDescription,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsUnitUnit.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsUnitUnitFromJson(json);

  @JsonKey(name: 'UnitId', includeIfNull: false)
  final String? unitId;
  @JsonKey(name: 'Unit', includeIfNull: false)
  final String? unit;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'UnitType', includeIfNull: false)
  final String? unitType;
  @JsonKey(name: 'PluralDescription', includeIfNull: false)
  final String? pluralDescription;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsUnitUnitFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsUnitUnitToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsUnitUnitToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsUnitUnit &&
            (identical(other.unitId, unitId) ||
                const DeepCollectionEquality().equals(other.unitId, unitId)) &&
            (identical(other.unit, unit) ||
                const DeepCollectionEquality().equals(other.unit, unit)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.unitType, unitType) ||
                const DeepCollectionEquality()
                    .equals(other.unitType, unitType)) &&
            (identical(other.pluralDescription, pluralDescription) ||
                const DeepCollectionEquality()
                    .equals(other.pluralDescription, pluralDescription)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsUnitUnitExtension
    on WebApiModulesSettingsInventorySettingsUnitUnit {
  WebApiModulesSettingsInventorySettingsUnitUnit copyWith(
      {String? unitId,
      String? unit,
      String? description,
      String? unitType,
      String? pluralDescription,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsUnitUnit(
        unitId: unitId ?? this.unitId,
        unit: unit ?? this.unit,
        description: description ?? this.description,
        unitType: unitType ?? this.unitType,
        pluralDescription: pluralDescription ?? this.pluralDescription,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason {
  WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason({
    this.unretiredReasonId,
    this.unretiredReason,
    this.reasonType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonFromJson(
          json);

  @JsonKey(name: 'UnretiredReasonId', includeIfNull: false)
  final String? unretiredReasonId;
  @JsonKey(name: 'UnretiredReason', includeIfNull: false)
  final String? unretiredReason;
  @JsonKey(name: 'ReasonType', includeIfNull: false)
  final String? reasonType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason &&
            (identical(other.unretiredReasonId, unretiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.unretiredReasonId, unretiredReasonId)) &&
            (identical(other.unretiredReason, unretiredReason) ||
                const DeepCollectionEquality()
                    .equals(other.unretiredReason, unretiredReason)) &&
            (identical(other.reasonType, reasonType) ||
                const DeepCollectionEquality()
                    .equals(other.reasonType, reasonType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReasonExtension
    on WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason {
  WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason copyWith(
      {String? unretiredReasonId,
      String? unretiredReason,
      String? reasonType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsUnretiredReasonUnretiredReason(
        unretiredReasonId: unretiredReasonId ?? this.unretiredReasonId,
        unretiredReason: unretiredReason ?? this.unretiredReason,
        reasonType: reasonType ?? this.reasonType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog {
  WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog({
    this.warehouseCatalogId,
    this.warehouseCatalog,
    this.catalogType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogFromJson(
          json);

  @JsonKey(name: 'WarehouseCatalogId', includeIfNull: false)
  final String? warehouseCatalogId;
  @JsonKey(name: 'WarehouseCatalog', includeIfNull: false)
  final String? warehouseCatalog;
  @JsonKey(name: 'CatalogType', includeIfNull: false)
  final String? catalogType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog &&
            (identical(other.warehouseCatalogId, warehouseCatalogId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCatalogId, warehouseCatalogId)) &&
            (identical(other.warehouseCatalog, warehouseCatalog) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCatalog, warehouseCatalog)) &&
            (identical(other.catalogType, catalogType) ||
                const DeepCollectionEquality()
                    .equals(other.catalogType, catalogType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalogExtension
    on WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog {
  WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog
      copyWith(
          {String? warehouseCatalogId,
          String? warehouseCatalog,
          String? catalogType,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsInventorySettingsWarehouseCatalogWarehouseCatalog(
        warehouseCatalogId: warehouseCatalogId ?? this.warehouseCatalogId,
        warehouseCatalog: warehouseCatalog ?? this.warehouseCatalog,
        catalogType: catalogType ?? this.catalogType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsLaborSettingsCrewCrew {
  WebApiModulesSettingsLaborSettingsCrewCrew({
    this.crewId,
    this.userId,
    this.isUser,
    this.salutation,
    this.nameFirstMiddleLast,
    this.person,
    this.lastName,
    this.firstName,
    this.address1,
    this.address2,
    this.city,
    this.state,
    this.countryId,
    this.country,
    this.zipCode,
    this.middleInitial,
    this.location,
    this.position,
    this.officePhone,
    this.officeExtension,
    this.directPhone,
    this.directExtension,
    this.fax,
    this.faxExtension,
    this.pager,
    this.pagerPin,
    this.mobilePhone,
    this.homePhone,
    this.email,
    this.contactTitleId,
    this.contactTitle,
    this.activeDate,
    this.inactiveDate,
    this.contractEmployee,
    this.inactive,
    this.webUserId,
    this.webAccess,
    this.lockAccount,
    this.webPassword,
    this.expirePassword,
    this.expireDays,
    this.webAdministrator,
    this.changePasswordAtNextLogin,
    this.passwordLastUpdated,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsLaborSettingsCrewCrew.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsLaborSettingsCrewCrewFromJson(json);

  @JsonKey(name: 'CrewId', includeIfNull: false)
  final String? crewId;
  @JsonKey(name: 'UserId', includeIfNull: false)
  final String? userId;
  @JsonKey(name: 'IsUser', includeIfNull: false)
  final bool? isUser;
  @JsonKey(name: 'Salutation', includeIfNull: false)
  final String? salutation;
  @JsonKey(name: 'NameFirstMiddleLast', includeIfNull: false)
  final String? nameFirstMiddleLast;
  @JsonKey(name: 'Person', includeIfNull: false)
  final String? person;
  @JsonKey(name: 'LastName', includeIfNull: false)
  final String? lastName;
  @JsonKey(name: 'FirstName', includeIfNull: false)
  final String? firstName;
  @JsonKey(name: 'Address1', includeIfNull: false)
  final String? address1;
  @JsonKey(name: 'Address2', includeIfNull: false)
  final String? address2;
  @JsonKey(name: 'City', includeIfNull: false)
  final String? city;
  @JsonKey(name: 'State', includeIfNull: false)
  final String? state;
  @JsonKey(name: 'CountryId', includeIfNull: false)
  final String? countryId;
  @JsonKey(name: 'Country', includeIfNull: false)
  final String? country;
  @JsonKey(name: 'ZipCode', includeIfNull: false)
  final String? zipCode;
  @JsonKey(name: 'MiddleInitial', includeIfNull: false)
  final String? middleInitial;
  @JsonKey(name: 'Location', includeIfNull: false)
  final String? location;
  @JsonKey(name: 'Position', includeIfNull: false)
  final String? position;
  @JsonKey(name: 'OfficePhone', includeIfNull: false)
  final String? officePhone;
  @JsonKey(name: 'OfficeExtension', includeIfNull: false)
  final String? officeExtension;
  @JsonKey(name: 'DirectPhone', includeIfNull: false)
  final String? directPhone;
  @JsonKey(name: 'DirectExtension', includeIfNull: false)
  final String? directExtension;
  @JsonKey(name: 'Fax', includeIfNull: false)
  final String? fax;
  @JsonKey(name: 'FaxExtension', includeIfNull: false)
  final String? faxExtension;
  @JsonKey(name: 'Pager', includeIfNull: false)
  final String? pager;
  @JsonKey(name: 'PagerPin', includeIfNull: false)
  final String? pagerPin;
  @JsonKey(name: 'MobilePhone', includeIfNull: false)
  final String? mobilePhone;
  @JsonKey(name: 'HomePhone', includeIfNull: false)
  final String? homePhone;
  @JsonKey(name: 'Email', includeIfNull: false)
  final String? email;
  @JsonKey(name: 'ContactTitleId', includeIfNull: false)
  final String? contactTitleId;
  @JsonKey(name: 'ContactTitle', includeIfNull: false)
  final String? contactTitle;
  @JsonKey(name: 'ActiveDate', includeIfNull: false)
  final String? activeDate;
  @JsonKey(name: 'InactiveDate', includeIfNull: false)
  final String? inactiveDate;
  @JsonKey(name: 'ContractEmployee', includeIfNull: false)
  final bool? contractEmployee;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'WebUserId', includeIfNull: false)
  final String? webUserId;
  @JsonKey(name: 'WebAccess', includeIfNull: false)
  final bool? webAccess;
  @JsonKey(name: 'LockAccount', includeIfNull: false)
  final bool? lockAccount;
  @JsonKey(name: 'WebPassword', includeIfNull: false)
  final String? webPassword;
  @JsonKey(name: 'ExpirePassword', includeIfNull: false)
  final bool? expirePassword;
  @JsonKey(name: 'ExpireDays', includeIfNull: false)
  final int? expireDays;
  @JsonKey(name: 'WebAdministrator', includeIfNull: false)
  final bool? webAdministrator;
  @JsonKey(name: 'ChangePasswordAtNextLogin', includeIfNull: false)
  final bool? changePasswordAtNextLogin;
  @JsonKey(name: 'PasswordLastUpdated', includeIfNull: false)
  final String? passwordLastUpdated;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsLaborSettingsCrewCrewFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsLaborSettingsCrewCrewToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsLaborSettingsCrewCrewToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsLaborSettingsCrewCrew &&
            (identical(other.crewId, crewId) ||
                const DeepCollectionEquality().equals(other.crewId, crewId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.isUser, isUser) ||
                const DeepCollectionEquality().equals(other.isUser, isUser)) &&
            (identical(other.salutation, salutation) ||
                const DeepCollectionEquality()
                    .equals(other.salutation, salutation)) &&
            (identical(other.nameFirstMiddleLast, nameFirstMiddleLast) ||
                const DeepCollectionEquality()
                    .equals(other.nameFirstMiddleLast, nameFirstMiddleLast)) &&
            (identical(other.person, person) ||
                const DeepCollectionEquality().equals(other.person, person)) &&
            (identical(other.lastName, lastName) ||
                const DeepCollectionEquality()
                    .equals(other.lastName, lastName)) &&
            (identical(other.firstName, firstName) ||
                const DeepCollectionEquality()
                    .equals(other.firstName, firstName)) &&
            (identical(other.address1, address1) ||
                const DeepCollectionEquality()
                    .equals(other.address1, address1)) &&
            (identical(other.address2, address2) ||
                const DeepCollectionEquality()
                    .equals(other.address2, address2)) &&
            (identical(other.city, city) ||
                const DeepCollectionEquality().equals(other.city, city)) &&
            (identical(other.state, state) ||
                const DeepCollectionEquality().equals(other.state, state)) &&
            (identical(other.countryId, countryId) ||
                const DeepCollectionEquality()
                    .equals(other.countryId, countryId)) &&
            (identical(other.country, country) ||
                const DeepCollectionEquality()
                    .equals(other.country, country)) &&
            (identical(other.zipCode, zipCode) ||
                const DeepCollectionEquality()
                    .equals(other.zipCode, zipCode)) &&
            (identical(other.middleInitial, middleInitial) ||
                const DeepCollectionEquality()
                    .equals(other.middleInitial, middleInitial)) &&
            (identical(other.location, location) ||
                const DeepCollectionEquality()
                    .equals(other.location, location)) &&
            (identical(other.position, position) ||
                const DeepCollectionEquality()
                    .equals(other.position, position)) &&
            (identical(other.officePhone, officePhone) ||
                const DeepCollectionEquality()
                    .equals(other.officePhone, officePhone)) &&
            (identical(other.officeExtension, officeExtension) ||
                const DeepCollectionEquality()
                    .equals(other.officeExtension, officeExtension)) &&
            (identical(other.directPhone, directPhone) ||
                const DeepCollectionEquality()
                    .equals(other.directPhone, directPhone)) &&
            (identical(other.directExtension, directExtension) ||
                const DeepCollectionEquality()
                    .equals(other.directExtension, directExtension)) &&
            (identical(other.fax, fax) ||
                const DeepCollectionEquality().equals(other.fax, fax)) &&
            (identical(other.faxExtension, faxExtension) ||
                const DeepCollectionEquality()
                    .equals(other.faxExtension, faxExtension)) &&
            (identical(other.pager, pager) ||
                const DeepCollectionEquality().equals(other.pager, pager)) &&
            (identical(other.pagerPin, pagerPin) ||
                const DeepCollectionEquality().equals(other.pagerPin, pagerPin)) &&
            (identical(other.mobilePhone, mobilePhone) || const DeepCollectionEquality().equals(other.mobilePhone, mobilePhone)) &&
            (identical(other.homePhone, homePhone) || const DeepCollectionEquality().equals(other.homePhone, homePhone)) &&
            (identical(other.email, email) || const DeepCollectionEquality().equals(other.email, email)) &&
            (identical(other.contactTitleId, contactTitleId) || const DeepCollectionEquality().equals(other.contactTitleId, contactTitleId)) &&
            (identical(other.contactTitle, contactTitle) || const DeepCollectionEquality().equals(other.contactTitle, contactTitle)) &&
            (identical(other.activeDate, activeDate) || const DeepCollectionEquality().equals(other.activeDate, activeDate)) &&
            (identical(other.inactiveDate, inactiveDate) || const DeepCollectionEquality().equals(other.inactiveDate, inactiveDate)) &&
            (identical(other.contractEmployee, contractEmployee) || const DeepCollectionEquality().equals(other.contractEmployee, contractEmployee)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.webUserId, webUserId) || const DeepCollectionEquality().equals(other.webUserId, webUserId)) &&
            (identical(other.webAccess, webAccess) || const DeepCollectionEquality().equals(other.webAccess, webAccess)) &&
            (identical(other.lockAccount, lockAccount) || const DeepCollectionEquality().equals(other.lockAccount, lockAccount)) &&
            (identical(other.webPassword, webPassword) || const DeepCollectionEquality().equals(other.webPassword, webPassword)) &&
            (identical(other.expirePassword, expirePassword) || const DeepCollectionEquality().equals(other.expirePassword, expirePassword)) &&
            (identical(other.expireDays, expireDays) || const DeepCollectionEquality().equals(other.expireDays, expireDays)) &&
            (identical(other.webAdministrator, webAdministrator) || const DeepCollectionEquality().equals(other.webAdministrator, webAdministrator)) &&
            (identical(other.changePasswordAtNextLogin, changePasswordAtNextLogin) || const DeepCollectionEquality().equals(other.changePasswordAtNextLogin, changePasswordAtNextLogin)) &&
            (identical(other.passwordLastUpdated, passwordLastUpdated) || const DeepCollectionEquality().equals(other.passwordLastUpdated, passwordLastUpdated)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsLaborSettingsCrewCrewExtension
    on WebApiModulesSettingsLaborSettingsCrewCrew {
  WebApiModulesSettingsLaborSettingsCrewCrew copyWith(
      {String? crewId,
      String? userId,
      bool? isUser,
      String? salutation,
      String? nameFirstMiddleLast,
      String? person,
      String? lastName,
      String? firstName,
      String? address1,
      String? address2,
      String? city,
      String? state,
      String? countryId,
      String? country,
      String? zipCode,
      String? middleInitial,
      String? location,
      String? position,
      String? officePhone,
      String? officeExtension,
      String? directPhone,
      String? directExtension,
      String? fax,
      String? faxExtension,
      String? pager,
      String? pagerPin,
      String? mobilePhone,
      String? homePhone,
      String? email,
      String? contactTitleId,
      String? contactTitle,
      String? activeDate,
      String? inactiveDate,
      bool? contractEmployee,
      bool? inactive,
      String? webUserId,
      bool? webAccess,
      bool? lockAccount,
      String? webPassword,
      bool? expirePassword,
      int? expireDays,
      bool? webAdministrator,
      bool? changePasswordAtNextLogin,
      String? passwordLastUpdated,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsLaborSettingsCrewCrew(
        crewId: crewId ?? this.crewId,
        userId: userId ?? this.userId,
        isUser: isUser ?? this.isUser,
        salutation: salutation ?? this.salutation,
        nameFirstMiddleLast: nameFirstMiddleLast ?? this.nameFirstMiddleLast,
        person: person ?? this.person,
        lastName: lastName ?? this.lastName,
        firstName: firstName ?? this.firstName,
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        city: city ?? this.city,
        state: state ?? this.state,
        countryId: countryId ?? this.countryId,
        country: country ?? this.country,
        zipCode: zipCode ?? this.zipCode,
        middleInitial: middleInitial ?? this.middleInitial,
        location: location ?? this.location,
        position: position ?? this.position,
        officePhone: officePhone ?? this.officePhone,
        officeExtension: officeExtension ?? this.officeExtension,
        directPhone: directPhone ?? this.directPhone,
        directExtension: directExtension ?? this.directExtension,
        fax: fax ?? this.fax,
        faxExtension: faxExtension ?? this.faxExtension,
        pager: pager ?? this.pager,
        pagerPin: pagerPin ?? this.pagerPin,
        mobilePhone: mobilePhone ?? this.mobilePhone,
        homePhone: homePhone ?? this.homePhone,
        email: email ?? this.email,
        contactTitleId: contactTitleId ?? this.contactTitleId,
        contactTitle: contactTitle ?? this.contactTitle,
        activeDate: activeDate ?? this.activeDate,
        inactiveDate: inactiveDate ?? this.inactiveDate,
        contractEmployee: contractEmployee ?? this.contractEmployee,
        inactive: inactive ?? this.inactive,
        webUserId: webUserId ?? this.webUserId,
        webAccess: webAccess ?? this.webAccess,
        lockAccount: lockAccount ?? this.lockAccount,
        webPassword: webPassword ?? this.webPassword,
        expirePassword: expirePassword ?? this.expirePassword,
        expireDays: expireDays ?? this.expireDays,
        webAdministrator: webAdministrator ?? this.webAdministrator,
        changePasswordAtNextLogin:
            changePasswordAtNextLogin ?? this.changePasswordAtNextLogin,
        passwordLastUpdated: passwordLastUpdated ?? this.passwordLastUpdated,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus {
  WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus({
    this.scheduleStatusId,
    this.scheduleStatus,
    this.statusAction,
    this.color,
    this.whiteText,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusFromJson(
          json);

  @JsonKey(name: 'ScheduleStatusId', includeIfNull: false)
  final String? scheduleStatusId;
  @JsonKey(name: 'ScheduleStatus', includeIfNull: false)
  final String? scheduleStatus;
  @JsonKey(name: 'StatusAction', includeIfNull: false)
  final String? statusAction;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'WhiteText', includeIfNull: false)
  final bool? whiteText;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus &&
            (identical(other.scheduleStatusId, scheduleStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.scheduleStatusId, scheduleStatusId)) &&
            (identical(other.scheduleStatus, scheduleStatus) ||
                const DeepCollectionEquality()
                    .equals(other.scheduleStatus, scheduleStatus)) &&
            (identical(other.statusAction, statusAction) ||
                const DeepCollectionEquality()
                    .equals(other.statusAction, statusAction)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.whiteText, whiteText) ||
                const DeepCollectionEquality()
                    .equals(other.whiteText, whiteText)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatusExtension
    on WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus {
  WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus
      copyWith(
          {String? scheduleStatusId,
          String? scheduleStatus,
          String? statusAction,
          String? color,
          bool? whiteText,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsLaborSettingsCrewScheduleStatusCrewScheduleStatus(
        scheduleStatusId: scheduleStatusId ?? this.scheduleStatusId,
        scheduleStatus: scheduleStatus ?? this.scheduleStatus,
        statusAction: statusAction ?? this.statusAction,
        color: color ?? this.color,
        whiteText: whiteText ?? this.whiteText,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus {
  WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus({
    this.crewStatusId,
    this.crewStatus,
    this.availableToSchedule,
    this.color,
    this.whiteText,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsLaborSettingsCrewStatusCrewStatusFromJson(json);

  @JsonKey(name: 'CrewStatusId', includeIfNull: false)
  final String? crewStatusId;
  @JsonKey(name: 'CrewStatus', includeIfNull: false)
  final String? crewStatus;
  @JsonKey(name: 'AvailableToSchedule', includeIfNull: false)
  final bool? availableToSchedule;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'WhiteText', includeIfNull: false)
  final bool? whiteText;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsLaborSettingsCrewStatusCrewStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsLaborSettingsCrewStatusCrewStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsLaborSettingsCrewStatusCrewStatusToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus &&
            (identical(other.crewStatusId, crewStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.crewStatusId, crewStatusId)) &&
            (identical(other.crewStatus, crewStatus) ||
                const DeepCollectionEquality()
                    .equals(other.crewStatus, crewStatus)) &&
            (identical(other.availableToSchedule, availableToSchedule) ||
                const DeepCollectionEquality()
                    .equals(other.availableToSchedule, availableToSchedule)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.whiteText, whiteText) ||
                const DeepCollectionEquality()
                    .equals(other.whiteText, whiteText)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsLaborSettingsCrewStatusCrewStatusExtension
    on WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus {
  WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus copyWith(
      {String? crewStatusId,
      String? crewStatus,
      bool? availableToSchedule,
      String? color,
      bool? whiteText,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsLaborSettingsCrewStatusCrewStatus(
        crewStatusId: crewStatusId ?? this.crewStatusId,
        crewStatus: crewStatus ?? this.crewStatus,
        availableToSchedule: availableToSchedule ?? this.availableToSchedule,
        color: color ?? this.color,
        whiteText: whiteText ?? this.whiteText,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory {
  WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory({
    this.laborTypeId,
    this.laborType,
    this.discountCategoryItems100PercentByDefault,
    this.excludeCategoryItemsFromInvoicing,
    this.categoryId,
    this.category,
    this.warehouseCategory,
    this.catalogCategory,
    this.overrideProfitAndLossCategory,
    this.profitAndLossCategoryId,
    this.profitAndLossCategory,
    this.profitAndLossIncludeAsMiscExpense,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.consignmentIncomeAccountId,
    this.consignmentIncomeAccountNo,
    this.consignmentIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationMonths,
    this.salvageValuePercent,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.inventoryTypeOrderBy,
    this.orderBy,
    this.pickListOrderBy,
    this.subCategoryCount,
    this.inventoryCount,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryFromJson(
          json);

  @JsonKey(name: 'LaborTypeId', includeIfNull: false)
  final String? laborTypeId;
  @JsonKey(name: 'LaborType', includeIfNull: false)
  final String? laborType;
  @JsonKey(
      name: 'DiscountCategoryItems100PercentByDefault', includeIfNull: false)
  final bool? discountCategoryItems100PercentByDefault;
  @JsonKey(name: 'ExcludeCategoryItemsFromInvoicing', includeIfNull: false)
  final bool? excludeCategoryItemsFromInvoicing;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'WarehouseCategory', includeIfNull: false)
  final bool? warehouseCategory;
  @JsonKey(name: 'CatalogCategory', includeIfNull: false)
  final bool? catalogCategory;
  @JsonKey(name: 'OverrideProfitAndLossCategory', includeIfNull: false)
  final bool? overrideProfitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossCategoryId', includeIfNull: false)
  final String? profitAndLossCategoryId;
  @JsonKey(name: 'ProfitAndLossCategory', includeIfNull: false)
  final String? profitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossIncludeAsMiscExpense', includeIfNull: false)
  final bool? profitAndLossIncludeAsMiscExpense;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'ConsignmentIncomeAccountId', includeIfNull: false)
  final String? consignmentIncomeAccountId;
  @JsonKey(name: 'ConsignmentIncomeAccountNo', includeIfNull: false)
  final String? consignmentIncomeAccountNo;
  @JsonKey(name: 'ConsignmentIncomeAccountDescription', includeIfNull: false)
  final String? consignmentIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationMonths', includeIfNull: false)
  final int? depreciationMonths;
  @JsonKey(name: 'SalvageValuePercent', includeIfNull: false)
  final double? salvageValuePercent;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'InventoryTypeOrderBy', includeIfNull: false)
  final double? inventoryTypeOrderBy;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'PickListOrderBy', includeIfNull: false)
  final int? pickListOrderBy;
  @JsonKey(name: 'SubCategoryCount', includeIfNull: false)
  final int? subCategoryCount;
  @JsonKey(name: 'InventoryCount', includeIfNull: false)
  final int? inventoryCount;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory &&
            (identical(other.laborTypeId, laborTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.laborTypeId, laborTypeId)) &&
            (identical(other.laborType, laborType) ||
                const DeepCollectionEquality()
                    .equals(other.laborType, laborType)) &&
            (identical(other.discountCategoryItems100PercentByDefault, discountCategoryItems100PercentByDefault) ||
                const DeepCollectionEquality().equals(
                    other.discountCategoryItems100PercentByDefault,
                    discountCategoryItems100PercentByDefault)) &&
            (identical(other.excludeCategoryItemsFromInvoicing, excludeCategoryItemsFromInvoicing) ||
                const DeepCollectionEquality().equals(
                    other.excludeCategoryItemsFromInvoicing,
                    excludeCategoryItemsFromInvoicing)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) ||
                const DeepCollectionEquality()
                    .equals(other.category, category)) &&
            (identical(other.warehouseCategory, warehouseCategory) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCategory, warehouseCategory)) &&
            (identical(other.catalogCategory, catalogCategory) ||
                const DeepCollectionEquality()
                    .equals(other.catalogCategory, catalogCategory)) &&
            (identical(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory) ||
                const DeepCollectionEquality().equals(
                    other.overrideProfitAndLossCategory,
                    overrideProfitAndLossCategory)) &&
            (identical(other.profitAndLossCategoryId, profitAndLossCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.profitAndLossCategoryId, profitAndLossCategoryId)) &&
            (identical(other.profitAndLossCategory, profitAndLossCategory) || const DeepCollectionEquality().equals(other.profitAndLossCategory, profitAndLossCategory)) &&
            (identical(other.profitAndLossIncludeAsMiscExpense, profitAndLossIncludeAsMiscExpense) || const DeepCollectionEquality().equals(other.profitAndLossIncludeAsMiscExpense, profitAndLossIncludeAsMiscExpense)) &&
            (identical(other.assetAccountId, assetAccountId) || const DeepCollectionEquality().equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) || const DeepCollectionEquality().equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) || const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.consignmentIncomeAccountId, consignmentIncomeAccountId) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountId, consignmentIncomeAccountId)) &&
            (identical(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo)) &&
            (identical(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationMonths, depreciationMonths) || const DeepCollectionEquality().equals(other.depreciationMonths, depreciationMonths)) &&
            (identical(other.salvageValuePercent, salvageValuePercent) || const DeepCollectionEquality().equals(other.salvageValuePercent, salvageValuePercent)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.inventoryTypeOrderBy, inventoryTypeOrderBy) || const DeepCollectionEquality().equals(other.inventoryTypeOrderBy, inventoryTypeOrderBy)) &&
            (identical(other.orderBy, orderBy) || const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.pickListOrderBy, pickListOrderBy) || const DeepCollectionEquality().equals(other.pickListOrderBy, pickListOrderBy)) &&
            (identical(other.subCategoryCount, subCategoryCount) || const DeepCollectionEquality().equals(other.subCategoryCount, subCategoryCount)) &&
            (identical(other.inventoryCount, inventoryCount) || const DeepCollectionEquality().equals(other.inventoryCount, inventoryCount)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategoryExtension
    on WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory {
  WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory copyWith(
      {String? laborTypeId,
      String? laborType,
      bool? discountCategoryItems100PercentByDefault,
      bool? excludeCategoryItemsFromInvoicing,
      String? categoryId,
      String? category,
      bool? warehouseCategory,
      bool? catalogCategory,
      bool? overrideProfitAndLossCategory,
      String? profitAndLossCategoryId,
      String? profitAndLossCategory,
      bool? profitAndLossIncludeAsMiscExpense,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? consignmentIncomeAccountId,
      String? consignmentIncomeAccountNo,
      String? consignmentIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      int? depreciationMonths,
      double? salvageValuePercent,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      double? inventoryTypeOrderBy,
      double? orderBy,
      int? pickListOrderBy,
      int? subCategoryCount,
      int? inventoryCount,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsLaborSettingsLaborCategoryLaborCategory(
        laborTypeId: laborTypeId ?? this.laborTypeId,
        laborType: laborType ?? this.laborType,
        discountCategoryItems100PercentByDefault: discountCategoryItems100PercentByDefault ??
            this.discountCategoryItems100PercentByDefault,
        excludeCategoryItemsFromInvoicing: excludeCategoryItemsFromInvoicing ??
            this.excludeCategoryItemsFromInvoicing,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        warehouseCategory: warehouseCategory ?? this.warehouseCategory,
        catalogCategory: catalogCategory ?? this.catalogCategory,
        overrideProfitAndLossCategory:
            overrideProfitAndLossCategory ?? this.overrideProfitAndLossCategory,
        profitAndLossCategoryId:
            profitAndLossCategoryId ?? this.profitAndLossCategoryId,
        profitAndLossCategory:
            profitAndLossCategory ?? this.profitAndLossCategory,
        profitAndLossIncludeAsMiscExpense: profitAndLossIncludeAsMiscExpense ??
            this.profitAndLossIncludeAsMiscExpense,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        consignmentIncomeAccountId:
            consignmentIncomeAccountId ?? this.consignmentIncomeAccountId,
        consignmentIncomeAccountNo:
            consignmentIncomeAccountNo ?? this.consignmentIncomeAccountNo,
        consignmentIncomeAccountDescription: consignmentIncomeAccountDescription ??
            this.consignmentIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription: equipmentSaleIncomeAccountDescription ??
            this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription: costOfGoodsSoldExpenseAccountDescription ??
            this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationMonths: depreciationMonths ?? this.depreciationMonths,
        salvageValuePercent: salvageValuePercent ?? this.salvageValuePercent,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription: depreciationExpenseAccountDescription ??
            this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId: accumulatedDepreciationExpenseAccountId ??
            this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo: accumulatedDepreciationExpenseAccountNo ??
            this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ?? this.accumulatedDepreciationExpenseAccountDescription,
        inventoryTypeOrderBy: inventoryTypeOrderBy ?? this.inventoryTypeOrderBy,
        orderBy: orderBy ?? this.orderBy,
        pickListOrderBy: pickListOrderBy ?? this.pickListOrderBy,
        subCategoryCount: subCategoryCount ?? this.subCategoryCount,
        inventoryCount: inventoryCount ?? this.inventoryCount,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsLaborSettingsLaborRateLaborRate {
  WebApiModulesSettingsLaborSettingsLaborRateLaborRate({
    this.rateId,
    this.laborTypeId,
    this.laborType,
    this.rateType,
    this.includeAsProfitAndLossCategory,
    this.averageCost,
    this.price,
    this.hourlyRate,
    this.dailyRate,
    this.weeklyRate,
    this.monthlyRate,
    this.hourlyCost,
    this.dailyCost,
    this.weeklyCost,
    this.monthlyCost,
    this.iCode,
    this.description,
    this.availFor,
    this.categoryId,
    this.category,
    this.subCategoryCount,
    this.subCategoryId,
    this.subCategory,
    this.classification,
    this.classificationDescription,
    this.classificationColor,
    this.unitId,
    this.unit,
    this.unitType,
    this.nonDiscountable,
    this.overrideProfitAndLossCategory,
    this.profitAndLossCategoryId,
    this.profitAndLossCategory,
    this.autoCopyNotesToQuoteOrder,
    this.note,
    this.printNoteOnInContract,
    this.printNoteOnOutContract,
    this.printNoteOnReceiveContract,
    this.printNoteOnReturnContract,
    this.printNoteOnInvoice,
    this.printNoteOnOrder,
    this.printNoteOnPickList,
    this.printNoteOnPO,
    this.printNoteOnQuote,
    this.printNoteOnReturnList,
    this.printNoteOnPoReceiveList,
    this.printNoteOnPoReturnList,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.consignmentIncomeAccountId,
    this.consignmentIncomeAccountNo,
    this.consignmentIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.originalShowId,
    this.inactive,
    this.dateStamp,
    this.manifestShippingContainer,
    this.manifestStandAloneItem,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsLaborSettingsLaborRateLaborRate.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsLaborSettingsLaborRateLaborRateFromJson(json);

  @JsonKey(name: 'RateId', includeIfNull: false)
  final String? rateId;
  @JsonKey(name: 'LaborTypeId', includeIfNull: false)
  final String? laborTypeId;
  @JsonKey(name: 'LaborType', includeIfNull: false)
  final String? laborType;
  @JsonKey(name: 'RateType', includeIfNull: false)
  final String? rateType;
  @JsonKey(name: 'IncludeAsProfitAndLossCategory', includeIfNull: false)
  final bool? includeAsProfitAndLossCategory;
  @JsonKey(name: 'AverageCost', includeIfNull: false)
  final double? averageCost;
  @JsonKey(name: 'Price', includeIfNull: false)
  final double? price;
  @JsonKey(name: 'HourlyRate', includeIfNull: false)
  final double? hourlyRate;
  @JsonKey(name: 'DailyRate', includeIfNull: false)
  final double? dailyRate;
  @JsonKey(name: 'WeeklyRate', includeIfNull: false)
  final double? weeklyRate;
  @JsonKey(name: 'MonthlyRate', includeIfNull: false)
  final double? monthlyRate;
  @JsonKey(name: 'HourlyCost', includeIfNull: false)
  final double? hourlyCost;
  @JsonKey(name: 'DailyCost', includeIfNull: false)
  final double? dailyCost;
  @JsonKey(name: 'WeeklyCost', includeIfNull: false)
  final double? weeklyCost;
  @JsonKey(name: 'MonthlyCost', includeIfNull: false)
  final double? monthlyCost;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'AvailFor', includeIfNull: false)
  final String? availFor;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'SubCategoryCount', includeIfNull: false)
  final int? subCategoryCount;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'SubCategory', includeIfNull: false)
  final String? subCategory;
  @JsonKey(name: 'Classification', includeIfNull: false)
  final String? classification;
  @JsonKey(name: 'ClassificationDescription', includeIfNull: false)
  final String? classificationDescription;
  @JsonKey(name: 'ClassificationColor', includeIfNull: false)
  final String? classificationColor;
  @JsonKey(name: 'UnitId', includeIfNull: false)
  final String? unitId;
  @JsonKey(name: 'Unit', includeIfNull: false)
  final String? unit;
  @JsonKey(name: 'UnitType', includeIfNull: false)
  final String? unitType;
  @JsonKey(name: 'NonDiscountable', includeIfNull: false)
  final bool? nonDiscountable;
  @JsonKey(name: 'OverrideProfitAndLossCategory', includeIfNull: false)
  final bool? overrideProfitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossCategoryId', includeIfNull: false)
  final String? profitAndLossCategoryId;
  @JsonKey(name: 'ProfitAndLossCategory', includeIfNull: false)
  final String? profitAndLossCategory;
  @JsonKey(name: 'AutoCopyNotesToQuoteOrder', includeIfNull: false)
  final bool? autoCopyNotesToQuoteOrder;
  @JsonKey(name: 'Note', includeIfNull: false)
  final String? note;
  @JsonKey(name: 'PrintNoteOnInContract', includeIfNull: false)
  final bool? printNoteOnInContract;
  @JsonKey(name: 'PrintNoteOnOutContract', includeIfNull: false)
  final bool? printNoteOnOutContract;
  @JsonKey(name: 'PrintNoteOnReceiveContract', includeIfNull: false)
  final bool? printNoteOnReceiveContract;
  @JsonKey(name: 'PrintNoteOnReturnContract', includeIfNull: false)
  final bool? printNoteOnReturnContract;
  @JsonKey(name: 'PrintNoteOnInvoice', includeIfNull: false)
  final bool? printNoteOnInvoice;
  @JsonKey(name: 'PrintNoteOnOrder', includeIfNull: false)
  final bool? printNoteOnOrder;
  @JsonKey(name: 'PrintNoteOnPickList', includeIfNull: false)
  final bool? printNoteOnPickList;
  @JsonKey(name: 'PrintNoteOnPO', includeIfNull: false)
  final bool? printNoteOnPO;
  @JsonKey(name: 'PrintNoteOnQuote', includeIfNull: false)
  final bool? printNoteOnQuote;
  @JsonKey(name: 'PrintNoteOnReturnList', includeIfNull: false)
  final bool? printNoteOnReturnList;
  @JsonKey(name: 'PrintNoteOnPoReceiveList', includeIfNull: false)
  final bool? printNoteOnPoReceiveList;
  @JsonKey(name: 'PrintNoteOnPoReturnList', includeIfNull: false)
  final bool? printNoteOnPoReturnList;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'ConsignmentIncomeAccountId', includeIfNull: false)
  final String? consignmentIncomeAccountId;
  @JsonKey(name: 'ConsignmentIncomeAccountNo', includeIfNull: false)
  final String? consignmentIncomeAccountNo;
  @JsonKey(name: 'ConsignmentIncomeAccountDescription', includeIfNull: false)
  final String? consignmentIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'ManifestShippingContainer', includeIfNull: false)
  final bool? manifestShippingContainer;
  @JsonKey(name: 'ManifestStandAloneItem', includeIfNull: false)
  final bool? manifestStandAloneItem;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsLaborSettingsLaborRateLaborRateFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsLaborSettingsLaborRateLaborRateToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsLaborSettingsLaborRateLaborRateToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsLaborSettingsLaborRateLaborRate &&
            (identical(other.rateId, rateId) ||
                const DeepCollectionEquality().equals(other.rateId, rateId)) &&
            (identical(other.laborTypeId, laborTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.laborTypeId, laborTypeId)) &&
            (identical(other.laborType, laborType) ||
                const DeepCollectionEquality()
                    .equals(other.laborType, laborType)) &&
            (identical(other.rateType, rateType) ||
                const DeepCollectionEquality()
                    .equals(other.rateType, rateType)) &&
            (identical(other.includeAsProfitAndLossCategory, includeAsProfitAndLossCategory) ||
                const DeepCollectionEquality().equals(
                    other.includeAsProfitAndLossCategory,
                    includeAsProfitAndLossCategory)) &&
            (identical(other.averageCost, averageCost) ||
                const DeepCollectionEquality()
                    .equals(other.averageCost, averageCost)) &&
            (identical(other.price, price) ||
                const DeepCollectionEquality().equals(other.price, price)) &&
            (identical(other.hourlyRate, hourlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyRate, hourlyRate)) &&
            (identical(other.dailyRate, dailyRate) ||
                const DeepCollectionEquality()
                    .equals(other.dailyRate, dailyRate)) &&
            (identical(other.weeklyRate, weeklyRate) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyRate, weeklyRate)) &&
            (identical(other.monthlyRate, monthlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyRate, monthlyRate)) &&
            (identical(other.hourlyCost, hourlyCost) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyCost, hourlyCost)) &&
            (identical(other.dailyCost, dailyCost) ||
                const DeepCollectionEquality()
                    .equals(other.dailyCost, dailyCost)) &&
            (identical(other.weeklyCost, weeklyCost) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyCost, weeklyCost)) &&
            (identical(other.monthlyCost, monthlyCost) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyCost, monthlyCost)) &&
            (identical(other.iCode, iCode) ||
                const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.availFor, availFor) ||
                const DeepCollectionEquality()
                    .equals(other.availFor, availFor)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality().equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) || const DeepCollectionEquality().equals(other.category, category)) &&
            (identical(other.subCategoryCount, subCategoryCount) || const DeepCollectionEquality().equals(other.subCategoryCount, subCategoryCount)) &&
            (identical(other.subCategoryId, subCategoryId) || const DeepCollectionEquality().equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.subCategory, subCategory) || const DeepCollectionEquality().equals(other.subCategory, subCategory)) &&
            (identical(other.classification, classification) || const DeepCollectionEquality().equals(other.classification, classification)) &&
            (identical(other.classificationDescription, classificationDescription) || const DeepCollectionEquality().equals(other.classificationDescription, classificationDescription)) &&
            (identical(other.classificationColor, classificationColor) || const DeepCollectionEquality().equals(other.classificationColor, classificationColor)) &&
            (identical(other.unitId, unitId) || const DeepCollectionEquality().equals(other.unitId, unitId)) &&
            (identical(other.unit, unit) || const DeepCollectionEquality().equals(other.unit, unit)) &&
            (identical(other.unitType, unitType) || const DeepCollectionEquality().equals(other.unitType, unitType)) &&
            (identical(other.nonDiscountable, nonDiscountable) || const DeepCollectionEquality().equals(other.nonDiscountable, nonDiscountable)) &&
            (identical(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory) || const DeepCollectionEquality().equals(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory)) &&
            (identical(other.profitAndLossCategoryId, profitAndLossCategoryId) || const DeepCollectionEquality().equals(other.profitAndLossCategoryId, profitAndLossCategoryId)) &&
            (identical(other.profitAndLossCategory, profitAndLossCategory) || const DeepCollectionEquality().equals(other.profitAndLossCategory, profitAndLossCategory)) &&
            (identical(other.autoCopyNotesToQuoteOrder, autoCopyNotesToQuoteOrder) || const DeepCollectionEquality().equals(other.autoCopyNotesToQuoteOrder, autoCopyNotesToQuoteOrder)) &&
            (identical(other.note, note) || const DeepCollectionEquality().equals(other.note, note)) &&
            (identical(other.printNoteOnInContract, printNoteOnInContract) || const DeepCollectionEquality().equals(other.printNoteOnInContract, printNoteOnInContract)) &&
            (identical(other.printNoteOnOutContract, printNoteOnOutContract) || const DeepCollectionEquality().equals(other.printNoteOnOutContract, printNoteOnOutContract)) &&
            (identical(other.printNoteOnReceiveContract, printNoteOnReceiveContract) || const DeepCollectionEquality().equals(other.printNoteOnReceiveContract, printNoteOnReceiveContract)) &&
            (identical(other.printNoteOnReturnContract, printNoteOnReturnContract) || const DeepCollectionEquality().equals(other.printNoteOnReturnContract, printNoteOnReturnContract)) &&
            (identical(other.printNoteOnInvoice, printNoteOnInvoice) || const DeepCollectionEquality().equals(other.printNoteOnInvoice, printNoteOnInvoice)) &&
            (identical(other.printNoteOnOrder, printNoteOnOrder) || const DeepCollectionEquality().equals(other.printNoteOnOrder, printNoteOnOrder)) &&
            (identical(other.printNoteOnPickList, printNoteOnPickList) || const DeepCollectionEquality().equals(other.printNoteOnPickList, printNoteOnPickList)) &&
            (identical(other.printNoteOnPO, printNoteOnPO) || const DeepCollectionEquality().equals(other.printNoteOnPO, printNoteOnPO)) &&
            (identical(other.printNoteOnQuote, printNoteOnQuote) || const DeepCollectionEquality().equals(other.printNoteOnQuote, printNoteOnQuote)) &&
            (identical(other.printNoteOnReturnList, printNoteOnReturnList) || const DeepCollectionEquality().equals(other.printNoteOnReturnList, printNoteOnReturnList)) &&
            (identical(other.printNoteOnPoReceiveList, printNoteOnPoReceiveList) || const DeepCollectionEquality().equals(other.printNoteOnPoReceiveList, printNoteOnPoReceiveList)) &&
            (identical(other.printNoteOnPoReturnList, printNoteOnPoReturnList) || const DeepCollectionEquality().equals(other.printNoteOnPoReturnList, printNoteOnPoReturnList)) &&
            (identical(other.assetAccountId, assetAccountId) || const DeepCollectionEquality().equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) || const DeepCollectionEquality().equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) || const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.consignmentIncomeAccountId, consignmentIncomeAccountId) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountId, consignmentIncomeAccountId)) &&
            (identical(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo)) &&
            (identical(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.originalShowId, originalShowId) || const DeepCollectionEquality().equals(other.originalShowId, originalShowId)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.manifestShippingContainer, manifestShippingContainer) || const DeepCollectionEquality().equals(other.manifestShippingContainer, manifestShippingContainer)) &&
            (identical(other.manifestStandAloneItem, manifestStandAloneItem) || const DeepCollectionEquality().equals(other.manifestStandAloneItem, manifestStandAloneItem)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsLaborSettingsLaborRateLaborRateExtension
    on WebApiModulesSettingsLaborSettingsLaborRateLaborRate {
  WebApiModulesSettingsLaborSettingsLaborRateLaborRate copyWith(
      {String? rateId,
      String? laborTypeId,
      String? laborType,
      String? rateType,
      bool? includeAsProfitAndLossCategory,
      double? averageCost,
      double? price,
      double? hourlyRate,
      double? dailyRate,
      double? weeklyRate,
      double? monthlyRate,
      double? hourlyCost,
      double? dailyCost,
      double? weeklyCost,
      double? monthlyCost,
      String? iCode,
      String? description,
      String? availFor,
      String? categoryId,
      String? category,
      int? subCategoryCount,
      String? subCategoryId,
      String? subCategory,
      String? classification,
      String? classificationDescription,
      String? classificationColor,
      String? unitId,
      String? unit,
      String? unitType,
      bool? nonDiscountable,
      bool? overrideProfitAndLossCategory,
      String? profitAndLossCategoryId,
      String? profitAndLossCategory,
      bool? autoCopyNotesToQuoteOrder,
      String? note,
      bool? printNoteOnInContract,
      bool? printNoteOnOutContract,
      bool? printNoteOnReceiveContract,
      bool? printNoteOnReturnContract,
      bool? printNoteOnInvoice,
      bool? printNoteOnOrder,
      bool? printNoteOnPickList,
      bool? printNoteOnPO,
      bool? printNoteOnQuote,
      bool? printNoteOnReturnList,
      bool? printNoteOnPoReceiveList,
      bool? printNoteOnPoReturnList,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? consignmentIncomeAccountId,
      String? consignmentIncomeAccountNo,
      String? consignmentIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      String? originalShowId,
      bool? inactive,
      String? dateStamp,
      bool? manifestShippingContainer,
      bool? manifestStandAloneItem,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsLaborSettingsLaborRateLaborRate(
        rateId: rateId ?? this.rateId,
        laborTypeId: laborTypeId ?? this.laborTypeId,
        laborType: laborType ?? this.laborType,
        rateType: rateType ?? this.rateType,
        includeAsProfitAndLossCategory: includeAsProfitAndLossCategory ??
            this.includeAsProfitAndLossCategory,
        averageCost: averageCost ?? this.averageCost,
        price: price ?? this.price,
        hourlyRate: hourlyRate ?? this.hourlyRate,
        dailyRate: dailyRate ?? this.dailyRate,
        weeklyRate: weeklyRate ?? this.weeklyRate,
        monthlyRate: monthlyRate ?? this.monthlyRate,
        hourlyCost: hourlyCost ?? this.hourlyCost,
        dailyCost: dailyCost ?? this.dailyCost,
        weeklyCost: weeklyCost ?? this.weeklyCost,
        monthlyCost: monthlyCost ?? this.monthlyCost,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        availFor: availFor ?? this.availFor,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        subCategoryCount: subCategoryCount ?? this.subCategoryCount,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        subCategory: subCategory ?? this.subCategory,
        classification: classification ?? this.classification,
        classificationDescription:
            classificationDescription ?? this.classificationDescription,
        classificationColor: classificationColor ?? this.classificationColor,
        unitId: unitId ?? this.unitId,
        unit: unit ?? this.unit,
        unitType: unitType ?? this.unitType,
        nonDiscountable: nonDiscountable ?? this.nonDiscountable,
        overrideProfitAndLossCategory:
            overrideProfitAndLossCategory ?? this.overrideProfitAndLossCategory,
        profitAndLossCategoryId:
            profitAndLossCategoryId ?? this.profitAndLossCategoryId,
        profitAndLossCategory:
            profitAndLossCategory ?? this.profitAndLossCategory,
        autoCopyNotesToQuoteOrder:
            autoCopyNotesToQuoteOrder ?? this.autoCopyNotesToQuoteOrder,
        note: note ?? this.note,
        printNoteOnInContract:
            printNoteOnInContract ?? this.printNoteOnInContract,
        printNoteOnOutContract:
            printNoteOnOutContract ?? this.printNoteOnOutContract,
        printNoteOnReceiveContract:
            printNoteOnReceiveContract ?? this.printNoteOnReceiveContract,
        printNoteOnReturnContract:
            printNoteOnReturnContract ?? this.printNoteOnReturnContract,
        printNoteOnInvoice: printNoteOnInvoice ?? this.printNoteOnInvoice,
        printNoteOnOrder: printNoteOnOrder ?? this.printNoteOnOrder,
        printNoteOnPickList: printNoteOnPickList ?? this.printNoteOnPickList,
        printNoteOnPO: printNoteOnPO ?? this.printNoteOnPO,
        printNoteOnQuote: printNoteOnQuote ?? this.printNoteOnQuote,
        printNoteOnReturnList:
            printNoteOnReturnList ?? this.printNoteOnReturnList,
        printNoteOnPoReceiveList:
            printNoteOnPoReceiveList ?? this.printNoteOnPoReceiveList,
        printNoteOnPoReturnList:
            printNoteOnPoReturnList ?? this.printNoteOnPoReturnList,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        consignmentIncomeAccountId:
            consignmentIncomeAccountId ?? this.consignmentIncomeAccountId,
        consignmentIncomeAccountNo:
            consignmentIncomeAccountNo ?? this.consignmentIncomeAccountNo,
        consignmentIncomeAccountDescription: consignmentIncomeAccountDescription ??
            this.consignmentIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription: equipmentSaleIncomeAccountDescription ??
            this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription:
            costOfGoodsSoldExpenseAccountDescription ??
                this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription: depreciationExpenseAccountDescription ??
            this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId: accumulatedDepreciationExpenseAccountId ??
            this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo:
            accumulatedDepreciationExpenseAccountNo ??
                this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ??
                this.accumulatedDepreciationExpenseAccountDescription,
        originalShowId: originalShowId ?? this.originalShowId,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        manifestShippingContainer: manifestShippingContainer ?? this.manifestShippingContainer,
        manifestStandAloneItem: manifestStandAloneItem ?? this.manifestStandAloneItem,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsLaborSettingsLaborTypeLaborType {
  WebApiModulesSettingsLaborSettingsLaborTypeLaborType({
    this.laborTypeId,
    this.laborType,
    this.labor,
    this.groupProfitLoss,
    this.categoryCount,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsLaborSettingsLaborTypeLaborType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsLaborSettingsLaborTypeLaborTypeFromJson(json);

  @JsonKey(name: 'LaborTypeId', includeIfNull: false)
  final String? laborTypeId;
  @JsonKey(name: 'LaborType', includeIfNull: false)
  final String? laborType;
  @JsonKey(name: 'Labor', includeIfNull: false)
  final bool? labor;
  @JsonKey(name: 'GroupProfitLoss', includeIfNull: false)
  final bool? groupProfitLoss;
  @JsonKey(name: 'CategoryCount', includeIfNull: false)
  final int? categoryCount;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsLaborSettingsLaborTypeLaborTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsLaborSettingsLaborTypeLaborTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsLaborSettingsLaborTypeLaborTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsLaborSettingsLaborTypeLaborType &&
            (identical(other.laborTypeId, laborTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.laborTypeId, laborTypeId)) &&
            (identical(other.laborType, laborType) ||
                const DeepCollectionEquality()
                    .equals(other.laborType, laborType)) &&
            (identical(other.labor, labor) ||
                const DeepCollectionEquality().equals(other.labor, labor)) &&
            (identical(other.groupProfitLoss, groupProfitLoss) ||
                const DeepCollectionEquality()
                    .equals(other.groupProfitLoss, groupProfitLoss)) &&
            (identical(other.categoryCount, categoryCount) ||
                const DeepCollectionEquality()
                    .equals(other.categoryCount, categoryCount)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsLaborSettingsLaborTypeLaborTypeExtension
    on WebApiModulesSettingsLaborSettingsLaborTypeLaborType {
  WebApiModulesSettingsLaborSettingsLaborTypeLaborType copyWith(
      {String? laborTypeId,
      String? laborType,
      bool? labor,
      bool? groupProfitLoss,
      int? categoryCount,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsLaborSettingsLaborTypeLaborType(
        laborTypeId: laborTypeId ?? this.laborTypeId,
        laborType: laborType ?? this.laborType,
        labor: labor ?? this.labor,
        groupProfitLoss: groupProfitLoss ?? this.groupProfitLoss,
        categoryCount: categoryCount ?? this.categoryCount,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsLaborSettingsPositionPosition {
  WebApiModulesSettingsLaborSettingsPositionPosition({
    this.positionId,
    this.laborTypeId,
    this.laborType,
    this.rateType,
    this.includeAsProfitAndLossCategory,
    this.averageCost,
    this.price,
    this.hourlyRate,
    this.dailyRate,
    this.weeklyRate,
    this.monthlyRate,
    this.hourlyCost,
    this.dailyCost,
    this.weeklyCost,
    this.monthlyCost,
    this.iCode,
    this.description,
    this.availFor,
    this.categoryId,
    this.category,
    this.subCategoryCount,
    this.subCategoryId,
    this.subCategory,
    this.classification,
    this.classificationDescription,
    this.classificationColor,
    this.unitId,
    this.unit,
    this.unitType,
    this.nonDiscountable,
    this.overrideProfitAndLossCategory,
    this.profitAndLossCategoryId,
    this.profitAndLossCategory,
    this.autoCopyNotesToQuoteOrder,
    this.note,
    this.printNoteOnInContract,
    this.printNoteOnOutContract,
    this.printNoteOnReceiveContract,
    this.printNoteOnReturnContract,
    this.printNoteOnInvoice,
    this.printNoteOnOrder,
    this.printNoteOnPickList,
    this.printNoteOnPO,
    this.printNoteOnQuote,
    this.printNoteOnReturnList,
    this.printNoteOnPoReceiveList,
    this.printNoteOnPoReturnList,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.consignmentIncomeAccountId,
    this.consignmentIncomeAccountNo,
    this.consignmentIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.originalShowId,
    this.inactive,
    this.dateStamp,
    this.manifestShippingContainer,
    this.manifestStandAloneItem,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsLaborSettingsPositionPosition.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsLaborSettingsPositionPositionFromJson(json);

  @JsonKey(name: 'PositionId', includeIfNull: false)
  final String? positionId;
  @JsonKey(name: 'LaborTypeId', includeIfNull: false)
  final String? laborTypeId;
  @JsonKey(name: 'LaborType', includeIfNull: false)
  final String? laborType;
  @JsonKey(name: 'RateType', includeIfNull: false)
  final String? rateType;
  @JsonKey(name: 'IncludeAsProfitAndLossCategory', includeIfNull: false)
  final bool? includeAsProfitAndLossCategory;
  @JsonKey(name: 'AverageCost', includeIfNull: false)
  final double? averageCost;
  @JsonKey(name: 'Price', includeIfNull: false)
  final double? price;
  @JsonKey(name: 'HourlyRate', includeIfNull: false)
  final double? hourlyRate;
  @JsonKey(name: 'DailyRate', includeIfNull: false)
  final double? dailyRate;
  @JsonKey(name: 'WeeklyRate', includeIfNull: false)
  final double? weeklyRate;
  @JsonKey(name: 'MonthlyRate', includeIfNull: false)
  final double? monthlyRate;
  @JsonKey(name: 'HourlyCost', includeIfNull: false)
  final double? hourlyCost;
  @JsonKey(name: 'DailyCost', includeIfNull: false)
  final double? dailyCost;
  @JsonKey(name: 'WeeklyCost', includeIfNull: false)
  final double? weeklyCost;
  @JsonKey(name: 'MonthlyCost', includeIfNull: false)
  final double? monthlyCost;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'AvailFor', includeIfNull: false)
  final String? availFor;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'SubCategoryCount', includeIfNull: false)
  final int? subCategoryCount;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'SubCategory', includeIfNull: false)
  final String? subCategory;
  @JsonKey(name: 'Classification', includeIfNull: false)
  final String? classification;
  @JsonKey(name: 'ClassificationDescription', includeIfNull: false)
  final String? classificationDescription;
  @JsonKey(name: 'ClassificationColor', includeIfNull: false)
  final String? classificationColor;
  @JsonKey(name: 'UnitId', includeIfNull: false)
  final String? unitId;
  @JsonKey(name: 'Unit', includeIfNull: false)
  final String? unit;
  @JsonKey(name: 'UnitType', includeIfNull: false)
  final String? unitType;
  @JsonKey(name: 'NonDiscountable', includeIfNull: false)
  final bool? nonDiscountable;
  @JsonKey(name: 'OverrideProfitAndLossCategory', includeIfNull: false)
  final bool? overrideProfitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossCategoryId', includeIfNull: false)
  final String? profitAndLossCategoryId;
  @JsonKey(name: 'ProfitAndLossCategory', includeIfNull: false)
  final String? profitAndLossCategory;
  @JsonKey(name: 'AutoCopyNotesToQuoteOrder', includeIfNull: false)
  final bool? autoCopyNotesToQuoteOrder;
  @JsonKey(name: 'Note', includeIfNull: false)
  final String? note;
  @JsonKey(name: 'PrintNoteOnInContract', includeIfNull: false)
  final bool? printNoteOnInContract;
  @JsonKey(name: 'PrintNoteOnOutContract', includeIfNull: false)
  final bool? printNoteOnOutContract;
  @JsonKey(name: 'PrintNoteOnReceiveContract', includeIfNull: false)
  final bool? printNoteOnReceiveContract;
  @JsonKey(name: 'PrintNoteOnReturnContract', includeIfNull: false)
  final bool? printNoteOnReturnContract;
  @JsonKey(name: 'PrintNoteOnInvoice', includeIfNull: false)
  final bool? printNoteOnInvoice;
  @JsonKey(name: 'PrintNoteOnOrder', includeIfNull: false)
  final bool? printNoteOnOrder;
  @JsonKey(name: 'PrintNoteOnPickList', includeIfNull: false)
  final bool? printNoteOnPickList;
  @JsonKey(name: 'PrintNoteOnPO', includeIfNull: false)
  final bool? printNoteOnPO;
  @JsonKey(name: 'PrintNoteOnQuote', includeIfNull: false)
  final bool? printNoteOnQuote;
  @JsonKey(name: 'PrintNoteOnReturnList', includeIfNull: false)
  final bool? printNoteOnReturnList;
  @JsonKey(name: 'PrintNoteOnPoReceiveList', includeIfNull: false)
  final bool? printNoteOnPoReceiveList;
  @JsonKey(name: 'PrintNoteOnPoReturnList', includeIfNull: false)
  final bool? printNoteOnPoReturnList;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'ConsignmentIncomeAccountId', includeIfNull: false)
  final String? consignmentIncomeAccountId;
  @JsonKey(name: 'ConsignmentIncomeAccountNo', includeIfNull: false)
  final String? consignmentIncomeAccountNo;
  @JsonKey(name: 'ConsignmentIncomeAccountDescription', includeIfNull: false)
  final String? consignmentIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'ManifestShippingContainer', includeIfNull: false)
  final bool? manifestShippingContainer;
  @JsonKey(name: 'ManifestStandAloneItem', includeIfNull: false)
  final bool? manifestStandAloneItem;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsLaborSettingsPositionPositionFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsLaborSettingsPositionPositionToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsLaborSettingsPositionPositionToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsLaborSettingsPositionPosition &&
            (identical(other.positionId, positionId) ||
                const DeepCollectionEquality()
                    .equals(other.positionId, positionId)) &&
            (identical(other.laborTypeId, laborTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.laborTypeId, laborTypeId)) &&
            (identical(other.laborType, laborType) ||
                const DeepCollectionEquality()
                    .equals(other.laborType, laborType)) &&
            (identical(other.rateType, rateType) ||
                const DeepCollectionEquality()
                    .equals(other.rateType, rateType)) &&
            (identical(other.includeAsProfitAndLossCategory, includeAsProfitAndLossCategory) ||
                const DeepCollectionEquality().equals(
                    other.includeAsProfitAndLossCategory,
                    includeAsProfitAndLossCategory)) &&
            (identical(other.averageCost, averageCost) ||
                const DeepCollectionEquality()
                    .equals(other.averageCost, averageCost)) &&
            (identical(other.price, price) ||
                const DeepCollectionEquality().equals(other.price, price)) &&
            (identical(other.hourlyRate, hourlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyRate, hourlyRate)) &&
            (identical(other.dailyRate, dailyRate) ||
                const DeepCollectionEquality()
                    .equals(other.dailyRate, dailyRate)) &&
            (identical(other.weeklyRate, weeklyRate) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyRate, weeklyRate)) &&
            (identical(other.monthlyRate, monthlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyRate, monthlyRate)) &&
            (identical(other.hourlyCost, hourlyCost) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyCost, hourlyCost)) &&
            (identical(other.dailyCost, dailyCost) ||
                const DeepCollectionEquality()
                    .equals(other.dailyCost, dailyCost)) &&
            (identical(other.weeklyCost, weeklyCost) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyCost, weeklyCost)) &&
            (identical(other.monthlyCost, monthlyCost) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyCost, monthlyCost)) &&
            (identical(other.iCode, iCode) ||
                const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.availFor, availFor) ||
                const DeepCollectionEquality()
                    .equals(other.availFor, availFor)) &&
            (identical(other.categoryId, categoryId) || const DeepCollectionEquality().equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) || const DeepCollectionEquality().equals(other.category, category)) &&
            (identical(other.subCategoryCount, subCategoryCount) || const DeepCollectionEquality().equals(other.subCategoryCount, subCategoryCount)) &&
            (identical(other.subCategoryId, subCategoryId) || const DeepCollectionEquality().equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.subCategory, subCategory) || const DeepCollectionEquality().equals(other.subCategory, subCategory)) &&
            (identical(other.classification, classification) || const DeepCollectionEquality().equals(other.classification, classification)) &&
            (identical(other.classificationDescription, classificationDescription) || const DeepCollectionEquality().equals(other.classificationDescription, classificationDescription)) &&
            (identical(other.classificationColor, classificationColor) || const DeepCollectionEquality().equals(other.classificationColor, classificationColor)) &&
            (identical(other.unitId, unitId) || const DeepCollectionEquality().equals(other.unitId, unitId)) &&
            (identical(other.unit, unit) || const DeepCollectionEquality().equals(other.unit, unit)) &&
            (identical(other.unitType, unitType) || const DeepCollectionEquality().equals(other.unitType, unitType)) &&
            (identical(other.nonDiscountable, nonDiscountable) || const DeepCollectionEquality().equals(other.nonDiscountable, nonDiscountable)) &&
            (identical(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory) || const DeepCollectionEquality().equals(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory)) &&
            (identical(other.profitAndLossCategoryId, profitAndLossCategoryId) || const DeepCollectionEquality().equals(other.profitAndLossCategoryId, profitAndLossCategoryId)) &&
            (identical(other.profitAndLossCategory, profitAndLossCategory) || const DeepCollectionEquality().equals(other.profitAndLossCategory, profitAndLossCategory)) &&
            (identical(other.autoCopyNotesToQuoteOrder, autoCopyNotesToQuoteOrder) || const DeepCollectionEquality().equals(other.autoCopyNotesToQuoteOrder, autoCopyNotesToQuoteOrder)) &&
            (identical(other.note, note) || const DeepCollectionEquality().equals(other.note, note)) &&
            (identical(other.printNoteOnInContract, printNoteOnInContract) || const DeepCollectionEquality().equals(other.printNoteOnInContract, printNoteOnInContract)) &&
            (identical(other.printNoteOnOutContract, printNoteOnOutContract) || const DeepCollectionEquality().equals(other.printNoteOnOutContract, printNoteOnOutContract)) &&
            (identical(other.printNoteOnReceiveContract, printNoteOnReceiveContract) || const DeepCollectionEquality().equals(other.printNoteOnReceiveContract, printNoteOnReceiveContract)) &&
            (identical(other.printNoteOnReturnContract, printNoteOnReturnContract) || const DeepCollectionEquality().equals(other.printNoteOnReturnContract, printNoteOnReturnContract)) &&
            (identical(other.printNoteOnInvoice, printNoteOnInvoice) || const DeepCollectionEquality().equals(other.printNoteOnInvoice, printNoteOnInvoice)) &&
            (identical(other.printNoteOnOrder, printNoteOnOrder) || const DeepCollectionEquality().equals(other.printNoteOnOrder, printNoteOnOrder)) &&
            (identical(other.printNoteOnPickList, printNoteOnPickList) || const DeepCollectionEquality().equals(other.printNoteOnPickList, printNoteOnPickList)) &&
            (identical(other.printNoteOnPO, printNoteOnPO) || const DeepCollectionEquality().equals(other.printNoteOnPO, printNoteOnPO)) &&
            (identical(other.printNoteOnQuote, printNoteOnQuote) || const DeepCollectionEquality().equals(other.printNoteOnQuote, printNoteOnQuote)) &&
            (identical(other.printNoteOnReturnList, printNoteOnReturnList) || const DeepCollectionEquality().equals(other.printNoteOnReturnList, printNoteOnReturnList)) &&
            (identical(other.printNoteOnPoReceiveList, printNoteOnPoReceiveList) || const DeepCollectionEquality().equals(other.printNoteOnPoReceiveList, printNoteOnPoReceiveList)) &&
            (identical(other.printNoteOnPoReturnList, printNoteOnPoReturnList) || const DeepCollectionEquality().equals(other.printNoteOnPoReturnList, printNoteOnPoReturnList)) &&
            (identical(other.assetAccountId, assetAccountId) || const DeepCollectionEquality().equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) || const DeepCollectionEquality().equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) || const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.consignmentIncomeAccountId, consignmentIncomeAccountId) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountId, consignmentIncomeAccountId)) &&
            (identical(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo)) &&
            (identical(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.originalShowId, originalShowId) || const DeepCollectionEquality().equals(other.originalShowId, originalShowId)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.manifestShippingContainer, manifestShippingContainer) || const DeepCollectionEquality().equals(other.manifestShippingContainer, manifestShippingContainer)) &&
            (identical(other.manifestStandAloneItem, manifestStandAloneItem) || const DeepCollectionEquality().equals(other.manifestStandAloneItem, manifestStandAloneItem)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsLaborSettingsPositionPositionExtension
    on WebApiModulesSettingsLaborSettingsPositionPosition {
  WebApiModulesSettingsLaborSettingsPositionPosition copyWith(
      {String? positionId,
      String? laborTypeId,
      String? laborType,
      String? rateType,
      bool? includeAsProfitAndLossCategory,
      double? averageCost,
      double? price,
      double? hourlyRate,
      double? dailyRate,
      double? weeklyRate,
      double? monthlyRate,
      double? hourlyCost,
      double? dailyCost,
      double? weeklyCost,
      double? monthlyCost,
      String? iCode,
      String? description,
      String? availFor,
      String? categoryId,
      String? category,
      int? subCategoryCount,
      String? subCategoryId,
      String? subCategory,
      String? classification,
      String? classificationDescription,
      String? classificationColor,
      String? unitId,
      String? unit,
      String? unitType,
      bool? nonDiscountable,
      bool? overrideProfitAndLossCategory,
      String? profitAndLossCategoryId,
      String? profitAndLossCategory,
      bool? autoCopyNotesToQuoteOrder,
      String? note,
      bool? printNoteOnInContract,
      bool? printNoteOnOutContract,
      bool? printNoteOnReceiveContract,
      bool? printNoteOnReturnContract,
      bool? printNoteOnInvoice,
      bool? printNoteOnOrder,
      bool? printNoteOnPickList,
      bool? printNoteOnPO,
      bool? printNoteOnQuote,
      bool? printNoteOnReturnList,
      bool? printNoteOnPoReceiveList,
      bool? printNoteOnPoReturnList,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? consignmentIncomeAccountId,
      String? consignmentIncomeAccountNo,
      String? consignmentIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      String? originalShowId,
      bool? inactive,
      String? dateStamp,
      bool? manifestShippingContainer,
      bool? manifestStandAloneItem,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsLaborSettingsPositionPosition(
        positionId: positionId ?? this.positionId,
        laborTypeId: laborTypeId ?? this.laborTypeId,
        laborType: laborType ?? this.laborType,
        rateType: rateType ?? this.rateType,
        includeAsProfitAndLossCategory: includeAsProfitAndLossCategory ??
            this.includeAsProfitAndLossCategory,
        averageCost: averageCost ?? this.averageCost,
        price: price ?? this.price,
        hourlyRate: hourlyRate ?? this.hourlyRate,
        dailyRate: dailyRate ?? this.dailyRate,
        weeklyRate: weeklyRate ?? this.weeklyRate,
        monthlyRate: monthlyRate ?? this.monthlyRate,
        hourlyCost: hourlyCost ?? this.hourlyCost,
        dailyCost: dailyCost ?? this.dailyCost,
        weeklyCost: weeklyCost ?? this.weeklyCost,
        monthlyCost: monthlyCost ?? this.monthlyCost,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        availFor: availFor ?? this.availFor,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        subCategoryCount: subCategoryCount ?? this.subCategoryCount,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        subCategory: subCategory ?? this.subCategory,
        classification: classification ?? this.classification,
        classificationDescription:
            classificationDescription ?? this.classificationDescription,
        classificationColor: classificationColor ?? this.classificationColor,
        unitId: unitId ?? this.unitId,
        unit: unit ?? this.unit,
        unitType: unitType ?? this.unitType,
        nonDiscountable: nonDiscountable ?? this.nonDiscountable,
        overrideProfitAndLossCategory:
            overrideProfitAndLossCategory ?? this.overrideProfitAndLossCategory,
        profitAndLossCategoryId:
            profitAndLossCategoryId ?? this.profitAndLossCategoryId,
        profitAndLossCategory:
            profitAndLossCategory ?? this.profitAndLossCategory,
        autoCopyNotesToQuoteOrder:
            autoCopyNotesToQuoteOrder ?? this.autoCopyNotesToQuoteOrder,
        note: note ?? this.note,
        printNoteOnInContract:
            printNoteOnInContract ?? this.printNoteOnInContract,
        printNoteOnOutContract:
            printNoteOnOutContract ?? this.printNoteOnOutContract,
        printNoteOnReceiveContract:
            printNoteOnReceiveContract ?? this.printNoteOnReceiveContract,
        printNoteOnReturnContract:
            printNoteOnReturnContract ?? this.printNoteOnReturnContract,
        printNoteOnInvoice: printNoteOnInvoice ?? this.printNoteOnInvoice,
        printNoteOnOrder: printNoteOnOrder ?? this.printNoteOnOrder,
        printNoteOnPickList: printNoteOnPickList ?? this.printNoteOnPickList,
        printNoteOnPO: printNoteOnPO ?? this.printNoteOnPO,
        printNoteOnQuote: printNoteOnQuote ?? this.printNoteOnQuote,
        printNoteOnReturnList:
            printNoteOnReturnList ?? this.printNoteOnReturnList,
        printNoteOnPoReceiveList:
            printNoteOnPoReceiveList ?? this.printNoteOnPoReceiveList,
        printNoteOnPoReturnList:
            printNoteOnPoReturnList ?? this.printNoteOnPoReturnList,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        consignmentIncomeAccountId:
            consignmentIncomeAccountId ?? this.consignmentIncomeAccountId,
        consignmentIncomeAccountNo:
            consignmentIncomeAccountNo ?? this.consignmentIncomeAccountNo,
        consignmentIncomeAccountDescription: consignmentIncomeAccountDescription ??
            this.consignmentIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription: equipmentSaleIncomeAccountDescription ??
            this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription:
            costOfGoodsSoldExpenseAccountDescription ??
                this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription: depreciationExpenseAccountDescription ??
            this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId: accumulatedDepreciationExpenseAccountId ??
            this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo:
            accumulatedDepreciationExpenseAccountNo ??
                this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ??
                this.accumulatedDepreciationExpenseAccountDescription,
        originalShowId: originalShowId ?? this.originalShowId,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        manifestShippingContainer: manifestShippingContainer ?? this.manifestShippingContainer,
        manifestStandAloneItem: manifestStandAloneItem ?? this.manifestStandAloneItem,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsMarketSegmentJobMarketSegmentJob {
  WebApiModulesSettingsMarketSegmentJobMarketSegmentJob({
    this.marketSegmentJobId,
    this.marketSegmentJob,
    this.marketTypeId,
    this.marketType,
    this.marketSegmentId,
    this.marketSegment,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsMarketSegmentJobMarketSegmentJob.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsMarketSegmentJobMarketSegmentJobFromJson(json);

  @JsonKey(name: 'MarketSegmentJobId', includeIfNull: false)
  final String? marketSegmentJobId;
  @JsonKey(name: 'MarketSegmentJob', includeIfNull: false)
  final String? marketSegmentJob;
  @JsonKey(name: 'MarketTypeId', includeIfNull: false)
  final String? marketTypeId;
  @JsonKey(name: 'MarketType', includeIfNull: false)
  final String? marketType;
  @JsonKey(name: 'MarketSegmentId', includeIfNull: false)
  final String? marketSegmentId;
  @JsonKey(name: 'MarketSegment', includeIfNull: false)
  final String? marketSegment;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsMarketSegmentJobMarketSegmentJobFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsMarketSegmentJobMarketSegmentJobToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsMarketSegmentJobMarketSegmentJobToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsMarketSegmentJobMarketSegmentJob &&
            (identical(other.marketSegmentJobId, marketSegmentJobId) ||
                const DeepCollectionEquality()
                    .equals(other.marketSegmentJobId, marketSegmentJobId)) &&
            (identical(other.marketSegmentJob, marketSegmentJob) ||
                const DeepCollectionEquality()
                    .equals(other.marketSegmentJob, marketSegmentJob)) &&
            (identical(other.marketTypeId, marketTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.marketTypeId, marketTypeId)) &&
            (identical(other.marketType, marketType) ||
                const DeepCollectionEquality()
                    .equals(other.marketType, marketType)) &&
            (identical(other.marketSegmentId, marketSegmentId) ||
                const DeepCollectionEquality()
                    .equals(other.marketSegmentId, marketSegmentId)) &&
            (identical(other.marketSegment, marketSegment) ||
                const DeepCollectionEquality()
                    .equals(other.marketSegment, marketSegment)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsMarketSegmentJobMarketSegmentJobExtension
    on WebApiModulesSettingsMarketSegmentJobMarketSegmentJob {
  WebApiModulesSettingsMarketSegmentJobMarketSegmentJob copyWith(
      {String? marketSegmentJobId,
      String? marketSegmentJob,
      String? marketTypeId,
      String? marketType,
      String? marketSegmentId,
      String? marketSegment,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsMarketSegmentJobMarketSegmentJob(
        marketSegmentJobId: marketSegmentJobId ?? this.marketSegmentJobId,
        marketSegmentJob: marketSegmentJob ?? this.marketSegmentJob,
        marketTypeId: marketTypeId ?? this.marketTypeId,
        marketType: marketType ?? this.marketType,
        marketSegmentId: marketSegmentId ?? this.marketSegmentId,
        marketSegment: marketSegment ?? this.marketSegment,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory {
  WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory({
    this.miscTypeId,
    this.miscType,
    this.discountCategoryItems100PercentByDefault,
    this.excludeCategoryItemsFromInvoicing,
    this.categoryId,
    this.category,
    this.warehouseCategory,
    this.catalogCategory,
    this.overrideProfitAndLossCategory,
    this.profitAndLossCategoryId,
    this.profitAndLossCategory,
    this.profitAndLossIncludeAsMiscExpense,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.consignmentIncomeAccountId,
    this.consignmentIncomeAccountNo,
    this.consignmentIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationMonths,
    this.salvageValuePercent,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.inventoryTypeOrderBy,
    this.orderBy,
    this.pickListOrderBy,
    this.subCategoryCount,
    this.inventoryCount,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryFromJson(
          json);

  @JsonKey(name: 'MiscTypeId', includeIfNull: false)
  final String? miscTypeId;
  @JsonKey(name: 'MiscType', includeIfNull: false)
  final String? miscType;
  @JsonKey(
      name: 'DiscountCategoryItems100PercentByDefault', includeIfNull: false)
  final bool? discountCategoryItems100PercentByDefault;
  @JsonKey(name: 'ExcludeCategoryItemsFromInvoicing', includeIfNull: false)
  final bool? excludeCategoryItemsFromInvoicing;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'WarehouseCategory', includeIfNull: false)
  final bool? warehouseCategory;
  @JsonKey(name: 'CatalogCategory', includeIfNull: false)
  final bool? catalogCategory;
  @JsonKey(name: 'OverrideProfitAndLossCategory', includeIfNull: false)
  final bool? overrideProfitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossCategoryId', includeIfNull: false)
  final String? profitAndLossCategoryId;
  @JsonKey(name: 'ProfitAndLossCategory', includeIfNull: false)
  final String? profitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossIncludeAsMiscExpense', includeIfNull: false)
  final bool? profitAndLossIncludeAsMiscExpense;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'ConsignmentIncomeAccountId', includeIfNull: false)
  final String? consignmentIncomeAccountId;
  @JsonKey(name: 'ConsignmentIncomeAccountNo', includeIfNull: false)
  final String? consignmentIncomeAccountNo;
  @JsonKey(name: 'ConsignmentIncomeAccountDescription', includeIfNull: false)
  final String? consignmentIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationMonths', includeIfNull: false)
  final int? depreciationMonths;
  @JsonKey(name: 'SalvageValuePercent', includeIfNull: false)
  final double? salvageValuePercent;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'InventoryTypeOrderBy', includeIfNull: false)
  final double? inventoryTypeOrderBy;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'PickListOrderBy', includeIfNull: false)
  final int? pickListOrderBy;
  @JsonKey(name: 'SubCategoryCount', includeIfNull: false)
  final int? subCategoryCount;
  @JsonKey(name: 'InventoryCount', includeIfNull: false)
  final int? inventoryCount;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory &&
            (identical(other.miscTypeId, miscTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.miscTypeId, miscTypeId)) &&
            (identical(other.miscType, miscType) ||
                const DeepCollectionEquality()
                    .equals(other.miscType, miscType)) &&
            (identical(other.discountCategoryItems100PercentByDefault, discountCategoryItems100PercentByDefault) ||
                const DeepCollectionEquality().equals(
                    other.discountCategoryItems100PercentByDefault,
                    discountCategoryItems100PercentByDefault)) &&
            (identical(other.excludeCategoryItemsFromInvoicing, excludeCategoryItemsFromInvoicing) ||
                const DeepCollectionEquality().equals(
                    other.excludeCategoryItemsFromInvoicing,
                    excludeCategoryItemsFromInvoicing)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) ||
                const DeepCollectionEquality()
                    .equals(other.category, category)) &&
            (identical(other.warehouseCategory, warehouseCategory) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCategory, warehouseCategory)) &&
            (identical(other.catalogCategory, catalogCategory) ||
                const DeepCollectionEquality()
                    .equals(other.catalogCategory, catalogCategory)) &&
            (identical(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory) ||
                const DeepCollectionEquality().equals(
                    other.overrideProfitAndLossCategory,
                    overrideProfitAndLossCategory)) &&
            (identical(other.profitAndLossCategoryId, profitAndLossCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.profitAndLossCategoryId, profitAndLossCategoryId)) &&
            (identical(other.profitAndLossCategory, profitAndLossCategory) || const DeepCollectionEquality().equals(other.profitAndLossCategory, profitAndLossCategory)) &&
            (identical(other.profitAndLossIncludeAsMiscExpense, profitAndLossIncludeAsMiscExpense) || const DeepCollectionEquality().equals(other.profitAndLossIncludeAsMiscExpense, profitAndLossIncludeAsMiscExpense)) &&
            (identical(other.assetAccountId, assetAccountId) || const DeepCollectionEquality().equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) || const DeepCollectionEquality().equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) || const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.consignmentIncomeAccountId, consignmentIncomeAccountId) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountId, consignmentIncomeAccountId)) &&
            (identical(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo)) &&
            (identical(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationMonths, depreciationMonths) || const DeepCollectionEquality().equals(other.depreciationMonths, depreciationMonths)) &&
            (identical(other.salvageValuePercent, salvageValuePercent) || const DeepCollectionEquality().equals(other.salvageValuePercent, salvageValuePercent)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.inventoryTypeOrderBy, inventoryTypeOrderBy) || const DeepCollectionEquality().equals(other.inventoryTypeOrderBy, inventoryTypeOrderBy)) &&
            (identical(other.orderBy, orderBy) || const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.pickListOrderBy, pickListOrderBy) || const DeepCollectionEquality().equals(other.pickListOrderBy, pickListOrderBy)) &&
            (identical(other.subCategoryCount, subCategoryCount) || const DeepCollectionEquality().equals(other.subCategoryCount, subCategoryCount)) &&
            (identical(other.inventoryCount, inventoryCount) || const DeepCollectionEquality().equals(other.inventoryCount, inventoryCount)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategoryExtension
    on WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory {
  WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory copyWith(
      {String? miscTypeId,
      String? miscType,
      bool? discountCategoryItems100PercentByDefault,
      bool? excludeCategoryItemsFromInvoicing,
      String? categoryId,
      String? category,
      bool? warehouseCategory,
      bool? catalogCategory,
      bool? overrideProfitAndLossCategory,
      String? profitAndLossCategoryId,
      String? profitAndLossCategory,
      bool? profitAndLossIncludeAsMiscExpense,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? consignmentIncomeAccountId,
      String? consignmentIncomeAccountNo,
      String? consignmentIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      int? depreciationMonths,
      double? salvageValuePercent,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      double? inventoryTypeOrderBy,
      double? orderBy,
      int? pickListOrderBy,
      int? subCategoryCount,
      int? inventoryCount,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsMiscellaneousSettingsMiscCategoryMiscCategory(
        miscTypeId: miscTypeId ?? this.miscTypeId,
        miscType: miscType ?? this.miscType,
        discountCategoryItems100PercentByDefault: discountCategoryItems100PercentByDefault ??
            this.discountCategoryItems100PercentByDefault,
        excludeCategoryItemsFromInvoicing: excludeCategoryItemsFromInvoicing ??
            this.excludeCategoryItemsFromInvoicing,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        warehouseCategory: warehouseCategory ?? this.warehouseCategory,
        catalogCategory: catalogCategory ?? this.catalogCategory,
        overrideProfitAndLossCategory:
            overrideProfitAndLossCategory ?? this.overrideProfitAndLossCategory,
        profitAndLossCategoryId:
            profitAndLossCategoryId ?? this.profitAndLossCategoryId,
        profitAndLossCategory:
            profitAndLossCategory ?? this.profitAndLossCategory,
        profitAndLossIncludeAsMiscExpense: profitAndLossIncludeAsMiscExpense ??
            this.profitAndLossIncludeAsMiscExpense,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        consignmentIncomeAccountId:
            consignmentIncomeAccountId ?? this.consignmentIncomeAccountId,
        consignmentIncomeAccountNo:
            consignmentIncomeAccountNo ?? this.consignmentIncomeAccountNo,
        consignmentIncomeAccountDescription: consignmentIncomeAccountDescription ??
            this.consignmentIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription: equipmentSaleIncomeAccountDescription ??
            this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription: costOfGoodsSoldExpenseAccountDescription ??
            this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationMonths: depreciationMonths ?? this.depreciationMonths,
        salvageValuePercent: salvageValuePercent ?? this.salvageValuePercent,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription: depreciationExpenseAccountDescription ??
            this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId: accumulatedDepreciationExpenseAccountId ??
            this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo: accumulatedDepreciationExpenseAccountNo ??
            this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ?? this.accumulatedDepreciationExpenseAccountDescription,
        inventoryTypeOrderBy: inventoryTypeOrderBy ?? this.inventoryTypeOrderBy,
        orderBy: orderBy ?? this.orderBy,
        pickListOrderBy: pickListOrderBy ?? this.pickListOrderBy,
        subCategoryCount: subCategoryCount ?? this.subCategoryCount,
        inventoryCount: inventoryCount ?? this.inventoryCount,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate {
  WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate({
    this.rateId,
    this.miscTypeId,
    this.miscType,
    this.rateType,
    this.includeAsProfitAndLossCategory,
    this.averageCost,
    this.price,
    this.hourlyRate,
    this.dailyRate,
    this.weeklyRate,
    this.monthlyRate,
    this.hourlyCost,
    this.dailyCost,
    this.weeklyCost,
    this.monthlyCost,
    this.iCode,
    this.description,
    this.availFor,
    this.categoryId,
    this.category,
    this.subCategoryCount,
    this.subCategoryId,
    this.subCategory,
    this.classification,
    this.classificationDescription,
    this.classificationColor,
    this.unitId,
    this.unit,
    this.unitType,
    this.nonDiscountable,
    this.overrideProfitAndLossCategory,
    this.profitAndLossCategoryId,
    this.profitAndLossCategory,
    this.autoCopyNotesToQuoteOrder,
    this.note,
    this.printNoteOnInContract,
    this.printNoteOnOutContract,
    this.printNoteOnReceiveContract,
    this.printNoteOnReturnContract,
    this.printNoteOnInvoice,
    this.printNoteOnOrder,
    this.printNoteOnPickList,
    this.printNoteOnPO,
    this.printNoteOnQuote,
    this.printNoteOnReturnList,
    this.printNoteOnPoReceiveList,
    this.printNoteOnPoReturnList,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.consignmentIncomeAccountId,
    this.consignmentIncomeAccountNo,
    this.consignmentIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.originalShowId,
    this.inactive,
    this.dateStamp,
    this.manifestShippingContainer,
    this.manifestStandAloneItem,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateFromJson(
          json);

  @JsonKey(name: 'RateId', includeIfNull: false)
  final String? rateId;
  @JsonKey(name: 'MiscTypeId', includeIfNull: false)
  final String? miscTypeId;
  @JsonKey(name: 'MiscType', includeIfNull: false)
  final String? miscType;
  @JsonKey(name: 'RateType', includeIfNull: false)
  final String? rateType;
  @JsonKey(name: 'IncludeAsProfitAndLossCategory', includeIfNull: false)
  final bool? includeAsProfitAndLossCategory;
  @JsonKey(name: 'AverageCost', includeIfNull: false)
  final double? averageCost;
  @JsonKey(name: 'Price', includeIfNull: false)
  final double? price;
  @JsonKey(name: 'HourlyRate', includeIfNull: false)
  final double? hourlyRate;
  @JsonKey(name: 'DailyRate', includeIfNull: false)
  final double? dailyRate;
  @JsonKey(name: 'WeeklyRate', includeIfNull: false)
  final double? weeklyRate;
  @JsonKey(name: 'MonthlyRate', includeIfNull: false)
  final double? monthlyRate;
  @JsonKey(name: 'HourlyCost', includeIfNull: false)
  final double? hourlyCost;
  @JsonKey(name: 'DailyCost', includeIfNull: false)
  final double? dailyCost;
  @JsonKey(name: 'WeeklyCost', includeIfNull: false)
  final double? weeklyCost;
  @JsonKey(name: 'MonthlyCost', includeIfNull: false)
  final double? monthlyCost;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'AvailFor', includeIfNull: false)
  final String? availFor;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'SubCategoryCount', includeIfNull: false)
  final int? subCategoryCount;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'SubCategory', includeIfNull: false)
  final String? subCategory;
  @JsonKey(name: 'Classification', includeIfNull: false)
  final String? classification;
  @JsonKey(name: 'ClassificationDescription', includeIfNull: false)
  final String? classificationDescription;
  @JsonKey(name: 'ClassificationColor', includeIfNull: false)
  final String? classificationColor;
  @JsonKey(name: 'UnitId', includeIfNull: false)
  final String? unitId;
  @JsonKey(name: 'Unit', includeIfNull: false)
  final String? unit;
  @JsonKey(name: 'UnitType', includeIfNull: false)
  final String? unitType;
  @JsonKey(name: 'NonDiscountable', includeIfNull: false)
  final bool? nonDiscountable;
  @JsonKey(name: 'OverrideProfitAndLossCategory', includeIfNull: false)
  final bool? overrideProfitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossCategoryId', includeIfNull: false)
  final String? profitAndLossCategoryId;
  @JsonKey(name: 'ProfitAndLossCategory', includeIfNull: false)
  final String? profitAndLossCategory;
  @JsonKey(name: 'AutoCopyNotesToQuoteOrder', includeIfNull: false)
  final bool? autoCopyNotesToQuoteOrder;
  @JsonKey(name: 'Note', includeIfNull: false)
  final String? note;
  @JsonKey(name: 'PrintNoteOnInContract', includeIfNull: false)
  final bool? printNoteOnInContract;
  @JsonKey(name: 'PrintNoteOnOutContract', includeIfNull: false)
  final bool? printNoteOnOutContract;
  @JsonKey(name: 'PrintNoteOnReceiveContract', includeIfNull: false)
  final bool? printNoteOnReceiveContract;
  @JsonKey(name: 'PrintNoteOnReturnContract', includeIfNull: false)
  final bool? printNoteOnReturnContract;
  @JsonKey(name: 'PrintNoteOnInvoice', includeIfNull: false)
  final bool? printNoteOnInvoice;
  @JsonKey(name: 'PrintNoteOnOrder', includeIfNull: false)
  final bool? printNoteOnOrder;
  @JsonKey(name: 'PrintNoteOnPickList', includeIfNull: false)
  final bool? printNoteOnPickList;
  @JsonKey(name: 'PrintNoteOnPO', includeIfNull: false)
  final bool? printNoteOnPO;
  @JsonKey(name: 'PrintNoteOnQuote', includeIfNull: false)
  final bool? printNoteOnQuote;
  @JsonKey(name: 'PrintNoteOnReturnList', includeIfNull: false)
  final bool? printNoteOnReturnList;
  @JsonKey(name: 'PrintNoteOnPoReceiveList', includeIfNull: false)
  final bool? printNoteOnPoReceiveList;
  @JsonKey(name: 'PrintNoteOnPoReturnList', includeIfNull: false)
  final bool? printNoteOnPoReturnList;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'ConsignmentIncomeAccountId', includeIfNull: false)
  final String? consignmentIncomeAccountId;
  @JsonKey(name: 'ConsignmentIncomeAccountNo', includeIfNull: false)
  final String? consignmentIncomeAccountNo;
  @JsonKey(name: 'ConsignmentIncomeAccountDescription', includeIfNull: false)
  final String? consignmentIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'ManifestShippingContainer', includeIfNull: false)
  final bool? manifestShippingContainer;
  @JsonKey(name: 'ManifestStandAloneItem', includeIfNull: false)
  final bool? manifestStandAloneItem;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate &&
            (identical(other.rateId, rateId) ||
                const DeepCollectionEquality().equals(other.rateId, rateId)) &&
            (identical(other.miscTypeId, miscTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.miscTypeId, miscTypeId)) &&
            (identical(other.miscType, miscType) ||
                const DeepCollectionEquality()
                    .equals(other.miscType, miscType)) &&
            (identical(other.rateType, rateType) ||
                const DeepCollectionEquality()
                    .equals(other.rateType, rateType)) &&
            (identical(other.includeAsProfitAndLossCategory, includeAsProfitAndLossCategory) ||
                const DeepCollectionEquality().equals(
                    other.includeAsProfitAndLossCategory,
                    includeAsProfitAndLossCategory)) &&
            (identical(other.averageCost, averageCost) ||
                const DeepCollectionEquality()
                    .equals(other.averageCost, averageCost)) &&
            (identical(other.price, price) ||
                const DeepCollectionEquality().equals(other.price, price)) &&
            (identical(other.hourlyRate, hourlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyRate, hourlyRate)) &&
            (identical(other.dailyRate, dailyRate) ||
                const DeepCollectionEquality()
                    .equals(other.dailyRate, dailyRate)) &&
            (identical(other.weeklyRate, weeklyRate) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyRate, weeklyRate)) &&
            (identical(other.monthlyRate, monthlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyRate, monthlyRate)) &&
            (identical(other.hourlyCost, hourlyCost) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyCost, hourlyCost)) &&
            (identical(other.dailyCost, dailyCost) ||
                const DeepCollectionEquality()
                    .equals(other.dailyCost, dailyCost)) &&
            (identical(other.weeklyCost, weeklyCost) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyCost, weeklyCost)) &&
            (identical(other.monthlyCost, monthlyCost) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyCost, monthlyCost)) &&
            (identical(other.iCode, iCode) ||
                const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.availFor, availFor) ||
                const DeepCollectionEquality()
                    .equals(other.availFor, availFor)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality().equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) || const DeepCollectionEquality().equals(other.category, category)) &&
            (identical(other.subCategoryCount, subCategoryCount) || const DeepCollectionEquality().equals(other.subCategoryCount, subCategoryCount)) &&
            (identical(other.subCategoryId, subCategoryId) || const DeepCollectionEquality().equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.subCategory, subCategory) || const DeepCollectionEquality().equals(other.subCategory, subCategory)) &&
            (identical(other.classification, classification) || const DeepCollectionEquality().equals(other.classification, classification)) &&
            (identical(other.classificationDescription, classificationDescription) || const DeepCollectionEquality().equals(other.classificationDescription, classificationDescription)) &&
            (identical(other.classificationColor, classificationColor) || const DeepCollectionEquality().equals(other.classificationColor, classificationColor)) &&
            (identical(other.unitId, unitId) || const DeepCollectionEquality().equals(other.unitId, unitId)) &&
            (identical(other.unit, unit) || const DeepCollectionEquality().equals(other.unit, unit)) &&
            (identical(other.unitType, unitType) || const DeepCollectionEquality().equals(other.unitType, unitType)) &&
            (identical(other.nonDiscountable, nonDiscountable) || const DeepCollectionEquality().equals(other.nonDiscountable, nonDiscountable)) &&
            (identical(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory) || const DeepCollectionEquality().equals(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory)) &&
            (identical(other.profitAndLossCategoryId, profitAndLossCategoryId) || const DeepCollectionEquality().equals(other.profitAndLossCategoryId, profitAndLossCategoryId)) &&
            (identical(other.profitAndLossCategory, profitAndLossCategory) || const DeepCollectionEquality().equals(other.profitAndLossCategory, profitAndLossCategory)) &&
            (identical(other.autoCopyNotesToQuoteOrder, autoCopyNotesToQuoteOrder) || const DeepCollectionEquality().equals(other.autoCopyNotesToQuoteOrder, autoCopyNotesToQuoteOrder)) &&
            (identical(other.note, note) || const DeepCollectionEquality().equals(other.note, note)) &&
            (identical(other.printNoteOnInContract, printNoteOnInContract) || const DeepCollectionEquality().equals(other.printNoteOnInContract, printNoteOnInContract)) &&
            (identical(other.printNoteOnOutContract, printNoteOnOutContract) || const DeepCollectionEquality().equals(other.printNoteOnOutContract, printNoteOnOutContract)) &&
            (identical(other.printNoteOnReceiveContract, printNoteOnReceiveContract) || const DeepCollectionEquality().equals(other.printNoteOnReceiveContract, printNoteOnReceiveContract)) &&
            (identical(other.printNoteOnReturnContract, printNoteOnReturnContract) || const DeepCollectionEquality().equals(other.printNoteOnReturnContract, printNoteOnReturnContract)) &&
            (identical(other.printNoteOnInvoice, printNoteOnInvoice) || const DeepCollectionEquality().equals(other.printNoteOnInvoice, printNoteOnInvoice)) &&
            (identical(other.printNoteOnOrder, printNoteOnOrder) || const DeepCollectionEquality().equals(other.printNoteOnOrder, printNoteOnOrder)) &&
            (identical(other.printNoteOnPickList, printNoteOnPickList) || const DeepCollectionEquality().equals(other.printNoteOnPickList, printNoteOnPickList)) &&
            (identical(other.printNoteOnPO, printNoteOnPO) || const DeepCollectionEquality().equals(other.printNoteOnPO, printNoteOnPO)) &&
            (identical(other.printNoteOnQuote, printNoteOnQuote) || const DeepCollectionEquality().equals(other.printNoteOnQuote, printNoteOnQuote)) &&
            (identical(other.printNoteOnReturnList, printNoteOnReturnList) || const DeepCollectionEquality().equals(other.printNoteOnReturnList, printNoteOnReturnList)) &&
            (identical(other.printNoteOnPoReceiveList, printNoteOnPoReceiveList) || const DeepCollectionEquality().equals(other.printNoteOnPoReceiveList, printNoteOnPoReceiveList)) &&
            (identical(other.printNoteOnPoReturnList, printNoteOnPoReturnList) || const DeepCollectionEquality().equals(other.printNoteOnPoReturnList, printNoteOnPoReturnList)) &&
            (identical(other.assetAccountId, assetAccountId) || const DeepCollectionEquality().equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) || const DeepCollectionEquality().equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) || const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.consignmentIncomeAccountId, consignmentIncomeAccountId) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountId, consignmentIncomeAccountId)) &&
            (identical(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo)) &&
            (identical(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.originalShowId, originalShowId) || const DeepCollectionEquality().equals(other.originalShowId, originalShowId)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.manifestShippingContainer, manifestShippingContainer) || const DeepCollectionEquality().equals(other.manifestShippingContainer, manifestShippingContainer)) &&
            (identical(other.manifestStandAloneItem, manifestStandAloneItem) || const DeepCollectionEquality().equals(other.manifestStandAloneItem, manifestStandAloneItem)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRateExtension
    on WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate {
  WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate copyWith(
      {String? rateId,
      String? miscTypeId,
      String? miscType,
      String? rateType,
      bool? includeAsProfitAndLossCategory,
      double? averageCost,
      double? price,
      double? hourlyRate,
      double? dailyRate,
      double? weeklyRate,
      double? monthlyRate,
      double? hourlyCost,
      double? dailyCost,
      double? weeklyCost,
      double? monthlyCost,
      String? iCode,
      String? description,
      String? availFor,
      String? categoryId,
      String? category,
      int? subCategoryCount,
      String? subCategoryId,
      String? subCategory,
      String? classification,
      String? classificationDescription,
      String? classificationColor,
      String? unitId,
      String? unit,
      String? unitType,
      bool? nonDiscountable,
      bool? overrideProfitAndLossCategory,
      String? profitAndLossCategoryId,
      String? profitAndLossCategory,
      bool? autoCopyNotesToQuoteOrder,
      String? note,
      bool? printNoteOnInContract,
      bool? printNoteOnOutContract,
      bool? printNoteOnReceiveContract,
      bool? printNoteOnReturnContract,
      bool? printNoteOnInvoice,
      bool? printNoteOnOrder,
      bool? printNoteOnPickList,
      bool? printNoteOnPO,
      bool? printNoteOnQuote,
      bool? printNoteOnReturnList,
      bool? printNoteOnPoReceiveList,
      bool? printNoteOnPoReturnList,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? consignmentIncomeAccountId,
      String? consignmentIncomeAccountNo,
      String? consignmentIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      String? originalShowId,
      bool? inactive,
      String? dateStamp,
      bool? manifestShippingContainer,
      bool? manifestStandAloneItem,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsMiscellaneousSettingsMiscRateMiscRate(
        rateId: rateId ?? this.rateId,
        miscTypeId: miscTypeId ?? this.miscTypeId,
        miscType: miscType ?? this.miscType,
        rateType: rateType ?? this.rateType,
        includeAsProfitAndLossCategory: includeAsProfitAndLossCategory ??
            this.includeAsProfitAndLossCategory,
        averageCost: averageCost ?? this.averageCost,
        price: price ?? this.price,
        hourlyRate: hourlyRate ?? this.hourlyRate,
        dailyRate: dailyRate ?? this.dailyRate,
        weeklyRate: weeklyRate ?? this.weeklyRate,
        monthlyRate: monthlyRate ?? this.monthlyRate,
        hourlyCost: hourlyCost ?? this.hourlyCost,
        dailyCost: dailyCost ?? this.dailyCost,
        weeklyCost: weeklyCost ?? this.weeklyCost,
        monthlyCost: monthlyCost ?? this.monthlyCost,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        availFor: availFor ?? this.availFor,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        subCategoryCount: subCategoryCount ?? this.subCategoryCount,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        subCategory: subCategory ?? this.subCategory,
        classification: classification ?? this.classification,
        classificationDescription:
            classificationDescription ?? this.classificationDescription,
        classificationColor: classificationColor ?? this.classificationColor,
        unitId: unitId ?? this.unitId,
        unit: unit ?? this.unit,
        unitType: unitType ?? this.unitType,
        nonDiscountable: nonDiscountable ?? this.nonDiscountable,
        overrideProfitAndLossCategory:
            overrideProfitAndLossCategory ?? this.overrideProfitAndLossCategory,
        profitAndLossCategoryId:
            profitAndLossCategoryId ?? this.profitAndLossCategoryId,
        profitAndLossCategory:
            profitAndLossCategory ?? this.profitAndLossCategory,
        autoCopyNotesToQuoteOrder:
            autoCopyNotesToQuoteOrder ?? this.autoCopyNotesToQuoteOrder,
        note: note ?? this.note,
        printNoteOnInContract:
            printNoteOnInContract ?? this.printNoteOnInContract,
        printNoteOnOutContract:
            printNoteOnOutContract ?? this.printNoteOnOutContract,
        printNoteOnReceiveContract:
            printNoteOnReceiveContract ?? this.printNoteOnReceiveContract,
        printNoteOnReturnContract:
            printNoteOnReturnContract ?? this.printNoteOnReturnContract,
        printNoteOnInvoice: printNoteOnInvoice ?? this.printNoteOnInvoice,
        printNoteOnOrder: printNoteOnOrder ?? this.printNoteOnOrder,
        printNoteOnPickList: printNoteOnPickList ?? this.printNoteOnPickList,
        printNoteOnPO: printNoteOnPO ?? this.printNoteOnPO,
        printNoteOnQuote: printNoteOnQuote ?? this.printNoteOnQuote,
        printNoteOnReturnList:
            printNoteOnReturnList ?? this.printNoteOnReturnList,
        printNoteOnPoReceiveList:
            printNoteOnPoReceiveList ?? this.printNoteOnPoReceiveList,
        printNoteOnPoReturnList:
            printNoteOnPoReturnList ?? this.printNoteOnPoReturnList,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        consignmentIncomeAccountId:
            consignmentIncomeAccountId ?? this.consignmentIncomeAccountId,
        consignmentIncomeAccountNo:
            consignmentIncomeAccountNo ?? this.consignmentIncomeAccountNo,
        consignmentIncomeAccountDescription: consignmentIncomeAccountDescription ??
            this.consignmentIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription: equipmentSaleIncomeAccountDescription ??
            this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription:
            costOfGoodsSoldExpenseAccountDescription ??
                this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription: depreciationExpenseAccountDescription ??
            this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId: accumulatedDepreciationExpenseAccountId ??
            this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo:
            accumulatedDepreciationExpenseAccountNo ??
                this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ??
                this.accumulatedDepreciationExpenseAccountDescription,
        originalShowId: originalShowId ?? this.originalShowId,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        manifestShippingContainer: manifestShippingContainer ?? this.manifestShippingContainer,
        manifestStandAloneItem: manifestStandAloneItem ?? this.manifestStandAloneItem,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType {
  WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType({
    this.miscTypeId,
    this.miscType,
    this.misc,
    this.groupProfitLoss,
    this.categoryCount,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeFromJson(
          json);

  @JsonKey(name: 'MiscTypeId', includeIfNull: false)
  final String? miscTypeId;
  @JsonKey(name: 'MiscType', includeIfNull: false)
  final String? miscType;
  @JsonKey(name: 'Misc', includeIfNull: false)
  final bool? misc;
  @JsonKey(name: 'GroupProfitLoss', includeIfNull: false)
  final bool? groupProfitLoss;
  @JsonKey(name: 'CategoryCount', includeIfNull: false)
  final int? categoryCount;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType &&
            (identical(other.miscTypeId, miscTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.miscTypeId, miscTypeId)) &&
            (identical(other.miscType, miscType) ||
                const DeepCollectionEquality()
                    .equals(other.miscType, miscType)) &&
            (identical(other.misc, misc) ||
                const DeepCollectionEquality().equals(other.misc, misc)) &&
            (identical(other.groupProfitLoss, groupProfitLoss) ||
                const DeepCollectionEquality()
                    .equals(other.groupProfitLoss, groupProfitLoss)) &&
            (identical(other.categoryCount, categoryCount) ||
                const DeepCollectionEquality()
                    .equals(other.categoryCount, categoryCount)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscTypeExtension
    on WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType {
  WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType copyWith(
      {String? miscTypeId,
      String? miscType,
      bool? misc,
      bool? groupProfitLoss,
      int? categoryCount,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsMiscellaneousSettingsMiscTypeMiscType(
        miscTypeId: miscTypeId ?? this.miscTypeId,
        miscType: miscType ?? this.miscType,
        misc: misc ?? this.misc,
        groupProfitLoss: groupProfitLoss ?? this.groupProfitLoss,
        categoryCount: categoryCount ?? this.categoryCount,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsNumberFormatNumberFormat {
  WebApiModulesSettingsNumberFormatNumberFormat({
    this.numberFormatId,
    this.numberFormat,
    this.mask,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsNumberFormatNumberFormat.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsNumberFormatNumberFormatFromJson(json);

  @JsonKey(name: 'NumberFormatId', includeIfNull: false)
  final String? numberFormatId;
  @JsonKey(name: 'NumberFormat', includeIfNull: false)
  final String? numberFormat;
  @JsonKey(name: 'Mask', includeIfNull: false)
  final String? mask;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsNumberFormatNumberFormatFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsNumberFormatNumberFormatToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsNumberFormatNumberFormatToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsNumberFormatNumberFormat &&
            (identical(other.numberFormatId, numberFormatId) ||
                const DeepCollectionEquality()
                    .equals(other.numberFormatId, numberFormatId)) &&
            (identical(other.numberFormat, numberFormat) ||
                const DeepCollectionEquality()
                    .equals(other.numberFormat, numberFormat)) &&
            (identical(other.mask, mask) ||
                const DeepCollectionEquality().equals(other.mask, mask)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsNumberFormatNumberFormatExtension
    on WebApiModulesSettingsNumberFormatNumberFormat {
  WebApiModulesSettingsNumberFormatNumberFormat copyWith(
      {String? numberFormatId,
      String? numberFormat,
      String? mask,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsNumberFormatNumberFormat(
        numberFormatId: numberFormatId ?? this.numberFormatId,
        numberFormat: numberFormat ?? this.numberFormat,
        mask: mask ?? this.mask,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation {
  WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation({
    this.locationId,
    this.location,
    this.locationCode,
    this.companyName,
    this.federalId,
    this.address1,
    this.address2,
    this.city,
    this.zipCode,
    this.state,
    this.countryId,
    this.country,
    this.phone,
    this.fax,
    this.email,
    this.webAddress,
    this.remitToCompanyName,
    this.remitToAddress1,
    this.remitToAddress2,
    this.remitToCity,
    this.remitToZip,
    this.remitToState,
    this.remitToCountryId,
    this.remitToCountry,
    this.remitToPhone,
    this.remitToFax,
    this.remitToEmail,
    this.rateType,
    this.rateTypeDisplay,
    this.color,
    this.defaultPurchasePoTypeId,
    this.defaultPurchasePoType,
    this.glPrefix,
    this.glSuffix,
    this.useNumberPrefix,
    this.numberPrefix,
    this.useRequisitionNumbers,
    this.useSameNumberForQuoteAndOrder,
    this.useSameNumberForAllExportBatches,
    this.userOrderNumberAndSuffixForInvoice,
    this.useHInHiatusInvoiceNumbers,
    this.defaultCurrencyId,
    this.defaultCurrencyCode,
    this.defaultCurrency,
    this.defaultCurrencySymbol,
    this.tax1ReferenceName,
    this.tax1ReferenceNumber,
    this.tax2ReferenceName,
    this.tax2ReferenceNumber,
    this.disableCreditStatusMessages,
    this.disableCreditThroughDateMessages,
    this.disableInsuranceStatusMessages,
    this.disableInsuranceThroughDateMessages,
    this.warnIfTermsAndConditionsNotOnFile,
    this.autoApplyDepletingDepositToInvoice,
    this.depositReplacmentValuePercent,
    this.invoiceMessage,
    this.taxable,
    this.useOrderLocationByDefault,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationFromJson(
          json);

  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'Location', includeIfNull: false)
  final String? location;
  @JsonKey(name: 'LocationCode', includeIfNull: false)
  final String? locationCode;
  @JsonKey(name: 'CompanyName', includeIfNull: false)
  final String? companyName;
  @JsonKey(name: 'FederalId', includeIfNull: false)
  final String? federalId;
  @JsonKey(name: 'Address1', includeIfNull: false)
  final String? address1;
  @JsonKey(name: 'Address2', includeIfNull: false)
  final String? address2;
  @JsonKey(name: 'City', includeIfNull: false)
  final String? city;
  @JsonKey(name: 'ZipCode', includeIfNull: false)
  final String? zipCode;
  @JsonKey(name: 'State', includeIfNull: false)
  final String? state;
  @JsonKey(name: 'CountryId', includeIfNull: false)
  final String? countryId;
  @JsonKey(name: 'Country', includeIfNull: false)
  final String? country;
  @JsonKey(name: 'Phone', includeIfNull: false)
  final String? phone;
  @JsonKey(name: 'Fax', includeIfNull: false)
  final String? fax;
  @JsonKey(name: 'Email', includeIfNull: false)
  final String? email;
  @JsonKey(name: 'WebAddress', includeIfNull: false)
  final String? webAddress;
  @JsonKey(name: 'RemitToCompanyName', includeIfNull: false)
  final String? remitToCompanyName;
  @JsonKey(name: 'RemitToAddress1', includeIfNull: false)
  final String? remitToAddress1;
  @JsonKey(name: 'RemitToAddress2', includeIfNull: false)
  final String? remitToAddress2;
  @JsonKey(name: 'RemitToCity', includeIfNull: false)
  final String? remitToCity;
  @JsonKey(name: 'RemitToZip', includeIfNull: false)
  final String? remitToZip;
  @JsonKey(name: 'RemitToState', includeIfNull: false)
  final String? remitToState;
  @JsonKey(name: 'RemitToCountryId', includeIfNull: false)
  final String? remitToCountryId;
  @JsonKey(name: 'RemitToCountry', includeIfNull: false)
  final String? remitToCountry;
  @JsonKey(name: 'RemitToPhone', includeIfNull: false)
  final String? remitToPhone;
  @JsonKey(name: 'RemitToFax', includeIfNull: false)
  final String? remitToFax;
  @JsonKey(name: 'RemitToEmail', includeIfNull: false)
  final String? remitToEmail;
  @JsonKey(name: 'RateType', includeIfNull: false)
  final String? rateType;
  @JsonKey(name: 'RateTypeDisplay', includeIfNull: false)
  final String? rateTypeDisplay;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'DefaultPurchasePoTypeId', includeIfNull: false)
  final String? defaultPurchasePoTypeId;
  @JsonKey(name: 'DefaultPurchasePoType', includeIfNull: false)
  final String? defaultPurchasePoType;
  @JsonKey(name: 'GlPrefix', includeIfNull: false)
  final String? glPrefix;
  @JsonKey(name: 'GlSuffix', includeIfNull: false)
  final String? glSuffix;
  @JsonKey(name: 'UseNumberPrefix', includeIfNull: false)
  final bool? useNumberPrefix;
  @JsonKey(name: 'NumberPrefix', includeIfNull: false)
  final String? numberPrefix;
  @JsonKey(name: 'UseRequisitionNumbers', includeIfNull: false)
  final bool? useRequisitionNumbers;
  @JsonKey(name: 'UseSameNumberForQuoteAndOrder', includeIfNull: false)
  final bool? useSameNumberForQuoteAndOrder;
  @JsonKey(name: 'UseSameNumberForAllExportBatches', includeIfNull: false)
  final bool? useSameNumberForAllExportBatches;
  @JsonKey(name: 'UserOrderNumberAndSuffixForInvoice', includeIfNull: false)
  final bool? userOrderNumberAndSuffixForInvoice;
  @JsonKey(name: 'UseHInHiatusInvoiceNumbers', includeIfNull: false)
  final bool? useHInHiatusInvoiceNumbers;
  @JsonKey(name: 'DefaultCurrencyId', includeIfNull: false)
  final String? defaultCurrencyId;
  @JsonKey(name: 'DefaultCurrencyCode', includeIfNull: false)
  final String? defaultCurrencyCode;
  @JsonKey(name: 'DefaultCurrency', includeIfNull: false)
  final String? defaultCurrency;
  @JsonKey(name: 'DefaultCurrencySymbol', includeIfNull: false)
  final String? defaultCurrencySymbol;
  @JsonKey(name: 'Tax1ReferenceName', includeIfNull: false)
  final String? tax1ReferenceName;
  @JsonKey(name: 'Tax1ReferenceNumber', includeIfNull: false)
  final String? tax1ReferenceNumber;
  @JsonKey(name: 'Tax2ReferenceName', includeIfNull: false)
  final String? tax2ReferenceName;
  @JsonKey(name: 'Tax2ReferenceNumber', includeIfNull: false)
  final String? tax2ReferenceNumber;
  @JsonKey(name: 'DisableCreditStatusMessages', includeIfNull: false)
  final bool? disableCreditStatusMessages;
  @JsonKey(name: 'DisableCreditThroughDateMessages', includeIfNull: false)
  final bool? disableCreditThroughDateMessages;
  @JsonKey(name: 'DisableInsuranceStatusMessages', includeIfNull: false)
  final bool? disableInsuranceStatusMessages;
  @JsonKey(name: 'DisableInsuranceThroughDateMessages', includeIfNull: false)
  final bool? disableInsuranceThroughDateMessages;
  @JsonKey(name: 'WarnIfTermsAndConditionsNotOnFile', includeIfNull: false)
  final bool? warnIfTermsAndConditionsNotOnFile;
  @JsonKey(name: 'AutoApplyDepletingDepositToInvoice', includeIfNull: false)
  final bool? autoApplyDepletingDepositToInvoice;
  @JsonKey(name: 'DepositReplacmentValuePercent', includeIfNull: false)
  final double? depositReplacmentValuePercent;
  @JsonKey(name: 'InvoiceMessage', includeIfNull: false)
  final String? invoiceMessage;
  @JsonKey(name: 'Taxable', includeIfNull: false)
  final bool? taxable;
  @JsonKey(name: 'UseOrderLocationByDefault', includeIfNull: false)
  final bool? useOrderLocationByDefault;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.location, location) ||
                const DeepCollectionEquality()
                    .equals(other.location, location)) &&
            (identical(other.locationCode, locationCode) ||
                const DeepCollectionEquality()
                    .equals(other.locationCode, locationCode)) &&
            (identical(other.companyName, companyName) ||
                const DeepCollectionEquality()
                    .equals(other.companyName, companyName)) &&
            (identical(other.federalId, federalId) ||
                const DeepCollectionEquality()
                    .equals(other.federalId, federalId)) &&
            (identical(other.address1, address1) ||
                const DeepCollectionEquality()
                    .equals(other.address1, address1)) &&
            (identical(other.address2, address2) ||
                const DeepCollectionEquality()
                    .equals(other.address2, address2)) &&
            (identical(other.city, city) ||
                const DeepCollectionEquality().equals(other.city, city)) &&
            (identical(other.zipCode, zipCode) ||
                const DeepCollectionEquality()
                    .equals(other.zipCode, zipCode)) &&
            (identical(other.state, state) ||
                const DeepCollectionEquality().equals(other.state, state)) &&
            (identical(other.countryId, countryId) ||
                const DeepCollectionEquality()
                    .equals(other.countryId, countryId)) &&
            (identical(other.country, country) ||
                const DeepCollectionEquality()
                    .equals(other.country, country)) &&
            (identical(other.phone, phone) ||
                const DeepCollectionEquality().equals(other.phone, phone)) &&
            (identical(other.fax, fax) ||
                const DeepCollectionEquality().equals(other.fax, fax)) &&
            (identical(other.email, email) ||
                const DeepCollectionEquality().equals(other.email, email)) &&
            (identical(other.webAddress, webAddress) ||
                const DeepCollectionEquality()
                    .equals(other.webAddress, webAddress)) &&
            (identical(other.remitToCompanyName, remitToCompanyName) ||
                const DeepCollectionEquality()
                    .equals(other.remitToCompanyName, remitToCompanyName)) &&
            (identical(other.remitToAddress1, remitToAddress1) ||
                const DeepCollectionEquality()
                    .equals(other.remitToAddress1, remitToAddress1)) &&
            (identical(other.remitToAddress2, remitToAddress2) ||
                const DeepCollectionEquality().equals(other.remitToAddress2, remitToAddress2)) &&
            (identical(other.remitToCity, remitToCity) || const DeepCollectionEquality().equals(other.remitToCity, remitToCity)) &&
            (identical(other.remitToZip, remitToZip) || const DeepCollectionEquality().equals(other.remitToZip, remitToZip)) &&
            (identical(other.remitToState, remitToState) || const DeepCollectionEquality().equals(other.remitToState, remitToState)) &&
            (identical(other.remitToCountryId, remitToCountryId) || const DeepCollectionEquality().equals(other.remitToCountryId, remitToCountryId)) &&
            (identical(other.remitToCountry, remitToCountry) || const DeepCollectionEquality().equals(other.remitToCountry, remitToCountry)) &&
            (identical(other.remitToPhone, remitToPhone) || const DeepCollectionEquality().equals(other.remitToPhone, remitToPhone)) &&
            (identical(other.remitToFax, remitToFax) || const DeepCollectionEquality().equals(other.remitToFax, remitToFax)) &&
            (identical(other.remitToEmail, remitToEmail) || const DeepCollectionEquality().equals(other.remitToEmail, remitToEmail)) &&
            (identical(other.rateType, rateType) || const DeepCollectionEquality().equals(other.rateType, rateType)) &&
            (identical(other.rateTypeDisplay, rateTypeDisplay) || const DeepCollectionEquality().equals(other.rateTypeDisplay, rateTypeDisplay)) &&
            (identical(other.color, color) || const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.defaultPurchasePoTypeId, defaultPurchasePoTypeId) || const DeepCollectionEquality().equals(other.defaultPurchasePoTypeId, defaultPurchasePoTypeId)) &&
            (identical(other.defaultPurchasePoType, defaultPurchasePoType) || const DeepCollectionEquality().equals(other.defaultPurchasePoType, defaultPurchasePoType)) &&
            (identical(other.glPrefix, glPrefix) || const DeepCollectionEquality().equals(other.glPrefix, glPrefix)) &&
            (identical(other.glSuffix, glSuffix) || const DeepCollectionEquality().equals(other.glSuffix, glSuffix)) &&
            (identical(other.useNumberPrefix, useNumberPrefix) || const DeepCollectionEquality().equals(other.useNumberPrefix, useNumberPrefix)) &&
            (identical(other.numberPrefix, numberPrefix) || const DeepCollectionEquality().equals(other.numberPrefix, numberPrefix)) &&
            (identical(other.useRequisitionNumbers, useRequisitionNumbers) || const DeepCollectionEquality().equals(other.useRequisitionNumbers, useRequisitionNumbers)) &&
            (identical(other.useSameNumberForQuoteAndOrder, useSameNumberForQuoteAndOrder) || const DeepCollectionEquality().equals(other.useSameNumberForQuoteAndOrder, useSameNumberForQuoteAndOrder)) &&
            (identical(other.useSameNumberForAllExportBatches, useSameNumberForAllExportBatches) || const DeepCollectionEquality().equals(other.useSameNumberForAllExportBatches, useSameNumberForAllExportBatches)) &&
            (identical(other.userOrderNumberAndSuffixForInvoice, userOrderNumberAndSuffixForInvoice) || const DeepCollectionEquality().equals(other.userOrderNumberAndSuffixForInvoice, userOrderNumberAndSuffixForInvoice)) &&
            (identical(other.useHInHiatusInvoiceNumbers, useHInHiatusInvoiceNumbers) || const DeepCollectionEquality().equals(other.useHInHiatusInvoiceNumbers, useHInHiatusInvoiceNumbers)) &&
            (identical(other.defaultCurrencyId, defaultCurrencyId) || const DeepCollectionEquality().equals(other.defaultCurrencyId, defaultCurrencyId)) &&
            (identical(other.defaultCurrencyCode, defaultCurrencyCode) || const DeepCollectionEquality().equals(other.defaultCurrencyCode, defaultCurrencyCode)) &&
            (identical(other.defaultCurrency, defaultCurrency) || const DeepCollectionEquality().equals(other.defaultCurrency, defaultCurrency)) &&
            (identical(other.defaultCurrencySymbol, defaultCurrencySymbol) || const DeepCollectionEquality().equals(other.defaultCurrencySymbol, defaultCurrencySymbol)) &&
            (identical(other.tax1ReferenceName, tax1ReferenceName) || const DeepCollectionEquality().equals(other.tax1ReferenceName, tax1ReferenceName)) &&
            (identical(other.tax1ReferenceNumber, tax1ReferenceNumber) || const DeepCollectionEquality().equals(other.tax1ReferenceNumber, tax1ReferenceNumber)) &&
            (identical(other.tax2ReferenceName, tax2ReferenceName) || const DeepCollectionEquality().equals(other.tax2ReferenceName, tax2ReferenceName)) &&
            (identical(other.tax2ReferenceNumber, tax2ReferenceNumber) || const DeepCollectionEquality().equals(other.tax2ReferenceNumber, tax2ReferenceNumber)) &&
            (identical(other.disableCreditStatusMessages, disableCreditStatusMessages) || const DeepCollectionEquality().equals(other.disableCreditStatusMessages, disableCreditStatusMessages)) &&
            (identical(other.disableCreditThroughDateMessages, disableCreditThroughDateMessages) || const DeepCollectionEquality().equals(other.disableCreditThroughDateMessages, disableCreditThroughDateMessages)) &&
            (identical(other.disableInsuranceStatusMessages, disableInsuranceStatusMessages) || const DeepCollectionEquality().equals(other.disableInsuranceStatusMessages, disableInsuranceStatusMessages)) &&
            (identical(other.disableInsuranceThroughDateMessages, disableInsuranceThroughDateMessages) || const DeepCollectionEquality().equals(other.disableInsuranceThroughDateMessages, disableInsuranceThroughDateMessages)) &&
            (identical(other.warnIfTermsAndConditionsNotOnFile, warnIfTermsAndConditionsNotOnFile) || const DeepCollectionEquality().equals(other.warnIfTermsAndConditionsNotOnFile, warnIfTermsAndConditionsNotOnFile)) &&
            (identical(other.autoApplyDepletingDepositToInvoice, autoApplyDepletingDepositToInvoice) || const DeepCollectionEquality().equals(other.autoApplyDepletingDepositToInvoice, autoApplyDepletingDepositToInvoice)) &&
            (identical(other.depositReplacmentValuePercent, depositReplacmentValuePercent) || const DeepCollectionEquality().equals(other.depositReplacmentValuePercent, depositReplacmentValuePercent)) &&
            (identical(other.invoiceMessage, invoiceMessage) || const DeepCollectionEquality().equals(other.invoiceMessage, invoiceMessage)) &&
            (identical(other.taxable, taxable) || const DeepCollectionEquality().equals(other.taxable, taxable)) &&
            (identical(other.useOrderLocationByDefault, useOrderLocationByDefault) || const DeepCollectionEquality().equals(other.useOrderLocationByDefault, useOrderLocationByDefault)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocationExtension
    on WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation {
  WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation
      copyWith(
          {String? locationId,
          String? location,
          String? locationCode,
          String? companyName,
          String? federalId,
          String? address1,
          String? address2,
          String? city,
          String? zipCode,
          String? state,
          String? countryId,
          String? country,
          String? phone,
          String? fax,
          String? email,
          String? webAddress,
          String? remitToCompanyName,
          String? remitToAddress1,
          String? remitToAddress2,
          String? remitToCity,
          String? remitToZip,
          String? remitToState,
          String? remitToCountryId,
          String? remitToCountry,
          String? remitToPhone,
          String? remitToFax,
          String? remitToEmail,
          String? rateType,
          String? rateTypeDisplay,
          String? color,
          String? defaultPurchasePoTypeId,
          String? defaultPurchasePoType,
          String? glPrefix,
          String? glSuffix,
          bool? useNumberPrefix,
          String? numberPrefix,
          bool? useRequisitionNumbers,
          bool? useSameNumberForQuoteAndOrder,
          bool? useSameNumberForAllExportBatches,
          bool? userOrderNumberAndSuffixForInvoice,
          bool? useHInHiatusInvoiceNumbers,
          String? defaultCurrencyId,
          String? defaultCurrencyCode,
          String? defaultCurrency,
          String? defaultCurrencySymbol,
          String? tax1ReferenceName,
          String? tax1ReferenceNumber,
          String? tax2ReferenceName,
          String? tax2ReferenceNumber,
          bool? disableCreditStatusMessages,
          bool? disableCreditThroughDateMessages,
          bool? disableInsuranceStatusMessages,
          bool? disableInsuranceThroughDateMessages,
          bool? warnIfTermsAndConditionsNotOnFile,
          bool? autoApplyDepletingDepositToInvoice,
          double? depositReplacmentValuePercent,
          String? invoiceMessage,
          bool? taxable,
          bool? useOrderLocationByDefault,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOfficeLocationSettingsOfficeLocationOfficeLocation(
        locationId: locationId ?? this.locationId,
        location: location ?? this.location,
        locationCode: locationCode ?? this.locationCode,
        companyName: companyName ?? this.companyName,
        federalId: federalId ?? this.federalId,
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        city: city ?? this.city,
        zipCode: zipCode ?? this.zipCode,
        state: state ?? this.state,
        countryId: countryId ?? this.countryId,
        country: country ?? this.country,
        phone: phone ?? this.phone,
        fax: fax ?? this.fax,
        email: email ?? this.email,
        webAddress: webAddress ?? this.webAddress,
        remitToCompanyName: remitToCompanyName ?? this.remitToCompanyName,
        remitToAddress1: remitToAddress1 ?? this.remitToAddress1,
        remitToAddress2: remitToAddress2 ?? this.remitToAddress2,
        remitToCity: remitToCity ?? this.remitToCity,
        remitToZip: remitToZip ?? this.remitToZip,
        remitToState: remitToState ?? this.remitToState,
        remitToCountryId: remitToCountryId ?? this.remitToCountryId,
        remitToCountry: remitToCountry ?? this.remitToCountry,
        remitToPhone: remitToPhone ?? this.remitToPhone,
        remitToFax: remitToFax ?? this.remitToFax,
        remitToEmail: remitToEmail ?? this.remitToEmail,
        rateType: rateType ?? this.rateType,
        rateTypeDisplay: rateTypeDisplay ?? this.rateTypeDisplay,
        color: color ?? this.color,
        defaultPurchasePoTypeId:
            defaultPurchasePoTypeId ?? this.defaultPurchasePoTypeId,
        defaultPurchasePoType:
            defaultPurchasePoType ?? this.defaultPurchasePoType,
        glPrefix: glPrefix ?? this.glPrefix,
        glSuffix: glSuffix ?? this.glSuffix,
        useNumberPrefix: useNumberPrefix ?? this.useNumberPrefix,
        numberPrefix: numberPrefix ?? this.numberPrefix,
        useRequisitionNumbers:
            useRequisitionNumbers ?? this.useRequisitionNumbers,
        useSameNumberForQuoteAndOrder:
            useSameNumberForQuoteAndOrder ?? this.useSameNumberForQuoteAndOrder,
        useSameNumberForAllExportBatches: useSameNumberForAllExportBatches ??
            this.useSameNumberForAllExportBatches,
        userOrderNumberAndSuffixForInvoice:
            userOrderNumberAndSuffixForInvoice ??
                this.userOrderNumberAndSuffixForInvoice,
        useHInHiatusInvoiceNumbers:
            useHInHiatusInvoiceNumbers ?? this.useHInHiatusInvoiceNumbers,
        defaultCurrencyId: defaultCurrencyId ?? this.defaultCurrencyId,
        defaultCurrencyCode: defaultCurrencyCode ?? this.defaultCurrencyCode,
        defaultCurrency: defaultCurrency ?? this.defaultCurrency,
        defaultCurrencySymbol:
            defaultCurrencySymbol ?? this.defaultCurrencySymbol,
        tax1ReferenceName: tax1ReferenceName ?? this.tax1ReferenceName,
        tax1ReferenceNumber: tax1ReferenceNumber ?? this.tax1ReferenceNumber,
        tax2ReferenceName: tax2ReferenceName ?? this.tax2ReferenceName,
        tax2ReferenceNumber: tax2ReferenceNumber ?? this.tax2ReferenceNumber,
        disableCreditStatusMessages:
            disableCreditStatusMessages ?? this.disableCreditStatusMessages,
        disableCreditThroughDateMessages: disableCreditThroughDateMessages ??
            this.disableCreditThroughDateMessages,
        disableInsuranceStatusMessages: disableInsuranceStatusMessages ??
            this.disableInsuranceStatusMessages,
        disableInsuranceThroughDateMessages:
            disableInsuranceThroughDateMessages ??
                this.disableInsuranceThroughDateMessages,
        warnIfTermsAndConditionsNotOnFile: warnIfTermsAndConditionsNotOnFile ??
            this.warnIfTermsAndConditionsNotOnFile,
        autoApplyDepletingDepositToInvoice:
            autoApplyDepletingDepositToInvoice ??
                this.autoApplyDepletingDepositToInvoice,
        depositReplacmentValuePercent:
            depositReplacmentValuePercent ?? this.depositReplacmentValuePercent,
        invoiceMessage: invoiceMessage ?? this.invoiceMessage,
        taxable: taxable ?? this.taxable,
        useOrderLocationByDefault:
            useOrderLocationByDefault ?? this.useOrderLocationByDefault,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderItemRecTypeOrderItemRecType {
  WebApiModulesSettingsOrderItemRecTypeOrderItemRecType({
    this.recType,
    this.recTypeDisplay,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOrderItemRecTypeOrderItemRecType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeFromJson(json);

  @JsonKey(name: 'RecType', includeIfNull: false)
  final String? recType;
  @JsonKey(name: 'RecTypeDisplay', includeIfNull: false)
  final String? recTypeDisplay;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderItemRecTypeOrderItemRecType &&
            (identical(other.recType, recType) ||
                const DeepCollectionEquality()
                    .equals(other.recType, recType)) &&
            (identical(other.recTypeDisplay, recTypeDisplay) ||
                const DeepCollectionEquality()
                    .equals(other.recTypeDisplay, recTypeDisplay)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOrderItemRecTypeOrderItemRecTypeExtension
    on WebApiModulesSettingsOrderItemRecTypeOrderItemRecType {
  WebApiModulesSettingsOrderItemRecTypeOrderItemRecType copyWith(
      {String? recType,
      String? recTypeDisplay,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOrderItemRecTypeOrderItemRecType(
        recType: recType ?? this.recType,
        recTypeDisplay: recTypeDisplay ?? this.recTypeDisplay,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason {
  WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason({
    this.discountReasonId,
    this.discountReason,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonFromJson(
          json);

  @JsonKey(name: 'DiscountReasonId', includeIfNull: false)
  final String? discountReasonId;
  @JsonKey(name: 'DiscountReason', includeIfNull: false)
  final String? discountReason;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason &&
            (identical(other.discountReasonId, discountReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.discountReasonId, discountReasonId)) &&
            (identical(other.discountReason, discountReason) ||
                const DeepCollectionEquality()
                    .equals(other.discountReason, discountReason)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReasonExtension
    on WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason {
  WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason copyWith(
      {String? discountReasonId,
      String? discountReason,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOrderSettingsDiscountReasonDiscountReason(
        discountReasonId: discountReasonId ?? this.discountReasonId,
        discountReason: discountReason ?? this.discountReason,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment {
  WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment({
    this.marketSegmentId,
    this.marketSegment,
    this.marketTypeId,
    this.marketType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentFromJson(
          json);

  @JsonKey(name: 'MarketSegmentId', includeIfNull: false)
  final String? marketSegmentId;
  @JsonKey(name: 'MarketSegment', includeIfNull: false)
  final String? marketSegment;
  @JsonKey(name: 'MarketTypeId', includeIfNull: false)
  final String? marketTypeId;
  @JsonKey(name: 'MarketType', includeIfNull: false)
  final String? marketType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment &&
            (identical(other.marketSegmentId, marketSegmentId) ||
                const DeepCollectionEquality()
                    .equals(other.marketSegmentId, marketSegmentId)) &&
            (identical(other.marketSegment, marketSegment) ||
                const DeepCollectionEquality()
                    .equals(other.marketSegment, marketSegment)) &&
            (identical(other.marketTypeId, marketTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.marketTypeId, marketTypeId)) &&
            (identical(other.marketType, marketType) ||
                const DeepCollectionEquality()
                    .equals(other.marketType, marketType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegmentExtension
    on WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment {
  WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment copyWith(
      {String? marketSegmentId,
      String? marketSegment,
      String? marketTypeId,
      String? marketType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOrderSettingsMarketSegmentMarketSegment(
        marketSegmentId: marketSegmentId ?? this.marketSegmentId,
        marketSegment: marketSegment ?? this.marketSegment,
        marketTypeId: marketTypeId ?? this.marketTypeId,
        marketType: marketType ?? this.marketType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderSettingsMarketTypeMarketType {
  WebApiModulesSettingsOrderSettingsMarketTypeMarketType({
    this.marketTypeId,
    this.marketType,
    this.exportCode,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOrderSettingsMarketTypeMarketType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderSettingsMarketTypeMarketTypeFromJson(json);

  @JsonKey(name: 'MarketTypeId', includeIfNull: false)
  final String? marketTypeId;
  @JsonKey(name: 'MarketType', includeIfNull: false)
  final String? marketType;
  @JsonKey(name: 'ExportCode', includeIfNull: false)
  final String? exportCode;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderSettingsMarketTypeMarketTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderSettingsMarketTypeMarketTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderSettingsMarketTypeMarketTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderSettingsMarketTypeMarketType &&
            (identical(other.marketTypeId, marketTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.marketTypeId, marketTypeId)) &&
            (identical(other.marketType, marketType) ||
                const DeepCollectionEquality()
                    .equals(other.marketType, marketType)) &&
            (identical(other.exportCode, exportCode) ||
                const DeepCollectionEquality()
                    .equals(other.exportCode, exportCode)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOrderSettingsMarketTypeMarketTypeExtension
    on WebApiModulesSettingsOrderSettingsMarketTypeMarketType {
  WebApiModulesSettingsOrderSettingsMarketTypeMarketType copyWith(
      {String? marketTypeId,
      String? marketType,
      String? exportCode,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOrderSettingsMarketTypeMarketType(
        marketTypeId: marketTypeId ?? this.marketTypeId,
        marketType: marketType ?? this.marketType,
        exportCode: exportCode ?? this.exportCode,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation {
  WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation({
    this.orderLocationId,
    this.orderLocation,
    this.location,
    this.locationId,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderSettingsOrderLocationOrderLocationFromJson(
          json);

  @JsonKey(name: 'OrderLocationId', includeIfNull: false)
  final String? orderLocationId;
  @JsonKey(name: 'OrderLocation', includeIfNull: false)
  final String? orderLocation;
  @JsonKey(name: 'Location', includeIfNull: false)
  final String? location;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderSettingsOrderLocationOrderLocationFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderSettingsOrderLocationOrderLocationToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderSettingsOrderLocationOrderLocationToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation &&
            (identical(other.orderLocationId, orderLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.orderLocationId, orderLocationId)) &&
            (identical(other.orderLocation, orderLocation) ||
                const DeepCollectionEquality()
                    .equals(other.orderLocation, orderLocation)) &&
            (identical(other.location, location) ||
                const DeepCollectionEquality()
                    .equals(other.location, location)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOrderSettingsOrderLocationOrderLocationExtension
    on WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation {
  WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation copyWith(
      {String? orderLocationId,
      String? orderLocation,
      String? location,
      String? locationId,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOrderSettingsOrderLocationOrderLocation(
        orderLocationId: orderLocationId ?? this.orderLocationId,
        orderLocation: orderLocation ?? this.orderLocation,
        location: location ?? this.location,
        locationId: locationId ?? this.locationId,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo {
  WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo({
    this.orderSetNoId,
    this.orderSetNo,
    this.description,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoFromJson(json);

  @JsonKey(name: 'OrderSetNoId', includeIfNull: false)
  final String? orderSetNoId;
  @JsonKey(name: 'OrderSetNo', includeIfNull: false)
  final String? orderSetNo;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo &&
            (identical(other.orderSetNoId, orderSetNoId) ||
                const DeepCollectionEquality()
                    .equals(other.orderSetNoId, orderSetNoId)) &&
            (identical(other.orderSetNo, orderSetNo) ||
                const DeepCollectionEquality()
                    .equals(other.orderSetNo, orderSetNo)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNoExtension
    on WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo {
  WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo copyWith(
      {String? orderSetNoId,
      String? orderSetNo,
      String? description,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOrderSettingsOrderSetNoOrderSetNo(
        orderSetNoId: orderSetNoId ?? this.orderSetNoId,
        orderSetNo: orderSetNo ?? this.orderSetNo,
        description: description ?? this.description,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderSettingsOrderTypeOrderType {
  WebApiModulesSettingsOrderSettingsOrderTypeOrderType({
    this.orderTypeId,
    this.orderType,
    this.ordType,
    this.defaultPickTime,
    this.defaultFromTime,
    this.defaultToTime,
    this.dailyScheduleDefaultStartTime,
    this.dailyScheduleDefaultStopTime,
    this.isMasterSubOrderType,
    this.combineActivityTabs,
    this.defaultManualSort,
    this.determineQuantitiesToBillBasedOn,
    this.allowNesting,
    this.rentalShowICode,
    this.rentalICodeWidth,
    this.rentalShowDescription,
    this.rentalDescriptionWidth,
    this.rentalShowPickDate,
    this.rentalShowPickTime,
    this.rentalShowFromDate,
    this.rentalShowFromTime,
    this.rentalShowToDate,
    this.rentalShowToTime,
    this.rentalShowBillablePeriods,
    this.rentalShowEpisodes,
    this.rentalShowSubQuantity,
    this.rentalShowAvailableQuantity,
    this.rentalShowConflictDate,
    this.rentalShowAvailableQuantityRegion,
    this.rentalShowConflictDateRegion,
    this.rentalShowAvailableQuantityAllWarehouses,
    this.rentalShowConflictDateAllWarehouses,
    this.rentalShowReservedItems,
    this.rentalShowConsignmentQuantity,
    this.rentalShowConsignmentAvailableQuantity,
    this.rentalShowConsignmentConflictDate,
    this.rentalShowRate,
    this.rentalShowDaysPerWeek,
    this.rentalShowPremiumPercent,
    this.rentalShowUnit,
    this.rentalShowCost,
    this.rentalShowPeriodCostExtended,
    this.rentalShowDiscountPercent,
    this.rentalShowMarkupPercent,
    this.rentalShowMarginPercent,
    this.rentalShowUnitDiscountAmount,
    this.rentalShowUnitExtended,
    this.rentalShowWeeklyDiscountAmount,
    this.rentalShowWeeklyExtended,
    this.rentalShowEpisodeExtended,
    this.rentalShowEpisodeDiscountAmount,
    this.rentalShowMonthlyDiscountAmount,
    this.rentalShowMonthlyExtended,
    this.rentalShowPeriodDiscountAmount,
    this.rentalShowPeriodExtended,
    this.rentalShowWarehouse,
    this.rentalShowTaxable,
    this.rentalShowNotes,
    this.rentalShowReturnToWarehouse,
    this.rentalDateStamp,
    this.allowRoundTripRentals,
    this.salesShowICode,
    this.salesICodeWidth,
    this.salesShowDescription,
    this.salesDescriptionWidth,
    this.salesShowManufacturerPartNumber,
    this.salesManufacturerPartNumberWidth,
    this.salesShowPickDate,
    this.salesShowPickTime,
    this.salesShowFromDate,
    this.salesShowFromTime,
    this.salesShowSubQuantity,
    this.salesShowCost,
    this.salesShowRate,
    this.salesShowAvailableQuantity,
    this.salesShowConflictDate,
    this.salesShowAvailableQuantityRegion,
    this.salesShowConflictDateRegion,
    this.salesShowAvailableQuantityAllWarehouses,
    this.salesShowConflictDateAllWarehouses,
    this.salesShowMarkupPercent,
    this.salesShowMarginPercent,
    this.salesShowUnit,
    this.salesShowPeriodCostExtended,
    this.salesShowDiscountPercent,
    this.salesShowUnitDiscountAmount,
    this.salesShowUnitExtended,
    this.salesShowPeriodDiscountAmount,
    this.salesShowPeriodExtended,
    this.salesShowVariancePercent,
    this.salesShowVarianceExtended,
    this.salesShowWarehouse,
    this.salesShowTaxable,
    this.salesShowNotes,
    this.salesDateStamp,
    this.salesInventoryPrice,
    this.salesInventoryCost,
    this.facilityShowDescription,
    this.facilityDescriptionWidth,
    this.facilityShowFromDate,
    this.facilityShowFromTime,
    this.facilityShowToDate,
    this.facilityShowToTime,
    this.facilityShowWeeksAndDays,
    this.facilityShowMonthsAndDays,
    this.facilityShowBillablePeriods,
    this.facilityShowRate,
    this.facilityShowDaysPerWeek,
    this.facilityShowDiscountPercent,
    this.facilityShowSplit,
    this.facilityShowUnit,
    this.facilityShowUnitDiscountAmount,
    this.facilityShowUnitExtended,
    this.facilityShowWeeklyDiscountAmount,
    this.facilityShowWeeklyExtended,
    this.facilityShowMonthlyDiscountAmount,
    this.facilityShowMonthlyExtended,
    this.facilityShowPeriodDiscountAmount,
    this.facilityShowPeriodExtended,
    this.facilityShowTaxable,
    this.facilityShowNotes,
    this.facilityDateStamp,
    this.facilityDescription,
    this.vehicleShowDescription,
    this.vehicleDescriptionWidth,
    this.vehicleShowVehicleNumber,
    this.vehicleShowPickDate,
    this.vehicleShowPickTime,
    this.vehicleShowFromDate,
    this.vehicleShowFromTime,
    this.vehicleShowToDate,
    this.vehicleShowToTime,
    this.vehicleShowBillablePeriods,
    this.vehicleShowSubQuantity,
    this.vehicleShowAvailableQuantity,
    this.vehicleShowConflictDate,
    this.vehicleShowUnit,
    this.vehicleShowRate,
    this.vehicleShowDaysPerWeek,
    this.vehicleShowCost,
    this.vehicleShowWeeklyCostExtended,
    this.vehicleShowMonthlyCostExtended,
    this.vehicleShowPeriodCostExtended,
    this.vehicleShowDiscountPercent,
    this.vehicleShowUnitDiscountAmount,
    this.vehicleShowUnitExtended,
    this.vehicleShowWeeklyDiscountAmount,
    this.vehicleShowWeeklyExtended,
    this.vehicleShowMonthlyDiscountAmount,
    this.vehicleShowMonthlyExtended,
    this.vehicleShowPeriodDiscountAmount,
    this.vehicleShowPeriodExtended,
    this.vehicleShowWarehouse,
    this.vehicleShowReturnToWarehouse,
    this.vehicleShowTaxable,
    this.vehicleShowNotes,
    this.vehicleDateStamp,
    this.laborShowICode,
    this.laborICodeWidth,
    this.laborShowDescription,
    this.laborDescriptionWidth,
    this.laborShowOrderActivity,
    this.laborShowCrewName,
    this.laborShowFromDate,
    this.laborShowFromTime,
    this.laborShowToDate,
    this.laborShowToTime,
    this.laborShowBillablePeriods,
    this.laborShowHours,
    this.laborShowSubQuantity,
    this.laborShowCost,
    this.laborShowRate,
    this.laborShowPeriodCostExtended,
    this.laborShowDiscountPercent,
    this.laborShowUnit,
    this.laborShowUnitDiscountAmount,
    this.laborShowUnitExtended,
    this.laborShowWeeklyDiscountAmount,
    this.laborShowWeeklyExtended,
    this.laborShowMonthlyDiscountAmount,
    this.laborShowMonthlyExtended,
    this.laborShowPeriodDiscountAmount,
    this.laborShowPeriodExtended,
    this.laborShowWarehouse,
    this.laborShowTaxable,
    this.laborShowNotes,
    this.laborDateStamp,
    this.hideCrewBreaks,
    this.break1Paid,
    this.break2Paid,
    this.break3Paid,
    this.miscShowICode,
    this.miscICodeWidth,
    this.miscShowDescription,
    this.miscDescriptionWidth,
    this.miscShowFromDate,
    this.miscShowFromTime,
    this.miscShowToDate,
    this.miscShowToTime,
    this.miscShowBillablePeriods,
    this.miscShowSubQuantity,
    this.miscShowWeeksAndDays,
    this.miscShowMonthsAndDays,
    this.miscShowUnit,
    this.miscShowRate,
    this.miscShowCost,
    this.miscShowPeriodCostExtended,
    this.miscShowDiscountPercent,
    this.miscShowUnitDiscountAmount,
    this.miscShowUnitExtended,
    this.miscShowWeeklyDiscountAmount,
    this.miscShowWeeklyExtended,
    this.miscShowMonthlyDiscountAmount,
    this.miscShowMonthlyExtended,
    this.miscShowPeriodDiscountAmount,
    this.miscShowPeriodExtended,
    this.miscShowWarehouse,
    this.miscShowTaxable,
    this.miscShowNotes,
    this.miscDateStamp,
    this.rentalSaleShowBarCode,
    this.rentalSaleShowSerialNumber,
    this.rentalSaleShowICode,
    this.rentalSaleICodeWidth,
    this.rentalSaleShowDescription,
    this.rentalSaleDescriptionWidth,
    this.rentalSaleShowPickDate,
    this.rentalSaleShowPickTime,
    this.rentalSaleShowAvailableQuantity,
    this.rentalSaleShowConflictDate,
    this.rentalSaleShowUnit,
    this.rentalSaleShowRate,
    this.rentalSaleShowCost,
    this.rentalSaleShowPeriodCostExtended,
    this.rentalSaleShowDiscountPercent,
    this.rentalSaleShowUnitDiscountAmount,
    this.rentalSaleShowUnitExtended,
    this.rentalSaleShowPeriodDiscountAmount,
    this.rentalSaleShowPeriodExtended,
    this.rentalSaleShowWarehouse,
    this.rentalSaleShowTaxable,
    this.rentalSaleShowNotes,
    this.rentalSaleDateStamp,
    this.lossAndDamageShowOrderNumber,
    this.lossAndDamageShowRepairOrderNumber,
    this.lossAndDamageShowBarCode,
    this.lossAndDamageShowSerialNumber,
    this.lossAndDamageShowICode,
    this.lossAndDamageICodeWidth,
    this.lossAndDamageShowDescription,
    this.lossAndDamageDescriptionWidth,
    this.lossAndDamageShowUnit,
    this.lossAndDamageShowRate,
    this.lossAndDamageShowCost,
    this.lossAndDamageShowDiscountPercent,
    this.lossAndDamageShowUnitDiscountAmount,
    this.lossAndDamageShowUnitExtended,
    this.lossAndDamageShowPeriodDiscountAmount,
    this.lossAndDamageShowPeriodExtended,
    this.lossAndDamageShowWarehouse,
    this.lossAndDamageShowTaxable,
    this.lossAndDamageShowNotes,
    this.lossAndDamageDateStamp,
    this.addInstallationAndStrikeFee,
    this.installationAndStrikeFeeRateId,
    this.installationAndStrikeFeeICode,
    this.installationAndStrikeFeeDescription,
    this.installationAndStrikeFeePercent,
    this.installationAndStrikeFeeBasedOn,
    this.addManagementAndServiceFee,
    this.managementAndServiceFeeRateId,
    this.managementAndServiceFeeICode,
    this.managementAndServiceFeeDescription,
    this.managementAndServiceFeePercent,
    this.managementAndServiceFeeBasedOn,
    this.defaultRentalSalePrice,
    this.quikPayDiscount,
    this.quikPayDiscountType,
    this.quikPayDiscountDays,
    this.quikPayDiscountPercent,
    this.quikPayDiscountExcludeSubs,
    this.quikConfirmDiscount,
    this.quikConfirmDiscountPercent,
    this.quikConfirmDiscountDays,
    this.disableCostGl,
    this.excludeFromTopSalesDashboard,
    this.separatePackageOnQuoteOrder,
    this.orderby,
    this.subAllShortagesSubMiscellaneous,
    this.inactive,
    this.combinedShowFields,
    this.rentalShowFields,
    this.salesShowFields,
    this.miscShowFields,
    this.laborShowFields,
    this.rentalSaleShowFields,
    this.lossAndDamageShowFields,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOrderSettingsOrderTypeOrderType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderSettingsOrderTypeOrderTypeFromJson(json);

  @JsonKey(name: 'OrderTypeId', includeIfNull: false)
  final String? orderTypeId;
  @JsonKey(name: 'OrderType', includeIfNull: false)
  final String? orderType;
  @JsonKey(name: 'OrdType', includeIfNull: false)
  final String? ordType;
  @JsonKey(name: 'DefaultPickTime', includeIfNull: false)
  final String? defaultPickTime;
  @JsonKey(name: 'DefaultFromTime', includeIfNull: false)
  final String? defaultFromTime;
  @JsonKey(name: 'DefaultToTime', includeIfNull: false)
  final String? defaultToTime;
  @JsonKey(name: 'DailyScheduleDefaultStartTime', includeIfNull: false)
  final String? dailyScheduleDefaultStartTime;
  @JsonKey(name: 'DailyScheduleDefaultStopTime', includeIfNull: false)
  final String? dailyScheduleDefaultStopTime;
  @JsonKey(name: 'IsMasterSubOrderType', includeIfNull: false)
  final bool? isMasterSubOrderType;
  @JsonKey(name: 'CombineActivityTabs', includeIfNull: false)
  final bool? combineActivityTabs;
  @JsonKey(name: 'DefaultManualSort', includeIfNull: false)
  final bool? defaultManualSort;
  @JsonKey(name: 'DetermineQuantitiesToBillBasedOn', includeIfNull: false)
  final String? determineQuantitiesToBillBasedOn;
  @JsonKey(name: 'AllowNesting', includeIfNull: false)
  final bool? allowNesting;
  @JsonKey(name: 'RentalShowICode', includeIfNull: false)
  final bool? rentalShowICode;
  @JsonKey(name: 'RentalICodeWidth', includeIfNull: false)
  final int? rentalICodeWidth;
  @JsonKey(name: 'RentalShowDescription', includeIfNull: false)
  final bool? rentalShowDescription;
  @JsonKey(name: 'RentalDescriptionWidth', includeIfNull: false)
  final int? rentalDescriptionWidth;
  @JsonKey(name: 'RentalShowPickDate', includeIfNull: false)
  final bool? rentalShowPickDate;
  @JsonKey(name: 'RentalShowPickTime', includeIfNull: false)
  final bool? rentalShowPickTime;
  @JsonKey(name: 'RentalShowFromDate', includeIfNull: false)
  final bool? rentalShowFromDate;
  @JsonKey(name: 'RentalShowFromTime', includeIfNull: false)
  final bool? rentalShowFromTime;
  @JsonKey(name: 'RentalShowToDate', includeIfNull: false)
  final bool? rentalShowToDate;
  @JsonKey(name: 'RentalShowToTime', includeIfNull: false)
  final bool? rentalShowToTime;
  @JsonKey(name: 'RentalShowBillablePeriods', includeIfNull: false)
  final bool? rentalShowBillablePeriods;
  @JsonKey(name: 'RentalShowEpisodes', includeIfNull: false)
  final bool? rentalShowEpisodes;
  @JsonKey(name: 'RentalShowSubQuantity', includeIfNull: false)
  final bool? rentalShowSubQuantity;
  @JsonKey(name: 'RentalShowAvailableQuantity', includeIfNull: false)
  final bool? rentalShowAvailableQuantity;
  @JsonKey(name: 'RentalShowConflictDate', includeIfNull: false)
  final bool? rentalShowConflictDate;
  @JsonKey(name: 'RentalShowAvailableQuantityRegion', includeIfNull: false)
  final bool? rentalShowAvailableQuantityRegion;
  @JsonKey(name: 'RentalShowConflictDateRegion', includeIfNull: false)
  final bool? rentalShowConflictDateRegion;
  @JsonKey(
      name: 'RentalShowAvailableQuantityAllWarehouses', includeIfNull: false)
  final bool? rentalShowAvailableQuantityAllWarehouses;
  @JsonKey(name: 'RentalShowConflictDateAllWarehouses', includeIfNull: false)
  final bool? rentalShowConflictDateAllWarehouses;
  @JsonKey(name: 'RentalShowReservedItems', includeIfNull: false)
  final bool? rentalShowReservedItems;
  @JsonKey(name: 'RentalShowConsignmentQuantity', includeIfNull: false)
  final bool? rentalShowConsignmentQuantity;
  @JsonKey(name: 'RentalShowConsignmentAvailableQuantity', includeIfNull: false)
  final bool? rentalShowConsignmentAvailableQuantity;
  @JsonKey(name: 'RentalShowConsignmentConflictDate', includeIfNull: false)
  final bool? rentalShowConsignmentConflictDate;
  @JsonKey(name: 'RentalShowRate', includeIfNull: false)
  final bool? rentalShowRate;
  @JsonKey(name: 'RentalShowDaysPerWeek', includeIfNull: false)
  final bool? rentalShowDaysPerWeek;
  @JsonKey(name: 'RentalShowPremiumPercent', includeIfNull: false)
  final bool? rentalShowPremiumPercent;
  @JsonKey(name: 'RentalShowUnit', includeIfNull: false)
  final bool? rentalShowUnit;
  @JsonKey(name: 'RentalShowCost', includeIfNull: false)
  final bool? rentalShowCost;
  @JsonKey(name: 'RentalShowPeriodCostExtended', includeIfNull: false)
  final bool? rentalShowPeriodCostExtended;
  @JsonKey(name: 'RentalShowDiscountPercent', includeIfNull: false)
  final bool? rentalShowDiscountPercent;
  @JsonKey(name: 'RentalShowMarkupPercent', includeIfNull: false)
  final bool? rentalShowMarkupPercent;
  @JsonKey(name: 'RentalShowMarginPercent', includeIfNull: false)
  final bool? rentalShowMarginPercent;
  @JsonKey(name: 'RentalShowUnitDiscountAmount', includeIfNull: false)
  final bool? rentalShowUnitDiscountAmount;
  @JsonKey(name: 'RentalShowUnitExtended', includeIfNull: false)
  final bool? rentalShowUnitExtended;
  @JsonKey(name: 'RentalShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? rentalShowWeeklyDiscountAmount;
  @JsonKey(name: 'RentalShowWeeklyExtended', includeIfNull: false)
  final bool? rentalShowWeeklyExtended;
  @JsonKey(name: 'RentalShowEpisodeExtended', includeIfNull: false)
  final bool? rentalShowEpisodeExtended;
  @JsonKey(name: 'RentalShowEpisodeDiscountAmount', includeIfNull: false)
  final bool? rentalShowEpisodeDiscountAmount;
  @JsonKey(name: 'RentalShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? rentalShowMonthlyDiscountAmount;
  @JsonKey(name: 'RentalShowMonthlyExtended', includeIfNull: false)
  final bool? rentalShowMonthlyExtended;
  @JsonKey(name: 'RentalShowPeriodDiscountAmount', includeIfNull: false)
  final bool? rentalShowPeriodDiscountAmount;
  @JsonKey(name: 'RentalShowPeriodExtended', includeIfNull: false)
  final bool? rentalShowPeriodExtended;
  @JsonKey(name: 'RentalShowWarehouse', includeIfNull: false)
  final bool? rentalShowWarehouse;
  @JsonKey(name: 'RentalShowTaxable', includeIfNull: false)
  final bool? rentalShowTaxable;
  @JsonKey(name: 'RentalShowNotes', includeIfNull: false)
  final bool? rentalShowNotes;
  @JsonKey(name: 'RentalShowReturnToWarehouse', includeIfNull: false)
  final bool? rentalShowReturnToWarehouse;
  @JsonKey(name: 'RentalDateStamp', includeIfNull: false)
  final String? rentalDateStamp;
  @JsonKey(name: 'AllowRoundTripRentals', includeIfNull: false)
  final bool? allowRoundTripRentals;
  @JsonKey(name: 'SalesShowICode', includeIfNull: false)
  final bool? salesShowICode;
  @JsonKey(name: 'SalesICodeWidth', includeIfNull: false)
  final int? salesICodeWidth;
  @JsonKey(name: 'SalesShowDescription', includeIfNull: false)
  final bool? salesShowDescription;
  @JsonKey(name: 'SalesDescriptionWidth', includeIfNull: false)
  final int? salesDescriptionWidth;
  @JsonKey(name: 'SalesShowManufacturerPartNumber', includeIfNull: false)
  final bool? salesShowManufacturerPartNumber;
  @JsonKey(name: 'SalesManufacturerPartNumberWidth', includeIfNull: false)
  final int? salesManufacturerPartNumberWidth;
  @JsonKey(name: 'SalesShowPickDate', includeIfNull: false)
  final bool? salesShowPickDate;
  @JsonKey(name: 'SalesShowPickTime', includeIfNull: false)
  final bool? salesShowPickTime;
  @JsonKey(name: 'SalesShowFromDate', includeIfNull: false)
  final bool? salesShowFromDate;
  @JsonKey(name: 'SalesShowFromTime', includeIfNull: false)
  final bool? salesShowFromTime;
  @JsonKey(name: 'SalesShowSubQuantity', includeIfNull: false)
  final bool? salesShowSubQuantity;
  @JsonKey(name: 'SalesShowCost', includeIfNull: false)
  final bool? salesShowCost;
  @JsonKey(name: 'SalesShowRate', includeIfNull: false)
  final bool? salesShowRate;
  @JsonKey(name: 'SalesShowAvailableQuantity', includeIfNull: false)
  final bool? salesShowAvailableQuantity;
  @JsonKey(name: 'SalesShowConflictDate', includeIfNull: false)
  final bool? salesShowConflictDate;
  @JsonKey(name: 'SalesShowAvailableQuantityRegion', includeIfNull: false)
  final bool? salesShowAvailableQuantityRegion;
  @JsonKey(name: 'SalesShowConflictDateRegion', includeIfNull: false)
  final bool? salesShowConflictDateRegion;
  @JsonKey(
      name: 'SalesShowAvailableQuantityAllWarehouses', includeIfNull: false)
  final bool? salesShowAvailableQuantityAllWarehouses;
  @JsonKey(name: 'SalesShowConflictDateAllWarehouses', includeIfNull: false)
  final bool? salesShowConflictDateAllWarehouses;
  @JsonKey(name: 'SalesShowMarkupPercent', includeIfNull: false)
  final bool? salesShowMarkupPercent;
  @JsonKey(name: 'SalesShowMarginPercent', includeIfNull: false)
  final bool? salesShowMarginPercent;
  @JsonKey(name: 'SalesShowUnit', includeIfNull: false)
  final bool? salesShowUnit;
  @JsonKey(name: 'SalesShowPeriodCostExtended', includeIfNull: false)
  final bool? salesShowPeriodCostExtended;
  @JsonKey(name: 'SalesShowDiscountPercent', includeIfNull: false)
  final bool? salesShowDiscountPercent;
  @JsonKey(name: 'SalesShowUnitDiscountAmount', includeIfNull: false)
  final bool? salesShowUnitDiscountAmount;
  @JsonKey(name: 'SalesShowUnitExtended', includeIfNull: false)
  final bool? salesShowUnitExtended;
  @JsonKey(name: 'SalesShowPeriodDiscountAmount', includeIfNull: false)
  final bool? salesShowPeriodDiscountAmount;
  @JsonKey(name: 'SalesShowPeriodExtended', includeIfNull: false)
  final bool? salesShowPeriodExtended;
  @JsonKey(name: 'SalesShowVariancePercent', includeIfNull: false)
  final bool? salesShowVariancePercent;
  @JsonKey(name: 'SalesShowVarianceExtended', includeIfNull: false)
  final bool? salesShowVarianceExtended;
  @JsonKey(name: 'SalesShowWarehouse', includeIfNull: false)
  final bool? salesShowWarehouse;
  @JsonKey(name: 'SalesShowTaxable', includeIfNull: false)
  final bool? salesShowTaxable;
  @JsonKey(name: 'SalesShowNotes', includeIfNull: false)
  final bool? salesShowNotes;
  @JsonKey(name: 'SalesDateStamp', includeIfNull: false)
  final String? salesDateStamp;
  @JsonKey(name: 'SalesInventoryPrice', includeIfNull: false)
  final String? salesInventoryPrice;
  @JsonKey(name: 'SalesInventoryCost', includeIfNull: false)
  final String? salesInventoryCost;
  @JsonKey(name: 'FacilityShowDescription', includeIfNull: false)
  final bool? facilityShowDescription;
  @JsonKey(name: 'FacilityDescriptionWidth', includeIfNull: false)
  final int? facilityDescriptionWidth;
  @JsonKey(name: 'FacilityShowFromDate', includeIfNull: false)
  final bool? facilityShowFromDate;
  @JsonKey(name: 'FacilityShowFromTime', includeIfNull: false)
  final bool? facilityShowFromTime;
  @JsonKey(name: 'FacilityShowToDate', includeIfNull: false)
  final bool? facilityShowToDate;
  @JsonKey(name: 'FacilityShowToTime', includeIfNull: false)
  final bool? facilityShowToTime;
  @JsonKey(name: 'FacilityShowWeeksAndDays', includeIfNull: false)
  final bool? facilityShowWeeksAndDays;
  @JsonKey(name: 'FacilityShowMonthsAndDays', includeIfNull: false)
  final bool? facilityShowMonthsAndDays;
  @JsonKey(name: 'FacilityShowBillablePeriods', includeIfNull: false)
  final bool? facilityShowBillablePeriods;
  @JsonKey(name: 'FacilityShowRate', includeIfNull: false)
  final bool? facilityShowRate;
  @JsonKey(name: 'FacilityShowDaysPerWeek', includeIfNull: false)
  final bool? facilityShowDaysPerWeek;
  @JsonKey(name: 'FacilityShowDiscountPercent', includeIfNull: false)
  final bool? facilityShowDiscountPercent;
  @JsonKey(name: 'FacilityShowSplit', includeIfNull: false)
  final bool? facilityShowSplit;
  @JsonKey(name: 'FacilityShowUnit', includeIfNull: false)
  final bool? facilityShowUnit;
  @JsonKey(name: 'FacilityShowUnitDiscountAmount', includeIfNull: false)
  final bool? facilityShowUnitDiscountAmount;
  @JsonKey(name: 'FacilityShowUnitExtended', includeIfNull: false)
  final bool? facilityShowUnitExtended;
  @JsonKey(name: 'FacilityShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? facilityShowWeeklyDiscountAmount;
  @JsonKey(name: 'FacilityShowWeeklyExtended', includeIfNull: false)
  final bool? facilityShowWeeklyExtended;
  @JsonKey(name: 'FacilityShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? facilityShowMonthlyDiscountAmount;
  @JsonKey(name: 'FacilityShowMonthlyExtended', includeIfNull: false)
  final bool? facilityShowMonthlyExtended;
  @JsonKey(name: 'FacilityShowPeriodDiscountAmount', includeIfNull: false)
  final bool? facilityShowPeriodDiscountAmount;
  @JsonKey(name: 'FacilityShowPeriodExtended', includeIfNull: false)
  final bool? facilityShowPeriodExtended;
  @JsonKey(name: 'FacilityShowTaxable', includeIfNull: false)
  final bool? facilityShowTaxable;
  @JsonKey(name: 'FacilityShowNotes', includeIfNull: false)
  final bool? facilityShowNotes;
  @JsonKey(name: 'FacilityDateStamp', includeIfNull: false)
  final String? facilityDateStamp;
  @JsonKey(name: 'FacilityDescription', includeIfNull: false)
  final String? facilityDescription;
  @JsonKey(name: 'VehicleShowDescription', includeIfNull: false)
  final bool? vehicleShowDescription;
  @JsonKey(name: 'VehicleDescriptionWidth', includeIfNull: false)
  final int? vehicleDescriptionWidth;
  @JsonKey(name: 'VehicleShowVehicleNumber', includeIfNull: false)
  final bool? vehicleShowVehicleNumber;
  @JsonKey(name: 'VehicleShowPickDate', includeIfNull: false)
  final bool? vehicleShowPickDate;
  @JsonKey(name: 'VehicleShowPickTime', includeIfNull: false)
  final bool? vehicleShowPickTime;
  @JsonKey(name: 'VehicleShowFromDate', includeIfNull: false)
  final bool? vehicleShowFromDate;
  @JsonKey(name: 'VehicleShowFromTime', includeIfNull: false)
  final bool? vehicleShowFromTime;
  @JsonKey(name: 'VehicleShowToDate', includeIfNull: false)
  final bool? vehicleShowToDate;
  @JsonKey(name: 'VehicleShowToTime', includeIfNull: false)
  final bool? vehicleShowToTime;
  @JsonKey(name: 'VehicleShowBillablePeriods', includeIfNull: false)
  final bool? vehicleShowBillablePeriods;
  @JsonKey(name: 'VehicleShowSubQuantity', includeIfNull: false)
  final bool? vehicleShowSubQuantity;
  @JsonKey(name: 'VehicleShowAvailableQuantity', includeIfNull: false)
  final bool? vehicleShowAvailableQuantity;
  @JsonKey(name: 'VehicleShowConflictDate', includeIfNull: false)
  final bool? vehicleShowConflictDate;
  @JsonKey(name: 'VehicleShowUnit', includeIfNull: false)
  final bool? vehicleShowUnit;
  @JsonKey(name: 'VehicleShowRate', includeIfNull: false)
  final bool? vehicleShowRate;
  @JsonKey(name: 'VehicleShowDaysPerWeek', includeIfNull: false)
  final bool? vehicleShowDaysPerWeek;
  @JsonKey(name: 'VehicleShowCost', includeIfNull: false)
  final bool? vehicleShowCost;
  @JsonKey(name: 'VehicleShowWeeklyCostExtended', includeIfNull: false)
  final bool? vehicleShowWeeklyCostExtended;
  @JsonKey(name: 'VehicleShowMonthlyCostExtended', includeIfNull: false)
  final bool? vehicleShowMonthlyCostExtended;
  @JsonKey(name: 'VehicleShowPeriodCostExtended', includeIfNull: false)
  final bool? vehicleShowPeriodCostExtended;
  @JsonKey(name: 'VehicleShowDiscountPercent', includeIfNull: false)
  final bool? vehicleShowDiscountPercent;
  @JsonKey(name: 'VehicleShowUnitDiscountAmount', includeIfNull: false)
  final bool? vehicleShowUnitDiscountAmount;
  @JsonKey(name: 'VehicleShowUnitExtended', includeIfNull: false)
  final bool? vehicleShowUnitExtended;
  @JsonKey(name: 'VehicleShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? vehicleShowWeeklyDiscountAmount;
  @JsonKey(name: 'VehicleShowWeeklyExtended', includeIfNull: false)
  final bool? vehicleShowWeeklyExtended;
  @JsonKey(name: 'VehicleShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? vehicleShowMonthlyDiscountAmount;
  @JsonKey(name: 'VehicleShowMonthlyExtended', includeIfNull: false)
  final bool? vehicleShowMonthlyExtended;
  @JsonKey(name: 'VehicleShowPeriodDiscountAmount', includeIfNull: false)
  final bool? vehicleShowPeriodDiscountAmount;
  @JsonKey(name: 'VehicleShowPeriodExtended', includeIfNull: false)
  final bool? vehicleShowPeriodExtended;
  @JsonKey(name: 'VehicleShowWarehouse', includeIfNull: false)
  final bool? vehicleShowWarehouse;
  @JsonKey(name: 'VehicleShowReturnToWarehouse', includeIfNull: false)
  final bool? vehicleShowReturnToWarehouse;
  @JsonKey(name: 'VehicleShowTaxable', includeIfNull: false)
  final bool? vehicleShowTaxable;
  @JsonKey(name: 'VehicleShowNotes', includeIfNull: false)
  final bool? vehicleShowNotes;
  @JsonKey(name: 'VehicleDateStamp', includeIfNull: false)
  final String? vehicleDateStamp;
  @JsonKey(name: 'LaborShowICode', includeIfNull: false)
  final bool? laborShowICode;
  @JsonKey(name: 'LaborICodeWidth', includeIfNull: false)
  final int? laborICodeWidth;
  @JsonKey(name: 'LaborShowDescription', includeIfNull: false)
  final bool? laborShowDescription;
  @JsonKey(name: 'LaborDescriptionWidth', includeIfNull: false)
  final int? laborDescriptionWidth;
  @JsonKey(name: 'LaborShowOrderActivity', includeIfNull: false)
  final bool? laborShowOrderActivity;
  @JsonKey(name: 'LaborShowCrewName', includeIfNull: false)
  final bool? laborShowCrewName;
  @JsonKey(name: 'LaborShowFromDate', includeIfNull: false)
  final bool? laborShowFromDate;
  @JsonKey(name: 'LaborShowFromTime', includeIfNull: false)
  final bool? laborShowFromTime;
  @JsonKey(name: 'LaborShowToDate', includeIfNull: false)
  final bool? laborShowToDate;
  @JsonKey(name: 'LaborShowToTime', includeIfNull: false)
  final bool? laborShowToTime;
  @JsonKey(name: 'LaborShowBillablePeriods', includeIfNull: false)
  final bool? laborShowBillablePeriods;
  @JsonKey(name: 'LaborShowHours', includeIfNull: false)
  final bool? laborShowHours;
  @JsonKey(name: 'LaborShowSubQuantity', includeIfNull: false)
  final bool? laborShowSubQuantity;
  @JsonKey(name: 'LaborShowCost', includeIfNull: false)
  final bool? laborShowCost;
  @JsonKey(name: 'LaborShowRate', includeIfNull: false)
  final bool? laborShowRate;
  @JsonKey(name: 'LaborShowPeriodCostExtended', includeIfNull: false)
  final bool? laborShowPeriodCostExtended;
  @JsonKey(name: 'LaborShowDiscountPercent', includeIfNull: false)
  final bool? laborShowDiscountPercent;
  @JsonKey(name: 'LaborShowUnit', includeIfNull: false)
  final bool? laborShowUnit;
  @JsonKey(name: 'LaborShowUnitDiscountAmount', includeIfNull: false)
  final bool? laborShowUnitDiscountAmount;
  @JsonKey(name: 'LaborShowUnitExtended', includeIfNull: false)
  final bool? laborShowUnitExtended;
  @JsonKey(name: 'LaborShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? laborShowWeeklyDiscountAmount;
  @JsonKey(name: 'LaborShowWeeklyExtended', includeIfNull: false)
  final bool? laborShowWeeklyExtended;
  @JsonKey(name: 'LaborShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? laborShowMonthlyDiscountAmount;
  @JsonKey(name: 'LaborShowMonthlyExtended', includeIfNull: false)
  final bool? laborShowMonthlyExtended;
  @JsonKey(name: 'LaborShowPeriodDiscountAmount', includeIfNull: false)
  final bool? laborShowPeriodDiscountAmount;
  @JsonKey(name: 'LaborShowPeriodExtended', includeIfNull: false)
  final bool? laborShowPeriodExtended;
  @JsonKey(name: 'LaborShowWarehouse', includeIfNull: false)
  final bool? laborShowWarehouse;
  @JsonKey(name: 'LaborShowTaxable', includeIfNull: false)
  final bool? laborShowTaxable;
  @JsonKey(name: 'LaborShowNotes', includeIfNull: false)
  final bool? laborShowNotes;
  @JsonKey(name: 'LaborDateStamp', includeIfNull: false)
  final String? laborDateStamp;
  @JsonKey(name: 'HideCrewBreaks', includeIfNull: false)
  final bool? hideCrewBreaks;
  @JsonKey(name: 'Break1Paid', includeIfNull: false)
  final bool? break1Paid;
  @JsonKey(name: 'Break2Paid', includeIfNull: false)
  final bool? break2Paid;
  @JsonKey(name: 'Break3Paid', includeIfNull: false)
  final bool? break3Paid;
  @JsonKey(name: 'MiscShowICode', includeIfNull: false)
  final bool? miscShowICode;
  @JsonKey(name: 'MiscICodeWidth', includeIfNull: false)
  final int? miscICodeWidth;
  @JsonKey(name: 'MiscShowDescription', includeIfNull: false)
  final bool? miscShowDescription;
  @JsonKey(name: 'MiscDescriptionWidth', includeIfNull: false)
  final int? miscDescriptionWidth;
  @JsonKey(name: 'MiscShowFromDate', includeIfNull: false)
  final bool? miscShowFromDate;
  @JsonKey(name: 'MiscShowFromTime', includeIfNull: false)
  final bool? miscShowFromTime;
  @JsonKey(name: 'MiscShowToDate', includeIfNull: false)
  final bool? miscShowToDate;
  @JsonKey(name: 'MiscShowToTime', includeIfNull: false)
  final bool? miscShowToTime;
  @JsonKey(name: 'MiscShowBillablePeriods', includeIfNull: false)
  final bool? miscShowBillablePeriods;
  @JsonKey(name: 'MiscShowSubQuantity', includeIfNull: false)
  final bool? miscShowSubQuantity;
  @JsonKey(name: 'MiscShowWeeksAndDays', includeIfNull: false)
  final bool? miscShowWeeksAndDays;
  @JsonKey(name: 'MiscShowMonthsAndDays', includeIfNull: false)
  final bool? miscShowMonthsAndDays;
  @JsonKey(name: 'MiscShowUnit', includeIfNull: false)
  final bool? miscShowUnit;
  @JsonKey(name: 'MiscShowRate', includeIfNull: false)
  final bool? miscShowRate;
  @JsonKey(name: 'MiscShowCost', includeIfNull: false)
  final bool? miscShowCost;
  @JsonKey(name: 'MiscShowPeriodCostExtended', includeIfNull: false)
  final bool? miscShowPeriodCostExtended;
  @JsonKey(name: 'MiscShowDiscountPercent', includeIfNull: false)
  final bool? miscShowDiscountPercent;
  @JsonKey(name: 'MiscShowUnitDiscountAmount', includeIfNull: false)
  final bool? miscShowUnitDiscountAmount;
  @JsonKey(name: 'MiscShowUnitExtended', includeIfNull: false)
  final bool? miscShowUnitExtended;
  @JsonKey(name: 'MiscShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? miscShowWeeklyDiscountAmount;
  @JsonKey(name: 'MiscShowWeeklyExtended', includeIfNull: false)
  final bool? miscShowWeeklyExtended;
  @JsonKey(name: 'MiscShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? miscShowMonthlyDiscountAmount;
  @JsonKey(name: 'MiscShowMonthlyExtended', includeIfNull: false)
  final bool? miscShowMonthlyExtended;
  @JsonKey(name: 'MiscShowPeriodDiscountAmount', includeIfNull: false)
  final bool? miscShowPeriodDiscountAmount;
  @JsonKey(name: 'MiscShowPeriodExtended', includeIfNull: false)
  final bool? miscShowPeriodExtended;
  @JsonKey(name: 'MiscShowWarehouse', includeIfNull: false)
  final bool? miscShowWarehouse;
  @JsonKey(name: 'MiscShowTaxable', includeIfNull: false)
  final bool? miscShowTaxable;
  @JsonKey(name: 'MiscShowNotes', includeIfNull: false)
  final bool? miscShowNotes;
  @JsonKey(name: 'MiscDateStamp', includeIfNull: false)
  final String? miscDateStamp;
  @JsonKey(name: 'RentalSaleShowBarCode', includeIfNull: false)
  final bool? rentalSaleShowBarCode;
  @JsonKey(name: 'RentalSaleShowSerialNumber', includeIfNull: false)
  final bool? rentalSaleShowSerialNumber;
  @JsonKey(name: 'RentalSaleShowICode', includeIfNull: false)
  final bool? rentalSaleShowICode;
  @JsonKey(name: 'RentalSaleICodeWidth', includeIfNull: false)
  final int? rentalSaleICodeWidth;
  @JsonKey(name: 'RentalSaleShowDescription', includeIfNull: false)
  final bool? rentalSaleShowDescription;
  @JsonKey(name: 'RentalSaleDescriptionWidth', includeIfNull: false)
  final int? rentalSaleDescriptionWidth;
  @JsonKey(name: 'RentalSaleShowPickDate', includeIfNull: false)
  final bool? rentalSaleShowPickDate;
  @JsonKey(name: 'RentalSaleShowPickTime', includeIfNull: false)
  final bool? rentalSaleShowPickTime;
  @JsonKey(name: 'RentalSaleShowAvailableQuantity', includeIfNull: false)
  final bool? rentalSaleShowAvailableQuantity;
  @JsonKey(name: 'RentalSaleShowConflictDate', includeIfNull: false)
  final bool? rentalSaleShowConflictDate;
  @JsonKey(name: 'RentalSaleShowUnit', includeIfNull: false)
  final bool? rentalSaleShowUnit;
  @JsonKey(name: 'RentalSaleShowRate', includeIfNull: false)
  final bool? rentalSaleShowRate;
  @JsonKey(name: 'RentalSaleShowCost', includeIfNull: false)
  final bool? rentalSaleShowCost;
  @JsonKey(name: 'RentalSaleShowPeriodCostExtended', includeIfNull: false)
  final bool? rentalSaleShowPeriodCostExtended;
  @JsonKey(name: 'RentalSaleShowDiscountPercent', includeIfNull: false)
  final bool? rentalSaleShowDiscountPercent;
  @JsonKey(name: 'RentalSaleShowUnitDiscountAmount', includeIfNull: false)
  final bool? rentalSaleShowUnitDiscountAmount;
  @JsonKey(name: 'RentalSaleShowUnitExtended', includeIfNull: false)
  final bool? rentalSaleShowUnitExtended;
  @JsonKey(name: 'RentalSaleShowPeriodDiscountAmount', includeIfNull: false)
  final bool? rentalSaleShowPeriodDiscountAmount;
  @JsonKey(name: 'RentalSaleShowPeriodExtended', includeIfNull: false)
  final bool? rentalSaleShowPeriodExtended;
  @JsonKey(name: 'RentalSaleShowWarehouse', includeIfNull: false)
  final bool? rentalSaleShowWarehouse;
  @JsonKey(name: 'RentalSaleShowTaxable', includeIfNull: false)
  final bool? rentalSaleShowTaxable;
  @JsonKey(name: 'RentalSaleShowNotes', includeIfNull: false)
  final bool? rentalSaleShowNotes;
  @JsonKey(name: 'RentalSaleDateStamp', includeIfNull: false)
  final String? rentalSaleDateStamp;
  @JsonKey(name: 'LossAndDamageShowOrderNumber', includeIfNull: false)
  final bool? lossAndDamageShowOrderNumber;
  @JsonKey(name: 'LossAndDamageShowRepairOrderNumber', includeIfNull: false)
  final bool? lossAndDamageShowRepairOrderNumber;
  @JsonKey(name: 'LossAndDamageShowBarCode', includeIfNull: false)
  final bool? lossAndDamageShowBarCode;
  @JsonKey(name: 'LossAndDamageShowSerialNumber', includeIfNull: false)
  final bool? lossAndDamageShowSerialNumber;
  @JsonKey(name: 'LossAndDamageShowICode', includeIfNull: false)
  final bool? lossAndDamageShowICode;
  @JsonKey(name: 'LossAndDamageICodeWidth', includeIfNull: false)
  final int? lossAndDamageICodeWidth;
  @JsonKey(name: 'LossAndDamageShowDescription', includeIfNull: false)
  final bool? lossAndDamageShowDescription;
  @JsonKey(name: 'LossAndDamageDescriptionWidth', includeIfNull: false)
  final int? lossAndDamageDescriptionWidth;
  @JsonKey(name: 'LossAndDamageShowUnit', includeIfNull: false)
  final bool? lossAndDamageShowUnit;
  @JsonKey(name: 'LossAndDamageShowRate', includeIfNull: false)
  final bool? lossAndDamageShowRate;
  @JsonKey(name: 'LossAndDamageShowCost', includeIfNull: false)
  final bool? lossAndDamageShowCost;
  @JsonKey(name: 'LossAndDamageShowDiscountPercent', includeIfNull: false)
  final bool? lossAndDamageShowDiscountPercent;
  @JsonKey(name: 'LossAndDamageShowUnitDiscountAmount', includeIfNull: false)
  final bool? lossAndDamageShowUnitDiscountAmount;
  @JsonKey(name: 'LossAndDamageShowUnitExtended', includeIfNull: false)
  final bool? lossAndDamageShowUnitExtended;
  @JsonKey(name: 'LossAndDamageShowPeriodDiscountAmount', includeIfNull: false)
  final bool? lossAndDamageShowPeriodDiscountAmount;
  @JsonKey(name: 'LossAndDamageShowPeriodExtended', includeIfNull: false)
  final bool? lossAndDamageShowPeriodExtended;
  @JsonKey(name: 'LossAndDamageShowWarehouse', includeIfNull: false)
  final bool? lossAndDamageShowWarehouse;
  @JsonKey(name: 'LossAndDamageShowTaxable', includeIfNull: false)
  final bool? lossAndDamageShowTaxable;
  @JsonKey(name: 'LossAndDamageShowNotes', includeIfNull: false)
  final bool? lossAndDamageShowNotes;
  @JsonKey(name: 'LossAndDamageDateStamp', includeIfNull: false)
  final String? lossAndDamageDateStamp;
  @JsonKey(name: 'AddInstallationAndStrikeFee', includeIfNull: false)
  final bool? addInstallationAndStrikeFee;
  @JsonKey(name: 'InstallationAndStrikeFeeRateId', includeIfNull: false)
  final String? installationAndStrikeFeeRateId;
  @JsonKey(name: 'InstallationAndStrikeFeeICode', includeIfNull: false)
  final String? installationAndStrikeFeeICode;
  @JsonKey(name: 'InstallationAndStrikeFeeDescription', includeIfNull: false)
  final String? installationAndStrikeFeeDescription;
  @JsonKey(name: 'InstallationAndStrikeFeePercent', includeIfNull: false)
  final double? installationAndStrikeFeePercent;
  @JsonKey(name: 'InstallationAndStrikeFeeBasedOn', includeIfNull: false)
  final String? installationAndStrikeFeeBasedOn;
  @JsonKey(name: 'AddManagementAndServiceFee', includeIfNull: false)
  final bool? addManagementAndServiceFee;
  @JsonKey(name: 'ManagementAndServiceFeeRateId', includeIfNull: false)
  final String? managementAndServiceFeeRateId;
  @JsonKey(name: 'ManagementAndServiceFeeICode', includeIfNull: false)
  final String? managementAndServiceFeeICode;
  @JsonKey(name: 'ManagementAndServiceFeeDescription', includeIfNull: false)
  final String? managementAndServiceFeeDescription;
  @JsonKey(name: 'ManagementAndServiceFeePercent', includeIfNull: false)
  final double? managementAndServiceFeePercent;
  @JsonKey(name: 'ManagementAndServiceFeeBasedOn', includeIfNull: false)
  final String? managementAndServiceFeeBasedOn;
  @JsonKey(name: 'DefaultRentalSalePrice', includeIfNull: false)
  final String? defaultRentalSalePrice;
  @JsonKey(name: 'QuikPayDiscount', includeIfNull: false)
  final bool? quikPayDiscount;
  @JsonKey(name: 'QuikPayDiscountType', includeIfNull: false)
  final String? quikPayDiscountType;
  @JsonKey(name: 'QuikPayDiscountDays', includeIfNull: false)
  final int? quikPayDiscountDays;
  @JsonKey(name: 'QuikPayDiscountPercent', includeIfNull: false)
  final double? quikPayDiscountPercent;
  @JsonKey(name: 'QuikPayDiscountExcludeSubs', includeIfNull: false)
  final bool? quikPayDiscountExcludeSubs;
  @JsonKey(name: 'QuikConfirmDiscount', includeIfNull: false)
  final bool? quikConfirmDiscount;
  @JsonKey(name: 'QuikConfirmDiscountPercent', includeIfNull: false)
  final double? quikConfirmDiscountPercent;
  @JsonKey(name: 'QuikConfirmDiscountDays', includeIfNull: false)
  final int? quikConfirmDiscountDays;
  @JsonKey(name: 'DisableCostGl', includeIfNull: false)
  final bool? disableCostGl;
  @JsonKey(name: 'ExcludeFromTopSalesDashboard', includeIfNull: false)
  final bool? excludeFromTopSalesDashboard;
  @JsonKey(name: 'SeparatePackageOnQuoteOrder', includeIfNull: false)
  final bool? separatePackageOnQuoteOrder;
  @JsonKey(name: 'Orderby', includeIfNull: false)
  final double? orderby;
  @JsonKey(name: 'SubAllShortagesSubMiscellaneous', includeIfNull: false)
  final bool? subAllShortagesSubMiscellaneous;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(
      name: 'CombinedShowFields',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? combinedShowFields;
  @JsonKey(
      name: 'RentalShowFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? rentalShowFields;
  @JsonKey(
      name: 'SalesShowFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? salesShowFields;
  @JsonKey(
      name: 'MiscShowFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? miscShowFields;
  @JsonKey(
      name: 'LaborShowFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? laborShowFields;
  @JsonKey(
      name: 'RentalSaleShowFields',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? rentalSaleShowFields;
  @JsonKey(
      name: 'LossAndDamageShowFields',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? lossAndDamageShowFields;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderSettingsOrderTypeOrderTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderSettingsOrderTypeOrderTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderSettingsOrderTypeOrderTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderSettingsOrderTypeOrderType &&
            (identical(other.orderTypeId, orderTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeId, orderTypeId)) &&
            (identical(other.orderType, orderType) ||
                const DeepCollectionEquality()
                    .equals(other.orderType, orderType)) &&
            (identical(other.ordType, ordType) ||
                const DeepCollectionEquality()
                    .equals(other.ordType, ordType)) &&
            (identical(other.defaultPickTime, defaultPickTime) ||
                const DeepCollectionEquality()
                    .equals(other.defaultPickTime, defaultPickTime)) &&
            (identical(other.defaultFromTime, defaultFromTime) ||
                const DeepCollectionEquality()
                    .equals(other.defaultFromTime, defaultFromTime)) &&
            (identical(other.defaultToTime, defaultToTime) ||
                const DeepCollectionEquality()
                    .equals(other.defaultToTime, defaultToTime)) &&
            (identical(other.dailyScheduleDefaultStartTime, dailyScheduleDefaultStartTime) ||
                const DeepCollectionEquality().equals(
                    other.dailyScheduleDefaultStartTime,
                    dailyScheduleDefaultStartTime)) &&
            (identical(other.dailyScheduleDefaultStopTime, dailyScheduleDefaultStopTime) ||
                const DeepCollectionEquality().equals(
                    other.dailyScheduleDefaultStopTime,
                    dailyScheduleDefaultStopTime)) &&
            (identical(other.isMasterSubOrderType, isMasterSubOrderType) ||
                const DeepCollectionEquality().equals(
                    other.isMasterSubOrderType, isMasterSubOrderType)) &&
            (identical(other.combineActivityTabs, combineActivityTabs) ||
                const DeepCollectionEquality()
                    .equals(other.combineActivityTabs, combineActivityTabs)) &&
            (identical(other.defaultManualSort, defaultManualSort) ||
                const DeepCollectionEquality()
                    .equals(other.defaultManualSort, defaultManualSort)) &&
            (identical(other.determineQuantitiesToBillBasedOn, determineQuantitiesToBillBasedOn) ||
                const DeepCollectionEquality().equals(
                    other.determineQuantitiesToBillBasedOn,
                    determineQuantitiesToBillBasedOn)) &&
            (identical(other.allowNesting, allowNesting) ||
                const DeepCollectionEquality()
                    .equals(other.allowNesting, allowNesting)) &&
            (identical(other.rentalShowICode, rentalShowICode) ||
                const DeepCollectionEquality()
                    .equals(other.rentalShowICode, rentalShowICode)) &&
            (identical(other.rentalICodeWidth, rentalICodeWidth) ||
                const DeepCollectionEquality().equals(other.rentalICodeWidth, rentalICodeWidth)) &&
            (identical(other.rentalShowDescription, rentalShowDescription) || const DeepCollectionEquality().equals(other.rentalShowDescription, rentalShowDescription)) &&
            (identical(other.rentalDescriptionWidth, rentalDescriptionWidth) || const DeepCollectionEquality().equals(other.rentalDescriptionWidth, rentalDescriptionWidth)) &&
            (identical(other.rentalShowPickDate, rentalShowPickDate) || const DeepCollectionEquality().equals(other.rentalShowPickDate, rentalShowPickDate)) &&
            (identical(other.rentalShowPickTime, rentalShowPickTime) || const DeepCollectionEquality().equals(other.rentalShowPickTime, rentalShowPickTime)) &&
            (identical(other.rentalShowFromDate, rentalShowFromDate) || const DeepCollectionEquality().equals(other.rentalShowFromDate, rentalShowFromDate)) &&
            (identical(other.rentalShowFromTime, rentalShowFromTime) || const DeepCollectionEquality().equals(other.rentalShowFromTime, rentalShowFromTime)) &&
            (identical(other.rentalShowToDate, rentalShowToDate) || const DeepCollectionEquality().equals(other.rentalShowToDate, rentalShowToDate)) &&
            (identical(other.rentalShowToTime, rentalShowToTime) || const DeepCollectionEquality().equals(other.rentalShowToTime, rentalShowToTime)) &&
            (identical(other.rentalShowBillablePeriods, rentalShowBillablePeriods) || const DeepCollectionEquality().equals(other.rentalShowBillablePeriods, rentalShowBillablePeriods)) &&
            (identical(other.rentalShowEpisodes, rentalShowEpisodes) || const DeepCollectionEquality().equals(other.rentalShowEpisodes, rentalShowEpisodes)) &&
            (identical(other.rentalShowSubQuantity, rentalShowSubQuantity) || const DeepCollectionEquality().equals(other.rentalShowSubQuantity, rentalShowSubQuantity)) &&
            (identical(other.rentalShowAvailableQuantity, rentalShowAvailableQuantity) || const DeepCollectionEquality().equals(other.rentalShowAvailableQuantity, rentalShowAvailableQuantity)) &&
            (identical(other.rentalShowConflictDate, rentalShowConflictDate) || const DeepCollectionEquality().equals(other.rentalShowConflictDate, rentalShowConflictDate)) &&
            (identical(other.rentalShowAvailableQuantityRegion, rentalShowAvailableQuantityRegion) || const DeepCollectionEquality().equals(other.rentalShowAvailableQuantityRegion, rentalShowAvailableQuantityRegion)) &&
            (identical(other.rentalShowConflictDateRegion, rentalShowConflictDateRegion) || const DeepCollectionEquality().equals(other.rentalShowConflictDateRegion, rentalShowConflictDateRegion)) &&
            (identical(other.rentalShowAvailableQuantityAllWarehouses, rentalShowAvailableQuantityAllWarehouses) || const DeepCollectionEquality().equals(other.rentalShowAvailableQuantityAllWarehouses, rentalShowAvailableQuantityAllWarehouses)) &&
            (identical(other.rentalShowConflictDateAllWarehouses, rentalShowConflictDateAllWarehouses) || const DeepCollectionEquality().equals(other.rentalShowConflictDateAllWarehouses, rentalShowConflictDateAllWarehouses)) &&
            (identical(other.rentalShowReservedItems, rentalShowReservedItems) || const DeepCollectionEquality().equals(other.rentalShowReservedItems, rentalShowReservedItems)) &&
            (identical(other.rentalShowConsignmentQuantity, rentalShowConsignmentQuantity) || const DeepCollectionEquality().equals(other.rentalShowConsignmentQuantity, rentalShowConsignmentQuantity)) &&
            (identical(other.rentalShowConsignmentAvailableQuantity, rentalShowConsignmentAvailableQuantity) || const DeepCollectionEquality().equals(other.rentalShowConsignmentAvailableQuantity, rentalShowConsignmentAvailableQuantity)) &&
            (identical(other.rentalShowConsignmentConflictDate, rentalShowConsignmentConflictDate) || const DeepCollectionEquality().equals(other.rentalShowConsignmentConflictDate, rentalShowConsignmentConflictDate)) &&
            (identical(other.rentalShowRate, rentalShowRate) || const DeepCollectionEquality().equals(other.rentalShowRate, rentalShowRate)) &&
            (identical(other.rentalShowDaysPerWeek, rentalShowDaysPerWeek) || const DeepCollectionEquality().equals(other.rentalShowDaysPerWeek, rentalShowDaysPerWeek)) &&
            (identical(other.rentalShowPremiumPercent, rentalShowPremiumPercent) || const DeepCollectionEquality().equals(other.rentalShowPremiumPercent, rentalShowPremiumPercent)) &&
            (identical(other.rentalShowUnit, rentalShowUnit) || const DeepCollectionEquality().equals(other.rentalShowUnit, rentalShowUnit)) &&
            (identical(other.rentalShowCost, rentalShowCost) || const DeepCollectionEquality().equals(other.rentalShowCost, rentalShowCost)) &&
            (identical(other.rentalShowPeriodCostExtended, rentalShowPeriodCostExtended) || const DeepCollectionEquality().equals(other.rentalShowPeriodCostExtended, rentalShowPeriodCostExtended)) &&
            (identical(other.rentalShowDiscountPercent, rentalShowDiscountPercent) || const DeepCollectionEquality().equals(other.rentalShowDiscountPercent, rentalShowDiscountPercent)) &&
            (identical(other.rentalShowMarkupPercent, rentalShowMarkupPercent) || const DeepCollectionEquality().equals(other.rentalShowMarkupPercent, rentalShowMarkupPercent)) &&
            (identical(other.rentalShowMarginPercent, rentalShowMarginPercent) || const DeepCollectionEquality().equals(other.rentalShowMarginPercent, rentalShowMarginPercent)) &&
            (identical(other.rentalShowUnitDiscountAmount, rentalShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.rentalShowUnitDiscountAmount, rentalShowUnitDiscountAmount)) &&
            (identical(other.rentalShowUnitExtended, rentalShowUnitExtended) || const DeepCollectionEquality().equals(other.rentalShowUnitExtended, rentalShowUnitExtended)) &&
            (identical(other.rentalShowWeeklyDiscountAmount, rentalShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.rentalShowWeeklyDiscountAmount, rentalShowWeeklyDiscountAmount)) &&
            (identical(other.rentalShowWeeklyExtended, rentalShowWeeklyExtended) || const DeepCollectionEquality().equals(other.rentalShowWeeklyExtended, rentalShowWeeklyExtended)) &&
            (identical(other.rentalShowEpisodeExtended, rentalShowEpisodeExtended) || const DeepCollectionEquality().equals(other.rentalShowEpisodeExtended, rentalShowEpisodeExtended)) &&
            (identical(other.rentalShowEpisodeDiscountAmount, rentalShowEpisodeDiscountAmount) || const DeepCollectionEquality().equals(other.rentalShowEpisodeDiscountAmount, rentalShowEpisodeDiscountAmount)) &&
            (identical(other.rentalShowMonthlyDiscountAmount, rentalShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.rentalShowMonthlyDiscountAmount, rentalShowMonthlyDiscountAmount)) &&
            (identical(other.rentalShowMonthlyExtended, rentalShowMonthlyExtended) || const DeepCollectionEquality().equals(other.rentalShowMonthlyExtended, rentalShowMonthlyExtended)) &&
            (identical(other.rentalShowPeriodDiscountAmount, rentalShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.rentalShowPeriodDiscountAmount, rentalShowPeriodDiscountAmount)) &&
            (identical(other.rentalShowPeriodExtended, rentalShowPeriodExtended) || const DeepCollectionEquality().equals(other.rentalShowPeriodExtended, rentalShowPeriodExtended)) &&
            (identical(other.rentalShowWarehouse, rentalShowWarehouse) || const DeepCollectionEquality().equals(other.rentalShowWarehouse, rentalShowWarehouse)) &&
            (identical(other.rentalShowTaxable, rentalShowTaxable) || const DeepCollectionEquality().equals(other.rentalShowTaxable, rentalShowTaxable)) &&
            (identical(other.rentalShowNotes, rentalShowNotes) || const DeepCollectionEquality().equals(other.rentalShowNotes, rentalShowNotes)) &&
            (identical(other.rentalShowReturnToWarehouse, rentalShowReturnToWarehouse) || const DeepCollectionEquality().equals(other.rentalShowReturnToWarehouse, rentalShowReturnToWarehouse)) &&
            (identical(other.rentalDateStamp, rentalDateStamp) || const DeepCollectionEquality().equals(other.rentalDateStamp, rentalDateStamp)) &&
            (identical(other.allowRoundTripRentals, allowRoundTripRentals) || const DeepCollectionEquality().equals(other.allowRoundTripRentals, allowRoundTripRentals)) &&
            (identical(other.salesShowICode, salesShowICode) || const DeepCollectionEquality().equals(other.salesShowICode, salesShowICode)) &&
            (identical(other.salesICodeWidth, salesICodeWidth) || const DeepCollectionEquality().equals(other.salesICodeWidth, salesICodeWidth)) &&
            (identical(other.salesShowDescription, salesShowDescription) || const DeepCollectionEquality().equals(other.salesShowDescription, salesShowDescription)) &&
            (identical(other.salesDescriptionWidth, salesDescriptionWidth) || const DeepCollectionEquality().equals(other.salesDescriptionWidth, salesDescriptionWidth)) &&
            (identical(other.salesShowManufacturerPartNumber, salesShowManufacturerPartNumber) || const DeepCollectionEquality().equals(other.salesShowManufacturerPartNumber, salesShowManufacturerPartNumber)) &&
            (identical(other.salesManufacturerPartNumberWidth, salesManufacturerPartNumberWidth) || const DeepCollectionEquality().equals(other.salesManufacturerPartNumberWidth, salesManufacturerPartNumberWidth)) &&
            (identical(other.salesShowPickDate, salesShowPickDate) || const DeepCollectionEquality().equals(other.salesShowPickDate, salesShowPickDate)) &&
            (identical(other.salesShowPickTime, salesShowPickTime) || const DeepCollectionEquality().equals(other.salesShowPickTime, salesShowPickTime)) &&
            (identical(other.salesShowFromDate, salesShowFromDate) || const DeepCollectionEquality().equals(other.salesShowFromDate, salesShowFromDate)) &&
            (identical(other.salesShowFromTime, salesShowFromTime) || const DeepCollectionEquality().equals(other.salesShowFromTime, salesShowFromTime)) &&
            (identical(other.salesShowSubQuantity, salesShowSubQuantity) || const DeepCollectionEquality().equals(other.salesShowSubQuantity, salesShowSubQuantity)) &&
            (identical(other.salesShowCost, salesShowCost) || const DeepCollectionEquality().equals(other.salesShowCost, salesShowCost)) &&
            (identical(other.salesShowRate, salesShowRate) || const DeepCollectionEquality().equals(other.salesShowRate, salesShowRate)) &&
            (identical(other.salesShowAvailableQuantity, salesShowAvailableQuantity) || const DeepCollectionEquality().equals(other.salesShowAvailableQuantity, salesShowAvailableQuantity)) &&
            (identical(other.salesShowConflictDate, salesShowConflictDate) || const DeepCollectionEquality().equals(other.salesShowConflictDate, salesShowConflictDate)) &&
            (identical(other.salesShowAvailableQuantityRegion, salesShowAvailableQuantityRegion) || const DeepCollectionEquality().equals(other.salesShowAvailableQuantityRegion, salesShowAvailableQuantityRegion)) &&
            (identical(other.salesShowConflictDateRegion, salesShowConflictDateRegion) || const DeepCollectionEquality().equals(other.salesShowConflictDateRegion, salesShowConflictDateRegion)) &&
            (identical(other.salesShowAvailableQuantityAllWarehouses, salesShowAvailableQuantityAllWarehouses) || const DeepCollectionEquality().equals(other.salesShowAvailableQuantityAllWarehouses, salesShowAvailableQuantityAllWarehouses)) &&
            (identical(other.salesShowConflictDateAllWarehouses, salesShowConflictDateAllWarehouses) || const DeepCollectionEquality().equals(other.salesShowConflictDateAllWarehouses, salesShowConflictDateAllWarehouses)) &&
            (identical(other.salesShowMarkupPercent, salesShowMarkupPercent) || const DeepCollectionEquality().equals(other.salesShowMarkupPercent, salesShowMarkupPercent)) &&
            (identical(other.salesShowMarginPercent, salesShowMarginPercent) || const DeepCollectionEquality().equals(other.salesShowMarginPercent, salesShowMarginPercent)) &&
            (identical(other.salesShowUnit, salesShowUnit) || const DeepCollectionEquality().equals(other.salesShowUnit, salesShowUnit)) &&
            (identical(other.salesShowPeriodCostExtended, salesShowPeriodCostExtended) || const DeepCollectionEquality().equals(other.salesShowPeriodCostExtended, salesShowPeriodCostExtended)) &&
            (identical(other.salesShowDiscountPercent, salesShowDiscountPercent) || const DeepCollectionEquality().equals(other.salesShowDiscountPercent, salesShowDiscountPercent)) &&
            (identical(other.salesShowUnitDiscountAmount, salesShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.salesShowUnitDiscountAmount, salesShowUnitDiscountAmount)) &&
            (identical(other.salesShowUnitExtended, salesShowUnitExtended) || const DeepCollectionEquality().equals(other.salesShowUnitExtended, salesShowUnitExtended)) &&
            (identical(other.salesShowPeriodDiscountAmount, salesShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.salesShowPeriodDiscountAmount, salesShowPeriodDiscountAmount)) &&
            (identical(other.salesShowPeriodExtended, salesShowPeriodExtended) || const DeepCollectionEquality().equals(other.salesShowPeriodExtended, salesShowPeriodExtended)) &&
            (identical(other.salesShowVariancePercent, salesShowVariancePercent) || const DeepCollectionEquality().equals(other.salesShowVariancePercent, salesShowVariancePercent)) &&
            (identical(other.salesShowVarianceExtended, salesShowVarianceExtended) || const DeepCollectionEquality().equals(other.salesShowVarianceExtended, salesShowVarianceExtended)) &&
            (identical(other.salesShowWarehouse, salesShowWarehouse) || const DeepCollectionEquality().equals(other.salesShowWarehouse, salesShowWarehouse)) &&
            (identical(other.salesShowTaxable, salesShowTaxable) || const DeepCollectionEquality().equals(other.salesShowTaxable, salesShowTaxable)) &&
            (identical(other.salesShowNotes, salesShowNotes) || const DeepCollectionEquality().equals(other.salesShowNotes, salesShowNotes)) &&
            (identical(other.salesDateStamp, salesDateStamp) || const DeepCollectionEquality().equals(other.salesDateStamp, salesDateStamp)) &&
            (identical(other.salesInventoryPrice, salesInventoryPrice) || const DeepCollectionEquality().equals(other.salesInventoryPrice, salesInventoryPrice)) &&
            (identical(other.salesInventoryCost, salesInventoryCost) || const DeepCollectionEquality().equals(other.salesInventoryCost, salesInventoryCost)) &&
            (identical(other.facilityShowDescription, facilityShowDescription) || const DeepCollectionEquality().equals(other.facilityShowDescription, facilityShowDescription)) &&
            (identical(other.facilityDescriptionWidth, facilityDescriptionWidth) || const DeepCollectionEquality().equals(other.facilityDescriptionWidth, facilityDescriptionWidth)) &&
            (identical(other.facilityShowFromDate, facilityShowFromDate) || const DeepCollectionEquality().equals(other.facilityShowFromDate, facilityShowFromDate)) &&
            (identical(other.facilityShowFromTime, facilityShowFromTime) || const DeepCollectionEquality().equals(other.facilityShowFromTime, facilityShowFromTime)) &&
            (identical(other.facilityShowToDate, facilityShowToDate) || const DeepCollectionEquality().equals(other.facilityShowToDate, facilityShowToDate)) &&
            (identical(other.facilityShowToTime, facilityShowToTime) || const DeepCollectionEquality().equals(other.facilityShowToTime, facilityShowToTime)) &&
            (identical(other.facilityShowWeeksAndDays, facilityShowWeeksAndDays) || const DeepCollectionEquality().equals(other.facilityShowWeeksAndDays, facilityShowWeeksAndDays)) &&
            (identical(other.facilityShowMonthsAndDays, facilityShowMonthsAndDays) || const DeepCollectionEquality().equals(other.facilityShowMonthsAndDays, facilityShowMonthsAndDays)) &&
            (identical(other.facilityShowBillablePeriods, facilityShowBillablePeriods) || const DeepCollectionEquality().equals(other.facilityShowBillablePeriods, facilityShowBillablePeriods)) &&
            (identical(other.facilityShowRate, facilityShowRate) || const DeepCollectionEquality().equals(other.facilityShowRate, facilityShowRate)) &&
            (identical(other.facilityShowDaysPerWeek, facilityShowDaysPerWeek) || const DeepCollectionEquality().equals(other.facilityShowDaysPerWeek, facilityShowDaysPerWeek)) &&
            (identical(other.facilityShowDiscountPercent, facilityShowDiscountPercent) || const DeepCollectionEquality().equals(other.facilityShowDiscountPercent, facilityShowDiscountPercent)) &&
            (identical(other.facilityShowSplit, facilityShowSplit) || const DeepCollectionEquality().equals(other.facilityShowSplit, facilityShowSplit)) &&
            (identical(other.facilityShowUnit, facilityShowUnit) || const DeepCollectionEquality().equals(other.facilityShowUnit, facilityShowUnit)) &&
            (identical(other.facilityShowUnitDiscountAmount, facilityShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.facilityShowUnitDiscountAmount, facilityShowUnitDiscountAmount)) &&
            (identical(other.facilityShowUnitExtended, facilityShowUnitExtended) || const DeepCollectionEquality().equals(other.facilityShowUnitExtended, facilityShowUnitExtended)) &&
            (identical(other.facilityShowWeeklyDiscountAmount, facilityShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.facilityShowWeeklyDiscountAmount, facilityShowWeeklyDiscountAmount)) &&
            (identical(other.facilityShowWeeklyExtended, facilityShowWeeklyExtended) || const DeepCollectionEquality().equals(other.facilityShowWeeklyExtended, facilityShowWeeklyExtended)) &&
            (identical(other.facilityShowMonthlyDiscountAmount, facilityShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.facilityShowMonthlyDiscountAmount, facilityShowMonthlyDiscountAmount)) &&
            (identical(other.facilityShowMonthlyExtended, facilityShowMonthlyExtended) || const DeepCollectionEquality().equals(other.facilityShowMonthlyExtended, facilityShowMonthlyExtended)) &&
            (identical(other.facilityShowPeriodDiscountAmount, facilityShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.facilityShowPeriodDiscountAmount, facilityShowPeriodDiscountAmount)) &&
            (identical(other.facilityShowPeriodExtended, facilityShowPeriodExtended) || const DeepCollectionEquality().equals(other.facilityShowPeriodExtended, facilityShowPeriodExtended)) &&
            (identical(other.facilityShowTaxable, facilityShowTaxable) || const DeepCollectionEquality().equals(other.facilityShowTaxable, facilityShowTaxable)) &&
            (identical(other.facilityShowNotes, facilityShowNotes) || const DeepCollectionEquality().equals(other.facilityShowNotes, facilityShowNotes)) &&
            (identical(other.facilityDateStamp, facilityDateStamp) || const DeepCollectionEquality().equals(other.facilityDateStamp, facilityDateStamp)) &&
            (identical(other.facilityDescription, facilityDescription) || const DeepCollectionEquality().equals(other.facilityDescription, facilityDescription)) &&
            (identical(other.vehicleShowDescription, vehicleShowDescription) || const DeepCollectionEquality().equals(other.vehicleShowDescription, vehicleShowDescription)) &&
            (identical(other.vehicleDescriptionWidth, vehicleDescriptionWidth) || const DeepCollectionEquality().equals(other.vehicleDescriptionWidth, vehicleDescriptionWidth)) &&
            (identical(other.vehicleShowVehicleNumber, vehicleShowVehicleNumber) || const DeepCollectionEquality().equals(other.vehicleShowVehicleNumber, vehicleShowVehicleNumber)) &&
            (identical(other.vehicleShowPickDate, vehicleShowPickDate) || const DeepCollectionEquality().equals(other.vehicleShowPickDate, vehicleShowPickDate)) &&
            (identical(other.vehicleShowPickTime, vehicleShowPickTime) || const DeepCollectionEquality().equals(other.vehicleShowPickTime, vehicleShowPickTime)) &&
            (identical(other.vehicleShowFromDate, vehicleShowFromDate) || const DeepCollectionEquality().equals(other.vehicleShowFromDate, vehicleShowFromDate)) &&
            (identical(other.vehicleShowFromTime, vehicleShowFromTime) || const DeepCollectionEquality().equals(other.vehicleShowFromTime, vehicleShowFromTime)) &&
            (identical(other.vehicleShowToDate, vehicleShowToDate) || const DeepCollectionEquality().equals(other.vehicleShowToDate, vehicleShowToDate)) &&
            (identical(other.vehicleShowToTime, vehicleShowToTime) || const DeepCollectionEquality().equals(other.vehicleShowToTime, vehicleShowToTime)) &&
            (identical(other.vehicleShowBillablePeriods, vehicleShowBillablePeriods) || const DeepCollectionEquality().equals(other.vehicleShowBillablePeriods, vehicleShowBillablePeriods)) &&
            (identical(other.vehicleShowSubQuantity, vehicleShowSubQuantity) || const DeepCollectionEquality().equals(other.vehicleShowSubQuantity, vehicleShowSubQuantity)) &&
            (identical(other.vehicleShowAvailableQuantity, vehicleShowAvailableQuantity) || const DeepCollectionEquality().equals(other.vehicleShowAvailableQuantity, vehicleShowAvailableQuantity)) &&
            (identical(other.vehicleShowConflictDate, vehicleShowConflictDate) || const DeepCollectionEquality().equals(other.vehicleShowConflictDate, vehicleShowConflictDate)) &&
            (identical(other.vehicleShowUnit, vehicleShowUnit) || const DeepCollectionEquality().equals(other.vehicleShowUnit, vehicleShowUnit)) &&
            (identical(other.vehicleShowRate, vehicleShowRate) || const DeepCollectionEquality().equals(other.vehicleShowRate, vehicleShowRate)) &&
            (identical(other.vehicleShowDaysPerWeek, vehicleShowDaysPerWeek) || const DeepCollectionEquality().equals(other.vehicleShowDaysPerWeek, vehicleShowDaysPerWeek)) &&
            (identical(other.vehicleShowCost, vehicleShowCost) || const DeepCollectionEquality().equals(other.vehicleShowCost, vehicleShowCost)) &&
            (identical(other.vehicleShowWeeklyCostExtended, vehicleShowWeeklyCostExtended) || const DeepCollectionEquality().equals(other.vehicleShowWeeklyCostExtended, vehicleShowWeeklyCostExtended)) &&
            (identical(other.vehicleShowMonthlyCostExtended, vehicleShowMonthlyCostExtended) || const DeepCollectionEquality().equals(other.vehicleShowMonthlyCostExtended, vehicleShowMonthlyCostExtended)) &&
            (identical(other.vehicleShowPeriodCostExtended, vehicleShowPeriodCostExtended) || const DeepCollectionEquality().equals(other.vehicleShowPeriodCostExtended, vehicleShowPeriodCostExtended)) &&
            (identical(other.vehicleShowDiscountPercent, vehicleShowDiscountPercent) || const DeepCollectionEquality().equals(other.vehicleShowDiscountPercent, vehicleShowDiscountPercent)) &&
            (identical(other.vehicleShowUnitDiscountAmount, vehicleShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.vehicleShowUnitDiscountAmount, vehicleShowUnitDiscountAmount)) &&
            (identical(other.vehicleShowUnitExtended, vehicleShowUnitExtended) || const DeepCollectionEquality().equals(other.vehicleShowUnitExtended, vehicleShowUnitExtended)) &&
            (identical(other.vehicleShowWeeklyDiscountAmount, vehicleShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.vehicleShowWeeklyDiscountAmount, vehicleShowWeeklyDiscountAmount)) &&
            (identical(other.vehicleShowWeeklyExtended, vehicleShowWeeklyExtended) || const DeepCollectionEquality().equals(other.vehicleShowWeeklyExtended, vehicleShowWeeklyExtended)) &&
            (identical(other.vehicleShowMonthlyDiscountAmount, vehicleShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.vehicleShowMonthlyDiscountAmount, vehicleShowMonthlyDiscountAmount)) &&
            (identical(other.vehicleShowMonthlyExtended, vehicleShowMonthlyExtended) || const DeepCollectionEquality().equals(other.vehicleShowMonthlyExtended, vehicleShowMonthlyExtended)) &&
            (identical(other.vehicleShowPeriodDiscountAmount, vehicleShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.vehicleShowPeriodDiscountAmount, vehicleShowPeriodDiscountAmount)) &&
            (identical(other.vehicleShowPeriodExtended, vehicleShowPeriodExtended) || const DeepCollectionEquality().equals(other.vehicleShowPeriodExtended, vehicleShowPeriodExtended)) &&
            (identical(other.vehicleShowWarehouse, vehicleShowWarehouse) || const DeepCollectionEquality().equals(other.vehicleShowWarehouse, vehicleShowWarehouse)) &&
            (identical(other.vehicleShowReturnToWarehouse, vehicleShowReturnToWarehouse) || const DeepCollectionEquality().equals(other.vehicleShowReturnToWarehouse, vehicleShowReturnToWarehouse)) &&
            (identical(other.vehicleShowTaxable, vehicleShowTaxable) || const DeepCollectionEquality().equals(other.vehicleShowTaxable, vehicleShowTaxable)) &&
            (identical(other.vehicleShowNotes, vehicleShowNotes) || const DeepCollectionEquality().equals(other.vehicleShowNotes, vehicleShowNotes)) &&
            (identical(other.vehicleDateStamp, vehicleDateStamp) || const DeepCollectionEquality().equals(other.vehicleDateStamp, vehicleDateStamp)) &&
            (identical(other.laborShowICode, laborShowICode) || const DeepCollectionEquality().equals(other.laborShowICode, laborShowICode)) &&
            (identical(other.laborICodeWidth, laborICodeWidth) || const DeepCollectionEquality().equals(other.laborICodeWidth, laborICodeWidth)) &&
            (identical(other.laborShowDescription, laborShowDescription) || const DeepCollectionEquality().equals(other.laborShowDescription, laborShowDescription)) &&
            (identical(other.laborDescriptionWidth, laborDescriptionWidth) || const DeepCollectionEquality().equals(other.laborDescriptionWidth, laborDescriptionWidth)) &&
            (identical(other.laborShowOrderActivity, laborShowOrderActivity) || const DeepCollectionEquality().equals(other.laborShowOrderActivity, laborShowOrderActivity)) &&
            (identical(other.laborShowCrewName, laborShowCrewName) || const DeepCollectionEquality().equals(other.laborShowCrewName, laborShowCrewName)) &&
            (identical(other.laborShowFromDate, laborShowFromDate) || const DeepCollectionEquality().equals(other.laborShowFromDate, laborShowFromDate)) &&
            (identical(other.laborShowFromTime, laborShowFromTime) || const DeepCollectionEquality().equals(other.laborShowFromTime, laborShowFromTime)) &&
            (identical(other.laborShowToDate, laborShowToDate) || const DeepCollectionEquality().equals(other.laborShowToDate, laborShowToDate)) &&
            (identical(other.laborShowToTime, laborShowToTime) || const DeepCollectionEquality().equals(other.laborShowToTime, laborShowToTime)) &&
            (identical(other.laborShowBillablePeriods, laborShowBillablePeriods) || const DeepCollectionEquality().equals(other.laborShowBillablePeriods, laborShowBillablePeriods)) &&
            (identical(other.laborShowHours, laborShowHours) || const DeepCollectionEquality().equals(other.laborShowHours, laborShowHours)) &&
            (identical(other.laborShowSubQuantity, laborShowSubQuantity) || const DeepCollectionEquality().equals(other.laborShowSubQuantity, laborShowSubQuantity)) &&
            (identical(other.laborShowCost, laborShowCost) || const DeepCollectionEquality().equals(other.laborShowCost, laborShowCost)) &&
            (identical(other.laborShowRate, laborShowRate) || const DeepCollectionEquality().equals(other.laborShowRate, laborShowRate)) &&
            (identical(other.laborShowPeriodCostExtended, laborShowPeriodCostExtended) || const DeepCollectionEquality().equals(other.laborShowPeriodCostExtended, laborShowPeriodCostExtended)) &&
            (identical(other.laborShowDiscountPercent, laborShowDiscountPercent) || const DeepCollectionEquality().equals(other.laborShowDiscountPercent, laborShowDiscountPercent)) &&
            (identical(other.laborShowUnit, laborShowUnit) || const DeepCollectionEquality().equals(other.laborShowUnit, laborShowUnit)) &&
            (identical(other.laborShowUnitDiscountAmount, laborShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowUnitDiscountAmount, laborShowUnitDiscountAmount)) &&
            (identical(other.laborShowUnitExtended, laborShowUnitExtended) || const DeepCollectionEquality().equals(other.laborShowUnitExtended, laborShowUnitExtended)) &&
            (identical(other.laborShowWeeklyDiscountAmount, laborShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowWeeklyDiscountAmount, laborShowWeeklyDiscountAmount)) &&
            (identical(other.laborShowWeeklyExtended, laborShowWeeklyExtended) || const DeepCollectionEquality().equals(other.laborShowWeeklyExtended, laborShowWeeklyExtended)) &&
            (identical(other.laborShowMonthlyDiscountAmount, laborShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowMonthlyDiscountAmount, laborShowMonthlyDiscountAmount)) &&
            (identical(other.laborShowMonthlyExtended, laborShowMonthlyExtended) || const DeepCollectionEquality().equals(other.laborShowMonthlyExtended, laborShowMonthlyExtended)) &&
            (identical(other.laborShowPeriodDiscountAmount, laborShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowPeriodDiscountAmount, laborShowPeriodDiscountAmount)) &&
            (identical(other.laborShowPeriodExtended, laborShowPeriodExtended) || const DeepCollectionEquality().equals(other.laborShowPeriodExtended, laborShowPeriodExtended)) &&
            (identical(other.laborShowWarehouse, laborShowWarehouse) || const DeepCollectionEquality().equals(other.laborShowWarehouse, laborShowWarehouse)) &&
            (identical(other.laborShowTaxable, laborShowTaxable) || const DeepCollectionEquality().equals(other.laborShowTaxable, laborShowTaxable)) &&
            (identical(other.laborShowNotes, laborShowNotes) || const DeepCollectionEquality().equals(other.laborShowNotes, laborShowNotes)) &&
            (identical(other.laborDateStamp, laborDateStamp) || const DeepCollectionEquality().equals(other.laborDateStamp, laborDateStamp)) &&
            (identical(other.hideCrewBreaks, hideCrewBreaks) || const DeepCollectionEquality().equals(other.hideCrewBreaks, hideCrewBreaks)) &&
            (identical(other.break1Paid, break1Paid) || const DeepCollectionEquality().equals(other.break1Paid, break1Paid)) &&
            (identical(other.break2Paid, break2Paid) || const DeepCollectionEquality().equals(other.break2Paid, break2Paid)) &&
            (identical(other.break3Paid, break3Paid) || const DeepCollectionEquality().equals(other.break3Paid, break3Paid)) &&
            (identical(other.miscShowICode, miscShowICode) || const DeepCollectionEquality().equals(other.miscShowICode, miscShowICode)) &&
            (identical(other.miscICodeWidth, miscICodeWidth) || const DeepCollectionEquality().equals(other.miscICodeWidth, miscICodeWidth)) &&
            (identical(other.miscShowDescription, miscShowDescription) || const DeepCollectionEquality().equals(other.miscShowDescription, miscShowDescription)) &&
            (identical(other.miscDescriptionWidth, miscDescriptionWidth) || const DeepCollectionEquality().equals(other.miscDescriptionWidth, miscDescriptionWidth)) &&
            (identical(other.miscShowFromDate, miscShowFromDate) || const DeepCollectionEquality().equals(other.miscShowFromDate, miscShowFromDate)) &&
            (identical(other.miscShowFromTime, miscShowFromTime) || const DeepCollectionEquality().equals(other.miscShowFromTime, miscShowFromTime)) &&
            (identical(other.miscShowToDate, miscShowToDate) || const DeepCollectionEquality().equals(other.miscShowToDate, miscShowToDate)) &&
            (identical(other.miscShowToTime, miscShowToTime) || const DeepCollectionEquality().equals(other.miscShowToTime, miscShowToTime)) &&
            (identical(other.miscShowBillablePeriods, miscShowBillablePeriods) || const DeepCollectionEquality().equals(other.miscShowBillablePeriods, miscShowBillablePeriods)) &&
            (identical(other.miscShowSubQuantity, miscShowSubQuantity) || const DeepCollectionEquality().equals(other.miscShowSubQuantity, miscShowSubQuantity)) &&
            (identical(other.miscShowWeeksAndDays, miscShowWeeksAndDays) || const DeepCollectionEquality().equals(other.miscShowWeeksAndDays, miscShowWeeksAndDays)) &&
            (identical(other.miscShowMonthsAndDays, miscShowMonthsAndDays) || const DeepCollectionEquality().equals(other.miscShowMonthsAndDays, miscShowMonthsAndDays)) &&
            (identical(other.miscShowUnit, miscShowUnit) || const DeepCollectionEquality().equals(other.miscShowUnit, miscShowUnit)) &&
            (identical(other.miscShowRate, miscShowRate) || const DeepCollectionEquality().equals(other.miscShowRate, miscShowRate)) &&
            (identical(other.miscShowCost, miscShowCost) || const DeepCollectionEquality().equals(other.miscShowCost, miscShowCost)) &&
            (identical(other.miscShowPeriodCostExtended, miscShowPeriodCostExtended) || const DeepCollectionEquality().equals(other.miscShowPeriodCostExtended, miscShowPeriodCostExtended)) &&
            (identical(other.miscShowDiscountPercent, miscShowDiscountPercent) || const DeepCollectionEquality().equals(other.miscShowDiscountPercent, miscShowDiscountPercent)) &&
            (identical(other.miscShowUnitDiscountAmount, miscShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowUnitDiscountAmount, miscShowUnitDiscountAmount)) &&
            (identical(other.miscShowUnitExtended, miscShowUnitExtended) || const DeepCollectionEquality().equals(other.miscShowUnitExtended, miscShowUnitExtended)) &&
            (identical(other.miscShowWeeklyDiscountAmount, miscShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowWeeklyDiscountAmount, miscShowWeeklyDiscountAmount)) &&
            (identical(other.miscShowWeeklyExtended, miscShowWeeklyExtended) || const DeepCollectionEquality().equals(other.miscShowWeeklyExtended, miscShowWeeklyExtended)) &&
            (identical(other.miscShowMonthlyDiscountAmount, miscShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowMonthlyDiscountAmount, miscShowMonthlyDiscountAmount)) &&
            (identical(other.miscShowMonthlyExtended, miscShowMonthlyExtended) || const DeepCollectionEquality().equals(other.miscShowMonthlyExtended, miscShowMonthlyExtended)) &&
            (identical(other.miscShowPeriodDiscountAmount, miscShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowPeriodDiscountAmount, miscShowPeriodDiscountAmount)) &&
            (identical(other.miscShowPeriodExtended, miscShowPeriodExtended) || const DeepCollectionEquality().equals(other.miscShowPeriodExtended, miscShowPeriodExtended)) &&
            (identical(other.miscShowWarehouse, miscShowWarehouse) || const DeepCollectionEquality().equals(other.miscShowWarehouse, miscShowWarehouse)) &&
            (identical(other.miscShowTaxable, miscShowTaxable) || const DeepCollectionEquality().equals(other.miscShowTaxable, miscShowTaxable)) &&
            (identical(other.miscShowNotes, miscShowNotes) || const DeepCollectionEquality().equals(other.miscShowNotes, miscShowNotes)) &&
            (identical(other.miscDateStamp, miscDateStamp) || const DeepCollectionEquality().equals(other.miscDateStamp, miscDateStamp)) &&
            (identical(other.rentalSaleShowBarCode, rentalSaleShowBarCode) || const DeepCollectionEquality().equals(other.rentalSaleShowBarCode, rentalSaleShowBarCode)) &&
            (identical(other.rentalSaleShowSerialNumber, rentalSaleShowSerialNumber) || const DeepCollectionEquality().equals(other.rentalSaleShowSerialNumber, rentalSaleShowSerialNumber)) &&
            (identical(other.rentalSaleShowICode, rentalSaleShowICode) || const DeepCollectionEquality().equals(other.rentalSaleShowICode, rentalSaleShowICode)) &&
            (identical(other.rentalSaleICodeWidth, rentalSaleICodeWidth) || const DeepCollectionEquality().equals(other.rentalSaleICodeWidth, rentalSaleICodeWidth)) &&
            (identical(other.rentalSaleShowDescription, rentalSaleShowDescription) || const DeepCollectionEquality().equals(other.rentalSaleShowDescription, rentalSaleShowDescription)) &&
            (identical(other.rentalSaleDescriptionWidth, rentalSaleDescriptionWidth) || const DeepCollectionEquality().equals(other.rentalSaleDescriptionWidth, rentalSaleDescriptionWidth)) &&
            (identical(other.rentalSaleShowPickDate, rentalSaleShowPickDate) || const DeepCollectionEquality().equals(other.rentalSaleShowPickDate, rentalSaleShowPickDate)) &&
            (identical(other.rentalSaleShowPickTime, rentalSaleShowPickTime) || const DeepCollectionEquality().equals(other.rentalSaleShowPickTime, rentalSaleShowPickTime)) &&
            (identical(other.rentalSaleShowAvailableQuantity, rentalSaleShowAvailableQuantity) || const DeepCollectionEquality().equals(other.rentalSaleShowAvailableQuantity, rentalSaleShowAvailableQuantity)) &&
            (identical(other.rentalSaleShowConflictDate, rentalSaleShowConflictDate) || const DeepCollectionEquality().equals(other.rentalSaleShowConflictDate, rentalSaleShowConflictDate)) &&
            (identical(other.rentalSaleShowUnit, rentalSaleShowUnit) || const DeepCollectionEquality().equals(other.rentalSaleShowUnit, rentalSaleShowUnit)) &&
            (identical(other.rentalSaleShowRate, rentalSaleShowRate) || const DeepCollectionEquality().equals(other.rentalSaleShowRate, rentalSaleShowRate)) &&
            (identical(other.rentalSaleShowCost, rentalSaleShowCost) || const DeepCollectionEquality().equals(other.rentalSaleShowCost, rentalSaleShowCost)) &&
            (identical(other.rentalSaleShowPeriodCostExtended, rentalSaleShowPeriodCostExtended) || const DeepCollectionEquality().equals(other.rentalSaleShowPeriodCostExtended, rentalSaleShowPeriodCostExtended)) &&
            (identical(other.rentalSaleShowDiscountPercent, rentalSaleShowDiscountPercent) || const DeepCollectionEquality().equals(other.rentalSaleShowDiscountPercent, rentalSaleShowDiscountPercent)) &&
            (identical(other.rentalSaleShowUnitDiscountAmount, rentalSaleShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.rentalSaleShowUnitDiscountAmount, rentalSaleShowUnitDiscountAmount)) &&
            (identical(other.rentalSaleShowUnitExtended, rentalSaleShowUnitExtended) || const DeepCollectionEquality().equals(other.rentalSaleShowUnitExtended, rentalSaleShowUnitExtended)) &&
            (identical(other.rentalSaleShowPeriodDiscountAmount, rentalSaleShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.rentalSaleShowPeriodDiscountAmount, rentalSaleShowPeriodDiscountAmount)) &&
            (identical(other.rentalSaleShowPeriodExtended, rentalSaleShowPeriodExtended) || const DeepCollectionEquality().equals(other.rentalSaleShowPeriodExtended, rentalSaleShowPeriodExtended)) &&
            (identical(other.rentalSaleShowWarehouse, rentalSaleShowWarehouse) || const DeepCollectionEquality().equals(other.rentalSaleShowWarehouse, rentalSaleShowWarehouse)) &&
            (identical(other.rentalSaleShowTaxable, rentalSaleShowTaxable) || const DeepCollectionEquality().equals(other.rentalSaleShowTaxable, rentalSaleShowTaxable)) &&
            (identical(other.rentalSaleShowNotes, rentalSaleShowNotes) || const DeepCollectionEquality().equals(other.rentalSaleShowNotes, rentalSaleShowNotes)) &&
            (identical(other.rentalSaleDateStamp, rentalSaleDateStamp) || const DeepCollectionEquality().equals(other.rentalSaleDateStamp, rentalSaleDateStamp)) &&
            (identical(other.lossAndDamageShowOrderNumber, lossAndDamageShowOrderNumber) || const DeepCollectionEquality().equals(other.lossAndDamageShowOrderNumber, lossAndDamageShowOrderNumber)) &&
            (identical(other.lossAndDamageShowRepairOrderNumber, lossAndDamageShowRepairOrderNumber) || const DeepCollectionEquality().equals(other.lossAndDamageShowRepairOrderNumber, lossAndDamageShowRepairOrderNumber)) &&
            (identical(other.lossAndDamageShowBarCode, lossAndDamageShowBarCode) || const DeepCollectionEquality().equals(other.lossAndDamageShowBarCode, lossAndDamageShowBarCode)) &&
            (identical(other.lossAndDamageShowSerialNumber, lossAndDamageShowSerialNumber) || const DeepCollectionEquality().equals(other.lossAndDamageShowSerialNumber, lossAndDamageShowSerialNumber)) &&
            (identical(other.lossAndDamageShowICode, lossAndDamageShowICode) || const DeepCollectionEquality().equals(other.lossAndDamageShowICode, lossAndDamageShowICode)) &&
            (identical(other.lossAndDamageICodeWidth, lossAndDamageICodeWidth) || const DeepCollectionEquality().equals(other.lossAndDamageICodeWidth, lossAndDamageICodeWidth)) &&
            (identical(other.lossAndDamageShowDescription, lossAndDamageShowDescription) || const DeepCollectionEquality().equals(other.lossAndDamageShowDescription, lossAndDamageShowDescription)) &&
            (identical(other.lossAndDamageDescriptionWidth, lossAndDamageDescriptionWidth) || const DeepCollectionEquality().equals(other.lossAndDamageDescriptionWidth, lossAndDamageDescriptionWidth)) &&
            (identical(other.lossAndDamageShowUnit, lossAndDamageShowUnit) || const DeepCollectionEquality().equals(other.lossAndDamageShowUnit, lossAndDamageShowUnit)) &&
            (identical(other.lossAndDamageShowRate, lossAndDamageShowRate) || const DeepCollectionEquality().equals(other.lossAndDamageShowRate, lossAndDamageShowRate)) &&
            (identical(other.lossAndDamageShowCost, lossAndDamageShowCost) || const DeepCollectionEquality().equals(other.lossAndDamageShowCost, lossAndDamageShowCost)) &&
            (identical(other.lossAndDamageShowDiscountPercent, lossAndDamageShowDiscountPercent) || const DeepCollectionEquality().equals(other.lossAndDamageShowDiscountPercent, lossAndDamageShowDiscountPercent)) &&
            (identical(other.lossAndDamageShowUnitDiscountAmount, lossAndDamageShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.lossAndDamageShowUnitDiscountAmount, lossAndDamageShowUnitDiscountAmount)) &&
            (identical(other.lossAndDamageShowUnitExtended, lossAndDamageShowUnitExtended) || const DeepCollectionEquality().equals(other.lossAndDamageShowUnitExtended, lossAndDamageShowUnitExtended)) &&
            (identical(other.lossAndDamageShowPeriodDiscountAmount, lossAndDamageShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.lossAndDamageShowPeriodDiscountAmount, lossAndDamageShowPeriodDiscountAmount)) &&
            (identical(other.lossAndDamageShowPeriodExtended, lossAndDamageShowPeriodExtended) || const DeepCollectionEquality().equals(other.lossAndDamageShowPeriodExtended, lossAndDamageShowPeriodExtended)) &&
            (identical(other.lossAndDamageShowWarehouse, lossAndDamageShowWarehouse) || const DeepCollectionEquality().equals(other.lossAndDamageShowWarehouse, lossAndDamageShowWarehouse)) &&
            (identical(other.lossAndDamageShowTaxable, lossAndDamageShowTaxable) || const DeepCollectionEquality().equals(other.lossAndDamageShowTaxable, lossAndDamageShowTaxable)) &&
            (identical(other.lossAndDamageShowNotes, lossAndDamageShowNotes) || const DeepCollectionEquality().equals(other.lossAndDamageShowNotes, lossAndDamageShowNotes)) &&
            (identical(other.lossAndDamageDateStamp, lossAndDamageDateStamp) || const DeepCollectionEquality().equals(other.lossAndDamageDateStamp, lossAndDamageDateStamp)) &&
            (identical(other.addInstallationAndStrikeFee, addInstallationAndStrikeFee) || const DeepCollectionEquality().equals(other.addInstallationAndStrikeFee, addInstallationAndStrikeFee)) &&
            (identical(other.installationAndStrikeFeeRateId, installationAndStrikeFeeRateId) || const DeepCollectionEquality().equals(other.installationAndStrikeFeeRateId, installationAndStrikeFeeRateId)) &&
            (identical(other.installationAndStrikeFeeICode, installationAndStrikeFeeICode) || const DeepCollectionEquality().equals(other.installationAndStrikeFeeICode, installationAndStrikeFeeICode)) &&
            (identical(other.installationAndStrikeFeeDescription, installationAndStrikeFeeDescription) || const DeepCollectionEquality().equals(other.installationAndStrikeFeeDescription, installationAndStrikeFeeDescription)) &&
            (identical(other.installationAndStrikeFeePercent, installationAndStrikeFeePercent) || const DeepCollectionEquality().equals(other.installationAndStrikeFeePercent, installationAndStrikeFeePercent)) &&
            (identical(other.installationAndStrikeFeeBasedOn, installationAndStrikeFeeBasedOn) || const DeepCollectionEquality().equals(other.installationAndStrikeFeeBasedOn, installationAndStrikeFeeBasedOn)) &&
            (identical(other.addManagementAndServiceFee, addManagementAndServiceFee) || const DeepCollectionEquality().equals(other.addManagementAndServiceFee, addManagementAndServiceFee)) &&
            (identical(other.managementAndServiceFeeRateId, managementAndServiceFeeRateId) || const DeepCollectionEquality().equals(other.managementAndServiceFeeRateId, managementAndServiceFeeRateId)) &&
            (identical(other.managementAndServiceFeeICode, managementAndServiceFeeICode) || const DeepCollectionEquality().equals(other.managementAndServiceFeeICode, managementAndServiceFeeICode)) &&
            (identical(other.managementAndServiceFeeDescription, managementAndServiceFeeDescription) || const DeepCollectionEquality().equals(other.managementAndServiceFeeDescription, managementAndServiceFeeDescription)) &&
            (identical(other.managementAndServiceFeePercent, managementAndServiceFeePercent) || const DeepCollectionEquality().equals(other.managementAndServiceFeePercent, managementAndServiceFeePercent)) &&
            (identical(other.managementAndServiceFeeBasedOn, managementAndServiceFeeBasedOn) || const DeepCollectionEquality().equals(other.managementAndServiceFeeBasedOn, managementAndServiceFeeBasedOn)) &&
            (identical(other.defaultRentalSalePrice, defaultRentalSalePrice) || const DeepCollectionEquality().equals(other.defaultRentalSalePrice, defaultRentalSalePrice)) &&
            (identical(other.quikPayDiscount, quikPayDiscount) || const DeepCollectionEquality().equals(other.quikPayDiscount, quikPayDiscount)) &&
            (identical(other.quikPayDiscountType, quikPayDiscountType) || const DeepCollectionEquality().equals(other.quikPayDiscountType, quikPayDiscountType)) &&
            (identical(other.quikPayDiscountDays, quikPayDiscountDays) || const DeepCollectionEquality().equals(other.quikPayDiscountDays, quikPayDiscountDays)) &&
            (identical(other.quikPayDiscountPercent, quikPayDiscountPercent) || const DeepCollectionEquality().equals(other.quikPayDiscountPercent, quikPayDiscountPercent)) &&
            (identical(other.quikPayDiscountExcludeSubs, quikPayDiscountExcludeSubs) || const DeepCollectionEquality().equals(other.quikPayDiscountExcludeSubs, quikPayDiscountExcludeSubs)) &&
            (identical(other.quikConfirmDiscount, quikConfirmDiscount) || const DeepCollectionEquality().equals(other.quikConfirmDiscount, quikConfirmDiscount)) &&
            (identical(other.quikConfirmDiscountPercent, quikConfirmDiscountPercent) || const DeepCollectionEquality().equals(other.quikConfirmDiscountPercent, quikConfirmDiscountPercent)) &&
            (identical(other.quikConfirmDiscountDays, quikConfirmDiscountDays) || const DeepCollectionEquality().equals(other.quikConfirmDiscountDays, quikConfirmDiscountDays)) &&
            (identical(other.disableCostGl, disableCostGl) || const DeepCollectionEquality().equals(other.disableCostGl, disableCostGl)) &&
            (identical(other.excludeFromTopSalesDashboard, excludeFromTopSalesDashboard) || const DeepCollectionEquality().equals(other.excludeFromTopSalesDashboard, excludeFromTopSalesDashboard)) &&
            (identical(other.separatePackageOnQuoteOrder, separatePackageOnQuoteOrder) || const DeepCollectionEquality().equals(other.separatePackageOnQuoteOrder, separatePackageOnQuoteOrder)) &&
            (identical(other.orderby, orderby) || const DeepCollectionEquality().equals(other.orderby, orderby)) &&
            (identical(other.subAllShortagesSubMiscellaneous, subAllShortagesSubMiscellaneous) || const DeepCollectionEquality().equals(other.subAllShortagesSubMiscellaneous, subAllShortagesSubMiscellaneous)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.combinedShowFields, combinedShowFields) || const DeepCollectionEquality().equals(other.combinedShowFields, combinedShowFields)) &&
            (identical(other.rentalShowFields, rentalShowFields) || const DeepCollectionEquality().equals(other.rentalShowFields, rentalShowFields)) &&
            (identical(other.salesShowFields, salesShowFields) || const DeepCollectionEquality().equals(other.salesShowFields, salesShowFields)) &&
            (identical(other.miscShowFields, miscShowFields) || const DeepCollectionEquality().equals(other.miscShowFields, miscShowFields)) &&
            (identical(other.laborShowFields, laborShowFields) || const DeepCollectionEquality().equals(other.laborShowFields, laborShowFields)) &&
            (identical(other.rentalSaleShowFields, rentalSaleShowFields) || const DeepCollectionEquality().equals(other.rentalSaleShowFields, rentalSaleShowFields)) &&
            (identical(other.lossAndDamageShowFields, lossAndDamageShowFields) || const DeepCollectionEquality().equals(other.lossAndDamageShowFields, lossAndDamageShowFields)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOrderSettingsOrderTypeOrderTypeExtension
    on WebApiModulesSettingsOrderSettingsOrderTypeOrderType {
  WebApiModulesSettingsOrderSettingsOrderTypeOrderType copyWith(
      {String? orderTypeId,
      String? orderType,
      String? ordType,
      String? defaultPickTime,
      String? defaultFromTime,
      String? defaultToTime,
      String? dailyScheduleDefaultStartTime,
      String? dailyScheduleDefaultStopTime,
      bool? isMasterSubOrderType,
      bool? combineActivityTabs,
      bool? defaultManualSort,
      String? determineQuantitiesToBillBasedOn,
      bool? allowNesting,
      bool? rentalShowICode,
      int? rentalICodeWidth,
      bool? rentalShowDescription,
      int? rentalDescriptionWidth,
      bool? rentalShowPickDate,
      bool? rentalShowPickTime,
      bool? rentalShowFromDate,
      bool? rentalShowFromTime,
      bool? rentalShowToDate,
      bool? rentalShowToTime,
      bool? rentalShowBillablePeriods,
      bool? rentalShowEpisodes,
      bool? rentalShowSubQuantity,
      bool? rentalShowAvailableQuantity,
      bool? rentalShowConflictDate,
      bool? rentalShowAvailableQuantityRegion,
      bool? rentalShowConflictDateRegion,
      bool? rentalShowAvailableQuantityAllWarehouses,
      bool? rentalShowConflictDateAllWarehouses,
      bool? rentalShowReservedItems,
      bool? rentalShowConsignmentQuantity,
      bool? rentalShowConsignmentAvailableQuantity,
      bool? rentalShowConsignmentConflictDate,
      bool? rentalShowRate,
      bool? rentalShowDaysPerWeek,
      bool? rentalShowPremiumPercent,
      bool? rentalShowUnit,
      bool? rentalShowCost,
      bool? rentalShowPeriodCostExtended,
      bool? rentalShowDiscountPercent,
      bool? rentalShowMarkupPercent,
      bool? rentalShowMarginPercent,
      bool? rentalShowUnitDiscountAmount,
      bool? rentalShowUnitExtended,
      bool? rentalShowWeeklyDiscountAmount,
      bool? rentalShowWeeklyExtended,
      bool? rentalShowEpisodeExtended,
      bool? rentalShowEpisodeDiscountAmount,
      bool? rentalShowMonthlyDiscountAmount,
      bool? rentalShowMonthlyExtended,
      bool? rentalShowPeriodDiscountAmount,
      bool? rentalShowPeriodExtended,
      bool? rentalShowWarehouse,
      bool? rentalShowTaxable,
      bool? rentalShowNotes,
      bool? rentalShowReturnToWarehouse,
      String? rentalDateStamp,
      bool? allowRoundTripRentals,
      bool? salesShowICode,
      int? salesICodeWidth,
      bool? salesShowDescription,
      int? salesDescriptionWidth,
      bool? salesShowManufacturerPartNumber,
      int? salesManufacturerPartNumberWidth,
      bool? salesShowPickDate,
      bool? salesShowPickTime,
      bool? salesShowFromDate,
      bool? salesShowFromTime,
      bool? salesShowSubQuantity,
      bool? salesShowCost,
      bool? salesShowRate,
      bool? salesShowAvailableQuantity,
      bool? salesShowConflictDate,
      bool? salesShowAvailableQuantityRegion,
      bool? salesShowConflictDateRegion,
      bool? salesShowAvailableQuantityAllWarehouses,
      bool? salesShowConflictDateAllWarehouses,
      bool? salesShowMarkupPercent,
      bool? salesShowMarginPercent,
      bool? salesShowUnit,
      bool? salesShowPeriodCostExtended,
      bool? salesShowDiscountPercent,
      bool? salesShowUnitDiscountAmount,
      bool? salesShowUnitExtended,
      bool? salesShowPeriodDiscountAmount,
      bool? salesShowPeriodExtended,
      bool? salesShowVariancePercent,
      bool? salesShowVarianceExtended,
      bool? salesShowWarehouse,
      bool? salesShowTaxable,
      bool? salesShowNotes,
      String? salesDateStamp,
      String? salesInventoryPrice,
      String? salesInventoryCost,
      bool? facilityShowDescription,
      int? facilityDescriptionWidth,
      bool? facilityShowFromDate,
      bool? facilityShowFromTime,
      bool? facilityShowToDate,
      bool? facilityShowToTime,
      bool? facilityShowWeeksAndDays,
      bool? facilityShowMonthsAndDays,
      bool? facilityShowBillablePeriods,
      bool? facilityShowRate,
      bool? facilityShowDaysPerWeek,
      bool? facilityShowDiscountPercent,
      bool? facilityShowSplit,
      bool? facilityShowUnit,
      bool? facilityShowUnitDiscountAmount,
      bool? facilityShowUnitExtended,
      bool? facilityShowWeeklyDiscountAmount,
      bool? facilityShowWeeklyExtended,
      bool? facilityShowMonthlyDiscountAmount,
      bool? facilityShowMonthlyExtended,
      bool? facilityShowPeriodDiscountAmount,
      bool? facilityShowPeriodExtended,
      bool? facilityShowTaxable,
      bool? facilityShowNotes,
      String? facilityDateStamp,
      String? facilityDescription,
      bool? vehicleShowDescription,
      int? vehicleDescriptionWidth,
      bool? vehicleShowVehicleNumber,
      bool? vehicleShowPickDate,
      bool? vehicleShowPickTime,
      bool? vehicleShowFromDate,
      bool? vehicleShowFromTime,
      bool? vehicleShowToDate,
      bool? vehicleShowToTime,
      bool? vehicleShowBillablePeriods,
      bool? vehicleShowSubQuantity,
      bool? vehicleShowAvailableQuantity,
      bool? vehicleShowConflictDate,
      bool? vehicleShowUnit,
      bool? vehicleShowRate,
      bool? vehicleShowDaysPerWeek,
      bool? vehicleShowCost,
      bool? vehicleShowWeeklyCostExtended,
      bool? vehicleShowMonthlyCostExtended,
      bool? vehicleShowPeriodCostExtended,
      bool? vehicleShowDiscountPercent,
      bool? vehicleShowUnitDiscountAmount,
      bool? vehicleShowUnitExtended,
      bool? vehicleShowWeeklyDiscountAmount,
      bool? vehicleShowWeeklyExtended,
      bool? vehicleShowMonthlyDiscountAmount,
      bool? vehicleShowMonthlyExtended,
      bool? vehicleShowPeriodDiscountAmount,
      bool? vehicleShowPeriodExtended,
      bool? vehicleShowWarehouse,
      bool? vehicleShowReturnToWarehouse,
      bool? vehicleShowTaxable,
      bool? vehicleShowNotes,
      String? vehicleDateStamp,
      bool? laborShowICode,
      int? laborICodeWidth,
      bool? laborShowDescription,
      int? laborDescriptionWidth,
      bool? laborShowOrderActivity,
      bool? laborShowCrewName,
      bool? laborShowFromDate,
      bool? laborShowFromTime,
      bool? laborShowToDate,
      bool? laborShowToTime,
      bool? laborShowBillablePeriods,
      bool? laborShowHours,
      bool? laborShowSubQuantity,
      bool? laborShowCost,
      bool? laborShowRate,
      bool? laborShowPeriodCostExtended,
      bool? laborShowDiscountPercent,
      bool? laborShowUnit,
      bool? laborShowUnitDiscountAmount,
      bool? laborShowUnitExtended,
      bool? laborShowWeeklyDiscountAmount,
      bool? laborShowWeeklyExtended,
      bool? laborShowMonthlyDiscountAmount,
      bool? laborShowMonthlyExtended,
      bool? laborShowPeriodDiscountAmount,
      bool? laborShowPeriodExtended,
      bool? laborShowWarehouse,
      bool? laborShowTaxable,
      bool? laborShowNotes,
      String? laborDateStamp,
      bool? hideCrewBreaks,
      bool? break1Paid,
      bool? break2Paid,
      bool? break3Paid,
      bool? miscShowICode,
      int? miscICodeWidth,
      bool? miscShowDescription,
      int? miscDescriptionWidth,
      bool? miscShowFromDate,
      bool? miscShowFromTime,
      bool? miscShowToDate,
      bool? miscShowToTime,
      bool? miscShowBillablePeriods,
      bool? miscShowSubQuantity,
      bool? miscShowWeeksAndDays,
      bool? miscShowMonthsAndDays,
      bool? miscShowUnit,
      bool? miscShowRate,
      bool? miscShowCost,
      bool? miscShowPeriodCostExtended,
      bool? miscShowDiscountPercent,
      bool? miscShowUnitDiscountAmount,
      bool? miscShowUnitExtended,
      bool? miscShowWeeklyDiscountAmount,
      bool? miscShowWeeklyExtended,
      bool? miscShowMonthlyDiscountAmount,
      bool? miscShowMonthlyExtended,
      bool? miscShowPeriodDiscountAmount,
      bool? miscShowPeriodExtended,
      bool? miscShowWarehouse,
      bool? miscShowTaxable,
      bool? miscShowNotes,
      String? miscDateStamp,
      bool? rentalSaleShowBarCode,
      bool? rentalSaleShowSerialNumber,
      bool? rentalSaleShowICode,
      int? rentalSaleICodeWidth,
      bool? rentalSaleShowDescription,
      int? rentalSaleDescriptionWidth,
      bool? rentalSaleShowPickDate,
      bool? rentalSaleShowPickTime,
      bool? rentalSaleShowAvailableQuantity,
      bool? rentalSaleShowConflictDate,
      bool? rentalSaleShowUnit,
      bool? rentalSaleShowRate,
      bool? rentalSaleShowCost,
      bool? rentalSaleShowPeriodCostExtended,
      bool? rentalSaleShowDiscountPercent,
      bool? rentalSaleShowUnitDiscountAmount,
      bool? rentalSaleShowUnitExtended,
      bool? rentalSaleShowPeriodDiscountAmount,
      bool? rentalSaleShowPeriodExtended,
      bool? rentalSaleShowWarehouse,
      bool? rentalSaleShowTaxable,
      bool? rentalSaleShowNotes,
      String? rentalSaleDateStamp,
      bool? lossAndDamageShowOrderNumber,
      bool? lossAndDamageShowRepairOrderNumber,
      bool? lossAndDamageShowBarCode,
      bool? lossAndDamageShowSerialNumber,
      bool? lossAndDamageShowICode,
      int? lossAndDamageICodeWidth,
      bool? lossAndDamageShowDescription,
      int? lossAndDamageDescriptionWidth,
      bool? lossAndDamageShowUnit,
      bool? lossAndDamageShowRate,
      bool? lossAndDamageShowCost,
      bool? lossAndDamageShowDiscountPercent,
      bool? lossAndDamageShowUnitDiscountAmount,
      bool? lossAndDamageShowUnitExtended,
      bool? lossAndDamageShowPeriodDiscountAmount,
      bool? lossAndDamageShowPeriodExtended,
      bool? lossAndDamageShowWarehouse,
      bool? lossAndDamageShowTaxable,
      bool? lossAndDamageShowNotes,
      String? lossAndDamageDateStamp,
      bool? addInstallationAndStrikeFee,
      String? installationAndStrikeFeeRateId,
      String? installationAndStrikeFeeICode,
      String? installationAndStrikeFeeDescription,
      double? installationAndStrikeFeePercent,
      String? installationAndStrikeFeeBasedOn,
      bool? addManagementAndServiceFee,
      String? managementAndServiceFeeRateId,
      String? managementAndServiceFeeICode,
      String? managementAndServiceFeeDescription,
      double? managementAndServiceFeePercent,
      String? managementAndServiceFeeBasedOn,
      String? defaultRentalSalePrice,
      bool? quikPayDiscount,
      String? quikPayDiscountType,
      int? quikPayDiscountDays,
      double? quikPayDiscountPercent,
      bool? quikPayDiscountExcludeSubs,
      bool? quikConfirmDiscount,
      double? quikConfirmDiscountPercent,
      int? quikConfirmDiscountDays,
      bool? disableCostGl,
      bool? excludeFromTopSalesDashboard,
      bool? separatePackageOnQuoteOrder,
      double? orderby,
      bool? subAllShortagesSubMiscellaneous,
      bool? inactive,
      List<String>? combinedShowFields,
      List<String>? rentalShowFields,
      List<String>? salesShowFields,
      List<String>? miscShowFields,
      List<String>? laborShowFields,
      List<String>? rentalSaleShowFields,
      List<String>? lossAndDamageShowFields,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOrderSettingsOrderTypeOrderType(
        orderTypeId: orderTypeId ?? this.orderTypeId,
        orderType: orderType ?? this.orderType,
        ordType: ordType ?? this.ordType,
        defaultPickTime: defaultPickTime ?? this.defaultPickTime,
        defaultFromTime: defaultFromTime ?? this.defaultFromTime,
        defaultToTime: defaultToTime ?? this.defaultToTime,
        dailyScheduleDefaultStartTime:
            dailyScheduleDefaultStartTime ?? this.dailyScheduleDefaultStartTime,
        dailyScheduleDefaultStopTime:
            dailyScheduleDefaultStopTime ?? this.dailyScheduleDefaultStopTime,
        isMasterSubOrderType: isMasterSubOrderType ?? this.isMasterSubOrderType,
        combineActivityTabs: combineActivityTabs ?? this.combineActivityTabs,
        defaultManualSort: defaultManualSort ?? this.defaultManualSort,
        determineQuantitiesToBillBasedOn: determineQuantitiesToBillBasedOn ??
            this.determineQuantitiesToBillBasedOn,
        allowNesting: allowNesting ?? this.allowNesting,
        rentalShowICode: rentalShowICode ?? this.rentalShowICode,
        rentalICodeWidth: rentalICodeWidth ?? this.rentalICodeWidth,
        rentalShowDescription:
            rentalShowDescription ?? this.rentalShowDescription,
        rentalDescriptionWidth:
            rentalDescriptionWidth ?? this.rentalDescriptionWidth,
        rentalShowPickDate: rentalShowPickDate ?? this.rentalShowPickDate,
        rentalShowPickTime: rentalShowPickTime ?? this.rentalShowPickTime,
        rentalShowFromDate: rentalShowFromDate ?? this.rentalShowFromDate,
        rentalShowFromTime: rentalShowFromTime ?? this.rentalShowFromTime,
        rentalShowToDate: rentalShowToDate ?? this.rentalShowToDate,
        rentalShowToTime: rentalShowToTime ?? this.rentalShowToTime,
        rentalShowBillablePeriods:
            rentalShowBillablePeriods ?? this.rentalShowBillablePeriods,
        rentalShowEpisodes: rentalShowEpisodes ?? this.rentalShowEpisodes,
        rentalShowSubQuantity:
            rentalShowSubQuantity ?? this.rentalShowSubQuantity,
        rentalShowAvailableQuantity:
            rentalShowAvailableQuantity ?? this.rentalShowAvailableQuantity,
        rentalShowConflictDate:
            rentalShowConflictDate ?? this.rentalShowConflictDate,
        rentalShowAvailableQuantityRegion: rentalShowAvailableQuantityRegion ??
            this.rentalShowAvailableQuantityRegion,
        rentalShowConflictDateRegion:
            rentalShowConflictDateRegion ?? this.rentalShowConflictDateRegion,
        rentalShowAvailableQuantityAllWarehouses:
            rentalShowAvailableQuantityAllWarehouses ??
                this.rentalShowAvailableQuantityAllWarehouses,
        rentalShowConflictDateAllWarehouses:
            rentalShowConflictDateAllWarehouses ??
                this.rentalShowConflictDateAllWarehouses,
        rentalShowReservedItems:
            rentalShowReservedItems ?? this.rentalShowReservedItems,
        rentalShowConsignmentQuantity:
            rentalShowConsignmentQuantity ?? this.rentalShowConsignmentQuantity,
        rentalShowConsignmentAvailableQuantity:
            rentalShowConsignmentAvailableQuantity ??
                this.rentalShowConsignmentAvailableQuantity,
        rentalShowConsignmentConflictDate: rentalShowConsignmentConflictDate ??
            this.rentalShowConsignmentConflictDate,
        rentalShowRate: rentalShowRate ?? this.rentalShowRate,
        rentalShowDaysPerWeek:
            rentalShowDaysPerWeek ?? this.rentalShowDaysPerWeek,
        rentalShowPremiumPercent:
            rentalShowPremiumPercent ?? this.rentalShowPremiumPercent,
        rentalShowUnit: rentalShowUnit ?? this.rentalShowUnit,
        rentalShowCost: rentalShowCost ?? this.rentalShowCost,
        rentalShowPeriodCostExtended:
            rentalShowPeriodCostExtended ?? this.rentalShowPeriodCostExtended,
        rentalShowDiscountPercent:
            rentalShowDiscountPercent ?? this.rentalShowDiscountPercent,
        rentalShowMarkupPercent:
            rentalShowMarkupPercent ?? this.rentalShowMarkupPercent,
        rentalShowMarginPercent:
            rentalShowMarginPercent ?? this.rentalShowMarginPercent,
        rentalShowUnitDiscountAmount:
            rentalShowUnitDiscountAmount ?? this.rentalShowUnitDiscountAmount,
        rentalShowUnitExtended:
            rentalShowUnitExtended ?? this.rentalShowUnitExtended,
        rentalShowWeeklyDiscountAmount: rentalShowWeeklyDiscountAmount ??
            this.rentalShowWeeklyDiscountAmount,
        rentalShowWeeklyExtended:
            rentalShowWeeklyExtended ?? this.rentalShowWeeklyExtended,
        rentalShowEpisodeExtended:
            rentalShowEpisodeExtended ?? this.rentalShowEpisodeExtended,
        rentalShowEpisodeDiscountAmount: rentalShowEpisodeDiscountAmount ??
            this.rentalShowEpisodeDiscountAmount,
        rentalShowMonthlyDiscountAmount: rentalShowMonthlyDiscountAmount ??
            this.rentalShowMonthlyDiscountAmount,
        rentalShowMonthlyExtended:
            rentalShowMonthlyExtended ?? this.rentalShowMonthlyExtended,
        rentalShowPeriodDiscountAmount: rentalShowPeriodDiscountAmount ??
            this.rentalShowPeriodDiscountAmount,
        rentalShowPeriodExtended:
            rentalShowPeriodExtended ?? this.rentalShowPeriodExtended,
        rentalShowWarehouse: rentalShowWarehouse ?? this.rentalShowWarehouse,
        rentalShowTaxable: rentalShowTaxable ?? this.rentalShowTaxable,
        rentalShowNotes: rentalShowNotes ?? this.rentalShowNotes,
        rentalShowReturnToWarehouse:
            rentalShowReturnToWarehouse ?? this.rentalShowReturnToWarehouse,
        rentalDateStamp: rentalDateStamp ?? this.rentalDateStamp,
        allowRoundTripRentals: allowRoundTripRentals ?? this.allowRoundTripRentals,
        salesShowICode: salesShowICode ?? this.salesShowICode,
        salesICodeWidth: salesICodeWidth ?? this.salesICodeWidth,
        salesShowDescription: salesShowDescription ?? this.salesShowDescription,
        salesDescriptionWidth: salesDescriptionWidth ?? this.salesDescriptionWidth,
        salesShowManufacturerPartNumber: salesShowManufacturerPartNumber ?? this.salesShowManufacturerPartNumber,
        salesManufacturerPartNumberWidth: salesManufacturerPartNumberWidth ?? this.salesManufacturerPartNumberWidth,
        salesShowPickDate: salesShowPickDate ?? this.salesShowPickDate,
        salesShowPickTime: salesShowPickTime ?? this.salesShowPickTime,
        salesShowFromDate: salesShowFromDate ?? this.salesShowFromDate,
        salesShowFromTime: salesShowFromTime ?? this.salesShowFromTime,
        salesShowSubQuantity: salesShowSubQuantity ?? this.salesShowSubQuantity,
        salesShowCost: salesShowCost ?? this.salesShowCost,
        salesShowRate: salesShowRate ?? this.salesShowRate,
        salesShowAvailableQuantity: salesShowAvailableQuantity ?? this.salesShowAvailableQuantity,
        salesShowConflictDate: salesShowConflictDate ?? this.salesShowConflictDate,
        salesShowAvailableQuantityRegion: salesShowAvailableQuantityRegion ?? this.salesShowAvailableQuantityRegion,
        salesShowConflictDateRegion: salesShowConflictDateRegion ?? this.salesShowConflictDateRegion,
        salesShowAvailableQuantityAllWarehouses: salesShowAvailableQuantityAllWarehouses ?? this.salesShowAvailableQuantityAllWarehouses,
        salesShowConflictDateAllWarehouses: salesShowConflictDateAllWarehouses ?? this.salesShowConflictDateAllWarehouses,
        salesShowMarkupPercent: salesShowMarkupPercent ?? this.salesShowMarkupPercent,
        salesShowMarginPercent: salesShowMarginPercent ?? this.salesShowMarginPercent,
        salesShowUnit: salesShowUnit ?? this.salesShowUnit,
        salesShowPeriodCostExtended: salesShowPeriodCostExtended ?? this.salesShowPeriodCostExtended,
        salesShowDiscountPercent: salesShowDiscountPercent ?? this.salesShowDiscountPercent,
        salesShowUnitDiscountAmount: salesShowUnitDiscountAmount ?? this.salesShowUnitDiscountAmount,
        salesShowUnitExtended: salesShowUnitExtended ?? this.salesShowUnitExtended,
        salesShowPeriodDiscountAmount: salesShowPeriodDiscountAmount ?? this.salesShowPeriodDiscountAmount,
        salesShowPeriodExtended: salesShowPeriodExtended ?? this.salesShowPeriodExtended,
        salesShowVariancePercent: salesShowVariancePercent ?? this.salesShowVariancePercent,
        salesShowVarianceExtended: salesShowVarianceExtended ?? this.salesShowVarianceExtended,
        salesShowWarehouse: salesShowWarehouse ?? this.salesShowWarehouse,
        salesShowTaxable: salesShowTaxable ?? this.salesShowTaxable,
        salesShowNotes: salesShowNotes ?? this.salesShowNotes,
        salesDateStamp: salesDateStamp ?? this.salesDateStamp,
        salesInventoryPrice: salesInventoryPrice ?? this.salesInventoryPrice,
        salesInventoryCost: salesInventoryCost ?? this.salesInventoryCost,
        facilityShowDescription: facilityShowDescription ?? this.facilityShowDescription,
        facilityDescriptionWidth: facilityDescriptionWidth ?? this.facilityDescriptionWidth,
        facilityShowFromDate: facilityShowFromDate ?? this.facilityShowFromDate,
        facilityShowFromTime: facilityShowFromTime ?? this.facilityShowFromTime,
        facilityShowToDate: facilityShowToDate ?? this.facilityShowToDate,
        facilityShowToTime: facilityShowToTime ?? this.facilityShowToTime,
        facilityShowWeeksAndDays: facilityShowWeeksAndDays ?? this.facilityShowWeeksAndDays,
        facilityShowMonthsAndDays: facilityShowMonthsAndDays ?? this.facilityShowMonthsAndDays,
        facilityShowBillablePeriods: facilityShowBillablePeriods ?? this.facilityShowBillablePeriods,
        facilityShowRate: facilityShowRate ?? this.facilityShowRate,
        facilityShowDaysPerWeek: facilityShowDaysPerWeek ?? this.facilityShowDaysPerWeek,
        facilityShowDiscountPercent: facilityShowDiscountPercent ?? this.facilityShowDiscountPercent,
        facilityShowSplit: facilityShowSplit ?? this.facilityShowSplit,
        facilityShowUnit: facilityShowUnit ?? this.facilityShowUnit,
        facilityShowUnitDiscountAmount: facilityShowUnitDiscountAmount ?? this.facilityShowUnitDiscountAmount,
        facilityShowUnitExtended: facilityShowUnitExtended ?? this.facilityShowUnitExtended,
        facilityShowWeeklyDiscountAmount: facilityShowWeeklyDiscountAmount ?? this.facilityShowWeeklyDiscountAmount,
        facilityShowWeeklyExtended: facilityShowWeeklyExtended ?? this.facilityShowWeeklyExtended,
        facilityShowMonthlyDiscountAmount: facilityShowMonthlyDiscountAmount ?? this.facilityShowMonthlyDiscountAmount,
        facilityShowMonthlyExtended: facilityShowMonthlyExtended ?? this.facilityShowMonthlyExtended,
        facilityShowPeriodDiscountAmount: facilityShowPeriodDiscountAmount ?? this.facilityShowPeriodDiscountAmount,
        facilityShowPeriodExtended: facilityShowPeriodExtended ?? this.facilityShowPeriodExtended,
        facilityShowTaxable: facilityShowTaxable ?? this.facilityShowTaxable,
        facilityShowNotes: facilityShowNotes ?? this.facilityShowNotes,
        facilityDateStamp: facilityDateStamp ?? this.facilityDateStamp,
        facilityDescription: facilityDescription ?? this.facilityDescription,
        vehicleShowDescription: vehicleShowDescription ?? this.vehicleShowDescription,
        vehicleDescriptionWidth: vehicleDescriptionWidth ?? this.vehicleDescriptionWidth,
        vehicleShowVehicleNumber: vehicleShowVehicleNumber ?? this.vehicleShowVehicleNumber,
        vehicleShowPickDate: vehicleShowPickDate ?? this.vehicleShowPickDate,
        vehicleShowPickTime: vehicleShowPickTime ?? this.vehicleShowPickTime,
        vehicleShowFromDate: vehicleShowFromDate ?? this.vehicleShowFromDate,
        vehicleShowFromTime: vehicleShowFromTime ?? this.vehicleShowFromTime,
        vehicleShowToDate: vehicleShowToDate ?? this.vehicleShowToDate,
        vehicleShowToTime: vehicleShowToTime ?? this.vehicleShowToTime,
        vehicleShowBillablePeriods: vehicleShowBillablePeriods ?? this.vehicleShowBillablePeriods,
        vehicleShowSubQuantity: vehicleShowSubQuantity ?? this.vehicleShowSubQuantity,
        vehicleShowAvailableQuantity: vehicleShowAvailableQuantity ?? this.vehicleShowAvailableQuantity,
        vehicleShowConflictDate: vehicleShowConflictDate ?? this.vehicleShowConflictDate,
        vehicleShowUnit: vehicleShowUnit ?? this.vehicleShowUnit,
        vehicleShowRate: vehicleShowRate ?? this.vehicleShowRate,
        vehicleShowDaysPerWeek: vehicleShowDaysPerWeek ?? this.vehicleShowDaysPerWeek,
        vehicleShowCost: vehicleShowCost ?? this.vehicleShowCost,
        vehicleShowWeeklyCostExtended: vehicleShowWeeklyCostExtended ?? this.vehicleShowWeeklyCostExtended,
        vehicleShowMonthlyCostExtended: vehicleShowMonthlyCostExtended ?? this.vehicleShowMonthlyCostExtended,
        vehicleShowPeriodCostExtended: vehicleShowPeriodCostExtended ?? this.vehicleShowPeriodCostExtended,
        vehicleShowDiscountPercent: vehicleShowDiscountPercent ?? this.vehicleShowDiscountPercent,
        vehicleShowUnitDiscountAmount: vehicleShowUnitDiscountAmount ?? this.vehicleShowUnitDiscountAmount,
        vehicleShowUnitExtended: vehicleShowUnitExtended ?? this.vehicleShowUnitExtended,
        vehicleShowWeeklyDiscountAmount: vehicleShowWeeklyDiscountAmount ?? this.vehicleShowWeeklyDiscountAmount,
        vehicleShowWeeklyExtended: vehicleShowWeeklyExtended ?? this.vehicleShowWeeklyExtended,
        vehicleShowMonthlyDiscountAmount: vehicleShowMonthlyDiscountAmount ?? this.vehicleShowMonthlyDiscountAmount,
        vehicleShowMonthlyExtended: vehicleShowMonthlyExtended ?? this.vehicleShowMonthlyExtended,
        vehicleShowPeriodDiscountAmount: vehicleShowPeriodDiscountAmount ?? this.vehicleShowPeriodDiscountAmount,
        vehicleShowPeriodExtended: vehicleShowPeriodExtended ?? this.vehicleShowPeriodExtended,
        vehicleShowWarehouse: vehicleShowWarehouse ?? this.vehicleShowWarehouse,
        vehicleShowReturnToWarehouse: vehicleShowReturnToWarehouse ?? this.vehicleShowReturnToWarehouse,
        vehicleShowTaxable: vehicleShowTaxable ?? this.vehicleShowTaxable,
        vehicleShowNotes: vehicleShowNotes ?? this.vehicleShowNotes,
        vehicleDateStamp: vehicleDateStamp ?? this.vehicleDateStamp,
        laborShowICode: laborShowICode ?? this.laborShowICode,
        laborICodeWidth: laborICodeWidth ?? this.laborICodeWidth,
        laborShowDescription: laborShowDescription ?? this.laborShowDescription,
        laborDescriptionWidth: laborDescriptionWidth ?? this.laborDescriptionWidth,
        laborShowOrderActivity: laborShowOrderActivity ?? this.laborShowOrderActivity,
        laborShowCrewName: laborShowCrewName ?? this.laborShowCrewName,
        laborShowFromDate: laborShowFromDate ?? this.laborShowFromDate,
        laborShowFromTime: laborShowFromTime ?? this.laborShowFromTime,
        laborShowToDate: laborShowToDate ?? this.laborShowToDate,
        laborShowToTime: laborShowToTime ?? this.laborShowToTime,
        laborShowBillablePeriods: laborShowBillablePeriods ?? this.laborShowBillablePeriods,
        laborShowHours: laborShowHours ?? this.laborShowHours,
        laborShowSubQuantity: laborShowSubQuantity ?? this.laborShowSubQuantity,
        laborShowCost: laborShowCost ?? this.laborShowCost,
        laborShowRate: laborShowRate ?? this.laborShowRate,
        laborShowPeriodCostExtended: laborShowPeriodCostExtended ?? this.laborShowPeriodCostExtended,
        laborShowDiscountPercent: laborShowDiscountPercent ?? this.laborShowDiscountPercent,
        laborShowUnit: laborShowUnit ?? this.laborShowUnit,
        laborShowUnitDiscountAmount: laborShowUnitDiscountAmount ?? this.laborShowUnitDiscountAmount,
        laborShowUnitExtended: laborShowUnitExtended ?? this.laborShowUnitExtended,
        laborShowWeeklyDiscountAmount: laborShowWeeklyDiscountAmount ?? this.laborShowWeeklyDiscountAmount,
        laborShowWeeklyExtended: laborShowWeeklyExtended ?? this.laborShowWeeklyExtended,
        laborShowMonthlyDiscountAmount: laborShowMonthlyDiscountAmount ?? this.laborShowMonthlyDiscountAmount,
        laborShowMonthlyExtended: laborShowMonthlyExtended ?? this.laborShowMonthlyExtended,
        laborShowPeriodDiscountAmount: laborShowPeriodDiscountAmount ?? this.laborShowPeriodDiscountAmount,
        laborShowPeriodExtended: laborShowPeriodExtended ?? this.laborShowPeriodExtended,
        laborShowWarehouse: laborShowWarehouse ?? this.laborShowWarehouse,
        laborShowTaxable: laborShowTaxable ?? this.laborShowTaxable,
        laborShowNotes: laborShowNotes ?? this.laborShowNotes,
        laborDateStamp: laborDateStamp ?? this.laborDateStamp,
        hideCrewBreaks: hideCrewBreaks ?? this.hideCrewBreaks,
        break1Paid: break1Paid ?? this.break1Paid,
        break2Paid: break2Paid ?? this.break2Paid,
        break3Paid: break3Paid ?? this.break3Paid,
        miscShowICode: miscShowICode ?? this.miscShowICode,
        miscICodeWidth: miscICodeWidth ?? this.miscICodeWidth,
        miscShowDescription: miscShowDescription ?? this.miscShowDescription,
        miscDescriptionWidth: miscDescriptionWidth ?? this.miscDescriptionWidth,
        miscShowFromDate: miscShowFromDate ?? this.miscShowFromDate,
        miscShowFromTime: miscShowFromTime ?? this.miscShowFromTime,
        miscShowToDate: miscShowToDate ?? this.miscShowToDate,
        miscShowToTime: miscShowToTime ?? this.miscShowToTime,
        miscShowBillablePeriods: miscShowBillablePeriods ?? this.miscShowBillablePeriods,
        miscShowSubQuantity: miscShowSubQuantity ?? this.miscShowSubQuantity,
        miscShowWeeksAndDays: miscShowWeeksAndDays ?? this.miscShowWeeksAndDays,
        miscShowMonthsAndDays: miscShowMonthsAndDays ?? this.miscShowMonthsAndDays,
        miscShowUnit: miscShowUnit ?? this.miscShowUnit,
        miscShowRate: miscShowRate ?? this.miscShowRate,
        miscShowCost: miscShowCost ?? this.miscShowCost,
        miscShowPeriodCostExtended: miscShowPeriodCostExtended ?? this.miscShowPeriodCostExtended,
        miscShowDiscountPercent: miscShowDiscountPercent ?? this.miscShowDiscountPercent,
        miscShowUnitDiscountAmount: miscShowUnitDiscountAmount ?? this.miscShowUnitDiscountAmount,
        miscShowUnitExtended: miscShowUnitExtended ?? this.miscShowUnitExtended,
        miscShowWeeklyDiscountAmount: miscShowWeeklyDiscountAmount ?? this.miscShowWeeklyDiscountAmount,
        miscShowWeeklyExtended: miscShowWeeklyExtended ?? this.miscShowWeeklyExtended,
        miscShowMonthlyDiscountAmount: miscShowMonthlyDiscountAmount ?? this.miscShowMonthlyDiscountAmount,
        miscShowMonthlyExtended: miscShowMonthlyExtended ?? this.miscShowMonthlyExtended,
        miscShowPeriodDiscountAmount: miscShowPeriodDiscountAmount ?? this.miscShowPeriodDiscountAmount,
        miscShowPeriodExtended: miscShowPeriodExtended ?? this.miscShowPeriodExtended,
        miscShowWarehouse: miscShowWarehouse ?? this.miscShowWarehouse,
        miscShowTaxable: miscShowTaxable ?? this.miscShowTaxable,
        miscShowNotes: miscShowNotes ?? this.miscShowNotes,
        miscDateStamp: miscDateStamp ?? this.miscDateStamp,
        rentalSaleShowBarCode: rentalSaleShowBarCode ?? this.rentalSaleShowBarCode,
        rentalSaleShowSerialNumber: rentalSaleShowSerialNumber ?? this.rentalSaleShowSerialNumber,
        rentalSaleShowICode: rentalSaleShowICode ?? this.rentalSaleShowICode,
        rentalSaleICodeWidth: rentalSaleICodeWidth ?? this.rentalSaleICodeWidth,
        rentalSaleShowDescription: rentalSaleShowDescription ?? this.rentalSaleShowDescription,
        rentalSaleDescriptionWidth: rentalSaleDescriptionWidth ?? this.rentalSaleDescriptionWidth,
        rentalSaleShowPickDate: rentalSaleShowPickDate ?? this.rentalSaleShowPickDate,
        rentalSaleShowPickTime: rentalSaleShowPickTime ?? this.rentalSaleShowPickTime,
        rentalSaleShowAvailableQuantity: rentalSaleShowAvailableQuantity ?? this.rentalSaleShowAvailableQuantity,
        rentalSaleShowConflictDate: rentalSaleShowConflictDate ?? this.rentalSaleShowConflictDate,
        rentalSaleShowUnit: rentalSaleShowUnit ?? this.rentalSaleShowUnit,
        rentalSaleShowRate: rentalSaleShowRate ?? this.rentalSaleShowRate,
        rentalSaleShowCost: rentalSaleShowCost ?? this.rentalSaleShowCost,
        rentalSaleShowPeriodCostExtended: rentalSaleShowPeriodCostExtended ?? this.rentalSaleShowPeriodCostExtended,
        rentalSaleShowDiscountPercent: rentalSaleShowDiscountPercent ?? this.rentalSaleShowDiscountPercent,
        rentalSaleShowUnitDiscountAmount: rentalSaleShowUnitDiscountAmount ?? this.rentalSaleShowUnitDiscountAmount,
        rentalSaleShowUnitExtended: rentalSaleShowUnitExtended ?? this.rentalSaleShowUnitExtended,
        rentalSaleShowPeriodDiscountAmount: rentalSaleShowPeriodDiscountAmount ?? this.rentalSaleShowPeriodDiscountAmount,
        rentalSaleShowPeriodExtended: rentalSaleShowPeriodExtended ?? this.rentalSaleShowPeriodExtended,
        rentalSaleShowWarehouse: rentalSaleShowWarehouse ?? this.rentalSaleShowWarehouse,
        rentalSaleShowTaxable: rentalSaleShowTaxable ?? this.rentalSaleShowTaxable,
        rentalSaleShowNotes: rentalSaleShowNotes ?? this.rentalSaleShowNotes,
        rentalSaleDateStamp: rentalSaleDateStamp ?? this.rentalSaleDateStamp,
        lossAndDamageShowOrderNumber: lossAndDamageShowOrderNumber ?? this.lossAndDamageShowOrderNumber,
        lossAndDamageShowRepairOrderNumber: lossAndDamageShowRepairOrderNumber ?? this.lossAndDamageShowRepairOrderNumber,
        lossAndDamageShowBarCode: lossAndDamageShowBarCode ?? this.lossAndDamageShowBarCode,
        lossAndDamageShowSerialNumber: lossAndDamageShowSerialNumber ?? this.lossAndDamageShowSerialNumber,
        lossAndDamageShowICode: lossAndDamageShowICode ?? this.lossAndDamageShowICode,
        lossAndDamageICodeWidth: lossAndDamageICodeWidth ?? this.lossAndDamageICodeWidth,
        lossAndDamageShowDescription: lossAndDamageShowDescription ?? this.lossAndDamageShowDescription,
        lossAndDamageDescriptionWidth: lossAndDamageDescriptionWidth ?? this.lossAndDamageDescriptionWidth,
        lossAndDamageShowUnit: lossAndDamageShowUnit ?? this.lossAndDamageShowUnit,
        lossAndDamageShowRate: lossAndDamageShowRate ?? this.lossAndDamageShowRate,
        lossAndDamageShowCost: lossAndDamageShowCost ?? this.lossAndDamageShowCost,
        lossAndDamageShowDiscountPercent: lossAndDamageShowDiscountPercent ?? this.lossAndDamageShowDiscountPercent,
        lossAndDamageShowUnitDiscountAmount: lossAndDamageShowUnitDiscountAmount ?? this.lossAndDamageShowUnitDiscountAmount,
        lossAndDamageShowUnitExtended: lossAndDamageShowUnitExtended ?? this.lossAndDamageShowUnitExtended,
        lossAndDamageShowPeriodDiscountAmount: lossAndDamageShowPeriodDiscountAmount ?? this.lossAndDamageShowPeriodDiscountAmount,
        lossAndDamageShowPeriodExtended: lossAndDamageShowPeriodExtended ?? this.lossAndDamageShowPeriodExtended,
        lossAndDamageShowWarehouse: lossAndDamageShowWarehouse ?? this.lossAndDamageShowWarehouse,
        lossAndDamageShowTaxable: lossAndDamageShowTaxable ?? this.lossAndDamageShowTaxable,
        lossAndDamageShowNotes: lossAndDamageShowNotes ?? this.lossAndDamageShowNotes,
        lossAndDamageDateStamp: lossAndDamageDateStamp ?? this.lossAndDamageDateStamp,
        addInstallationAndStrikeFee: addInstallationAndStrikeFee ?? this.addInstallationAndStrikeFee,
        installationAndStrikeFeeRateId: installationAndStrikeFeeRateId ?? this.installationAndStrikeFeeRateId,
        installationAndStrikeFeeICode: installationAndStrikeFeeICode ?? this.installationAndStrikeFeeICode,
        installationAndStrikeFeeDescription: installationAndStrikeFeeDescription ?? this.installationAndStrikeFeeDescription,
        installationAndStrikeFeePercent: installationAndStrikeFeePercent ?? this.installationAndStrikeFeePercent,
        installationAndStrikeFeeBasedOn: installationAndStrikeFeeBasedOn ?? this.installationAndStrikeFeeBasedOn,
        addManagementAndServiceFee: addManagementAndServiceFee ?? this.addManagementAndServiceFee,
        managementAndServiceFeeRateId: managementAndServiceFeeRateId ?? this.managementAndServiceFeeRateId,
        managementAndServiceFeeICode: managementAndServiceFeeICode ?? this.managementAndServiceFeeICode,
        managementAndServiceFeeDescription: managementAndServiceFeeDescription ?? this.managementAndServiceFeeDescription,
        managementAndServiceFeePercent: managementAndServiceFeePercent ?? this.managementAndServiceFeePercent,
        managementAndServiceFeeBasedOn: managementAndServiceFeeBasedOn ?? this.managementAndServiceFeeBasedOn,
        defaultRentalSalePrice: defaultRentalSalePrice ?? this.defaultRentalSalePrice,
        quikPayDiscount: quikPayDiscount ?? this.quikPayDiscount,
        quikPayDiscountType: quikPayDiscountType ?? this.quikPayDiscountType,
        quikPayDiscountDays: quikPayDiscountDays ?? this.quikPayDiscountDays,
        quikPayDiscountPercent: quikPayDiscountPercent ?? this.quikPayDiscountPercent,
        quikPayDiscountExcludeSubs: quikPayDiscountExcludeSubs ?? this.quikPayDiscountExcludeSubs,
        quikConfirmDiscount: quikConfirmDiscount ?? this.quikConfirmDiscount,
        quikConfirmDiscountPercent: quikConfirmDiscountPercent ?? this.quikConfirmDiscountPercent,
        quikConfirmDiscountDays: quikConfirmDiscountDays ?? this.quikConfirmDiscountDays,
        disableCostGl: disableCostGl ?? this.disableCostGl,
        excludeFromTopSalesDashboard: excludeFromTopSalesDashboard ?? this.excludeFromTopSalesDashboard,
        separatePackageOnQuoteOrder: separatePackageOnQuoteOrder ?? this.separatePackageOnQuoteOrder,
        orderby: orderby ?? this.orderby,
        subAllShortagesSubMiscellaneous: subAllShortagesSubMiscellaneous ?? this.subAllShortagesSubMiscellaneous,
        inactive: inactive ?? this.inactive,
        combinedShowFields: combinedShowFields ?? this.combinedShowFields,
        rentalShowFields: rentalShowFields ?? this.rentalShowFields,
        salesShowFields: salesShowFields ?? this.salesShowFields,
        miscShowFields: miscShowFields ?? this.miscShowFields,
        laborShowFields: laborShowFields ?? this.laborShowFields,
        rentalSaleShowFields: rentalSaleShowFields ?? this.rentalSaleShowFields,
        lossAndDamageShowFields: lossAndDamageShowFields ?? this.lossAndDamageShowFields,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle {
  WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle({
    this.orderTypeContactTitleId,
    this.orderTypeId,
    this.contactTitleId,
    this.contactTitle,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleFromJson(
          json);

  @JsonKey(name: 'OrderTypeContactTitleId', includeIfNull: false)
  final String? orderTypeContactTitleId;
  @JsonKey(name: 'OrderTypeId', includeIfNull: false)
  final String? orderTypeId;
  @JsonKey(name: 'ContactTitleId', includeIfNull: false)
  final String? contactTitleId;
  @JsonKey(name: 'ContactTitle', includeIfNull: false)
  final String? contactTitle;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle &&
            (identical(
                    other.orderTypeContactTitleId, orderTypeContactTitleId) ||
                const DeepCollectionEquality().equals(
                    other.orderTypeContactTitleId, orderTypeContactTitleId)) &&
            (identical(other.orderTypeId, orderTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeId, orderTypeId)) &&
            (identical(other.contactTitleId, contactTitleId) ||
                const DeepCollectionEquality()
                    .equals(other.contactTitleId, contactTitleId)) &&
            (identical(other.contactTitle, contactTitle) ||
                const DeepCollectionEquality()
                    .equals(other.contactTitle, contactTitle)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitleExtension
    on WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle {
  WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle copyWith(
      {String? orderTypeContactTitleId,
      String? orderTypeId,
      String? contactTitleId,
      String? contactTitle,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOrderTypeContactTitleOrderTypeContactTitle(
        orderTypeContactTitleId:
            orderTypeContactTitleId ?? this.orderTypeContactTitleId,
        orderTypeId: orderTypeId ?? this.orderTypeId,
        contactTitleId: contactTitleId ?? this.contactTitleId,
        contactTitle: contactTitle ?? this.contactTitle,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType {
  WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType({
    this.orderTypeDateTypeId,
    this.orderTypeId,
    this.orderType,
    this.activityTypeId,
    this.activityType,
    this.description,
    this.rename,
    this.descriptionDisplay,
    this.enabled,
    this.color,
    this.textColor,
    this.orderBy,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeFromJson(json);

  @JsonKey(name: 'OrderTypeDateTypeId', includeIfNull: false)
  final String? orderTypeDateTypeId;
  @JsonKey(name: 'OrderTypeId', includeIfNull: false)
  final String? orderTypeId;
  @JsonKey(name: 'OrderType', includeIfNull: false)
  final String? orderType;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final int? activityTypeId;
  @JsonKey(name: 'ActivityType', includeIfNull: false)
  final String? activityType;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Rename', includeIfNull: false)
  final String? rename;
  @JsonKey(name: 'DescriptionDisplay', includeIfNull: false)
  final String? descriptionDisplay;
  @JsonKey(name: 'Enabled', includeIfNull: false)
  final bool? enabled;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'TextColor', includeIfNull: false)
  final String? textColor;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType &&
            (identical(other.orderTypeDateTypeId, orderTypeDateTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeDateTypeId, orderTypeDateTypeId)) &&
            (identical(other.orderTypeId, orderTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeId, orderTypeId)) &&
            (identical(other.orderType, orderType) ||
                const DeepCollectionEquality()
                    .equals(other.orderType, orderType)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.activityType, activityType) ||
                const DeepCollectionEquality()
                    .equals(other.activityType, activityType)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.rename, rename) ||
                const DeepCollectionEquality().equals(other.rename, rename)) &&
            (identical(other.descriptionDisplay, descriptionDisplay) ||
                const DeepCollectionEquality()
                    .equals(other.descriptionDisplay, descriptionDisplay)) &&
            (identical(other.enabled, enabled) ||
                const DeepCollectionEquality()
                    .equals(other.enabled, enabled)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.textColor, textColor) ||
                const DeepCollectionEquality()
                    .equals(other.textColor, textColor)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateTypeExtension
    on WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType {
  WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType copyWith(
      {String? orderTypeDateTypeId,
      String? orderTypeId,
      String? orderType,
      int? activityTypeId,
      String? activityType,
      String? description,
      String? rename,
      String? descriptionDisplay,
      bool? enabled,
      String? color,
      String? textColor,
      double? orderBy,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOrderTypeDateTypeOrderTypeDateType(
        orderTypeDateTypeId: orderTypeDateTypeId ?? this.orderTypeDateTypeId,
        orderTypeId: orderTypeId ?? this.orderTypeId,
        orderType: orderType ?? this.orderType,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        activityType: activityType ?? this.activityType,
        description: description ?? this.description,
        rename: rename ?? this.rename,
        descriptionDisplay: descriptionDisplay ?? this.descriptionDisplay,
        enabled: enabled ?? this.enabled,
        color: color ?? this.color,
        textColor: textColor ?? this.textColor,
        orderBy: orderBy ?? this.orderBy,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequest {
  WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequest({
    this.startAtIndex,
    this.orderTypeDateTypeIds,
  });

  factory WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequestFromJson(
          json);

  @JsonKey(name: 'StartAtIndex', includeIfNull: false)
  final int? startAtIndex;
  @JsonKey(
      name: 'OrderTypeDateTypeIds',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? orderTypeDateTypeIds;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequest &&
            (identical(other.startAtIndex, startAtIndex) ||
                const DeepCollectionEquality()
                    .equals(other.startAtIndex, startAtIndex)) &&
            (identical(other.orderTypeDateTypeIds, orderTypeDateTypeIds) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeDateTypeIds, orderTypeDateTypeIds)));
  }
}

extension $WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequestExtension
    on WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequest {
  WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequest copyWith(
      {int? startAtIndex, List<String>? orderTypeDateTypeIds}) {
    return WebApiModulesSettingsOrderTypeDateTypeSortOrderTypeDateTypesRequest(
        startAtIndex: startAtIndex ?? this.startAtIndex,
        orderTypeDateTypeIds:
            orderTypeDateTypeIds ?? this.orderTypeDateTypeIds);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderTypeLocationOrderTypeLocation {
  WebApiModulesSettingsOrderTypeLocationOrderTypeLocation({
    this.orderTypeLocationId,
    this.orderTypeId,
    this.locationId,
    this.location,
    this.invoiceClass,
    this.termsConditionsId,
    this.termsConditions,
    this.coverLetterId,
    this.coverLetter,
    this.presentationLayerId,
    this.presentationLayer,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOrderTypeLocationOrderTypeLocation.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderTypeLocationOrderTypeLocationFromJson(json);

  @JsonKey(name: 'OrderTypeLocationId', includeIfNull: false)
  final String? orderTypeLocationId;
  @JsonKey(name: 'OrderTypeId', includeIfNull: false)
  final String? orderTypeId;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'Location', includeIfNull: false)
  final String? location;
  @JsonKey(name: 'InvoiceClass', includeIfNull: false)
  final String? invoiceClass;
  @JsonKey(name: 'TermsConditionsId', includeIfNull: false)
  final String? termsConditionsId;
  @JsonKey(name: 'TermsConditions', includeIfNull: false)
  final String? termsConditions;
  @JsonKey(name: 'CoverLetterId', includeIfNull: false)
  final String? coverLetterId;
  @JsonKey(name: 'CoverLetter', includeIfNull: false)
  final String? coverLetter;
  @JsonKey(name: 'PresentationLayerId', includeIfNull: false)
  final String? presentationLayerId;
  @JsonKey(name: 'PresentationLayer', includeIfNull: false)
  final String? presentationLayer;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderTypeLocationOrderTypeLocationFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderTypeLocationOrderTypeLocationToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderTypeLocationOrderTypeLocationToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderTypeLocationOrderTypeLocation &&
            (identical(other.orderTypeLocationId, orderTypeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeLocationId, orderTypeLocationId)) &&
            (identical(other.orderTypeId, orderTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeId, orderTypeId)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.location, location) ||
                const DeepCollectionEquality()
                    .equals(other.location, location)) &&
            (identical(other.invoiceClass, invoiceClass) ||
                const DeepCollectionEquality()
                    .equals(other.invoiceClass, invoiceClass)) &&
            (identical(other.termsConditionsId, termsConditionsId) ||
                const DeepCollectionEquality()
                    .equals(other.termsConditionsId, termsConditionsId)) &&
            (identical(other.termsConditions, termsConditions) ||
                const DeepCollectionEquality()
                    .equals(other.termsConditions, termsConditions)) &&
            (identical(other.coverLetterId, coverLetterId) ||
                const DeepCollectionEquality()
                    .equals(other.coverLetterId, coverLetterId)) &&
            (identical(other.coverLetter, coverLetter) ||
                const DeepCollectionEquality()
                    .equals(other.coverLetter, coverLetter)) &&
            (identical(other.presentationLayerId, presentationLayerId) ||
                const DeepCollectionEquality()
                    .equals(other.presentationLayerId, presentationLayerId)) &&
            (identical(other.presentationLayer, presentationLayer) ||
                const DeepCollectionEquality()
                    .equals(other.presentationLayer, presentationLayer)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOrderTypeLocationOrderTypeLocationExtension
    on WebApiModulesSettingsOrderTypeLocationOrderTypeLocation {
  WebApiModulesSettingsOrderTypeLocationOrderTypeLocation copyWith(
      {String? orderTypeLocationId,
      String? orderTypeId,
      String? locationId,
      String? location,
      String? invoiceClass,
      String? termsConditionsId,
      String? termsConditions,
      String? coverLetterId,
      String? coverLetter,
      String? presentationLayerId,
      String? presentationLayer,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOrderTypeLocationOrderTypeLocation(
        orderTypeLocationId: orderTypeLocationId ?? this.orderTypeLocationId,
        orderTypeId: orderTypeId ?? this.orderTypeId,
        locationId: locationId ?? this.locationId,
        location: location ?? this.location,
        invoiceClass: invoiceClass ?? this.invoiceClass,
        termsConditionsId: termsConditionsId ?? this.termsConditionsId,
        termsConditions: termsConditions ?? this.termsConditions,
        coverLetterId: coverLetterId ?? this.coverLetterId,
        coverLetter: coverLetter ?? this.coverLetter,
        presentationLayerId: presentationLayerId ?? this.presentationLayerId,
        presentationLayer: presentationLayer ?? this.presentationLayer,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsOrderTypeNoteOrderTypeNote {
  WebApiModulesSettingsOrderTypeNoteOrderTypeNote({
    this.orderTypeNoteId,
    this.orderTypeId,
    this.description,
    this.billing,
    this.printOnOrder,
    this.notes,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsOrderTypeNoteOrderTypeNote.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsOrderTypeNoteOrderTypeNoteFromJson(json);

  @JsonKey(name: 'OrderTypeNoteId', includeIfNull: false)
  final String? orderTypeNoteId;
  @JsonKey(name: 'OrderTypeId', includeIfNull: false)
  final String? orderTypeId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Billing', includeIfNull: false)
  final bool? billing;
  @JsonKey(name: 'PrintOnOrder', includeIfNull: false)
  final bool? printOnOrder;
  @JsonKey(name: 'Notes', includeIfNull: false)
  final String? notes;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsOrderTypeNoteOrderTypeNoteFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsOrderTypeNoteOrderTypeNoteToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsOrderTypeNoteOrderTypeNoteToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsOrderTypeNoteOrderTypeNote &&
            (identical(other.orderTypeNoteId, orderTypeNoteId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeNoteId, orderTypeNoteId)) &&
            (identical(other.orderTypeId, orderTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeId, orderTypeId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.billing, billing) ||
                const DeepCollectionEquality()
                    .equals(other.billing, billing)) &&
            (identical(other.printOnOrder, printOnOrder) ||
                const DeepCollectionEquality()
                    .equals(other.printOnOrder, printOnOrder)) &&
            (identical(other.notes, notes) ||
                const DeepCollectionEquality().equals(other.notes, notes)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsOrderTypeNoteOrderTypeNoteExtension
    on WebApiModulesSettingsOrderTypeNoteOrderTypeNote {
  WebApiModulesSettingsOrderTypeNoteOrderTypeNote copyWith(
      {String? orderTypeNoteId,
      String? orderTypeId,
      String? description,
      bool? billing,
      bool? printOnOrder,
      String? notes,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsOrderTypeNoteOrderTypeNote(
        orderTypeNoteId: orderTypeNoteId ?? this.orderTypeNoteId,
        orderTypeId: orderTypeId ?? this.orderTypeId,
        description: description ?? this.description,
        billing: billing ?? this.billing,
        printOnOrder: printOnOrder ?? this.printOnOrder,
        notes: notes ?? this.notes,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms {
  WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms({
    this.paymentTermsId,
    this.paymentTerms,
    this.invoiceMessage,
    this.dueInDays,
    this.cod,
    this.paymentTermsCode,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsFromJson(
          json);

  @JsonKey(name: 'PaymentTermsId', includeIfNull: false)
  final String? paymentTermsId;
  @JsonKey(name: 'PaymentTerms', includeIfNull: false)
  final String? paymentTerms;
  @JsonKey(name: 'InvoiceMessage', includeIfNull: false)
  final String? invoiceMessage;
  @JsonKey(name: 'DueInDays', includeIfNull: false)
  final int? dueInDays;
  @JsonKey(name: 'COD', includeIfNull: false)
  final bool? cod;
  @JsonKey(name: 'PaymentTermsCode', includeIfNull: false)
  final String? paymentTermsCode;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms &&
            (identical(other.paymentTermsId, paymentTermsId) ||
                const DeepCollectionEquality()
                    .equals(other.paymentTermsId, paymentTermsId)) &&
            (identical(other.paymentTerms, paymentTerms) ||
                const DeepCollectionEquality()
                    .equals(other.paymentTerms, paymentTerms)) &&
            (identical(other.invoiceMessage, invoiceMessage) ||
                const DeepCollectionEquality()
                    .equals(other.invoiceMessage, invoiceMessage)) &&
            (identical(other.dueInDays, dueInDays) ||
                const DeepCollectionEquality()
                    .equals(other.dueInDays, dueInDays)) &&
            (identical(other.cod, cod) ||
                const DeepCollectionEquality().equals(other.cod, cod)) &&
            (identical(other.paymentTermsCode, paymentTermsCode) ||
                const DeepCollectionEquality()
                    .equals(other.paymentTermsCode, paymentTermsCode)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTermsExtension
    on WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms {
  WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms copyWith(
      {String? paymentTermsId,
      String? paymentTerms,
      String? invoiceMessage,
      int? dueInDays,
      bool? cod,
      String? paymentTermsCode,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPaymentSettingsPaymentTermsPaymentTerms(
        paymentTermsId: paymentTermsId ?? this.paymentTermsId,
        paymentTerms: paymentTerms ?? this.paymentTerms,
        invoiceMessage: invoiceMessage ?? this.invoiceMessage,
        dueInDays: dueInDays ?? this.dueInDays,
        cod: cod ?? this.cod,
        paymentTermsCode: paymentTermsCode ?? this.paymentTermsCode,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType {
  WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType({
    this.paymentTypeId,
    this.paymentType,
    this.shortName,
    this.paymentTypeType,
    this.glAccountId,
    this.glAccountNo,
    this.glAccountDescription,
    this.accountingTransaction,
    this.exportPaymentMethod,
    this.exportPaymentType,
    this.includeInRentalWorksNet,
    this.rentalWorksNetCaption,
    this.color,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeFromJson(
          json);

  @JsonKey(name: 'PaymentTypeId', includeIfNull: false)
  final String? paymentTypeId;
  @JsonKey(name: 'PaymentType', includeIfNull: false)
  final String? paymentType;
  @JsonKey(name: 'ShortName', includeIfNull: false)
  final String? shortName;
  @JsonKey(name: 'PaymentTypeType', includeIfNull: false)
  final String? paymentTypeType;
  @JsonKey(name: 'GlAccountId', includeIfNull: false)
  final String? glAccountId;
  @JsonKey(name: 'GlAccountNo', includeIfNull: false)
  final String? glAccountNo;
  @JsonKey(name: 'GlAccountDescription', includeIfNull: false)
  final String? glAccountDescription;
  @JsonKey(name: 'AccountingTransaction', includeIfNull: false)
  final bool? accountingTransaction;
  @JsonKey(name: 'ExportPaymentMethod', includeIfNull: false)
  final String? exportPaymentMethod;
  @JsonKey(name: 'ExportPaymentType', includeIfNull: false)
  final String? exportPaymentType;
  @JsonKey(name: 'IncludeInRentalWorksNet', includeIfNull: false)
  final bool? includeInRentalWorksNet;
  @JsonKey(name: 'RentalWorksNetCaption', includeIfNull: false)
  final String? rentalWorksNetCaption;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType &&
            (identical(other.paymentTypeId, paymentTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.paymentTypeId, paymentTypeId)) &&
            (identical(other.paymentType, paymentType) ||
                const DeepCollectionEquality()
                    .equals(other.paymentType, paymentType)) &&
            (identical(other.shortName, shortName) ||
                const DeepCollectionEquality()
                    .equals(other.shortName, shortName)) &&
            (identical(other.paymentTypeType, paymentTypeType) ||
                const DeepCollectionEquality()
                    .equals(other.paymentTypeType, paymentTypeType)) &&
            (identical(other.glAccountId, glAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.glAccountId, glAccountId)) &&
            (identical(other.glAccountNo, glAccountNo) ||
                const DeepCollectionEquality()
                    .equals(other.glAccountNo, glAccountNo)) &&
            (identical(other.glAccountDescription, glAccountDescription) ||
                const DeepCollectionEquality().equals(
                    other.glAccountDescription, glAccountDescription)) &&
            (identical(other.accountingTransaction, accountingTransaction) ||
                const DeepCollectionEquality().equals(
                    other.accountingTransaction, accountingTransaction)) &&
            (identical(other.exportPaymentMethod, exportPaymentMethod) ||
                const DeepCollectionEquality()
                    .equals(other.exportPaymentMethod, exportPaymentMethod)) &&
            (identical(other.exportPaymentType, exportPaymentType) ||
                const DeepCollectionEquality()
                    .equals(other.exportPaymentType, exportPaymentType)) &&
            (identical(
                    other.includeInRentalWorksNet, includeInRentalWorksNet) ||
                const DeepCollectionEquality().equals(
                    other.includeInRentalWorksNet, includeInRentalWorksNet)) &&
            (identical(other.rentalWorksNetCaption, rentalWorksNetCaption) ||
                const DeepCollectionEquality().equals(
                    other.rentalWorksNetCaption, rentalWorksNetCaption)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPaymentSettingsPaymentTypePaymentTypeExtension
    on WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType {
  WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType copyWith(
      {String? paymentTypeId,
      String? paymentType,
      String? shortName,
      String? paymentTypeType,
      String? glAccountId,
      String? glAccountNo,
      String? glAccountDescription,
      bool? accountingTransaction,
      String? exportPaymentMethod,
      String? exportPaymentType,
      bool? includeInRentalWorksNet,
      String? rentalWorksNetCaption,
      String? color,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPaymentSettingsPaymentTypePaymentType(
        paymentTypeId: paymentTypeId ?? this.paymentTypeId,
        paymentType: paymentType ?? this.paymentType,
        shortName: shortName ?? this.shortName,
        paymentTypeType: paymentTypeType ?? this.paymentTypeType,
        glAccountId: glAccountId ?? this.glAccountId,
        glAccountNo: glAccountNo ?? this.glAccountNo,
        glAccountDescription: glAccountDescription ?? this.glAccountDescription,
        accountingTransaction:
            accountingTransaction ?? this.accountingTransaction,
        exportPaymentMethod: exportPaymentMethod ?? this.exportPaymentMethod,
        exportPaymentType: exportPaymentType ?? this.exportPaymentType,
        includeInRentalWorksNet:
            includeInRentalWorksNet ?? this.includeInRentalWorksNet,
        rentalWorksNetCaption:
            rentalWorksNetCaption ?? this.rentalWorksNetCaption,
        color: color ?? this.color,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPersonnelTypePersonnelType {
  WebApiModulesSettingsPersonnelTypePersonnelType({
    this.personnelTypeId,
    this.personnelType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPersonnelTypePersonnelType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPersonnelTypePersonnelTypeFromJson(json);

  @JsonKey(name: 'PersonnelTypeId', includeIfNull: false)
  final String? personnelTypeId;
  @JsonKey(name: 'PersonnelType', includeIfNull: false)
  final String? personnelType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPersonnelTypePersonnelTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPersonnelTypePersonnelTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPersonnelTypePersonnelTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPersonnelTypePersonnelType &&
            (identical(other.personnelTypeId, personnelTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.personnelTypeId, personnelTypeId)) &&
            (identical(other.personnelType, personnelType) ||
                const DeepCollectionEquality()
                    .equals(other.personnelType, personnelType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPersonnelTypePersonnelTypeExtension
    on WebApiModulesSettingsPersonnelTypePersonnelType {
  WebApiModulesSettingsPersonnelTypePersonnelType copyWith(
      {String? personnelTypeId,
      String? personnelType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPersonnelTypePersonnelType(
        personnelTypeId: personnelTypeId ?? this.personnelTypeId,
        personnelType: personnelType ?? this.personnelType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus {
  WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus({
    this.poApprovalStatusId,
    this.poApprovalStatus,
    this.poApprovalStatusType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusFromJson(
          json);

  @JsonKey(name: 'PoApprovalStatusId', includeIfNull: false)
  final String? poApprovalStatusId;
  @JsonKey(name: 'PoApprovalStatus', includeIfNull: false)
  final String? poApprovalStatus;
  @JsonKey(name: 'PoApprovalStatusType', includeIfNull: false)
  final String? poApprovalStatusType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus &&
            (identical(other.poApprovalStatusId, poApprovalStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.poApprovalStatusId, poApprovalStatusId)) &&
            (identical(other.poApprovalStatus, poApprovalStatus) ||
                const DeepCollectionEquality()
                    .equals(other.poApprovalStatus, poApprovalStatus)) &&
            (identical(other.poApprovalStatusType, poApprovalStatusType) ||
                const DeepCollectionEquality().equals(
                    other.poApprovalStatusType, poApprovalStatusType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatusExtension
    on WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus {
  WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus copyWith(
      {String? poApprovalStatusId,
      String? poApprovalStatus,
      String? poApprovalStatusType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPoSettingsPoApprovalStatusPoApprovalStatus(
        poApprovalStatusId: poApprovalStatusId ?? this.poApprovalStatusId,
        poApprovalStatus: poApprovalStatus ?? this.poApprovalStatus,
        poApprovalStatusType: poApprovalStatusType ?? this.poApprovalStatusType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPoSettingsPoApproverPoApprover {
  WebApiModulesSettingsPoSettingsPoApproverPoApprover({
    this.poApproverId,
    this.locationId,
    this.location,
    this.departmentId,
    this.department,
    this.projectId,
    this.usersId,
    this.userName,
    this.appRoleId,
    this.appRole,
    this.poApproverType,
    this.isBackup,
    this.hasLimit,
    this.limitRental,
    this.limitSales,
    this.limitParts,
    this.limitVehicle,
    this.limitMisc,
    this.limitLabor,
    this.limitSubRent,
    this.limitSubSale,
    this.limitSubMisc,
    this.limitSubLabor,
    this.limitSubVehicle,
    this.limitRepair,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPoSettingsPoApproverPoApprover.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPoSettingsPoApproverPoApproverFromJson(json);

  @JsonKey(name: 'PoApproverId', includeIfNull: false)
  final String? poApproverId;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'Location', includeIfNull: false)
  final String? location;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'Department', includeIfNull: false)
  final String? department;
  @JsonKey(name: 'ProjectId', includeIfNull: false)
  final String? projectId;
  @JsonKey(name: 'UsersId', includeIfNull: false)
  final String? usersId;
  @JsonKey(name: 'UserName', includeIfNull: false)
  final String? userName;
  @JsonKey(name: 'AppRoleId', includeIfNull: false)
  final String? appRoleId;
  @JsonKey(name: 'AppRole', includeIfNull: false)
  final String? appRole;
  @JsonKey(name: 'PoApproverType', includeIfNull: false)
  final String? poApproverType;
  @JsonKey(name: 'IsBackup', includeIfNull: false)
  final bool? isBackup;
  @JsonKey(name: 'HasLimit', includeIfNull: false)
  final bool? hasLimit;
  @JsonKey(name: 'LimitRental', includeIfNull: false)
  final double? limitRental;
  @JsonKey(name: 'LimitSales', includeIfNull: false)
  final double? limitSales;
  @JsonKey(name: 'LimitParts', includeIfNull: false)
  final double? limitParts;
  @JsonKey(name: 'LimitVehicle', includeIfNull: false)
  final double? limitVehicle;
  @JsonKey(name: 'LimitMisc', includeIfNull: false)
  final double? limitMisc;
  @JsonKey(name: 'LimitLabor', includeIfNull: false)
  final double? limitLabor;
  @JsonKey(name: 'LimitSubRent', includeIfNull: false)
  final double? limitSubRent;
  @JsonKey(name: 'LimitSubSale', includeIfNull: false)
  final double? limitSubSale;
  @JsonKey(name: 'LimitSubMisc', includeIfNull: false)
  final double? limitSubMisc;
  @JsonKey(name: 'LimitSubLabor', includeIfNull: false)
  final double? limitSubLabor;
  @JsonKey(name: 'LimitSubVehicle', includeIfNull: false)
  final double? limitSubVehicle;
  @JsonKey(name: 'LimitRepair', includeIfNull: false)
  final double? limitRepair;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoApproverPoApproverFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoApproverPoApproverToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPoSettingsPoApproverPoApproverToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPoSettingsPoApproverPoApprover &&
            (identical(other.poApproverId, poApproverId) ||
                const DeepCollectionEquality()
                    .equals(other.poApproverId, poApproverId)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.location, location) ||
                const DeepCollectionEquality()
                    .equals(other.location, location)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.department, department) ||
                const DeepCollectionEquality()
                    .equals(other.department, department)) &&
            (identical(other.projectId, projectId) ||
                const DeepCollectionEquality()
                    .equals(other.projectId, projectId)) &&
            (identical(other.usersId, usersId) ||
                const DeepCollectionEquality()
                    .equals(other.usersId, usersId)) &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.appRoleId, appRoleId) ||
                const DeepCollectionEquality()
                    .equals(other.appRoleId, appRoleId)) &&
            (identical(other.appRole, appRole) ||
                const DeepCollectionEquality()
                    .equals(other.appRole, appRole)) &&
            (identical(other.poApproverType, poApproverType) ||
                const DeepCollectionEquality()
                    .equals(other.poApproverType, poApproverType)) &&
            (identical(other.isBackup, isBackup) ||
                const DeepCollectionEquality()
                    .equals(other.isBackup, isBackup)) &&
            (identical(other.hasLimit, hasLimit) ||
                const DeepCollectionEquality()
                    .equals(other.hasLimit, hasLimit)) &&
            (identical(other.limitRental, limitRental) ||
                const DeepCollectionEquality()
                    .equals(other.limitRental, limitRental)) &&
            (identical(other.limitSales, limitSales) ||
                const DeepCollectionEquality()
                    .equals(other.limitSales, limitSales)) &&
            (identical(other.limitParts, limitParts) ||
                const DeepCollectionEquality()
                    .equals(other.limitParts, limitParts)) &&
            (identical(other.limitVehicle, limitVehicle) ||
                const DeepCollectionEquality()
                    .equals(other.limitVehicle, limitVehicle)) &&
            (identical(other.limitMisc, limitMisc) ||
                const DeepCollectionEquality()
                    .equals(other.limitMisc, limitMisc)) &&
            (identical(other.limitLabor, limitLabor) ||
                const DeepCollectionEquality()
                    .equals(other.limitLabor, limitLabor)) &&
            (identical(other.limitSubRent, limitSubRent) ||
                const DeepCollectionEquality()
                    .equals(other.limitSubRent, limitSubRent)) &&
            (identical(other.limitSubSale, limitSubSale) ||
                const DeepCollectionEquality()
                    .equals(other.limitSubSale, limitSubSale)) &&
            (identical(other.limitSubMisc, limitSubMisc) ||
                const DeepCollectionEquality().equals(other.limitSubMisc, limitSubMisc)) &&
            (identical(other.limitSubLabor, limitSubLabor) || const DeepCollectionEquality().equals(other.limitSubLabor, limitSubLabor)) &&
            (identical(other.limitSubVehicle, limitSubVehicle) || const DeepCollectionEquality().equals(other.limitSubVehicle, limitSubVehicle)) &&
            (identical(other.limitRepair, limitRepair) || const DeepCollectionEquality().equals(other.limitRepair, limitRepair)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPoSettingsPoApproverPoApproverExtension
    on WebApiModulesSettingsPoSettingsPoApproverPoApprover {
  WebApiModulesSettingsPoSettingsPoApproverPoApprover copyWith(
      {String? poApproverId,
      String? locationId,
      String? location,
      String? departmentId,
      String? department,
      String? projectId,
      String? usersId,
      String? userName,
      String? appRoleId,
      String? appRole,
      String? poApproverType,
      bool? isBackup,
      bool? hasLimit,
      double? limitRental,
      double? limitSales,
      double? limitParts,
      double? limitVehicle,
      double? limitMisc,
      double? limitLabor,
      double? limitSubRent,
      double? limitSubSale,
      double? limitSubMisc,
      double? limitSubLabor,
      double? limitSubVehicle,
      double? limitRepair,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPoSettingsPoApproverPoApprover(
        poApproverId: poApproverId ?? this.poApproverId,
        locationId: locationId ?? this.locationId,
        location: location ?? this.location,
        departmentId: departmentId ?? this.departmentId,
        department: department ?? this.department,
        projectId: projectId ?? this.projectId,
        usersId: usersId ?? this.usersId,
        userName: userName ?? this.userName,
        appRoleId: appRoleId ?? this.appRoleId,
        appRole: appRole ?? this.appRole,
        poApproverType: poApproverType ?? this.poApproverType,
        isBackup: isBackup ?? this.isBackup,
        hasLimit: hasLimit ?? this.hasLimit,
        limitRental: limitRental ?? this.limitRental,
        limitSales: limitSales ?? this.limitSales,
        limitParts: limitParts ?? this.limitParts,
        limitVehicle: limitVehicle ?? this.limitVehicle,
        limitMisc: limitMisc ?? this.limitMisc,
        limitLabor: limitLabor ?? this.limitLabor,
        limitSubRent: limitSubRent ?? this.limitSubRent,
        limitSubSale: limitSubSale ?? this.limitSubSale,
        limitSubMisc: limitSubMisc ?? this.limitSubMisc,
        limitSubLabor: limitSubLabor ?? this.limitSubLabor,
        limitSubVehicle: limitSubVehicle ?? this.limitSubVehicle,
        limitRepair: limitRepair ?? this.limitRepair,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole {
  WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole({
    this.poApproverRoleId,
    this.poApproverRole,
    this.poApproverType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleFromJson(
          json);

  @JsonKey(name: 'PoApproverRoleId', includeIfNull: false)
  final String? poApproverRoleId;
  @JsonKey(name: 'PoApproverRole', includeIfNull: false)
  final String? poApproverRole;
  @JsonKey(name: 'PoApproverType', includeIfNull: false)
  final String? poApproverType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole &&
            (identical(other.poApproverRoleId, poApproverRoleId) ||
                const DeepCollectionEquality()
                    .equals(other.poApproverRoleId, poApproverRoleId)) &&
            (identical(other.poApproverRole, poApproverRole) ||
                const DeepCollectionEquality()
                    .equals(other.poApproverRole, poApproverRole)) &&
            (identical(other.poApproverType, poApproverType) ||
                const DeepCollectionEquality()
                    .equals(other.poApproverType, poApproverType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRoleExtension
    on WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole {
  WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole copyWith(
      {String? poApproverRoleId,
      String? poApproverRole,
      String? poApproverType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPoSettingsPoApproverRolePoApproverRole(
        poApproverRoleId: poApproverRoleId ?? this.poApproverRoleId,
        poApproverRole: poApproverRole ?? this.poApproverRole,
        poApproverType: poApproverType ?? this.poApproverType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPoSettingsPoClassificationPoClassification {
  WebApiModulesSettingsPoSettingsPoClassificationPoClassification({
    this.poClassificationId,
    this.poClassification,
    this.excludeFromRoa,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPoSettingsPoClassificationPoClassification.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPoSettingsPoClassificationPoClassificationFromJson(
          json);

  @JsonKey(name: 'PoClassificationId', includeIfNull: false)
  final String? poClassificationId;
  @JsonKey(name: 'PoClassification', includeIfNull: false)
  final String? poClassification;
  @JsonKey(name: 'ExcludeFromRoa', includeIfNull: false)
  final bool? excludeFromRoa;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoClassificationPoClassificationFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoClassificationPoClassificationToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPoSettingsPoClassificationPoClassificationToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPoSettingsPoClassificationPoClassification &&
            (identical(other.poClassificationId, poClassificationId) ||
                const DeepCollectionEquality()
                    .equals(other.poClassificationId, poClassificationId)) &&
            (identical(other.poClassification, poClassification) ||
                const DeepCollectionEquality()
                    .equals(other.poClassification, poClassification)) &&
            (identical(other.excludeFromRoa, excludeFromRoa) ||
                const DeepCollectionEquality()
                    .equals(other.excludeFromRoa, excludeFromRoa)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPoSettingsPoClassificationPoClassificationExtension
    on WebApiModulesSettingsPoSettingsPoClassificationPoClassification {
  WebApiModulesSettingsPoSettingsPoClassificationPoClassification copyWith(
      {String? poClassificationId,
      String? poClassification,
      bool? excludeFromRoa,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPoSettingsPoClassificationPoClassification(
        poClassificationId: poClassificationId ?? this.poClassificationId,
        poClassification: poClassification ?? this.poClassification,
        excludeFromRoa: excludeFromRoa ?? this.excludeFromRoa,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPoSettingsPoImportancePoImportance {
  WebApiModulesSettingsPoSettingsPoImportancePoImportance({
    this.poImportanceId,
    this.poImportance,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPoSettingsPoImportancePoImportance.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPoSettingsPoImportancePoImportanceFromJson(json);

  @JsonKey(name: 'PoImportanceId', includeIfNull: false)
  final String? poImportanceId;
  @JsonKey(name: 'PoImportance', includeIfNull: false)
  final String? poImportance;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoImportancePoImportanceFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoImportancePoImportanceToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPoSettingsPoImportancePoImportanceToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPoSettingsPoImportancePoImportance &&
            (identical(other.poImportanceId, poImportanceId) ||
                const DeepCollectionEquality()
                    .equals(other.poImportanceId, poImportanceId)) &&
            (identical(other.poImportance, poImportance) ||
                const DeepCollectionEquality()
                    .equals(other.poImportance, poImportance)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPoSettingsPoImportancePoImportanceExtension
    on WebApiModulesSettingsPoSettingsPoImportancePoImportance {
  WebApiModulesSettingsPoSettingsPoImportancePoImportance copyWith(
      {String? poImportanceId,
      String? poImportance,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPoSettingsPoImportancePoImportance(
        poImportanceId: poImportanceId ?? this.poImportanceId,
        poImportance: poImportance ?? this.poImportance,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason {
  WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason({
    this.poRejectReasonId,
    this.poRejectReason,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonFromJson(
          json);

  @JsonKey(name: 'PoRejectReasonId', includeIfNull: false)
  final String? poRejectReasonId;
  @JsonKey(name: 'PoRejectReason', includeIfNull: false)
  final String? poRejectReason;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason &&
            (identical(other.poRejectReasonId, poRejectReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.poRejectReasonId, poRejectReasonId)) &&
            (identical(other.poRejectReason, poRejectReason) ||
                const DeepCollectionEquality()
                    .equals(other.poRejectReason, poRejectReason)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReasonExtension
    on WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason {
  WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason copyWith(
      {String? poRejectReasonId,
      String? poRejectReason,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPoSettingsPoRejectReasonPoRejectReason(
        poRejectReasonId: poRejectReasonId ?? this.poRejectReasonId,
        poRejectReason: poRejectReason ?? this.poRejectReason,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPoSettingsPoTypePoType {
  WebApiModulesSettingsPoSettingsPoTypePoType({
    this.poTypeId,
    this.poType,
    this.approvalNeededByRequired,
    this.importanceRequired,
    this.payTypeRequired,
    this.projectRequired,
    this.subRentalShowOrderNumber,
    this.subRentalShowRepairOrderNumber,
    this.subRentalShowICode,
    this.subRentalICodeWidth,
    this.subRentalShowDescription,
    this.subRentalDescriptionWidth,
    this.subRentalShowFromDate,
    this.subRentalShowFromTime,
    this.subRentalShowToDate,
    this.subRentalShowToTime,
    this.subRentalShowBillablePeriods,
    this.subRentalShowRate,
    this.subRentalShowDaysPerWeek,
    this.subRentalShowDiscountPercent,
    this.subRentalShowUnit,
    this.subRentalShowUnitDiscountAmount,
    this.subRentalShowUnitExtended,
    this.subRentalShowWeeklyDiscountAmount,
    this.subRentalShowWeeklyExtended,
    this.subRentalShowMonthlyDiscountAmount,
    this.subRentalShowMonthlyExtended,
    this.subRentalShowPeriodDiscountAmount,
    this.subRentalShowPeriodExtended,
    this.subRentalShowWarehouse,
    this.subRentalShowTaxable,
    this.subRentalShowNotes,
    this.subRentalDateStamp,
    this.subSaleShowOrderNumber,
    this.subSaleShowICode,
    this.subSaleICodeWidth,
    this.subSaleShowDescription,
    this.subSaleDescriptionWidth,
    this.subSaleShowManufacturerPartNumber,
    this.subSaleShowRate,
    this.subSaleShowDiscountPercent,
    this.subSaleShowUnit,
    this.subSaleShowUnitDiscountAmount,
    this.subSaleShowUnitExtended,
    this.subSaleShowPeriodDiscountAmount,
    this.subSaleShowPeriodExtended,
    this.subSaleShowWarehouse,
    this.subSaleShowTaxable,
    this.subSaleShowNotes,
    this.subSaleDateStamp,
    this.purchaseShowICode,
    this.purchaseICodeWidth,
    this.purchaseShowDescription,
    this.purchaseDescriptionWidth,
    this.purchaseShowRate,
    this.purchaseShowDiscountPercent,
    this.purchaseShowUnit,
    this.purchaseShowUnitDiscountAmount,
    this.purchaseShowUnitExtended,
    this.purchaseShowPeriodDiscountAmount,
    this.purchaseShowPeriodExtended,
    this.purchaseShowCountryOfOrigin,
    this.purchaseShowManufacturer,
    this.purchaseShowManufacturerPartNumber,
    this.purchaseManufacturerPartNumberWidth,
    this.purchaseShowModelNumber,
    this.purchaseShowVendorPartNumber,
    this.purchaseShowWarehouse,
    this.purchaseShowTaxable,
    this.purchaseShowNotes,
    this.purchaseDateStamp,
    this.rentalPurchaseDefaultRate,
    this.salesPurchaseDefaultRate,
    this.laborShowICode,
    this.laborICodeWidth,
    this.laborShowDescription,
    this.laborDescriptionWidth,
    this.laborShowOrderActivity,
    this.laborShowCrewName,
    this.laborShowFromDate,
    this.laborShowFromTime,
    this.laborShowToDate,
    this.laborShowToTime,
    this.laborShowHours,
    this.laborShowBillablePeriods,
    this.laborShowRate,
    this.laborShowDiscountPercent,
    this.laborShowUnit,
    this.laborShowUnitDiscountAmount,
    this.laborShowUnitExtended,
    this.laborShowWeeklyDiscountAmount,
    this.laborShowWeeklyExtended,
    this.laborShowMonthlyDiscountAmount,
    this.laborShowMonthlyExtended,
    this.laborShowPeriodDiscountAmount,
    this.laborShowPeriodExtended,
    this.laborShowWarehouse,
    this.laborShowTaxable,
    this.laborShowNotes,
    this.laborDateStamp,
    this.hideCrewBreaks,
    this.break1Paid,
    this.break2Paid,
    this.break3Paid,
    this.miscShowICode,
    this.miscICodeWidth,
    this.miscShowDescription,
    this.miscDescriptionWidth,
    this.miscShowFromDate,
    this.miscShowToDate,
    this.miscShowBillablePeriods,
    this.miscShowRate,
    this.miscShowDiscountPercent,
    this.miscShowUnit,
    this.miscShowUnitDiscountAmount,
    this.miscShowUnitExtended,
    this.miscShowWeeklyDiscountAmount,
    this.miscShowWeeklyExtended,
    this.miscShowMonthlyDiscountAmount,
    this.miscShowMonthlyExtended,
    this.miscShowPeriodDiscountAmount,
    this.miscShowPeriodExtended,
    this.miscShowWarehouse,
    this.miscShowTaxable,
    this.miscShowNotes,
    this.miscShowWeeksAndDays,
    this.miscShowMonthsAndDays,
    this.miscDateStamp,
    this.subLaborShowOrderNumber,
    this.subLaborShowICode,
    this.subLaborICodeWidth,
    this.subLaborShowDescription,
    this.subLaborDescriptionWidth,
    this.subLaborShowFromDate,
    this.subLaborShowFromTime,
    this.subLaborShowToDate,
    this.subLaborShowToTime,
    this.subLaborShowHours,
    this.subLaborShowBillablePeriods,
    this.subLaborShowRate,
    this.subLaborShowDiscountPercent,
    this.subLaborShowUnit,
    this.subLaborShowUnitDiscountAmount,
    this.subLaborShowUnitExtended,
    this.subLaborShowWeeklyDiscountAmount,
    this.subLaborShowWeeklyExtended,
    this.subLaborShowMonthlyDiscountAmount,
    this.subLaborShowMonthlyExtended,
    this.subLaborShowPeriodDiscountAmount,
    this.subLaborShowPeriodExtended,
    this.subLaborShowWarehouse,
    this.subLaborShowTaxable,
    this.subLaborShowNotes,
    this.subLaborDateStamp,
    this.subMiscShowOrderNumber,
    this.subMiscShowICode,
    this.subMiscICodeWidth,
    this.subMiscShowDescription,
    this.subMiscDescriptionWidth,
    this.subMiscShowFromDate,
    this.subMiscShowToDate,
    this.subMiscShowBillablePeriods,
    this.subMiscShowRate,
    this.subMiscShowDiscountPercent,
    this.subMiscShowUnit,
    this.subMiscShowUnitDiscountAmount,
    this.subMiscShowUnitExtended,
    this.subMiscShowWeeklyDiscountAmount,
    this.subMiscShowWeeklyExtended,
    this.subMiscShowMonthlyDiscountAmount,
    this.subMiscShowMonthlyExtended,
    this.subMiscShowPeriodDiscountAmount,
    this.subMiscShowPeriodExtended,
    this.subMiscShowWarehouse,
    this.subMiscShowTaxable,
    this.subMiscShowNotes,
    this.subMiscDateStamp,
    this.repairShowRepairOrderNumber,
    this.repairShowICode,
    this.repairICodeWidth,
    this.repairShowDescription,
    this.repairDescriptionWidth,
    this.repairShowPickDate,
    this.repairShowRate,
    this.repairShowUnit,
    this.repairShowUnitDiscountAmount,
    this.repairShowUnitExtended,
    this.repairShowPeriodDiscountAmount,
    this.repairShowPeriodExtended,
    this.repairShowWarehouse,
    this.repairShowTaxable,
    this.repairShowNotes,
    this.repairDateStamp,
    this.rwNetDefaultRental,
    this.rwNetDefaultMisc,
    this.rwNetDefaultLabor,
    this.orderBy,
    this.inactive,
    this.dateStamp,
    this.subRentalShowFields,
    this.subSaleShowFields,
    this.subMiscShowFields,
    this.subLaborShowFields,
    this.purchaseShowFields,
    this.miscShowFields,
    this.laborShowFields,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPoSettingsPoTypePoType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPoSettingsPoTypePoTypeFromJson(json);

  @JsonKey(name: 'PoTypeId', includeIfNull: false)
  final String? poTypeId;
  @JsonKey(name: 'PoType', includeIfNull: false)
  final String? poType;
  @JsonKey(name: 'ApprovalNeededByRequired', includeIfNull: false)
  final bool? approvalNeededByRequired;
  @JsonKey(name: 'ImportanceRequired', includeIfNull: false)
  final bool? importanceRequired;
  @JsonKey(name: 'PayTypeRequired', includeIfNull: false)
  final bool? payTypeRequired;
  @JsonKey(name: 'ProjectRequired', includeIfNull: false)
  final bool? projectRequired;
  @JsonKey(name: 'SubRentalShowOrderNumber', includeIfNull: false)
  final bool? subRentalShowOrderNumber;
  @JsonKey(name: 'SubRentalShowRepairOrderNumber', includeIfNull: false)
  final bool? subRentalShowRepairOrderNumber;
  @JsonKey(name: 'SubRentalShowICode', includeIfNull: false)
  final bool? subRentalShowICode;
  @JsonKey(name: 'SubRentalICodeWidth', includeIfNull: false)
  final int? subRentalICodeWidth;
  @JsonKey(name: 'SubRentalShowDescription', includeIfNull: false)
  final bool? subRentalShowDescription;
  @JsonKey(name: 'SubRentalDescriptionWidth', includeIfNull: false)
  final int? subRentalDescriptionWidth;
  @JsonKey(name: 'SubRentalShowFromDate', includeIfNull: false)
  final bool? subRentalShowFromDate;
  @JsonKey(name: 'SubRentalShowFromTime', includeIfNull: false)
  final bool? subRentalShowFromTime;
  @JsonKey(name: 'SubRentalShowToDate', includeIfNull: false)
  final bool? subRentalShowToDate;
  @JsonKey(name: 'SubRentalShowToTime', includeIfNull: false)
  final bool? subRentalShowToTime;
  @JsonKey(name: 'SubRentalShowBillablePeriods', includeIfNull: false)
  final bool? subRentalShowBillablePeriods;
  @JsonKey(name: 'SubRentalShowRate', includeIfNull: false)
  final bool? subRentalShowRate;
  @JsonKey(name: 'SubRentalShowDaysPerWeek', includeIfNull: false)
  final bool? subRentalShowDaysPerWeek;
  @JsonKey(name: 'SubRentalShowDiscountPercent', includeIfNull: false)
  final bool? subRentalShowDiscountPercent;
  @JsonKey(name: 'SubRentalShowUnit', includeIfNull: false)
  final bool? subRentalShowUnit;
  @JsonKey(name: 'SubRentalShowUnitDiscountAmount', includeIfNull: false)
  final bool? subRentalShowUnitDiscountAmount;
  @JsonKey(name: 'SubRentalShowUnitExtended', includeIfNull: false)
  final bool? subRentalShowUnitExtended;
  @JsonKey(name: 'SubRentalShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? subRentalShowWeeklyDiscountAmount;
  @JsonKey(name: 'SubRentalShowWeeklyExtended', includeIfNull: false)
  final bool? subRentalShowWeeklyExtended;
  @JsonKey(name: 'SubRentalShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? subRentalShowMonthlyDiscountAmount;
  @JsonKey(name: 'SubRentalShowMonthlyExtended', includeIfNull: false)
  final bool? subRentalShowMonthlyExtended;
  @JsonKey(name: 'SubRentalShowPeriodDiscountAmount', includeIfNull: false)
  final bool? subRentalShowPeriodDiscountAmount;
  @JsonKey(name: 'SubRentalShowPeriodExtended', includeIfNull: false)
  final bool? subRentalShowPeriodExtended;
  @JsonKey(name: 'SubRentalShowWarehouse', includeIfNull: false)
  final bool? subRentalShowWarehouse;
  @JsonKey(name: 'SubRentalShowTaxable', includeIfNull: false)
  final bool? subRentalShowTaxable;
  @JsonKey(name: 'SubRentalShowNotes', includeIfNull: false)
  final bool? subRentalShowNotes;
  @JsonKey(name: 'SubRentalDateStamp', includeIfNull: false)
  final String? subRentalDateStamp;
  @JsonKey(name: 'SubSaleShowOrderNumber', includeIfNull: false)
  final bool? subSaleShowOrderNumber;
  @JsonKey(name: 'SubSaleShowICode', includeIfNull: false)
  final bool? subSaleShowICode;
  @JsonKey(name: 'SubSaleICodeWidth', includeIfNull: false)
  final int? subSaleICodeWidth;
  @JsonKey(name: 'SubSaleShowDescription', includeIfNull: false)
  final bool? subSaleShowDescription;
  @JsonKey(name: 'SubSaleDescriptionWidth', includeIfNull: false)
  final int? subSaleDescriptionWidth;
  @JsonKey(name: 'SubSaleShowManufacturerPartNumber', includeIfNull: false)
  final bool? subSaleShowManufacturerPartNumber;
  @JsonKey(name: 'SubSaleShowRate', includeIfNull: false)
  final bool? subSaleShowRate;
  @JsonKey(name: 'SubSaleShowDiscountPercent', includeIfNull: false)
  final bool? subSaleShowDiscountPercent;
  @JsonKey(name: 'SubSaleShowUnit', includeIfNull: false)
  final bool? subSaleShowUnit;
  @JsonKey(name: 'SubSaleShowUnitDiscountAmount', includeIfNull: false)
  final bool? subSaleShowUnitDiscountAmount;
  @JsonKey(name: 'SubSaleShowUnitExtended', includeIfNull: false)
  final bool? subSaleShowUnitExtended;
  @JsonKey(name: 'SubSaleShowPeriodDiscountAmount', includeIfNull: false)
  final bool? subSaleShowPeriodDiscountAmount;
  @JsonKey(name: 'SubSaleShowPeriodExtended', includeIfNull: false)
  final bool? subSaleShowPeriodExtended;
  @JsonKey(name: 'SubSaleShowWarehouse', includeIfNull: false)
  final bool? subSaleShowWarehouse;
  @JsonKey(name: 'SubSaleShowTaxable', includeIfNull: false)
  final bool? subSaleShowTaxable;
  @JsonKey(name: 'SubSaleShowNotes', includeIfNull: false)
  final bool? subSaleShowNotes;
  @JsonKey(name: 'SubSaleDateStamp', includeIfNull: false)
  final String? subSaleDateStamp;
  @JsonKey(name: 'PurchaseShowICode', includeIfNull: false)
  final bool? purchaseShowICode;
  @JsonKey(name: 'PurchaseICodeWidth', includeIfNull: false)
  final int? purchaseICodeWidth;
  @JsonKey(name: 'PurchaseShowDescription', includeIfNull: false)
  final bool? purchaseShowDescription;
  @JsonKey(name: 'PurchaseDescriptionWidth', includeIfNull: false)
  final int? purchaseDescriptionWidth;
  @JsonKey(name: 'PurchaseShowRate', includeIfNull: false)
  final bool? purchaseShowRate;
  @JsonKey(name: 'PurchaseShowDiscountPercent', includeIfNull: false)
  final bool? purchaseShowDiscountPercent;
  @JsonKey(name: 'PurchaseShowUnit', includeIfNull: false)
  final bool? purchaseShowUnit;
  @JsonKey(name: 'PurchaseShowUnitDiscountAmount', includeIfNull: false)
  final bool? purchaseShowUnitDiscountAmount;
  @JsonKey(name: 'PurchaseShowUnitExtended', includeIfNull: false)
  final bool? purchaseShowUnitExtended;
  @JsonKey(name: 'PurchaseShowPeriodDiscountAmount', includeIfNull: false)
  final bool? purchaseShowPeriodDiscountAmount;
  @JsonKey(name: 'PurchaseShowPeriodExtended', includeIfNull: false)
  final bool? purchaseShowPeriodExtended;
  @JsonKey(name: 'PurchaseShowCountryOfOrigin', includeIfNull: false)
  final bool? purchaseShowCountryOfOrigin;
  @JsonKey(name: 'PurchaseShowManufacturer', includeIfNull: false)
  final bool? purchaseShowManufacturer;
  @JsonKey(name: 'PurchaseShowManufacturerPartNumber', includeIfNull: false)
  final bool? purchaseShowManufacturerPartNumber;
  @JsonKey(name: 'PurchaseManufacturerPartNumberWidth', includeIfNull: false)
  final int? purchaseManufacturerPartNumberWidth;
  @JsonKey(name: 'PurchaseShowModelNumber', includeIfNull: false)
  final bool? purchaseShowModelNumber;
  @JsonKey(name: 'PurchaseShowVendorPartNumber', includeIfNull: false)
  final bool? purchaseShowVendorPartNumber;
  @JsonKey(name: 'PurchaseShowWarehouse', includeIfNull: false)
  final bool? purchaseShowWarehouse;
  @JsonKey(name: 'PurchaseShowTaxable', includeIfNull: false)
  final bool? purchaseShowTaxable;
  @JsonKey(name: 'PurchaseShowNotes', includeIfNull: false)
  final bool? purchaseShowNotes;
  @JsonKey(name: 'PurchaseDateStamp', includeIfNull: false)
  final String? purchaseDateStamp;
  @JsonKey(name: 'RentalPurchaseDefaultRate', includeIfNull: false)
  final String? rentalPurchaseDefaultRate;
  @JsonKey(name: 'SalesPurchaseDefaultRate', includeIfNull: false)
  final String? salesPurchaseDefaultRate;
  @JsonKey(name: 'LaborShowICode', includeIfNull: false)
  final bool? laborShowICode;
  @JsonKey(name: 'LaborICodeWidth', includeIfNull: false)
  final int? laborICodeWidth;
  @JsonKey(name: 'LaborShowDescription', includeIfNull: false)
  final bool? laborShowDescription;
  @JsonKey(name: 'LaborDescriptionWidth', includeIfNull: false)
  final int? laborDescriptionWidth;
  @JsonKey(name: 'LaborShowOrderActivity', includeIfNull: false)
  final bool? laborShowOrderActivity;
  @JsonKey(name: 'LaborShowCrewName', includeIfNull: false)
  final bool? laborShowCrewName;
  @JsonKey(name: 'LaborShowFromDate', includeIfNull: false)
  final bool? laborShowFromDate;
  @JsonKey(name: 'LaborShowFromTime', includeIfNull: false)
  final bool? laborShowFromTime;
  @JsonKey(name: 'LaborShowToDate', includeIfNull: false)
  final bool? laborShowToDate;
  @JsonKey(name: 'LaborShowToTime', includeIfNull: false)
  final bool? laborShowToTime;
  @JsonKey(name: 'LaborShowHours', includeIfNull: false)
  final bool? laborShowHours;
  @JsonKey(name: 'LaborShowBillablePeriods', includeIfNull: false)
  final bool? laborShowBillablePeriods;
  @JsonKey(name: 'LaborShowRate', includeIfNull: false)
  final bool? laborShowRate;
  @JsonKey(name: 'LaborShowDiscountPercent', includeIfNull: false)
  final bool? laborShowDiscountPercent;
  @JsonKey(name: 'LaborShowUnit', includeIfNull: false)
  final bool? laborShowUnit;
  @JsonKey(name: 'LaborShowUnitDiscountAmount', includeIfNull: false)
  final bool? laborShowUnitDiscountAmount;
  @JsonKey(name: 'LaborShowUnitExtended', includeIfNull: false)
  final bool? laborShowUnitExtended;
  @JsonKey(name: 'LaborShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? laborShowWeeklyDiscountAmount;
  @JsonKey(name: 'LaborShowWeeklyExtended', includeIfNull: false)
  final bool? laborShowWeeklyExtended;
  @JsonKey(name: 'LaborShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? laborShowMonthlyDiscountAmount;
  @JsonKey(name: 'LaborShowMonthlyExtended', includeIfNull: false)
  final bool? laborShowMonthlyExtended;
  @JsonKey(name: 'LaborShowPeriodDiscountAmount', includeIfNull: false)
  final bool? laborShowPeriodDiscountAmount;
  @JsonKey(name: 'LaborShowPeriodExtended', includeIfNull: false)
  final bool? laborShowPeriodExtended;
  @JsonKey(name: 'LaborShowWarehouse', includeIfNull: false)
  final bool? laborShowWarehouse;
  @JsonKey(name: 'LaborShowTaxable', includeIfNull: false)
  final bool? laborShowTaxable;
  @JsonKey(name: 'LaborShowNotes', includeIfNull: false)
  final bool? laborShowNotes;
  @JsonKey(name: 'LaborDateStamp', includeIfNull: false)
  final String? laborDateStamp;
  @JsonKey(name: 'HideCrewBreaks', includeIfNull: false)
  final bool? hideCrewBreaks;
  @JsonKey(name: 'Break1Paid', includeIfNull: false)
  final bool? break1Paid;
  @JsonKey(name: 'Break2Paid', includeIfNull: false)
  final bool? break2Paid;
  @JsonKey(name: 'Break3Paid', includeIfNull: false)
  final bool? break3Paid;
  @JsonKey(name: 'MiscShowICode', includeIfNull: false)
  final bool? miscShowICode;
  @JsonKey(name: 'MiscICodeWidth', includeIfNull: false)
  final int? miscICodeWidth;
  @JsonKey(name: 'MiscShowDescription', includeIfNull: false)
  final bool? miscShowDescription;
  @JsonKey(name: 'MiscDescriptionWidth', includeIfNull: false)
  final int? miscDescriptionWidth;
  @JsonKey(name: 'MiscShowFromDate', includeIfNull: false)
  final bool? miscShowFromDate;
  @JsonKey(name: 'MiscShowToDate', includeIfNull: false)
  final bool? miscShowToDate;
  @JsonKey(name: 'MiscShowBillablePeriods', includeIfNull: false)
  final bool? miscShowBillablePeriods;
  @JsonKey(name: 'MiscShowRate', includeIfNull: false)
  final bool? miscShowRate;
  @JsonKey(name: 'MiscShowDiscountPercent', includeIfNull: false)
  final bool? miscShowDiscountPercent;
  @JsonKey(name: 'MiscShowUnit', includeIfNull: false)
  final bool? miscShowUnit;
  @JsonKey(name: 'MiscShowUnitDiscountAmount', includeIfNull: false)
  final bool? miscShowUnitDiscountAmount;
  @JsonKey(name: 'MiscShowUnitExtended', includeIfNull: false)
  final bool? miscShowUnitExtended;
  @JsonKey(name: 'MiscShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? miscShowWeeklyDiscountAmount;
  @JsonKey(name: 'MiscShowWeeklyExtended', includeIfNull: false)
  final bool? miscShowWeeklyExtended;
  @JsonKey(name: 'MiscShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? miscShowMonthlyDiscountAmount;
  @JsonKey(name: 'MiscShowMonthlyExtended', includeIfNull: false)
  final bool? miscShowMonthlyExtended;
  @JsonKey(name: 'MiscShowPeriodDiscountAmount', includeIfNull: false)
  final bool? miscShowPeriodDiscountAmount;
  @JsonKey(name: 'MiscShowPeriodExtended', includeIfNull: false)
  final bool? miscShowPeriodExtended;
  @JsonKey(name: 'MiscShowWarehouse', includeIfNull: false)
  final bool? miscShowWarehouse;
  @JsonKey(name: 'MiscShowTaxable', includeIfNull: false)
  final bool? miscShowTaxable;
  @JsonKey(name: 'MiscShowNotes', includeIfNull: false)
  final bool? miscShowNotes;
  @JsonKey(name: 'MiscShowWeeksAndDays', includeIfNull: false)
  final bool? miscShowWeeksAndDays;
  @JsonKey(name: 'MiscShowMonthsAndDays', includeIfNull: false)
  final bool? miscShowMonthsAndDays;
  @JsonKey(name: 'MiscDateStamp', includeIfNull: false)
  final String? miscDateStamp;
  @JsonKey(name: 'SubLaborShowOrderNumber', includeIfNull: false)
  final bool? subLaborShowOrderNumber;
  @JsonKey(name: 'SubLaborShowICode', includeIfNull: false)
  final bool? subLaborShowICode;
  @JsonKey(name: 'SubLaborICodeWidth', includeIfNull: false)
  final int? subLaborICodeWidth;
  @JsonKey(name: 'SubLaborShowDescription', includeIfNull: false)
  final bool? subLaborShowDescription;
  @JsonKey(name: 'SubLaborDescriptionWidth', includeIfNull: false)
  final int? subLaborDescriptionWidth;
  @JsonKey(name: 'SubLaborShowFromDate', includeIfNull: false)
  final bool? subLaborShowFromDate;
  @JsonKey(name: 'SubLaborShowFromTime', includeIfNull: false)
  final bool? subLaborShowFromTime;
  @JsonKey(name: 'SubLaborShowToDate', includeIfNull: false)
  final bool? subLaborShowToDate;
  @JsonKey(name: 'SubLaborShowToTime', includeIfNull: false)
  final bool? subLaborShowToTime;
  @JsonKey(name: 'SubLaborShowHours', includeIfNull: false)
  final bool? subLaborShowHours;
  @JsonKey(name: 'SubLaborShowBillablePeriods', includeIfNull: false)
  final bool? subLaborShowBillablePeriods;
  @JsonKey(name: 'SubLaborShowRate', includeIfNull: false)
  final bool? subLaborShowRate;
  @JsonKey(name: 'SubLaborShowDiscountPercent', includeIfNull: false)
  final bool? subLaborShowDiscountPercent;
  @JsonKey(name: 'SubLaborShowUnit', includeIfNull: false)
  final bool? subLaborShowUnit;
  @JsonKey(name: 'SubLaborShowUnitDiscountAmount', includeIfNull: false)
  final bool? subLaborShowUnitDiscountAmount;
  @JsonKey(name: 'SubLaborShowUnitExtended', includeIfNull: false)
  final bool? subLaborShowUnitExtended;
  @JsonKey(name: 'SubLaborShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? subLaborShowWeeklyDiscountAmount;
  @JsonKey(name: 'SubLaborShowWeeklyExtended', includeIfNull: false)
  final bool? subLaborShowWeeklyExtended;
  @JsonKey(name: 'SubLaborShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? subLaborShowMonthlyDiscountAmount;
  @JsonKey(name: 'SubLaborShowMonthlyExtended', includeIfNull: false)
  final bool? subLaborShowMonthlyExtended;
  @JsonKey(name: 'SubLaborShowPeriodDiscountAmount', includeIfNull: false)
  final bool? subLaborShowPeriodDiscountAmount;
  @JsonKey(name: 'SubLaborShowPeriodExtended', includeIfNull: false)
  final bool? subLaborShowPeriodExtended;
  @JsonKey(name: 'SubLaborShowWarehouse', includeIfNull: false)
  final bool? subLaborShowWarehouse;
  @JsonKey(name: 'SubLaborShowTaxable', includeIfNull: false)
  final bool? subLaborShowTaxable;
  @JsonKey(name: 'SubLaborShowNotes', includeIfNull: false)
  final bool? subLaborShowNotes;
  @JsonKey(name: 'SubLaborDateStamp', includeIfNull: false)
  final String? subLaborDateStamp;
  @JsonKey(name: 'SubMiscShowOrderNumber', includeIfNull: false)
  final bool? subMiscShowOrderNumber;
  @JsonKey(name: 'SubMiscShowICode', includeIfNull: false)
  final bool? subMiscShowICode;
  @JsonKey(name: 'SubMiscICodeWidth', includeIfNull: false)
  final int? subMiscICodeWidth;
  @JsonKey(name: 'SubMiscShowDescription', includeIfNull: false)
  final bool? subMiscShowDescription;
  @JsonKey(name: 'SubMiscDescriptionWidth', includeIfNull: false)
  final int? subMiscDescriptionWidth;
  @JsonKey(name: 'SubMiscShowFromDate', includeIfNull: false)
  final bool? subMiscShowFromDate;
  @JsonKey(name: 'SubMiscShowToDate', includeIfNull: false)
  final bool? subMiscShowToDate;
  @JsonKey(name: 'SubMiscShowBillablePeriods', includeIfNull: false)
  final bool? subMiscShowBillablePeriods;
  @JsonKey(name: 'SubMiscShowRate', includeIfNull: false)
  final bool? subMiscShowRate;
  @JsonKey(name: 'SubMiscShowDiscountPercent', includeIfNull: false)
  final bool? subMiscShowDiscountPercent;
  @JsonKey(name: 'SubMiscShowUnit', includeIfNull: false)
  final bool? subMiscShowUnit;
  @JsonKey(name: 'SubMiscShowUnitDiscountAmount', includeIfNull: false)
  final bool? subMiscShowUnitDiscountAmount;
  @JsonKey(name: 'SubMiscShowUnitExtended', includeIfNull: false)
  final bool? subMiscShowUnitExtended;
  @JsonKey(name: 'SubMiscShowWeeklyDiscountAmount', includeIfNull: false)
  final bool? subMiscShowWeeklyDiscountAmount;
  @JsonKey(name: 'SubMiscShowWeeklyExtended', includeIfNull: false)
  final bool? subMiscShowWeeklyExtended;
  @JsonKey(name: 'SubMiscShowMonthlyDiscountAmount', includeIfNull: false)
  final bool? subMiscShowMonthlyDiscountAmount;
  @JsonKey(name: 'SubMiscShowMonthlyExtended', includeIfNull: false)
  final bool? subMiscShowMonthlyExtended;
  @JsonKey(name: 'SubMiscShowPeriodDiscountAmount', includeIfNull: false)
  final bool? subMiscShowPeriodDiscountAmount;
  @JsonKey(name: 'SubMiscShowPeriodExtended', includeIfNull: false)
  final bool? subMiscShowPeriodExtended;
  @JsonKey(name: 'SubMiscShowWarehouse', includeIfNull: false)
  final bool? subMiscShowWarehouse;
  @JsonKey(name: 'SubMiscShowTaxable', includeIfNull: false)
  final bool? subMiscShowTaxable;
  @JsonKey(name: 'SubMiscShowNotes', includeIfNull: false)
  final bool? subMiscShowNotes;
  @JsonKey(name: 'SubMiscDateStamp', includeIfNull: false)
  final String? subMiscDateStamp;
  @JsonKey(name: 'RepairShowRepairOrderNumber', includeIfNull: false)
  final bool? repairShowRepairOrderNumber;
  @JsonKey(name: 'RepairShowICode', includeIfNull: false)
  final bool? repairShowICode;
  @JsonKey(name: 'RepairICodeWidth', includeIfNull: false)
  final int? repairICodeWidth;
  @JsonKey(name: 'RepairShowDescription', includeIfNull: false)
  final bool? repairShowDescription;
  @JsonKey(name: 'RepairDescriptionWidth', includeIfNull: false)
  final int? repairDescriptionWidth;
  @JsonKey(name: 'RepairShowPickDate', includeIfNull: false)
  final bool? repairShowPickDate;
  @JsonKey(name: 'RepairShowRate', includeIfNull: false)
  final bool? repairShowRate;
  @JsonKey(name: 'RepairShowUnit', includeIfNull: false)
  final bool? repairShowUnit;
  @JsonKey(name: 'RepairShowUnitDiscountAmount', includeIfNull: false)
  final bool? repairShowUnitDiscountAmount;
  @JsonKey(name: 'RepairShowUnitExtended', includeIfNull: false)
  final bool? repairShowUnitExtended;
  @JsonKey(name: 'RepairShowPeriodDiscountAmount', includeIfNull: false)
  final bool? repairShowPeriodDiscountAmount;
  @JsonKey(name: 'RepairShowPeriodExtended', includeIfNull: false)
  final bool? repairShowPeriodExtended;
  @JsonKey(name: 'RepairShowWarehouse', includeIfNull: false)
  final bool? repairShowWarehouse;
  @JsonKey(name: 'RepairShowTaxable', includeIfNull: false)
  final bool? repairShowTaxable;
  @JsonKey(name: 'RepairShowNotes', includeIfNull: false)
  final bool? repairShowNotes;
  @JsonKey(name: 'RepairDateStamp', includeIfNull: false)
  final String? repairDateStamp;
  @JsonKey(name: 'RwNetDefaultRental', includeIfNull: false)
  final bool? rwNetDefaultRental;
  @JsonKey(name: 'RwNetDefaultMisc', includeIfNull: false)
  final bool? rwNetDefaultMisc;
  @JsonKey(name: 'RwNetDefaultLabor', includeIfNull: false)
  final bool? rwNetDefaultLabor;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(
      name: 'SubRentalShowFields',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? subRentalShowFields;
  @JsonKey(
      name: 'SubSaleShowFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? subSaleShowFields;
  @JsonKey(
      name: 'SubMiscShowFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? subMiscShowFields;
  @JsonKey(
      name: 'SubLaborShowFields',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? subLaborShowFields;
  @JsonKey(
      name: 'PurchaseShowFields',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? purchaseShowFields;
  @JsonKey(
      name: 'MiscShowFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? miscShowFields;
  @JsonKey(
      name: 'LaborShowFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? laborShowFields;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoTypePoTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPoSettingsPoTypePoTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPoSettingsPoTypePoTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPoSettingsPoTypePoType &&
            (identical(other.poTypeId, poTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.poTypeId, poTypeId)) &&
            (identical(other.poType, poType) ||
                const DeepCollectionEquality().equals(other.poType, poType)) &&
            (identical(other.approvalNeededByRequired, approvalNeededByRequired) ||
                const DeepCollectionEquality().equals(
                    other.approvalNeededByRequired,
                    approvalNeededByRequired)) &&
            (identical(other.importanceRequired, importanceRequired) ||
                const DeepCollectionEquality()
                    .equals(other.importanceRequired, importanceRequired)) &&
            (identical(other.payTypeRequired, payTypeRequired) ||
                const DeepCollectionEquality()
                    .equals(other.payTypeRequired, payTypeRequired)) &&
            (identical(other.projectRequired, projectRequired) ||
                const DeepCollectionEquality()
                    .equals(other.projectRequired, projectRequired)) &&
            (identical(other.subRentalShowOrderNumber, subRentalShowOrderNumber) ||
                const DeepCollectionEquality().equals(
                    other.subRentalShowOrderNumber,
                    subRentalShowOrderNumber)) &&
            (identical(other.subRentalShowRepairOrderNumber, subRentalShowRepairOrderNumber) ||
                const DeepCollectionEquality().equals(
                    other.subRentalShowRepairOrderNumber,
                    subRentalShowRepairOrderNumber)) &&
            (identical(other.subRentalShowICode, subRentalShowICode) ||
                const DeepCollectionEquality()
                    .equals(other.subRentalShowICode, subRentalShowICode)) &&
            (identical(other.subRentalICodeWidth, subRentalICodeWidth) ||
                const DeepCollectionEquality()
                    .equals(other.subRentalICodeWidth, subRentalICodeWidth)) &&
            (identical(other.subRentalShowDescription, subRentalShowDescription) ||
                const DeepCollectionEquality().equals(
                    other.subRentalShowDescription,
                    subRentalShowDescription)) &&
            (identical(other.subRentalDescriptionWidth, subRentalDescriptionWidth) ||
                const DeepCollectionEquality().equals(
                    other.subRentalDescriptionWidth,
                    subRentalDescriptionWidth)) &&
            (identical(other.subRentalShowFromDate, subRentalShowFromDate) || const DeepCollectionEquality().equals(other.subRentalShowFromDate, subRentalShowFromDate)) &&
            (identical(other.subRentalShowFromTime, subRentalShowFromTime) || const DeepCollectionEquality().equals(other.subRentalShowFromTime, subRentalShowFromTime)) &&
            (identical(other.subRentalShowToDate, subRentalShowToDate) || const DeepCollectionEquality().equals(other.subRentalShowToDate, subRentalShowToDate)) &&
            (identical(other.subRentalShowToTime, subRentalShowToTime) || const DeepCollectionEquality().equals(other.subRentalShowToTime, subRentalShowToTime)) &&
            (identical(other.subRentalShowBillablePeriods, subRentalShowBillablePeriods) || const DeepCollectionEquality().equals(other.subRentalShowBillablePeriods, subRentalShowBillablePeriods)) &&
            (identical(other.subRentalShowRate, subRentalShowRate) || const DeepCollectionEquality().equals(other.subRentalShowRate, subRentalShowRate)) &&
            (identical(other.subRentalShowDaysPerWeek, subRentalShowDaysPerWeek) || const DeepCollectionEquality().equals(other.subRentalShowDaysPerWeek, subRentalShowDaysPerWeek)) &&
            (identical(other.subRentalShowDiscountPercent, subRentalShowDiscountPercent) || const DeepCollectionEquality().equals(other.subRentalShowDiscountPercent, subRentalShowDiscountPercent)) &&
            (identical(other.subRentalShowUnit, subRentalShowUnit) || const DeepCollectionEquality().equals(other.subRentalShowUnit, subRentalShowUnit)) &&
            (identical(other.subRentalShowUnitDiscountAmount, subRentalShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.subRentalShowUnitDiscountAmount, subRentalShowUnitDiscountAmount)) &&
            (identical(other.subRentalShowUnitExtended, subRentalShowUnitExtended) || const DeepCollectionEquality().equals(other.subRentalShowUnitExtended, subRentalShowUnitExtended)) &&
            (identical(other.subRentalShowWeeklyDiscountAmount, subRentalShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.subRentalShowWeeklyDiscountAmount, subRentalShowWeeklyDiscountAmount)) &&
            (identical(other.subRentalShowWeeklyExtended, subRentalShowWeeklyExtended) || const DeepCollectionEquality().equals(other.subRentalShowWeeklyExtended, subRentalShowWeeklyExtended)) &&
            (identical(other.subRentalShowMonthlyDiscountAmount, subRentalShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.subRentalShowMonthlyDiscountAmount, subRentalShowMonthlyDiscountAmount)) &&
            (identical(other.subRentalShowMonthlyExtended, subRentalShowMonthlyExtended) || const DeepCollectionEquality().equals(other.subRentalShowMonthlyExtended, subRentalShowMonthlyExtended)) &&
            (identical(other.subRentalShowPeriodDiscountAmount, subRentalShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.subRentalShowPeriodDiscountAmount, subRentalShowPeriodDiscountAmount)) &&
            (identical(other.subRentalShowPeriodExtended, subRentalShowPeriodExtended) || const DeepCollectionEquality().equals(other.subRentalShowPeriodExtended, subRentalShowPeriodExtended)) &&
            (identical(other.subRentalShowWarehouse, subRentalShowWarehouse) || const DeepCollectionEquality().equals(other.subRentalShowWarehouse, subRentalShowWarehouse)) &&
            (identical(other.subRentalShowTaxable, subRentalShowTaxable) || const DeepCollectionEquality().equals(other.subRentalShowTaxable, subRentalShowTaxable)) &&
            (identical(other.subRentalShowNotes, subRentalShowNotes) || const DeepCollectionEquality().equals(other.subRentalShowNotes, subRentalShowNotes)) &&
            (identical(other.subRentalDateStamp, subRentalDateStamp) || const DeepCollectionEquality().equals(other.subRentalDateStamp, subRentalDateStamp)) &&
            (identical(other.subSaleShowOrderNumber, subSaleShowOrderNumber) || const DeepCollectionEquality().equals(other.subSaleShowOrderNumber, subSaleShowOrderNumber)) &&
            (identical(other.subSaleShowICode, subSaleShowICode) || const DeepCollectionEquality().equals(other.subSaleShowICode, subSaleShowICode)) &&
            (identical(other.subSaleICodeWidth, subSaleICodeWidth) || const DeepCollectionEquality().equals(other.subSaleICodeWidth, subSaleICodeWidth)) &&
            (identical(other.subSaleShowDescription, subSaleShowDescription) || const DeepCollectionEquality().equals(other.subSaleShowDescription, subSaleShowDescription)) &&
            (identical(other.subSaleDescriptionWidth, subSaleDescriptionWidth) || const DeepCollectionEquality().equals(other.subSaleDescriptionWidth, subSaleDescriptionWidth)) &&
            (identical(other.subSaleShowManufacturerPartNumber, subSaleShowManufacturerPartNumber) || const DeepCollectionEquality().equals(other.subSaleShowManufacturerPartNumber, subSaleShowManufacturerPartNumber)) &&
            (identical(other.subSaleShowRate, subSaleShowRate) || const DeepCollectionEquality().equals(other.subSaleShowRate, subSaleShowRate)) &&
            (identical(other.subSaleShowDiscountPercent, subSaleShowDiscountPercent) || const DeepCollectionEquality().equals(other.subSaleShowDiscountPercent, subSaleShowDiscountPercent)) &&
            (identical(other.subSaleShowUnit, subSaleShowUnit) || const DeepCollectionEquality().equals(other.subSaleShowUnit, subSaleShowUnit)) &&
            (identical(other.subSaleShowUnitDiscountAmount, subSaleShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.subSaleShowUnitDiscountAmount, subSaleShowUnitDiscountAmount)) &&
            (identical(other.subSaleShowUnitExtended, subSaleShowUnitExtended) || const DeepCollectionEquality().equals(other.subSaleShowUnitExtended, subSaleShowUnitExtended)) &&
            (identical(other.subSaleShowPeriodDiscountAmount, subSaleShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.subSaleShowPeriodDiscountAmount, subSaleShowPeriodDiscountAmount)) &&
            (identical(other.subSaleShowPeriodExtended, subSaleShowPeriodExtended) || const DeepCollectionEquality().equals(other.subSaleShowPeriodExtended, subSaleShowPeriodExtended)) &&
            (identical(other.subSaleShowWarehouse, subSaleShowWarehouse) || const DeepCollectionEquality().equals(other.subSaleShowWarehouse, subSaleShowWarehouse)) &&
            (identical(other.subSaleShowTaxable, subSaleShowTaxable) || const DeepCollectionEquality().equals(other.subSaleShowTaxable, subSaleShowTaxable)) &&
            (identical(other.subSaleShowNotes, subSaleShowNotes) || const DeepCollectionEquality().equals(other.subSaleShowNotes, subSaleShowNotes)) &&
            (identical(other.subSaleDateStamp, subSaleDateStamp) || const DeepCollectionEquality().equals(other.subSaleDateStamp, subSaleDateStamp)) &&
            (identical(other.purchaseShowICode, purchaseShowICode) || const DeepCollectionEquality().equals(other.purchaseShowICode, purchaseShowICode)) &&
            (identical(other.purchaseICodeWidth, purchaseICodeWidth) || const DeepCollectionEquality().equals(other.purchaseICodeWidth, purchaseICodeWidth)) &&
            (identical(other.purchaseShowDescription, purchaseShowDescription) || const DeepCollectionEquality().equals(other.purchaseShowDescription, purchaseShowDescription)) &&
            (identical(other.purchaseDescriptionWidth, purchaseDescriptionWidth) || const DeepCollectionEquality().equals(other.purchaseDescriptionWidth, purchaseDescriptionWidth)) &&
            (identical(other.purchaseShowRate, purchaseShowRate) || const DeepCollectionEquality().equals(other.purchaseShowRate, purchaseShowRate)) &&
            (identical(other.purchaseShowDiscountPercent, purchaseShowDiscountPercent) || const DeepCollectionEquality().equals(other.purchaseShowDiscountPercent, purchaseShowDiscountPercent)) &&
            (identical(other.purchaseShowUnit, purchaseShowUnit) || const DeepCollectionEquality().equals(other.purchaseShowUnit, purchaseShowUnit)) &&
            (identical(other.purchaseShowUnitDiscountAmount, purchaseShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.purchaseShowUnitDiscountAmount, purchaseShowUnitDiscountAmount)) &&
            (identical(other.purchaseShowUnitExtended, purchaseShowUnitExtended) || const DeepCollectionEquality().equals(other.purchaseShowUnitExtended, purchaseShowUnitExtended)) &&
            (identical(other.purchaseShowPeriodDiscountAmount, purchaseShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.purchaseShowPeriodDiscountAmount, purchaseShowPeriodDiscountAmount)) &&
            (identical(other.purchaseShowPeriodExtended, purchaseShowPeriodExtended) || const DeepCollectionEquality().equals(other.purchaseShowPeriodExtended, purchaseShowPeriodExtended)) &&
            (identical(other.purchaseShowCountryOfOrigin, purchaseShowCountryOfOrigin) || const DeepCollectionEquality().equals(other.purchaseShowCountryOfOrigin, purchaseShowCountryOfOrigin)) &&
            (identical(other.purchaseShowManufacturer, purchaseShowManufacturer) || const DeepCollectionEquality().equals(other.purchaseShowManufacturer, purchaseShowManufacturer)) &&
            (identical(other.purchaseShowManufacturerPartNumber, purchaseShowManufacturerPartNumber) || const DeepCollectionEquality().equals(other.purchaseShowManufacturerPartNumber, purchaseShowManufacturerPartNumber)) &&
            (identical(other.purchaseManufacturerPartNumberWidth, purchaseManufacturerPartNumberWidth) || const DeepCollectionEquality().equals(other.purchaseManufacturerPartNumberWidth, purchaseManufacturerPartNumberWidth)) &&
            (identical(other.purchaseShowModelNumber, purchaseShowModelNumber) || const DeepCollectionEquality().equals(other.purchaseShowModelNumber, purchaseShowModelNumber)) &&
            (identical(other.purchaseShowVendorPartNumber, purchaseShowVendorPartNumber) || const DeepCollectionEquality().equals(other.purchaseShowVendorPartNumber, purchaseShowVendorPartNumber)) &&
            (identical(other.purchaseShowWarehouse, purchaseShowWarehouse) || const DeepCollectionEquality().equals(other.purchaseShowWarehouse, purchaseShowWarehouse)) &&
            (identical(other.purchaseShowTaxable, purchaseShowTaxable) || const DeepCollectionEquality().equals(other.purchaseShowTaxable, purchaseShowTaxable)) &&
            (identical(other.purchaseShowNotes, purchaseShowNotes) || const DeepCollectionEquality().equals(other.purchaseShowNotes, purchaseShowNotes)) &&
            (identical(other.purchaseDateStamp, purchaseDateStamp) || const DeepCollectionEquality().equals(other.purchaseDateStamp, purchaseDateStamp)) &&
            (identical(other.rentalPurchaseDefaultRate, rentalPurchaseDefaultRate) || const DeepCollectionEquality().equals(other.rentalPurchaseDefaultRate, rentalPurchaseDefaultRate)) &&
            (identical(other.salesPurchaseDefaultRate, salesPurchaseDefaultRate) || const DeepCollectionEquality().equals(other.salesPurchaseDefaultRate, salesPurchaseDefaultRate)) &&
            (identical(other.laborShowICode, laborShowICode) || const DeepCollectionEquality().equals(other.laborShowICode, laborShowICode)) &&
            (identical(other.laborICodeWidth, laborICodeWidth) || const DeepCollectionEquality().equals(other.laborICodeWidth, laborICodeWidth)) &&
            (identical(other.laborShowDescription, laborShowDescription) || const DeepCollectionEquality().equals(other.laborShowDescription, laborShowDescription)) &&
            (identical(other.laborDescriptionWidth, laborDescriptionWidth) || const DeepCollectionEquality().equals(other.laborDescriptionWidth, laborDescriptionWidth)) &&
            (identical(other.laborShowOrderActivity, laborShowOrderActivity) || const DeepCollectionEquality().equals(other.laborShowOrderActivity, laborShowOrderActivity)) &&
            (identical(other.laborShowCrewName, laborShowCrewName) || const DeepCollectionEquality().equals(other.laborShowCrewName, laborShowCrewName)) &&
            (identical(other.laborShowFromDate, laborShowFromDate) || const DeepCollectionEquality().equals(other.laborShowFromDate, laborShowFromDate)) &&
            (identical(other.laborShowFromTime, laborShowFromTime) || const DeepCollectionEquality().equals(other.laborShowFromTime, laborShowFromTime)) &&
            (identical(other.laborShowToDate, laborShowToDate) || const DeepCollectionEquality().equals(other.laborShowToDate, laborShowToDate)) &&
            (identical(other.laborShowToTime, laborShowToTime) || const DeepCollectionEquality().equals(other.laborShowToTime, laborShowToTime)) &&
            (identical(other.laborShowHours, laborShowHours) || const DeepCollectionEquality().equals(other.laborShowHours, laborShowHours)) &&
            (identical(other.laborShowBillablePeriods, laborShowBillablePeriods) || const DeepCollectionEquality().equals(other.laborShowBillablePeriods, laborShowBillablePeriods)) &&
            (identical(other.laborShowRate, laborShowRate) || const DeepCollectionEquality().equals(other.laborShowRate, laborShowRate)) &&
            (identical(other.laborShowDiscountPercent, laborShowDiscountPercent) || const DeepCollectionEquality().equals(other.laborShowDiscountPercent, laborShowDiscountPercent)) &&
            (identical(other.laborShowUnit, laborShowUnit) || const DeepCollectionEquality().equals(other.laborShowUnit, laborShowUnit)) &&
            (identical(other.laborShowUnitDiscountAmount, laborShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowUnitDiscountAmount, laborShowUnitDiscountAmount)) &&
            (identical(other.laborShowUnitExtended, laborShowUnitExtended) || const DeepCollectionEquality().equals(other.laborShowUnitExtended, laborShowUnitExtended)) &&
            (identical(other.laborShowWeeklyDiscountAmount, laborShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowWeeklyDiscountAmount, laborShowWeeklyDiscountAmount)) &&
            (identical(other.laborShowWeeklyExtended, laborShowWeeklyExtended) || const DeepCollectionEquality().equals(other.laborShowWeeklyExtended, laborShowWeeklyExtended)) &&
            (identical(other.laborShowMonthlyDiscountAmount, laborShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowMonthlyDiscountAmount, laborShowMonthlyDiscountAmount)) &&
            (identical(other.laborShowMonthlyExtended, laborShowMonthlyExtended) || const DeepCollectionEquality().equals(other.laborShowMonthlyExtended, laborShowMonthlyExtended)) &&
            (identical(other.laborShowPeriodDiscountAmount, laborShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.laborShowPeriodDiscountAmount, laborShowPeriodDiscountAmount)) &&
            (identical(other.laborShowPeriodExtended, laborShowPeriodExtended) || const DeepCollectionEquality().equals(other.laborShowPeriodExtended, laborShowPeriodExtended)) &&
            (identical(other.laborShowWarehouse, laborShowWarehouse) || const DeepCollectionEquality().equals(other.laborShowWarehouse, laborShowWarehouse)) &&
            (identical(other.laborShowTaxable, laborShowTaxable) || const DeepCollectionEquality().equals(other.laborShowTaxable, laborShowTaxable)) &&
            (identical(other.laborShowNotes, laborShowNotes) || const DeepCollectionEquality().equals(other.laborShowNotes, laborShowNotes)) &&
            (identical(other.laborDateStamp, laborDateStamp) || const DeepCollectionEquality().equals(other.laborDateStamp, laborDateStamp)) &&
            (identical(other.hideCrewBreaks, hideCrewBreaks) || const DeepCollectionEquality().equals(other.hideCrewBreaks, hideCrewBreaks)) &&
            (identical(other.break1Paid, break1Paid) || const DeepCollectionEquality().equals(other.break1Paid, break1Paid)) &&
            (identical(other.break2Paid, break2Paid) || const DeepCollectionEquality().equals(other.break2Paid, break2Paid)) &&
            (identical(other.break3Paid, break3Paid) || const DeepCollectionEquality().equals(other.break3Paid, break3Paid)) &&
            (identical(other.miscShowICode, miscShowICode) || const DeepCollectionEquality().equals(other.miscShowICode, miscShowICode)) &&
            (identical(other.miscICodeWidth, miscICodeWidth) || const DeepCollectionEquality().equals(other.miscICodeWidth, miscICodeWidth)) &&
            (identical(other.miscShowDescription, miscShowDescription) || const DeepCollectionEquality().equals(other.miscShowDescription, miscShowDescription)) &&
            (identical(other.miscDescriptionWidth, miscDescriptionWidth) || const DeepCollectionEquality().equals(other.miscDescriptionWidth, miscDescriptionWidth)) &&
            (identical(other.miscShowFromDate, miscShowFromDate) || const DeepCollectionEquality().equals(other.miscShowFromDate, miscShowFromDate)) &&
            (identical(other.miscShowToDate, miscShowToDate) || const DeepCollectionEquality().equals(other.miscShowToDate, miscShowToDate)) &&
            (identical(other.miscShowBillablePeriods, miscShowBillablePeriods) || const DeepCollectionEquality().equals(other.miscShowBillablePeriods, miscShowBillablePeriods)) &&
            (identical(other.miscShowRate, miscShowRate) || const DeepCollectionEquality().equals(other.miscShowRate, miscShowRate)) &&
            (identical(other.miscShowDiscountPercent, miscShowDiscountPercent) || const DeepCollectionEquality().equals(other.miscShowDiscountPercent, miscShowDiscountPercent)) &&
            (identical(other.miscShowUnit, miscShowUnit) || const DeepCollectionEquality().equals(other.miscShowUnit, miscShowUnit)) &&
            (identical(other.miscShowUnitDiscountAmount, miscShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowUnitDiscountAmount, miscShowUnitDiscountAmount)) &&
            (identical(other.miscShowUnitExtended, miscShowUnitExtended) || const DeepCollectionEquality().equals(other.miscShowUnitExtended, miscShowUnitExtended)) &&
            (identical(other.miscShowWeeklyDiscountAmount, miscShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowWeeklyDiscountAmount, miscShowWeeklyDiscountAmount)) &&
            (identical(other.miscShowWeeklyExtended, miscShowWeeklyExtended) || const DeepCollectionEquality().equals(other.miscShowWeeklyExtended, miscShowWeeklyExtended)) &&
            (identical(other.miscShowMonthlyDiscountAmount, miscShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowMonthlyDiscountAmount, miscShowMonthlyDiscountAmount)) &&
            (identical(other.miscShowMonthlyExtended, miscShowMonthlyExtended) || const DeepCollectionEquality().equals(other.miscShowMonthlyExtended, miscShowMonthlyExtended)) &&
            (identical(other.miscShowPeriodDiscountAmount, miscShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.miscShowPeriodDiscountAmount, miscShowPeriodDiscountAmount)) &&
            (identical(other.miscShowPeriodExtended, miscShowPeriodExtended) || const DeepCollectionEquality().equals(other.miscShowPeriodExtended, miscShowPeriodExtended)) &&
            (identical(other.miscShowWarehouse, miscShowWarehouse) || const DeepCollectionEquality().equals(other.miscShowWarehouse, miscShowWarehouse)) &&
            (identical(other.miscShowTaxable, miscShowTaxable) || const DeepCollectionEquality().equals(other.miscShowTaxable, miscShowTaxable)) &&
            (identical(other.miscShowNotes, miscShowNotes) || const DeepCollectionEquality().equals(other.miscShowNotes, miscShowNotes)) &&
            (identical(other.miscShowWeeksAndDays, miscShowWeeksAndDays) || const DeepCollectionEquality().equals(other.miscShowWeeksAndDays, miscShowWeeksAndDays)) &&
            (identical(other.miscShowMonthsAndDays, miscShowMonthsAndDays) || const DeepCollectionEquality().equals(other.miscShowMonthsAndDays, miscShowMonthsAndDays)) &&
            (identical(other.miscDateStamp, miscDateStamp) || const DeepCollectionEquality().equals(other.miscDateStamp, miscDateStamp)) &&
            (identical(other.subLaborShowOrderNumber, subLaborShowOrderNumber) || const DeepCollectionEquality().equals(other.subLaborShowOrderNumber, subLaborShowOrderNumber)) &&
            (identical(other.subLaborShowICode, subLaborShowICode) || const DeepCollectionEquality().equals(other.subLaborShowICode, subLaborShowICode)) &&
            (identical(other.subLaborICodeWidth, subLaborICodeWidth) || const DeepCollectionEquality().equals(other.subLaborICodeWidth, subLaborICodeWidth)) &&
            (identical(other.subLaborShowDescription, subLaborShowDescription) || const DeepCollectionEquality().equals(other.subLaborShowDescription, subLaborShowDescription)) &&
            (identical(other.subLaborDescriptionWidth, subLaborDescriptionWidth) || const DeepCollectionEquality().equals(other.subLaborDescriptionWidth, subLaborDescriptionWidth)) &&
            (identical(other.subLaborShowFromDate, subLaborShowFromDate) || const DeepCollectionEquality().equals(other.subLaborShowFromDate, subLaborShowFromDate)) &&
            (identical(other.subLaborShowFromTime, subLaborShowFromTime) || const DeepCollectionEquality().equals(other.subLaborShowFromTime, subLaborShowFromTime)) &&
            (identical(other.subLaborShowToDate, subLaborShowToDate) || const DeepCollectionEquality().equals(other.subLaborShowToDate, subLaborShowToDate)) &&
            (identical(other.subLaborShowToTime, subLaborShowToTime) || const DeepCollectionEquality().equals(other.subLaborShowToTime, subLaborShowToTime)) &&
            (identical(other.subLaborShowHours, subLaborShowHours) || const DeepCollectionEquality().equals(other.subLaborShowHours, subLaborShowHours)) &&
            (identical(other.subLaborShowBillablePeriods, subLaborShowBillablePeriods) || const DeepCollectionEquality().equals(other.subLaborShowBillablePeriods, subLaborShowBillablePeriods)) &&
            (identical(other.subLaborShowRate, subLaborShowRate) || const DeepCollectionEquality().equals(other.subLaborShowRate, subLaborShowRate)) &&
            (identical(other.subLaborShowDiscountPercent, subLaborShowDiscountPercent) || const DeepCollectionEquality().equals(other.subLaborShowDiscountPercent, subLaborShowDiscountPercent)) &&
            (identical(other.subLaborShowUnit, subLaborShowUnit) || const DeepCollectionEquality().equals(other.subLaborShowUnit, subLaborShowUnit)) &&
            (identical(other.subLaborShowUnitDiscountAmount, subLaborShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.subLaborShowUnitDiscountAmount, subLaborShowUnitDiscountAmount)) &&
            (identical(other.subLaborShowUnitExtended, subLaborShowUnitExtended) || const DeepCollectionEquality().equals(other.subLaborShowUnitExtended, subLaborShowUnitExtended)) &&
            (identical(other.subLaborShowWeeklyDiscountAmount, subLaborShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.subLaborShowWeeklyDiscountAmount, subLaborShowWeeklyDiscountAmount)) &&
            (identical(other.subLaborShowWeeklyExtended, subLaborShowWeeklyExtended) || const DeepCollectionEquality().equals(other.subLaborShowWeeklyExtended, subLaborShowWeeklyExtended)) &&
            (identical(other.subLaborShowMonthlyDiscountAmount, subLaborShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.subLaborShowMonthlyDiscountAmount, subLaborShowMonthlyDiscountAmount)) &&
            (identical(other.subLaborShowMonthlyExtended, subLaborShowMonthlyExtended) || const DeepCollectionEquality().equals(other.subLaborShowMonthlyExtended, subLaborShowMonthlyExtended)) &&
            (identical(other.subLaborShowPeriodDiscountAmount, subLaborShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.subLaborShowPeriodDiscountAmount, subLaborShowPeriodDiscountAmount)) &&
            (identical(other.subLaborShowPeriodExtended, subLaborShowPeriodExtended) || const DeepCollectionEquality().equals(other.subLaborShowPeriodExtended, subLaborShowPeriodExtended)) &&
            (identical(other.subLaborShowWarehouse, subLaborShowWarehouse) || const DeepCollectionEquality().equals(other.subLaborShowWarehouse, subLaborShowWarehouse)) &&
            (identical(other.subLaborShowTaxable, subLaborShowTaxable) || const DeepCollectionEquality().equals(other.subLaborShowTaxable, subLaborShowTaxable)) &&
            (identical(other.subLaborShowNotes, subLaborShowNotes) || const DeepCollectionEquality().equals(other.subLaborShowNotes, subLaborShowNotes)) &&
            (identical(other.subLaborDateStamp, subLaborDateStamp) || const DeepCollectionEquality().equals(other.subLaborDateStamp, subLaborDateStamp)) &&
            (identical(other.subMiscShowOrderNumber, subMiscShowOrderNumber) || const DeepCollectionEquality().equals(other.subMiscShowOrderNumber, subMiscShowOrderNumber)) &&
            (identical(other.subMiscShowICode, subMiscShowICode) || const DeepCollectionEquality().equals(other.subMiscShowICode, subMiscShowICode)) &&
            (identical(other.subMiscICodeWidth, subMiscICodeWidth) || const DeepCollectionEquality().equals(other.subMiscICodeWidth, subMiscICodeWidth)) &&
            (identical(other.subMiscShowDescription, subMiscShowDescription) || const DeepCollectionEquality().equals(other.subMiscShowDescription, subMiscShowDescription)) &&
            (identical(other.subMiscDescriptionWidth, subMiscDescriptionWidth) || const DeepCollectionEquality().equals(other.subMiscDescriptionWidth, subMiscDescriptionWidth)) &&
            (identical(other.subMiscShowFromDate, subMiscShowFromDate) || const DeepCollectionEquality().equals(other.subMiscShowFromDate, subMiscShowFromDate)) &&
            (identical(other.subMiscShowToDate, subMiscShowToDate) || const DeepCollectionEquality().equals(other.subMiscShowToDate, subMiscShowToDate)) &&
            (identical(other.subMiscShowBillablePeriods, subMiscShowBillablePeriods) || const DeepCollectionEquality().equals(other.subMiscShowBillablePeriods, subMiscShowBillablePeriods)) &&
            (identical(other.subMiscShowRate, subMiscShowRate) || const DeepCollectionEquality().equals(other.subMiscShowRate, subMiscShowRate)) &&
            (identical(other.subMiscShowDiscountPercent, subMiscShowDiscountPercent) || const DeepCollectionEquality().equals(other.subMiscShowDiscountPercent, subMiscShowDiscountPercent)) &&
            (identical(other.subMiscShowUnit, subMiscShowUnit) || const DeepCollectionEquality().equals(other.subMiscShowUnit, subMiscShowUnit)) &&
            (identical(other.subMiscShowUnitDiscountAmount, subMiscShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.subMiscShowUnitDiscountAmount, subMiscShowUnitDiscountAmount)) &&
            (identical(other.subMiscShowUnitExtended, subMiscShowUnitExtended) || const DeepCollectionEquality().equals(other.subMiscShowUnitExtended, subMiscShowUnitExtended)) &&
            (identical(other.subMiscShowWeeklyDiscountAmount, subMiscShowWeeklyDiscountAmount) || const DeepCollectionEquality().equals(other.subMiscShowWeeklyDiscountAmount, subMiscShowWeeklyDiscountAmount)) &&
            (identical(other.subMiscShowWeeklyExtended, subMiscShowWeeklyExtended) || const DeepCollectionEquality().equals(other.subMiscShowWeeklyExtended, subMiscShowWeeklyExtended)) &&
            (identical(other.subMiscShowMonthlyDiscountAmount, subMiscShowMonthlyDiscountAmount) || const DeepCollectionEquality().equals(other.subMiscShowMonthlyDiscountAmount, subMiscShowMonthlyDiscountAmount)) &&
            (identical(other.subMiscShowMonthlyExtended, subMiscShowMonthlyExtended) || const DeepCollectionEquality().equals(other.subMiscShowMonthlyExtended, subMiscShowMonthlyExtended)) &&
            (identical(other.subMiscShowPeriodDiscountAmount, subMiscShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.subMiscShowPeriodDiscountAmount, subMiscShowPeriodDiscountAmount)) &&
            (identical(other.subMiscShowPeriodExtended, subMiscShowPeriodExtended) || const DeepCollectionEquality().equals(other.subMiscShowPeriodExtended, subMiscShowPeriodExtended)) &&
            (identical(other.subMiscShowWarehouse, subMiscShowWarehouse) || const DeepCollectionEquality().equals(other.subMiscShowWarehouse, subMiscShowWarehouse)) &&
            (identical(other.subMiscShowTaxable, subMiscShowTaxable) || const DeepCollectionEquality().equals(other.subMiscShowTaxable, subMiscShowTaxable)) &&
            (identical(other.subMiscShowNotes, subMiscShowNotes) || const DeepCollectionEquality().equals(other.subMiscShowNotes, subMiscShowNotes)) &&
            (identical(other.subMiscDateStamp, subMiscDateStamp) || const DeepCollectionEquality().equals(other.subMiscDateStamp, subMiscDateStamp)) &&
            (identical(other.repairShowRepairOrderNumber, repairShowRepairOrderNumber) || const DeepCollectionEquality().equals(other.repairShowRepairOrderNumber, repairShowRepairOrderNumber)) &&
            (identical(other.repairShowICode, repairShowICode) || const DeepCollectionEquality().equals(other.repairShowICode, repairShowICode)) &&
            (identical(other.repairICodeWidth, repairICodeWidth) || const DeepCollectionEquality().equals(other.repairICodeWidth, repairICodeWidth)) &&
            (identical(other.repairShowDescription, repairShowDescription) || const DeepCollectionEquality().equals(other.repairShowDescription, repairShowDescription)) &&
            (identical(other.repairDescriptionWidth, repairDescriptionWidth) || const DeepCollectionEquality().equals(other.repairDescriptionWidth, repairDescriptionWidth)) &&
            (identical(other.repairShowPickDate, repairShowPickDate) || const DeepCollectionEquality().equals(other.repairShowPickDate, repairShowPickDate)) &&
            (identical(other.repairShowRate, repairShowRate) || const DeepCollectionEquality().equals(other.repairShowRate, repairShowRate)) &&
            (identical(other.repairShowUnit, repairShowUnit) || const DeepCollectionEquality().equals(other.repairShowUnit, repairShowUnit)) &&
            (identical(other.repairShowUnitDiscountAmount, repairShowUnitDiscountAmount) || const DeepCollectionEquality().equals(other.repairShowUnitDiscountAmount, repairShowUnitDiscountAmount)) &&
            (identical(other.repairShowUnitExtended, repairShowUnitExtended) || const DeepCollectionEquality().equals(other.repairShowUnitExtended, repairShowUnitExtended)) &&
            (identical(other.repairShowPeriodDiscountAmount, repairShowPeriodDiscountAmount) || const DeepCollectionEquality().equals(other.repairShowPeriodDiscountAmount, repairShowPeriodDiscountAmount)) &&
            (identical(other.repairShowPeriodExtended, repairShowPeriodExtended) || const DeepCollectionEquality().equals(other.repairShowPeriodExtended, repairShowPeriodExtended)) &&
            (identical(other.repairShowWarehouse, repairShowWarehouse) || const DeepCollectionEquality().equals(other.repairShowWarehouse, repairShowWarehouse)) &&
            (identical(other.repairShowTaxable, repairShowTaxable) || const DeepCollectionEquality().equals(other.repairShowTaxable, repairShowTaxable)) &&
            (identical(other.repairShowNotes, repairShowNotes) || const DeepCollectionEquality().equals(other.repairShowNotes, repairShowNotes)) &&
            (identical(other.repairDateStamp, repairDateStamp) || const DeepCollectionEquality().equals(other.repairDateStamp, repairDateStamp)) &&
            (identical(other.rwNetDefaultRental, rwNetDefaultRental) || const DeepCollectionEquality().equals(other.rwNetDefaultRental, rwNetDefaultRental)) &&
            (identical(other.rwNetDefaultMisc, rwNetDefaultMisc) || const DeepCollectionEquality().equals(other.rwNetDefaultMisc, rwNetDefaultMisc)) &&
            (identical(other.rwNetDefaultLabor, rwNetDefaultLabor) || const DeepCollectionEquality().equals(other.rwNetDefaultLabor, rwNetDefaultLabor)) &&
            (identical(other.orderBy, orderBy) || const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.subRentalShowFields, subRentalShowFields) || const DeepCollectionEquality().equals(other.subRentalShowFields, subRentalShowFields)) &&
            (identical(other.subSaleShowFields, subSaleShowFields) || const DeepCollectionEquality().equals(other.subSaleShowFields, subSaleShowFields)) &&
            (identical(other.subMiscShowFields, subMiscShowFields) || const DeepCollectionEquality().equals(other.subMiscShowFields, subMiscShowFields)) &&
            (identical(other.subLaborShowFields, subLaborShowFields) || const DeepCollectionEquality().equals(other.subLaborShowFields, subLaborShowFields)) &&
            (identical(other.purchaseShowFields, purchaseShowFields) || const DeepCollectionEquality().equals(other.purchaseShowFields, purchaseShowFields)) &&
            (identical(other.miscShowFields, miscShowFields) || const DeepCollectionEquality().equals(other.miscShowFields, miscShowFields)) &&
            (identical(other.laborShowFields, laborShowFields) || const DeepCollectionEquality().equals(other.laborShowFields, laborShowFields)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPoSettingsPoTypePoTypeExtension
    on WebApiModulesSettingsPoSettingsPoTypePoType {
  WebApiModulesSettingsPoSettingsPoTypePoType copyWith(
      {String? poTypeId,
      String? poType,
      bool? approvalNeededByRequired,
      bool? importanceRequired,
      bool? payTypeRequired,
      bool? projectRequired,
      bool? subRentalShowOrderNumber,
      bool? subRentalShowRepairOrderNumber,
      bool? subRentalShowICode,
      int? subRentalICodeWidth,
      bool? subRentalShowDescription,
      int? subRentalDescriptionWidth,
      bool? subRentalShowFromDate,
      bool? subRentalShowFromTime,
      bool? subRentalShowToDate,
      bool? subRentalShowToTime,
      bool? subRentalShowBillablePeriods,
      bool? subRentalShowRate,
      bool? subRentalShowDaysPerWeek,
      bool? subRentalShowDiscountPercent,
      bool? subRentalShowUnit,
      bool? subRentalShowUnitDiscountAmount,
      bool? subRentalShowUnitExtended,
      bool? subRentalShowWeeklyDiscountAmount,
      bool? subRentalShowWeeklyExtended,
      bool? subRentalShowMonthlyDiscountAmount,
      bool? subRentalShowMonthlyExtended,
      bool? subRentalShowPeriodDiscountAmount,
      bool? subRentalShowPeriodExtended,
      bool? subRentalShowWarehouse,
      bool? subRentalShowTaxable,
      bool? subRentalShowNotes,
      String? subRentalDateStamp,
      bool? subSaleShowOrderNumber,
      bool? subSaleShowICode,
      int? subSaleICodeWidth,
      bool? subSaleShowDescription,
      int? subSaleDescriptionWidth,
      bool? subSaleShowManufacturerPartNumber,
      bool? subSaleShowRate,
      bool? subSaleShowDiscountPercent,
      bool? subSaleShowUnit,
      bool? subSaleShowUnitDiscountAmount,
      bool? subSaleShowUnitExtended,
      bool? subSaleShowPeriodDiscountAmount,
      bool? subSaleShowPeriodExtended,
      bool? subSaleShowWarehouse,
      bool? subSaleShowTaxable,
      bool? subSaleShowNotes,
      String? subSaleDateStamp,
      bool? purchaseShowICode,
      int? purchaseICodeWidth,
      bool? purchaseShowDescription,
      int? purchaseDescriptionWidth,
      bool? purchaseShowRate,
      bool? purchaseShowDiscountPercent,
      bool? purchaseShowUnit,
      bool? purchaseShowUnitDiscountAmount,
      bool? purchaseShowUnitExtended,
      bool? purchaseShowPeriodDiscountAmount,
      bool? purchaseShowPeriodExtended,
      bool? purchaseShowCountryOfOrigin,
      bool? purchaseShowManufacturer,
      bool? purchaseShowManufacturerPartNumber,
      int? purchaseManufacturerPartNumberWidth,
      bool? purchaseShowModelNumber,
      bool? purchaseShowVendorPartNumber,
      bool? purchaseShowWarehouse,
      bool? purchaseShowTaxable,
      bool? purchaseShowNotes,
      String? purchaseDateStamp,
      String? rentalPurchaseDefaultRate,
      String? salesPurchaseDefaultRate,
      bool? laborShowICode,
      int? laborICodeWidth,
      bool? laborShowDescription,
      int? laborDescriptionWidth,
      bool? laborShowOrderActivity,
      bool? laborShowCrewName,
      bool? laborShowFromDate,
      bool? laborShowFromTime,
      bool? laborShowToDate,
      bool? laborShowToTime,
      bool? laborShowHours,
      bool? laborShowBillablePeriods,
      bool? laborShowRate,
      bool? laborShowDiscountPercent,
      bool? laborShowUnit,
      bool? laborShowUnitDiscountAmount,
      bool? laborShowUnitExtended,
      bool? laborShowWeeklyDiscountAmount,
      bool? laborShowWeeklyExtended,
      bool? laborShowMonthlyDiscountAmount,
      bool? laborShowMonthlyExtended,
      bool? laborShowPeriodDiscountAmount,
      bool? laborShowPeriodExtended,
      bool? laborShowWarehouse,
      bool? laborShowTaxable,
      bool? laborShowNotes,
      String? laborDateStamp,
      bool? hideCrewBreaks,
      bool? break1Paid,
      bool? break2Paid,
      bool? break3Paid,
      bool? miscShowICode,
      int? miscICodeWidth,
      bool? miscShowDescription,
      int? miscDescriptionWidth,
      bool? miscShowFromDate,
      bool? miscShowToDate,
      bool? miscShowBillablePeriods,
      bool? miscShowRate,
      bool? miscShowDiscountPercent,
      bool? miscShowUnit,
      bool? miscShowUnitDiscountAmount,
      bool? miscShowUnitExtended,
      bool? miscShowWeeklyDiscountAmount,
      bool? miscShowWeeklyExtended,
      bool? miscShowMonthlyDiscountAmount,
      bool? miscShowMonthlyExtended,
      bool? miscShowPeriodDiscountAmount,
      bool? miscShowPeriodExtended,
      bool? miscShowWarehouse,
      bool? miscShowTaxable,
      bool? miscShowNotes,
      bool? miscShowWeeksAndDays,
      bool? miscShowMonthsAndDays,
      String? miscDateStamp,
      bool? subLaborShowOrderNumber,
      bool? subLaborShowICode,
      int? subLaborICodeWidth,
      bool? subLaborShowDescription,
      int? subLaborDescriptionWidth,
      bool? subLaborShowFromDate,
      bool? subLaborShowFromTime,
      bool? subLaborShowToDate,
      bool? subLaborShowToTime,
      bool? subLaborShowHours,
      bool? subLaborShowBillablePeriods,
      bool? subLaborShowRate,
      bool? subLaborShowDiscountPercent,
      bool? subLaborShowUnit,
      bool? subLaborShowUnitDiscountAmount,
      bool? subLaborShowUnitExtended,
      bool? subLaborShowWeeklyDiscountAmount,
      bool? subLaborShowWeeklyExtended,
      bool? subLaborShowMonthlyDiscountAmount,
      bool? subLaborShowMonthlyExtended,
      bool? subLaborShowPeriodDiscountAmount,
      bool? subLaborShowPeriodExtended,
      bool? subLaborShowWarehouse,
      bool? subLaborShowTaxable,
      bool? subLaborShowNotes,
      String? subLaborDateStamp,
      bool? subMiscShowOrderNumber,
      bool? subMiscShowICode,
      int? subMiscICodeWidth,
      bool? subMiscShowDescription,
      int? subMiscDescriptionWidth,
      bool? subMiscShowFromDate,
      bool? subMiscShowToDate,
      bool? subMiscShowBillablePeriods,
      bool? subMiscShowRate,
      bool? subMiscShowDiscountPercent,
      bool? subMiscShowUnit,
      bool? subMiscShowUnitDiscountAmount,
      bool? subMiscShowUnitExtended,
      bool? subMiscShowWeeklyDiscountAmount,
      bool? subMiscShowWeeklyExtended,
      bool? subMiscShowMonthlyDiscountAmount,
      bool? subMiscShowMonthlyExtended,
      bool? subMiscShowPeriodDiscountAmount,
      bool? subMiscShowPeriodExtended,
      bool? subMiscShowWarehouse,
      bool? subMiscShowTaxable,
      bool? subMiscShowNotes,
      String? subMiscDateStamp,
      bool? repairShowRepairOrderNumber,
      bool? repairShowICode,
      int? repairICodeWidth,
      bool? repairShowDescription,
      int? repairDescriptionWidth,
      bool? repairShowPickDate,
      bool? repairShowRate,
      bool? repairShowUnit,
      bool? repairShowUnitDiscountAmount,
      bool? repairShowUnitExtended,
      bool? repairShowPeriodDiscountAmount,
      bool? repairShowPeriodExtended,
      bool? repairShowWarehouse,
      bool? repairShowTaxable,
      bool? repairShowNotes,
      String? repairDateStamp,
      bool? rwNetDefaultRental,
      bool? rwNetDefaultMisc,
      bool? rwNetDefaultLabor,
      double? orderBy,
      bool? inactive,
      String? dateStamp,
      List<String>? subRentalShowFields,
      List<String>? subSaleShowFields,
      List<String>? subMiscShowFields,
      List<String>? subLaborShowFields,
      List<String>? purchaseShowFields,
      List<String>? miscShowFields,
      List<String>? laborShowFields,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPoSettingsPoTypePoType(
        poTypeId: poTypeId ?? this.poTypeId,
        poType: poType ?? this.poType,
        approvalNeededByRequired:
            approvalNeededByRequired ?? this.approvalNeededByRequired,
        importanceRequired: importanceRequired ?? this.importanceRequired,
        payTypeRequired: payTypeRequired ?? this.payTypeRequired,
        projectRequired: projectRequired ?? this.projectRequired,
        subRentalShowOrderNumber:
            subRentalShowOrderNumber ?? this.subRentalShowOrderNumber,
        subRentalShowRepairOrderNumber: subRentalShowRepairOrderNumber ??
            this.subRentalShowRepairOrderNumber,
        subRentalShowICode: subRentalShowICode ?? this.subRentalShowICode,
        subRentalICodeWidth: subRentalICodeWidth ?? this.subRentalICodeWidth,
        subRentalShowDescription:
            subRentalShowDescription ?? this.subRentalShowDescription,
        subRentalDescriptionWidth:
            subRentalDescriptionWidth ?? this.subRentalDescriptionWidth,
        subRentalShowFromDate:
            subRentalShowFromDate ?? this.subRentalShowFromDate,
        subRentalShowFromTime:
            subRentalShowFromTime ?? this.subRentalShowFromTime,
        subRentalShowToDate: subRentalShowToDate ?? this.subRentalShowToDate,
        subRentalShowToTime: subRentalShowToTime ?? this.subRentalShowToTime,
        subRentalShowBillablePeriods:
            subRentalShowBillablePeriods ?? this.subRentalShowBillablePeriods,
        subRentalShowRate: subRentalShowRate ?? this.subRentalShowRate,
        subRentalShowDaysPerWeek:
            subRentalShowDaysPerWeek ?? this.subRentalShowDaysPerWeek,
        subRentalShowDiscountPercent:
            subRentalShowDiscountPercent ?? this.subRentalShowDiscountPercent,
        subRentalShowUnit: subRentalShowUnit ?? this.subRentalShowUnit,
        subRentalShowUnitDiscountAmount: subRentalShowUnitDiscountAmount ??
            this.subRentalShowUnitDiscountAmount,
        subRentalShowUnitExtended:
            subRentalShowUnitExtended ?? this.subRentalShowUnitExtended,
        subRentalShowWeeklyDiscountAmount: subRentalShowWeeklyDiscountAmount ??
            this.subRentalShowWeeklyDiscountAmount,
        subRentalShowWeeklyExtended:
            subRentalShowWeeklyExtended ?? this.subRentalShowWeeklyExtended,
        subRentalShowMonthlyDiscountAmount: subRentalShowMonthlyDiscountAmount ??
            this.subRentalShowMonthlyDiscountAmount,
        subRentalShowMonthlyExtended:
            subRentalShowMonthlyExtended ?? this.subRentalShowMonthlyExtended,
        subRentalShowPeriodDiscountAmount: subRentalShowPeriodDiscountAmount ??
            this.subRentalShowPeriodDiscountAmount,
        subRentalShowPeriodExtended:
            subRentalShowPeriodExtended ?? this.subRentalShowPeriodExtended,
        subRentalShowWarehouse:
            subRentalShowWarehouse ?? this.subRentalShowWarehouse,
        subRentalShowTaxable: subRentalShowTaxable ?? this.subRentalShowTaxable,
        subRentalShowNotes: subRentalShowNotes ?? this.subRentalShowNotes,
        subRentalDateStamp: subRentalDateStamp ?? this.subRentalDateStamp,
        subSaleShowOrderNumber:
            subSaleShowOrderNumber ?? this.subSaleShowOrderNumber,
        subSaleShowICode: subSaleShowICode ?? this.subSaleShowICode,
        subSaleICodeWidth: subSaleICodeWidth ?? this.subSaleICodeWidth,
        subSaleShowDescription:
            subSaleShowDescription ?? this.subSaleShowDescription,
        subSaleDescriptionWidth:
            subSaleDescriptionWidth ?? this.subSaleDescriptionWidth,
        subSaleShowManufacturerPartNumber: subSaleShowManufacturerPartNumber ??
            this.subSaleShowManufacturerPartNumber,
        subSaleShowRate: subSaleShowRate ?? this.subSaleShowRate,
        subSaleShowDiscountPercent:
            subSaleShowDiscountPercent ?? this.subSaleShowDiscountPercent,
        subSaleShowUnit: subSaleShowUnit ?? this.subSaleShowUnit,
        subSaleShowUnitDiscountAmount:
            subSaleShowUnitDiscountAmount ?? this.subSaleShowUnitDiscountAmount,
        subSaleShowUnitExtended:
            subSaleShowUnitExtended ?? this.subSaleShowUnitExtended,
        subSaleShowPeriodDiscountAmount: subSaleShowPeriodDiscountAmount ??
            this.subSaleShowPeriodDiscountAmount,
        subSaleShowPeriodExtended:
            subSaleShowPeriodExtended ?? this.subSaleShowPeriodExtended,
        subSaleShowWarehouse: subSaleShowWarehouse ?? this.subSaleShowWarehouse,
        subSaleShowTaxable: subSaleShowTaxable ?? this.subSaleShowTaxable,
        subSaleShowNotes: subSaleShowNotes ?? this.subSaleShowNotes,
        subSaleDateStamp: subSaleDateStamp ?? this.subSaleDateStamp,
        purchaseShowICode: purchaseShowICode ?? this.purchaseShowICode,
        purchaseICodeWidth: purchaseICodeWidth ?? this.purchaseICodeWidth,
        purchaseShowDescription:
            purchaseShowDescription ?? this.purchaseShowDescription,
        purchaseDescriptionWidth:
            purchaseDescriptionWidth ?? this.purchaseDescriptionWidth,
        purchaseShowRate: purchaseShowRate ?? this.purchaseShowRate,
        purchaseShowDiscountPercent:
            purchaseShowDiscountPercent ?? this.purchaseShowDiscountPercent,
        purchaseShowUnit: purchaseShowUnit ?? this.purchaseShowUnit,
        purchaseShowUnitDiscountAmount: purchaseShowUnitDiscountAmount ??
            this.purchaseShowUnitDiscountAmount,
        purchaseShowUnitExtended:
            purchaseShowUnitExtended ?? this.purchaseShowUnitExtended,
        purchaseShowPeriodDiscountAmount: purchaseShowPeriodDiscountAmount ??
            this.purchaseShowPeriodDiscountAmount,
        purchaseShowPeriodExtended:
            purchaseShowPeriodExtended ?? this.purchaseShowPeriodExtended,
        purchaseShowCountryOfOrigin:
            purchaseShowCountryOfOrigin ?? this.purchaseShowCountryOfOrigin,
        purchaseShowManufacturer:
            purchaseShowManufacturer ?? this.purchaseShowManufacturer,
        purchaseShowManufacturerPartNumber: purchaseShowManufacturerPartNumber ??
            this.purchaseShowManufacturerPartNumber,
        purchaseManufacturerPartNumberWidth:
            purchaseManufacturerPartNumberWidth ??
                this.purchaseManufacturerPartNumberWidth,
        purchaseShowModelNumber:
            purchaseShowModelNumber ?? this.purchaseShowModelNumber,
        purchaseShowVendorPartNumber:
            purchaseShowVendorPartNumber ?? this.purchaseShowVendorPartNumber,
        purchaseShowWarehouse:
            purchaseShowWarehouse ?? this.purchaseShowWarehouse,
        purchaseShowTaxable: purchaseShowTaxable ?? this.purchaseShowTaxable,
        purchaseShowNotes: purchaseShowNotes ?? this.purchaseShowNotes,
        purchaseDateStamp: purchaseDateStamp ?? this.purchaseDateStamp,
        rentalPurchaseDefaultRate:
            rentalPurchaseDefaultRate ?? this.rentalPurchaseDefaultRate,
        salesPurchaseDefaultRate:
            salesPurchaseDefaultRate ?? this.salesPurchaseDefaultRate,
        laborShowICode: laborShowICode ?? this.laborShowICode,
        laborICodeWidth: laborICodeWidth ?? this.laborICodeWidth,
        laborShowDescription: laborShowDescription ?? this.laborShowDescription,
        laborDescriptionWidth:
            laborDescriptionWidth ?? this.laborDescriptionWidth,
        laborShowOrderActivity:
            laborShowOrderActivity ?? this.laborShowOrderActivity,
        laborShowCrewName: laborShowCrewName ?? this.laborShowCrewName,
        laborShowFromDate: laborShowFromDate ?? this.laborShowFromDate,
        laborShowFromTime: laborShowFromTime ?? this.laborShowFromTime,
        laborShowToDate: laborShowToDate ?? this.laborShowToDate,
        laborShowToTime: laborShowToTime ?? this.laborShowToTime,
        laborShowHours: laborShowHours ?? this.laborShowHours,
        laborShowBillablePeriods:
            laborShowBillablePeriods ?? this.laborShowBillablePeriods,
        laborShowRate: laborShowRate ?? this.laborShowRate,
        laborShowDiscountPercent:
            laborShowDiscountPercent ?? this.laborShowDiscountPercent,
        laborShowUnit: laborShowUnit ?? this.laborShowUnit,
        laborShowUnitDiscountAmount:
            laborShowUnitDiscountAmount ?? this.laborShowUnitDiscountAmount,
        laborShowUnitExtended:
            laborShowUnitExtended ?? this.laborShowUnitExtended,
        laborShowWeeklyDiscountAmount:
            laborShowWeeklyDiscountAmount ?? this.laborShowWeeklyDiscountAmount,
        laborShowWeeklyExtended:
            laborShowWeeklyExtended ?? this.laborShowWeeklyExtended,
        laborShowMonthlyDiscountAmount:
            laborShowMonthlyDiscountAmount ?? this.laborShowMonthlyDiscountAmount,
        laborShowMonthlyExtended: laborShowMonthlyExtended ?? this.laborShowMonthlyExtended,
        laborShowPeriodDiscountAmount: laborShowPeriodDiscountAmount ?? this.laborShowPeriodDiscountAmount,
        laborShowPeriodExtended: laborShowPeriodExtended ?? this.laborShowPeriodExtended,
        laborShowWarehouse: laborShowWarehouse ?? this.laborShowWarehouse,
        laborShowTaxable: laborShowTaxable ?? this.laborShowTaxable,
        laborShowNotes: laborShowNotes ?? this.laborShowNotes,
        laborDateStamp: laborDateStamp ?? this.laborDateStamp,
        hideCrewBreaks: hideCrewBreaks ?? this.hideCrewBreaks,
        break1Paid: break1Paid ?? this.break1Paid,
        break2Paid: break2Paid ?? this.break2Paid,
        break3Paid: break3Paid ?? this.break3Paid,
        miscShowICode: miscShowICode ?? this.miscShowICode,
        miscICodeWidth: miscICodeWidth ?? this.miscICodeWidth,
        miscShowDescription: miscShowDescription ?? this.miscShowDescription,
        miscDescriptionWidth: miscDescriptionWidth ?? this.miscDescriptionWidth,
        miscShowFromDate: miscShowFromDate ?? this.miscShowFromDate,
        miscShowToDate: miscShowToDate ?? this.miscShowToDate,
        miscShowBillablePeriods: miscShowBillablePeriods ?? this.miscShowBillablePeriods,
        miscShowRate: miscShowRate ?? this.miscShowRate,
        miscShowDiscountPercent: miscShowDiscountPercent ?? this.miscShowDiscountPercent,
        miscShowUnit: miscShowUnit ?? this.miscShowUnit,
        miscShowUnitDiscountAmount: miscShowUnitDiscountAmount ?? this.miscShowUnitDiscountAmount,
        miscShowUnitExtended: miscShowUnitExtended ?? this.miscShowUnitExtended,
        miscShowWeeklyDiscountAmount: miscShowWeeklyDiscountAmount ?? this.miscShowWeeklyDiscountAmount,
        miscShowWeeklyExtended: miscShowWeeklyExtended ?? this.miscShowWeeklyExtended,
        miscShowMonthlyDiscountAmount: miscShowMonthlyDiscountAmount ?? this.miscShowMonthlyDiscountAmount,
        miscShowMonthlyExtended: miscShowMonthlyExtended ?? this.miscShowMonthlyExtended,
        miscShowPeriodDiscountAmount: miscShowPeriodDiscountAmount ?? this.miscShowPeriodDiscountAmount,
        miscShowPeriodExtended: miscShowPeriodExtended ?? this.miscShowPeriodExtended,
        miscShowWarehouse: miscShowWarehouse ?? this.miscShowWarehouse,
        miscShowTaxable: miscShowTaxable ?? this.miscShowTaxable,
        miscShowNotes: miscShowNotes ?? this.miscShowNotes,
        miscShowWeeksAndDays: miscShowWeeksAndDays ?? this.miscShowWeeksAndDays,
        miscShowMonthsAndDays: miscShowMonthsAndDays ?? this.miscShowMonthsAndDays,
        miscDateStamp: miscDateStamp ?? this.miscDateStamp,
        subLaborShowOrderNumber: subLaborShowOrderNumber ?? this.subLaborShowOrderNumber,
        subLaborShowICode: subLaborShowICode ?? this.subLaborShowICode,
        subLaborICodeWidth: subLaborICodeWidth ?? this.subLaborICodeWidth,
        subLaborShowDescription: subLaborShowDescription ?? this.subLaborShowDescription,
        subLaborDescriptionWidth: subLaborDescriptionWidth ?? this.subLaborDescriptionWidth,
        subLaborShowFromDate: subLaborShowFromDate ?? this.subLaborShowFromDate,
        subLaborShowFromTime: subLaborShowFromTime ?? this.subLaborShowFromTime,
        subLaborShowToDate: subLaborShowToDate ?? this.subLaborShowToDate,
        subLaborShowToTime: subLaborShowToTime ?? this.subLaborShowToTime,
        subLaborShowHours: subLaborShowHours ?? this.subLaborShowHours,
        subLaborShowBillablePeriods: subLaborShowBillablePeriods ?? this.subLaborShowBillablePeriods,
        subLaborShowRate: subLaborShowRate ?? this.subLaborShowRate,
        subLaborShowDiscountPercent: subLaborShowDiscountPercent ?? this.subLaborShowDiscountPercent,
        subLaborShowUnit: subLaborShowUnit ?? this.subLaborShowUnit,
        subLaborShowUnitDiscountAmount: subLaborShowUnitDiscountAmount ?? this.subLaborShowUnitDiscountAmount,
        subLaborShowUnitExtended: subLaborShowUnitExtended ?? this.subLaborShowUnitExtended,
        subLaborShowWeeklyDiscountAmount: subLaborShowWeeklyDiscountAmount ?? this.subLaborShowWeeklyDiscountAmount,
        subLaborShowWeeklyExtended: subLaborShowWeeklyExtended ?? this.subLaborShowWeeklyExtended,
        subLaborShowMonthlyDiscountAmount: subLaborShowMonthlyDiscountAmount ?? this.subLaborShowMonthlyDiscountAmount,
        subLaborShowMonthlyExtended: subLaborShowMonthlyExtended ?? this.subLaborShowMonthlyExtended,
        subLaborShowPeriodDiscountAmount: subLaborShowPeriodDiscountAmount ?? this.subLaborShowPeriodDiscountAmount,
        subLaborShowPeriodExtended: subLaborShowPeriodExtended ?? this.subLaborShowPeriodExtended,
        subLaborShowWarehouse: subLaborShowWarehouse ?? this.subLaborShowWarehouse,
        subLaborShowTaxable: subLaborShowTaxable ?? this.subLaborShowTaxable,
        subLaborShowNotes: subLaborShowNotes ?? this.subLaborShowNotes,
        subLaborDateStamp: subLaborDateStamp ?? this.subLaborDateStamp,
        subMiscShowOrderNumber: subMiscShowOrderNumber ?? this.subMiscShowOrderNumber,
        subMiscShowICode: subMiscShowICode ?? this.subMiscShowICode,
        subMiscICodeWidth: subMiscICodeWidth ?? this.subMiscICodeWidth,
        subMiscShowDescription: subMiscShowDescription ?? this.subMiscShowDescription,
        subMiscDescriptionWidth: subMiscDescriptionWidth ?? this.subMiscDescriptionWidth,
        subMiscShowFromDate: subMiscShowFromDate ?? this.subMiscShowFromDate,
        subMiscShowToDate: subMiscShowToDate ?? this.subMiscShowToDate,
        subMiscShowBillablePeriods: subMiscShowBillablePeriods ?? this.subMiscShowBillablePeriods,
        subMiscShowRate: subMiscShowRate ?? this.subMiscShowRate,
        subMiscShowDiscountPercent: subMiscShowDiscountPercent ?? this.subMiscShowDiscountPercent,
        subMiscShowUnit: subMiscShowUnit ?? this.subMiscShowUnit,
        subMiscShowUnitDiscountAmount: subMiscShowUnitDiscountAmount ?? this.subMiscShowUnitDiscountAmount,
        subMiscShowUnitExtended: subMiscShowUnitExtended ?? this.subMiscShowUnitExtended,
        subMiscShowWeeklyDiscountAmount: subMiscShowWeeklyDiscountAmount ?? this.subMiscShowWeeklyDiscountAmount,
        subMiscShowWeeklyExtended: subMiscShowWeeklyExtended ?? this.subMiscShowWeeklyExtended,
        subMiscShowMonthlyDiscountAmount: subMiscShowMonthlyDiscountAmount ?? this.subMiscShowMonthlyDiscountAmount,
        subMiscShowMonthlyExtended: subMiscShowMonthlyExtended ?? this.subMiscShowMonthlyExtended,
        subMiscShowPeriodDiscountAmount: subMiscShowPeriodDiscountAmount ?? this.subMiscShowPeriodDiscountAmount,
        subMiscShowPeriodExtended: subMiscShowPeriodExtended ?? this.subMiscShowPeriodExtended,
        subMiscShowWarehouse: subMiscShowWarehouse ?? this.subMiscShowWarehouse,
        subMiscShowTaxable: subMiscShowTaxable ?? this.subMiscShowTaxable,
        subMiscShowNotes: subMiscShowNotes ?? this.subMiscShowNotes,
        subMiscDateStamp: subMiscDateStamp ?? this.subMiscDateStamp,
        repairShowRepairOrderNumber: repairShowRepairOrderNumber ?? this.repairShowRepairOrderNumber,
        repairShowICode: repairShowICode ?? this.repairShowICode,
        repairICodeWidth: repairICodeWidth ?? this.repairICodeWidth,
        repairShowDescription: repairShowDescription ?? this.repairShowDescription,
        repairDescriptionWidth: repairDescriptionWidth ?? this.repairDescriptionWidth,
        repairShowPickDate: repairShowPickDate ?? this.repairShowPickDate,
        repairShowRate: repairShowRate ?? this.repairShowRate,
        repairShowUnit: repairShowUnit ?? this.repairShowUnit,
        repairShowUnitDiscountAmount: repairShowUnitDiscountAmount ?? this.repairShowUnitDiscountAmount,
        repairShowUnitExtended: repairShowUnitExtended ?? this.repairShowUnitExtended,
        repairShowPeriodDiscountAmount: repairShowPeriodDiscountAmount ?? this.repairShowPeriodDiscountAmount,
        repairShowPeriodExtended: repairShowPeriodExtended ?? this.repairShowPeriodExtended,
        repairShowWarehouse: repairShowWarehouse ?? this.repairShowWarehouse,
        repairShowTaxable: repairShowTaxable ?? this.repairShowTaxable,
        repairShowNotes: repairShowNotes ?? this.repairShowNotes,
        repairDateStamp: repairDateStamp ?? this.repairDateStamp,
        rwNetDefaultRental: rwNetDefaultRental ?? this.rwNetDefaultRental,
        rwNetDefaultMisc: rwNetDefaultMisc ?? this.rwNetDefaultMisc,
        rwNetDefaultLabor: rwNetDefaultLabor ?? this.rwNetDefaultLabor,
        orderBy: orderBy ?? this.orderBy,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        subRentalShowFields: subRentalShowFields ?? this.subRentalShowFields,
        subSaleShowFields: subSaleShowFields ?? this.subSaleShowFields,
        subMiscShowFields: subMiscShowFields ?? this.subMiscShowFields,
        subLaborShowFields: subLaborShowFields ?? this.subLaborShowFields,
        purchaseShowFields: purchaseShowFields ?? this.purchaseShowFields,
        miscShowFields: miscShowFields ?? this.miscShowFields,
        laborShowFields: laborShowFields ?? this.laborShowFields,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover {
  WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover({
    this.vendorInvoiceApproverId,
    this.locationId,
    this.location,
    this.departmentId,
    this.department,
    this.usersId,
    this.username,
    this.rental,
    this.sales,
    this.parts,
    this.misc,
    this.labor,
    this.vehicle,
    this.subRent,
    this.subSale,
    this.repair,
    this.subMisc,
    this.subLabor,
    this.subVehicle,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverFromJson(
          json);

  @JsonKey(name: 'VendorInvoiceApproverId', includeIfNull: false)
  final String? vendorInvoiceApproverId;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'Location', includeIfNull: false)
  final String? location;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'Department', includeIfNull: false)
  final String? department;
  @JsonKey(name: 'UsersId', includeIfNull: false)
  final String? usersId;
  @JsonKey(name: 'Username', includeIfNull: false)
  final String? username;
  @JsonKey(name: 'Rental', includeIfNull: false)
  final bool? rental;
  @JsonKey(name: 'Sales', includeIfNull: false)
  final bool? sales;
  @JsonKey(name: 'Parts', includeIfNull: false)
  final bool? parts;
  @JsonKey(name: 'Misc', includeIfNull: false)
  final bool? misc;
  @JsonKey(name: 'Labor', includeIfNull: false)
  final bool? labor;
  @JsonKey(name: 'Vehicle', includeIfNull: false)
  final bool? vehicle;
  @JsonKey(name: 'SubRent', includeIfNull: false)
  final bool? subRent;
  @JsonKey(name: 'SubSale', includeIfNull: false)
  final bool? subSale;
  @JsonKey(name: 'Repair', includeIfNull: false)
  final bool? repair;
  @JsonKey(name: 'SubMisc', includeIfNull: false)
  final bool? subMisc;
  @JsonKey(name: 'SubLabor', includeIfNull: false)
  final bool? subLabor;
  @JsonKey(name: 'SubVehicle', includeIfNull: false)
  final bool? subVehicle;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover &&
            (identical(other.vendorInvoiceApproverId, vendorInvoiceApproverId) ||
                const DeepCollectionEquality().equals(
                    other.vendorInvoiceApproverId, vendorInvoiceApproverId)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.location, location) ||
                const DeepCollectionEquality()
                    .equals(other.location, location)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.department, department) ||
                const DeepCollectionEquality()
                    .equals(other.department, department)) &&
            (identical(other.usersId, usersId) ||
                const DeepCollectionEquality()
                    .equals(other.usersId, usersId)) &&
            (identical(other.username, username) ||
                const DeepCollectionEquality()
                    .equals(other.username, username)) &&
            (identical(other.rental, rental) ||
                const DeepCollectionEquality().equals(other.rental, rental)) &&
            (identical(other.sales, sales) ||
                const DeepCollectionEquality().equals(other.sales, sales)) &&
            (identical(other.parts, parts) ||
                const DeepCollectionEquality().equals(other.parts, parts)) &&
            (identical(other.misc, misc) ||
                const DeepCollectionEquality().equals(other.misc, misc)) &&
            (identical(other.labor, labor) ||
                const DeepCollectionEquality().equals(other.labor, labor)) &&
            (identical(other.vehicle, vehicle) ||
                const DeepCollectionEquality()
                    .equals(other.vehicle, vehicle)) &&
            (identical(other.subRent, subRent) ||
                const DeepCollectionEquality()
                    .equals(other.subRent, subRent)) &&
            (identical(other.subSale, subSale) ||
                const DeepCollectionEquality()
                    .equals(other.subSale, subSale)) &&
            (identical(other.repair, repair) ||
                const DeepCollectionEquality().equals(other.repair, repair)) &&
            (identical(other.subMisc, subMisc) ||
                const DeepCollectionEquality().equals(other.subMisc, subMisc)) &&
            (identical(other.subLabor, subLabor) || const DeepCollectionEquality().equals(other.subLabor, subLabor)) &&
            (identical(other.subVehicle, subVehicle) || const DeepCollectionEquality().equals(other.subVehicle, subVehicle)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApproverExtension
    on WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover {
  WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover
      copyWith(
          {String? vendorInvoiceApproverId,
          String? locationId,
          String? location,
          String? departmentId,
          String? department,
          String? usersId,
          String? username,
          bool? rental,
          bool? sales,
          bool? parts,
          bool? misc,
          bool? labor,
          bool? vehicle,
          bool? subRent,
          bool? subSale,
          bool? repair,
          bool? subMisc,
          bool? subLabor,
          bool? subVehicle,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPoSettingsVendorInvoiceApproverVendorInvoiceApprover(
        vendorInvoiceApproverId:
            vendorInvoiceApproverId ?? this.vendorInvoiceApproverId,
        locationId: locationId ?? this.locationId,
        location: location ?? this.location,
        departmentId: departmentId ?? this.departmentId,
        department: department ?? this.department,
        usersId: usersId ?? this.usersId,
        username: username ?? this.username,
        rental: rental ?? this.rental,
        sales: sales ?? this.sales,
        parts: parts ?? this.parts,
        misc: misc ?? this.misc,
        labor: labor ?? this.labor,
        vehicle: vehicle ?? this.vehicle,
        subRent: subRent ?? this.subRent,
        subSale: subSale ?? this.subSale,
        repair: repair ?? this.repair,
        subMisc: subMisc ?? this.subMisc,
        subLabor: subLabor ?? this.subLabor,
        subVehicle: subVehicle ?? this.subVehicle,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity {
  WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity({
    this.presentationLayerActivityId,
    this.presentationLayerId,
    this.activity,
    this.activityRename,
    this.groupNo,
    this.recType,
    this.exportCode,
    this.orderBy,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityFromJson(
          json);

  @JsonKey(name: 'PresentationLayerActivityId', includeIfNull: false)
  final String? presentationLayerActivityId;
  @JsonKey(name: 'PresentationLayerId', includeIfNull: false)
  final String? presentationLayerId;
  @JsonKey(name: 'Activity', includeIfNull: false)
  final String? activity;
  @JsonKey(name: 'ActivityRename', includeIfNull: false)
  final String? activityRename;
  @JsonKey(name: 'GroupNo', includeIfNull: false)
  final String? groupNo;
  @JsonKey(name: 'RecType', includeIfNull: false)
  final String? recType;
  @JsonKey(name: 'ExportCode', includeIfNull: false)
  final String? exportCode;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity &&
            (identical(other.presentationLayerActivityId, presentationLayerActivityId) ||
                const DeepCollectionEquality().equals(
                    other.presentationLayerActivityId,
                    presentationLayerActivityId)) &&
            (identical(other.presentationLayerId, presentationLayerId) ||
                const DeepCollectionEquality()
                    .equals(other.presentationLayerId, presentationLayerId)) &&
            (identical(other.activity, activity) ||
                const DeepCollectionEquality()
                    .equals(other.activity, activity)) &&
            (identical(other.activityRename, activityRename) ||
                const DeepCollectionEquality()
                    .equals(other.activityRename, activityRename)) &&
            (identical(other.groupNo, groupNo) ||
                const DeepCollectionEquality()
                    .equals(other.groupNo, groupNo)) &&
            (identical(other.recType, recType) ||
                const DeepCollectionEquality()
                    .equals(other.recType, recType)) &&
            (identical(other.exportCode, exportCode) ||
                const DeepCollectionEquality()
                    .equals(other.exportCode, exportCode)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivityExtension
    on WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity {
  WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity
      copyWith(
          {String? presentationLayerActivityId,
          String? presentationLayerId,
          String? activity,
          String? activityRename,
          String? groupNo,
          String? recType,
          String? exportCode,
          double? orderBy,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPresentationLayerActivityPresentationLayerActivity(
        presentationLayerActivityId:
            presentationLayerActivityId ?? this.presentationLayerActivityId,
        presentationLayerId: presentationLayerId ?? this.presentationLayerId,
        activity: activity ?? this.activity,
        activityRename: activityRename ?? this.activityRename,
        groupNo: groupNo ?? this.groupNo,
        recType: recType ?? this.recType,
        exportCode: exportCode ?? this.exportCode,
        orderBy: orderBy ?? this.orderBy,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequest {
  WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequest({
    this.startAtIndex,
    this.presentationLayerActivityIds,
  });

  factory WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequestFromJson(
          json);

  @JsonKey(name: 'StartAtIndex', includeIfNull: false)
  final int? startAtIndex;
  @JsonKey(
      name: 'PresentationLayerActivityIds',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? presentationLayerActivityIds;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequest &&
            (identical(other.startAtIndex, startAtIndex) ||
                const DeepCollectionEquality()
                    .equals(other.startAtIndex, startAtIndex)) &&
            (identical(other.presentationLayerActivityIds,
                    presentationLayerActivityIds) ||
                const DeepCollectionEquality().equals(
                    other.presentationLayerActivityIds,
                    presentationLayerActivityIds)));
  }
}

extension $WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequestExtension
    on WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequest {
  WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequest copyWith(
      {int? startAtIndex, List<String>? presentationLayerActivityIds}) {
    return WebApiModulesSettingsPresentationLayerActivitySortActivitiesRequest(
        startAtIndex: startAtIndex ?? this.startAtIndex,
        presentationLayerActivityIds:
            presentationLayerActivityIds ?? this.presentationLayerActivityIds);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride {
  WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride({
    this.presentationLayerActivityOverrideId,
    this.presentationLayerId,
    this.presentationLayerActivityId,
    this.masterId,
    this.activity,
    this.iCode,
    this.description,
    this.activityRename,
    this.recType,
    this.activityColor,
    this.exportCode,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideFromJson(
          json);

  @JsonKey(name: 'PresentationLayerActivityOverrideId', includeIfNull: false)
  final String? presentationLayerActivityOverrideId;
  @JsonKey(name: 'PresentationLayerId', includeIfNull: false)
  final String? presentationLayerId;
  @JsonKey(name: 'PresentationLayerActivityId', includeIfNull: false)
  final String? presentationLayerActivityId;
  @JsonKey(name: 'MasterId', includeIfNull: false)
  final String? masterId;
  @JsonKey(name: 'Activity', includeIfNull: false)
  final String? activity;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'ActivityRename', includeIfNull: false)
  final String? activityRename;
  @JsonKey(name: 'RecType', includeIfNull: false)
  final String? recType;
  @JsonKey(name: 'ActivityColor', includeIfNull: false)
  final String? activityColor;
  @JsonKey(name: 'ExportCode', includeIfNull: false)
  final String? exportCode;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride &&
            (identical(other.presentationLayerActivityOverrideId, presentationLayerActivityOverrideId) ||
                const DeepCollectionEquality().equals(
                    other.presentationLayerActivityOverrideId,
                    presentationLayerActivityOverrideId)) &&
            (identical(other.presentationLayerId, presentationLayerId) ||
                const DeepCollectionEquality()
                    .equals(other.presentationLayerId, presentationLayerId)) &&
            (identical(other.presentationLayerActivityId, presentationLayerActivityId) ||
                const DeepCollectionEquality().equals(
                    other.presentationLayerActivityId,
                    presentationLayerActivityId)) &&
            (identical(other.masterId, masterId) ||
                const DeepCollectionEquality()
                    .equals(other.masterId, masterId)) &&
            (identical(other.activity, activity) ||
                const DeepCollectionEquality()
                    .equals(other.activity, activity)) &&
            (identical(other.iCode, iCode) ||
                const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.activityRename, activityRename) ||
                const DeepCollectionEquality()
                    .equals(other.activityRename, activityRename)) &&
            (identical(other.recType, recType) ||
                const DeepCollectionEquality()
                    .equals(other.recType, recType)) &&
            (identical(other.activityColor, activityColor) ||
                const DeepCollectionEquality()
                    .equals(other.activityColor, activityColor)) &&
            (identical(other.exportCode, exportCode) ||
                const DeepCollectionEquality()
                    .equals(other.exportCode, exportCode)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverrideExtension
    on WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride {
  WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride
      copyWith(
          {String? presentationLayerActivityOverrideId,
          String? presentationLayerId,
          String? presentationLayerActivityId,
          String? masterId,
          String? activity,
          String? iCode,
          String? description,
          String? activityRename,
          String? recType,
          String? activityColor,
          String? exportCode,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPresentationLayerActivityOverridePresentationLayerActivityOverride(
        presentationLayerActivityOverrideId:
            presentationLayerActivityOverrideId ??
                this.presentationLayerActivityOverrideId,
        presentationLayerId: presentationLayerId ?? this.presentationLayerId,
        presentationLayerActivityId:
            presentationLayerActivityId ?? this.presentationLayerActivityId,
        masterId: masterId ?? this.masterId,
        activity: activity ?? this.activity,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        activityRename: activityRename ?? this.activityRename,
        recType: recType ?? this.recType,
        activityColor: activityColor ?? this.activityColor,
        exportCode: exportCode ?? this.exportCode,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPresentationLayerFormPresentationLayerForm {
  WebApiModulesSettingsPresentationLayerFormPresentationLayerForm({
    this.presentationLayerFormId,
    this.presentationLayerId,
    this.formType,
    this.formTitle,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPresentationLayerFormPresentationLayerForm.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPresentationLayerFormPresentationLayerFormFromJson(
          json);

  @JsonKey(name: 'PresentationLayerFormId', includeIfNull: false)
  final String? presentationLayerFormId;
  @JsonKey(name: 'PresentationLayerId', includeIfNull: false)
  final String? presentationLayerId;
  @JsonKey(name: 'FormType', includeIfNull: false)
  final String? formType;
  @JsonKey(name: 'FormTitle', includeIfNull: false)
  final String? formTitle;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPresentationLayerFormPresentationLayerFormFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPresentationLayerFormPresentationLayerFormToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPresentationLayerFormPresentationLayerFormToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPresentationLayerFormPresentationLayerForm &&
            (identical(
                    other.presentationLayerFormId, presentationLayerFormId) ||
                const DeepCollectionEquality().equals(
                    other.presentationLayerFormId, presentationLayerFormId)) &&
            (identical(other.presentationLayerId, presentationLayerId) ||
                const DeepCollectionEquality()
                    .equals(other.presentationLayerId, presentationLayerId)) &&
            (identical(other.formType, formType) ||
                const DeepCollectionEquality()
                    .equals(other.formType, formType)) &&
            (identical(other.formTitle, formTitle) ||
                const DeepCollectionEquality()
                    .equals(other.formTitle, formTitle)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPresentationLayerFormPresentationLayerFormExtension
    on WebApiModulesSettingsPresentationLayerFormPresentationLayerForm {
  WebApiModulesSettingsPresentationLayerFormPresentationLayerForm copyWith(
      {String? presentationLayerFormId,
      String? presentationLayerId,
      String? formType,
      String? formTitle,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPresentationLayerFormPresentationLayerForm(
        presentationLayerFormId:
            presentationLayerFormId ?? this.presentationLayerFormId,
        presentationLayerId: presentationLayerId ?? this.presentationLayerId,
        formType: formType ?? this.formType,
        formTitle: formTitle ?? this.formTitle,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPresentationSettingsFormDesignFormDesign {
  WebApiModulesSettingsPresentationSettingsFormDesignFormDesign({
    this.formDesignId,
    this.formDesign,
    this.formType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPresentationSettingsFormDesignFormDesign.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPresentationSettingsFormDesignFormDesignFromJson(
          json);

  @JsonKey(name: 'FormDesignId', includeIfNull: false)
  final String? formDesignId;
  @JsonKey(name: 'FormDesign', includeIfNull: false)
  final String? formDesign;
  @JsonKey(name: 'FormType', includeIfNull: false)
  final String? formType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPresentationSettingsFormDesignFormDesignFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPresentationSettingsFormDesignFormDesignToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPresentationSettingsFormDesignFormDesignToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPresentationSettingsFormDesignFormDesign &&
            (identical(other.formDesignId, formDesignId) ||
                const DeepCollectionEquality()
                    .equals(other.formDesignId, formDesignId)) &&
            (identical(other.formDesign, formDesign) ||
                const DeepCollectionEquality()
                    .equals(other.formDesign, formDesign)) &&
            (identical(other.formType, formType) ||
                const DeepCollectionEquality()
                    .equals(other.formType, formType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPresentationSettingsFormDesignFormDesignExtension
    on WebApiModulesSettingsPresentationSettingsFormDesignFormDesign {
  WebApiModulesSettingsPresentationSettingsFormDesignFormDesign copyWith(
      {String? formDesignId,
      String? formDesign,
      String? formType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPresentationSettingsFormDesignFormDesign(
        formDesignId: formDesignId ?? this.formDesignId,
        formDesign: formDesign ?? this.formDesign,
        formType: formType ?? this.formType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer {
  WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer({
    this.presentationLayerId,
    this.presentationLayer,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerFromJson(
          json);

  @JsonKey(name: 'PresentationLayerId', includeIfNull: false)
  final String? presentationLayerId;
  @JsonKey(name: 'PresentationLayer', includeIfNull: false)
  final String? presentationLayer;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer &&
            (identical(other.presentationLayerId, presentationLayerId) ||
                const DeepCollectionEquality()
                    .equals(other.presentationLayerId, presentationLayerId)) &&
            (identical(other.presentationLayer, presentationLayer) ||
                const DeepCollectionEquality()
                    .equals(other.presentationLayer, presentationLayer)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayerExtension
    on WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer {
  WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer
      copyWith(
          {String? presentationLayerId,
          String? presentationLayer,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPresentationSettingsPresentationLayerPresentationLayer(
        presentationLayerId: presentationLayerId ?? this.presentationLayerId,
        presentationLayer: presentationLayer ?? this.presentationLayer,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild {
  WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild({
    this.projectAsBuildId,
    this.projectAsBuild,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildFromJson(
          json);

  @JsonKey(name: 'ProjectAsBuildId', includeIfNull: false)
  final String? projectAsBuildId;
  @JsonKey(name: 'ProjectAsBuild', includeIfNull: false)
  final String? projectAsBuild;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild &&
            (identical(other.projectAsBuildId, projectAsBuildId) ||
                const DeepCollectionEquality()
                    .equals(other.projectAsBuildId, projectAsBuildId)) &&
            (identical(other.projectAsBuild, projectAsBuild) ||
                const DeepCollectionEquality()
                    .equals(other.projectAsBuild, projectAsBuild)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuildExtension
    on WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild {
  WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild copyWith(
      {String? projectAsBuildId,
      String? projectAsBuild,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsProjectSettingsProjectAsBuildProjectAsBuild(
        projectAsBuildId: projectAsBuildId ?? this.projectAsBuildId,
        projectAsBuild: projectAsBuild ?? this.projectAsBuild,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning {
  WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning({
    this.projectCommissioningId,
    this.projectCommissioning,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningFromJson(
          json);

  @JsonKey(name: 'ProjectCommissioningId', includeIfNull: false)
  final String? projectCommissioningId;
  @JsonKey(name: 'ProjectCommissioning', includeIfNull: false)
  final String? projectCommissioning;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning &&
            (identical(other.projectCommissioningId, projectCommissioningId) ||
                const DeepCollectionEquality().equals(
                    other.projectCommissioningId, projectCommissioningId)) &&
            (identical(other.projectCommissioning, projectCommissioning) ||
                const DeepCollectionEquality().equals(
                    other.projectCommissioning, projectCommissioning)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioningExtension
    on WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning {
  WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning
      copyWith(
          {String? projectCommissioningId,
          String? projectCommissioning,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsProjectSettingsProjectCommissioningProjectCommissioning(
        projectCommissioningId:
            projectCommissioningId ?? this.projectCommissioningId,
        projectCommissioning: projectCommissioning ?? this.projectCommissioning,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit {
  WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit({
    this.projectDepositId,
    this.projectDeposit,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsProjectSettingsProjectDepositProjectDepositFromJson(
          json);

  @JsonKey(name: 'ProjectDepositId', includeIfNull: false)
  final String? projectDepositId;
  @JsonKey(name: 'ProjectDeposit', includeIfNull: false)
  final String? projectDeposit;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectDepositProjectDepositFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectDepositProjectDepositToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsProjectSettingsProjectDepositProjectDepositToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit &&
            (identical(other.projectDepositId, projectDepositId) ||
                const DeepCollectionEquality()
                    .equals(other.projectDepositId, projectDepositId)) &&
            (identical(other.projectDeposit, projectDeposit) ||
                const DeepCollectionEquality()
                    .equals(other.projectDeposit, projectDeposit)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsProjectSettingsProjectDepositProjectDepositExtension
    on WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit {
  WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit copyWith(
      {String? projectDepositId,
      String? projectDeposit,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsProjectSettingsProjectDepositProjectDeposit(
        projectDepositId: projectDepositId ?? this.projectDepositId,
        projectDeposit: projectDeposit ?? this.projectDeposit,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings {
  WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings({
    this.projectDrawingsId,
    this.projectDrawings,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsFromJson(
          json);

  @JsonKey(name: 'ProjectDrawingsId', includeIfNull: false)
  final String? projectDrawingsId;
  @JsonKey(name: 'ProjectDrawings', includeIfNull: false)
  final String? projectDrawings;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings &&
            (identical(other.projectDrawingsId, projectDrawingsId) ||
                const DeepCollectionEquality()
                    .equals(other.projectDrawingsId, projectDrawingsId)) &&
            (identical(other.projectDrawings, projectDrawings) ||
                const DeepCollectionEquality()
                    .equals(other.projectDrawings, projectDrawings)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawingsExtension
    on WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings {
  WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings copyWith(
      {String? projectDrawingsId,
      String? projectDrawings,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsProjectSettingsProjectDrawingsProjectDrawings(
        projectDrawingsId: projectDrawingsId ?? this.projectDrawingsId,
        projectDrawings: projectDrawings ?? this.projectDrawings,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems {
  WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems({
    this.projectDropShipItemsId,
    this.projectDropShipItems,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsFromJson(
          json);

  @JsonKey(name: 'ProjectDropShipItemsId', includeIfNull: false)
  final String? projectDropShipItemsId;
  @JsonKey(name: 'ProjectDropShipItems', includeIfNull: false)
  final String? projectDropShipItems;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems &&
            (identical(other.projectDropShipItemsId, projectDropShipItemsId) ||
                const DeepCollectionEquality().equals(
                    other.projectDropShipItemsId, projectDropShipItemsId)) &&
            (identical(other.projectDropShipItems, projectDropShipItems) ||
                const DeepCollectionEquality().equals(
                    other.projectDropShipItems, projectDropShipItems)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItemsExtension
    on WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems {
  WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems
      copyWith(
          {String? projectDropShipItemsId,
          String? projectDropShipItems,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsProjectSettingsProjectDropShipItemsProjectDropShipItems(
        projectDropShipItemsId:
            projectDropShipItemsId ?? this.projectDropShipItemsId,
        projectDropShipItems: projectDropShipItems ?? this.projectDropShipItems,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered {
  WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered({
    this.projectItemsOrderedId,
    this.projectItemsOrdered,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedFromJson(
          json);

  @JsonKey(name: 'ProjectItemsOrderedId', includeIfNull: false)
  final String? projectItemsOrderedId;
  @JsonKey(name: 'ProjectItemsOrdered', includeIfNull: false)
  final String? projectItemsOrdered;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered &&
            (identical(other.projectItemsOrderedId, projectItemsOrderedId) ||
                const DeepCollectionEquality().equals(
                    other.projectItemsOrderedId, projectItemsOrderedId)) &&
            (identical(other.projectItemsOrdered, projectItemsOrdered) ||
                const DeepCollectionEquality()
                    .equals(other.projectItemsOrdered, projectItemsOrdered)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrderedExtension
    on WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered {
  WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered
      copyWith(
          {String? projectItemsOrderedId,
          String? projectItemsOrdered,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsProjectSettingsProjectItemsOrderedProjectItemsOrdered(
        projectItemsOrderedId:
            projectItemsOrderedId ?? this.projectItemsOrderedId,
        projectItemsOrdered: projectItemsOrdered ?? this.projectItemsOrdered,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition {
  WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition({
    this.propsConditionId,
    this.propsCondition,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsPropsSettingsPropsConditionPropsConditionFromJson(
          json);

  @JsonKey(name: 'PropsConditionId', includeIfNull: false)
  final String? propsConditionId;
  @JsonKey(name: 'PropsCondition', includeIfNull: false)
  final String? propsCondition;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsPropsSettingsPropsConditionPropsConditionFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsPropsSettingsPropsConditionPropsConditionToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsPropsSettingsPropsConditionPropsConditionToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition &&
            (identical(other.propsConditionId, propsConditionId) ||
                const DeepCollectionEquality()
                    .equals(other.propsConditionId, propsConditionId)) &&
            (identical(other.propsCondition, propsCondition) ||
                const DeepCollectionEquality()
                    .equals(other.propsCondition, propsCondition)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsPropsSettingsPropsConditionPropsConditionExtension
    on WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition {
  WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition copyWith(
      {String? propsConditionId,
      String? propsCondition,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsPropsSettingsPropsConditionPropsCondition(
        propsConditionId: propsConditionId ?? this.propsConditionId,
        propsCondition: propsCondition ?? this.propsCondition,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate {
  WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate({
    this.quikReceiptTemplateId,
    this.warehouseId,
    this.description,
    this.inactive,
    this.orderBy,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateFromJson(
          json);

  @JsonKey(name: 'QuikReceiptTemplateId', includeIfNull: false)
  final int? quikReceiptTemplateId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final int? orderBy;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate &&
            (identical(other.quikReceiptTemplateId, quikReceiptTemplateId) ||
                const DeepCollectionEquality().equals(
                    other.quikReceiptTemplateId, quikReceiptTemplateId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplateExtension
    on WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate {
  WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate copyWith(
      {int? quikReceiptTemplateId,
      String? warehouseId,
      String? description,
      bool? inactive,
      int? orderBy,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsQuikReceiptTemplateQuikReceiptTemplate(
        quikReceiptTemplateId:
            quikReceiptTemplateId ?? this.quikReceiptTemplateId,
        warehouseId: warehouseId ?? this.warehouseId,
        description: description ?? this.description,
        inactive: inactive ?? this.inactive,
        orderBy: orderBy ?? this.orderBy,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequest {
  WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequest({
    this.startAtIndex,
    this.quikReceiptTemplateIds,
  });

  factory WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequestFromJson(
          json);

  @JsonKey(name: 'StartAtIndex', includeIfNull: false)
  final int? startAtIndex;
  @JsonKey(
      name: 'QuikReceiptTemplateIds',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? quikReceiptTemplateIds;
  static const fromJsonFactory =
      _$WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequest &&
            (identical(other.startAtIndex, startAtIndex) ||
                const DeepCollectionEquality()
                    .equals(other.startAtIndex, startAtIndex)) &&
            (identical(other.quikReceiptTemplateIds, quikReceiptTemplateIds) ||
                const DeepCollectionEquality().equals(
                    other.quikReceiptTemplateIds, quikReceiptTemplateIds)));
  }
}

extension $WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequestExtension
    on WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequest {
  WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequest
      copyWith({int? startAtIndex, List<String>? quikReceiptTemplateIds}) {
    return WebApiModulesSettingsQuikReceiptTemplateSortQuikReceiptTemplatesRequest(
        startAtIndex: startAtIndex ?? this.startAtIndex,
        quikReceiptTemplateIds:
            quikReceiptTemplateIds ?? this.quikReceiptTemplateIds);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsRankRank {
  WebApiModulesSettingsRankRank({
    this.rank,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsRankRank.fromJson(Map<String, dynamic> json) =>
      _$WebApiModulesSettingsRankRankFromJson(json);

  @JsonKey(name: 'Rank', includeIfNull: false)
  final String? rank;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory = _$WebApiModulesSettingsRankRankFromJson;
  static const toJsonFactory = _$WebApiModulesSettingsRankRankToJson;
  Map<String, dynamic> toJson() => _$WebApiModulesSettingsRankRankToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsRankRank &&
            (identical(other.rank, rank) ||
                const DeepCollectionEquality().equals(other.rank, rank)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsRankRankExtension
    on WebApiModulesSettingsRankRank {
  WebApiModulesSettingsRankRank copyWith(
      {String? rank,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsRankRank(
        rank: rank ?? this.rank,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsRateLocationTaxRateLocationTax {
  WebApiModulesSettingsRateLocationTaxRateLocationTax({
    this.rateId,
    this.id,
    this.internalChar,
    this.locationId,
    this.location,
    this.taxable,
    this.modByUsersId,
    this.modByUser,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsRateLocationTaxRateLocationTax.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsRateLocationTaxRateLocationTaxFromJson(json);

  @JsonKey(name: 'RateId', includeIfNull: false)
  final String? rateId;
  @JsonKey(name: 'Id', includeIfNull: false)
  final int? id;
  @JsonKey(name: 'InternalChar', includeIfNull: false)
  final String? internalChar;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'Location', includeIfNull: false)
  final String? location;
  @JsonKey(name: 'Taxable', includeIfNull: false)
  final bool? taxable;
  @JsonKey(name: 'ModByUsersId', includeIfNull: false)
  final String? modByUsersId;
  @JsonKey(name: 'ModByUser', includeIfNull: false)
  final String? modByUser;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsRateLocationTaxRateLocationTaxFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsRateLocationTaxRateLocationTaxToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsRateLocationTaxRateLocationTaxToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsRateLocationTaxRateLocationTax &&
            (identical(other.rateId, rateId) ||
                const DeepCollectionEquality().equals(other.rateId, rateId)) &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.internalChar, internalChar) ||
                const DeepCollectionEquality()
                    .equals(other.internalChar, internalChar)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.location, location) ||
                const DeepCollectionEquality()
                    .equals(other.location, location)) &&
            (identical(other.taxable, taxable) ||
                const DeepCollectionEquality()
                    .equals(other.taxable, taxable)) &&
            (identical(other.modByUsersId, modByUsersId) ||
                const DeepCollectionEquality()
                    .equals(other.modByUsersId, modByUsersId)) &&
            (identical(other.modByUser, modByUser) ||
                const DeepCollectionEquality()
                    .equals(other.modByUser, modByUser)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsRateLocationTaxRateLocationTaxExtension
    on WebApiModulesSettingsRateLocationTaxRateLocationTax {
  WebApiModulesSettingsRateLocationTaxRateLocationTax copyWith(
      {String? rateId,
      int? id,
      String? internalChar,
      String? locationId,
      String? location,
      bool? taxable,
      String? modByUsersId,
      String? modByUser,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsRateLocationTaxRateLocationTax(
        rateId: rateId ?? this.rateId,
        id: id ?? this.id,
        internalChar: internalChar ?? this.internalChar,
        locationId: locationId ?? this.locationId,
        location: location ?? this.location,
        taxable: taxable ?? this.taxable,
        modByUsersId: modByUsersId ?? this.modByUsersId,
        modByUser: modByUser ?? this.modByUser,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsRateTypeRateType {
  WebApiModulesSettingsRateTypeRateType({
    this.rateType,
    this.rateTypeDisplay,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsRateTypeRateType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsRateTypeRateTypeFromJson(json);

  @JsonKey(name: 'RateType', includeIfNull: false)
  final String? rateType;
  @JsonKey(name: 'RateTypeDisplay', includeIfNull: false)
  final String? rateTypeDisplay;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsRateTypeRateTypeFromJson;
  static const toJsonFactory = _$WebApiModulesSettingsRateTypeRateTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsRateTypeRateTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsRateTypeRateType &&
            (identical(other.rateType, rateType) ||
                const DeepCollectionEquality()
                    .equals(other.rateType, rateType)) &&
            (identical(other.rateTypeDisplay, rateTypeDisplay) ||
                const DeepCollectionEquality()
                    .equals(other.rateTypeDisplay, rateTypeDisplay)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsRateTypeRateTypeExtension
    on WebApiModulesSettingsRateTypeRateType {
  WebApiModulesSettingsRateTypeRateType copyWith(
      {String? rateType,
      String? rateTypeDisplay,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsRateTypeRateType(
        rateType: rateType ?? this.rateType,
        rateTypeDisplay: rateTypeDisplay ?? this.rateTypeDisplay,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsRateWarehouseRateWarehouse {
  WebApiModulesSettingsRateWarehouseRateWarehouse({
    this.rateId,
    this.hourlyRate,
    this.hourlyCost,
    this.hourlyMarkupPercent,
    this.dailyRate,
    this.dailyCost,
    this.dailyMarkupPercent,
    this.weeklyRate,
    this.weeklyCost,
    this.weeklyMarkupPercent,
    this.monthlyRate,
    this.monthlyCost,
    this.monthlyMarkupPercent,
    this.price,
    this.cost,
    this.markupPercent,
    this.defaultStartTime,
    this.defaultStopTime,
    this.itemDescription,
    this.warehouseId,
    this.warehouseCode,
    this.warehouse,
    this.warehouseOrderBy,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsRateWarehouseRateWarehouse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsRateWarehouseRateWarehouseFromJson(json);

  @JsonKey(name: 'RateId', includeIfNull: false)
  final String? rateId;
  @JsonKey(name: 'HourlyRate', includeIfNull: false)
  final double? hourlyRate;
  @JsonKey(name: 'HourlyCost', includeIfNull: false)
  final double? hourlyCost;
  @JsonKey(name: 'HourlyMarkupPercent', includeIfNull: false)
  final double? hourlyMarkupPercent;
  @JsonKey(name: 'DailyRate', includeIfNull: false)
  final double? dailyRate;
  @JsonKey(name: 'DailyCost', includeIfNull: false)
  final double? dailyCost;
  @JsonKey(name: 'DailyMarkupPercent', includeIfNull: false)
  final double? dailyMarkupPercent;
  @JsonKey(name: 'WeeklyRate', includeIfNull: false)
  final double? weeklyRate;
  @JsonKey(name: 'WeeklyCost', includeIfNull: false)
  final double? weeklyCost;
  @JsonKey(name: 'WeeklyMarkupPercent', includeIfNull: false)
  final double? weeklyMarkupPercent;
  @JsonKey(name: 'MonthlyRate', includeIfNull: false)
  final double? monthlyRate;
  @JsonKey(name: 'MonthlyCost', includeIfNull: false)
  final double? monthlyCost;
  @JsonKey(name: 'MonthlyMarkupPercent', includeIfNull: false)
  final double? monthlyMarkupPercent;
  @JsonKey(name: 'Price', includeIfNull: false)
  final double? price;
  @JsonKey(name: 'Cost', includeIfNull: false)
  final double? cost;
  @JsonKey(name: 'MarkupPercent', includeIfNull: false)
  final double? markupPercent;
  @JsonKey(name: 'DefaultStartTime', includeIfNull: false)
  final String? defaultStartTime;
  @JsonKey(name: 'DefaultStopTime', includeIfNull: false)
  final String? defaultStopTime;
  @JsonKey(name: 'ItemDescription', includeIfNull: false)
  final String? itemDescription;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'WarehouseOrderBy', includeIfNull: false)
  final int? warehouseOrderBy;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsRateWarehouseRateWarehouseFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsRateWarehouseRateWarehouseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsRateWarehouseRateWarehouseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsRateWarehouseRateWarehouse &&
            (identical(other.rateId, rateId) ||
                const DeepCollectionEquality().equals(other.rateId, rateId)) &&
            (identical(other.hourlyRate, hourlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyRate, hourlyRate)) &&
            (identical(other.hourlyCost, hourlyCost) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyCost, hourlyCost)) &&
            (identical(other.hourlyMarkupPercent, hourlyMarkupPercent) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyMarkupPercent, hourlyMarkupPercent)) &&
            (identical(other.dailyRate, dailyRate) ||
                const DeepCollectionEquality()
                    .equals(other.dailyRate, dailyRate)) &&
            (identical(other.dailyCost, dailyCost) ||
                const DeepCollectionEquality()
                    .equals(other.dailyCost, dailyCost)) &&
            (identical(other.dailyMarkupPercent, dailyMarkupPercent) ||
                const DeepCollectionEquality()
                    .equals(other.dailyMarkupPercent, dailyMarkupPercent)) &&
            (identical(other.weeklyRate, weeklyRate) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyRate, weeklyRate)) &&
            (identical(other.weeklyCost, weeklyCost) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyCost, weeklyCost)) &&
            (identical(other.weeklyMarkupPercent, weeklyMarkupPercent) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyMarkupPercent, weeklyMarkupPercent)) &&
            (identical(other.monthlyRate, monthlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyRate, monthlyRate)) &&
            (identical(other.monthlyCost, monthlyCost) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyCost, monthlyCost)) &&
            (identical(other.monthlyMarkupPercent, monthlyMarkupPercent) ||
                const DeepCollectionEquality().equals(
                    other.monthlyMarkupPercent, monthlyMarkupPercent)) &&
            (identical(other.price, price) ||
                const DeepCollectionEquality().equals(other.price, price)) &&
            (identical(other.cost, cost) ||
                const DeepCollectionEquality().equals(other.cost, cost)) &&
            (identical(other.markupPercent, markupPercent) ||
                const DeepCollectionEquality()
                    .equals(other.markupPercent, markupPercent)) &&
            (identical(other.defaultStartTime, defaultStartTime) ||
                const DeepCollectionEquality()
                    .equals(other.defaultStartTime, defaultStartTime)) &&
            (identical(other.defaultStopTime, defaultStopTime) ||
                const DeepCollectionEquality()
                    .equals(other.defaultStopTime, defaultStopTime)) &&
            (identical(other.itemDescription, itemDescription) ||
                const DeepCollectionEquality()
                    .equals(other.itemDescription, itemDescription)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.warehouseOrderBy, warehouseOrderBy) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseOrderBy, warehouseOrderBy)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsRateWarehouseRateWarehouseExtension
    on WebApiModulesSettingsRateWarehouseRateWarehouse {
  WebApiModulesSettingsRateWarehouseRateWarehouse copyWith(
      {String? rateId,
      double? hourlyRate,
      double? hourlyCost,
      double? hourlyMarkupPercent,
      double? dailyRate,
      double? dailyCost,
      double? dailyMarkupPercent,
      double? weeklyRate,
      double? weeklyCost,
      double? weeklyMarkupPercent,
      double? monthlyRate,
      double? monthlyCost,
      double? monthlyMarkupPercent,
      double? price,
      double? cost,
      double? markupPercent,
      String? defaultStartTime,
      String? defaultStopTime,
      String? itemDescription,
      String? warehouseId,
      String? warehouseCode,
      String? warehouse,
      int? warehouseOrderBy,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsRateWarehouseRateWarehouse(
        rateId: rateId ?? this.rateId,
        hourlyRate: hourlyRate ?? this.hourlyRate,
        hourlyCost: hourlyCost ?? this.hourlyCost,
        hourlyMarkupPercent: hourlyMarkupPercent ?? this.hourlyMarkupPercent,
        dailyRate: dailyRate ?? this.dailyRate,
        dailyCost: dailyCost ?? this.dailyCost,
        dailyMarkupPercent: dailyMarkupPercent ?? this.dailyMarkupPercent,
        weeklyRate: weeklyRate ?? this.weeklyRate,
        weeklyCost: weeklyCost ?? this.weeklyCost,
        weeklyMarkupPercent: weeklyMarkupPercent ?? this.weeklyMarkupPercent,
        monthlyRate: monthlyRate ?? this.monthlyRate,
        monthlyCost: monthlyCost ?? this.monthlyCost,
        monthlyMarkupPercent: monthlyMarkupPercent ?? this.monthlyMarkupPercent,
        price: price ?? this.price,
        cost: cost ?? this.cost,
        markupPercent: markupPercent ?? this.markupPercent,
        defaultStartTime: defaultStartTime ?? this.defaultStartTime,
        defaultStopTime: defaultStopTime ?? this.defaultStopTime,
        itemDescription: itemDescription ?? this.itemDescription,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        warehouse: warehouse ?? this.warehouse,
        warehouseOrderBy: warehouseOrderBy ?? this.warehouseOrderBy,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsRegionSettingsRegionRegion {
  WebApiModulesSettingsRegionSettingsRegionRegion({
    this.regionId,
    this.region,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsRegionSettingsRegionRegion.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsRegionSettingsRegionRegionFromJson(json);

  @JsonKey(name: 'RegionId', includeIfNull: false)
  final String? regionId;
  @JsonKey(name: 'Region', includeIfNull: false)
  final String? region;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsRegionSettingsRegionRegionFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsRegionSettingsRegionRegionToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsRegionSettingsRegionRegionToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsRegionSettingsRegionRegion &&
            (identical(other.regionId, regionId) ||
                const DeepCollectionEquality()
                    .equals(other.regionId, regionId)) &&
            (identical(other.region, region) ||
                const DeepCollectionEquality().equals(other.region, region)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsRegionSettingsRegionRegionExtension
    on WebApiModulesSettingsRegionSettingsRegionRegion {
  WebApiModulesSettingsRegionSettingsRegionRegion copyWith(
      {String? regionId,
      String? region,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsRegionSettingsRegionRegion(
        regionId: regionId ?? this.regionId,
        region: region ?? this.region,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus {
  WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus({
    this.repairItemStatusId,
    this.repairItemStatus,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusFromJson(
          json);

  @JsonKey(name: 'RepairItemStatusId', includeIfNull: false)
  final String? repairItemStatusId;
  @JsonKey(name: 'RepairItemStatus', includeIfNull: false)
  final String? repairItemStatus;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus &&
            (identical(other.repairItemStatusId, repairItemStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.repairItemStatusId, repairItemStatusId)) &&
            (identical(other.repairItemStatus, repairItemStatus) ||
                const DeepCollectionEquality()
                    .equals(other.repairItemStatus, repairItemStatus)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatusExtension
    on WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus {
  WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus copyWith(
      {String? repairItemStatusId,
      String? repairItemStatus,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsRepairSettingsRepairItemStatusRepairItemStatus(
        repairItemStatusId: repairItemStatusId ?? this.repairItemStatusId,
        repairItemStatus: repairItemStatus ?? this.repairItemStatus,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSetSettingsSetConditionSetCondition {
  WebApiModulesSettingsSetSettingsSetConditionSetCondition({
    this.setConditionId,
    this.setCondition,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSetSettingsSetConditionSetCondition.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSetSettingsSetConditionSetConditionFromJson(json);

  @JsonKey(name: 'SetConditionId', includeIfNull: false)
  final String? setConditionId;
  @JsonKey(name: 'SetCondition', includeIfNull: false)
  final String? setCondition;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSetSettingsSetConditionSetConditionFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSetSettingsSetConditionSetConditionToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSetSettingsSetConditionSetConditionToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSetSettingsSetConditionSetCondition &&
            (identical(other.setConditionId, setConditionId) ||
                const DeepCollectionEquality()
                    .equals(other.setConditionId, setConditionId)) &&
            (identical(other.setCondition, setCondition) ||
                const DeepCollectionEquality()
                    .equals(other.setCondition, setCondition)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSetSettingsSetConditionSetConditionExtension
    on WebApiModulesSettingsSetSettingsSetConditionSetCondition {
  WebApiModulesSettingsSetSettingsSetConditionSetCondition copyWith(
      {String? setConditionId,
      String? setCondition,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSetSettingsSetConditionSetCondition(
        setConditionId: setConditionId ?? this.setConditionId,
        setCondition: setCondition ?? this.setCondition,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSetSettingsSetOpeningSetOpening {
  WebApiModulesSettingsSetSettingsSetOpeningSetOpening({
    this.setOpeningId,
    this.setOpening,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSetSettingsSetOpeningSetOpening.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSetSettingsSetOpeningSetOpeningFromJson(json);

  @JsonKey(name: 'SetOpeningId', includeIfNull: false)
  final String? setOpeningId;
  @JsonKey(name: 'SetOpening', includeIfNull: false)
  final String? setOpening;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSetSettingsSetOpeningSetOpeningFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSetSettingsSetOpeningSetOpeningToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSetSettingsSetOpeningSetOpeningToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSetSettingsSetOpeningSetOpening &&
            (identical(other.setOpeningId, setOpeningId) ||
                const DeepCollectionEquality()
                    .equals(other.setOpeningId, setOpeningId)) &&
            (identical(other.setOpening, setOpening) ||
                const DeepCollectionEquality()
                    .equals(other.setOpening, setOpening)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSetSettingsSetOpeningSetOpeningExtension
    on WebApiModulesSettingsSetSettingsSetOpeningSetOpening {
  WebApiModulesSettingsSetSettingsSetOpeningSetOpening copyWith(
      {String? setOpeningId,
      String? setOpening,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSetSettingsSetOpeningSetOpening(
        setOpeningId: setOpeningId ?? this.setOpeningId,
        setOpening: setOpening ?? this.setOpening,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSetSettingsSetSurfaceSetSurface {
  WebApiModulesSettingsSetSettingsSetSurfaceSetSurface({
    this.setSurfaceId,
    this.setSurface,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSetSettingsSetSurfaceSetSurface.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceFromJson(json);

  @JsonKey(name: 'SetSurfaceId', includeIfNull: false)
  final String? setSurfaceId;
  @JsonKey(name: 'SetSurface', includeIfNull: false)
  final String? setSurface;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSetSettingsSetSurfaceSetSurface &&
            (identical(other.setSurfaceId, setSurfaceId) ||
                const DeepCollectionEquality()
                    .equals(other.setSurfaceId, setSurfaceId)) &&
            (identical(other.setSurface, setSurface) ||
                const DeepCollectionEquality()
                    .equals(other.setSurface, setSurface)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSetSettingsSetSurfaceSetSurfaceExtension
    on WebApiModulesSettingsSetSettingsSetSurfaceSetSurface {
  WebApiModulesSettingsSetSettingsSetSurfaceSetSurface copyWith(
      {String? setSurfaceId,
      String? setSurface,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSetSettingsSetSurfaceSetSurface(
        setSurfaceId: setSurfaceId ?? this.setSurfaceId,
        setSurface: setSurface ?? this.setSurface,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSetSettingsWallDescriptionWallDescription {
  WebApiModulesSettingsSetSettingsWallDescriptionWallDescription({
    this.wallDescriptionId,
    this.wallDescription,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSetSettingsWallDescriptionWallDescription.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionFromJson(
          json);

  @JsonKey(name: 'WallDescriptionId', includeIfNull: false)
  final String? wallDescriptionId;
  @JsonKey(name: 'WallDescription', includeIfNull: false)
  final String? wallDescription;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSetSettingsWallDescriptionWallDescription &&
            (identical(other.wallDescriptionId, wallDescriptionId) ||
                const DeepCollectionEquality()
                    .equals(other.wallDescriptionId, wallDescriptionId)) &&
            (identical(other.wallDescription, wallDescription) ||
                const DeepCollectionEquality()
                    .equals(other.wallDescription, wallDescription)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSetSettingsWallDescriptionWallDescriptionExtension
    on WebApiModulesSettingsSetSettingsWallDescriptionWallDescription {
  WebApiModulesSettingsSetSettingsWallDescriptionWallDescription copyWith(
      {String? wallDescriptionId,
      String? wallDescription,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSetSettingsWallDescriptionWallDescription(
        wallDescriptionId: wallDescriptionId ?? this.wallDescriptionId,
        wallDescription: wallDescription ?? this.wallDescription,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSetSettingsWallTypeWallType {
  WebApiModulesSettingsSetSettingsWallTypeWallType({
    this.wallTypeId,
    this.wallType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSetSettingsWallTypeWallType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSetSettingsWallTypeWallTypeFromJson(json);

  @JsonKey(name: 'WallTypeId', includeIfNull: false)
  final String? wallTypeId;
  @JsonKey(name: 'WallType', includeIfNull: false)
  final String? wallType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSetSettingsWallTypeWallTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSetSettingsWallTypeWallTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSetSettingsWallTypeWallTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSetSettingsWallTypeWallType &&
            (identical(other.wallTypeId, wallTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.wallTypeId, wallTypeId)) &&
            (identical(other.wallType, wallType) ||
                const DeepCollectionEquality()
                    .equals(other.wallType, wallType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSetSettingsWallTypeWallTypeExtension
    on WebApiModulesSettingsSetSettingsWallTypeWallType {
  WebApiModulesSettingsSetSettingsWallTypeWallType copyWith(
      {String? wallTypeId,
      String? wallType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSetSettingsWallTypeWallType(
        wallTypeId: wallTypeId ?? this.wallTypeId,
        wallType: wallType ?? this.wallType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsShipViaSettingsShipViaShipVia {
  WebApiModulesSettingsShipViaSettingsShipViaShipVia({
    this.shipViaId,
    this.shipVia,
    this.vendorId,
    this.vendor,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsShipViaSettingsShipViaShipVia.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsShipViaSettingsShipViaShipViaFromJson(json);

  @JsonKey(name: 'ShipViaId', includeIfNull: false)
  final String? shipViaId;
  @JsonKey(name: 'ShipVia', includeIfNull: false)
  final String? shipVia;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'Vendor', includeIfNull: false)
  final String? vendor;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsShipViaSettingsShipViaShipViaFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsShipViaSettingsShipViaShipViaToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsShipViaSettingsShipViaShipViaToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsShipViaSettingsShipViaShipVia &&
            (identical(other.shipViaId, shipViaId) ||
                const DeepCollectionEquality()
                    .equals(other.shipViaId, shipViaId)) &&
            (identical(other.shipVia, shipVia) ||
                const DeepCollectionEquality()
                    .equals(other.shipVia, shipVia)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.vendor, vendor) ||
                const DeepCollectionEquality().equals(other.vendor, vendor)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsShipViaSettingsShipViaShipViaExtension
    on WebApiModulesSettingsShipViaSettingsShipViaShipVia {
  WebApiModulesSettingsShipViaSettingsShipViaShipVia copyWith(
      {String? shipViaId,
      String? shipVia,
      String? vendorId,
      String? vendor,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsShipViaSettingsShipViaShipVia(
        shipViaId: shipViaId ?? this.shipViaId,
        shipVia: shipVia ?? this.shipVia,
        vendorId: vendorId ?? this.vendorId,
        vendor: vendor ?? this.vendor,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSourceSettingsSourceSource {
  WebApiModulesSettingsSourceSettingsSourceSource({
    this.sourceId,
    this.source,
    this.sourceType,
    this.description,
    this.path,
    this.fileName,
    this.ftpHost,
    this.ftpPort,
    this.ftpUserName,
    this.ftpPassword,
    this.ftpPath,
    this.ftpFileName,
    this.ftpArchive,
    this.ftpArchivePath,
    this.ftpSsl,
    this.temporaryFtpFileName,
    this.inactive,
    this.systemSource,
    this.temporarySoapPath,
    this.webServiceUserName,
    this.webServicePassword,
    this.useProxy,
    this.proxy,
    this.proxyPort,
    this.proxyUserName,
    this.proxyPassword,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSourceSettingsSourceSource.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSourceSettingsSourceSourceFromJson(json);

  @JsonKey(name: 'SourceId', includeIfNull: false)
  final String? sourceId;
  @JsonKey(name: 'Source', includeIfNull: false)
  final String? source;
  @JsonKey(name: 'SourceType', includeIfNull: false)
  final String? sourceType;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Path', includeIfNull: false)
  final String? path;
  @JsonKey(name: 'FileName', includeIfNull: false)
  final String? fileName;
  @JsonKey(name: 'FtpHost', includeIfNull: false)
  final String? ftpHost;
  @JsonKey(name: 'FtpPort', includeIfNull: false)
  final int? ftpPort;
  @JsonKey(name: 'FtpUserName', includeIfNull: false)
  final String? ftpUserName;
  @JsonKey(name: 'FtpPassword', includeIfNull: false)
  final String? ftpPassword;
  @JsonKey(name: 'FtpPath', includeIfNull: false)
  final String? ftpPath;
  @JsonKey(name: 'FtpFileName', includeIfNull: false)
  final String? ftpFileName;
  @JsonKey(name: 'FtpArchive', includeIfNull: false)
  final bool? ftpArchive;
  @JsonKey(name: 'FtpArchivePath', includeIfNull: false)
  final String? ftpArchivePath;
  @JsonKey(name: 'FtpSsl', includeIfNull: false)
  final bool? ftpSsl;
  @JsonKey(name: 'TemporaryFtpFileName', includeIfNull: false)
  final String? temporaryFtpFileName;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'SystemSource', includeIfNull: false)
  final bool? systemSource;
  @JsonKey(name: 'TemporarySoapPath', includeIfNull: false)
  final String? temporarySoapPath;
  @JsonKey(name: 'WebServiceUserName', includeIfNull: false)
  final String? webServiceUserName;
  @JsonKey(name: 'WebServicePassword', includeIfNull: false)
  final String? webServicePassword;
  @JsonKey(name: 'UseProxy', includeIfNull: false)
  final bool? useProxy;
  @JsonKey(name: 'Proxy', includeIfNull: false)
  final String? proxy;
  @JsonKey(name: 'ProxyPort', includeIfNull: false)
  final int? proxyPort;
  @JsonKey(name: 'ProxyUserName', includeIfNull: false)
  final String? proxyUserName;
  @JsonKey(name: 'ProxyPassword', includeIfNull: false)
  final String? proxyPassword;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSourceSettingsSourceSourceFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSourceSettingsSourceSourceToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSourceSettingsSourceSourceToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSourceSettingsSourceSource &&
            (identical(other.sourceId, sourceId) ||
                const DeepCollectionEquality()
                    .equals(other.sourceId, sourceId)) &&
            (identical(other.source, source) ||
                const DeepCollectionEquality().equals(other.source, source)) &&
            (identical(other.sourceType, sourceType) ||
                const DeepCollectionEquality()
                    .equals(other.sourceType, sourceType)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.path, path) ||
                const DeepCollectionEquality().equals(other.path, path)) &&
            (identical(other.fileName, fileName) ||
                const DeepCollectionEquality()
                    .equals(other.fileName, fileName)) &&
            (identical(other.ftpHost, ftpHost) ||
                const DeepCollectionEquality()
                    .equals(other.ftpHost, ftpHost)) &&
            (identical(other.ftpPort, ftpPort) ||
                const DeepCollectionEquality()
                    .equals(other.ftpPort, ftpPort)) &&
            (identical(other.ftpUserName, ftpUserName) ||
                const DeepCollectionEquality()
                    .equals(other.ftpUserName, ftpUserName)) &&
            (identical(other.ftpPassword, ftpPassword) ||
                const DeepCollectionEquality()
                    .equals(other.ftpPassword, ftpPassword)) &&
            (identical(other.ftpPath, ftpPath) ||
                const DeepCollectionEquality()
                    .equals(other.ftpPath, ftpPath)) &&
            (identical(other.ftpFileName, ftpFileName) ||
                const DeepCollectionEquality()
                    .equals(other.ftpFileName, ftpFileName)) &&
            (identical(other.ftpArchive, ftpArchive) ||
                const DeepCollectionEquality()
                    .equals(other.ftpArchive, ftpArchive)) &&
            (identical(other.ftpArchivePath, ftpArchivePath) ||
                const DeepCollectionEquality()
                    .equals(other.ftpArchivePath, ftpArchivePath)) &&
            (identical(other.ftpSsl, ftpSsl) ||
                const DeepCollectionEquality().equals(other.ftpSsl, ftpSsl)) &&
            (identical(other.temporaryFtpFileName, temporaryFtpFileName) ||
                const DeepCollectionEquality().equals(
                    other.temporaryFtpFileName, temporaryFtpFileName)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.systemSource, systemSource) ||
                const DeepCollectionEquality()
                    .equals(other.systemSource, systemSource)) &&
            (identical(other.temporarySoapPath, temporarySoapPath) ||
                const DeepCollectionEquality()
                    .equals(other.temporarySoapPath, temporarySoapPath)) &&
            (identical(other.webServiceUserName, webServiceUserName) ||
                const DeepCollectionEquality()
                    .equals(other.webServiceUserName, webServiceUserName)) &&
            (identical(other.webServicePassword, webServicePassword) ||
                const DeepCollectionEquality()
                    .equals(other.webServicePassword, webServicePassword)) &&
            (identical(other.useProxy, useProxy) ||
                const DeepCollectionEquality()
                    .equals(other.useProxy, useProxy)) &&
            (identical(other.proxy, proxy) ||
                const DeepCollectionEquality().equals(other.proxy, proxy)) &&
            (identical(other.proxyPort, proxyPort) ||
                const DeepCollectionEquality().equals(other.proxyPort, proxyPort)) &&
            (identical(other.proxyUserName, proxyUserName) || const DeepCollectionEquality().equals(other.proxyUserName, proxyUserName)) &&
            (identical(other.proxyPassword, proxyPassword) || const DeepCollectionEquality().equals(other.proxyPassword, proxyPassword)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSourceSettingsSourceSourceExtension
    on WebApiModulesSettingsSourceSettingsSourceSource {
  WebApiModulesSettingsSourceSettingsSourceSource copyWith(
      {String? sourceId,
      String? source,
      String? sourceType,
      String? description,
      String? path,
      String? fileName,
      String? ftpHost,
      int? ftpPort,
      String? ftpUserName,
      String? ftpPassword,
      String? ftpPath,
      String? ftpFileName,
      bool? ftpArchive,
      String? ftpArchivePath,
      bool? ftpSsl,
      String? temporaryFtpFileName,
      bool? inactive,
      bool? systemSource,
      String? temporarySoapPath,
      String? webServiceUserName,
      String? webServicePassword,
      bool? useProxy,
      String? proxy,
      int? proxyPort,
      String? proxyUserName,
      String? proxyPassword,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSourceSettingsSourceSource(
        sourceId: sourceId ?? this.sourceId,
        source: source ?? this.source,
        sourceType: sourceType ?? this.sourceType,
        description: description ?? this.description,
        path: path ?? this.path,
        fileName: fileName ?? this.fileName,
        ftpHost: ftpHost ?? this.ftpHost,
        ftpPort: ftpPort ?? this.ftpPort,
        ftpUserName: ftpUserName ?? this.ftpUserName,
        ftpPassword: ftpPassword ?? this.ftpPassword,
        ftpPath: ftpPath ?? this.ftpPath,
        ftpFileName: ftpFileName ?? this.ftpFileName,
        ftpArchive: ftpArchive ?? this.ftpArchive,
        ftpArchivePath: ftpArchivePath ?? this.ftpArchivePath,
        ftpSsl: ftpSsl ?? this.ftpSsl,
        temporaryFtpFileName: temporaryFtpFileName ?? this.temporaryFtpFileName,
        inactive: inactive ?? this.inactive,
        systemSource: systemSource ?? this.systemSource,
        temporarySoapPath: temporarySoapPath ?? this.temporarySoapPath,
        webServiceUserName: webServiceUserName ?? this.webServiceUserName,
        webServicePassword: webServicePassword ?? this.webServicePassword,
        useProxy: useProxy ?? this.useProxy,
        proxy: proxy ?? this.proxy,
        proxyPort: proxyPort ?? this.proxyPort,
        proxyUserName: proxyUserName ?? this.proxyUserName,
        proxyPassword: proxyPassword ?? this.proxyPassword,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSpaceSpace {
  WebApiModulesSettingsSpaceSpace({
    this.spaceId,
    this.buildingId,
    this.building,
    this.floorId,
    this.floor,
    this.space,
    this.orderBy,
    this.buildingSpace,
    this.buildingFloorSpace,
    this.squareFeet,
    this.spaceFromDate,
    this.spaceToDate,
    this.commonSquareFeet,
    this.primaryDimensionId,
    this.widthFt,
    this.heightFt,
    this.lengthFt,
    this.occupancy,
    this.inactive,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSpaceSpace.fromJson(Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSpaceSpaceFromJson(json);

  @JsonKey(name: 'SpaceId', includeIfNull: false)
  final String? spaceId;
  @JsonKey(name: 'BuildingId', includeIfNull: false)
  final String? buildingId;
  @JsonKey(name: 'Building', includeIfNull: false)
  final String? building;
  @JsonKey(name: 'FloorId', includeIfNull: false)
  final String? floorId;
  @JsonKey(name: 'Floor', includeIfNull: false)
  final String? floor;
  @JsonKey(name: 'Space', includeIfNull: false)
  final String? space;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final int? orderBy;
  @JsonKey(name: 'BuildingSpace', includeIfNull: false)
  final String? buildingSpace;
  @JsonKey(name: 'BuildingFloorSpace', includeIfNull: false)
  final String? buildingFloorSpace;
  @JsonKey(name: 'SquareFeet', includeIfNull: false)
  final double? squareFeet;
  @JsonKey(name: 'SpaceFromDate', includeIfNull: false)
  final String? spaceFromDate;
  @JsonKey(name: 'SpaceToDate', includeIfNull: false)
  final String? spaceToDate;
  @JsonKey(name: 'CommonSquareFeet', includeIfNull: false)
  final bool? commonSquareFeet;
  @JsonKey(name: 'PrimaryDimensionId', includeIfNull: false)
  final String? primaryDimensionId;
  @JsonKey(name: 'WidthFt', includeIfNull: false)
  final int? widthFt;
  @JsonKey(name: 'HeightFt', includeIfNull: false)
  final int? heightFt;
  @JsonKey(name: 'LengthFt', includeIfNull: false)
  final int? lengthFt;
  @JsonKey(name: 'Occupancy', includeIfNull: false)
  final int? occupancy;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory = _$WebApiModulesSettingsSpaceSpaceFromJson;
  static const toJsonFactory = _$WebApiModulesSettingsSpaceSpaceToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSpaceSpaceToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSpaceSpace &&
            (identical(other.spaceId, spaceId) ||
                const DeepCollectionEquality()
                    .equals(other.spaceId, spaceId)) &&
            (identical(other.buildingId, buildingId) ||
                const DeepCollectionEquality()
                    .equals(other.buildingId, buildingId)) &&
            (identical(other.building, building) ||
                const DeepCollectionEquality()
                    .equals(other.building, building)) &&
            (identical(other.floorId, floorId) ||
                const DeepCollectionEquality()
                    .equals(other.floorId, floorId)) &&
            (identical(other.floor, floor) ||
                const DeepCollectionEquality().equals(other.floor, floor)) &&
            (identical(other.space, space) ||
                const DeepCollectionEquality().equals(other.space, space)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.buildingSpace, buildingSpace) ||
                const DeepCollectionEquality()
                    .equals(other.buildingSpace, buildingSpace)) &&
            (identical(other.buildingFloorSpace, buildingFloorSpace) ||
                const DeepCollectionEquality()
                    .equals(other.buildingFloorSpace, buildingFloorSpace)) &&
            (identical(other.squareFeet, squareFeet) ||
                const DeepCollectionEquality()
                    .equals(other.squareFeet, squareFeet)) &&
            (identical(other.spaceFromDate, spaceFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.spaceFromDate, spaceFromDate)) &&
            (identical(other.spaceToDate, spaceToDate) ||
                const DeepCollectionEquality()
                    .equals(other.spaceToDate, spaceToDate)) &&
            (identical(other.commonSquareFeet, commonSquareFeet) ||
                const DeepCollectionEquality()
                    .equals(other.commonSquareFeet, commonSquareFeet)) &&
            (identical(other.primaryDimensionId, primaryDimensionId) ||
                const DeepCollectionEquality()
                    .equals(other.primaryDimensionId, primaryDimensionId)) &&
            (identical(other.widthFt, widthFt) ||
                const DeepCollectionEquality()
                    .equals(other.widthFt, widthFt)) &&
            (identical(other.heightFt, heightFt) ||
                const DeepCollectionEquality()
                    .equals(other.heightFt, heightFt)) &&
            (identical(other.lengthFt, lengthFt) ||
                const DeepCollectionEquality()
                    .equals(other.lengthFt, lengthFt)) &&
            (identical(other.occupancy, occupancy) ||
                const DeepCollectionEquality()
                    .equals(other.occupancy, occupancy)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSpaceSpaceExtension
    on WebApiModulesSettingsSpaceSpace {
  WebApiModulesSettingsSpaceSpace copyWith(
      {String? spaceId,
      String? buildingId,
      String? building,
      String? floorId,
      String? floor,
      String? space,
      int? orderBy,
      String? buildingSpace,
      String? buildingFloorSpace,
      double? squareFeet,
      String? spaceFromDate,
      String? spaceToDate,
      bool? commonSquareFeet,
      String? primaryDimensionId,
      int? widthFt,
      int? heightFt,
      int? lengthFt,
      int? occupancy,
      bool? inactive,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSpaceSpace(
        spaceId: spaceId ?? this.spaceId,
        buildingId: buildingId ?? this.buildingId,
        building: building ?? this.building,
        floorId: floorId ?? this.floorId,
        floor: floor ?? this.floor,
        space: space ?? this.space,
        orderBy: orderBy ?? this.orderBy,
        buildingSpace: buildingSpace ?? this.buildingSpace,
        buildingFloorSpace: buildingFloorSpace ?? this.buildingFloorSpace,
        squareFeet: squareFeet ?? this.squareFeet,
        spaceFromDate: spaceFromDate ?? this.spaceFromDate,
        spaceToDate: spaceToDate ?? this.spaceToDate,
        commonSquareFeet: commonSquareFeet ?? this.commonSquareFeet,
        primaryDimensionId: primaryDimensionId ?? this.primaryDimensionId,
        widthFt: widthFt ?? this.widthFt,
        heightFt: heightFt ?? this.heightFt,
        lengthFt: lengthFt ?? this.lengthFt,
        occupancy: occupancy ?? this.occupancy,
        inactive: inactive ?? this.inactive,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSpaceRateSpaceRate {
  WebApiModulesSettingsSpaceRateSpaceRate({
    this.spaceRateId,
    this.buildingId,
    this.floorId,
    this.spaceId,
    this.facilityTypeId,
    this.facilityType,
    this.spaceTypeId,
    this.spaceType,
    this.rateId,
    this.iCode,
    this.description,
    this.price,
    this.hourlyRate,
    this.dailyRate,
    this.weeklyRate,
    this.week2Rate,
    this.week3Rate,
    this.week4Rate,
    this.week5Rate,
    this.monthlyRate,
    this.stageScheduling,
    this.unitId,
    this.spaceTypeClassification,
    this.orderBy,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSpaceRateSpaceRate.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSpaceRateSpaceRateFromJson(json);

  @JsonKey(name: 'SpaceRateId', includeIfNull: false)
  final String? spaceRateId;
  @JsonKey(name: 'BuildingId', includeIfNull: false)
  final String? buildingId;
  @JsonKey(name: 'FloorId', includeIfNull: false)
  final String? floorId;
  @JsonKey(name: 'SpaceId', includeIfNull: false)
  final String? spaceId;
  @JsonKey(name: 'FacilityTypeId', includeIfNull: false)
  final String? facilityTypeId;
  @JsonKey(name: 'FacilityType', includeIfNull: false)
  final String? facilityType;
  @JsonKey(name: 'SpaceTypeId', includeIfNull: false)
  final String? spaceTypeId;
  @JsonKey(name: 'SpaceType', includeIfNull: false)
  final String? spaceType;
  @JsonKey(name: 'RateId', includeIfNull: false)
  final String? rateId;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Price', includeIfNull: false)
  final double? price;
  @JsonKey(name: 'HourlyRate', includeIfNull: false)
  final double? hourlyRate;
  @JsonKey(name: 'DailyRate', includeIfNull: false)
  final double? dailyRate;
  @JsonKey(name: 'WeeklyRate', includeIfNull: false)
  final double? weeklyRate;
  @JsonKey(name: 'Week2Rate', includeIfNull: false)
  final double? week2Rate;
  @JsonKey(name: 'Week3Rate', includeIfNull: false)
  final double? week3Rate;
  @JsonKey(name: 'Week4Rate', includeIfNull: false)
  final double? week4Rate;
  @JsonKey(name: 'Week5Rate', includeIfNull: false)
  final double? week5Rate;
  @JsonKey(name: 'MonthlyRate', includeIfNull: false)
  final double? monthlyRate;
  @JsonKey(name: 'StageScheduling', includeIfNull: false)
  final bool? stageScheduling;
  @JsonKey(name: 'UnitId', includeIfNull: false)
  final String? unitId;
  @JsonKey(name: 'SpaceTypeClassification', includeIfNull: false)
  final String? spaceTypeClassification;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final int? orderBy;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSpaceRateSpaceRateFromJson;
  static const toJsonFactory = _$WebApiModulesSettingsSpaceRateSpaceRateToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSpaceRateSpaceRateToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSpaceRateSpaceRate &&
            (identical(other.spaceRateId, spaceRateId) ||
                const DeepCollectionEquality()
                    .equals(other.spaceRateId, spaceRateId)) &&
            (identical(other.buildingId, buildingId) ||
                const DeepCollectionEquality()
                    .equals(other.buildingId, buildingId)) &&
            (identical(other.floorId, floorId) ||
                const DeepCollectionEquality()
                    .equals(other.floorId, floorId)) &&
            (identical(other.spaceId, spaceId) ||
                const DeepCollectionEquality()
                    .equals(other.spaceId, spaceId)) &&
            (identical(other.facilityTypeId, facilityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.facilityTypeId, facilityTypeId)) &&
            (identical(other.facilityType, facilityType) ||
                const DeepCollectionEquality()
                    .equals(other.facilityType, facilityType)) &&
            (identical(other.spaceTypeId, spaceTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.spaceTypeId, spaceTypeId)) &&
            (identical(other.spaceType, spaceType) ||
                const DeepCollectionEquality()
                    .equals(other.spaceType, spaceType)) &&
            (identical(other.rateId, rateId) ||
                const DeepCollectionEquality().equals(other.rateId, rateId)) &&
            (identical(other.iCode, iCode) ||
                const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.price, price) ||
                const DeepCollectionEquality().equals(other.price, price)) &&
            (identical(other.hourlyRate, hourlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyRate, hourlyRate)) &&
            (identical(other.dailyRate, dailyRate) ||
                const DeepCollectionEquality()
                    .equals(other.dailyRate, dailyRate)) &&
            (identical(other.weeklyRate, weeklyRate) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyRate, weeklyRate)) &&
            (identical(other.week2Rate, week2Rate) ||
                const DeepCollectionEquality()
                    .equals(other.week2Rate, week2Rate)) &&
            (identical(other.week3Rate, week3Rate) ||
                const DeepCollectionEquality()
                    .equals(other.week3Rate, week3Rate)) &&
            (identical(other.week4Rate, week4Rate) ||
                const DeepCollectionEquality()
                    .equals(other.week4Rate, week4Rate)) &&
            (identical(other.week5Rate, week5Rate) ||
                const DeepCollectionEquality()
                    .equals(other.week5Rate, week5Rate)) &&
            (identical(other.monthlyRate, monthlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyRate, monthlyRate)) &&
            (identical(other.stageScheduling, stageScheduling) ||
                const DeepCollectionEquality()
                    .equals(other.stageScheduling, stageScheduling)) &&
            (identical(other.unitId, unitId) ||
                const DeepCollectionEquality().equals(other.unitId, unitId)) &&
            (identical(other.spaceTypeClassification, spaceTypeClassification) ||
                const DeepCollectionEquality().equals(
                    other.spaceTypeClassification, spaceTypeClassification)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSpaceRateSpaceRateExtension
    on WebApiModulesSettingsSpaceRateSpaceRate {
  WebApiModulesSettingsSpaceRateSpaceRate copyWith(
      {String? spaceRateId,
      String? buildingId,
      String? floorId,
      String? spaceId,
      String? facilityTypeId,
      String? facilityType,
      String? spaceTypeId,
      String? spaceType,
      String? rateId,
      String? iCode,
      String? description,
      double? price,
      double? hourlyRate,
      double? dailyRate,
      double? weeklyRate,
      double? week2Rate,
      double? week3Rate,
      double? week4Rate,
      double? week5Rate,
      double? monthlyRate,
      bool? stageScheduling,
      String? unitId,
      String? spaceTypeClassification,
      int? orderBy,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSpaceRateSpaceRate(
        spaceRateId: spaceRateId ?? this.spaceRateId,
        buildingId: buildingId ?? this.buildingId,
        floorId: floorId ?? this.floorId,
        spaceId: spaceId ?? this.spaceId,
        facilityTypeId: facilityTypeId ?? this.facilityTypeId,
        facilityType: facilityType ?? this.facilityType,
        spaceTypeId: spaceTypeId ?? this.spaceTypeId,
        spaceType: spaceType ?? this.spaceType,
        rateId: rateId ?? this.rateId,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        price: price ?? this.price,
        hourlyRate: hourlyRate ?? this.hourlyRate,
        dailyRate: dailyRate ?? this.dailyRate,
        weeklyRate: weeklyRate ?? this.weeklyRate,
        week2Rate: week2Rate ?? this.week2Rate,
        week3Rate: week3Rate ?? this.week3Rate,
        week4Rate: week4Rate ?? this.week4Rate,
        week5Rate: week5Rate ?? this.week5Rate,
        monthlyRate: monthlyRate ?? this.monthlyRate,
        stageScheduling: stageScheduling ?? this.stageScheduling,
        unitId: unitId ?? this.unitId,
        spaceTypeClassification:
            spaceTypeClassification ?? this.spaceTypeClassification,
        orderBy: orderBy ?? this.orderBy,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSubCategorySortSubCategoriesRequest {
  WebApiModulesSettingsSubCategorySortSubCategoriesRequest({
    this.startAtIndex,
    this.subCategoryIds,
  });

  factory WebApiModulesSettingsSubCategorySortSubCategoriesRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSubCategorySortSubCategoriesRequestFromJson(json);

  @JsonKey(name: 'StartAtIndex', includeIfNull: false)
  final int? startAtIndex;
  @JsonKey(
      name: 'SubCategoryIds', includeIfNull: false, defaultValue: <String>[])
  final List<String>? subCategoryIds;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSubCategorySortSubCategoriesRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSubCategorySortSubCategoriesRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSubCategorySortSubCategoriesRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSubCategorySortSubCategoriesRequest &&
            (identical(other.startAtIndex, startAtIndex) ||
                const DeepCollectionEquality()
                    .equals(other.startAtIndex, startAtIndex)) &&
            (identical(other.subCategoryIds, subCategoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryIds, subCategoryIds)));
  }
}

extension $WebApiModulesSettingsSubCategorySortSubCategoriesRequestExtension
    on WebApiModulesSettingsSubCategorySortSubCategoriesRequest {
  WebApiModulesSettingsSubCategorySortSubCategoriesRequest copyWith(
      {int? startAtIndex, List<String>? subCategoryIds}) {
    return WebApiModulesSettingsSubCategorySortSubCategoriesRequest(
        startAtIndex: startAtIndex ?? this.startAtIndex,
        subCategoryIds: subCategoryIds ?? this.subCategoryIds);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSubCategorySubCategory {
  WebApiModulesSettingsSubCategorySubCategory({
    this.subCategoryId,
    this.subCategory,
    this.categoryId,
    this.category,
    this.typeId,
    this.type,
    this.orderBy,
    this.pickListOrderBy,
    this.dateStamp,
    this.inactive,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSubCategorySubCategory.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSubCategorySubCategoryFromJson(json);

  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'SubCategory', includeIfNull: false)
  final String? subCategory;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'TypeId', includeIfNull: false)
  final String? typeId;
  @JsonKey(name: 'Type', includeIfNull: false)
  final String? type;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'PickListOrderBy', includeIfNull: false)
  final int? pickListOrderBy;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSubCategorySubCategoryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSubCategorySubCategoryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSubCategorySubCategoryToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSubCategorySubCategory &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.subCategory, subCategory) ||
                const DeepCollectionEquality()
                    .equals(other.subCategory, subCategory)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) ||
                const DeepCollectionEquality()
                    .equals(other.category, category)) &&
            (identical(other.typeId, typeId) ||
                const DeepCollectionEquality().equals(other.typeId, typeId)) &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.pickListOrderBy, pickListOrderBy) ||
                const DeepCollectionEquality()
                    .equals(other.pickListOrderBy, pickListOrderBy)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSubCategorySubCategoryExtension
    on WebApiModulesSettingsSubCategorySubCategory {
  WebApiModulesSettingsSubCategorySubCategory copyWith(
      {String? subCategoryId,
      String? subCategory,
      String? categoryId,
      String? category,
      String? typeId,
      String? type,
      double? orderBy,
      int? pickListOrderBy,
      String? dateStamp,
      bool? inactive,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSubCategorySubCategory(
        subCategoryId: subCategoryId ?? this.subCategoryId,
        subCategory: subCategory ?? this.subCategory,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        typeId: typeId ?? this.typeId,
        type: type ?? this.type,
        orderBy: orderBy ?? this.orderBy,
        pickListOrderBy: pickListOrderBy ?? this.pickListOrderBy,
        dateStamp: dateStamp ?? this.dateStamp,
        inactive: inactive ?? this.inactive,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSystemNumberSystemNumber {
  WebApiModulesSettingsSystemNumberSystemNumber({
    this.systemNumberId,
    this.officeLocationId,
    this.module,
    this.isAssignByUser,
    this.counter,
    this.increment,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSystemNumberSystemNumber.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSystemNumberSystemNumberFromJson(json);

  @JsonKey(name: 'SystemNumberId', includeIfNull: false)
  final String? systemNumberId;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'Module', includeIfNull: false)
  final String? module;
  @JsonKey(name: 'IsAssignByUser', includeIfNull: false)
  final bool? isAssignByUser;
  @JsonKey(name: 'Counter', includeIfNull: false)
  final int? counter;
  @JsonKey(name: 'Increment', includeIfNull: false)
  final int? increment;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSystemNumberSystemNumberFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSystemNumberSystemNumberToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSystemNumberSystemNumberToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSystemNumberSystemNumber &&
            (identical(other.systemNumberId, systemNumberId) ||
                const DeepCollectionEquality()
                    .equals(other.systemNumberId, systemNumberId)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.module, module) ||
                const DeepCollectionEquality().equals(other.module, module)) &&
            (identical(other.isAssignByUser, isAssignByUser) ||
                const DeepCollectionEquality()
                    .equals(other.isAssignByUser, isAssignByUser)) &&
            (identical(other.counter, counter) ||
                const DeepCollectionEquality()
                    .equals(other.counter, counter)) &&
            (identical(other.increment, increment) ||
                const DeepCollectionEquality()
                    .equals(other.increment, increment)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSystemNumberSystemNumberExtension
    on WebApiModulesSettingsSystemNumberSystemNumber {
  WebApiModulesSettingsSystemNumberSystemNumber copyWith(
      {String? systemNumberId,
      String? officeLocationId,
      String? module,
      bool? isAssignByUser,
      int? counter,
      int? increment,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSystemNumberSystemNumber(
        systemNumberId: systemNumberId ?? this.systemNumberId,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        module: module ?? this.module,
        isAssignByUser: isAssignByUser ?? this.isAssignByUser,
        counter: counter ?? this.counter,
        increment: increment ?? this.increment,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings {
  WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings({
    this.controlId,
    this.availabilitySettings,
    this.pollForStaleAvailabilitySeconds,
    this.keepAvailabilityCacheCurrent,
    this.keepCurrentSeconds,
    this.daysToCache,
    this.maxAvailabilityItemsToQuery,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsFromJson(
          json);

  @JsonKey(name: 'ControlId', includeIfNull: false)
  final String? controlId;
  @JsonKey(name: 'AvailabilitySettings', includeIfNull: false)
  final String? availabilitySettings;
  @JsonKey(name: 'PollForStaleAvailabilitySeconds', includeIfNull: false)
  final int? pollForStaleAvailabilitySeconds;
  @JsonKey(name: 'KeepAvailabilityCacheCurrent', includeIfNull: false)
  final bool? keepAvailabilityCacheCurrent;
  @JsonKey(name: 'KeepCurrentSeconds', includeIfNull: false)
  final int? keepCurrentSeconds;
  @JsonKey(name: 'DaysToCache', includeIfNull: false)
  final int? daysToCache;
  @JsonKey(name: 'MaxAvailabilityItemsToQuery', includeIfNull: false)
  final int? maxAvailabilityItemsToQuery;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings &&
            (identical(other.controlId, controlId) ||
                const DeepCollectionEquality()
                    .equals(other.controlId, controlId)) &&
            (identical(other.availabilitySettings, availabilitySettings) ||
                const DeepCollectionEquality().equals(
                    other.availabilitySettings, availabilitySettings)) &&
            (identical(other.pollForStaleAvailabilitySeconds, pollForStaleAvailabilitySeconds) ||
                const DeepCollectionEquality().equals(
                    other.pollForStaleAvailabilitySeconds,
                    pollForStaleAvailabilitySeconds)) &&
            (identical(other.keepAvailabilityCacheCurrent, keepAvailabilityCacheCurrent) ||
                const DeepCollectionEquality().equals(
                    other.keepAvailabilityCacheCurrent,
                    keepAvailabilityCacheCurrent)) &&
            (identical(other.keepCurrentSeconds, keepCurrentSeconds) ||
                const DeepCollectionEquality()
                    .equals(other.keepCurrentSeconds, keepCurrentSeconds)) &&
            (identical(other.daysToCache, daysToCache) ||
                const DeepCollectionEquality()
                    .equals(other.daysToCache, daysToCache)) &&
            (identical(other.maxAvailabilityItemsToQuery, maxAvailabilityItemsToQuery) ||
                const DeepCollectionEquality().equals(
                    other.maxAvailabilityItemsToQuery,
                    maxAvailabilityItemsToQuery)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettingsExtension
    on WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings {
  WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings
      copyWith(
          {String? controlId,
          String? availabilitySettings,
          int? pollForStaleAvailabilitySeconds,
          bool? keepAvailabilityCacheCurrent,
          int? keepCurrentSeconds,
          int? daysToCache,
          int? maxAvailabilityItemsToQuery,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSystemSettingsAvailabilitySettingsAvailabilitySettings(
        controlId: controlId ?? this.controlId,
        availabilitySettings: availabilitySettings ?? this.availabilitySettings,
        pollForStaleAvailabilitySeconds: pollForStaleAvailabilitySeconds ??
            this.pollForStaleAvailabilitySeconds,
        keepAvailabilityCacheCurrent:
            keepAvailabilityCacheCurrent ?? this.keepAvailabilityCacheCurrent,
        keepCurrentSeconds: keepCurrentSeconds ?? this.keepCurrentSeconds,
        daysToCache: daysToCache ?? this.daysToCache,
        maxAvailabilityItemsToQuery:
            maxAvailabilityItemsToQuery ?? this.maxAvailabilityItemsToQuery,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings {
  WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings({
    this.defaultSettingsId,
    this.defaultUnitId,
    this.defaultSettingsName,
    this.defaultUnit,
    this.defaultDealStatusId,
    this.defaultDealStatus,
    this.defaultCustomerStatusId,
    this.defaultCustomerStatus,
    this.defaultDealBillingCycleId,
    this.defaultDealBillingCycle,
    this.defaultDealPoRequired,
    this.defaultDealPoType,
    this.defaultNonRecurringBillingCycleId,
    this.defaultNonRecurringBillingCycle,
    this.defaultCustomerPaymentTermsId,
    this.defaultCustomerPaymentTerms,
    this.defaultContactGroupId,
    this.defaultContactGroupName,
    this.defaultRank,
    this.defaultCreditStatusId,
    this.defaultCreditStatus,
    this.contactShowAllDeals,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsFromJson(
          json);

  @JsonKey(name: 'DefaultSettingsId', includeIfNull: false)
  final String? defaultSettingsId;
  @JsonKey(name: 'DefaultUnitId', includeIfNull: false)
  final String? defaultUnitId;
  @JsonKey(name: 'DefaultSettingsName', includeIfNull: false)
  final String? defaultSettingsName;
  @JsonKey(name: 'DefaultUnit', includeIfNull: false)
  final String? defaultUnit;
  @JsonKey(name: 'DefaultDealStatusId', includeIfNull: false)
  final String? defaultDealStatusId;
  @JsonKey(name: 'DefaultDealStatus', includeIfNull: false)
  final String? defaultDealStatus;
  @JsonKey(name: 'DefaultCustomerStatusId', includeIfNull: false)
  final String? defaultCustomerStatusId;
  @JsonKey(name: 'DefaultCustomerStatus', includeIfNull: false)
  final String? defaultCustomerStatus;
  @JsonKey(name: 'DefaultDealBillingCycleId', includeIfNull: false)
  final String? defaultDealBillingCycleId;
  @JsonKey(name: 'DefaultDealBillingCycle', includeIfNull: false)
  final String? defaultDealBillingCycle;
  @JsonKey(name: 'DefaultDealPoRequired', includeIfNull: false)
  final bool? defaultDealPoRequired;
  @JsonKey(name: 'DefaultDealPoType', includeIfNull: false)
  final String? defaultDealPoType;
  @JsonKey(name: 'DefaultNonRecurringBillingCycleId', includeIfNull: false)
  final String? defaultNonRecurringBillingCycleId;
  @JsonKey(name: 'DefaultNonRecurringBillingCycle', includeIfNull: false)
  final String? defaultNonRecurringBillingCycle;
  @JsonKey(name: 'DefaultCustomerPaymentTermsId', includeIfNull: false)
  final String? defaultCustomerPaymentTermsId;
  @JsonKey(name: 'DefaultCustomerPaymentTerms', includeIfNull: false)
  final String? defaultCustomerPaymentTerms;
  @JsonKey(name: 'DefaultContactGroupId', includeIfNull: false)
  final String? defaultContactGroupId;
  @JsonKey(name: 'DefaultContactGroupName', includeIfNull: false)
  final String? defaultContactGroupName;
  @JsonKey(name: 'DefaultRank', includeIfNull: false)
  final String? defaultRank;
  @JsonKey(name: 'DefaultCreditStatusId', includeIfNull: false)
  final String? defaultCreditStatusId;
  @JsonKey(name: 'DefaultCreditStatus', includeIfNull: false)
  final String? defaultCreditStatus;
  @JsonKey(name: 'ContactShowAllDeals', includeIfNull: false)
  final bool? contactShowAllDeals;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings &&
            (identical(other.defaultSettingsId, defaultSettingsId) ||
                const DeepCollectionEquality()
                    .equals(other.defaultSettingsId, defaultSettingsId)) &&
            (identical(other.defaultUnitId, defaultUnitId) ||
                const DeepCollectionEquality()
                    .equals(other.defaultUnitId, defaultUnitId)) &&
            (identical(other.defaultSettingsName, defaultSettingsName) ||
                const DeepCollectionEquality()
                    .equals(other.defaultSettingsName, defaultSettingsName)) &&
            (identical(other.defaultUnit, defaultUnit) ||
                const DeepCollectionEquality()
                    .equals(other.defaultUnit, defaultUnit)) &&
            (identical(other.defaultDealStatusId, defaultDealStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.defaultDealStatusId, defaultDealStatusId)) &&
            (identical(other.defaultDealStatus, defaultDealStatus) ||
                const DeepCollectionEquality()
                    .equals(other.defaultDealStatus, defaultDealStatus)) &&
            (identical(other.defaultCustomerStatusId, defaultCustomerStatusId) ||
                const DeepCollectionEquality().equals(
                    other.defaultCustomerStatusId, defaultCustomerStatusId)) &&
            (identical(other.defaultCustomerStatus, defaultCustomerStatus) ||
                const DeepCollectionEquality().equals(
                    other.defaultCustomerStatus, defaultCustomerStatus)) &&
            (identical(other.defaultDealBillingCycleId, defaultDealBillingCycleId) ||
                const DeepCollectionEquality().equals(
                    other.defaultDealBillingCycleId,
                    defaultDealBillingCycleId)) &&
            (identical(other.defaultDealBillingCycle, defaultDealBillingCycle) ||
                const DeepCollectionEquality().equals(
                    other.defaultDealBillingCycle, defaultDealBillingCycle)) &&
            (identical(other.defaultDealPoRequired, defaultDealPoRequired) ||
                const DeepCollectionEquality().equals(
                    other.defaultDealPoRequired, defaultDealPoRequired)) &&
            (identical(other.defaultDealPoType, defaultDealPoType) ||
                const DeepCollectionEquality()
                    .equals(other.defaultDealPoType, defaultDealPoType)) &&
            (identical(other.defaultNonRecurringBillingCycleId, defaultNonRecurringBillingCycleId) ||
                const DeepCollectionEquality().equals(other.defaultNonRecurringBillingCycleId, defaultNonRecurringBillingCycleId)) &&
            (identical(other.defaultNonRecurringBillingCycle, defaultNonRecurringBillingCycle) || const DeepCollectionEquality().equals(other.defaultNonRecurringBillingCycle, defaultNonRecurringBillingCycle)) &&
            (identical(other.defaultCustomerPaymentTermsId, defaultCustomerPaymentTermsId) || const DeepCollectionEquality().equals(other.defaultCustomerPaymentTermsId, defaultCustomerPaymentTermsId)) &&
            (identical(other.defaultCustomerPaymentTerms, defaultCustomerPaymentTerms) || const DeepCollectionEquality().equals(other.defaultCustomerPaymentTerms, defaultCustomerPaymentTerms)) &&
            (identical(other.defaultContactGroupId, defaultContactGroupId) || const DeepCollectionEquality().equals(other.defaultContactGroupId, defaultContactGroupId)) &&
            (identical(other.defaultContactGroupName, defaultContactGroupName) || const DeepCollectionEquality().equals(other.defaultContactGroupName, defaultContactGroupName)) &&
            (identical(other.defaultRank, defaultRank) || const DeepCollectionEquality().equals(other.defaultRank, defaultRank)) &&
            (identical(other.defaultCreditStatusId, defaultCreditStatusId) || const DeepCollectionEquality().equals(other.defaultCreditStatusId, defaultCreditStatusId)) &&
            (identical(other.defaultCreditStatus, defaultCreditStatus) || const DeepCollectionEquality().equals(other.defaultCreditStatus, defaultCreditStatus)) &&
            (identical(other.contactShowAllDeals, contactShowAllDeals) || const DeepCollectionEquality().equals(other.contactShowAllDeals, contactShowAllDeals)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettingsExtension
    on WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings {
  WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings copyWith(
      {String? defaultSettingsId,
      String? defaultUnitId,
      String? defaultSettingsName,
      String? defaultUnit,
      String? defaultDealStatusId,
      String? defaultDealStatus,
      String? defaultCustomerStatusId,
      String? defaultCustomerStatus,
      String? defaultDealBillingCycleId,
      String? defaultDealBillingCycle,
      bool? defaultDealPoRequired,
      String? defaultDealPoType,
      String? defaultNonRecurringBillingCycleId,
      String? defaultNonRecurringBillingCycle,
      String? defaultCustomerPaymentTermsId,
      String? defaultCustomerPaymentTerms,
      String? defaultContactGroupId,
      String? defaultContactGroupName,
      String? defaultRank,
      String? defaultCreditStatusId,
      String? defaultCreditStatus,
      bool? contactShowAllDeals,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSystemSettingsDefaultSettingsDefaultSettings(
        defaultSettingsId: defaultSettingsId ?? this.defaultSettingsId,
        defaultUnitId: defaultUnitId ?? this.defaultUnitId,
        defaultSettingsName: defaultSettingsName ?? this.defaultSettingsName,
        defaultUnit: defaultUnit ?? this.defaultUnit,
        defaultDealStatusId: defaultDealStatusId ?? this.defaultDealStatusId,
        defaultDealStatus: defaultDealStatus ?? this.defaultDealStatus,
        defaultCustomerStatusId:
            defaultCustomerStatusId ?? this.defaultCustomerStatusId,
        defaultCustomerStatus:
            defaultCustomerStatus ?? this.defaultCustomerStatus,
        defaultDealBillingCycleId:
            defaultDealBillingCycleId ?? this.defaultDealBillingCycleId,
        defaultDealBillingCycle:
            defaultDealBillingCycle ?? this.defaultDealBillingCycle,
        defaultDealPoRequired:
            defaultDealPoRequired ?? this.defaultDealPoRequired,
        defaultDealPoType: defaultDealPoType ?? this.defaultDealPoType,
        defaultNonRecurringBillingCycleId: defaultNonRecurringBillingCycleId ??
            this.defaultNonRecurringBillingCycleId,
        defaultNonRecurringBillingCycle: defaultNonRecurringBillingCycle ??
            this.defaultNonRecurringBillingCycle,
        defaultCustomerPaymentTermsId:
            defaultCustomerPaymentTermsId ?? this.defaultCustomerPaymentTermsId,
        defaultCustomerPaymentTerms:
            defaultCustomerPaymentTerms ?? this.defaultCustomerPaymentTerms,
        defaultContactGroupId:
            defaultContactGroupId ?? this.defaultContactGroupId,
        defaultContactGroupName:
            defaultContactGroupName ?? this.defaultContactGroupName,
        defaultRank: defaultRank ?? this.defaultRank,
        defaultCreditStatusId:
            defaultCreditStatusId ?? this.defaultCreditStatusId,
        defaultCreditStatus: defaultCreditStatus ?? this.defaultCreditStatus,
        contactShowAllDeals: contactShowAllDeals ?? this.contactShowAllDeals,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings {
  WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings({
    this.emailSettingsId,
    this.host,
    this.port,
    this.enableSsl,
    this.accountPassword,
    this.accountUsername,
    this.authenticationType,
    this.deleteDays,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsFromJson(
          json);

  @JsonKey(name: 'EmailSettingsId', includeIfNull: false)
  final String? emailSettingsId;
  @JsonKey(name: 'Host', includeIfNull: false)
  final String? host;
  @JsonKey(name: 'Port', includeIfNull: false)
  final int? port;
  @JsonKey(name: 'EnableSsl', includeIfNull: false)
  final bool? enableSsl;
  @JsonKey(name: 'AccountPassword', includeIfNull: false)
  final String? accountPassword;
  @JsonKey(name: 'AccountUsername', includeIfNull: false)
  final String? accountUsername;
  @JsonKey(name: 'AuthenticationType', includeIfNull: false)
  final String? authenticationType;
  @JsonKey(name: 'DeleteDays', includeIfNull: false)
  final int? deleteDays;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings &&
            (identical(other.emailSettingsId, emailSettingsId) ||
                const DeepCollectionEquality()
                    .equals(other.emailSettingsId, emailSettingsId)) &&
            (identical(other.host, host) ||
                const DeepCollectionEquality().equals(other.host, host)) &&
            (identical(other.port, port) ||
                const DeepCollectionEquality().equals(other.port, port)) &&
            (identical(other.enableSsl, enableSsl) ||
                const DeepCollectionEquality()
                    .equals(other.enableSsl, enableSsl)) &&
            (identical(other.accountPassword, accountPassword) ||
                const DeepCollectionEquality()
                    .equals(other.accountPassword, accountPassword)) &&
            (identical(other.accountUsername, accountUsername) ||
                const DeepCollectionEquality()
                    .equals(other.accountUsername, accountUsername)) &&
            (identical(other.authenticationType, authenticationType) ||
                const DeepCollectionEquality()
                    .equals(other.authenticationType, authenticationType)) &&
            (identical(other.deleteDays, deleteDays) ||
                const DeepCollectionEquality()
                    .equals(other.deleteDays, deleteDays)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettingsExtension
    on WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings {
  WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings copyWith(
      {String? emailSettingsId,
      String? host,
      int? port,
      bool? enableSsl,
      String? accountPassword,
      String? accountUsername,
      String? authenticationType,
      int? deleteDays,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSystemSettingsEmailSettingsEmailSettings(
        emailSettingsId: emailSettingsId ?? this.emailSettingsId,
        host: host ?? this.host,
        port: port ?? this.port,
        enableSsl: enableSsl ?? this.enableSsl,
        accountPassword: accountPassword ?? this.accountPassword,
        accountUsername: accountUsername ?? this.accountUsername,
        authenticationType: authenticationType ?? this.authenticationType,
        deleteDays: deleteDays ?? this.deleteDays,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings {
  WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings({
    this.inventorySettingsId,
    this.inventorySettingsName,
    this.iCodeMask,
    this.userAssignedICodes,
    this.lastICode,
    this.iCodePrefix,
    this.enable3WeekPricing,
    this.enableTieredWeekPricing,
    this.salesCheckOutRetiredReasonId,
    this.salesCheckOutRetiredReason,
    this.salesCheckInUnretiredReasonId,
    this.salesCheckInUnretiredReason,
    this.defaultRentalSaleRetiredReasonId,
    this.defaultRentalSaleRetiredReason,
    this.defaultLossAndDamageRetiredReasonId,
    this.defaultLossAndDamageRetiredReason,
    this.startDepreciatingFixedAssetsTheMonthAfterTheyAreReceived,
    this.depreciateFixedAssetsWhenRetired,
    this.includeTaxInOriginalEquipmentCost,
    this.defaultRentalQuantityInventoryCostCalculation,
    this.defaultSalesQuantityInventoryCostCalculation,
    this.defaultPartsQuantityInventoryCostCalculation,
    this.enableConsignment,
    this.enableLease,
    this.autoUpdateInventoryMetricImperialDimensions,
    this.fixedAssetTransferFutureDepreciation,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsFromJson(
          json);

  @JsonKey(name: 'InventorySettingsId', includeIfNull: false)
  final String? inventorySettingsId;
  @JsonKey(name: 'InventorySettingsName', includeIfNull: false)
  final String? inventorySettingsName;
  @JsonKey(name: 'ICodeMask', includeIfNull: false)
  final String? iCodeMask;
  @JsonKey(name: 'UserAssignedICodes', includeIfNull: false)
  final bool? userAssignedICodes;
  @JsonKey(name: 'LastICode', includeIfNull: false)
  final int? lastICode;
  @JsonKey(name: 'ICodePrefix', includeIfNull: false)
  final String? iCodePrefix;
  @JsonKey(name: 'Enable3WeekPricing', includeIfNull: false)
  final bool? enable3WeekPricing;
  @JsonKey(name: 'EnableTieredWeekPricing', includeIfNull: false)
  final bool? enableTieredWeekPricing;
  @JsonKey(name: 'SalesCheckOutRetiredReasonId', includeIfNull: false)
  final String? salesCheckOutRetiredReasonId;
  @JsonKey(name: 'SalesCheckOutRetiredReason', includeIfNull: false)
  final String? salesCheckOutRetiredReason;
  @JsonKey(name: 'SalesCheckInUnretiredReasonId', includeIfNull: false)
  final String? salesCheckInUnretiredReasonId;
  @JsonKey(name: 'SalesCheckInUnretiredReason', includeIfNull: false)
  final String? salesCheckInUnretiredReason;
  @JsonKey(name: 'DefaultRentalSaleRetiredReasonId', includeIfNull: false)
  final String? defaultRentalSaleRetiredReasonId;
  @JsonKey(name: 'DefaultRentalSaleRetiredReason', includeIfNull: false)
  final String? defaultRentalSaleRetiredReason;
  @JsonKey(name: 'DefaultLossAndDamageRetiredReasonId', includeIfNull: false)
  final String? defaultLossAndDamageRetiredReasonId;
  @JsonKey(name: 'DefaultLossAndDamageRetiredReason', includeIfNull: false)
  final String? defaultLossAndDamageRetiredReason;
  @JsonKey(
      name: 'StartDepreciatingFixedAssetsTheMonthAfterTheyAreReceived',
      includeIfNull: false)
  final bool? startDepreciatingFixedAssetsTheMonthAfterTheyAreReceived;
  @JsonKey(name: 'DepreciateFixedAssetsWhenRetired', includeIfNull: false)
  final bool? depreciateFixedAssetsWhenRetired;
  @JsonKey(name: 'IncludeTaxInOriginalEquipmentCost', includeIfNull: false)
  final bool? includeTaxInOriginalEquipmentCost;
  @JsonKey(
      name: 'DefaultRentalQuantityInventoryCostCalculation',
      includeIfNull: false)
  final String? defaultRentalQuantityInventoryCostCalculation;
  @JsonKey(
      name: 'DefaultSalesQuantityInventoryCostCalculation',
      includeIfNull: false)
  final String? defaultSalesQuantityInventoryCostCalculation;
  @JsonKey(
      name: 'DefaultPartsQuantityInventoryCostCalculation',
      includeIfNull: false)
  final String? defaultPartsQuantityInventoryCostCalculation;
  @JsonKey(name: 'EnableConsignment', includeIfNull: false)
  final bool? enableConsignment;
  @JsonKey(name: 'EnableLease', includeIfNull: false)
  final bool? enableLease;
  @JsonKey(
      name: 'AutoUpdateInventoryMetricImperialDimensions', includeIfNull: false)
  final bool? autoUpdateInventoryMetricImperialDimensions;
  @JsonKey(name: 'FixedAssetTransferFutureDepreciation', includeIfNull: false)
  final bool? fixedAssetTransferFutureDepreciation;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings &&
            (identical(other.inventorySettingsId, inventorySettingsId) ||
                const DeepCollectionEquality()
                    .equals(other.inventorySettingsId, inventorySettingsId)) &&
            (identical(other.inventorySettingsName, inventorySettingsName) ||
                const DeepCollectionEquality().equals(
                    other.inventorySettingsName, inventorySettingsName)) &&
            (identical(other.iCodeMask, iCodeMask) ||
                const DeepCollectionEquality()
                    .equals(other.iCodeMask, iCodeMask)) &&
            (identical(other.userAssignedICodes, userAssignedICodes) ||
                const DeepCollectionEquality()
                    .equals(other.userAssignedICodes, userAssignedICodes)) &&
            (identical(other.lastICode, lastICode) ||
                const DeepCollectionEquality()
                    .equals(other.lastICode, lastICode)) &&
            (identical(other.iCodePrefix, iCodePrefix) ||
                const DeepCollectionEquality()
                    .equals(other.iCodePrefix, iCodePrefix)) &&
            (identical(other.enable3WeekPricing, enable3WeekPricing) ||
                const DeepCollectionEquality()
                    .equals(other.enable3WeekPricing, enable3WeekPricing)) &&
            (identical(other.enableTieredWeekPricing, enableTieredWeekPricing) ||
                const DeepCollectionEquality().equals(
                    other.enableTieredWeekPricing, enableTieredWeekPricing)) &&
            (identical(other.salesCheckOutRetiredReasonId, salesCheckOutRetiredReasonId) ||
                const DeepCollectionEquality().equals(
                    other.salesCheckOutRetiredReasonId,
                    salesCheckOutRetiredReasonId)) &&
            (identical(other.salesCheckOutRetiredReason, salesCheckOutRetiredReason) ||
                const DeepCollectionEquality().equals(
                    other.salesCheckOutRetiredReason,
                    salesCheckOutRetiredReason)) &&
            (identical(other.salesCheckInUnretiredReasonId, salesCheckInUnretiredReasonId) ||
                const DeepCollectionEquality().equals(
                    other.salesCheckInUnretiredReasonId,
                    salesCheckInUnretiredReasonId)) &&
            (identical(other.salesCheckInUnretiredReason, salesCheckInUnretiredReason) ||
                const DeepCollectionEquality()
                    .equals(other.salesCheckInUnretiredReason, salesCheckInUnretiredReason)) &&
            (identical(other.defaultRentalSaleRetiredReasonId, defaultRentalSaleRetiredReasonId) || const DeepCollectionEquality().equals(other.defaultRentalSaleRetiredReasonId, defaultRentalSaleRetiredReasonId)) &&
            (identical(other.defaultRentalSaleRetiredReason, defaultRentalSaleRetiredReason) || const DeepCollectionEquality().equals(other.defaultRentalSaleRetiredReason, defaultRentalSaleRetiredReason)) &&
            (identical(other.defaultLossAndDamageRetiredReasonId, defaultLossAndDamageRetiredReasonId) || const DeepCollectionEquality().equals(other.defaultLossAndDamageRetiredReasonId, defaultLossAndDamageRetiredReasonId)) &&
            (identical(other.defaultLossAndDamageRetiredReason, defaultLossAndDamageRetiredReason) || const DeepCollectionEquality().equals(other.defaultLossAndDamageRetiredReason, defaultLossAndDamageRetiredReason)) &&
            (identical(other.startDepreciatingFixedAssetsTheMonthAfterTheyAreReceived, startDepreciatingFixedAssetsTheMonthAfterTheyAreReceived) || const DeepCollectionEquality().equals(other.startDepreciatingFixedAssetsTheMonthAfterTheyAreReceived, startDepreciatingFixedAssetsTheMonthAfterTheyAreReceived)) &&
            (identical(other.depreciateFixedAssetsWhenRetired, depreciateFixedAssetsWhenRetired) || const DeepCollectionEquality().equals(other.depreciateFixedAssetsWhenRetired, depreciateFixedAssetsWhenRetired)) &&
            (identical(other.includeTaxInOriginalEquipmentCost, includeTaxInOriginalEquipmentCost) || const DeepCollectionEquality().equals(other.includeTaxInOriginalEquipmentCost, includeTaxInOriginalEquipmentCost)) &&
            (identical(other.defaultRentalQuantityInventoryCostCalculation, defaultRentalQuantityInventoryCostCalculation) || const DeepCollectionEquality().equals(other.defaultRentalQuantityInventoryCostCalculation, defaultRentalQuantityInventoryCostCalculation)) &&
            (identical(other.defaultSalesQuantityInventoryCostCalculation, defaultSalesQuantityInventoryCostCalculation) || const DeepCollectionEquality().equals(other.defaultSalesQuantityInventoryCostCalculation, defaultSalesQuantityInventoryCostCalculation)) &&
            (identical(other.defaultPartsQuantityInventoryCostCalculation, defaultPartsQuantityInventoryCostCalculation) || const DeepCollectionEquality().equals(other.defaultPartsQuantityInventoryCostCalculation, defaultPartsQuantityInventoryCostCalculation)) &&
            (identical(other.enableConsignment, enableConsignment) || const DeepCollectionEquality().equals(other.enableConsignment, enableConsignment)) &&
            (identical(other.enableLease, enableLease) || const DeepCollectionEquality().equals(other.enableLease, enableLease)) &&
            (identical(other.autoUpdateInventoryMetricImperialDimensions, autoUpdateInventoryMetricImperialDimensions) || const DeepCollectionEquality().equals(other.autoUpdateInventoryMetricImperialDimensions, autoUpdateInventoryMetricImperialDimensions)) &&
            (identical(other.fixedAssetTransferFutureDepreciation, fixedAssetTransferFutureDepreciation) || const DeepCollectionEquality().equals(other.fixedAssetTransferFutureDepreciation, fixedAssetTransferFutureDepreciation)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettingsExtension
    on WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings {
  WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings
      copyWith(
          {String? inventorySettingsId,
          String? inventorySettingsName,
          String? iCodeMask,
          bool? userAssignedICodes,
          int? lastICode,
          String? iCodePrefix,
          bool? enable3WeekPricing,
          bool? enableTieredWeekPricing,
          String? salesCheckOutRetiredReasonId,
          String? salesCheckOutRetiredReason,
          String? salesCheckInUnretiredReasonId,
          String? salesCheckInUnretiredReason,
          String? defaultRentalSaleRetiredReasonId,
          String? defaultRentalSaleRetiredReason,
          String? defaultLossAndDamageRetiredReasonId,
          String? defaultLossAndDamageRetiredReason,
          bool? startDepreciatingFixedAssetsTheMonthAfterTheyAreReceived,
          bool? depreciateFixedAssetsWhenRetired,
          bool? includeTaxInOriginalEquipmentCost,
          String? defaultRentalQuantityInventoryCostCalculation,
          String? defaultSalesQuantityInventoryCostCalculation,
          String? defaultPartsQuantityInventoryCostCalculation,
          bool? enableConsignment,
          bool? enableLease,
          bool? autoUpdateInventoryMetricImperialDimensions,
          bool? fixedAssetTransferFutureDepreciation,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSystemSettingsInventorySettingsInventorySettings(
        inventorySettingsId: inventorySettingsId ?? this.inventorySettingsId,
        inventorySettingsName:
            inventorySettingsName ?? this.inventorySettingsName,
        iCodeMask: iCodeMask ?? this.iCodeMask,
        userAssignedICodes: userAssignedICodes ?? this.userAssignedICodes,
        lastICode: lastICode ?? this.lastICode,
        iCodePrefix: iCodePrefix ?? this.iCodePrefix,
        enable3WeekPricing: enable3WeekPricing ?? this.enable3WeekPricing,
        enableTieredWeekPricing:
            enableTieredWeekPricing ?? this.enableTieredWeekPricing,
        salesCheckOutRetiredReasonId:
            salesCheckOutRetiredReasonId ?? this.salesCheckOutRetiredReasonId,
        salesCheckOutRetiredReason:
            salesCheckOutRetiredReason ?? this.salesCheckOutRetiredReason,
        salesCheckInUnretiredReasonId:
            salesCheckInUnretiredReasonId ?? this.salesCheckInUnretiredReasonId,
        salesCheckInUnretiredReason:
            salesCheckInUnretiredReason ?? this.salesCheckInUnretiredReason,
        defaultRentalSaleRetiredReasonId: defaultRentalSaleRetiredReasonId ??
            this.defaultRentalSaleRetiredReasonId,
        defaultRentalSaleRetiredReason: defaultRentalSaleRetiredReason ??
            this.defaultRentalSaleRetiredReason,
        defaultLossAndDamageRetiredReasonId:
            defaultLossAndDamageRetiredReasonId ??
                this.defaultLossAndDamageRetiredReasonId,
        defaultLossAndDamageRetiredReason: defaultLossAndDamageRetiredReason ??
            this.defaultLossAndDamageRetiredReason,
        startDepreciatingFixedAssetsTheMonthAfterTheyAreReceived:
            startDepreciatingFixedAssetsTheMonthAfterTheyAreReceived ??
                this.startDepreciatingFixedAssetsTheMonthAfterTheyAreReceived,
        depreciateFixedAssetsWhenRetired: depreciateFixedAssetsWhenRetired ??
            this.depreciateFixedAssetsWhenRetired,
        includeTaxInOriginalEquipmentCost: includeTaxInOriginalEquipmentCost ??
            this.includeTaxInOriginalEquipmentCost,
        defaultRentalQuantityInventoryCostCalculation:
            defaultRentalQuantityInventoryCostCalculation ??
                this.defaultRentalQuantityInventoryCostCalculation,
        defaultSalesQuantityInventoryCostCalculation:
            defaultSalesQuantityInventoryCostCalculation ??
                this.defaultSalesQuantityInventoryCostCalculation,
        defaultPartsQuantityInventoryCostCalculation:
            defaultPartsQuantityInventoryCostCalculation ??
                this.defaultPartsQuantityInventoryCostCalculation,
        enableConsignment: enableConsignment ?? this.enableConsignment,
        enableLease: enableLease ?? this.enableLease,
        autoUpdateInventoryMetricImperialDimensions:
            autoUpdateInventoryMetricImperialDimensions ??
                this.autoUpdateInventoryMetricImperialDimensions,
        fixedAssetTransferFutureDepreciation:
            fixedAssetTransferFutureDepreciation ??
                this.fixedAssetTransferFutureDepreciation,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings {
  WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings({
    this.logoSettingsId,
    this.logoSettingsName,
    this.logoImageId,
    this.logoImage,
    this.logoImageHeight,
    this.logoImageWidth,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsFromJson(
          json);

  @JsonKey(name: 'LogoSettingsId', includeIfNull: false)
  final String? logoSettingsId;
  @JsonKey(name: 'LogoSettingsName', includeIfNull: false)
  final String? logoSettingsName;
  @JsonKey(name: 'LogoImageId', includeIfNull: false)
  final String? logoImageId;
  @JsonKey(name: 'LogoImage', includeIfNull: false)
  final String? logoImage;
  @JsonKey(name: 'LogoImageHeight', includeIfNull: false)
  final int? logoImageHeight;
  @JsonKey(name: 'LogoImageWidth', includeIfNull: false)
  final int? logoImageWidth;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings &&
            (identical(other.logoSettingsId, logoSettingsId) ||
                const DeepCollectionEquality()
                    .equals(other.logoSettingsId, logoSettingsId)) &&
            (identical(other.logoSettingsName, logoSettingsName) ||
                const DeepCollectionEquality()
                    .equals(other.logoSettingsName, logoSettingsName)) &&
            (identical(other.logoImageId, logoImageId) ||
                const DeepCollectionEquality()
                    .equals(other.logoImageId, logoImageId)) &&
            (identical(other.logoImage, logoImage) ||
                const DeepCollectionEquality()
                    .equals(other.logoImage, logoImage)) &&
            (identical(other.logoImageHeight, logoImageHeight) ||
                const DeepCollectionEquality()
                    .equals(other.logoImageHeight, logoImageHeight)) &&
            (identical(other.logoImageWidth, logoImageWidth) ||
                const DeepCollectionEquality()
                    .equals(other.logoImageWidth, logoImageWidth)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettingsExtension
    on WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings {
  WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings copyWith(
      {String? logoSettingsId,
      String? logoSettingsName,
      String? logoImageId,
      String? logoImage,
      int? logoImageHeight,
      int? logoImageWidth,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSystemSettingsLogoSettingsLogoSettings(
        logoSettingsId: logoSettingsId ?? this.logoSettingsId,
        logoSettingsName: logoSettingsName ?? this.logoSettingsName,
        logoImageId: logoImageId ?? this.logoImageId,
        logoImage: logoImage ?? this.logoImage,
        logoImageHeight: logoImageHeight ?? this.logoImageHeight,
        logoImageWidth: logoImageWidth ?? this.logoImageWidth,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings {
  WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings({
    this.systemSettingsId,
    this.systemSettingsName,
    this.companyName,
    this.systemName,
    this.databaseVersion,
    this.shareDealsAcrossOfficeLocations,
    this.isVendorNumberAssignedByUser,
    this.lastVendorNumber,
    this.allowDeleteExportedReceipts,
    this.enableReceipts,
    this.enableBetaUpdates,
    this.enableQaUpdates,
    this.enablePayments,
    this.allowDeleteExportedPayments,
    this.allowDeleteInvoices,
    this.allowInvoiceDateChange,
    this.ordersCompleteWithItemsNotYetStaged,
    this.populateInventoryUtilizationDataWeekly,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsFromJson(
          json);

  @JsonKey(name: 'SystemSettingsId', includeIfNull: false)
  final String? systemSettingsId;
  @JsonKey(name: 'SystemSettingsName', includeIfNull: false)
  final String? systemSettingsName;
  @JsonKey(name: 'CompanyName', includeIfNull: false)
  final String? companyName;
  @JsonKey(name: 'SystemName', includeIfNull: false)
  final String? systemName;
  @JsonKey(name: 'DatabaseVersion', includeIfNull: false)
  final String? databaseVersion;
  @JsonKey(name: 'ShareDealsAcrossOfficeLocations', includeIfNull: false)
  final bool? shareDealsAcrossOfficeLocations;
  @JsonKey(name: 'IsVendorNumberAssignedByUser', includeIfNull: false)
  final bool? isVendorNumberAssignedByUser;
  @JsonKey(name: 'LastVendorNumber', includeIfNull: false)
  final int? lastVendorNumber;
  @JsonKey(name: 'AllowDeleteExportedReceipts', includeIfNull: false)
  final bool? allowDeleteExportedReceipts;
  @JsonKey(name: 'EnableReceipts', includeIfNull: false)
  final bool? enableReceipts;
  @JsonKey(name: 'EnableBetaUpdates', includeIfNull: false)
  final bool? enableBetaUpdates;
  @JsonKey(name: 'EnableQaUpdates', includeIfNull: false)
  final bool? enableQaUpdates;
  @JsonKey(name: 'EnablePayments', includeIfNull: false)
  final bool? enablePayments;
  @JsonKey(name: 'AllowDeleteExportedPayments', includeIfNull: false)
  final bool? allowDeleteExportedPayments;
  @JsonKey(name: 'AllowDeleteInvoices', includeIfNull: false)
  final bool? allowDeleteInvoices;
  @JsonKey(name: 'AllowInvoiceDateChange', includeIfNull: false)
  final bool? allowInvoiceDateChange;
  @JsonKey(name: 'OrdersCompleteWithItemsNotYetStaged', includeIfNull: false)
  final bool? ordersCompleteWithItemsNotYetStaged;
  @JsonKey(name: 'PopulateInventoryUtilizationDataWeekly', includeIfNull: false)
  final bool? populateInventoryUtilizationDataWeekly;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings &&
            (identical(other.systemSettingsId, systemSettingsId) ||
                const DeepCollectionEquality()
                    .equals(other.systemSettingsId, systemSettingsId)) &&
            (identical(other.systemSettingsName, systemSettingsName) ||
                const DeepCollectionEquality()
                    .equals(other.systemSettingsName, systemSettingsName)) &&
            (identical(other.companyName, companyName) ||
                const DeepCollectionEquality()
                    .equals(other.companyName, companyName)) &&
            (identical(other.systemName, systemName) ||
                const DeepCollectionEquality()
                    .equals(other.systemName, systemName)) &&
            (identical(other.databaseVersion, databaseVersion) ||
                const DeepCollectionEquality()
                    .equals(other.databaseVersion, databaseVersion)) &&
            (identical(other.shareDealsAcrossOfficeLocations, shareDealsAcrossOfficeLocations) ||
                const DeepCollectionEquality().equals(
                    other.shareDealsAcrossOfficeLocations,
                    shareDealsAcrossOfficeLocations)) &&
            (identical(other.isVendorNumberAssignedByUser, isVendorNumberAssignedByUser) ||
                const DeepCollectionEquality().equals(
                    other.isVendorNumberAssignedByUser,
                    isVendorNumberAssignedByUser)) &&
            (identical(other.lastVendorNumber, lastVendorNumber) ||
                const DeepCollectionEquality()
                    .equals(other.lastVendorNumber, lastVendorNumber)) &&
            (identical(other.allowDeleteExportedReceipts, allowDeleteExportedReceipts) ||
                const DeepCollectionEquality().equals(
                    other.allowDeleteExportedReceipts,
                    allowDeleteExportedReceipts)) &&
            (identical(other.enableReceipts, enableReceipts) ||
                const DeepCollectionEquality()
                    .equals(other.enableReceipts, enableReceipts)) &&
            (identical(other.enableBetaUpdates, enableBetaUpdates) ||
                const DeepCollectionEquality()
                    .equals(other.enableBetaUpdates, enableBetaUpdates)) &&
            (identical(other.enableQaUpdates, enableQaUpdates) ||
                const DeepCollectionEquality().equals(other.enableQaUpdates, enableQaUpdates)) &&
            (identical(other.enablePayments, enablePayments) || const DeepCollectionEquality().equals(other.enablePayments, enablePayments)) &&
            (identical(other.allowDeleteExportedPayments, allowDeleteExportedPayments) || const DeepCollectionEquality().equals(other.allowDeleteExportedPayments, allowDeleteExportedPayments)) &&
            (identical(other.allowDeleteInvoices, allowDeleteInvoices) || const DeepCollectionEquality().equals(other.allowDeleteInvoices, allowDeleteInvoices)) &&
            (identical(other.allowInvoiceDateChange, allowInvoiceDateChange) || const DeepCollectionEquality().equals(other.allowInvoiceDateChange, allowInvoiceDateChange)) &&
            (identical(other.ordersCompleteWithItemsNotYetStaged, ordersCompleteWithItemsNotYetStaged) || const DeepCollectionEquality().equals(other.ordersCompleteWithItemsNotYetStaged, ordersCompleteWithItemsNotYetStaged)) &&
            (identical(other.populateInventoryUtilizationDataWeekly, populateInventoryUtilizationDataWeekly) || const DeepCollectionEquality().equals(other.populateInventoryUtilizationDataWeekly, populateInventoryUtilizationDataWeekly)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettingsExtension
    on WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings {
  WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings copyWith(
      {String? systemSettingsId,
      String? systemSettingsName,
      String? companyName,
      String? systemName,
      String? databaseVersion,
      bool? shareDealsAcrossOfficeLocations,
      bool? isVendorNumberAssignedByUser,
      int? lastVendorNumber,
      bool? allowDeleteExportedReceipts,
      bool? enableReceipts,
      bool? enableBetaUpdates,
      bool? enableQaUpdates,
      bool? enablePayments,
      bool? allowDeleteExportedPayments,
      bool? allowDeleteInvoices,
      bool? allowInvoiceDateChange,
      bool? ordersCompleteWithItemsNotYetStaged,
      bool? populateInventoryUtilizationDataWeekly,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsSystemSettingsSystemSettingsSystemSettings(
        systemSettingsId: systemSettingsId ?? this.systemSettingsId,
        systemSettingsName: systemSettingsName ?? this.systemSettingsName,
        companyName: companyName ?? this.companyName,
        systemName: systemName ?? this.systemName,
        databaseVersion: databaseVersion ?? this.databaseVersion,
        shareDealsAcrossOfficeLocations: shareDealsAcrossOfficeLocations ??
            this.shareDealsAcrossOfficeLocations,
        isVendorNumberAssignedByUser:
            isVendorNumberAssignedByUser ?? this.isVendorNumberAssignedByUser,
        lastVendorNumber: lastVendorNumber ?? this.lastVendorNumber,
        allowDeleteExportedReceipts:
            allowDeleteExportedReceipts ?? this.allowDeleteExportedReceipts,
        enableReceipts: enableReceipts ?? this.enableReceipts,
        enableBetaUpdates: enableBetaUpdates ?? this.enableBetaUpdates,
        enableQaUpdates: enableQaUpdates ?? this.enableQaUpdates,
        enablePayments: enablePayments ?? this.enablePayments,
        allowDeleteExportedPayments:
            allowDeleteExportedPayments ?? this.allowDeleteExportedPayments,
        allowDeleteInvoices: allowDeleteInvoices ?? this.allowDeleteInvoices,
        allowInvoiceDateChange:
            allowInvoiceDateChange ?? this.allowInvoiceDateChange,
        ordersCompleteWithItemsNotYetStaged:
            ordersCompleteWithItemsNotYetStaged ??
                this.ordersCompleteWithItemsNotYetStaged,
        populateInventoryUtilizationDataWeekly:
            populateInventoryUtilizationDataWeekly ??
                this.populateInventoryUtilizationDataWeekly,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsTaxSettingsTaxOptionTaxOption {
  WebApiModulesSettingsTaxSettingsTaxOptionTaxOption({
    this.taxOptionId,
    this.taxOption,
    this.availableForSales,
    this.availableForPurchases,
    this.taxCountryId,
    this.taxCountry,
    this.taxRule,
    this.rentalTaxRate1,
    this.rentalTaxRate2,
    this.rentalExempt,
    this.rentalTaxDisplay,
    this.salesTaxRate1,
    this.salesTaxRate2,
    this.salesExempt,
    this.salesTaxDisplay,
    this.laborTaxRate1,
    this.laborTaxRate2,
    this.laborExempt,
    this.laborTaxDisplay,
    this.taxOnTax,
    this.taxOnTaxAccountId,
    this.taxOnTaxAccountNo,
    this.taxOnTaxAccountDescription,
    this.taxAccountId1,
    this.taxAccountNo1,
    this.taxAccountDescription1,
    this.taxAccountId2,
    this.taxAccountNo2,
    this.taxAccountDescription2,
    this.quickBooksTaxItemCode,
    this.quickBooksTaxItemDescription,
    this.quickBooksTaxVendor,
    this.quickBooksTaxGroup,
    this.gstExportCode,
    this.pstExportCode,
    this.tax1Name,
    this.tax1Description,
    this.tax2Name,
    this.tax2Description,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsTaxSettingsTaxOptionTaxOption.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsTaxSettingsTaxOptionTaxOptionFromJson(json);

  @JsonKey(name: 'TaxOptionId', includeIfNull: false)
  final String? taxOptionId;
  @JsonKey(name: 'TaxOption', includeIfNull: false)
  final String? taxOption;
  @JsonKey(name: 'AvailableForSales', includeIfNull: false)
  final bool? availableForSales;
  @JsonKey(name: 'AvailableForPurchases', includeIfNull: false)
  final bool? availableForPurchases;
  @JsonKey(name: 'TaxCountryId', includeIfNull: false)
  final String? taxCountryId;
  @JsonKey(name: 'TaxCountry', includeIfNull: false)
  final String? taxCountry;
  @JsonKey(name: 'TaxRule', includeIfNull: false)
  final String? taxRule;
  @JsonKey(name: 'RentalTaxRate1', includeIfNull: false)
  final double? rentalTaxRate1;
  @JsonKey(name: 'RentalTaxRate2', includeIfNull: false)
  final double? rentalTaxRate2;
  @JsonKey(name: 'RentalExempt', includeIfNull: false)
  final bool? rentalExempt;
  @JsonKey(name: 'RentalTaxDisplay', includeIfNull: false)
  final String? rentalTaxDisplay;
  @JsonKey(name: 'SalesTaxRate1', includeIfNull: false)
  final double? salesTaxRate1;
  @JsonKey(name: 'SalesTaxRate2', includeIfNull: false)
  final double? salesTaxRate2;
  @JsonKey(name: 'SalesExempt', includeIfNull: false)
  final bool? salesExempt;
  @JsonKey(name: 'SalesTaxDisplay', includeIfNull: false)
  final String? salesTaxDisplay;
  @JsonKey(name: 'LaborTaxRate1', includeIfNull: false)
  final double? laborTaxRate1;
  @JsonKey(name: 'LaborTaxRate2', includeIfNull: false)
  final double? laborTaxRate2;
  @JsonKey(name: 'LaborExempt', includeIfNull: false)
  final bool? laborExempt;
  @JsonKey(name: 'LaborTaxDisplay', includeIfNull: false)
  final String? laborTaxDisplay;
  @JsonKey(name: 'TaxOnTax', includeIfNull: false)
  final bool? taxOnTax;
  @JsonKey(name: 'TaxOnTaxAccountId', includeIfNull: false)
  final String? taxOnTaxAccountId;
  @JsonKey(name: 'TaxOnTaxAccountNo', includeIfNull: false)
  final String? taxOnTaxAccountNo;
  @JsonKey(name: 'TaxOnTaxAccountDescription', includeIfNull: false)
  final String? taxOnTaxAccountDescription;
  @JsonKey(name: 'TaxAccountId1', includeIfNull: false)
  final String? taxAccountId1;
  @JsonKey(name: 'TaxAccountNo1', includeIfNull: false)
  final String? taxAccountNo1;
  @JsonKey(name: 'TaxAccountDescription1', includeIfNull: false)
  final String? taxAccountDescription1;
  @JsonKey(name: 'TaxAccountId2', includeIfNull: false)
  final String? taxAccountId2;
  @JsonKey(name: 'TaxAccountNo2', includeIfNull: false)
  final String? taxAccountNo2;
  @JsonKey(name: 'TaxAccountDescription2', includeIfNull: false)
  final String? taxAccountDescription2;
  @JsonKey(name: 'QuickBooksTaxItemCode', includeIfNull: false)
  final String? quickBooksTaxItemCode;
  @JsonKey(name: 'QuickBooksTaxItemDescription', includeIfNull: false)
  final String? quickBooksTaxItemDescription;
  @JsonKey(name: 'QuickBooksTaxVendor', includeIfNull: false)
  final String? quickBooksTaxVendor;
  @JsonKey(name: 'QuickBooksTaxGroup', includeIfNull: false)
  final bool? quickBooksTaxGroup;
  @JsonKey(name: 'GstExportCode', includeIfNull: false)
  final String? gstExportCode;
  @JsonKey(name: 'PstExportCode', includeIfNull: false)
  final String? pstExportCode;
  @JsonKey(name: 'Tax1Name', includeIfNull: false)
  final String? tax1Name;
  @JsonKey(name: 'Tax1Description', includeIfNull: false)
  final String? tax1Description;
  @JsonKey(name: 'Tax2Name', includeIfNull: false)
  final String? tax2Name;
  @JsonKey(name: 'Tax2Description', includeIfNull: false)
  final String? tax2Description;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsTaxSettingsTaxOptionTaxOptionFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsTaxSettingsTaxOptionTaxOptionToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsTaxSettingsTaxOptionTaxOptionToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsTaxSettingsTaxOptionTaxOption &&
            (identical(other.taxOptionId, taxOptionId) ||
                const DeepCollectionEquality()
                    .equals(other.taxOptionId, taxOptionId)) &&
            (identical(other.taxOption, taxOption) ||
                const DeepCollectionEquality()
                    .equals(other.taxOption, taxOption)) &&
            (identical(other.availableForSales, availableForSales) ||
                const DeepCollectionEquality()
                    .equals(other.availableForSales, availableForSales)) &&
            (identical(other.availableForPurchases, availableForPurchases) ||
                const DeepCollectionEquality().equals(
                    other.availableForPurchases, availableForPurchases)) &&
            (identical(other.taxCountryId, taxCountryId) ||
                const DeepCollectionEquality()
                    .equals(other.taxCountryId, taxCountryId)) &&
            (identical(other.taxCountry, taxCountry) ||
                const DeepCollectionEquality()
                    .equals(other.taxCountry, taxCountry)) &&
            (identical(other.taxRule, taxRule) ||
                const DeepCollectionEquality()
                    .equals(other.taxRule, taxRule)) &&
            (identical(other.rentalTaxRate1, rentalTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.rentalTaxRate1, rentalTaxRate1)) &&
            (identical(other.rentalTaxRate2, rentalTaxRate2) ||
                const DeepCollectionEquality()
                    .equals(other.rentalTaxRate2, rentalTaxRate2)) &&
            (identical(other.rentalExempt, rentalExempt) ||
                const DeepCollectionEquality()
                    .equals(other.rentalExempt, rentalExempt)) &&
            (identical(other.rentalTaxDisplay, rentalTaxDisplay) ||
                const DeepCollectionEquality()
                    .equals(other.rentalTaxDisplay, rentalTaxDisplay)) &&
            (identical(other.salesTaxRate1, salesTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.salesTaxRate1, salesTaxRate1)) &&
            (identical(other.salesTaxRate2, salesTaxRate2) ||
                const DeepCollectionEquality()
                    .equals(other.salesTaxRate2, salesTaxRate2)) &&
            (identical(other.salesExempt, salesExempt) ||
                const DeepCollectionEquality()
                    .equals(other.salesExempt, salesExempt)) &&
            (identical(other.salesTaxDisplay, salesTaxDisplay) ||
                const DeepCollectionEquality()
                    .equals(other.salesTaxDisplay, salesTaxDisplay)) &&
            (identical(other.laborTaxRate1, laborTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.laborTaxRate1, laborTaxRate1)) &&
            (identical(other.laborTaxRate2, laborTaxRate2) ||
                const DeepCollectionEquality()
                    .equals(other.laborTaxRate2, laborTaxRate2)) &&
            (identical(other.laborExempt, laborExempt) ||
                const DeepCollectionEquality()
                    .equals(other.laborExempt, laborExempt)) &&
            (identical(other.laborTaxDisplay, laborTaxDisplay) ||
                const DeepCollectionEquality()
                    .equals(other.laborTaxDisplay, laborTaxDisplay)) &&
            (identical(other.taxOnTax, taxOnTax) ||
                const DeepCollectionEquality()
                    .equals(other.taxOnTax, taxOnTax)) &&
            (identical(other.taxOnTaxAccountId, taxOnTaxAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.taxOnTaxAccountId, taxOnTaxAccountId)) &&
            (identical(other.taxOnTaxAccountNo, taxOnTaxAccountNo) ||
                const DeepCollectionEquality().equals(other.taxOnTaxAccountNo, taxOnTaxAccountNo)) &&
            (identical(other.taxOnTaxAccountDescription, taxOnTaxAccountDescription) || const DeepCollectionEquality().equals(other.taxOnTaxAccountDescription, taxOnTaxAccountDescription)) &&
            (identical(other.taxAccountId1, taxAccountId1) || const DeepCollectionEquality().equals(other.taxAccountId1, taxAccountId1)) &&
            (identical(other.taxAccountNo1, taxAccountNo1) || const DeepCollectionEquality().equals(other.taxAccountNo1, taxAccountNo1)) &&
            (identical(other.taxAccountDescription1, taxAccountDescription1) || const DeepCollectionEquality().equals(other.taxAccountDescription1, taxAccountDescription1)) &&
            (identical(other.taxAccountId2, taxAccountId2) || const DeepCollectionEquality().equals(other.taxAccountId2, taxAccountId2)) &&
            (identical(other.taxAccountNo2, taxAccountNo2) || const DeepCollectionEquality().equals(other.taxAccountNo2, taxAccountNo2)) &&
            (identical(other.taxAccountDescription2, taxAccountDescription2) || const DeepCollectionEquality().equals(other.taxAccountDescription2, taxAccountDescription2)) &&
            (identical(other.quickBooksTaxItemCode, quickBooksTaxItemCode) || const DeepCollectionEquality().equals(other.quickBooksTaxItemCode, quickBooksTaxItemCode)) &&
            (identical(other.quickBooksTaxItemDescription, quickBooksTaxItemDescription) || const DeepCollectionEquality().equals(other.quickBooksTaxItemDescription, quickBooksTaxItemDescription)) &&
            (identical(other.quickBooksTaxVendor, quickBooksTaxVendor) || const DeepCollectionEquality().equals(other.quickBooksTaxVendor, quickBooksTaxVendor)) &&
            (identical(other.quickBooksTaxGroup, quickBooksTaxGroup) || const DeepCollectionEquality().equals(other.quickBooksTaxGroup, quickBooksTaxGroup)) &&
            (identical(other.gstExportCode, gstExportCode) || const DeepCollectionEquality().equals(other.gstExportCode, gstExportCode)) &&
            (identical(other.pstExportCode, pstExportCode) || const DeepCollectionEquality().equals(other.pstExportCode, pstExportCode)) &&
            (identical(other.tax1Name, tax1Name) || const DeepCollectionEquality().equals(other.tax1Name, tax1Name)) &&
            (identical(other.tax1Description, tax1Description) || const DeepCollectionEquality().equals(other.tax1Description, tax1Description)) &&
            (identical(other.tax2Name, tax2Name) || const DeepCollectionEquality().equals(other.tax2Name, tax2Name)) &&
            (identical(other.tax2Description, tax2Description) || const DeepCollectionEquality().equals(other.tax2Description, tax2Description)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsTaxSettingsTaxOptionTaxOptionExtension
    on WebApiModulesSettingsTaxSettingsTaxOptionTaxOption {
  WebApiModulesSettingsTaxSettingsTaxOptionTaxOption copyWith(
      {String? taxOptionId,
      String? taxOption,
      bool? availableForSales,
      bool? availableForPurchases,
      String? taxCountryId,
      String? taxCountry,
      String? taxRule,
      double? rentalTaxRate1,
      double? rentalTaxRate2,
      bool? rentalExempt,
      String? rentalTaxDisplay,
      double? salesTaxRate1,
      double? salesTaxRate2,
      bool? salesExempt,
      String? salesTaxDisplay,
      double? laborTaxRate1,
      double? laborTaxRate2,
      bool? laborExempt,
      String? laborTaxDisplay,
      bool? taxOnTax,
      String? taxOnTaxAccountId,
      String? taxOnTaxAccountNo,
      String? taxOnTaxAccountDescription,
      String? taxAccountId1,
      String? taxAccountNo1,
      String? taxAccountDescription1,
      String? taxAccountId2,
      String? taxAccountNo2,
      String? taxAccountDescription2,
      String? quickBooksTaxItemCode,
      String? quickBooksTaxItemDescription,
      String? quickBooksTaxVendor,
      bool? quickBooksTaxGroup,
      String? gstExportCode,
      String? pstExportCode,
      String? tax1Name,
      String? tax1Description,
      String? tax2Name,
      String? tax2Description,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsTaxSettingsTaxOptionTaxOption(
        taxOptionId: taxOptionId ?? this.taxOptionId,
        taxOption: taxOption ?? this.taxOption,
        availableForSales: availableForSales ?? this.availableForSales,
        availableForPurchases:
            availableForPurchases ?? this.availableForPurchases,
        taxCountryId: taxCountryId ?? this.taxCountryId,
        taxCountry: taxCountry ?? this.taxCountry,
        taxRule: taxRule ?? this.taxRule,
        rentalTaxRate1: rentalTaxRate1 ?? this.rentalTaxRate1,
        rentalTaxRate2: rentalTaxRate2 ?? this.rentalTaxRate2,
        rentalExempt: rentalExempt ?? this.rentalExempt,
        rentalTaxDisplay: rentalTaxDisplay ?? this.rentalTaxDisplay,
        salesTaxRate1: salesTaxRate1 ?? this.salesTaxRate1,
        salesTaxRate2: salesTaxRate2 ?? this.salesTaxRate2,
        salesExempt: salesExempt ?? this.salesExempt,
        salesTaxDisplay: salesTaxDisplay ?? this.salesTaxDisplay,
        laborTaxRate1: laborTaxRate1 ?? this.laborTaxRate1,
        laborTaxRate2: laborTaxRate2 ?? this.laborTaxRate2,
        laborExempt: laborExempt ?? this.laborExempt,
        laborTaxDisplay: laborTaxDisplay ?? this.laborTaxDisplay,
        taxOnTax: taxOnTax ?? this.taxOnTax,
        taxOnTaxAccountId: taxOnTaxAccountId ?? this.taxOnTaxAccountId,
        taxOnTaxAccountNo: taxOnTaxAccountNo ?? this.taxOnTaxAccountNo,
        taxOnTaxAccountDescription:
            taxOnTaxAccountDescription ?? this.taxOnTaxAccountDescription,
        taxAccountId1: taxAccountId1 ?? this.taxAccountId1,
        taxAccountNo1: taxAccountNo1 ?? this.taxAccountNo1,
        taxAccountDescription1:
            taxAccountDescription1 ?? this.taxAccountDescription1,
        taxAccountId2: taxAccountId2 ?? this.taxAccountId2,
        taxAccountNo2: taxAccountNo2 ?? this.taxAccountNo2,
        taxAccountDescription2:
            taxAccountDescription2 ?? this.taxAccountDescription2,
        quickBooksTaxItemCode:
            quickBooksTaxItemCode ?? this.quickBooksTaxItemCode,
        quickBooksTaxItemDescription:
            quickBooksTaxItemDescription ?? this.quickBooksTaxItemDescription,
        quickBooksTaxVendor: quickBooksTaxVendor ?? this.quickBooksTaxVendor,
        quickBooksTaxGroup: quickBooksTaxGroup ?? this.quickBooksTaxGroup,
        gstExportCode: gstExportCode ?? this.gstExportCode,
        pstExportCode: pstExportCode ?? this.pstExportCode,
        tax1Name: tax1Name ?? this.tax1Name,
        tax1Description: tax1Description ?? this.tax1Description,
        tax2Name: tax2Name ?? this.tax2Name,
        tax2Description: tax2Description ?? this.tax2Description,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsTemplateSettingsTemplateTemplate {
  WebApiModulesSettingsTemplateSettingsTemplateTemplate({
    this.templateId,
    this.description,
    this.departmentId,
    this.department,
    this.officeLocationId,
    this.officeLocation,
    this.warehouseId,
    this.warehouse,
    this.warehouseCode,
    this.rateType,
    this.rental,
    this.sales,
    this.miscellaneous,
    this.labor,
    this.facilities,
    this.transportation,
    this.lines,
    this.hasRentalItem,
    this.hasSalesItem,
    this.hasMiscellaneousItem,
    this.hasLaborItem,
    this.hasFacilitiesItem,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsTemplateSettingsTemplateTemplate.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsTemplateSettingsTemplateTemplateFromJson(json);

  @JsonKey(name: 'TemplateId', includeIfNull: false)
  final String? templateId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'Department', includeIfNull: false)
  final String? department;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'OfficeLocation', includeIfNull: false)
  final String? officeLocation;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'RateType', includeIfNull: false)
  final String? rateType;
  @JsonKey(name: 'Rental', includeIfNull: false)
  final bool? rental;
  @JsonKey(name: 'Sales', includeIfNull: false)
  final bool? sales;
  @JsonKey(name: 'Miscellaneous', includeIfNull: false)
  final bool? miscellaneous;
  @JsonKey(name: 'Labor', includeIfNull: false)
  final bool? labor;
  @JsonKey(name: 'Facilities', includeIfNull: false)
  final bool? facilities;
  @JsonKey(name: 'Transportation', includeIfNull: false)
  final bool? transportation;
  @JsonKey(name: 'Lines', includeIfNull: false)
  final int? lines;
  @JsonKey(name: 'HasRentalItem', includeIfNull: false)
  final bool? hasRentalItem;
  @JsonKey(name: 'HasSalesItem', includeIfNull: false)
  final bool? hasSalesItem;
  @JsonKey(name: 'HasMiscellaneousItem', includeIfNull: false)
  final bool? hasMiscellaneousItem;
  @JsonKey(name: 'HasLaborItem', includeIfNull: false)
  final bool? hasLaborItem;
  @JsonKey(name: 'HasFacilitiesItem', includeIfNull: false)
  final bool? hasFacilitiesItem;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsTemplateSettingsTemplateTemplateFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsTemplateSettingsTemplateTemplateToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsTemplateSettingsTemplateTemplateToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsTemplateSettingsTemplateTemplate &&
            (identical(other.templateId, templateId) ||
                const DeepCollectionEquality()
                    .equals(other.templateId, templateId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.department, department) ||
                const DeepCollectionEquality()
                    .equals(other.department, department)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.officeLocation, officeLocation) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocation, officeLocation)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.rateType, rateType) ||
                const DeepCollectionEquality()
                    .equals(other.rateType, rateType)) &&
            (identical(other.rental, rental) ||
                const DeepCollectionEquality().equals(other.rental, rental)) &&
            (identical(other.sales, sales) ||
                const DeepCollectionEquality().equals(other.sales, sales)) &&
            (identical(other.miscellaneous, miscellaneous) ||
                const DeepCollectionEquality()
                    .equals(other.miscellaneous, miscellaneous)) &&
            (identical(other.labor, labor) ||
                const DeepCollectionEquality().equals(other.labor, labor)) &&
            (identical(other.facilities, facilities) ||
                const DeepCollectionEquality()
                    .equals(other.facilities, facilities)) &&
            (identical(other.transportation, transportation) ||
                const DeepCollectionEquality()
                    .equals(other.transportation, transportation)) &&
            (identical(other.lines, lines) ||
                const DeepCollectionEquality().equals(other.lines, lines)) &&
            (identical(other.hasRentalItem, hasRentalItem) ||
                const DeepCollectionEquality()
                    .equals(other.hasRentalItem, hasRentalItem)) &&
            (identical(other.hasSalesItem, hasSalesItem) ||
                const DeepCollectionEquality()
                    .equals(other.hasSalesItem, hasSalesItem)) &&
            (identical(other.hasMiscellaneousItem, hasMiscellaneousItem) ||
                const DeepCollectionEquality().equals(
                    other.hasMiscellaneousItem, hasMiscellaneousItem)) &&
            (identical(other.hasLaborItem, hasLaborItem) ||
                const DeepCollectionEquality()
                    .equals(other.hasLaborItem, hasLaborItem)) &&
            (identical(other.hasFacilitiesItem, hasFacilitiesItem) ||
                const DeepCollectionEquality()
                    .equals(other.hasFacilitiesItem, hasFacilitiesItem)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsTemplateSettingsTemplateTemplateExtension
    on WebApiModulesSettingsTemplateSettingsTemplateTemplate {
  WebApiModulesSettingsTemplateSettingsTemplateTemplate copyWith(
      {String? templateId,
      String? description,
      String? departmentId,
      String? department,
      String? officeLocationId,
      String? officeLocation,
      String? warehouseId,
      String? warehouse,
      String? warehouseCode,
      String? rateType,
      bool? rental,
      bool? sales,
      bool? miscellaneous,
      bool? labor,
      bool? facilities,
      bool? transportation,
      int? lines,
      bool? hasRentalItem,
      bool? hasSalesItem,
      bool? hasMiscellaneousItem,
      bool? hasLaborItem,
      bool? hasFacilitiesItem,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsTemplateSettingsTemplateTemplate(
        templateId: templateId ?? this.templateId,
        description: description ?? this.description,
        departmentId: departmentId ?? this.departmentId,
        department: department ?? this.department,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        officeLocation: officeLocation ?? this.officeLocation,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouse: warehouse ?? this.warehouse,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        rateType: rateType ?? this.rateType,
        rental: rental ?? this.rental,
        sales: sales ?? this.sales,
        miscellaneous: miscellaneous ?? this.miscellaneous,
        labor: labor ?? this.labor,
        facilities: facilities ?? this.facilities,
        transportation: transportation ?? this.transportation,
        lines: lines ?? this.lines,
        hasRentalItem: hasRentalItem ?? this.hasRentalItem,
        hasSalesItem: hasSalesItem ?? this.hasSalesItem,
        hasMiscellaneousItem: hasMiscellaneousItem ?? this.hasMiscellaneousItem,
        hasLaborItem: hasLaborItem ?? this.hasLaborItem,
        hasFacilitiesItem: hasFacilitiesItem ?? this.hasFacilitiesItem,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsUserProfileUserProfile {
  WebApiModulesSettingsUserProfileUserProfile({
    this.webUserId,
    this.userName,
    this.userId,
    this.loginName,
    this.browseDefaultRows,
    this.applicationTheme,
    this.homeMenuGuid,
    this.homeMenuPath,
    this.successSoundId,
    this.successSound,
    this.successBase64Sound,
    this.errorSoundId,
    this.errorSound,
    this.errorBase64Sound,
    this.notificationSoundId,
    this.notificationSound,
    this.notificationBase64Sound,
    this.favoritesJson,
    this.firstDayOfWeek,
    this.settingsNavigationMenuVisible,
    this.reportsNavigationMenuVisible,
    this.mainMenuPinned,
    this.webAdministrator,
    this.quikActivitySetting,
    this.emailSignature,
    this.newPassword,
    this.oldPassword,
    this.locale,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsUserProfileUserProfile.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsUserProfileUserProfileFromJson(json);

  @JsonKey(name: 'WebUserId', includeIfNull: false)
  final String? webUserId;
  @JsonKey(name: 'UserName', includeIfNull: false)
  final String? userName;
  @JsonKey(name: 'UserId', includeIfNull: false)
  final String? userId;
  @JsonKey(name: 'LoginName', includeIfNull: false)
  final String? loginName;
  @JsonKey(name: 'BrowseDefaultRows', includeIfNull: false)
  final int? browseDefaultRows;
  @JsonKey(name: 'ApplicationTheme', includeIfNull: false)
  final String? applicationTheme;
  @JsonKey(name: 'HomeMenuGuid', includeIfNull: false)
  final String? homeMenuGuid;
  @JsonKey(name: 'HomeMenuPath', includeIfNull: false)
  final String? homeMenuPath;
  @JsonKey(name: 'SuccessSoundId', includeIfNull: false)
  final String? successSoundId;
  @JsonKey(name: 'SuccessSound', includeIfNull: false)
  final String? successSound;
  @JsonKey(name: 'SuccessBase64Sound', includeIfNull: false)
  final String? successBase64Sound;
  @JsonKey(name: 'ErrorSoundId', includeIfNull: false)
  final String? errorSoundId;
  @JsonKey(name: 'ErrorSound', includeIfNull: false)
  final String? errorSound;
  @JsonKey(name: 'ErrorBase64Sound', includeIfNull: false)
  final String? errorBase64Sound;
  @JsonKey(name: 'NotificationSoundId', includeIfNull: false)
  final String? notificationSoundId;
  @JsonKey(name: 'NotificationSound', includeIfNull: false)
  final String? notificationSound;
  @JsonKey(name: 'NotificationBase64Sound', includeIfNull: false)
  final String? notificationBase64Sound;
  @JsonKey(name: 'FavoritesJson', includeIfNull: false)
  final String? favoritesJson;
  @JsonKey(name: 'FirstDayOfWeek', includeIfNull: false)
  final int? firstDayOfWeek;
  @JsonKey(name: 'SettingsNavigationMenuVisible', includeIfNull: false)
  final bool? settingsNavigationMenuVisible;
  @JsonKey(name: 'ReportsNavigationMenuVisible', includeIfNull: false)
  final bool? reportsNavigationMenuVisible;
  @JsonKey(name: 'MainMenuPinned', includeIfNull: false)
  final bool? mainMenuPinned;
  @JsonKey(name: 'WebAdministrator', includeIfNull: false)
  final bool? webAdministrator;
  @JsonKey(name: 'QuikActivitySetting', includeIfNull: false)
  final String? quikActivitySetting;
  @JsonKey(name: 'EmailSignature', includeIfNull: false)
  final String? emailSignature;
  @JsonKey(name: 'NewPassword', includeIfNull: false)
  final String? newPassword;
  @JsonKey(name: 'OldPassword', includeIfNull: false)
  final String? oldPassword;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsUserProfileUserProfileFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsUserProfileUserProfileToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsUserProfileUserProfileToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsUserProfileUserProfile &&
            (identical(other.webUserId, webUserId) ||
                const DeepCollectionEquality()
                    .equals(other.webUserId, webUserId)) &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.loginName, loginName) ||
                const DeepCollectionEquality()
                    .equals(other.loginName, loginName)) &&
            (identical(other.browseDefaultRows, browseDefaultRows) ||
                const DeepCollectionEquality()
                    .equals(other.browseDefaultRows, browseDefaultRows)) &&
            (identical(other.applicationTheme, applicationTheme) ||
                const DeepCollectionEquality()
                    .equals(other.applicationTheme, applicationTheme)) &&
            (identical(other.homeMenuGuid, homeMenuGuid) ||
                const DeepCollectionEquality()
                    .equals(other.homeMenuGuid, homeMenuGuid)) &&
            (identical(other.homeMenuPath, homeMenuPath) ||
                const DeepCollectionEquality()
                    .equals(other.homeMenuPath, homeMenuPath)) &&
            (identical(other.successSoundId, successSoundId) ||
                const DeepCollectionEquality()
                    .equals(other.successSoundId, successSoundId)) &&
            (identical(other.successSound, successSound) ||
                const DeepCollectionEquality()
                    .equals(other.successSound, successSound)) &&
            (identical(other.successBase64Sound, successBase64Sound) ||
                const DeepCollectionEquality()
                    .equals(other.successBase64Sound, successBase64Sound)) &&
            (identical(other.errorSoundId, errorSoundId) ||
                const DeepCollectionEquality()
                    .equals(other.errorSoundId, errorSoundId)) &&
            (identical(other.errorSound, errorSound) ||
                const DeepCollectionEquality()
                    .equals(other.errorSound, errorSound)) &&
            (identical(other.errorBase64Sound, errorBase64Sound) ||
                const DeepCollectionEquality()
                    .equals(other.errorBase64Sound, errorBase64Sound)) &&
            (identical(other.notificationSoundId, notificationSoundId) ||
                const DeepCollectionEquality()
                    .equals(other.notificationSoundId, notificationSoundId)) &&
            (identical(other.notificationSound, notificationSound) ||
                const DeepCollectionEquality()
                    .equals(other.notificationSound, notificationSound)) &&
            (identical(other.notificationBase64Sound, notificationBase64Sound) ||
                const DeepCollectionEquality().equals(
                    other.notificationBase64Sound, notificationBase64Sound)) &&
            (identical(other.favoritesJson, favoritesJson) ||
                const DeepCollectionEquality()
                    .equals(other.favoritesJson, favoritesJson)) &&
            (identical(other.firstDayOfWeek, firstDayOfWeek) ||
                const DeepCollectionEquality()
                    .equals(other.firstDayOfWeek, firstDayOfWeek)) &&
            (identical(other.settingsNavigationMenuVisible, settingsNavigationMenuVisible) ||
                const DeepCollectionEquality().equals(
                    other.settingsNavigationMenuVisible,
                    settingsNavigationMenuVisible)) &&
            (identical(other.reportsNavigationMenuVisible, reportsNavigationMenuVisible) ||
                const DeepCollectionEquality().equals(other.reportsNavigationMenuVisible, reportsNavigationMenuVisible)) &&
            (identical(other.mainMenuPinned, mainMenuPinned) || const DeepCollectionEquality().equals(other.mainMenuPinned, mainMenuPinned)) &&
            (identical(other.webAdministrator, webAdministrator) || const DeepCollectionEquality().equals(other.webAdministrator, webAdministrator)) &&
            (identical(other.quikActivitySetting, quikActivitySetting) || const DeepCollectionEquality().equals(other.quikActivitySetting, quikActivitySetting)) &&
            (identical(other.emailSignature, emailSignature) || const DeepCollectionEquality().equals(other.emailSignature, emailSignature)) &&
            (identical(other.newPassword, newPassword) || const DeepCollectionEquality().equals(other.newPassword, newPassword)) &&
            (identical(other.oldPassword, oldPassword) || const DeepCollectionEquality().equals(other.oldPassword, oldPassword)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsUserProfileUserProfileExtension
    on WebApiModulesSettingsUserProfileUserProfile {
  WebApiModulesSettingsUserProfileUserProfile copyWith(
      {String? webUserId,
      String? userName,
      String? userId,
      String? loginName,
      int? browseDefaultRows,
      String? applicationTheme,
      String? homeMenuGuid,
      String? homeMenuPath,
      String? successSoundId,
      String? successSound,
      String? successBase64Sound,
      String? errorSoundId,
      String? errorSound,
      String? errorBase64Sound,
      String? notificationSoundId,
      String? notificationSound,
      String? notificationBase64Sound,
      String? favoritesJson,
      int? firstDayOfWeek,
      bool? settingsNavigationMenuVisible,
      bool? reportsNavigationMenuVisible,
      bool? mainMenuPinned,
      bool? webAdministrator,
      String? quikActivitySetting,
      String? emailSignature,
      String? newPassword,
      String? oldPassword,
      String? locale,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsUserProfileUserProfile(
        webUserId: webUserId ?? this.webUserId,
        userName: userName ?? this.userName,
        userId: userId ?? this.userId,
        loginName: loginName ?? this.loginName,
        browseDefaultRows: browseDefaultRows ?? this.browseDefaultRows,
        applicationTheme: applicationTheme ?? this.applicationTheme,
        homeMenuGuid: homeMenuGuid ?? this.homeMenuGuid,
        homeMenuPath: homeMenuPath ?? this.homeMenuPath,
        successSoundId: successSoundId ?? this.successSoundId,
        successSound: successSound ?? this.successSound,
        successBase64Sound: successBase64Sound ?? this.successBase64Sound,
        errorSoundId: errorSoundId ?? this.errorSoundId,
        errorSound: errorSound ?? this.errorSound,
        errorBase64Sound: errorBase64Sound ?? this.errorBase64Sound,
        notificationSoundId: notificationSoundId ?? this.notificationSoundId,
        notificationSound: notificationSound ?? this.notificationSound,
        notificationBase64Sound:
            notificationBase64Sound ?? this.notificationBase64Sound,
        favoritesJson: favoritesJson ?? this.favoritesJson,
        firstDayOfWeek: firstDayOfWeek ?? this.firstDayOfWeek,
        settingsNavigationMenuVisible:
            settingsNavigationMenuVisible ?? this.settingsNavigationMenuVisible,
        reportsNavigationMenuVisible:
            reportsNavigationMenuVisible ?? this.reportsNavigationMenuVisible,
        mainMenuPinned: mainMenuPinned ?? this.mainMenuPinned,
        webAdministrator: webAdministrator ?? this.webAdministrator,
        quikActivitySetting: quikActivitySetting ?? this.quikActivitySetting,
        emailSignature: emailSignature ?? this.emailSignature,
        newPassword: newPassword ?? this.newPassword,
        oldPassword: oldPassword ?? this.oldPassword,
        locale: locale ?? this.locale,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsUserSearchSettingsUserSearchSettings {
  WebApiModulesSettingsUserSearchSettingsUserSearchSettings({
    this.webUserId,
    this.mode,
    this.resultFields,
    this.disableAccessoryAutoExpand,
    this.hideZeroQuantity,
    this.defaultSelect,
    this.defaultSortBy,
    this.expandAccessoryOnQuantityIncrease,
    this.expandAccessoryBehavior,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsUserSearchSettingsUserSearchSettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsUserSearchSettingsUserSearchSettingsFromJson(json);

  @JsonKey(name: 'WebUserId', includeIfNull: false)
  final String? webUserId;
  @JsonKey(name: 'Mode', includeIfNull: false)
  final String? mode;
  @JsonKey(name: 'ResultFields', includeIfNull: false)
  final String? resultFields;
  @JsonKey(name: 'DisableAccessoryAutoExpand', includeIfNull: false)
  final bool? disableAccessoryAutoExpand;
  @JsonKey(name: 'HideZeroQuantity', includeIfNull: false)
  final bool? hideZeroQuantity;
  @JsonKey(name: 'DefaultSelect', includeIfNull: false)
  final String? defaultSelect;
  @JsonKey(name: 'DefaultSortBy', includeIfNull: false)
  final String? defaultSortBy;
  @JsonKey(name: 'ExpandAccessoryOnQuantityIncrease', includeIfNull: false)
  final bool? expandAccessoryOnQuantityIncrease;
  @JsonKey(name: 'ExpandAccessoryBehavior', includeIfNull: false)
  final String? expandAccessoryBehavior;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsUserSearchSettingsUserSearchSettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsUserSearchSettingsUserSearchSettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsUserSearchSettingsUserSearchSettingsToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsUserSearchSettingsUserSearchSettings &&
            (identical(other.webUserId, webUserId) ||
                const DeepCollectionEquality()
                    .equals(other.webUserId, webUserId)) &&
            (identical(other.mode, mode) ||
                const DeepCollectionEquality().equals(other.mode, mode)) &&
            (identical(other.resultFields, resultFields) ||
                const DeepCollectionEquality()
                    .equals(other.resultFields, resultFields)) &&
            (identical(other.disableAccessoryAutoExpand, disableAccessoryAutoExpand) ||
                const DeepCollectionEquality().equals(
                    other.disableAccessoryAutoExpand,
                    disableAccessoryAutoExpand)) &&
            (identical(other.hideZeroQuantity, hideZeroQuantity) ||
                const DeepCollectionEquality()
                    .equals(other.hideZeroQuantity, hideZeroQuantity)) &&
            (identical(other.defaultSelect, defaultSelect) ||
                const DeepCollectionEquality()
                    .equals(other.defaultSelect, defaultSelect)) &&
            (identical(other.defaultSortBy, defaultSortBy) ||
                const DeepCollectionEquality()
                    .equals(other.defaultSortBy, defaultSortBy)) &&
            (identical(other.expandAccessoryOnQuantityIncrease,
                    expandAccessoryOnQuantityIncrease) ||
                const DeepCollectionEquality().equals(
                    other.expandAccessoryOnQuantityIncrease,
                    expandAccessoryOnQuantityIncrease)) &&
            (identical(
                    other.expandAccessoryBehavior, expandAccessoryBehavior) ||
                const DeepCollectionEquality().equals(
                    other.expandAccessoryBehavior, expandAccessoryBehavior)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsUserSearchSettingsUserSearchSettingsExtension
    on WebApiModulesSettingsUserSearchSettingsUserSearchSettings {
  WebApiModulesSettingsUserSearchSettingsUserSearchSettings copyWith(
      {String? webUserId,
      String? mode,
      String? resultFields,
      bool? disableAccessoryAutoExpand,
      bool? hideZeroQuantity,
      String? defaultSelect,
      String? defaultSortBy,
      bool? expandAccessoryOnQuantityIncrease,
      String? expandAccessoryBehavior,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsUserSearchSettingsUserSearchSettings(
        webUserId: webUserId ?? this.webUserId,
        mode: mode ?? this.mode,
        resultFields: resultFields ?? this.resultFields,
        disableAccessoryAutoExpand:
            disableAccessoryAutoExpand ?? this.disableAccessoryAutoExpand,
        hideZeroQuantity: hideZeroQuantity ?? this.hideZeroQuantity,
        defaultSelect: defaultSelect ?? this.defaultSelect,
        defaultSortBy: defaultSortBy ?? this.defaultSortBy,
        expandAccessoryOnQuantityIncrease: expandAccessoryOnQuantityIncrease ??
            this.expandAccessoryOnQuantityIncrease,
        expandAccessoryBehavior:
            expandAccessoryBehavior ?? this.expandAccessoryBehavior,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsUserSettingsSoundSound {
  WebApiModulesSettingsUserSettingsSoundSound({
    this.soundId,
    this.sound,
    this.base64Sound,
    this.fileName,
    this.systemSound,
    this.soundColor,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsUserSettingsSoundSound.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsUserSettingsSoundSoundFromJson(json);

  @JsonKey(name: 'SoundId', includeIfNull: false)
  final String? soundId;
  @JsonKey(name: 'Sound', includeIfNull: false)
  final String? sound;
  @JsonKey(name: 'Base64Sound', includeIfNull: false)
  final String? base64Sound;
  @JsonKey(name: 'FileName', includeIfNull: false)
  final String? fileName;
  @JsonKey(name: 'SystemSound', includeIfNull: false)
  final bool? systemSound;
  @JsonKey(name: 'SoundColor', includeIfNull: false)
  final String? soundColor;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsUserSettingsSoundSoundFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsUserSettingsSoundSoundToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsUserSettingsSoundSoundToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsUserSettingsSoundSound &&
            (identical(other.soundId, soundId) ||
                const DeepCollectionEquality()
                    .equals(other.soundId, soundId)) &&
            (identical(other.sound, sound) ||
                const DeepCollectionEquality().equals(other.sound, sound)) &&
            (identical(other.base64Sound, base64Sound) ||
                const DeepCollectionEquality()
                    .equals(other.base64Sound, base64Sound)) &&
            (identical(other.fileName, fileName) ||
                const DeepCollectionEquality()
                    .equals(other.fileName, fileName)) &&
            (identical(other.systemSound, systemSound) ||
                const DeepCollectionEquality()
                    .equals(other.systemSound, systemSound)) &&
            (identical(other.soundColor, soundColor) ||
                const DeepCollectionEquality()
                    .equals(other.soundColor, soundColor)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsUserSettingsSoundSoundExtension
    on WebApiModulesSettingsUserSettingsSoundSound {
  WebApiModulesSettingsUserSettingsSoundSound copyWith(
      {String? soundId,
      String? sound,
      String? base64Sound,
      String? fileName,
      bool? systemSound,
      String? soundColor,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsUserSettingsSoundSound(
        soundId: soundId ?? this.soundId,
        sound: sound ?? this.sound,
        base64Sound: base64Sound ?? this.base64Sound,
        fileName: fileName ?? this.fileName,
        systemSound: systemSound ?? this.systemSound,
        soundColor: soundColor ?? this.soundColor,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsUserSettingsUserStatusUserStatus {
  WebApiModulesSettingsUserSettingsUserStatusUserStatus({
    this.userStatusId,
    this.userStatus,
    this.availableToSchedule,
    this.color,
    this.whiteText,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsUserSettingsUserStatusUserStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsUserSettingsUserStatusUserStatusFromJson(json);

  @JsonKey(name: 'UserStatusId', includeIfNull: false)
  final String? userStatusId;
  @JsonKey(name: 'UserStatus', includeIfNull: false)
  final String? userStatus;
  @JsonKey(name: 'AvailableToSchedule', includeIfNull: false)
  final bool? availableToSchedule;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'WhiteText', includeIfNull: false)
  final bool? whiteText;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsUserSettingsUserStatusUserStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsUserSettingsUserStatusUserStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsUserSettingsUserStatusUserStatusToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsUserSettingsUserStatusUserStatus &&
            (identical(other.userStatusId, userStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.userStatusId, userStatusId)) &&
            (identical(other.userStatus, userStatus) ||
                const DeepCollectionEquality()
                    .equals(other.userStatus, userStatus)) &&
            (identical(other.availableToSchedule, availableToSchedule) ||
                const DeepCollectionEquality()
                    .equals(other.availableToSchedule, availableToSchedule)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.whiteText, whiteText) ||
                const DeepCollectionEquality()
                    .equals(other.whiteText, whiteText)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsUserSettingsUserStatusUserStatusExtension
    on WebApiModulesSettingsUserSettingsUserStatusUserStatus {
  WebApiModulesSettingsUserSettingsUserStatusUserStatus copyWith(
      {String? userStatusId,
      String? userStatus,
      bool? availableToSchedule,
      String? color,
      bool? whiteText,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsUserSettingsUserStatusUserStatus(
        userStatusId: userStatusId ?? this.userStatusId,
        userStatus: userStatus ?? this.userStatus,
        availableToSchedule: availableToSchedule ?? this.availableToSchedule,
        color: color ?? this.color,
        whiteText: whiteText ?? this.whiteText,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVehicleModelVehicleModel {
  WebApiModulesSettingsVehicleModelVehicleModel({
    this.vehicleModelId,
    this.vehicleModel,
    this.vehicleMakeId,
    this.vehicleMake,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVehicleModelVehicleModel.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVehicleModelVehicleModelFromJson(json);

  @JsonKey(name: 'VehicleModelId', includeIfNull: false)
  final String? vehicleModelId;
  @JsonKey(name: 'VehicleModel', includeIfNull: false)
  final String? vehicleModel;
  @JsonKey(name: 'VehicleMakeId', includeIfNull: false)
  final String? vehicleMakeId;
  @JsonKey(name: 'VehicleMake', includeIfNull: false)
  final String? vehicleMake;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVehicleModelVehicleModelFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVehicleModelVehicleModelToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVehicleModelVehicleModelToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVehicleModelVehicleModel &&
            (identical(other.vehicleModelId, vehicleModelId) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleModelId, vehicleModelId)) &&
            (identical(other.vehicleModel, vehicleModel) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleModel, vehicleModel)) &&
            (identical(other.vehicleMakeId, vehicleMakeId) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleMakeId, vehicleMakeId)) &&
            (identical(other.vehicleMake, vehicleMake) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleMake, vehicleMake)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVehicleModelVehicleModelExtension
    on WebApiModulesSettingsVehicleModelVehicleModel {
  WebApiModulesSettingsVehicleModelVehicleModel copyWith(
      {String? vehicleModelId,
      String? vehicleModel,
      String? vehicleMakeId,
      String? vehicleMake,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVehicleModelVehicleModel(
        vehicleModelId: vehicleModelId ?? this.vehicleModelId,
        vehicleModel: vehicleModel ?? this.vehicleModel,
        vehicleMakeId: vehicleMakeId ?? this.vehicleMakeId,
        vehicleMake: vehicleMake ?? this.vehicleMake,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass {
  WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass({
    this.licenseClassId,
    this.licenseClass,
    this.description,
    this.regulated,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassFromJson(
          json);

  @JsonKey(name: 'LicenseClassId', includeIfNull: false)
  final String? licenseClassId;
  @JsonKey(name: 'LicenseClass', includeIfNull: false)
  final String? licenseClass;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Regulated', includeIfNull: false)
  final bool? regulated;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass &&
            (identical(other.licenseClassId, licenseClassId) ||
                const DeepCollectionEquality()
                    .equals(other.licenseClassId, licenseClassId)) &&
            (identical(other.licenseClass, licenseClass) ||
                const DeepCollectionEquality()
                    .equals(other.licenseClass, licenseClass)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.regulated, regulated) ||
                const DeepCollectionEquality()
                    .equals(other.regulated, regulated)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClassExtension
    on WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass {
  WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass copyWith(
      {String? licenseClassId,
      String? licenseClass,
      String? description,
      bool? regulated,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVehicleSettingsLicenseClassLicenseClass(
        licenseClassId: licenseClassId ?? this.licenseClassId,
        licenseClass: licenseClass ?? this.licenseClass,
        description: description ?? this.description,
        regulated: regulated ?? this.regulated,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor {
  WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor({
    this.vehicleColorId,
    this.vehicleColor,
    this.colorType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorFromJson(
          json);

  @JsonKey(name: 'VehicleColorId', includeIfNull: false)
  final String? vehicleColorId;
  @JsonKey(name: 'VehicleColor', includeIfNull: false)
  final String? vehicleColor;
  @JsonKey(name: 'ColorType', includeIfNull: false)
  final String? colorType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor &&
            (identical(other.vehicleColorId, vehicleColorId) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleColorId, vehicleColorId)) &&
            (identical(other.vehicleColor, vehicleColor) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleColor, vehicleColor)) &&
            (identical(other.colorType, colorType) ||
                const DeepCollectionEquality()
                    .equals(other.colorType, colorType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColorExtension
    on WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor {
  WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor copyWith(
      {String? vehicleColorId,
      String? vehicleColor,
      String? colorType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVehicleSettingsVehicleColorVehicleColor(
        vehicleColorId: vehicleColorId ?? this.vehicleColorId,
        vehicleColor: vehicleColor ?? this.vehicleColor,
        colorType: colorType ?? this.colorType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType {
  WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType({
    this.vehicleFuelTypeId,
    this.vehicleFuelType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeFromJson(
          json);

  @JsonKey(name: 'VehicleFuelTypeId', includeIfNull: false)
  final String? vehicleFuelTypeId;
  @JsonKey(name: 'VehicleFuelType', includeIfNull: false)
  final String? vehicleFuelType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType &&
            (identical(other.vehicleFuelTypeId, vehicleFuelTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleFuelTypeId, vehicleFuelTypeId)) &&
            (identical(other.vehicleFuelType, vehicleFuelType) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleFuelType, vehicleFuelType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelTypeExtension
    on WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType {
  WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType copyWith(
      {String? vehicleFuelTypeId,
      String? vehicleFuelType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVehicleSettingsVehicleFuelTypeVehicleFuelType(
        vehicleFuelTypeId: vehicleFuelTypeId ?? this.vehicleFuelTypeId,
        vehicleFuelType: vehicleFuelType ?? this.vehicleFuelType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake {
  WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake({
    this.vehicleMakeId,
    this.vehicleMake,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeFromJson(
          json);

  @JsonKey(name: 'VehicleMakeId', includeIfNull: false)
  final String? vehicleMakeId;
  @JsonKey(name: 'VehicleMake', includeIfNull: false)
  final String? vehicleMake;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake &&
            (identical(other.vehicleMakeId, vehicleMakeId) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleMakeId, vehicleMakeId)) &&
            (identical(other.vehicleMake, vehicleMake) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleMake, vehicleMake)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMakeExtension
    on WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake {
  WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake copyWith(
      {String? vehicleMakeId,
      String? vehicleMake,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVehicleSettingsVehicleMakeVehicleMake(
        vehicleMakeId: vehicleMakeId ?? this.vehicleMakeId,
        vehicleMake: vehicleMake ?? this.vehicleMake,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus {
  WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus({
    this.scheduleStatusId,
    this.scheduleStatus,
    this.statusAction,
    this.color,
    this.whiteText,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusFromJson(
          json);

  @JsonKey(name: 'ScheduleStatusId', includeIfNull: false)
  final String? scheduleStatusId;
  @JsonKey(name: 'ScheduleStatus', includeIfNull: false)
  final String? scheduleStatus;
  @JsonKey(name: 'StatusAction', includeIfNull: false)
  final String? statusAction;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'WhiteText', includeIfNull: false)
  final bool? whiteText;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus &&
            (identical(other.scheduleStatusId, scheduleStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.scheduleStatusId, scheduleStatusId)) &&
            (identical(other.scheduleStatus, scheduleStatus) ||
                const DeepCollectionEquality()
                    .equals(other.scheduleStatus, scheduleStatus)) &&
            (identical(other.statusAction, statusAction) ||
                const DeepCollectionEquality()
                    .equals(other.statusAction, statusAction)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.whiteText, whiteText) ||
                const DeepCollectionEquality()
                    .equals(other.whiteText, whiteText)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatusExtension
    on WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus {
  WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus
      copyWith(
          {String? scheduleStatusId,
          String? scheduleStatus,
          String? statusAction,
          String? color,
          bool? whiteText,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVehicleSettingsVehicleScheduleStatusVehicleScheduleStatus(
        scheduleStatusId: scheduleStatusId ?? this.scheduleStatusId,
        scheduleStatus: scheduleStatus ?? this.scheduleStatus,
        statusAction: statusAction ?? this.statusAction,
        color: color ?? this.color,
        whiteText: whiteText ?? this.whiteText,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus {
  WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus({
    this.vehicleStatusId,
    this.vehicleStatus,
    this.availableToSchedule,
    this.color,
    this.whiteText,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusFromJson(
          json);

  @JsonKey(name: 'VehicleStatusId', includeIfNull: false)
  final String? vehicleStatusId;
  @JsonKey(name: 'VehicleStatus', includeIfNull: false)
  final String? vehicleStatus;
  @JsonKey(name: 'AvailableToSchedule', includeIfNull: false)
  final bool? availableToSchedule;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'WhiteText', includeIfNull: false)
  final bool? whiteText;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus &&
            (identical(other.vehicleStatusId, vehicleStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleStatusId, vehicleStatusId)) &&
            (identical(other.vehicleStatus, vehicleStatus) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleStatus, vehicleStatus)) &&
            (identical(other.availableToSchedule, availableToSchedule) ||
                const DeepCollectionEquality()
                    .equals(other.availableToSchedule, availableToSchedule)) &&
            (identical(other.color, color) ||
                const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.whiteText, whiteText) ||
                const DeepCollectionEquality()
                    .equals(other.whiteText, whiteText)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatusExtension
    on WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus {
  WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus copyWith(
      {String? vehicleStatusId,
      String? vehicleStatus,
      bool? availableToSchedule,
      String? color,
      bool? whiteText,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVehicleSettingsVehicleStatusVehicleStatus(
        vehicleStatusId: vehicleStatusId ?? this.vehicleStatusId,
        vehicleStatus: vehicleStatus ?? this.vehicleStatus,
        availableToSchedule: availableToSchedule ?? this.availableToSchedule,
        color: color ?? this.color,
        whiteText: whiteText ?? this.whiteText,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType {
  WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType({
    this.vehicleTypeId,
    this.vehicleType,
    this.preventiveMaintenanceCycle,
    this.preventiveMaintenanceCyclePeriod,
    this.dotPeriod,
    this.licenseClassId,
    this.licenseClass,
    this.regulated,
    this.inventoryTypeId,
    this.inventoryType,
    this.unitId,
    this.unit,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationMonths,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.orderBy,
    this.pickListOrderBy,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeFromJson(
          json);

  @JsonKey(name: 'VehicleTypeId', includeIfNull: false)
  final String? vehicleTypeId;
  @JsonKey(name: 'VehicleType', includeIfNull: false)
  final String? vehicleType;
  @JsonKey(name: 'PreventiveMaintenanceCycle', includeIfNull: false)
  final String? preventiveMaintenanceCycle;
  @JsonKey(name: 'PreventiveMaintenanceCyclePeriod', includeIfNull: false)
  final int? preventiveMaintenanceCyclePeriod;
  @JsonKey(name: 'DotPeriod', includeIfNull: false)
  final int? dotPeriod;
  @JsonKey(name: 'LicenseClassId', includeIfNull: false)
  final String? licenseClassId;
  @JsonKey(name: 'LicenseClass', includeIfNull: false)
  final String? licenseClass;
  @JsonKey(name: 'Regulated', includeIfNull: false)
  final bool? regulated;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'UnitId', includeIfNull: false)
  final String? unitId;
  @JsonKey(name: 'Unit', includeIfNull: false)
  final String? unit;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationMonths', includeIfNull: false)
  final int? depreciationMonths;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'PickListOrderBy', includeIfNull: false)
  final int? pickListOrderBy;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType &&
            (identical(other.vehicleTypeId, vehicleTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleTypeId, vehicleTypeId)) &&
            (identical(other.vehicleType, vehicleType) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleType, vehicleType)) &&
            (identical(other.preventiveMaintenanceCycle, preventiveMaintenanceCycle) ||
                const DeepCollectionEquality().equals(
                    other.preventiveMaintenanceCycle,
                    preventiveMaintenanceCycle)) &&
            (identical(other.preventiveMaintenanceCyclePeriod, preventiveMaintenanceCyclePeriod) ||
                const DeepCollectionEquality().equals(
                    other.preventiveMaintenanceCyclePeriod,
                    preventiveMaintenanceCyclePeriod)) &&
            (identical(other.dotPeriod, dotPeriod) ||
                const DeepCollectionEquality()
                    .equals(other.dotPeriod, dotPeriod)) &&
            (identical(other.licenseClassId, licenseClassId) ||
                const DeepCollectionEquality()
                    .equals(other.licenseClassId, licenseClassId)) &&
            (identical(other.licenseClass, licenseClass) ||
                const DeepCollectionEquality()
                    .equals(other.licenseClass, licenseClass)) &&
            (identical(other.regulated, regulated) ||
                const DeepCollectionEquality()
                    .equals(other.regulated, regulated)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.unitId, unitId) ||
                const DeepCollectionEquality().equals(other.unitId, unitId)) &&
            (identical(other.unit, unit) ||
                const DeepCollectionEquality().equals(other.unit, unit)) &&
            (identical(other.assetAccountId, assetAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) ||
                const DeepCollectionEquality()
                    .equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) ||
                const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationMonths, depreciationMonths) || const DeepCollectionEquality().equals(other.depreciationMonths, depreciationMonths)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.orderBy, orderBy) || const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.pickListOrderBy, pickListOrderBy) || const DeepCollectionEquality().equals(other.pickListOrderBy, pickListOrderBy)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleTypeExtension
    on WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType {
  WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType copyWith(
      {String? vehicleTypeId,
      String? vehicleType,
      String? preventiveMaintenanceCycle,
      int? preventiveMaintenanceCyclePeriod,
      int? dotPeriod,
      String? licenseClassId,
      String? licenseClass,
      bool? regulated,
      String? inventoryTypeId,
      String? inventoryType,
      String? unitId,
      String? unit,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      int? depreciationMonths,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      double? orderBy,
      int? pickListOrderBy,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVehicleSettingsVehicleTypeVehicleType(
        vehicleTypeId: vehicleTypeId ?? this.vehicleTypeId,
        vehicleType: vehicleType ?? this.vehicleType,
        preventiveMaintenanceCycle:
            preventiveMaintenanceCycle ?? this.preventiveMaintenanceCycle,
        preventiveMaintenanceCyclePeriod: preventiveMaintenanceCyclePeriod ??
            this.preventiveMaintenanceCyclePeriod,
        dotPeriod: dotPeriod ?? this.dotPeriod,
        licenseClassId: licenseClassId ?? this.licenseClassId,
        licenseClass: licenseClass ?? this.licenseClass,
        regulated: regulated ?? this.regulated,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        unitId: unitId ?? this.unitId,
        unit: unit ?? this.unit,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription:
            assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription:
            incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription:
            subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription:
            ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId:
            equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo:
            equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription:
            equipmentSaleIncomeAccountDescription ??
                this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription:
            expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ??
            this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ??
            this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription:
            costOfGoodsSoldExpenseAccountDescription ??
                this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ??
            this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ??
            this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription:
            costOfGoodsRentedExpenseAccountDescription ??
                this.costOfGoodsRentedExpenseAccountDescription,
        depreciationMonths: depreciationMonths ?? this.depreciationMonths,
        depreciationExpenseAccountId:
            depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo:
            depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription:
            depreciationExpenseAccountDescription ??
                this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId:
            accumulatedDepreciationExpenseAccountId ??
                this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo:
            accumulatedDepreciationExpenseAccountNo ??
                this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription:
            accumulatedDepreciationExpenseAccountDescription ??
                this.accumulatedDepreciationExpenseAccountDescription,
        orderBy: orderBy ?? this.orderBy,
        pickListOrderBy: pickListOrderBy ?? this.pickListOrderBy,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse {
  WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse({
    this.vehicleTypeId,
    this.hourlyRate,
    this.dailyRate,
    this.weeklyRate,
    this.monthlyRate,
    this.itemDescription,
    this.warehouseId,
    this.warehouseCode,
    this.warehouse,
    this.warehouseOrderBy,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseFromJson(
          json);

  @JsonKey(name: 'VehicleTypeId', includeIfNull: false)
  final String? vehicleTypeId;
  @JsonKey(name: 'HourlyRate', includeIfNull: false)
  final double? hourlyRate;
  @JsonKey(name: 'DailyRate', includeIfNull: false)
  final double? dailyRate;
  @JsonKey(name: 'WeeklyRate', includeIfNull: false)
  final double? weeklyRate;
  @JsonKey(name: 'MonthlyRate', includeIfNull: false)
  final double? monthlyRate;
  @JsonKey(name: 'ItemDescription', includeIfNull: false)
  final String? itemDescription;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'WarehouseOrderBy', includeIfNull: false)
  final int? warehouseOrderBy;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse &&
            (identical(other.vehicleTypeId, vehicleTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.vehicleTypeId, vehicleTypeId)) &&
            (identical(other.hourlyRate, hourlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.hourlyRate, hourlyRate)) &&
            (identical(other.dailyRate, dailyRate) ||
                const DeepCollectionEquality()
                    .equals(other.dailyRate, dailyRate)) &&
            (identical(other.weeklyRate, weeklyRate) ||
                const DeepCollectionEquality()
                    .equals(other.weeklyRate, weeklyRate)) &&
            (identical(other.monthlyRate, monthlyRate) ||
                const DeepCollectionEquality()
                    .equals(other.monthlyRate, monthlyRate)) &&
            (identical(other.itemDescription, itemDescription) ||
                const DeepCollectionEquality()
                    .equals(other.itemDescription, itemDescription)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.warehouseOrderBy, warehouseOrderBy) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseOrderBy, warehouseOrderBy)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouseExtension
    on WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse {
  WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse copyWith(
      {String? vehicleTypeId,
      double? hourlyRate,
      double? dailyRate,
      double? weeklyRate,
      double? monthlyRate,
      String? itemDescription,
      String? warehouseId,
      String? warehouseCode,
      String? warehouse,
      int? warehouseOrderBy,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVehicleTypeWarehouseVehicleTypeWarehouse(
        vehicleTypeId: vehicleTypeId ?? this.vehicleTypeId,
        hourlyRate: hourlyRate ?? this.hourlyRate,
        dailyRate: dailyRate ?? this.dailyRate,
        weeklyRate: weeklyRate ?? this.weeklyRate,
        monthlyRate: monthlyRate ?? this.monthlyRate,
        itemDescription: itemDescription ?? this.itemDescription,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        warehouse: warehouse ?? this.warehouse,
        warehouseOrderBy: warehouseOrderBy ?? this.warehouseOrderBy,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType {
  WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType({
    this.organizationTypeId,
    this.organizationType,
    this.organizationTypeCode,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeFromJson(
          json);

  @JsonKey(name: 'OrganizationTypeId', includeIfNull: false)
  final String? organizationTypeId;
  @JsonKey(name: 'OrganizationType', includeIfNull: false)
  final String? organizationType;
  @JsonKey(name: 'OrganizationTypeCode', includeIfNull: false)
  final String? organizationTypeCode;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType &&
            (identical(other.organizationTypeId, organizationTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.organizationTypeId, organizationTypeId)) &&
            (identical(other.organizationType, organizationType) ||
                const DeepCollectionEquality()
                    .equals(other.organizationType, organizationType)) &&
            (identical(other.organizationTypeCode, organizationTypeCode) ||
                const DeepCollectionEquality().equals(
                    other.organizationTypeCode, organizationTypeCode)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationTypeExtension
    on WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType {
  WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType copyWith(
      {String? organizationTypeId,
      String? organizationType,
      String? organizationTypeCode,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVendorSettingsOrganizationTypeOrganizationType(
        organizationTypeId: organizationTypeId ?? this.organizationTypeId,
        organizationType: organizationType ?? this.organizationType,
        organizationTypeCode: organizationTypeCode ?? this.organizationTypeCode,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus {
  WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus({
    this.sapVendorInvoiceStatusId,
    this.sapVendorInvoiceStatus,
    this.vendorInvoiceStatus,
    this.sapStatus,
    this.sapStatusDisplay,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusFromJson(
          json);

  @JsonKey(name: 'SapVendorInvoiceStatusId', includeIfNull: false)
  final String? sapVendorInvoiceStatusId;
  @JsonKey(name: 'SapVendorInvoiceStatus', includeIfNull: false)
  final String? sapVendorInvoiceStatus;
  @JsonKey(name: 'VendorInvoiceStatus', includeIfNull: false)
  final String? vendorInvoiceStatus;
  @JsonKey(name: 'SapStatus', includeIfNull: false)
  final String? sapStatus;
  @JsonKey(name: 'SapStatusDisplay', includeIfNull: false)
  final String? sapStatusDisplay;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus &&
            (identical(
                    other.sapVendorInvoiceStatusId, sapVendorInvoiceStatusId) ||
                const DeepCollectionEquality().equals(
                    other.sapVendorInvoiceStatusId,
                    sapVendorInvoiceStatusId)) &&
            (identical(other.sapVendorInvoiceStatus, sapVendorInvoiceStatus) ||
                const DeepCollectionEquality().equals(
                    other.sapVendorInvoiceStatus, sapVendorInvoiceStatus)) &&
            (identical(other.vendorInvoiceStatus, vendorInvoiceStatus) ||
                const DeepCollectionEquality()
                    .equals(other.vendorInvoiceStatus, vendorInvoiceStatus)) &&
            (identical(other.sapStatus, sapStatus) ||
                const DeepCollectionEquality()
                    .equals(other.sapStatus, sapStatus)) &&
            (identical(other.sapStatusDisplay, sapStatusDisplay) ||
                const DeepCollectionEquality()
                    .equals(other.sapStatusDisplay, sapStatusDisplay)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatusExtension
    on WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus {
  WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus
      copyWith(
          {String? sapVendorInvoiceStatusId,
          String? sapVendorInvoiceStatus,
          String? vendorInvoiceStatus,
          String? sapStatus,
          String? sapStatusDisplay,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVendorSettingsSapVendorInvoiceStatusSapVendorInvoiceStatus(
        sapVendorInvoiceStatusId:
            sapVendorInvoiceStatusId ?? this.sapVendorInvoiceStatusId,
        sapVendorInvoiceStatus:
            sapVendorInvoiceStatus ?? this.sapVendorInvoiceStatus,
        vendorInvoiceStatus: vendorInvoiceStatus ?? this.vendorInvoiceStatus,
        sapStatus: sapStatus ?? this.sapStatus,
        sapStatusDisplay: sapStatusDisplay ?? this.sapStatusDisplay,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog {
  WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog({
    this.vendorCatalogId,
    this.vendorCatalog,
    this.catalogType,
    this.inventoryTypeId,
    this.inventoryType,
    this.categoryId,
    this.category,
    this.vendorId,
    this.vendor,
    this.taxRate,
    this.globalMarkup,
    this.carrierId,
    this.carrier,
    this.shipViaId,
    this.shipVia,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogFromJson(
          json);

  @JsonKey(name: 'VendorCatalogId', includeIfNull: false)
  final String? vendorCatalogId;
  @JsonKey(name: 'VendorCatalog', includeIfNull: false)
  final String? vendorCatalog;
  @JsonKey(name: 'CatalogType', includeIfNull: false)
  final String? catalogType;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'Vendor', includeIfNull: false)
  final String? vendor;
  @JsonKey(name: 'TaxRate', includeIfNull: false)
  final double? taxRate;
  @JsonKey(name: 'GlobalMarkup', includeIfNull: false)
  final double? globalMarkup;
  @JsonKey(name: 'CarrierId', includeIfNull: false)
  final String? carrierId;
  @JsonKey(name: 'Carrier', includeIfNull: false)
  final String? carrier;
  @JsonKey(name: 'ShipViaId', includeIfNull: false)
  final String? shipViaId;
  @JsonKey(name: 'ShipVia', includeIfNull: false)
  final String? shipVia;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog &&
            (identical(other.vendorCatalogId, vendorCatalogId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorCatalogId, vendorCatalogId)) &&
            (identical(other.vendorCatalog, vendorCatalog) ||
                const DeepCollectionEquality()
                    .equals(other.vendorCatalog, vendorCatalog)) &&
            (identical(other.catalogType, catalogType) ||
                const DeepCollectionEquality()
                    .equals(other.catalogType, catalogType)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) ||
                const DeepCollectionEquality()
                    .equals(other.category, category)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.vendor, vendor) ||
                const DeepCollectionEquality().equals(other.vendor, vendor)) &&
            (identical(other.taxRate, taxRate) ||
                const DeepCollectionEquality()
                    .equals(other.taxRate, taxRate)) &&
            (identical(other.globalMarkup, globalMarkup) ||
                const DeepCollectionEquality()
                    .equals(other.globalMarkup, globalMarkup)) &&
            (identical(other.carrierId, carrierId) ||
                const DeepCollectionEquality()
                    .equals(other.carrierId, carrierId)) &&
            (identical(other.carrier, carrier) ||
                const DeepCollectionEquality()
                    .equals(other.carrier, carrier)) &&
            (identical(other.shipViaId, shipViaId) ||
                const DeepCollectionEquality()
                    .equals(other.shipViaId, shipViaId)) &&
            (identical(other.shipVia, shipVia) ||
                const DeepCollectionEquality()
                    .equals(other.shipVia, shipVia)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalogExtension
    on WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog {
  WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog copyWith(
      {String? vendorCatalogId,
      String? vendorCatalog,
      String? catalogType,
      String? inventoryTypeId,
      String? inventoryType,
      String? categoryId,
      String? category,
      String? vendorId,
      String? vendor,
      double? taxRate,
      double? globalMarkup,
      String? carrierId,
      String? carrier,
      String? shipViaId,
      String? shipVia,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVendorSettingsVendorCatalogVendorCatalog(
        vendorCatalogId: vendorCatalogId ?? this.vendorCatalogId,
        vendorCatalog: vendorCatalog ?? this.vendorCatalog,
        catalogType: catalogType ?? this.catalogType,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        vendorId: vendorId ?? this.vendorId,
        vendor: vendor ?? this.vendor,
        taxRate: taxRate ?? this.taxRate,
        globalMarkup: globalMarkup ?? this.globalMarkup,
        carrierId: carrierId ?? this.carrierId,
        carrier: carrier ?? this.carrier,
        shipViaId: shipViaId ?? this.shipViaId,
        shipVia: shipVia ?? this.shipVia,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsVendorSettingsVendorClassVendorClass {
  WebApiModulesSettingsVendorSettingsVendorClassVendorClass({
    this.vendorClassId,
    this.vendorClass,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsVendorSettingsVendorClassVendorClass.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsVendorSettingsVendorClassVendorClassFromJson(json);

  @JsonKey(name: 'VendorClassId', includeIfNull: false)
  final String? vendorClassId;
  @JsonKey(name: 'VendorClass', includeIfNull: false)
  final String? vendorClass;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsVendorSettingsVendorClassVendorClassFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsVendorSettingsVendorClassVendorClassToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsVendorSettingsVendorClassVendorClassToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsVendorSettingsVendorClassVendorClass &&
            (identical(other.vendorClassId, vendorClassId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorClassId, vendorClassId)) &&
            (identical(other.vendorClass, vendorClass) ||
                const DeepCollectionEquality()
                    .equals(other.vendorClass, vendorClass)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsVendorSettingsVendorClassVendorClassExtension
    on WebApiModulesSettingsVendorSettingsVendorClassVendorClass {
  WebApiModulesSettingsVendorSettingsVendorClassVendorClass copyWith(
      {String? vendorClassId,
      String? vendorClass,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsVendorSettingsVendorClassVendorClass(
        vendorClassId: vendorClassId ?? this.vendorClassId,
        vendorClass: vendorClass ?? this.vendorClass,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare {
  WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare({
    this.wardrobeCareId,
    this.wardrobeCare,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareFromJson(
          json);

  @JsonKey(name: 'WardrobeCareId', includeIfNull: false)
  final String? wardrobeCareId;
  @JsonKey(name: 'WardrobeCare', includeIfNull: false)
  final String? wardrobeCare;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare &&
            (identical(other.wardrobeCareId, wardrobeCareId) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeCareId, wardrobeCareId)) &&
            (identical(other.wardrobeCare, wardrobeCare) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeCare, wardrobeCare)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCareExtension
    on WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare {
  WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare copyWith(
      {String? wardrobeCareId,
      String? wardrobeCare,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWardrobeSettingsWardrobeCareWardrobeCare(
        wardrobeCareId: wardrobeCareId ?? this.wardrobeCareId,
        wardrobeCare: wardrobeCare ?? this.wardrobeCare,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor {
  WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor({
    this.wardrobeColorId,
    this.wardrobeColor,
    this.colorType,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorFromJson(
          json);

  @JsonKey(name: 'WardrobeColorId', includeIfNull: false)
  final String? wardrobeColorId;
  @JsonKey(name: 'WardrobeColor', includeIfNull: false)
  final String? wardrobeColor;
  @JsonKey(name: 'ColorType', includeIfNull: false)
  final String? colorType;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor &&
            (identical(other.wardrobeColorId, wardrobeColorId) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeColorId, wardrobeColorId)) &&
            (identical(other.wardrobeColor, wardrobeColor) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeColor, wardrobeColor)) &&
            (identical(other.colorType, colorType) ||
                const DeepCollectionEquality()
                    .equals(other.colorType, colorType)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColorExtension
    on WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor {
  WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor copyWith(
      {String? wardrobeColorId,
      String? wardrobeColor,
      String? colorType,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWardrobeSettingsWardrobeColorWardrobeColor(
        wardrobeColorId: wardrobeColorId ?? this.wardrobeColorId,
        wardrobeColor: wardrobeColor ?? this.wardrobeColor,
        colorType: colorType ?? this.colorType,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition {
  WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition({
    this.wardrobeConditionId,
    this.wardrobeCondition,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionFromJson(
          json);

  @JsonKey(name: 'WardrobeConditionId', includeIfNull: false)
  final String? wardrobeConditionId;
  @JsonKey(name: 'WardrobeCondition', includeIfNull: false)
  final String? wardrobeCondition;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition &&
            (identical(other.wardrobeConditionId, wardrobeConditionId) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeConditionId, wardrobeConditionId)) &&
            (identical(other.wardrobeCondition, wardrobeCondition) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeCondition, wardrobeCondition)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeConditionExtension
    on WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition {
  WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition
      copyWith(
          {String? wardrobeConditionId,
          String? wardrobeCondition,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWardrobeSettingsWardrobeConditionWardrobeCondition(
        wardrobeConditionId: wardrobeConditionId ?? this.wardrobeConditionId,
        wardrobeCondition: wardrobeCondition ?? this.wardrobeCondition,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender {
  WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender({
    this.wardrobeGenderId,
    this.wardrobeGender,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderFromJson(
          json);

  @JsonKey(name: 'WardrobeGenderId', includeIfNull: false)
  final String? wardrobeGenderId;
  @JsonKey(name: 'WardrobeGender', includeIfNull: false)
  final String? wardrobeGender;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender &&
            (identical(other.wardrobeGenderId, wardrobeGenderId) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeGenderId, wardrobeGenderId)) &&
            (identical(other.wardrobeGender, wardrobeGender) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeGender, wardrobeGender)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGenderExtension
    on WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender {
  WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender copyWith(
      {String? wardrobeGenderId,
      String? wardrobeGender,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWardrobeSettingsWardrobeGenderWardrobeGender(
        wardrobeGenderId: wardrobeGenderId ?? this.wardrobeGenderId,
        wardrobeGender: wardrobeGender ?? this.wardrobeGender,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel {
  WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel({
    this.wardrobeLabelId,
    this.wardrobeLabel,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelFromJson(
          json);

  @JsonKey(name: 'WardrobeLabelId', includeIfNull: false)
  final String? wardrobeLabelId;
  @JsonKey(name: 'WardrobeLabel', includeIfNull: false)
  final String? wardrobeLabel;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel &&
            (identical(other.wardrobeLabelId, wardrobeLabelId) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeLabelId, wardrobeLabelId)) &&
            (identical(other.wardrobeLabel, wardrobeLabel) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeLabel, wardrobeLabel)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabelExtension
    on WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel {
  WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel copyWith(
      {String? wardrobeLabelId,
      String? wardrobeLabel,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWardrobeSettingsWardrobeLabelWardrobeLabel(
        wardrobeLabelId: wardrobeLabelId ?? this.wardrobeLabelId,
        wardrobeLabel: wardrobeLabel ?? this.wardrobeLabel,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial {
  WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial({
    this.wardrobeMaterialId,
    this.wardrobeMaterial,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialFromJson(
          json);

  @JsonKey(name: 'WardrobeMaterialId', includeIfNull: false)
  final String? wardrobeMaterialId;
  @JsonKey(name: 'WardrobeMaterial', includeIfNull: false)
  final String? wardrobeMaterial;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial &&
            (identical(other.wardrobeMaterialId, wardrobeMaterialId) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeMaterialId, wardrobeMaterialId)) &&
            (identical(other.wardrobeMaterial, wardrobeMaterial) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeMaterial, wardrobeMaterial)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterialExtension
    on WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial {
  WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial
      copyWith(
          {String? wardrobeMaterialId,
          String? wardrobeMaterial,
          bool? inactive,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWardrobeSettingsWardrobeMaterialWardrobeMaterial(
        wardrobeMaterialId: wardrobeMaterialId ?? this.wardrobeMaterialId,
        wardrobeMaterial: wardrobeMaterial ?? this.wardrobeMaterial,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern {
  WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern({
    this.wardrobePatternId,
    this.wardrobePattern,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternFromJson(
          json);

  @JsonKey(name: 'WardrobePatternId', includeIfNull: false)
  final String? wardrobePatternId;
  @JsonKey(name: 'WardrobePattern', includeIfNull: false)
  final String? wardrobePattern;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern &&
            (identical(other.wardrobePatternId, wardrobePatternId) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobePatternId, wardrobePatternId)) &&
            (identical(other.wardrobePattern, wardrobePattern) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobePattern, wardrobePattern)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePatternExtension
    on WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern {
  WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern copyWith(
      {String? wardrobePatternId,
      String? wardrobePattern,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWardrobeSettingsWardrobePatternWardrobePattern(
        wardrobePatternId: wardrobePatternId ?? this.wardrobePatternId,
        wardrobePattern: wardrobePattern ?? this.wardrobePattern,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod {
  WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod({
    this.wardrobePeriodId,
    this.wardrobePeriod,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodFromJson(
          json);

  @JsonKey(name: 'WardrobePeriodId', includeIfNull: false)
  final String? wardrobePeriodId;
  @JsonKey(name: 'WardrobePeriod', includeIfNull: false)
  final String? wardrobePeriod;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod &&
            (identical(other.wardrobePeriodId, wardrobePeriodId) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobePeriodId, wardrobePeriodId)) &&
            (identical(other.wardrobePeriod, wardrobePeriod) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobePeriod, wardrobePeriod)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriodExtension
    on WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod {
  WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod copyWith(
      {String? wardrobePeriodId,
      String? wardrobePeriod,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWardrobeSettingsWardrobePeriodWardrobePeriod(
        wardrobePeriodId: wardrobePeriodId ?? this.wardrobePeriodId,
        wardrobePeriod: wardrobePeriod ?? this.wardrobePeriod,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource {
  WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource({
    this.wardrobeSourceId,
    this.wardrobeSource,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceFromJson(
          json);

  @JsonKey(name: 'WardrobeSourceId', includeIfNull: false)
  final String? wardrobeSourceId;
  @JsonKey(name: 'WardrobeSource', includeIfNull: false)
  final String? wardrobeSource;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource &&
            (identical(other.wardrobeSourceId, wardrobeSourceId) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeSourceId, wardrobeSourceId)) &&
            (identical(other.wardrobeSource, wardrobeSource) ||
                const DeepCollectionEquality()
                    .equals(other.wardrobeSource, wardrobeSource)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSourceExtension
    on WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource {
  WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource copyWith(
      {String? wardrobeSourceId,
      String? wardrobeSource,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWardrobeSettingsWardrobeSourceWardrobeSource(
        wardrobeSourceId: wardrobeSourceId ?? this.wardrobeSourceId,
        wardrobeSource: wardrobeSource ?? this.wardrobeSource,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour {
  WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour({
    this.warehouseAvailabilityHourId,
    this.warehouseId,
    this.warehouseAvailabilityHour,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourFromJson(
          json);

  @JsonKey(name: 'WarehouseAvailabilityHourId', includeIfNull: false)
  final String? warehouseAvailabilityHourId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'WarehouseAvailabilityHour', includeIfNull: false)
  final int? warehouseAvailabilityHour;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour &&
            (identical(other.warehouseAvailabilityHourId,
                    warehouseAvailabilityHourId) ||
                const DeepCollectionEquality().equals(
                    other.warehouseAvailabilityHourId,
                    warehouseAvailabilityHourId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouseAvailabilityHour,
                    warehouseAvailabilityHour) ||
                const DeepCollectionEquality().equals(
                    other.warehouseAvailabilityHour,
                    warehouseAvailabilityHour)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHourExtension
    on WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour {
  WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour
      copyWith(
          {String? warehouseAvailabilityHourId,
          String? warehouseId,
          int? warehouseAvailabilityHour,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWarehouseAvailabilityHourWarehouseAvailabilityHour(
        warehouseAvailabilityHourId:
            warehouseAvailabilityHourId ?? this.warehouseAvailabilityHourId,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouseAvailabilityHour:
            warehouseAvailabilityHour ?? this.warehouseAvailabilityHour,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip {
  WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip({
    this.warehouseBarCodeSkipId,
    this.warehouseId,
    this.warehouseBarCodeSkip,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipFromJson(
          json);

  @JsonKey(name: 'WarehouseBarCodeSkipId', includeIfNull: false)
  final String? warehouseBarCodeSkipId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'WarehouseBarCodeSkip', includeIfNull: false)
  final String? warehouseBarCodeSkip;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip &&
            (identical(other.warehouseBarCodeSkipId, warehouseBarCodeSkipId) ||
                const DeepCollectionEquality().equals(
                    other.warehouseBarCodeSkipId, warehouseBarCodeSkipId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouseBarCodeSkip, warehouseBarCodeSkip) ||
                const DeepCollectionEquality().equals(
                    other.warehouseBarCodeSkip, warehouseBarCodeSkip)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkipExtension
    on WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip {
  WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip copyWith(
      {String? warehouseBarCodeSkipId,
      String? warehouseId,
      String? warehouseBarCodeSkip,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWarehouseBarCodeSkipWarehouseBarCodeSkip(
        warehouseBarCodeSkipId:
            warehouseBarCodeSkipId ?? this.warehouseBarCodeSkipId,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouseBarCodeSkip: warehouseBarCodeSkip ?? this.warehouseBarCodeSkip,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment {
  WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment({
    this.warehouseId,
    this.departmentId,
    this.department,
    this.rentalBarCodeRangeId,
    this.rentalBarCodeRange,
    this.salesBarCodeRangeId,
    this.salesBarCodeRange,
    this.orderBy,
    this.requestToId,
    this.requestTo,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentFromJson(
          json);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'Department', includeIfNull: false)
  final String? department;
  @JsonKey(name: 'RentalBarCodeRangeId', includeIfNull: false)
  final String? rentalBarCodeRangeId;
  @JsonKey(name: 'RentalBarCodeRange', includeIfNull: false)
  final String? rentalBarCodeRange;
  @JsonKey(name: 'SalesBarCodeRangeId', includeIfNull: false)
  final String? salesBarCodeRangeId;
  @JsonKey(name: 'SalesBarCodeRange', includeIfNull: false)
  final String? salesBarCodeRange;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final String? orderBy;
  @JsonKey(name: 'RequestToId', includeIfNull: false)
  final String? requestToId;
  @JsonKey(name: 'RequestTo', includeIfNull: false)
  final String? requestTo;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.department, department) ||
                const DeepCollectionEquality()
                    .equals(other.department, department)) &&
            (identical(other.rentalBarCodeRangeId, rentalBarCodeRangeId) ||
                const DeepCollectionEquality().equals(
                    other.rentalBarCodeRangeId, rentalBarCodeRangeId)) &&
            (identical(other.rentalBarCodeRange, rentalBarCodeRange) ||
                const DeepCollectionEquality()
                    .equals(other.rentalBarCodeRange, rentalBarCodeRange)) &&
            (identical(other.salesBarCodeRangeId, salesBarCodeRangeId) ||
                const DeepCollectionEquality()
                    .equals(other.salesBarCodeRangeId, salesBarCodeRangeId)) &&
            (identical(other.salesBarCodeRange, salesBarCodeRange) ||
                const DeepCollectionEquality()
                    .equals(other.salesBarCodeRange, salesBarCodeRange)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.requestToId, requestToId) ||
                const DeepCollectionEquality()
                    .equals(other.requestToId, requestToId)) &&
            (identical(other.requestTo, requestTo) ||
                const DeepCollectionEquality()
                    .equals(other.requestTo, requestTo)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWarehouseDepartmentWarehouseDepartmentExtension
    on WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment {
  WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment copyWith(
      {String? warehouseId,
      String? departmentId,
      String? department,
      String? rentalBarCodeRangeId,
      String? rentalBarCodeRange,
      String? salesBarCodeRangeId,
      String? salesBarCodeRange,
      String? orderBy,
      String? requestToId,
      String? requestTo,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWarehouseDepartmentWarehouseDepartment(
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        department: department ?? this.department,
        rentalBarCodeRangeId: rentalBarCodeRangeId ?? this.rentalBarCodeRangeId,
        rentalBarCodeRange: rentalBarCodeRange ?? this.rentalBarCodeRange,
        salesBarCodeRangeId: salesBarCodeRangeId ?? this.salesBarCodeRangeId,
        salesBarCodeRange: salesBarCodeRange ?? this.salesBarCodeRange,
        orderBy: orderBy ?? this.orderBy,
        requestToId: requestToId ?? this.requestToId,
        requestTo: requestTo ?? this.requestTo,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType {
  WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType({
    this.warehouseId,
    this.inventoryTypeId,
    this.inventoryType,
    this.rentalBarCodeRangeId,
    this.rentalBarCodeRange,
    this.salesBarCodeRangeId,
    this.salesBarCodeRange,
    this.orderBy,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeFromJson(
          json);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'RentalBarCodeRangeId', includeIfNull: false)
  final String? rentalBarCodeRangeId;
  @JsonKey(name: 'RentalBarCodeRange', includeIfNull: false)
  final String? rentalBarCodeRange;
  @JsonKey(name: 'SalesBarCodeRangeId', includeIfNull: false)
  final String? salesBarCodeRangeId;
  @JsonKey(name: 'SalesBarCodeRange', includeIfNull: false)
  final String? salesBarCodeRange;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final String? orderBy;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.rentalBarCodeRangeId, rentalBarCodeRangeId) ||
                const DeepCollectionEquality().equals(
                    other.rentalBarCodeRangeId, rentalBarCodeRangeId)) &&
            (identical(other.rentalBarCodeRange, rentalBarCodeRange) ||
                const DeepCollectionEquality()
                    .equals(other.rentalBarCodeRange, rentalBarCodeRange)) &&
            (identical(other.salesBarCodeRangeId, salesBarCodeRangeId) ||
                const DeepCollectionEquality()
                    .equals(other.salesBarCodeRangeId, salesBarCodeRangeId)) &&
            (identical(other.salesBarCodeRange, salesBarCodeRange) ||
                const DeepCollectionEquality()
                    .equals(other.salesBarCodeRange, salesBarCodeRange)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryTypeExtension
    on WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType {
  WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType copyWith(
      {String? warehouseId,
      String? inventoryTypeId,
      String? inventoryType,
      String? rentalBarCodeRangeId,
      String? rentalBarCodeRange,
      String? salesBarCodeRangeId,
      String? salesBarCodeRange,
      String? orderBy,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWarehouseInventoryTypeWarehouseInventoryType(
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        rentalBarCodeRangeId: rentalBarCodeRangeId ?? this.rentalBarCodeRangeId,
        rentalBarCodeRange: rentalBarCodeRange ?? this.rentalBarCodeRange,
        salesBarCodeRangeId: salesBarCodeRangeId ?? this.salesBarCodeRangeId,
        salesBarCodeRange: salesBarCodeRange ?? this.salesBarCodeRange,
        orderBy: orderBy ?? this.orderBy,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWarehouseLocationWarehouseLocation {
  WebApiModulesSettingsWarehouseLocationWarehouseLocation({
    this.warehouseLocationId,
    this.warehouseId,
    this.warehouse,
    this.officeLocationId,
    this.officeLocation,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWarehouseLocationWarehouseLocation.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWarehouseLocationWarehouseLocationFromJson(json);

  @JsonKey(name: 'WarehouseLocationId', includeIfNull: false)
  final String? warehouseLocationId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'OfficeLocation', includeIfNull: false)
  final String? officeLocation;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWarehouseLocationWarehouseLocationFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWarehouseLocationWarehouseLocationToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWarehouseLocationWarehouseLocationToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWarehouseLocationWarehouseLocation &&
            (identical(other.warehouseLocationId, warehouseLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseLocationId, warehouseLocationId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.officeLocation, officeLocation) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocation, officeLocation)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWarehouseLocationWarehouseLocationExtension
    on WebApiModulesSettingsWarehouseLocationWarehouseLocation {
  WebApiModulesSettingsWarehouseLocationWarehouseLocation copyWith(
      {String? warehouseLocationId,
      String? warehouseId,
      String? warehouse,
      String? officeLocationId,
      String? officeLocation,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWarehouseLocationWarehouseLocation(
        warehouseLocationId: warehouseLocationId ?? this.warehouseLocationId,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouse: warehouse ?? this.warehouse,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        officeLocation: officeLocation ?? this.officeLocation,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover {
  WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover({
    this.warehouseQuikLocateApproverId,
    this.warehouseId,
    this.warehouse,
    this.warehouseCode,
    this.usersId,
    this.userName,
    this.officePhone,
    this.phoneExtension,
    this.cellular,
    this.directPhone,
    this.email,
    this.sendEmail,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverFromJson(
          json);

  @JsonKey(name: 'WarehouseQuikLocateApproverId', includeIfNull: false)
  final String? warehouseQuikLocateApproverId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'UsersId', includeIfNull: false)
  final String? usersId;
  @JsonKey(name: 'UserName', includeIfNull: false)
  final String? userName;
  @JsonKey(name: 'OfficePhone', includeIfNull: false)
  final String? officePhone;
  @JsonKey(name: 'PhoneExtension', includeIfNull: false)
  final String? phoneExtension;
  @JsonKey(name: 'Cellular', includeIfNull: false)
  final String? cellular;
  @JsonKey(name: 'DirectPhone', includeIfNull: false)
  final String? directPhone;
  @JsonKey(name: 'Email', includeIfNull: false)
  final String? email;
  @JsonKey(name: 'SendEmail', includeIfNull: false)
  final bool? sendEmail;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover &&
            (identical(other.warehouseQuikLocateApproverId, warehouseQuikLocateApproverId) ||
                const DeepCollectionEquality().equals(
                    other.warehouseQuikLocateApproverId,
                    warehouseQuikLocateApproverId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.usersId, usersId) ||
                const DeepCollectionEquality()
                    .equals(other.usersId, usersId)) &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.officePhone, officePhone) ||
                const DeepCollectionEquality()
                    .equals(other.officePhone, officePhone)) &&
            (identical(other.phoneExtension, phoneExtension) ||
                const DeepCollectionEquality()
                    .equals(other.phoneExtension, phoneExtension)) &&
            (identical(other.cellular, cellular) ||
                const DeepCollectionEquality()
                    .equals(other.cellular, cellular)) &&
            (identical(other.directPhone, directPhone) ||
                const DeepCollectionEquality()
                    .equals(other.directPhone, directPhone)) &&
            (identical(other.email, email) ||
                const DeepCollectionEquality().equals(other.email, email)) &&
            (identical(other.sendEmail, sendEmail) ||
                const DeepCollectionEquality()
                    .equals(other.sendEmail, sendEmail)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApproverExtension
    on WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover {
  WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover
      copyWith(
          {String? warehouseQuikLocateApproverId,
          String? warehouseId,
          String? warehouse,
          String? warehouseCode,
          String? usersId,
          String? userName,
          String? officePhone,
          String? phoneExtension,
          String? cellular,
          String? directPhone,
          String? email,
          bool? sendEmail,
          String? dateStamp,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWarehouseQuikLocateApproverWarehouseQuikLocateApprover(
        warehouseQuikLocateApproverId:
            warehouseQuikLocateApproverId ?? this.warehouseQuikLocateApproverId,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouse: warehouse ?? this.warehouse,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        usersId: usersId ?? this.usersId,
        userName: userName ?? this.userName,
        officePhone: officePhone ?? this.officePhone,
        phoneExtension: phoneExtension ?? this.phoneExtension,
        cellular: cellular ?? this.cellular,
        directPhone: directPhone ?? this.directPhone,
        email: email ?? this.email,
        sendEmail: sendEmail ?? this.sendEmail,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation {
  WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation({
    this.pickupLocationId,
    this.pickupLocation,
    this.warehouseId,
    this.warehouse,
    this.inactive,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationFromJson(
          json);

  @JsonKey(name: 'PickupLocationId', includeIfNull: false)
  final int? pickupLocationId;
  @JsonKey(name: 'PickupLocation', includeIfNull: false)
  final String? pickupLocation;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation &&
            (identical(other.pickupLocationId, pickupLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.pickupLocationId, pickupLocationId)) &&
            (identical(other.pickupLocation, pickupLocation) ||
                const DeepCollectionEquality()
                    .equals(other.pickupLocation, pickupLocation)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocationExtension
    on WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation {
  WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation copyWith(
      {int? pickupLocationId,
      String? pickupLocation,
      String? warehouseId,
      String? warehouse,
      bool? inactive,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWarehouseSettingsPickupLocationPickupLocation(
        pickupLocationId: pickupLocationId ?? this.pickupLocationId,
        pickupLocation: pickupLocation ?? this.pickupLocation,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouse: warehouse ?? this.warehouse,
        inactive: inactive ?? this.inactive,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse {
  WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse({
    this.warehouseId,
    this.warehouse,
    this.warehouseCode,
    this.taxOptionId,
    this.taxOption,
    this.taxCountry,
    this.taxRule,
    this.rentalTaxRate1,
    this.rentalTaxRate2,
    this.rentalExempt,
    this.salesTaxRate1,
    this.salesTaxRate2,
    this.salesExempt,
    this.laborTaxRate1,
    this.laborTaxRate2,
    this.laborExempt,
    this.attention,
    this.address1,
    this.address2,
    this.city,
    this.zipCode,
    this.state,
    this.countryId,
    this.country,
    this.phone,
    this.fax,
    this.assignBarCodesBy,
    this.salesMarkupPercent,
    this.partsMarkupPercent,
    this.markupSales,
    this.markupParts,
    this.includeFreightInSalesCost,
    this.includeFreightInPartsCost,
    this.receiveVendorBarCodes,
    this.allowNegativeInventory,
    this.defaultDeliveryType,
    this.exchangedItemsRepairByDefault,
    this.stagingCompleteComponents,
    this.checkInSortBy,
    this.defaultPackageTruckScheduleMethod,
    this.stageQuantityAccessories,
    this.promptForCheckOutExceptions,
    this.promptForCheckInExceptions,
    this.deleteAssetLocationOnOut,
    this.deleteAssetConditionOnOut,
    this.stagingShowCheckedInHoldingItems,
    this.poDeliveryType,
    this.availabilityCacheDays,
    this.availabilityPreserveConflicts,
    this.defaultRepairDays,
    this.quikLocateDefaultDeliveryType,
    this.repairBillableOrderAgentFrom,
    this.returnListPrintInQuantity,
    this.returnListPrintOutQuantity,
    this.availabilityUseOnPO,
    this.regionId,
    this.region,
    this.color,
    this.availabilityLateDays,
    this.useBarCodeLabelDesigner,
    this.inventoryLabelDesignId,
    this.inventoryLabelDesign,
    this.itemLabelDesignId,
    this.itemLabelDesign,
    this.dataWarehouseExcludeFromROA,
    this.availabilityLateHours,
    this.availabilityStartHour,
    this.availabilityStopHour,
    this.includeTaxInAssetValue,
    this.productionExchangeAvailabilityPercent,
    this.productionexchangeEnabled,
    this.productionExchangeWarehouseCode,
    this.week4RatePercent,
    this.glSuffix,
    this.requireScanVendorBarCodeOnReturn,
    this.glPrefix,
    this.internalDealId,
    this.internalDeal,
    this.internalVendorId,
    this.internalVendor,
    this.calculateOnPoAfterApproved,
    this.transferDefaultReturnToWarehouse,
    this.availabilityCalculateInBackground,
    this.quikLocateCannotTransfer,
    this.quikLocateDefaultRequiredDate,
    this.quikLocateRequiredDaysBefore,
    this.calculateDefaultRentalRates,
    this.rentalDailyRatePercentOfReplacementCost,
    this.rentalWeeklyRateMultipleOfDailyRate,
    this.checkInEnableScanningToAisleShelf,
    this.currencyId,
    this.currencyCode,
    this.currency,
    this.rentalBarCodeRangeId,
    this.rentalBarCodeRange,
    this.rentalFixedAssetBarCodeRangeId,
    this.rentalFixedAssetBarCodeRange,
    this.salesBarCodeRangeId,
    this.salesBarCodeRange,
    this.autoUpdateUnitValueOnReceivingHigherCostItem,
    this.markupReplacementCost,
    this.replacementCostMarkupPercent,
    this.availabilityHourlyDays,
    this.salesRestockPercent,
    this.availabilityExcludeConsigned,
    this.availabilityRequireConsignedReserved,
    this.availabilityEnableQcDelay,
    this.availabilityQcDelayExcludeWeekend,
    this.availabilityQcDelayExcludeHoliday,
    this.availabilityQcDelayIndefinite,
    this.defaultMuteItemsAddedToOrderAtStaging,
    this.quikReceiptEnable,
    this.storageContainerCheckInEnable,
    this.storageContainerStagingEnable,
    this.storageContainerRescanRequired,
    this.quikReceiptTermsConditionsId,
    this.quikReceiptTermsConditions,
    this.disableSubstituteNote,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWarehouseSettingsWarehouseWarehouseFromJson(json);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'TaxOptionId', includeIfNull: false)
  final String? taxOptionId;
  @JsonKey(name: 'TaxOption', includeIfNull: false)
  final String? taxOption;
  @JsonKey(name: 'TaxCountry', includeIfNull: false)
  final String? taxCountry;
  @JsonKey(name: 'TaxRule', includeIfNull: false)
  final String? taxRule;
  @JsonKey(name: 'RentalTaxRate1', includeIfNull: false)
  final double? rentalTaxRate1;
  @JsonKey(name: 'RentalTaxRate2', includeIfNull: false)
  final double? rentalTaxRate2;
  @JsonKey(name: 'RentalExempt', includeIfNull: false)
  final bool? rentalExempt;
  @JsonKey(name: 'SalesTaxRate1', includeIfNull: false)
  final double? salesTaxRate1;
  @JsonKey(name: 'SalesTaxRate2', includeIfNull: false)
  final double? salesTaxRate2;
  @JsonKey(name: 'SalesExempt', includeIfNull: false)
  final bool? salesExempt;
  @JsonKey(name: 'LaborTaxRate1', includeIfNull: false)
  final double? laborTaxRate1;
  @JsonKey(name: 'LaborTaxRate2', includeIfNull: false)
  final double? laborTaxRate2;
  @JsonKey(name: 'LaborExempt', includeIfNull: false)
  final bool? laborExempt;
  @JsonKey(name: 'Attention', includeIfNull: false)
  final String? attention;
  @JsonKey(name: 'Address1', includeIfNull: false)
  final String? address1;
  @JsonKey(name: 'Address2', includeIfNull: false)
  final String? address2;
  @JsonKey(name: 'City', includeIfNull: false)
  final String? city;
  @JsonKey(name: 'ZipCode', includeIfNull: false)
  final String? zipCode;
  @JsonKey(name: 'State', includeIfNull: false)
  final String? state;
  @JsonKey(name: 'CountryId', includeIfNull: false)
  final String? countryId;
  @JsonKey(name: 'Country', includeIfNull: false)
  final String? country;
  @JsonKey(name: 'Phone', includeIfNull: false)
  final String? phone;
  @JsonKey(name: 'Fax', includeIfNull: false)
  final String? fax;
  @JsonKey(name: 'AssignBarCodesBy', includeIfNull: false)
  final String? assignBarCodesBy;
  @JsonKey(name: 'SalesMarkupPercent', includeIfNull: false)
  final double? salesMarkupPercent;
  @JsonKey(name: 'PartsMarkupPercent', includeIfNull: false)
  final double? partsMarkupPercent;
  @JsonKey(name: 'MarkupSales', includeIfNull: false)
  final bool? markupSales;
  @JsonKey(name: 'MarkupParts', includeIfNull: false)
  final bool? markupParts;
  @JsonKey(name: 'IncludeFreightInSalesCost', includeIfNull: false)
  final bool? includeFreightInSalesCost;
  @JsonKey(name: 'IncludeFreightInPartsCost', includeIfNull: false)
  final bool? includeFreightInPartsCost;
  @JsonKey(name: 'ReceiveVendorBarCodes', includeIfNull: false)
  final bool? receiveVendorBarCodes;
  @JsonKey(name: 'AllowNegativeInventory', includeIfNull: false)
  final bool? allowNegativeInventory;
  @JsonKey(name: 'DefaultDeliveryType', includeIfNull: false)
  final String? defaultDeliveryType;
  @JsonKey(name: 'ExchangedItemsRepairByDefault', includeIfNull: false)
  final bool? exchangedItemsRepairByDefault;
  @JsonKey(name: 'StagingCompleteComponents', includeIfNull: false)
  final String? stagingCompleteComponents;
  @JsonKey(name: 'CheckInSortBy', includeIfNull: false)
  final String? checkInSortBy;
  @JsonKey(name: 'DefaultPackageTruckScheduleMethod', includeIfNull: false)
  final String? defaultPackageTruckScheduleMethod;
  @JsonKey(name: 'StageQuantityAccessories', includeIfNull: false)
  final bool? stageQuantityAccessories;
  @JsonKey(name: 'PromptForCheckOutExceptions', includeIfNull: false)
  final bool? promptForCheckOutExceptions;
  @JsonKey(name: 'PromptForCheckInExceptions', includeIfNull: false)
  final bool? promptForCheckInExceptions;
  @JsonKey(name: 'DeleteAssetLocationOnOut', includeIfNull: false)
  final bool? deleteAssetLocationOnOut;
  @JsonKey(name: 'DeleteAssetConditionOnOut', includeIfNull: false)
  final bool? deleteAssetConditionOnOut;
  @JsonKey(name: 'StagingShowCheckedInHoldingItems', includeIfNull: false)
  final bool? stagingShowCheckedInHoldingItems;
  @JsonKey(name: 'PoDeliveryType', includeIfNull: false)
  final String? poDeliveryType;
  @JsonKey(name: 'AvailabilityCacheDays', includeIfNull: false)
  final int? availabilityCacheDays;
  @JsonKey(name: 'AvailabilityPreserveConflicts', includeIfNull: false)
  final bool? availabilityPreserveConflicts;
  @JsonKey(name: 'DefaultRepairDays', includeIfNull: false)
  final int? defaultRepairDays;
  @JsonKey(name: 'QuikLocateDefaultDeliveryType', includeIfNull: false)
  final String? quikLocateDefaultDeliveryType;
  @JsonKey(name: 'RepairBillableOrderAgentFrom', includeIfNull: false)
  final String? repairBillableOrderAgentFrom;
  @JsonKey(name: 'ReturnListPrintInQuantity', includeIfNull: false)
  final bool? returnListPrintInQuantity;
  @JsonKey(name: 'ReturnListPrintOutQuantity', includeIfNull: false)
  final bool? returnListPrintOutQuantity;
  @JsonKey(name: 'AvailabilityUseOnPO', includeIfNull: false)
  final bool? availabilityUseOnPO;
  @JsonKey(name: 'RegionId', includeIfNull: false)
  final String? regionId;
  @JsonKey(name: 'Region', includeIfNull: false)
  final String? region;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'AvailabilityLateDays', includeIfNull: false)
  final int? availabilityLateDays;
  @JsonKey(name: 'UseBarCodeLabelDesigner', includeIfNull: false)
  final bool? useBarCodeLabelDesigner;
  @JsonKey(name: 'InventoryLabelDesignId', includeIfNull: false)
  final String? inventoryLabelDesignId;
  @JsonKey(name: 'InventoryLabelDesign', includeIfNull: false)
  final String? inventoryLabelDesign;
  @JsonKey(name: 'ItemLabelDesignId', includeIfNull: false)
  final String? itemLabelDesignId;
  @JsonKey(name: 'ItemLabelDesign', includeIfNull: false)
  final String? itemLabelDesign;
  @JsonKey(name: 'DataWarehouseExcludeFromROA', includeIfNull: false)
  final bool? dataWarehouseExcludeFromROA;
  @JsonKey(name: 'AvailabilityLateHours', includeIfNull: false)
  final int? availabilityLateHours;
  @JsonKey(name: 'AvailabilityStartHour', includeIfNull: false)
  final int? availabilityStartHour;
  @JsonKey(name: 'AvailabilityStopHour', includeIfNull: false)
  final int? availabilityStopHour;
  @JsonKey(name: 'IncludeTaxInAssetValue', includeIfNull: false)
  final bool? includeTaxInAssetValue;
  @JsonKey(name: 'ProductionExchangeAvailabilityPercent', includeIfNull: false)
  final int? productionExchangeAvailabilityPercent;
  @JsonKey(name: 'ProductionexchangeEnabled', includeIfNull: false)
  final bool? productionexchangeEnabled;
  @JsonKey(name: 'ProductionExchangeWarehouseCode', includeIfNull: false)
  final String? productionExchangeWarehouseCode;
  @JsonKey(name: 'Week4RatePercent', includeIfNull: false)
  final double? week4RatePercent;
  @JsonKey(name: 'GlSuffix', includeIfNull: false)
  final String? glSuffix;
  @JsonKey(name: 'RequireScanVendorBarCodeOnReturn', includeIfNull: false)
  final bool? requireScanVendorBarCodeOnReturn;
  @JsonKey(name: 'GlPrefix', includeIfNull: false)
  final String? glPrefix;
  @JsonKey(name: 'InternalDealId', includeIfNull: false)
  final String? internalDealId;
  @JsonKey(name: 'InternalDeal', includeIfNull: false)
  final String? internalDeal;
  @JsonKey(name: 'InternalVendorId', includeIfNull: false)
  final String? internalVendorId;
  @JsonKey(name: 'InternalVendor', includeIfNull: false)
  final String? internalVendor;
  @JsonKey(name: 'CalculateOnPoAfterApproved', includeIfNull: false)
  final bool? calculateOnPoAfterApproved;
  @JsonKey(name: 'TransferDefaultReturnToWarehouse', includeIfNull: false)
  final bool? transferDefaultReturnToWarehouse;
  @JsonKey(name: 'AvailabilityCalculateInBackground', includeIfNull: false)
  final bool? availabilityCalculateInBackground;
  @JsonKey(name: 'QuikLocateCannotTransfer', includeIfNull: false)
  final bool? quikLocateCannotTransfer;
  @JsonKey(name: 'QuikLocateDefaultRequiredDate', includeIfNull: false)
  final String? quikLocateDefaultRequiredDate;
  @JsonKey(name: 'QuikLocateRequiredDaysBefore', includeIfNull: false)
  final int? quikLocateRequiredDaysBefore;
  @JsonKey(name: 'CalculateDefaultRentalRates', includeIfNull: false)
  final bool? calculateDefaultRentalRates;
  @JsonKey(
      name: 'RentalDailyRatePercentOfReplacementCost', includeIfNull: false)
  final double? rentalDailyRatePercentOfReplacementCost;
  @JsonKey(name: 'RentalWeeklyRateMultipleOfDailyRate', includeIfNull: false)
  final double? rentalWeeklyRateMultipleOfDailyRate;
  @JsonKey(name: 'CheckInEnableScanningToAisleShelf', includeIfNull: false)
  final bool? checkInEnableScanningToAisleShelf;
  @JsonKey(name: 'CurrencyId', includeIfNull: false)
  final String? currencyId;
  @JsonKey(name: 'CurrencyCode', includeIfNull: false)
  final String? currencyCode;
  @JsonKey(name: 'Currency', includeIfNull: false)
  final String? currency;
  @JsonKey(name: 'RentalBarCodeRangeId', includeIfNull: false)
  final String? rentalBarCodeRangeId;
  @JsonKey(name: 'RentalBarCodeRange', includeIfNull: false)
  final String? rentalBarCodeRange;
  @JsonKey(name: 'RentalFixedAssetBarCodeRangeId', includeIfNull: false)
  final String? rentalFixedAssetBarCodeRangeId;
  @JsonKey(name: 'RentalFixedAssetBarCodeRange', includeIfNull: false)
  final String? rentalFixedAssetBarCodeRange;
  @JsonKey(name: 'SalesBarCodeRangeId', includeIfNull: false)
  final String? salesBarCodeRangeId;
  @JsonKey(name: 'SalesBarCodeRange', includeIfNull: false)
  final String? salesBarCodeRange;
  @JsonKey(
      name: 'AutoUpdateUnitValueOnReceivingHigherCostItem',
      includeIfNull: false)
  final bool? autoUpdateUnitValueOnReceivingHigherCostItem;
  @JsonKey(name: 'MarkupReplacementCost', includeIfNull: false)
  final bool? markupReplacementCost;
  @JsonKey(name: 'ReplacementCostMarkupPercent', includeIfNull: false)
  final double? replacementCostMarkupPercent;
  @JsonKey(name: 'AvailabilityHourlyDays', includeIfNull: false)
  final int? availabilityHourlyDays;
  @JsonKey(name: 'SalesRestockPercent', includeIfNull: false)
  final double? salesRestockPercent;
  @JsonKey(name: 'AvailabilityExcludeConsigned', includeIfNull: false)
  final bool? availabilityExcludeConsigned;
  @JsonKey(name: 'AvailabilityRequireConsignedReserved', includeIfNull: false)
  final bool? availabilityRequireConsignedReserved;
  @JsonKey(name: 'AvailabilityEnableQcDelay', includeIfNull: false)
  final bool? availabilityEnableQcDelay;
  @JsonKey(name: 'AvailabilityQcDelayExcludeWeekend', includeIfNull: false)
  final bool? availabilityQcDelayExcludeWeekend;
  @JsonKey(name: 'AvailabilityQcDelayExcludeHoliday', includeIfNull: false)
  final bool? availabilityQcDelayExcludeHoliday;
  @JsonKey(name: 'AvailabilityQcDelayIndefinite', includeIfNull: false)
  final bool? availabilityQcDelayIndefinite;
  @JsonKey(name: 'DefaultMuteItemsAddedToOrderAtStaging', includeIfNull: false)
  final bool? defaultMuteItemsAddedToOrderAtStaging;
  @JsonKey(name: 'QuikReceiptEnable', includeIfNull: false)
  final bool? quikReceiptEnable;
  @JsonKey(name: 'StorageContainerCheckInEnable', includeIfNull: false)
  final bool? storageContainerCheckInEnable;
  @JsonKey(name: 'StorageContainerStagingEnable', includeIfNull: false)
  final bool? storageContainerStagingEnable;
  @JsonKey(name: 'StorageContainerRescanRequired', includeIfNull: false)
  final bool? storageContainerRescanRequired;
  @JsonKey(name: 'QuikReceiptTermsConditionsId', includeIfNull: false)
  final String? quikReceiptTermsConditionsId;
  @JsonKey(name: 'QuikReceiptTermsConditions', includeIfNull: false)
  final String? quikReceiptTermsConditions;
  @JsonKey(name: 'DisableSubstituteNote', includeIfNull: false)
  final bool? disableSubstituteNote;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWarehouseSettingsWarehouseWarehouseFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWarehouseSettingsWarehouseWarehouseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWarehouseSettingsWarehouseWarehouseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.taxOptionId, taxOptionId) ||
                const DeepCollectionEquality()
                    .equals(other.taxOptionId, taxOptionId)) &&
            (identical(other.taxOption, taxOption) ||
                const DeepCollectionEquality()
                    .equals(other.taxOption, taxOption)) &&
            (identical(other.taxCountry, taxCountry) ||
                const DeepCollectionEquality()
                    .equals(other.taxCountry, taxCountry)) &&
            (identical(other.taxRule, taxRule) ||
                const DeepCollectionEquality()
                    .equals(other.taxRule, taxRule)) &&
            (identical(other.rentalTaxRate1, rentalTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.rentalTaxRate1, rentalTaxRate1)) &&
            (identical(other.rentalTaxRate2, rentalTaxRate2) ||
                const DeepCollectionEquality()
                    .equals(other.rentalTaxRate2, rentalTaxRate2)) &&
            (identical(other.rentalExempt, rentalExempt) ||
                const DeepCollectionEquality()
                    .equals(other.rentalExempt, rentalExempt)) &&
            (identical(other.salesTaxRate1, salesTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.salesTaxRate1, salesTaxRate1)) &&
            (identical(other.salesTaxRate2, salesTaxRate2) ||
                const DeepCollectionEquality()
                    .equals(other.salesTaxRate2, salesTaxRate2)) &&
            (identical(other.salesExempt, salesExempt) ||
                const DeepCollectionEquality()
                    .equals(other.salesExempt, salesExempt)) &&
            (identical(other.laborTaxRate1, laborTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.laborTaxRate1, laborTaxRate1)) &&
            (identical(other.laborTaxRate2, laborTaxRate2) ||
                const DeepCollectionEquality()
                    .equals(other.laborTaxRate2, laborTaxRate2)) &&
            (identical(other.laborExempt, laborExempt) ||
                const DeepCollectionEquality()
                    .equals(other.laborExempt, laborExempt)) &&
            (identical(other.attention, attention) ||
                const DeepCollectionEquality()
                    .equals(other.attention, attention)) &&
            (identical(other.address1, address1) ||
                const DeepCollectionEquality()
                    .equals(other.address1, address1)) &&
            (identical(other.address2, address2) ||
                const DeepCollectionEquality()
                    .equals(other.address2, address2)) &&
            (identical(other.city, city) ||
                const DeepCollectionEquality().equals(other.city, city)) &&
            (identical(other.zipCode, zipCode) ||
                const DeepCollectionEquality()
                    .equals(other.zipCode, zipCode)) &&
            (identical(other.state, state) ||
                const DeepCollectionEquality().equals(other.state, state)) &&
            (identical(other.countryId, countryId) ||
                const DeepCollectionEquality().equals(other.countryId, countryId)) &&
            (identical(other.country, country) || const DeepCollectionEquality().equals(other.country, country)) &&
            (identical(other.phone, phone) || const DeepCollectionEquality().equals(other.phone, phone)) &&
            (identical(other.fax, fax) || const DeepCollectionEquality().equals(other.fax, fax)) &&
            (identical(other.assignBarCodesBy, assignBarCodesBy) || const DeepCollectionEquality().equals(other.assignBarCodesBy, assignBarCodesBy)) &&
            (identical(other.salesMarkupPercent, salesMarkupPercent) || const DeepCollectionEquality().equals(other.salesMarkupPercent, salesMarkupPercent)) &&
            (identical(other.partsMarkupPercent, partsMarkupPercent) || const DeepCollectionEquality().equals(other.partsMarkupPercent, partsMarkupPercent)) &&
            (identical(other.markupSales, markupSales) || const DeepCollectionEquality().equals(other.markupSales, markupSales)) &&
            (identical(other.markupParts, markupParts) || const DeepCollectionEquality().equals(other.markupParts, markupParts)) &&
            (identical(other.includeFreightInSalesCost, includeFreightInSalesCost) || const DeepCollectionEquality().equals(other.includeFreightInSalesCost, includeFreightInSalesCost)) &&
            (identical(other.includeFreightInPartsCost, includeFreightInPartsCost) || const DeepCollectionEquality().equals(other.includeFreightInPartsCost, includeFreightInPartsCost)) &&
            (identical(other.receiveVendorBarCodes, receiveVendorBarCodes) || const DeepCollectionEquality().equals(other.receiveVendorBarCodes, receiveVendorBarCodes)) &&
            (identical(other.allowNegativeInventory, allowNegativeInventory) || const DeepCollectionEquality().equals(other.allowNegativeInventory, allowNegativeInventory)) &&
            (identical(other.defaultDeliveryType, defaultDeliveryType) || const DeepCollectionEquality().equals(other.defaultDeliveryType, defaultDeliveryType)) &&
            (identical(other.exchangedItemsRepairByDefault, exchangedItemsRepairByDefault) || const DeepCollectionEquality().equals(other.exchangedItemsRepairByDefault, exchangedItemsRepairByDefault)) &&
            (identical(other.stagingCompleteComponents, stagingCompleteComponents) || const DeepCollectionEquality().equals(other.stagingCompleteComponents, stagingCompleteComponents)) &&
            (identical(other.checkInSortBy, checkInSortBy) || const DeepCollectionEquality().equals(other.checkInSortBy, checkInSortBy)) &&
            (identical(other.defaultPackageTruckScheduleMethod, defaultPackageTruckScheduleMethod) || const DeepCollectionEquality().equals(other.defaultPackageTruckScheduleMethod, defaultPackageTruckScheduleMethod)) &&
            (identical(other.stageQuantityAccessories, stageQuantityAccessories) || const DeepCollectionEquality().equals(other.stageQuantityAccessories, stageQuantityAccessories)) &&
            (identical(other.promptForCheckOutExceptions, promptForCheckOutExceptions) || const DeepCollectionEquality().equals(other.promptForCheckOutExceptions, promptForCheckOutExceptions)) &&
            (identical(other.promptForCheckInExceptions, promptForCheckInExceptions) || const DeepCollectionEquality().equals(other.promptForCheckInExceptions, promptForCheckInExceptions)) &&
            (identical(other.deleteAssetLocationOnOut, deleteAssetLocationOnOut) || const DeepCollectionEquality().equals(other.deleteAssetLocationOnOut, deleteAssetLocationOnOut)) &&
            (identical(other.deleteAssetConditionOnOut, deleteAssetConditionOnOut) || const DeepCollectionEquality().equals(other.deleteAssetConditionOnOut, deleteAssetConditionOnOut)) &&
            (identical(other.stagingShowCheckedInHoldingItems, stagingShowCheckedInHoldingItems) || const DeepCollectionEquality().equals(other.stagingShowCheckedInHoldingItems, stagingShowCheckedInHoldingItems)) &&
            (identical(other.poDeliveryType, poDeliveryType) || const DeepCollectionEquality().equals(other.poDeliveryType, poDeliveryType)) &&
            (identical(other.availabilityCacheDays, availabilityCacheDays) || const DeepCollectionEquality().equals(other.availabilityCacheDays, availabilityCacheDays)) &&
            (identical(other.availabilityPreserveConflicts, availabilityPreserveConflicts) || const DeepCollectionEquality().equals(other.availabilityPreserveConflicts, availabilityPreserveConflicts)) &&
            (identical(other.defaultRepairDays, defaultRepairDays) || const DeepCollectionEquality().equals(other.defaultRepairDays, defaultRepairDays)) &&
            (identical(other.quikLocateDefaultDeliveryType, quikLocateDefaultDeliveryType) || const DeepCollectionEquality().equals(other.quikLocateDefaultDeliveryType, quikLocateDefaultDeliveryType)) &&
            (identical(other.repairBillableOrderAgentFrom, repairBillableOrderAgentFrom) || const DeepCollectionEquality().equals(other.repairBillableOrderAgentFrom, repairBillableOrderAgentFrom)) &&
            (identical(other.returnListPrintInQuantity, returnListPrintInQuantity) || const DeepCollectionEquality().equals(other.returnListPrintInQuantity, returnListPrintInQuantity)) &&
            (identical(other.returnListPrintOutQuantity, returnListPrintOutQuantity) || const DeepCollectionEquality().equals(other.returnListPrintOutQuantity, returnListPrintOutQuantity)) &&
            (identical(other.availabilityUseOnPO, availabilityUseOnPO) || const DeepCollectionEquality().equals(other.availabilityUseOnPO, availabilityUseOnPO)) &&
            (identical(other.regionId, regionId) || const DeepCollectionEquality().equals(other.regionId, regionId)) &&
            (identical(other.region, region) || const DeepCollectionEquality().equals(other.region, region)) &&
            (identical(other.color, color) || const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.availabilityLateDays, availabilityLateDays) || const DeepCollectionEquality().equals(other.availabilityLateDays, availabilityLateDays)) &&
            (identical(other.useBarCodeLabelDesigner, useBarCodeLabelDesigner) || const DeepCollectionEquality().equals(other.useBarCodeLabelDesigner, useBarCodeLabelDesigner)) &&
            (identical(other.inventoryLabelDesignId, inventoryLabelDesignId) || const DeepCollectionEquality().equals(other.inventoryLabelDesignId, inventoryLabelDesignId)) &&
            (identical(other.inventoryLabelDesign, inventoryLabelDesign) || const DeepCollectionEquality().equals(other.inventoryLabelDesign, inventoryLabelDesign)) &&
            (identical(other.itemLabelDesignId, itemLabelDesignId) || const DeepCollectionEquality().equals(other.itemLabelDesignId, itemLabelDesignId)) &&
            (identical(other.itemLabelDesign, itemLabelDesign) || const DeepCollectionEquality().equals(other.itemLabelDesign, itemLabelDesign)) &&
            (identical(other.dataWarehouseExcludeFromROA, dataWarehouseExcludeFromROA) || const DeepCollectionEquality().equals(other.dataWarehouseExcludeFromROA, dataWarehouseExcludeFromROA)) &&
            (identical(other.availabilityLateHours, availabilityLateHours) || const DeepCollectionEquality().equals(other.availabilityLateHours, availabilityLateHours)) &&
            (identical(other.availabilityStartHour, availabilityStartHour) || const DeepCollectionEquality().equals(other.availabilityStartHour, availabilityStartHour)) &&
            (identical(other.availabilityStopHour, availabilityStopHour) || const DeepCollectionEquality().equals(other.availabilityStopHour, availabilityStopHour)) &&
            (identical(other.includeTaxInAssetValue, includeTaxInAssetValue) || const DeepCollectionEquality().equals(other.includeTaxInAssetValue, includeTaxInAssetValue)) &&
            (identical(other.productionExchangeAvailabilityPercent, productionExchangeAvailabilityPercent) || const DeepCollectionEquality().equals(other.productionExchangeAvailabilityPercent, productionExchangeAvailabilityPercent)) &&
            (identical(other.productionexchangeEnabled, productionexchangeEnabled) || const DeepCollectionEquality().equals(other.productionexchangeEnabled, productionexchangeEnabled)) &&
            (identical(other.productionExchangeWarehouseCode, productionExchangeWarehouseCode) || const DeepCollectionEquality().equals(other.productionExchangeWarehouseCode, productionExchangeWarehouseCode)) &&
            (identical(other.week4RatePercent, week4RatePercent) || const DeepCollectionEquality().equals(other.week4RatePercent, week4RatePercent)) &&
            (identical(other.glSuffix, glSuffix) || const DeepCollectionEquality().equals(other.glSuffix, glSuffix)) &&
            (identical(other.requireScanVendorBarCodeOnReturn, requireScanVendorBarCodeOnReturn) || const DeepCollectionEquality().equals(other.requireScanVendorBarCodeOnReturn, requireScanVendorBarCodeOnReturn)) &&
            (identical(other.glPrefix, glPrefix) || const DeepCollectionEquality().equals(other.glPrefix, glPrefix)) &&
            (identical(other.internalDealId, internalDealId) || const DeepCollectionEquality().equals(other.internalDealId, internalDealId)) &&
            (identical(other.internalDeal, internalDeal) || const DeepCollectionEquality().equals(other.internalDeal, internalDeal)) &&
            (identical(other.internalVendorId, internalVendorId) || const DeepCollectionEquality().equals(other.internalVendorId, internalVendorId)) &&
            (identical(other.internalVendor, internalVendor) || const DeepCollectionEquality().equals(other.internalVendor, internalVendor)) &&
            (identical(other.calculateOnPoAfterApproved, calculateOnPoAfterApproved) || const DeepCollectionEquality().equals(other.calculateOnPoAfterApproved, calculateOnPoAfterApproved)) &&
            (identical(other.transferDefaultReturnToWarehouse, transferDefaultReturnToWarehouse) || const DeepCollectionEquality().equals(other.transferDefaultReturnToWarehouse, transferDefaultReturnToWarehouse)) &&
            (identical(other.availabilityCalculateInBackground, availabilityCalculateInBackground) || const DeepCollectionEquality().equals(other.availabilityCalculateInBackground, availabilityCalculateInBackground)) &&
            (identical(other.quikLocateCannotTransfer, quikLocateCannotTransfer) || const DeepCollectionEquality().equals(other.quikLocateCannotTransfer, quikLocateCannotTransfer)) &&
            (identical(other.quikLocateDefaultRequiredDate, quikLocateDefaultRequiredDate) || const DeepCollectionEquality().equals(other.quikLocateDefaultRequiredDate, quikLocateDefaultRequiredDate)) &&
            (identical(other.quikLocateRequiredDaysBefore, quikLocateRequiredDaysBefore) || const DeepCollectionEquality().equals(other.quikLocateRequiredDaysBefore, quikLocateRequiredDaysBefore)) &&
            (identical(other.calculateDefaultRentalRates, calculateDefaultRentalRates) || const DeepCollectionEquality().equals(other.calculateDefaultRentalRates, calculateDefaultRentalRates)) &&
            (identical(other.rentalDailyRatePercentOfReplacementCost, rentalDailyRatePercentOfReplacementCost) || const DeepCollectionEquality().equals(other.rentalDailyRatePercentOfReplacementCost, rentalDailyRatePercentOfReplacementCost)) &&
            (identical(other.rentalWeeklyRateMultipleOfDailyRate, rentalWeeklyRateMultipleOfDailyRate) || const DeepCollectionEquality().equals(other.rentalWeeklyRateMultipleOfDailyRate, rentalWeeklyRateMultipleOfDailyRate)) &&
            (identical(other.checkInEnableScanningToAisleShelf, checkInEnableScanningToAisleShelf) || const DeepCollectionEquality().equals(other.checkInEnableScanningToAisleShelf, checkInEnableScanningToAisleShelf)) &&
            (identical(other.currencyId, currencyId) || const DeepCollectionEquality().equals(other.currencyId, currencyId)) &&
            (identical(other.currencyCode, currencyCode) || const DeepCollectionEquality().equals(other.currencyCode, currencyCode)) &&
            (identical(other.currency, currency) || const DeepCollectionEquality().equals(other.currency, currency)) &&
            (identical(other.rentalBarCodeRangeId, rentalBarCodeRangeId) || const DeepCollectionEquality().equals(other.rentalBarCodeRangeId, rentalBarCodeRangeId)) &&
            (identical(other.rentalBarCodeRange, rentalBarCodeRange) || const DeepCollectionEquality().equals(other.rentalBarCodeRange, rentalBarCodeRange)) &&
            (identical(other.rentalFixedAssetBarCodeRangeId, rentalFixedAssetBarCodeRangeId) || const DeepCollectionEquality().equals(other.rentalFixedAssetBarCodeRangeId, rentalFixedAssetBarCodeRangeId)) &&
            (identical(other.rentalFixedAssetBarCodeRange, rentalFixedAssetBarCodeRange) || const DeepCollectionEquality().equals(other.rentalFixedAssetBarCodeRange, rentalFixedAssetBarCodeRange)) &&
            (identical(other.salesBarCodeRangeId, salesBarCodeRangeId) || const DeepCollectionEquality().equals(other.salesBarCodeRangeId, salesBarCodeRangeId)) &&
            (identical(other.salesBarCodeRange, salesBarCodeRange) || const DeepCollectionEquality().equals(other.salesBarCodeRange, salesBarCodeRange)) &&
            (identical(other.autoUpdateUnitValueOnReceivingHigherCostItem, autoUpdateUnitValueOnReceivingHigherCostItem) || const DeepCollectionEquality().equals(other.autoUpdateUnitValueOnReceivingHigherCostItem, autoUpdateUnitValueOnReceivingHigherCostItem)) &&
            (identical(other.markupReplacementCost, markupReplacementCost) || const DeepCollectionEquality().equals(other.markupReplacementCost, markupReplacementCost)) &&
            (identical(other.replacementCostMarkupPercent, replacementCostMarkupPercent) || const DeepCollectionEquality().equals(other.replacementCostMarkupPercent, replacementCostMarkupPercent)) &&
            (identical(other.availabilityHourlyDays, availabilityHourlyDays) || const DeepCollectionEquality().equals(other.availabilityHourlyDays, availabilityHourlyDays)) &&
            (identical(other.salesRestockPercent, salesRestockPercent) || const DeepCollectionEquality().equals(other.salesRestockPercent, salesRestockPercent)) &&
            (identical(other.availabilityExcludeConsigned, availabilityExcludeConsigned) || const DeepCollectionEquality().equals(other.availabilityExcludeConsigned, availabilityExcludeConsigned)) &&
            (identical(other.availabilityRequireConsignedReserved, availabilityRequireConsignedReserved) || const DeepCollectionEquality().equals(other.availabilityRequireConsignedReserved, availabilityRequireConsignedReserved)) &&
            (identical(other.availabilityEnableQcDelay, availabilityEnableQcDelay) || const DeepCollectionEquality().equals(other.availabilityEnableQcDelay, availabilityEnableQcDelay)) &&
            (identical(other.availabilityQcDelayExcludeWeekend, availabilityQcDelayExcludeWeekend) || const DeepCollectionEquality().equals(other.availabilityQcDelayExcludeWeekend, availabilityQcDelayExcludeWeekend)) &&
            (identical(other.availabilityQcDelayExcludeHoliday, availabilityQcDelayExcludeHoliday) || const DeepCollectionEquality().equals(other.availabilityQcDelayExcludeHoliday, availabilityQcDelayExcludeHoliday)) &&
            (identical(other.availabilityQcDelayIndefinite, availabilityQcDelayIndefinite) || const DeepCollectionEquality().equals(other.availabilityQcDelayIndefinite, availabilityQcDelayIndefinite)) &&
            (identical(other.defaultMuteItemsAddedToOrderAtStaging, defaultMuteItemsAddedToOrderAtStaging) || const DeepCollectionEquality().equals(other.defaultMuteItemsAddedToOrderAtStaging, defaultMuteItemsAddedToOrderAtStaging)) &&
            (identical(other.quikReceiptEnable, quikReceiptEnable) || const DeepCollectionEquality().equals(other.quikReceiptEnable, quikReceiptEnable)) &&
            (identical(other.storageContainerCheckInEnable, storageContainerCheckInEnable) || const DeepCollectionEquality().equals(other.storageContainerCheckInEnable, storageContainerCheckInEnable)) &&
            (identical(other.storageContainerStagingEnable, storageContainerStagingEnable) || const DeepCollectionEquality().equals(other.storageContainerStagingEnable, storageContainerStagingEnable)) &&
            (identical(other.storageContainerRescanRequired, storageContainerRescanRequired) || const DeepCollectionEquality().equals(other.storageContainerRescanRequired, storageContainerRescanRequired)) &&
            (identical(other.quikReceiptTermsConditionsId, quikReceiptTermsConditionsId) || const DeepCollectionEquality().equals(other.quikReceiptTermsConditionsId, quikReceiptTermsConditionsId)) &&
            (identical(other.quikReceiptTermsConditions, quikReceiptTermsConditions) || const DeepCollectionEquality().equals(other.quikReceiptTermsConditions, quikReceiptTermsConditions)) &&
            (identical(other.disableSubstituteNote, disableSubstituteNote) || const DeepCollectionEquality().equals(other.disableSubstituteNote, disableSubstituteNote)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWarehouseSettingsWarehouseWarehouseExtension
    on WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse {
  WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse copyWith(
      {String? warehouseId,
      String? warehouse,
      String? warehouseCode,
      String? taxOptionId,
      String? taxOption,
      String? taxCountry,
      String? taxRule,
      double? rentalTaxRate1,
      double? rentalTaxRate2,
      bool? rentalExempt,
      double? salesTaxRate1,
      double? salesTaxRate2,
      bool? salesExempt,
      double? laborTaxRate1,
      double? laborTaxRate2,
      bool? laborExempt,
      String? attention,
      String? address1,
      String? address2,
      String? city,
      String? zipCode,
      String? state,
      String? countryId,
      String? country,
      String? phone,
      String? fax,
      String? assignBarCodesBy,
      double? salesMarkupPercent,
      double? partsMarkupPercent,
      bool? markupSales,
      bool? markupParts,
      bool? includeFreightInSalesCost,
      bool? includeFreightInPartsCost,
      bool? receiveVendorBarCodes,
      bool? allowNegativeInventory,
      String? defaultDeliveryType,
      bool? exchangedItemsRepairByDefault,
      String? stagingCompleteComponents,
      String? checkInSortBy,
      String? defaultPackageTruckScheduleMethod,
      bool? stageQuantityAccessories,
      bool? promptForCheckOutExceptions,
      bool? promptForCheckInExceptions,
      bool? deleteAssetLocationOnOut,
      bool? deleteAssetConditionOnOut,
      bool? stagingShowCheckedInHoldingItems,
      String? poDeliveryType,
      int? availabilityCacheDays,
      bool? availabilityPreserveConflicts,
      int? defaultRepairDays,
      String? quikLocateDefaultDeliveryType,
      String? repairBillableOrderAgentFrom,
      bool? returnListPrintInQuantity,
      bool? returnListPrintOutQuantity,
      bool? availabilityUseOnPO,
      String? regionId,
      String? region,
      String? color,
      int? availabilityLateDays,
      bool? useBarCodeLabelDesigner,
      String? inventoryLabelDesignId,
      String? inventoryLabelDesign,
      String? itemLabelDesignId,
      String? itemLabelDesign,
      bool? dataWarehouseExcludeFromROA,
      int? availabilityLateHours,
      int? availabilityStartHour,
      int? availabilityStopHour,
      bool? includeTaxInAssetValue,
      int? productionExchangeAvailabilityPercent,
      bool? productionexchangeEnabled,
      String? productionExchangeWarehouseCode,
      double? week4RatePercent,
      String? glSuffix,
      bool? requireScanVendorBarCodeOnReturn,
      String? glPrefix,
      String? internalDealId,
      String? internalDeal,
      String? internalVendorId,
      String? internalVendor,
      bool? calculateOnPoAfterApproved,
      bool? transferDefaultReturnToWarehouse,
      bool? availabilityCalculateInBackground,
      bool? quikLocateCannotTransfer,
      String? quikLocateDefaultRequiredDate,
      int? quikLocateRequiredDaysBefore,
      bool? calculateDefaultRentalRates,
      double? rentalDailyRatePercentOfReplacementCost,
      double? rentalWeeklyRateMultipleOfDailyRate,
      bool? checkInEnableScanningToAisleShelf,
      String? currencyId,
      String? currencyCode,
      String? currency,
      String? rentalBarCodeRangeId,
      String? rentalBarCodeRange,
      String? rentalFixedAssetBarCodeRangeId,
      String? rentalFixedAssetBarCodeRange,
      String? salesBarCodeRangeId,
      String? salesBarCodeRange,
      bool? autoUpdateUnitValueOnReceivingHigherCostItem,
      bool? markupReplacementCost,
      double? replacementCostMarkupPercent,
      int? availabilityHourlyDays,
      double? salesRestockPercent,
      bool? availabilityExcludeConsigned,
      bool? availabilityRequireConsignedReserved,
      bool? availabilityEnableQcDelay,
      bool? availabilityQcDelayExcludeWeekend,
      bool? availabilityQcDelayExcludeHoliday,
      bool? availabilityQcDelayIndefinite,
      bool? defaultMuteItemsAddedToOrderAtStaging,
      bool? quikReceiptEnable,
      bool? storageContainerCheckInEnable,
      bool? storageContainerStagingEnable,
      bool? storageContainerRescanRequired,
      String? quikReceiptTermsConditionsId,
      String? quikReceiptTermsConditions,
      bool? disableSubstituteNote,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse(
        warehouseId: warehouseId ?? this.warehouseId,
        warehouse: warehouse ?? this.warehouse,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        taxOptionId: taxOptionId ?? this.taxOptionId,
        taxOption: taxOption ?? this.taxOption,
        taxCountry: taxCountry ?? this.taxCountry,
        taxRule: taxRule ?? this.taxRule,
        rentalTaxRate1: rentalTaxRate1 ?? this.rentalTaxRate1,
        rentalTaxRate2: rentalTaxRate2 ?? this.rentalTaxRate2,
        rentalExempt: rentalExempt ?? this.rentalExempt,
        salesTaxRate1: salesTaxRate1 ?? this.salesTaxRate1,
        salesTaxRate2: salesTaxRate2 ?? this.salesTaxRate2,
        salesExempt: salesExempt ?? this.salesExempt,
        laborTaxRate1: laborTaxRate1 ?? this.laborTaxRate1,
        laborTaxRate2: laborTaxRate2 ?? this.laborTaxRate2,
        laborExempt: laborExempt ?? this.laborExempt,
        attention: attention ?? this.attention,
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        city: city ?? this.city,
        zipCode: zipCode ?? this.zipCode,
        state: state ?? this.state,
        countryId: countryId ?? this.countryId,
        country: country ?? this.country,
        phone: phone ?? this.phone,
        fax: fax ?? this.fax,
        assignBarCodesBy: assignBarCodesBy ?? this.assignBarCodesBy,
        salesMarkupPercent: salesMarkupPercent ?? this.salesMarkupPercent,
        partsMarkupPercent: partsMarkupPercent ?? this.partsMarkupPercent,
        markupSales: markupSales ?? this.markupSales,
        markupParts: markupParts ?? this.markupParts,
        includeFreightInSalesCost:
            includeFreightInSalesCost ?? this.includeFreightInSalesCost,
        includeFreightInPartsCost:
            includeFreightInPartsCost ?? this.includeFreightInPartsCost,
        receiveVendorBarCodes:
            receiveVendorBarCodes ?? this.receiveVendorBarCodes,
        allowNegativeInventory:
            allowNegativeInventory ?? this.allowNegativeInventory,
        defaultDeliveryType: defaultDeliveryType ?? this.defaultDeliveryType,
        exchangedItemsRepairByDefault:
            exchangedItemsRepairByDefault ?? this.exchangedItemsRepairByDefault,
        stagingCompleteComponents:
            stagingCompleteComponents ?? this.stagingCompleteComponents,
        checkInSortBy: checkInSortBy ?? this.checkInSortBy,
        defaultPackageTruckScheduleMethod: defaultPackageTruckScheduleMethod ??
            this.defaultPackageTruckScheduleMethod,
        stageQuantityAccessories:
            stageQuantityAccessories ?? this.stageQuantityAccessories,
        promptForCheckOutExceptions:
            promptForCheckOutExceptions ?? this.promptForCheckOutExceptions,
        promptForCheckInExceptions:
            promptForCheckInExceptions ?? this.promptForCheckInExceptions,
        deleteAssetLocationOnOut:
            deleteAssetLocationOnOut ?? this.deleteAssetLocationOnOut,
        deleteAssetConditionOnOut:
            deleteAssetConditionOnOut ?? this.deleteAssetConditionOnOut,
        stagingShowCheckedInHoldingItems: stagingShowCheckedInHoldingItems ??
            this.stagingShowCheckedInHoldingItems,
        poDeliveryType: poDeliveryType ?? this.poDeliveryType,
        availabilityCacheDays:
            availabilityCacheDays ?? this.availabilityCacheDays,
        availabilityPreserveConflicts:
            availabilityPreserveConflicts ?? this.availabilityPreserveConflicts,
        defaultRepairDays: defaultRepairDays ?? this.defaultRepairDays,
        quikLocateDefaultDeliveryType:
            quikLocateDefaultDeliveryType ?? this.quikLocateDefaultDeliveryType,
        repairBillableOrderAgentFrom:
            repairBillableOrderAgentFrom ?? this.repairBillableOrderAgentFrom,
        returnListPrintInQuantity:
            returnListPrintInQuantity ?? this.returnListPrintInQuantity,
        returnListPrintOutQuantity:
            returnListPrintOutQuantity ?? this.returnListPrintOutQuantity,
        availabilityUseOnPO: availabilityUseOnPO ?? this.availabilityUseOnPO,
        regionId: regionId ?? this.regionId,
        region: region ?? this.region,
        color: color ?? this.color,
        availabilityLateDays: availabilityLateDays ?? this.availabilityLateDays,
        useBarCodeLabelDesigner:
            useBarCodeLabelDesigner ?? this.useBarCodeLabelDesigner,
        inventoryLabelDesignId:
            inventoryLabelDesignId ?? this.inventoryLabelDesignId,
        inventoryLabelDesign: inventoryLabelDesign ?? this.inventoryLabelDesign,
        itemLabelDesignId: itemLabelDesignId ?? this.itemLabelDesignId,
        itemLabelDesign: itemLabelDesign ?? this.itemLabelDesign,
        dataWarehouseExcludeFromROA:
            dataWarehouseExcludeFromROA ?? this.dataWarehouseExcludeFromROA,
        availabilityLateHours:
            availabilityLateHours ?? this.availabilityLateHours,
        availabilityStartHour:
            availabilityStartHour ?? this.availabilityStartHour,
        availabilityStopHour: availabilityStopHour ?? this.availabilityStopHour,
        includeTaxInAssetValue:
            includeTaxInAssetValue ?? this.includeTaxInAssetValue,
        productionExchangeAvailabilityPercent: productionExchangeAvailabilityPercent ??
            this.productionExchangeAvailabilityPercent,
        productionexchangeEnabled:
            productionexchangeEnabled ?? this.productionexchangeEnabled,
        productionExchangeWarehouseCode: productionExchangeWarehouseCode ??
            this.productionExchangeWarehouseCode,
        week4RatePercent: week4RatePercent ?? this.week4RatePercent,
        glSuffix: glSuffix ?? this.glSuffix,
        requireScanVendorBarCodeOnReturn: requireScanVendorBarCodeOnReturn ??
            this.requireScanVendorBarCodeOnReturn,
        glPrefix: glPrefix ?? this.glPrefix,
        internalDealId: internalDealId ?? this.internalDealId,
        internalDeal: internalDeal ?? this.internalDeal,
        internalVendorId: internalVendorId ?? this.internalVendorId,
        internalVendor: internalVendor ?? this.internalVendor,
        calculateOnPoAfterApproved:
            calculateOnPoAfterApproved ?? this.calculateOnPoAfterApproved,
        transferDefaultReturnToWarehouse: transferDefaultReturnToWarehouse ??
            this.transferDefaultReturnToWarehouse,
        availabilityCalculateInBackground: availabilityCalculateInBackground ??
            this.availabilityCalculateInBackground,
        quikLocateCannotTransfer:
            quikLocateCannotTransfer ?? this.quikLocateCannotTransfer,
        quikLocateDefaultRequiredDate:
            quikLocateDefaultRequiredDate ?? this.quikLocateDefaultRequiredDate,
        quikLocateRequiredDaysBefore:
            quikLocateRequiredDaysBefore ?? this.quikLocateRequiredDaysBefore,
        calculateDefaultRentalRates:
            calculateDefaultRentalRates ?? this.calculateDefaultRentalRates,
        rentalDailyRatePercentOfReplacementCost: rentalDailyRatePercentOfReplacementCost ??
            this.rentalDailyRatePercentOfReplacementCost,
        rentalWeeklyRateMultipleOfDailyRate: rentalWeeklyRateMultipleOfDailyRate ??
            this.rentalWeeklyRateMultipleOfDailyRate,
        checkInEnableScanningToAisleShelf: checkInEnableScanningToAisleShelf ??
            this.checkInEnableScanningToAisleShelf,
        currencyId: currencyId ?? this.currencyId,
        currencyCode: currencyCode ?? this.currencyCode,
        currency: currency ?? this.currency,
        rentalBarCodeRangeId: rentalBarCodeRangeId ?? this.rentalBarCodeRangeId,
        rentalBarCodeRange: rentalBarCodeRange ?? this.rentalBarCodeRange,
        rentalFixedAssetBarCodeRangeId: rentalFixedAssetBarCodeRangeId ??
            this.rentalFixedAssetBarCodeRangeId,
        rentalFixedAssetBarCodeRange:
            rentalFixedAssetBarCodeRange ?? this.rentalFixedAssetBarCodeRange,
        salesBarCodeRangeId: salesBarCodeRangeId ?? this.salesBarCodeRangeId,
        salesBarCodeRange: salesBarCodeRange ?? this.salesBarCodeRange,
        autoUpdateUnitValueOnReceivingHigherCostItem:
            autoUpdateUnitValueOnReceivingHigherCostItem ??
                this.autoUpdateUnitValueOnReceivingHigherCostItem,
        markupReplacementCost:
            markupReplacementCost ?? this.markupReplacementCost,
        replacementCostMarkupPercent:
            replacementCostMarkupPercent ?? this.replacementCostMarkupPercent,
        availabilityHourlyDays:
            availabilityHourlyDays ?? this.availabilityHourlyDays,
        salesRestockPercent: salesRestockPercent ?? this.salesRestockPercent,
        availabilityExcludeConsigned:
            availabilityExcludeConsigned ?? this.availabilityExcludeConsigned,
        availabilityRequireConsignedReserved: availabilityRequireConsignedReserved ??
            this.availabilityRequireConsignedReserved,
        availabilityEnableQcDelay:
            availabilityEnableQcDelay ?? this.availabilityEnableQcDelay,
        availabilityQcDelayExcludeWeekend:
            availabilityQcDelayExcludeWeekend ?? this.availabilityQcDelayExcludeWeekend,
        availabilityQcDelayExcludeHoliday: availabilityQcDelayExcludeHoliday ?? this.availabilityQcDelayExcludeHoliday,
        availabilityQcDelayIndefinite: availabilityQcDelayIndefinite ?? this.availabilityQcDelayIndefinite,
        defaultMuteItemsAddedToOrderAtStaging: defaultMuteItemsAddedToOrderAtStaging ?? this.defaultMuteItemsAddedToOrderAtStaging,
        quikReceiptEnable: quikReceiptEnable ?? this.quikReceiptEnable,
        storageContainerCheckInEnable: storageContainerCheckInEnable ?? this.storageContainerCheckInEnable,
        storageContainerStagingEnable: storageContainerStagingEnable ?? this.storageContainerStagingEnable,
        storageContainerRescanRequired: storageContainerRescanRequired ?? this.storageContainerRescanRequired,
        quikReceiptTermsConditionsId: quikReceiptTermsConditionsId ?? this.quikReceiptTermsConditionsId,
        quikReceiptTermsConditions: quikReceiptTermsConditions ?? this.quikReceiptTermsConditions,
        disableSubstituteNote: disableSubstituteNote ?? this.disableSubstituteNote,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog {
  WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog({
    this.webCatalogId,
    this.description,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogFromJson(
          json);

  @JsonKey(name: 'WebCatalogId', includeIfNull: false)
  final String? webCatalogId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog &&
            (identical(other.webCatalogId, webCatalogId) ||
                const DeepCollectionEquality()
                    .equals(other.webCatalogId, webCatalogId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalogExtension
    on WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog {
  WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog copyWith(
      {String? webCatalogId,
      String? description,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWebCatalogSettingsWebCatalogWebCatalog(
        webCatalogId: webCatalogId ?? this.webCatalogId,
        description: description ?? this.description,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWebUserWidgetUserWidget {
  WebApiModulesSettingsWebUserWidgetUserWidget({
    this.userWidgetId,
    this.userId,
    this.userName,
    this.widgetId,
    this.widget,
    this.defaultType,
    this.widgetType,
    this.defaultDataPoints,
    this.dataPoints,
    this.defaultAxisNumberFormatId,
    this.defaultAxisNumberFormat,
    this.defaultAxisNumberFormatMask,
    this.axisNumberFormatId,
    this.axisNumberFormat,
    this.axisNumberFormatMask,
    this.defaultDataNumberFormatId,
    this.defaultDataNumberFormat,
    this.defaultDataNumberFormatMask,
    this.dataNumberFormatId,
    this.dataNumberFormat,
    this.dataNumberFormatMask,
    this.defaultDateBehaviorId,
    this.defaultDateBehavior,
    this.dateBehaviorId,
    this.dateBehavior,
    this.dateFieldDisplayNames,
    this.dateFields,
    this.defaultDateField,
    this.dateField,
    this.defaultFromDate,
    this.fromDate,
    this.defaultToDate,
    this.toDate,
    this.settings,
    this.officeLocationId,
    this.officeLocation,
    this.officeLocationCode,
    this.defaultStacked,
    this.stacked,
    this.disabled,
    this.orderBy,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWebUserWidgetUserWidget.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWebUserWidgetUserWidgetFromJson(json);

  @JsonKey(name: 'UserWidgetId', includeIfNull: false)
  final String? userWidgetId;
  @JsonKey(name: 'UserId', includeIfNull: false)
  final String? userId;
  @JsonKey(name: 'UserName', includeIfNull: false)
  final String? userName;
  @JsonKey(name: 'WidgetId', includeIfNull: false)
  final String? widgetId;
  @JsonKey(name: 'Widget', includeIfNull: false)
  final String? widget;
  @JsonKey(name: 'DefaultType', includeIfNull: false)
  final String? defaultType;
  @JsonKey(name: 'WidgetType', includeIfNull: false)
  final String? widgetType;
  @JsonKey(name: 'DefaultDataPoints', includeIfNull: false)
  final int? defaultDataPoints;
  @JsonKey(name: 'DataPoints', includeIfNull: false)
  final int? dataPoints;
  @JsonKey(name: 'DefaultAxisNumberFormatId', includeIfNull: false)
  final String? defaultAxisNumberFormatId;
  @JsonKey(name: 'DefaultAxisNumberFormat', includeIfNull: false)
  final String? defaultAxisNumberFormat;
  @JsonKey(name: 'DefaultAxisNumberFormatMask', includeIfNull: false)
  final String? defaultAxisNumberFormatMask;
  @JsonKey(name: 'AxisNumberFormatId', includeIfNull: false)
  final String? axisNumberFormatId;
  @JsonKey(name: 'AxisNumberFormat', includeIfNull: false)
  final String? axisNumberFormat;
  @JsonKey(name: 'AxisNumberFormatMask', includeIfNull: false)
  final String? axisNumberFormatMask;
  @JsonKey(name: 'DefaultDataNumberFormatId', includeIfNull: false)
  final String? defaultDataNumberFormatId;
  @JsonKey(name: 'DefaultDataNumberFormat', includeIfNull: false)
  final String? defaultDataNumberFormat;
  @JsonKey(name: 'DefaultDataNumberFormatMask', includeIfNull: false)
  final String? defaultDataNumberFormatMask;
  @JsonKey(name: 'DataNumberFormatId', includeIfNull: false)
  final String? dataNumberFormatId;
  @JsonKey(name: 'DataNumberFormat', includeIfNull: false)
  final String? dataNumberFormat;
  @JsonKey(name: 'DataNumberFormatMask', includeIfNull: false)
  final String? dataNumberFormatMask;
  @JsonKey(name: 'DefaultDateBehaviorId', includeIfNull: false)
  final String? defaultDateBehaviorId;
  @JsonKey(name: 'DefaultDateBehavior', includeIfNull: false)
  final String? defaultDateBehavior;
  @JsonKey(name: 'DateBehaviorId', includeIfNull: false)
  final String? dateBehaviorId;
  @JsonKey(name: 'DateBehavior', includeIfNull: false)
  final String? dateBehavior;
  @JsonKey(name: 'DateFieldDisplayNames', includeIfNull: false)
  final String? dateFieldDisplayNames;
  @JsonKey(name: 'DateFields', includeIfNull: false)
  final String? dateFields;
  @JsonKey(name: 'DefaultDateField', includeIfNull: false)
  final String? defaultDateField;
  @JsonKey(name: 'DateField', includeIfNull: false)
  final String? dateField;
  @JsonKey(name: 'DefaultFromDate', includeIfNull: false)
  final String? defaultFromDate;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final String? fromDate;
  @JsonKey(name: 'DefaultToDate', includeIfNull: false)
  final String? defaultToDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final String? toDate;
  @JsonKey(name: 'Settings', includeIfNull: false)
  final String? settings;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'OfficeLocation', includeIfNull: false)
  final String? officeLocation;
  @JsonKey(name: 'OfficeLocationCode', includeIfNull: false)
  final String? officeLocationCode;
  @JsonKey(name: 'DefaultStacked', includeIfNull: false)
  final bool? defaultStacked;
  @JsonKey(name: 'Stacked', includeIfNull: false)
  final bool? stacked;
  @JsonKey(name: 'Disabled', includeIfNull: false)
  final bool? disabled;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final double? orderBy;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWebUserWidgetUserWidgetFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWebUserWidgetUserWidgetToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWebUserWidgetUserWidgetToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWebUserWidgetUserWidget &&
            (identical(other.userWidgetId, userWidgetId) ||
                const DeepCollectionEquality()
                    .equals(other.userWidgetId, userWidgetId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.widgetId, widgetId) ||
                const DeepCollectionEquality()
                    .equals(other.widgetId, widgetId)) &&
            (identical(other.widget, widget) ||
                const DeepCollectionEquality().equals(other.widget, widget)) &&
            (identical(other.defaultType, defaultType) ||
                const DeepCollectionEquality()
                    .equals(other.defaultType, defaultType)) &&
            (identical(other.widgetType, widgetType) ||
                const DeepCollectionEquality()
                    .equals(other.widgetType, widgetType)) &&
            (identical(other.defaultDataPoints, defaultDataPoints) ||
                const DeepCollectionEquality()
                    .equals(other.defaultDataPoints, defaultDataPoints)) &&
            (identical(other.dataPoints, dataPoints) ||
                const DeepCollectionEquality()
                    .equals(other.dataPoints, dataPoints)) &&
            (identical(other.defaultAxisNumberFormatId, defaultAxisNumberFormatId) ||
                const DeepCollectionEquality().equals(
                    other.defaultAxisNumberFormatId,
                    defaultAxisNumberFormatId)) &&
            (identical(other.defaultAxisNumberFormat, defaultAxisNumberFormat) ||
                const DeepCollectionEquality().equals(
                    other.defaultAxisNumberFormat, defaultAxisNumberFormat)) &&
            (identical(other.defaultAxisNumberFormatMask, defaultAxisNumberFormatMask) ||
                const DeepCollectionEquality().equals(
                    other.defaultAxisNumberFormatMask,
                    defaultAxisNumberFormatMask)) &&
            (identical(other.axisNumberFormatId, axisNumberFormatId) ||
                const DeepCollectionEquality()
                    .equals(other.axisNumberFormatId, axisNumberFormatId)) &&
            (identical(other.axisNumberFormat, axisNumberFormat) ||
                const DeepCollectionEquality()
                    .equals(other.axisNumberFormat, axisNumberFormat)) &&
            (identical(other.axisNumberFormatMask, axisNumberFormatMask) ||
                const DeepCollectionEquality().equals(
                    other.axisNumberFormatMask, axisNumberFormatMask)) &&
            (identical(other.defaultDataNumberFormatId, defaultDataNumberFormatId) ||
                const DeepCollectionEquality().equals(
                    other.defaultDataNumberFormatId, defaultDataNumberFormatId)) &&
            (identical(other.defaultDataNumberFormat, defaultDataNumberFormat) || const DeepCollectionEquality().equals(other.defaultDataNumberFormat, defaultDataNumberFormat)) &&
            (identical(other.defaultDataNumberFormatMask, defaultDataNumberFormatMask) || const DeepCollectionEquality().equals(other.defaultDataNumberFormatMask, defaultDataNumberFormatMask)) &&
            (identical(other.dataNumberFormatId, dataNumberFormatId) || const DeepCollectionEquality().equals(other.dataNumberFormatId, dataNumberFormatId)) &&
            (identical(other.dataNumberFormat, dataNumberFormat) || const DeepCollectionEquality().equals(other.dataNumberFormat, dataNumberFormat)) &&
            (identical(other.dataNumberFormatMask, dataNumberFormatMask) || const DeepCollectionEquality().equals(other.dataNumberFormatMask, dataNumberFormatMask)) &&
            (identical(other.defaultDateBehaviorId, defaultDateBehaviorId) || const DeepCollectionEquality().equals(other.defaultDateBehaviorId, defaultDateBehaviorId)) &&
            (identical(other.defaultDateBehavior, defaultDateBehavior) || const DeepCollectionEquality().equals(other.defaultDateBehavior, defaultDateBehavior)) &&
            (identical(other.dateBehaviorId, dateBehaviorId) || const DeepCollectionEquality().equals(other.dateBehaviorId, dateBehaviorId)) &&
            (identical(other.dateBehavior, dateBehavior) || const DeepCollectionEquality().equals(other.dateBehavior, dateBehavior)) &&
            (identical(other.dateFieldDisplayNames, dateFieldDisplayNames) || const DeepCollectionEquality().equals(other.dateFieldDisplayNames, dateFieldDisplayNames)) &&
            (identical(other.dateFields, dateFields) || const DeepCollectionEquality().equals(other.dateFields, dateFields)) &&
            (identical(other.defaultDateField, defaultDateField) || const DeepCollectionEquality().equals(other.defaultDateField, defaultDateField)) &&
            (identical(other.dateField, dateField) || const DeepCollectionEquality().equals(other.dateField, dateField)) &&
            (identical(other.defaultFromDate, defaultFromDate) || const DeepCollectionEquality().equals(other.defaultFromDate, defaultFromDate)) &&
            (identical(other.fromDate, fromDate) || const DeepCollectionEquality().equals(other.fromDate, fromDate)) &&
            (identical(other.defaultToDate, defaultToDate) || const DeepCollectionEquality().equals(other.defaultToDate, defaultToDate)) &&
            (identical(other.toDate, toDate) || const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.settings, settings) || const DeepCollectionEquality().equals(other.settings, settings)) &&
            (identical(other.officeLocationId, officeLocationId) || const DeepCollectionEquality().equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.officeLocation, officeLocation) || const DeepCollectionEquality().equals(other.officeLocation, officeLocation)) &&
            (identical(other.officeLocationCode, officeLocationCode) || const DeepCollectionEquality().equals(other.officeLocationCode, officeLocationCode)) &&
            (identical(other.defaultStacked, defaultStacked) || const DeepCollectionEquality().equals(other.defaultStacked, defaultStacked)) &&
            (identical(other.stacked, stacked) || const DeepCollectionEquality().equals(other.stacked, stacked)) &&
            (identical(other.disabled, disabled) || const DeepCollectionEquality().equals(other.disabled, disabled)) &&
            (identical(other.orderBy, orderBy) || const DeepCollectionEquality().equals(other.orderBy, orderBy)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWebUserWidgetUserWidgetExtension
    on WebApiModulesSettingsWebUserWidgetUserWidget {
  WebApiModulesSettingsWebUserWidgetUserWidget copyWith(
      {String? userWidgetId,
      String? userId,
      String? userName,
      String? widgetId,
      String? widget,
      String? defaultType,
      String? widgetType,
      int? defaultDataPoints,
      int? dataPoints,
      String? defaultAxisNumberFormatId,
      String? defaultAxisNumberFormat,
      String? defaultAxisNumberFormatMask,
      String? axisNumberFormatId,
      String? axisNumberFormat,
      String? axisNumberFormatMask,
      String? defaultDataNumberFormatId,
      String? defaultDataNumberFormat,
      String? defaultDataNumberFormatMask,
      String? dataNumberFormatId,
      String? dataNumberFormat,
      String? dataNumberFormatMask,
      String? defaultDateBehaviorId,
      String? defaultDateBehavior,
      String? dateBehaviorId,
      String? dateBehavior,
      String? dateFieldDisplayNames,
      String? dateFields,
      String? defaultDateField,
      String? dateField,
      String? defaultFromDate,
      String? fromDate,
      String? defaultToDate,
      String? toDate,
      String? settings,
      String? officeLocationId,
      String? officeLocation,
      String? officeLocationCode,
      bool? defaultStacked,
      bool? stacked,
      bool? disabled,
      double? orderBy,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWebUserWidgetUserWidget(
        userWidgetId: userWidgetId ?? this.userWidgetId,
        userId: userId ?? this.userId,
        userName: userName ?? this.userName,
        widgetId: widgetId ?? this.widgetId,
        widget: widget ?? this.widget,
        defaultType: defaultType ?? this.defaultType,
        widgetType: widgetType ?? this.widgetType,
        defaultDataPoints: defaultDataPoints ?? this.defaultDataPoints,
        dataPoints: dataPoints ?? this.dataPoints,
        defaultAxisNumberFormatId:
            defaultAxisNumberFormatId ?? this.defaultAxisNumberFormatId,
        defaultAxisNumberFormat:
            defaultAxisNumberFormat ?? this.defaultAxisNumberFormat,
        defaultAxisNumberFormatMask:
            defaultAxisNumberFormatMask ?? this.defaultAxisNumberFormatMask,
        axisNumberFormatId: axisNumberFormatId ?? this.axisNumberFormatId,
        axisNumberFormat: axisNumberFormat ?? this.axisNumberFormat,
        axisNumberFormatMask: axisNumberFormatMask ?? this.axisNumberFormatMask,
        defaultDataNumberFormatId:
            defaultDataNumberFormatId ?? this.defaultDataNumberFormatId,
        defaultDataNumberFormat:
            defaultDataNumberFormat ?? this.defaultDataNumberFormat,
        defaultDataNumberFormatMask:
            defaultDataNumberFormatMask ?? this.defaultDataNumberFormatMask,
        dataNumberFormatId: dataNumberFormatId ?? this.dataNumberFormatId,
        dataNumberFormat: dataNumberFormat ?? this.dataNumberFormat,
        dataNumberFormatMask: dataNumberFormatMask ?? this.dataNumberFormatMask,
        defaultDateBehaviorId:
            defaultDateBehaviorId ?? this.defaultDateBehaviorId,
        defaultDateBehavior: defaultDateBehavior ?? this.defaultDateBehavior,
        dateBehaviorId: dateBehaviorId ?? this.dateBehaviorId,
        dateBehavior: dateBehavior ?? this.dateBehavior,
        dateFieldDisplayNames:
            dateFieldDisplayNames ?? this.dateFieldDisplayNames,
        dateFields: dateFields ?? this.dateFields,
        defaultDateField: defaultDateField ?? this.defaultDateField,
        dateField: dateField ?? this.dateField,
        defaultFromDate: defaultFromDate ?? this.defaultFromDate,
        fromDate: fromDate ?? this.fromDate,
        defaultToDate: defaultToDate ?? this.defaultToDate,
        toDate: toDate ?? this.toDate,
        settings: settings ?? this.settings,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        officeLocation: officeLocation ?? this.officeLocation,
        officeLocationCode: officeLocationCode ?? this.officeLocationCode,
        defaultStacked: defaultStacked ?? this.defaultStacked,
        stacked: stacked ?? this.stacked,
        disabled: disabled ?? this.disabled,
        orderBy: orderBy ?? this.orderBy,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWidgetSettingsWidgetWidget {
  WebApiModulesSettingsWidgetSettingsWidgetWidget({
    this.widgetId,
    this.widget,
    this.moduleName,
    this.apiName,
    this.procedureName,
    this.counterFieldName,
    this.label1FieldName,
    this.label2FieldName,
    this.clickPath,
    this.defaultType,
    this.defaultDataPoints,
    this.defaultAxisNumberFormatId,
    this.defaultAxisNumberFormat,
    this.defaultAxisNumberFormatMask,
    this.defaultDataNumberFormatId,
    this.defaultDataNumberFormat,
    this.defaultDataNumberFormatMask,
    this.defaultDateBehaviorId,
    this.defaultDateBehavior,
    this.dateFieldDisplayNames,
    this.dateFields,
    this.defaultDateField,
    this.defaultFromDate,
    this.defaultToDate,
    this.defaultStacked,
    this.assignTo,
    this.dateStamp,
    this.value,
    this.text,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWidgetSettingsWidgetWidget.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetFromJson(json);

  @JsonKey(name: 'WidgetId', includeIfNull: false)
  final String? widgetId;
  @JsonKey(name: 'Widget', includeIfNull: false)
  final String? widget;
  @JsonKey(name: 'ModuleName', includeIfNull: false)
  final String? moduleName;
  @JsonKey(name: 'ApiName', includeIfNull: false)
  final String? apiName;
  @JsonKey(name: 'ProcedureName', includeIfNull: false)
  final String? procedureName;
  @JsonKey(name: 'CounterFieldName', includeIfNull: false)
  final String? counterFieldName;
  @JsonKey(name: 'Label1FieldName', includeIfNull: false)
  final String? label1FieldName;
  @JsonKey(name: 'Label2FieldName', includeIfNull: false)
  final String? label2FieldName;
  @JsonKey(name: 'ClickPath', includeIfNull: false)
  final String? clickPath;
  @JsonKey(name: 'DefaultType', includeIfNull: false)
  final String? defaultType;
  @JsonKey(name: 'DefaultDataPoints', includeIfNull: false)
  final int? defaultDataPoints;
  @JsonKey(name: 'DefaultAxisNumberFormatId', includeIfNull: false)
  final String? defaultAxisNumberFormatId;
  @JsonKey(name: 'DefaultAxisNumberFormat', includeIfNull: false)
  final String? defaultAxisNumberFormat;
  @JsonKey(name: 'DefaultAxisNumberFormatMask', includeIfNull: false)
  final String? defaultAxisNumberFormatMask;
  @JsonKey(name: 'DefaultDataNumberFormatId', includeIfNull: false)
  final String? defaultDataNumberFormatId;
  @JsonKey(name: 'DefaultDataNumberFormat', includeIfNull: false)
  final String? defaultDataNumberFormat;
  @JsonKey(name: 'DefaultDataNumberFormatMask', includeIfNull: false)
  final String? defaultDataNumberFormatMask;
  @JsonKey(name: 'DefaultDateBehaviorId', includeIfNull: false)
  final String? defaultDateBehaviorId;
  @JsonKey(name: 'DefaultDateBehavior', includeIfNull: false)
  final String? defaultDateBehavior;
  @JsonKey(name: 'DateFieldDisplayNames', includeIfNull: false)
  final String? dateFieldDisplayNames;
  @JsonKey(name: 'DateFields', includeIfNull: false)
  final String? dateFields;
  @JsonKey(name: 'DefaultDateField', includeIfNull: false)
  final String? defaultDateField;
  @JsonKey(name: 'DefaultFromDate', includeIfNull: false)
  final String? defaultFromDate;
  @JsonKey(name: 'DefaultToDate', includeIfNull: false)
  final String? defaultToDate;
  @JsonKey(name: 'DefaultStacked', includeIfNull: false)
  final bool? defaultStacked;
  @JsonKey(name: 'AssignTo', includeIfNull: false)
  final String? assignTo;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'value', includeIfNull: false)
  final String? value;
  @JsonKey(name: 'text', includeIfNull: false)
  final String? text;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWidgetSettingsWidgetWidget &&
            (identical(other.widgetId, widgetId) ||
                const DeepCollectionEquality()
                    .equals(other.widgetId, widgetId)) &&
            (identical(other.widget, widget) ||
                const DeepCollectionEquality().equals(other.widget, widget)) &&
            (identical(other.moduleName, moduleName) ||
                const DeepCollectionEquality()
                    .equals(other.moduleName, moduleName)) &&
            (identical(other.apiName, apiName) ||
                const DeepCollectionEquality()
                    .equals(other.apiName, apiName)) &&
            (identical(other.procedureName, procedureName) ||
                const DeepCollectionEquality()
                    .equals(other.procedureName, procedureName)) &&
            (identical(other.counterFieldName, counterFieldName) ||
                const DeepCollectionEquality()
                    .equals(other.counterFieldName, counterFieldName)) &&
            (identical(other.label1FieldName, label1FieldName) ||
                const DeepCollectionEquality()
                    .equals(other.label1FieldName, label1FieldName)) &&
            (identical(other.label2FieldName, label2FieldName) ||
                const DeepCollectionEquality()
                    .equals(other.label2FieldName, label2FieldName)) &&
            (identical(other.clickPath, clickPath) ||
                const DeepCollectionEquality()
                    .equals(other.clickPath, clickPath)) &&
            (identical(other.defaultType, defaultType) ||
                const DeepCollectionEquality()
                    .equals(other.defaultType, defaultType)) &&
            (identical(other.defaultDataPoints, defaultDataPoints) ||
                const DeepCollectionEquality()
                    .equals(other.defaultDataPoints, defaultDataPoints)) &&
            (identical(other.defaultAxisNumberFormatId, defaultAxisNumberFormatId) ||
                const DeepCollectionEquality().equals(
                    other.defaultAxisNumberFormatId,
                    defaultAxisNumberFormatId)) &&
            (identical(other.defaultAxisNumberFormat, defaultAxisNumberFormat) ||
                const DeepCollectionEquality().equals(
                    other.defaultAxisNumberFormat, defaultAxisNumberFormat)) &&
            (identical(other.defaultAxisNumberFormatMask, defaultAxisNumberFormatMask) ||
                const DeepCollectionEquality().equals(
                    other.defaultAxisNumberFormatMask,
                    defaultAxisNumberFormatMask)) &&
            (identical(other.defaultDataNumberFormatId, defaultDataNumberFormatId) ||
                const DeepCollectionEquality().equals(
                    other.defaultDataNumberFormatId,
                    defaultDataNumberFormatId)) &&
            (identical(other.defaultDataNumberFormat, defaultDataNumberFormat) ||
                const DeepCollectionEquality().equals(
                    other.defaultDataNumberFormat, defaultDataNumberFormat)) &&
            (identical(other.defaultDataNumberFormatMask, defaultDataNumberFormatMask) ||
                const DeepCollectionEquality()
                    .equals(other.defaultDataNumberFormatMask, defaultDataNumberFormatMask)) &&
            (identical(other.defaultDateBehaviorId, defaultDateBehaviorId) || const DeepCollectionEquality().equals(other.defaultDateBehaviorId, defaultDateBehaviorId)) &&
            (identical(other.defaultDateBehavior, defaultDateBehavior) || const DeepCollectionEquality().equals(other.defaultDateBehavior, defaultDateBehavior)) &&
            (identical(other.dateFieldDisplayNames, dateFieldDisplayNames) || const DeepCollectionEquality().equals(other.dateFieldDisplayNames, dateFieldDisplayNames)) &&
            (identical(other.dateFields, dateFields) || const DeepCollectionEquality().equals(other.dateFields, dateFields)) &&
            (identical(other.defaultDateField, defaultDateField) || const DeepCollectionEquality().equals(other.defaultDateField, defaultDateField)) &&
            (identical(other.defaultFromDate, defaultFromDate) || const DeepCollectionEquality().equals(other.defaultFromDate, defaultFromDate)) &&
            (identical(other.defaultToDate, defaultToDate) || const DeepCollectionEquality().equals(other.defaultToDate, defaultToDate)) &&
            (identical(other.defaultStacked, defaultStacked) || const DeepCollectionEquality().equals(other.defaultStacked, defaultStacked)) &&
            (identical(other.assignTo, assignTo) || const DeepCollectionEquality().equals(other.assignTo, assignTo)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.value, value) || const DeepCollectionEquality().equals(other.value, value)) &&
            (identical(other.text, text) || const DeepCollectionEquality().equals(other.text, text)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWidgetSettingsWidgetWidgetExtension
    on WebApiModulesSettingsWidgetSettingsWidgetWidget {
  WebApiModulesSettingsWidgetSettingsWidgetWidget copyWith(
      {String? widgetId,
      String? widget,
      String? moduleName,
      String? apiName,
      String? procedureName,
      String? counterFieldName,
      String? label1FieldName,
      String? label2FieldName,
      String? clickPath,
      String? defaultType,
      int? defaultDataPoints,
      String? defaultAxisNumberFormatId,
      String? defaultAxisNumberFormat,
      String? defaultAxisNumberFormatMask,
      String? defaultDataNumberFormatId,
      String? defaultDataNumberFormat,
      String? defaultDataNumberFormatMask,
      String? defaultDateBehaviorId,
      String? defaultDateBehavior,
      String? dateFieldDisplayNames,
      String? dateFields,
      String? defaultDateField,
      String? defaultFromDate,
      String? defaultToDate,
      bool? defaultStacked,
      String? assignTo,
      String? dateStamp,
      String? value,
      String? text,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidget(
        widgetId: widgetId ?? this.widgetId,
        widget: widget ?? this.widget,
        moduleName: moduleName ?? this.moduleName,
        apiName: apiName ?? this.apiName,
        procedureName: procedureName ?? this.procedureName,
        counterFieldName: counterFieldName ?? this.counterFieldName,
        label1FieldName: label1FieldName ?? this.label1FieldName,
        label2FieldName: label2FieldName ?? this.label2FieldName,
        clickPath: clickPath ?? this.clickPath,
        defaultType: defaultType ?? this.defaultType,
        defaultDataPoints: defaultDataPoints ?? this.defaultDataPoints,
        defaultAxisNumberFormatId:
            defaultAxisNumberFormatId ?? this.defaultAxisNumberFormatId,
        defaultAxisNumberFormat:
            defaultAxisNumberFormat ?? this.defaultAxisNumberFormat,
        defaultAxisNumberFormatMask:
            defaultAxisNumberFormatMask ?? this.defaultAxisNumberFormatMask,
        defaultDataNumberFormatId:
            defaultDataNumberFormatId ?? this.defaultDataNumberFormatId,
        defaultDataNumberFormat:
            defaultDataNumberFormat ?? this.defaultDataNumberFormat,
        defaultDataNumberFormatMask:
            defaultDataNumberFormatMask ?? this.defaultDataNumberFormatMask,
        defaultDateBehaviorId:
            defaultDateBehaviorId ?? this.defaultDateBehaviorId,
        defaultDateBehavior: defaultDateBehavior ?? this.defaultDateBehavior,
        dateFieldDisplayNames:
            dateFieldDisplayNames ?? this.dateFieldDisplayNames,
        dateFields: dateFields ?? this.dateFields,
        defaultDateField: defaultDateField ?? this.defaultDateField,
        defaultFromDate: defaultFromDate ?? this.defaultFromDate,
        defaultToDate: defaultToDate ?? this.defaultToDate,
        defaultStacked: defaultStacked ?? this.defaultStacked,
        assignTo: assignTo ?? this.assignTo,
        dateStamp: dateStamp ?? this.dateStamp,
        value: value ?? this.value,
        text: text ?? this.text,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek {
  WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek({
    this.workWeekId,
    this.workWeek,
    this.fromDate,
    this.toDate,
    this.inactive,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekFromJson(json);

  @JsonKey(name: 'WorkWeekId', includeIfNull: false)
  final int? workWeekId;
  @JsonKey(name: 'WorkWeek', includeIfNull: false)
  final String? workWeek;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final String? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final String? toDate;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek &&
            (identical(other.workWeekId, workWeekId) ||
                const DeepCollectionEquality()
                    .equals(other.workWeekId, workWeekId)) &&
            (identical(other.workWeek, workWeek) ||
                const DeepCollectionEquality()
                    .equals(other.workWeek, workWeek)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }
}

extension $WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeekExtension
    on WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek {
  WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek copyWith(
      {int? workWeekId,
      String? workWeek,
      String? fromDate,
      String? toDate,
      bool? inactive,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWorkWeekSettingsWorkWeekWorkWeek(
        workWeekId: workWeekId ?? this.workWeekId,
        workWeek: workWeek ?? this.workWeek,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

String? fwStandardSqlServerFwDataTypesToJson(
    enums.FwStandardSqlServerFwDataTypes? fwStandardSqlServerFwDataTypes) {
  return enums
      .$FwStandardSqlServerFwDataTypesMap[fwStandardSqlServerFwDataTypes];
}

enums.FwStandardSqlServerFwDataTypes fwStandardSqlServerFwDataTypesFromJson(
    String? fwStandardSqlServerFwDataTypes) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return enums.FwStandardSqlServerFwDataTypes.swaggerGeneratedUnknown;
  }

  return enums.$FwStandardSqlServerFwDataTypesMap.entries
      .firstWhere(
          (element) =>
              element.value.toLowerCase() ==
              fwStandardSqlServerFwDataTypes.toLowerCase(),
          orElse: () => const MapEntry(
              enums.FwStandardSqlServerFwDataTypes.swaggerGeneratedUnknown, ''))
      .key;
}

List<String> fwStandardSqlServerFwDataTypesListToJson(
    List<enums.FwStandardSqlServerFwDataTypes>?
        fwStandardSqlServerFwDataTypes) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return [];
  }

  return fwStandardSqlServerFwDataTypes
      .map((e) => enums.$FwStandardSqlServerFwDataTypesMap[e]!)
      .toList();
}

List<enums.FwStandardSqlServerFwDataTypes>
    fwStandardSqlServerFwDataTypesListFromJson(
        List? fwStandardSqlServerFwDataTypes) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return [];
  }

  return fwStandardSqlServerFwDataTypes
      .map((e) => fwStandardSqlServerFwDataTypesFromJson(e.toString()))
      .toList();
}

typedef JsonFactory<T> = T Function(Map<String, dynamic> json);

class CustomJsonDecoder {
  CustomJsonDecoder(this.factories);

  final Map<Type, JsonFactory> factories;

  dynamic decode<T>(dynamic entity) {
    if (entity is Iterable) {
      return _decodeList<T>(entity);
    }

    if (entity is T) {
      return entity;
    }

    if (entity is Map<String, dynamic>) {
      return _decodeMap<T>(entity);
    }

    return entity;
  }

  T _decodeMap<T>(Map<String, dynamic> values) {
    final jsonFactory = factories[T];
    if (jsonFactory == null || jsonFactory is! JsonFactory<T>) {
      return throw "Could not find factory for type $T. Is '$T: $T.fromJsonFactory' included in the CustomJsonDecoder instance creation in bootstrapper.dart?";
    }

    return jsonFactory(values);
  }

  List<T> _decodeList<T>(Iterable values) =>
      values.where((v) => v != null).map<T>((v) => decode<T>(v) as T).toList();
}

class JsonSerializableConverter extends chopper.JsonConverter {
  @override
  chopper.Response<ResultType> convertResponse<ResultType, Item>(
      chopper.Response response) {
    if (response.bodyString.isEmpty) {
      // In rare cases, when let's say 204 (no content) is returned -
      // we cannot decode the missing json with the result type specified
      return chopper.Response(response.base, null, error: response.error);
    }

    final jsonRes = super.convertResponse(response);
    return jsonRes.copyWith<ResultType>(
        body: jsonDecoder.decode<Item>(jsonRes.body) as ResultType);
  }
}

final jsonDecoder = CustomJsonDecoder(SettingsJsonDecoderMappings);

// ignore: unused_element
String? _dateToJson(DateTime? date) {
  if (date == null) {
    return null;
  }

  final year = date.year.toString();
  final month = date.month < 10 ? '0${date.month}' : date.month.toString();
  final day = date.day < 10 ? '0${date.day}' : date.day.toString();

  return '$year-$month-$day';
}
