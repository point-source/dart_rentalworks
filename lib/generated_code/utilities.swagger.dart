// ignore_for_file: type=lint

import 'package:json_annotation/json_annotation.dart';
import 'package:collection/collection.dart';
import 'dart:convert';

import 'package:chopper/chopper.dart';

import 'client_mapping.dart';
import 'dart:async';
import 'package:chopper/chopper.dart' as chopper;
import 'utilities.enums.swagger.dart' as enums;
export 'utilities.enums.swagger.dart';

part 'utilities.swagger.chopper.dart';
part 'utilities.swagger.g.dart';

// **************************************************************************
// SwaggerChopperGenerator
// **************************************************************************

@ChopperApi()
abstract class Utilities extends ChopperService {
  static Utilities create({
    ChopperClient? client,
    Authenticator? authenticator,
    String? baseUrl,
    Iterable<dynamic>? interceptors,
  }) {
    if (client != null) {
      return _$Utilities(client);
    }

    final newClient = ChopperClient(
      services: [_$Utilities()],
      converter: $JsonSerializableConverter(),
      interceptors: interceptors ?? [],
      authenticator: authenticator, /*baseUrl: YOUR_BASE_URL*/
    );
    return _$Utilities(newClient);
  }

  ///
  ///@param uniqueid1
  ///@param uniqueid2
  ///@param uniqueid3
  ///@param description
  ///@param rectype
  ///@param uniqueid1int
  Future<chopper.Response<List<FwStandardModelsFwAppImageModel>>>
      appimageGetimagesGet({
    String? uniqueid1,
    String? uniqueid2,
    String? uniqueid3,
    String? description,
    String? rectype,
    int? uniqueid1int,
  }) {
    generatedMapping.putIfAbsent(FwStandardModelsFwAppImageModel,
        () => FwStandardModelsFwAppImageModel.fromJsonFactory);

    return _appimageGetimagesGet(
        uniqueid1: uniqueid1,
        uniqueid2: uniqueid2,
        uniqueid3: uniqueid3,
        description: description,
        rectype: rectype,
        uniqueid1int: uniqueid1int);
  }

  ///
  ///@param uniqueid1
  ///@param uniqueid2
  ///@param uniqueid3
  ///@param description
  ///@param rectype
  ///@param uniqueid1int
  @Get(path: '/appimage/getimages')
  Future<chopper.Response<List<FwStandardModelsFwAppImageModel>>>
      _appimageGetimagesGet({
    @Query('uniqueid1') String? uniqueid1,
    @Query('uniqueid2') String? uniqueid2,
    @Query('uniqueid3') String? uniqueid3,
    @Query('description') String? description,
    @Query('rectype') String? rectype,
    @Query('uniqueid1int') int? uniqueid1int,
  });

  ///
  ///@param appimageid
  ///@param thumbnail
  ///@param download
  Future<chopper.Response<List<FwStandardModelsFwAppImageModel>>>
      appimageGetimageGet({
    String? appimageid,
    bool? thumbnail,
    bool? download,
  }) {
    generatedMapping.putIfAbsent(FwStandardModelsFwAppImageModel,
        () => FwStandardModelsFwAppImageModel.fromJsonFactory);

    return _appimageGetimageGet(
        appimageid: appimageid, thumbnail: thumbnail, download: download);
  }

  ///
  ///@param appimageid
  ///@param thumbnail
  ///@param download
  @Get(path: '/appimage/getimage')
  Future<chopper.Response<List<FwStandardModelsFwAppImageModel>>>
      _appimageGetimageGet({
    @Query('appimageid') String? appimageid,
    @Query('thumbnail') bool? thumbnail,
    @Query('download') bool? download,
  });

  ///
  ///@param thumbnail
  ///@param uniqueid1
  ///@param uniqueid2
  ///@param uniqueid3
  ///@param uniqueid1int
  ///@param orderby
  ///@param download
  Future<chopper.Response<List<FwStandardModelsFwAppImageModel>>>
      appimageGetimageforGet({
    bool? thumbnail,
    String? uniqueid1,
    String? uniqueid2,
    String? uniqueid3,
    int? uniqueid1int,
    String? orderby,
    bool? download,
  }) {
    generatedMapping.putIfAbsent(FwStandardModelsFwAppImageModel,
        () => FwStandardModelsFwAppImageModel.fromJsonFactory);

    return _appimageGetimageforGet(
        thumbnail: thumbnail,
        uniqueid1: uniqueid1,
        uniqueid2: uniqueid2,
        uniqueid3: uniqueid3,
        uniqueid1int: uniqueid1int,
        orderby: orderby,
        download: download);
  }

  ///
  ///@param thumbnail
  ///@param uniqueid1
  ///@param uniqueid2
  ///@param uniqueid3
  ///@param uniqueid1int
  ///@param orderby
  ///@param download
  @Get(path: '/appimage/getimagefor')
  Future<chopper.Response<List<FwStandardModelsFwAppImageModel>>>
      _appimageGetimageforGet({
    @Query('thumbnail') bool? thumbnail,
    @Query('uniqueid1') String? uniqueid1,
    @Query('uniqueid2') String? uniqueid2,
    @Query('uniqueid3') String? uniqueid3,
    @Query('uniqueid1int') int? uniqueid1int,
    @Query('orderby') String? orderby,
    @Query('download') bool? download,
  });

  ///
  Future<chopper.Response> appimageRepositionimagePost(
      {required WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequest?
          body}) {
    return _appimageRepositionimagePost(body: body);
  }

  ///
  @Post(path: '/appimage/repositionimage')
  Future<chopper.Response> _appimageRepositionimagePost(
      {@Body()
          required WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequest?
              body});

  ///
  Future<chopper.Response> appimagePost(
      {required WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequest?
          body}) {
    return _appimagePost(body: body);
  }

  ///
  @Post(path: '/appimage')
  Future<chopper.Response> _appimagePost(
      {@Body()
          required WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequest?
              body});

  ///
  Future<chopper.Response> appimageDelete(
      {required WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequest?
          body}) {
    return _appimageDelete(body: body);
  }

  ///
  @Delete(path: '/appimage')
  Future<chopper.Response> _appimageDelete(
      {@Body()
          required WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequest?
              body});

  ///
  Future<chopper.Response> appimageEmailPost(
      {required FwStandardBusinessLogicFwAppImageLogicEmailRequest? body}) {
    return _appimageEmailPost(body: body);
  }

  ///
  @Post(path: '/appimage/email')
  Future<chopper.Response> _appimageEmailPost(
      {@Body()
          required FwStandardBusinessLogicFwAppImageLogicEmailRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      browseactiveviewfieldsBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _browseactiveviewfieldsBrowsePost(body: body);
  }

  ///
  @Post(path: '/browseactiveviewfields/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _browseactiveviewfieldsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      browseactiveviewfieldsExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _browseactiveviewfieldsExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/browseactiveviewfields/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _browseactiveviewfieldsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic>>
      browseactiveviewfieldsGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic
                .fromJsonFactory);

    return _browseactiveviewfieldsGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/browseactiveviewfields')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic>>
      _browseactiveviewfieldsGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields>>
      browseactiveviewfieldsPost(
          {required WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields,
        () =>
            WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields
                .fromJsonFactory);

    return _browseactiveviewfieldsPost(body: body);
  }

  ///
  @Post(path: '/browseactiveviewfields')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields>>
      _browseactiveviewfieldsPost(
          {@Body()
              required WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields?
                  body});

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields>>
      browseactiveviewfieldsIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields,
        () =>
            WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields
                .fromJsonFactory);

    return _browseactiveviewfieldsIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/browseactiveviewfields/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields>>
      _browseactiveviewfieldsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields>>
      browseactiveviewfieldsIdPut({
    required String? id,
    required WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields?
        body,
  }) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields,
        () =>
            WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields
                .fromJsonFactory);

    return _browseactiveviewfieldsIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(path: '/browseactiveviewfields/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields>>
      _browseactiveviewfieldsIdPut({
    @Path('id') required String? id,
    @Body()
        required WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields?
            body,
  });

  ///
  ///@param id
  Future<chopper.Response<bool>> browseactiveviewfieldsIdDelete(
      {required String? id}) {
    return _browseactiveviewfieldsIdDelete(id: id);
  }

  ///
  ///@param id
  @Delete(path: '/browseactiveviewfields/{id}')
  Future<chopper.Response<bool>> _browseactiveviewfieldsIdDelete(
      {@Path('id') required String? id});

  ///
  Future<chopper.Response<WebApiModulesInventoryInventoryChangeICodeResponse>>
      changeicodeutilityChangeicodePost(
          {required WebApiModulesInventoryInventoryChangeICodeRequest? body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesInventoryInventoryChangeICodeResponse,
        () =>
            WebApiModulesInventoryInventoryChangeICodeResponse.fromJsonFactory);

    return _changeicodeutilityChangeicodePost(body: body);
  }

  ///
  @Post(path: '/changeicodeutility/changeicode')
  Future<chopper.Response<WebApiModulesInventoryInventoryChangeICodeResponse>>
      _changeicodeutilityChangeicodePost(
          {@Body()
              required WebApiModulesInventoryInventoryChangeICodeRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeicodeutilityValidaterentalinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _changeicodeutilityValidaterentalinventoryBrowsePost(body: body);
  }

  ///
  @Post(path: '/changeicodeutility/validaterentalinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _changeicodeutilityValidaterentalinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeicodeutilityValidatesalesinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _changeicodeutilityValidatesalesinventoryBrowsePost(body: body);
  }

  ///
  @Post(path: '/changeicodeutility/validatesalesinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _changeicodeutilityValidatesalesinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeicodeutilityValidateitemBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _changeicodeutilityValidateitemBrowsePost(body: body);
  }

  ///
  @Post(path: '/changeicodeutility/validateitem/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _changeicodeutilityValidateitemBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeofficewarehouseValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _changeofficewarehouseValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(path: '/changeofficewarehouse/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _changeofficewarehouseValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeofficewarehouseValidatewarehouselocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _changeofficewarehouseValidatewarehouselocationBrowsePost(
        body: body);
  }

  ///
  @Post(path: '/changeofficewarehouse/validatewarehouselocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _changeofficewarehouseValidatewarehouselocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeofficewarehouseValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _changeofficewarehouseValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(path: '/changeofficewarehouse/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _changeofficewarehouseValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<WebApiModulesAgentOrderChangeOrderStatusResponse>>
      changeorderstatusChangestatusPost(
          {required WebApiModulesAgentOrderChangeOrderStatusRequest? body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesAgentOrderChangeOrderStatusResponse,
        () => WebApiModulesAgentOrderChangeOrderStatusResponse.fromJsonFactory);

    return _changeorderstatusChangestatusPost(body: body);
  }

  ///
  @Post(path: '/changeorderstatus/changestatus')
  Future<chopper.Response<WebApiModulesAgentOrderChangeOrderStatusResponse>>
      _changeorderstatusChangestatusPost(
          {@Body()
              required WebApiModulesAgentOrderChangeOrderStatusRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeorderstatusValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _changeorderstatusValidateorderBrowsePost(body: body);
  }

  ///
  @Post(path: '/changeorderstatus/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _changeorderstatusValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      currencymissingBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _currencymissingBrowsePost(body: body);
  }

  ///
  @Post(path: '/currencymissing/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _currencymissingBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      currencymissingExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _currencymissingExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/currencymissing/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _currencymissingExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param request
  Future<
          chopper.Response<
              WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse>>
      currencymissingutilityApplyproposedcurrenciesPost(
          {WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesRequest?
              request}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesRequest,
        () =>
            WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesRequest
                .fromJsonFactory);
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse,
        () =>
            WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse
                .fromJsonFactory);

    return _currencymissingutilityApplyproposedcurrenciesPost(request: request);
  }

  ///
  ///@param request
  @Post(
    path: '/currencymissingutility/applyproposedcurrencies',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse>>
      _currencymissingutilityApplyproposedcurrenciesPost(
          {@Query('request')
              WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesRequest?
                  request});

  ///
  ///@param widgetApiName
  ///@param dataPoints
  ///@param locationId
  ///@param warehouseId
  ///@param departmentId
  ///@param dateBehaviorId
  ///@param dateField
  ///@param fromDate
  ///@param toDate
  ///@param stacked
  Future<chopper.Response<WebApiModulesSettingsWidgetSettingsWidgetWidget>>
      dashboardLoadwidgetbynameWidgetapinameGet({
    required String? widgetApiName,
    int? dataPoints,
    String? locationId,
    String? warehouseId,
    String? departmentId,
    String? dateBehaviorId,
    String? dateField,
    String? fromDate,
    String? toDate,
    bool? stacked,
  }) {
    generatedMapping.putIfAbsent(
        WebApiModulesSettingsWidgetSettingsWidgetWidget,
        () => WebApiModulesSettingsWidgetSettingsWidgetWidget.fromJsonFactory);

    return _dashboardLoadwidgetbynameWidgetapinameGet(
        widgetApiName: widgetApiName,
        dataPoints: dataPoints,
        locationId: locationId,
        warehouseId: warehouseId,
        departmentId: departmentId,
        dateBehaviorId: dateBehaviorId,
        dateField: dateField,
        fromDate: fromDate,
        toDate: toDate,
        stacked: stacked);
  }

  ///
  ///@param widgetApiName
  ///@param dataPoints
  ///@param locationId
  ///@param warehouseId
  ///@param departmentId
  ///@param dateBehaviorId
  ///@param dateField
  ///@param fromDate
  ///@param toDate
  ///@param stacked
  @Get(path: '/dashboard/loadwidgetbyname/{widgetapiname}')
  Future<chopper.Response<WebApiModulesSettingsWidgetSettingsWidgetWidget>>
      _dashboardLoadwidgetbynameWidgetapinameGet({
    @Path('widgetApiName') required String? widgetApiName,
    @Query('dataPoints') int? dataPoints,
    @Query('locationId') String? locationId,
    @Query('warehouseId') String? warehouseId,
    @Query('departmentId') String? departmentId,
    @Query('dateBehaviorId') String? dateBehaviorId,
    @Query('dateField') String? dateField,
    @Query('fromDate') String? fromDate,
    @Query('toDate') String? toDate,
    @Query('stacked') bool? stacked,
  });

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesDashboardSettingsDashboardSettings>>
      dashboardsettingsIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesDashboardSettingsDashboardSettings,
        () => WebApiModulesUtilitiesDashboardSettingsDashboardSettings
            .fromJsonFactory);

    return _dashboardsettingsIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/dashboardsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesDashboardSettingsDashboardSettings>>
      _dashboardsettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesDashboardSettingsDashboardSettings>>
      dashboardsettingsIdPut({
    required String? id,
    required WebApiModulesUtilitiesDashboardSettingsDashboardSettings? body,
  }) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesDashboardSettingsDashboardSettings,
        () => WebApiModulesUtilitiesDashboardSettingsDashboardSettings
            .fromJsonFactory);

    return _dashboardsettingsIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(path: '/dashboardsettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesDashboardSettingsDashboardSettings>>
      _dashboardsettingsIdPut({
    @Path('id') required String? id,
    @Body()
        required WebApiModulesUtilitiesDashboardSettingsDashboardSettings? body,
  });

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesDashboardSettingsDashboardSettings>>
      dashboardsettingsPost(
          {required WebApiModulesUtilitiesDashboardSettingsDashboardSettings?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesDashboardSettingsDashboardSettings,
        () => WebApiModulesUtilitiesDashboardSettingsDashboardSettings
            .fromJsonFactory);

    return _dashboardsettingsPost(body: body);
  }

  ///
  @Post(path: '/dashboardsettings')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesDashboardSettingsDashboardSettings>>
      _dashboardsettingsPost(
          {@Body()
              required WebApiModulesUtilitiesDashboardSettingsDashboardSettings?
                  body});

  ///
  ///@param date
  ///@param Days
  Future<chopper.Response> datefunctionsAdddaysGet({
    String? date,
    int? days,
  }) {
    return _datefunctionsAdddaysGet(date: date, days: days);
  }

  ///
  ///@param date
  ///@param Days
  @Get(path: '/datefunctions/adddays')
  Future<chopper.Response> _datefunctionsAdddaysGet({
    @Query('date') String? date,
    @Query('Days') int? days,
  });

  ///
  ///@param date
  ///@param Months
  Future<chopper.Response> datefunctionsAddmonthsGet({
    String? date,
    int? months,
  }) {
    return _datefunctionsAddmonthsGet(date: date, months: months);
  }

  ///
  ///@param date
  ///@param Months
  @Get(path: '/datefunctions/addmonths')
  Future<chopper.Response> _datefunctionsAddmonthsGet({
    @Query('date') String? date,
    @Query('Months') int? months,
  });

  ///
  ///@param fromDate
  ///@param toDate
  Future<chopper.Response> datefunctionsNumberofmonthsGet({
    String? fromDate,
    String? toDate,
  }) {
    return _datefunctionsNumberofmonthsGet(fromDate: fromDate, toDate: toDate);
  }

  ///
  ///@param fromDate
  ///@param toDate
  @Get(path: '/datefunctions/numberofmonths')
  Future<chopper.Response> _datefunctionsNumberofmonthsGet({
    @Query('fromDate') String? fromDate,
    @Query('toDate') String? toDate,
  });

  ///
  ///@param filename
  ///@param downloadasfilename
  Future<chopper.Response> downloadFilenameGet({
    required String? filename,
    String? downloadasfilename,
  }) {
    return _downloadFilenameGet(
        filename: filename, downloadasfilename: downloadasfilename);
  }

  ///
  ///@param filename
  ///@param downloadasfilename
  @Get(path: '/download/{filename}')
  Future<chopper.Response> _downloadFilenameGet({
    @Path('filename') required String? filename,
    @Query('downloadasfilename') String? downloadasfilename,
  });

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorylocationitemBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorylocationitemBrowsePost(body: body);
  }

  ///
  @Post(path: '/inventorylocationitem/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorylocationitemBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorylocationitemExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _inventorylocationitemExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/inventorylocationitem/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _inventorylocationitemExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  Future<
          chopper.Response<
              List<
                  WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem>>>
      inventorylocationitemGet({
    int? pageno,
    int? pagesize,
    String? sort,
  }) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem,
        () => WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem
            .fromJsonFactory);

    return _inventorylocationitemGet(
        pageno: pageno, pagesize: pagesize, sort: sort);
  }

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  @Get(path: '/inventorylocationitem')
  Future<
          chopper.Response<
              List<
                  WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem>>>
      _inventorylocationitemGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
  });

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem>>
      inventorylocationitemIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem,
        () => WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem
            .fromJsonFactory);

    return _inventorylocationitemIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/inventorylocationitem/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem>>
      _inventorylocationitemIdGet({@Path('id') required String? id});

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem>>
      inventorylocationitemIdPut({
    required String? id,
    required WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem?
        body,
  }) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem,
        () => WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem
            .fromJsonFactory);

    return _inventorylocationitemIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(path: '/inventorylocationitem/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem>>
      _inventorylocationitemIdPut({
    @Path('id') required String? id,
    @Body()
        required WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem?
            body,
  });

  ///
  Future<
          chopper.Response<
              List<
                  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic>>>
      inventorylocationitemManyPost(
          {required List<
                  WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem>?
              body}) {
    generatedMapping.putIfAbsent(
        MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic,
        () =>
            MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic
                .fromJsonFactory);

    return _inventorylocationitemManyPost(body: body);
  }

  ///
  @Post(path: '/inventorylocationitem/many')
  Future<
          chopper.Response<
              List<
                  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic>>>
      _inventorylocationitemManyPost(
          {@Body()
              required List<
                      WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem>?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorymergeBrowsePost({required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorymergeBrowsePost(body: body);
  }

  ///
  @Post(path: '/inventorymerge/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorymergeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorymergeExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _inventorymergeExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/inventorymerge/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _inventorymergeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param id
  Future<chopper.Response<WebApiModulesUtilitiesInventoryMergeInventoryMerge>>
      inventorymergeIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryMergeInventoryMerge,
        () =>
            WebApiModulesUtilitiesInventoryMergeInventoryMerge.fromJsonFactory);

    return _inventorymergeIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/inventorymerge/{id}')
  Future<chopper.Response<WebApiModulesUtilitiesInventoryMergeInventoryMerge>>
      _inventorymergeIdGet({@Path('id') required String? id});

  ///
  ///@param id
  Future<chopper.Response<WebApiModulesUtilitiesInventoryMergeInventoryMerge>>
      inventorymergeIdPut({
    required String? id,
    required WebApiModulesUtilitiesInventoryMergeInventoryMerge? body,
  }) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryMergeInventoryMerge,
        () =>
            WebApiModulesUtilitiesInventoryMergeInventoryMerge.fromJsonFactory);

    return _inventorymergeIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(path: '/inventorymerge/{id}')
  Future<chopper.Response<WebApiModulesUtilitiesInventoryMergeInventoryMerge>>
      _inventorymergeIdPut({
    @Path('id') required String? id,
    @Body() required WebApiModulesUtilitiesInventoryMergeInventoryMerge? body,
  });

  ///
  ///@param id
  Future<chopper.Response<bool>> inventorymergeIdDelete({required String? id}) {
    return _inventorymergeIdDelete(id: id);
  }

  ///
  ///@param id
  @Delete(path: '/inventorymerge/{id}')
  Future<chopper.Response<bool>> _inventorymergeIdDelete(
      {@Path('id') required String? id});

  ///
  Future<chopper.Response<WebApiModulesUtilitiesInventoryMergeInventoryMerge>>
      inventorymergePost(
          {required WebApiModulesUtilitiesInventoryMergeInventoryMerge? body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryMergeInventoryMerge,
        () =>
            WebApiModulesUtilitiesInventoryMergeInventoryMerge.fromJsonFactory);

    return _inventorymergePost(body: body);
  }

  ///
  @Post(path: '/inventorymerge')
  Future<chopper.Response<WebApiModulesUtilitiesInventoryMergeInventoryMerge>>
      _inventorymergePost(
          {@Body()
              required WebApiModulesUtilitiesInventoryMergeInventoryMerge?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorymergeValidateitemBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorymergeValidateitemBrowsePost(body: body);
  }

  ///
  @Post(path: '/inventorymerge/validateitem/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorymergeValidateitemBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiLogicTSpStatusResponse>> inventorymergeutilityMergeinventoryPost(
      {required WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiLogicTSpStatusResponse,
        () => WebApiLogicTSpStatusResponse.fromJsonFactory);

    return _inventorymergeutilityMergeinventoryPost(body: body);
  }

  ///
  @Post(path: '/inventorymergeutility/mergeinventory')
  Future<
      chopper.Response<
          WebApiLogicTSpStatusResponse>> _inventorymergeutilityMergeinventoryPost(
      {@Body()
          required WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorypurchasesessionBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorypurchasesessionBrowsePost(body: body);
  }

  ///
  @Post(path: '/inventorypurchasesession/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorypurchasesessionBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorypurchasesessionExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _inventorypurchasesessionExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/inventorypurchasesession/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _inventorypurchasesessionExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param id
  Future<chopper.Response<bool>> inventorypurchasesessionIdDelete(
      {required String? id}) {
    return _inventorypurchasesessionIdDelete(id: id);
  }

  ///
  ///@param id
  @Delete(path: '/inventorypurchasesession/{id}')
  Future<chopper.Response<bool>> _inventorypurchasesessionIdDelete(
      {@Path('id') required String? id});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse>>
      inventorypurchaseutilityStartsessionPost(
          {required WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse,
        () =>
            WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse
                .fromJsonFactory);

    return _inventorypurchaseutilityStartsessionPost(body: body);
  }

  ///
  @Post(path: '/inventorypurchaseutility/startsession')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse>>
      _inventorypurchaseutilityStartsessionPost(
          {@Body()
              required WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequest?
                  body});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse>>
      inventorypurchaseutilityUpdatesessionPost(
          {required WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse,
        () =>
            WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse
                .fromJsonFactory);

    return _inventorypurchaseutilityUpdatesessionPost(body: body);
  }

  ///
  @Post(path: '/inventorypurchaseutility/updatesession')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse>>
      _inventorypurchaseutilityUpdatesessionPost(
          {@Body()
              required WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequest?
                  body});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse>>
      inventorypurchaseutilityAssignbarcodesPost(
          {required WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse,
        () =>
            WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse
                .fromJsonFactory);

    return _inventorypurchaseutilityAssignbarcodesPost(body: body);
  }

  ///
  @Post(path: '/inventorypurchaseutility/assignbarcodes')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse>>
      _inventorypurchaseutilityAssignbarcodesPost(
          {@Body()
              required WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequest?
                  body});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse>>
      inventorypurchaseutilityCompletesessionPost(
          {required WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse,
        () =>
            WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse
                .fromJsonFactory);

    return _inventorypurchaseutilityCompletesessionPost(body: body);
  }

  ///
  @Post(path: '/inventorypurchaseutility/completesession')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse>>
      _inventorypurchaseutilityCompletesessionPost(
          {@Body()
              required WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequest?
                  body});

  ///Lookup Warehouses.
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic>>
      inventorypurchaseutilityLookupwarehouseGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic
                .fromJsonFactory);

    return _inventorypurchaseutilityLookupwarehouseGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///Lookup Warehouses.
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorypurchaseutility/lookupwarehouse')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic>>
      _inventorypurchaseutilityLookupwarehouseGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///Lookup Inventory Items
  ///@param warehouseid
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic>>
      inventorypurchaseutilityLookupinventoryitemWarehouseWarehouseidGet({
    required String? warehouseid,
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic
                .fromJsonFactory);

    return _inventorypurchaseutilityLookupinventoryitemWarehouseWarehouseidGet(
        warehouseid: warehouseid,
        pageno: pageno,
        pagesize: pagesize,
        sort: sort,
        filter: filter);
  }

  ///Lookup Inventory Items
  ///@param warehouseid
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(
      path:
          '/inventorypurchaseutility/lookupinventoryitem/warehouse/{warehouseid}')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic>>
      _inventorypurchaseutilityLookupinventoryitemWarehouseWarehouseidGet({
    @Path('warehouseid') required String? warehouseid,
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///Lookup Vendors
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic>>
      inventorypurchaseutilityLookupvendorGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic,
        () => FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic
            .fromJsonFactory);

    return _inventorypurchaseutilityLookupvendorGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///Lookup Vendors
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorypurchaseutility/lookupvendor')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic>>
      _inventorypurchaseutilityLookupvendorGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///Lookup Manufacturers.
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic>>
      inventorypurchaseutilityLookupmanufacturerGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic,
        () => FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic
            .fromJsonFactory);

    return _inventorypurchaseutilityLookupmanufacturerGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///Lookup Manufacturers.
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorypurchaseutility/lookupmanufacturer')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic>>
      _inventorypurchaseutilityLookupmanufacturerGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///Lookup Vendors and Manufacturers.
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic>>
      inventorypurchaseutilityLookupcountryGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic
                .fromJsonFactory);

    return _inventorypurchaseutilityLookupcountryGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///Lookup Vendors and Manufacturers.
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorypurchaseutility/lookupcountry')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic>>
      _inventorypurchaseutilityLookupcountryGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///Lookup Currencies.
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic>>
      inventorypurchaseutilityLookupcurrencyGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic
                .fromJsonFactory);

    return _inventorypurchaseutilityLookupcurrencyGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///Lookup Currencies.
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorypurchaseutility/lookupcurrency')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic>>
      _inventorypurchaseutilityLookupcurrencyGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorypurchaseutilityItemsBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorypurchaseutilityItemsBrowsePost(body: body);
  }

  ///
  @Post(path: '/inventorypurchaseutility/items/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorypurchaseutilityItemsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorypurchaseutilityItemsExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _inventorypurchaseutilityItemsExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/inventorypurchaseutility/items/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _inventorypurchaseutilityItemsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic>>
      inventorypurchaseutilityItemsGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic
                .fromJsonFactory);

    return _inventorypurchaseutilityItemsGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/inventorypurchaseutility/items')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic>>
      _inventorypurchaseutilityItemsGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem>>
      inventorypurchaseutilityItemsIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem,
        () =>
            WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem
                .fromJsonFactory);

    return _inventorypurchaseutilityItemsIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/inventorypurchaseutility/items/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem>>
      _inventorypurchaseutilityItemsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem>>
      inventorypurchaseutilityItemsIdPut({
    required String? id,
    required WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem?
        body,
  }) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem,
        () =>
            WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem
                .fromJsonFactory);

    return _inventorypurchaseutilityItemsIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(path: '/inventorypurchaseutility/items/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem>>
      _inventorypurchaseutilityItemsIdPut({
    @Path('id') required String? id,
    @Body()
        required WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem?
            body,
  });

  ///
  Future<
          chopper.Response<
              List<
                  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic>>>
      inventorypurchaseutilityItemsManyPost(
          {required List<
                  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem>?
              body}) {
    generatedMapping.putIfAbsent(
        MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic,
        () =>
            MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic
                .fromJsonFactory);

    return _inventorypurchaseutilityItemsManyPost(body: body);
  }

  ///
  @Post(path: '/inventorypurchaseutility/items/many')
  Future<
          chopper.Response<
              List<
                  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic>>>
      _inventorypurchaseutilityItemsManyPost(
          {@Body()
              required List<
                      WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem>?
                  body});

  ///
  Future<
          chopper
              .Response<WebApiModulesInventoryInventoryRetireInventoryResponse>>
      inventoryretireutilityRetireinventoryPost(
          {required WebApiModulesInventoryInventoryRetireInventoryRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesInventoryInventoryRetireInventoryResponse,
        () => WebApiModulesInventoryInventoryRetireInventoryResponse
            .fromJsonFactory);

    return _inventoryretireutilityRetireinventoryPost(body: body);
  }

  ///
  @Post(path: '/inventoryretireutility/retireinventory')
  Future<
          chopper
              .Response<WebApiModulesInventoryInventoryRetireInventoryResponse>>
      _inventoryretireutilityRetireinventoryPost(
          {@Body()
              required WebApiModulesInventoryInventoryRetireInventoryRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryretireutilityValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryretireutilityValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(path: '/inventoryretireutility/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryretireutilityValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryretireutilityValidateitemBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryretireutilityValidateitemBrowsePost(body: body);
  }

  ///
  @Post(path: '/inventoryretireutility/validateitem/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryretireutilityValidateitemBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryretireutilityValidateconsignoragreementBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryretireutilityValidateconsignoragreementBrowsePost(
        body: body);
  }

  ///
  @Post(path: '/inventoryretireutility/validateconsignoragreement/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryretireutilityValidateconsignoragreementBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<bool>> inventorysequenceutilityDonothingPost() {
    return _inventorysequenceutilityDonothingPost();
  }

  ///
  @Post(path: '/inventorysequenceutility/donothing')
  Future<chopper.Response<bool>> _inventorysequenceutilityDonothingPost();

  ///
  Future<
          chopper
              .Response<WebApiModulesInventoryInventoryRetireInventoryResponse>>
      inventoryunretireutilityUnretireinventoryPost(
          {required WebApiModulesInventoryInventoryUnretireInventoryRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesInventoryInventoryRetireInventoryResponse,
        () => WebApiModulesInventoryInventoryRetireInventoryResponse
            .fromJsonFactory);

    return _inventoryunretireutilityUnretireinventoryPost(body: body);
  }

  ///
  @Post(path: '/inventoryunretireutility/unretireinventory')
  Future<
          chopper
              .Response<WebApiModulesInventoryInventoryRetireInventoryResponse>>
      _inventoryunretireutilityUnretireinventoryPost(
          {@Body()
              required WebApiModulesInventoryInventoryUnretireInventoryRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryunretireutilityValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryunretireutilityValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(path: '/inventoryunretireutility/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryunretireutilityValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryunretireutilityValidateitemBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryunretireutilityValidateitemBrowsePost(body: body);
  }

  ///
  @Post(path: '/inventoryunretireutility/validateitem/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryunretireutilityValidateitemBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse>>
      invoiceprocessbatchCreatebatchPost(
          {required WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse,
        () =>
            WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse
                .fromJsonFactory);

    return _invoiceprocessbatchCreatebatchPost(body: body);
  }

  ///
  @Post(path: '/invoiceprocessbatch/createbatch')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse>>
      _invoiceprocessbatchCreatebatchPost(
          {@Body()
              required WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoiceprocessbatchBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoiceprocessbatchBrowsePost(body: body);
  }

  ///
  @Post(path: '/invoiceprocessbatch/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoiceprocessbatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      invoiceprocessbatchExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _invoiceprocessbatchExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/invoiceprocessbatch/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _invoiceprocessbatchExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoiceprocessbatchValidatebatchBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoiceprocessbatchValidatebatchBrowsePost(body: body);
  }

  ///
  @Post(path: '/invoiceprocessbatch/validatebatch/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoiceprocessbatchValidatebatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesMigrateStartMigrateSessionResponse>>
      migrateStartsessionPost(
          {required WebApiModulesUtilitiesMigrateStartMigrateSessionRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesMigrateStartMigrateSessionResponse,
        () => WebApiModulesUtilitiesMigrateStartMigrateSessionResponse
            .fromJsonFactory);

    return _migrateStartsessionPost(body: body);
  }

  ///
  @Post(path: '/migrate/startsession')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesMigrateStartMigrateSessionResponse>>
      _migrateStartsessionPost(
          {@Body()
              required WebApiModulesUtilitiesMigrateStartMigrateSessionRequest?
                  body});

  ///
  Future<
          chopper
              .Response<WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse>>
      migrateUpdateitemPost(
          {required WebApiModulesUtilitiesMigrateUpdateMigrateItemRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse,
        () => WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse
            .fromJsonFactory);

    return _migrateUpdateitemPost(body: body);
  }

  ///
  @Post(path: '/migrate/updateitem')
  Future<
          chopper
              .Response<WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse>>
      _migrateUpdateitemPost(
          {@Body()
              required WebApiModulesUtilitiesMigrateUpdateMigrateItemRequest?
                  body});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse>>
      migrateSelectallPost(
          {required WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse,
        () => WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse
            .fromJsonFactory);

    return _migrateSelectallPost(body: body);
  }

  ///
  @Post(path: '/migrate/selectall')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse>>
      _migrateSelectallPost(
          {@Body()
              required WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest?
                  body});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse>>
      migrateSelectnonePost(
          {required WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse,
        () => WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse
            .fromJsonFactory);

    return _migrateSelectnonePost(body: body);
  }

  ///
  @Post(path: '/migrate/selectnone')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse>>
      _migrateSelectnonePost(
          {@Body()
              required WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest?
                  body});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse>>
      migrateCompletesession2Post(
          {required WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse,
        () => WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse
            .fromJsonFactory);

    return _migrateCompletesession2Post(body: body);
  }

  ///
  @Post(path: '/migrate/completesession2')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse>>
      _migrateCompletesession2Post(
          {@Body()
              required WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequest?
                  body});

  ///
  Future<chopper.Response<Object>> migrateLegendGet() {
    return _migrateLegendGet();
  }

  ///
  @Get(path: '/migrate/legend')
  Future<chopper.Response<Object>> _migrateLegendGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      migrateValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _migrateValidatedealBrowsePost(body: body);
  }

  ///
  @Post(path: '/migrate/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _migrateValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      migrateValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _migrateValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(path: '/migrate/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _migrateValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      migrateValidatecreatenewdealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _migrateValidatecreatenewdealBrowsePost(body: body);
  }

  ///
  @Post(path: '/migrate/validatecreatenewdeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _migrateValidatecreatenewdealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      migrateValidateratetypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _migrateValidateratetypeBrowsePost(body: body);
  }

  ///
  @Post(path: '/migrate/validateratetype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _migrateValidateratetypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      migrateitemBrowsePost({required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _migrateitemBrowsePost(body: body);
  }

  ///
  @Post(path: '/migrateitem/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _migrateitemBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      migrateitemExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _migrateitemExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/migrateitem/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _migrateitemExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      onlineordertrackingBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _onlineordertrackingBrowsePost(body: body);
  }

  ///
  @Post(path: '/onlineordertracking/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _onlineordertrackingBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      onlineordertrackingExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _onlineordertrackingExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/onlineordertracking/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _onlineordertrackingExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic>>
      onlineordertrackingGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic
                .fromJsonFactory);

    return _onlineordertrackingGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/onlineordertracking')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic>>
      _onlineordertrackingGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking>>
      onlineordertrackingPost(
          {required WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking,
        () => WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking
            .fromJsonFactory);

    return _onlineordertrackingPost(body: body);
  }

  ///
  @Post(path: '/onlineordertracking')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking>>
      _onlineordertrackingPost(
          {@Body()
              required WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking?
                  body});

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking>>
      onlineordertrackingIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking,
        () => WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking
            .fromJsonFactory);

    return _onlineordertrackingIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/onlineordertracking/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking>>
      _onlineordertrackingIdGet({@Path('id') required String? id});

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking>>
      onlineordertrackingIdPut({
    required String? id,
    required WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking? body,
  }) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking,
        () => WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking
            .fromJsonFactory);

    return _onlineordertrackingIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(path: '/onlineordertracking/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking>>
      _onlineordertrackingIdPut({
    @Path('id') required String? id,
    @Body()
        required WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking?
            body,
  });

  ///
  ///@param id
  Future<chopper.Response<bool>> onlineordertrackingIdDelete(
      {required String? id}) {
    return _onlineordertrackingIdDelete(id: id);
  }

  ///
  ///@param id
  @Delete(path: '/onlineordertracking/{id}')
  Future<chopper.Response<bool>> _onlineordertrackingIdDelete(
      {@Path('id') required String? id});

  ///
  Future<
          chopper.Response<
              WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse>>
      onlineordertrackingexportExportPost(
          {required WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse,
        () =>
            WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse
                .fromJsonFactory);

    return _onlineordertrackingexportExportPost(body: body);
  }

  ///
  @Post(path: '/onlineordertrackingexport/export')
  Future<
          chopper.Response<
              WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse>>
      _onlineordertrackingexportExportPost(
          {@Body()
              required WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      onlineordertrackingexportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _onlineordertrackingexportEmptyobjectGet();
  }

  ///
  @Get(path: '/onlineordertrackingexport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _onlineordertrackingexportEmptyobjectGet();

  ///
  Future<chopper.Response<WebApiModulesExportsOrderExportOrderExportResponse>>
      orderexportExportPost(
          {required WebApiModulesExportsOrderExportOrderExportRequest? body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesExportsOrderExportOrderExportResponse,
        () =>
            WebApiModulesExportsOrderExportOrderExportResponse.fromJsonFactory);

    return _orderexportExportPost(body: body);
  }

  ///
  @Post(path: '/orderexport/export')
  Future<chopper.Response<WebApiModulesExportsOrderExportOrderExportResponse>>
      _orderexportExportPost(
          {@Body()
              required WebApiModulesExportsOrderExportOrderExportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderexportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderexportEmptyobjectGet();
  }

  ///
  @Get(path: '/orderexport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderexportEmptyobjectGet();

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse>>
      orderlocationscheduleScheduledataPost(
          {required WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse,
        () =>
            WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse
                .fromJsonFactory);

    return _orderlocationscheduleScheduledataPost(body: body);
  }

  ///
  @Post(path: '/orderlocationschedule/scheduledata')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse>>
      _orderlocationscheduleScheduledataPost(
          {@Body()
              required WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderlocationscheduleValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderlocationscheduleValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(path: '/orderlocationschedule/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderlocationscheduleValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param id
  Future<chopper.Response<WebApiModulesUtilitiesProgressMeterProgressMeter>>
      progressmeterIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesProgressMeterProgressMeter,
        () => WebApiModulesUtilitiesProgressMeterProgressMeter.fromJsonFactory);

    return _progressmeterIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/progressmeter/{id}')
  Future<chopper.Response<WebApiModulesUtilitiesProgressMeterProgressMeter>>
      _progressmeterIdGet({@Path('id') required String? id});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse>>
      quikactivityCalendardataPost(
          {required WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse,
        () =>
            WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse
                .fromJsonFactory);

    return _quikactivityCalendardataPost(body: body);
  }

  ///
  @Post(path: '/quikactivity/calendardata')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse>>
      _quikactivityCalendardataPost(
          {@Body()
              required WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequest?
                  body});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse>>
      quikactivityPopulatePost(
          {required WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse,
        () =>
            WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse
                .fromJsonFactory);

    return _quikactivityPopulatePost(body: body);
  }

  ///
  @Post(path: '/quikactivity/populate')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse>>
      _quikactivityPopulatePost(
          {@Body()
              required WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityBrowsePost({required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikactivityBrowsePost(body: body);
  }

  ///
  @Post(path: '/quikactivity/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikactivityBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      quikactivityExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _quikactivityExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/quikactivity/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _quikactivityExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param id
  Future<chopper.Response<WebApiModulesUtilitiesQuikActivityQuikActivity>>
      quikactivityIdPut({
    required String? id,
    required WebApiModulesUtilitiesQuikActivityQuikActivity? body,
  }) {
    generatedMapping.putIfAbsent(WebApiModulesUtilitiesQuikActivityQuikActivity,
        () => WebApiModulesUtilitiesQuikActivityQuikActivity.fromJsonFactory);

    return _quikactivityIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(path: '/quikactivity/{id}')
  Future<chopper.Response<WebApiModulesUtilitiesQuikActivityQuikActivity>>
      _quikactivityIdPut({
    @Path('id') required String? id,
    @Body() required WebApiModulesUtilitiesQuikActivityQuikActivity? body,
  });

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikactivityValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(path: '/quikactivity/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikactivityValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivitysettingsBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikactivitysettingsBrowsePost(body: body);
  }

  ///
  @Post(path: '/quikactivitysettings/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikactivitysettingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      quikactivitysettingsExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _quikactivitysettingsExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/quikactivitysettings/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _quikactivitysettingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic>>
      quikactivitysettingsGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic
                .fromJsonFactory);

    return _quikactivitysettingsGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/quikactivitysettings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic>>
      _quikactivitysettingsGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings>>
      quikactivitysettingsPost(
          {required WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings,
        () =>
            WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings
                .fromJsonFactory);

    return _quikactivitysettingsPost(body: body);
  }

  ///
  @Post(path: '/quikactivitysettings')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings>>
      _quikactivitysettingsPost(
          {@Body()
              required WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings?
                  body});

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings>>
      quikactivitysettingsIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings,
        () =>
            WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings
                .fromJsonFactory);

    return _quikactivitysettingsIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/quikactivitysettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings>>
      _quikactivitysettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings>>
      quikactivitysettingsIdPut({
    required String? id,
    required WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings?
        body,
  }) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings,
        () =>
            WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings
                .fromJsonFactory);

    return _quikactivitysettingsIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(path: '/quikactivitysettings/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings>>
      _quikactivitysettingsIdPut({
    @Path('id') required String? id,
    @Body()
        required WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings?
            body,
  });

  ///
  ///@param id
  Future<chopper.Response<bool>> quikactivitysettingsIdDelete(
      {required String? id}) {
    return _quikactivitysettingsIdDelete(id: id);
  }

  ///
  ///@param id
  @Delete(path: '/quikactivitysettings/{id}')
  Future<chopper.Response<bool>> _quikactivitysettingsIdDelete(
      {@Path('id') required String? id});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdatebatchBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdatebatchBrowsePost(body: body);
  }

  ///
  @Post(path: '/rateupdatebatch/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdatebatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rateupdatebatchExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rateupdatebatchExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/rateupdatebatch/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rateupdatebatchExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic>>
      rateupdatebatchGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic
                .fromJsonFactory);

    return _rateupdatebatchGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/rateupdatebatch')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic>>
      _rateupdatebatchGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///
  ///@param id
  Future<chopper.Response<WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch>>
      rateupdatebatchIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch,
        () => WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch
            .fromJsonFactory);

    return _rateupdatebatchIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/rateupdatebatch/{id}')
  Future<chopper.Response<WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch>>
      _rateupdatebatchIdGet({@Path('id') required String? id});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdatebatchitemBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdatebatchitemBrowsePost(body: body);
  }

  ///
  @Post(path: '/rateupdatebatchitem/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdatebatchitemBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rateupdatebatchitemExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rateupdatebatchitemExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/rateupdatebatchitem/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rateupdatebatchitemExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic>>
      rateupdatebatchitemGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic
                .fromJsonFactory);

    return _rateupdatebatchitemGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/rateupdatebatchitem')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic>>
      _rateupdatebatchitemGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///
  ///@param id
  Future<
          chopper.Response<
              WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem>>
      rateupdatebatchitemIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem,
        () => WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem
            .fromJsonFactory);

    return _rateupdatebatchitemIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/rateupdatebatchitem/{id}')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem>>
      _rateupdatebatchitemIdGet({@Path('id') required String? id});

  ///
  Future<chopper.Response<Object>> rateupdateitemLegendGet() {
    return _rateupdateitemLegendGet();
  }

  ///
  @Get(path: '/rateupdateitem/legend')
  Future<chopper.Response<Object>> _rateupdateitemLegendGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdateitemBrowsePost({required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdateitemBrowsePost(body: body);
  }

  ///
  @Post(path: '/rateupdateitem/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdateitemBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rateupdateitemExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rateupdateitemExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/rateupdateitem/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rateupdateitemExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic>>
      rateupdateitemGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic
                .fromJsonFactory);

    return _rateupdateitemGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/rateupdateitem')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic>>
      _rateupdateitemGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///
  ///@param id
  Future<chopper.Response<WebApiModulesUtilitiesRateUpdateItemRateUpdateItem>>
      rateupdateitemIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesRateUpdateItemRateUpdateItem,
        () =>
            WebApiModulesUtilitiesRateUpdateItemRateUpdateItem.fromJsonFactory);

    return _rateupdateitemIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/rateupdateitem/{id}')
  Future<chopper.Response<WebApiModulesUtilitiesRateUpdateItemRateUpdateItem>>
      _rateupdateitemIdGet({@Path('id') required String? id});

  ///
  ///@param id
  Future<chopper.Response<WebApiModulesUtilitiesRateUpdateItemRateUpdateItem>>
      rateupdateitemIdPut({
    required String? id,
    required WebApiModulesUtilitiesRateUpdateItemRateUpdateItem? body,
  }) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesRateUpdateItemRateUpdateItem,
        () =>
            WebApiModulesUtilitiesRateUpdateItemRateUpdateItem.fromJsonFactory);

    return _rateupdateitemIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(path: '/rateupdateitem/{id}')
  Future<chopper.Response<WebApiModulesUtilitiesRateUpdateItemRateUpdateItem>>
      _rateupdateitemIdPut({
    @Path('id') required String? id,
    @Body() required WebApiModulesUtilitiesRateUpdateItemRateUpdateItem? body,
  });

  ///
  Future<
          chopper.Response<
              List<
                  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic>>>
      rateupdateitemManyPost(
          {required List<WebApiModulesUtilitiesRateUpdateItemRateUpdateItem>?
              body}) {
    generatedMapping.putIfAbsent(
        MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic,
        () =>
            MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic
                .fromJsonFactory);

    return _rateupdateitemManyPost(body: body);
  }

  ///
  @Post(path: '/rateupdateitem/many')
  Future<
          chopper.Response<
              List<
                  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic>>>
      _rateupdateitemManyPost(
          {@Body()
              required List<WebApiModulesUtilitiesRateUpdateItemRateUpdateItem>?
                  body});

  ///
  Future<
          chopper.Response<
              WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse>>
      rateupdateutilityApplyPost(
          {required WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse,
        () =>
            WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse
                .fromJsonFactory);

    return _rateupdateutilityApplyPost(body: body);
  }

  ///
  @Post(path: '/rateupdateutility/apply')
  Future<
          chopper.Response<
              WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse>>
      _rateupdateutilityApplyPost(
          {@Body()
              required WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdateutilityValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdateutilityValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(path: '/rateupdateutility/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdateutilityValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdateutilityValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdateutilityValidateinventorytypeBrowsePost(body: body);
  }

  ///
  @Post(path: '/rateupdateutility/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdateutilityValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdateutilityValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdateutilityValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(path: '/rateupdateutility/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdateutilityValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdateutilityValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdateutilityValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(path: '/rateupdateutility/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdateutilityValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdateutilityValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdateutilityValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(path: '/rateupdateutility/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdateutilityValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdateutilityValidateunitBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdateutilityValidateunitBrowsePost(body: body);
  }

  ///
  @Post(path: '/rateupdateutility/validateunit/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdateutilityValidateunitBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdateutilityValidatemanufacturerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdateutilityValidatemanufacturerBrowsePost(body: body);
  }

  ///
  @Post(path: '/rateupdateutility/validatemanufacturer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdateutilityValidatemanufacturerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdateutilityValidatecurrencyBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdateutilityValidatecurrencyBrowsePost(body: body);
  }

  ///
  @Post(path: '/rateupdateutility/validatecurrency/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdateutilityValidatecurrencyBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse>>
      receiptprocessbatchCreatebatchPost(
          {required WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse,
        () =>
            WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse
                .fromJsonFactory);

    return _receiptprocessbatchCreatebatchPost(body: body);
  }

  ///
  @Post(path: '/receiptprocessbatch/createbatch')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse>>
      _receiptprocessbatchCreatebatchPost(
          {@Body()
              required WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptprocessbatchBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _receiptprocessbatchBrowsePost(body: body);
  }

  ///
  @Post(path: '/receiptprocessbatch/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _receiptprocessbatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      receiptprocessbatchExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _receiptprocessbatchExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/receiptprocessbatch/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _receiptprocessbatchExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptprocessbatchValidatebatchBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _receiptprocessbatchValidatebatchBrowsePost(body: body);
  }

  ///
  @Post(path: '/receiptprocessbatch/validatebatch/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _receiptprocessbatchValidatebatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param controlid
  Future<
          chopper.Response<
              FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader>>
      securitysettingsControlidGet({required String? controlid}) {
    generatedMapping.putIfAbsent(
        FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader,
        () =>
            FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader
                .fromJsonFactory);

    return _securitysettingsControlidGet(controlid: controlid);
  }

  ///
  ///@param controlid
  @Get(path: '/securitysettings/{controlid}')
  Future<
          chopper.Response<
              FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader>>
      _securitysettingsControlidGet(
          {@Path('controlid') required String? controlid});

  ///
  ///@param id
  Future<chopper.Response> securitysettingsIdPut({
    required String? id,
    required FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader?
        body,
  }) {
    return _securitysettingsIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(path: '/securitysettings/{id}')
  Future<chopper.Response> _securitysettingsIdPut({
    @Path('id') required String? id,
    @Body()
        required FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader?
            body,
  });

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredBrowsePost({required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _unretiredBrowsePost(body: body);
  }

  ///
  @Post(path: '/unretired/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _unretiredBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      unretiredExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _unretiredExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/unretired/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _unretiredExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param id
  Future<chopper.Response<WebApiModulesUtilitiesUserProfileUserProfile>>
      userprofileIdGet({required String? id}) {
    generatedMapping.putIfAbsent(WebApiModulesUtilitiesUserProfileUserProfile,
        () => WebApiModulesUtilitiesUserProfileUserProfile.fromJsonFactory);

    return _userprofileIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/userprofile/{id}')
  Future<chopper.Response<WebApiModulesUtilitiesUserProfileUserProfile>>
      _userprofileIdGet({@Path('id') required String? id});

  ///
  ///@param id
  Future<chopper.Response<WebApiModulesUtilitiesUserProfileUserProfile>>
      userprofileIdPut({
    required String? id,
    required WebApiModulesUtilitiesUserProfileUserProfile? body,
  }) {
    generatedMapping.putIfAbsent(WebApiModulesUtilitiesUserProfileUserProfile,
        () => WebApiModulesUtilitiesUserProfileUserProfile.fromJsonFactory);

    return _userprofileIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(path: '/userprofile/{id}')
  Future<chopper.Response<WebApiModulesUtilitiesUserProfileUserProfile>>
      _userprofileIdPut({
    @Path('id') required String? id,
    @Body() required WebApiModulesUtilitiesUserProfileUserProfile? body,
  });

  ///
  Future<chopper.Response<WebApiModulesUtilitiesUserProfileUserProfile>>
      userprofilePost(
          {required WebApiModulesUtilitiesUserProfileUserProfile? body}) {
    generatedMapping.putIfAbsent(WebApiModulesUtilitiesUserProfileUserProfile,
        () => WebApiModulesUtilitiesUserProfileUserProfile.fromJsonFactory);

    return _userprofilePost(body: body);
  }

  ///
  @Post(path: '/userprofile')
  Future<chopper.Response<WebApiModulesUtilitiesUserProfileUserProfile>>
      _userprofilePost(
          {@Body()
              required WebApiModulesUtilitiesUserProfileUserProfile? body});

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse>>
      utilityfunctionsNewsessionidGet() {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse,
        () => WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse
            .fromJsonFactory);

    return _utilityfunctionsNewsessionidGet();
  }

  ///
  @Get(path: '/utilityfunctions/newsessionid')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse>>
      _utilityfunctionsNewsessionidGet();

  ///
  ///@param from
  ///@param to
  ///@param cc
  ///@param subject
  ///@param body
  Future<chopper.Response<bool>> utilityfunctionsSendmailPost({
    String? from,
    String? to,
    String? cc,
    String? subject,
    String? body,
  }) {
    return _utilityfunctionsSendmailPost(
        from: from, to: to, cc: cc, subject: subject, body: body);
  }

  ///
  ///@param from
  ///@param to
  ///@param cc
  ///@param subject
  ///@param body
  @Post(
    path: '/utilityfunctions/sendmail',
    optionalBody: true,
  )
  Future<chopper.Response<bool>> _utilityfunctionsSendmailPost({
    @Query('from') String? from,
    @Query('to') String? to,
    @Query('cc') String? cc,
    @Query('subject') String? subject,
    @Query('body') String? body,
  });

  ///
  Future<
          chopper.Response<
              WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse>>
      vendorinvoiceprocessbatchCreatebatchPost(
          {required WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse,
        () =>
            WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse
                .fromJsonFactory);

    return _vendorinvoiceprocessbatchCreatebatchPost(body: body);
  }

  ///
  @Post(path: '/vendorinvoiceprocessbatch/createbatch')
  Future<
          chopper.Response<
              WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse>>
      _vendorinvoiceprocessbatchCreatebatchPost(
          {@Body()
              required WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoiceprocessbatchBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _vendorinvoiceprocessbatchBrowsePost(body: body);
  }

  ///
  @Post(path: '/vendorinvoiceprocessbatch/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _vendorinvoiceprocessbatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vendorinvoiceprocessbatchExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _vendorinvoiceprocessbatchExportexcelxlsxPost(body: body);
  }

  ///
  @Post(path: '/vendorinvoiceprocessbatch/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _vendorinvoiceprocessbatchExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});
}

@JsonSerializable(explicitToJson: true)
class FwCoreApiSwashbuckleBadRequestResponse {
  FwCoreApiSwashbuckleBadRequestResponse();

  factory FwCoreApiSwashbuckleBadRequestResponse.fromJson(
          Map<String, dynamic> json) =>
      _$FwCoreApiSwashbuckleBadRequestResponseFromJson(json);

  static const fromJsonFactory =
      _$FwCoreApiSwashbuckleBadRequestResponseFromJson;
  static const toJsonFactory = _$FwCoreApiSwashbuckleBadRequestResponseToJson;
  Map<String, dynamic> toJson() =>
      _$FwCoreApiSwashbuckleBadRequestResponseToJson(this);

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode => runtimeType.hashCode;
}

@JsonSerializable(explicitToJson: true)
class FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult {
  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult({
    this.downloadUrl,
  });

  factory FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult.fromJson(
          Map<String, dynamic> json) =>
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultFromJson(
          json);

  @JsonKey(name: 'downloadUrl', includeIfNull: false)
  final String? downloadUrl;
  static const fromJsonFactory =
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultFromJson;
  static const toJsonFactory =
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultToJson;
  Map<String, dynamic> toJson() =>
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult &&
            (identical(other.downloadUrl, downloadUrl) ||
                const DeepCollectionEquality()
                    .equals(other.downloadUrl, downloadUrl)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(downloadUrl) ^ runtimeType.hashCode;
}

extension $FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultExtension
    on FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult {
  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
      copyWith({String? downloadUrl}) {
    return FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult(
        downloadUrl: downloadUrl ?? this.downloadUrl);
  }

  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
      copyWithWrapped({Wrapped<String?>? downloadUrl}) {
    return FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult(
        downloadUrl:
            (downloadUrl != null ? downloadUrl.value : this.downloadUrl));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardBusinessLogicFwAppImageLogicEmailRequest {
  FwStandardBusinessLogicFwAppImageLogicEmailRequest({
    required this.from,
    required this.to,
    this.cc,
    this.subject,
    this.body,
    this.showImagesInBody,
    required this.appImageIds,
  });

  factory FwStandardBusinessLogicFwAppImageLogicEmailRequest.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardBusinessLogicFwAppImageLogicEmailRequestFromJson(json);

  @JsonKey(name: 'From', includeIfNull: false)
  final String from;
  @JsonKey(name: 'To', includeIfNull: false)
  final String to;
  @JsonKey(name: 'CC', includeIfNull: false)
  final String? cc;
  @JsonKey(name: 'Subject', includeIfNull: false)
  final String? subject;
  @JsonKey(name: 'Body', includeIfNull: false)
  final String? body;
  @JsonKey(name: 'ShowImagesInBody', includeIfNull: false)
  final bool? showImagesInBody;
  @JsonKey(name: 'AppImageIds', includeIfNull: false, defaultValue: <String>[])
  final List<String> appImageIds;
  static const fromJsonFactory =
      _$FwStandardBusinessLogicFwAppImageLogicEmailRequestFromJson;
  static const toJsonFactory =
      _$FwStandardBusinessLogicFwAppImageLogicEmailRequestToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardBusinessLogicFwAppImageLogicEmailRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardBusinessLogicFwAppImageLogicEmailRequest &&
            (identical(other.from, from) ||
                const DeepCollectionEquality().equals(other.from, from)) &&
            (identical(other.to, to) ||
                const DeepCollectionEquality().equals(other.to, to)) &&
            (identical(other.cc, cc) ||
                const DeepCollectionEquality().equals(other.cc, cc)) &&
            (identical(other.subject, subject) ||
                const DeepCollectionEquality()
                    .equals(other.subject, subject)) &&
            (identical(other.body, body) ||
                const DeepCollectionEquality().equals(other.body, body)) &&
            (identical(other.showImagesInBody, showImagesInBody) ||
                const DeepCollectionEquality()
                    .equals(other.showImagesInBody, showImagesInBody)) &&
            (identical(other.appImageIds, appImageIds) ||
                const DeepCollectionEquality()
                    .equals(other.appImageIds, appImageIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(from) ^
      const DeepCollectionEquality().hash(to) ^
      const DeepCollectionEquality().hash(cc) ^
      const DeepCollectionEquality().hash(subject) ^
      const DeepCollectionEquality().hash(body) ^
      const DeepCollectionEquality().hash(showImagesInBody) ^
      const DeepCollectionEquality().hash(appImageIds) ^
      runtimeType.hashCode;
}

extension $FwStandardBusinessLogicFwAppImageLogicEmailRequestExtension
    on FwStandardBusinessLogicFwAppImageLogicEmailRequest {
  FwStandardBusinessLogicFwAppImageLogicEmailRequest copyWith(
      {String? from,
      String? to,
      String? cc,
      String? subject,
      String? body,
      bool? showImagesInBody,
      List<String>? appImageIds}) {
    return FwStandardBusinessLogicFwAppImageLogicEmailRequest(
        from: from ?? this.from,
        to: to ?? this.to,
        cc: cc ?? this.cc,
        subject: subject ?? this.subject,
        body: body ?? this.body,
        showImagesInBody: showImagesInBody ?? this.showImagesInBody,
        appImageIds: appImageIds ?? this.appImageIds);
  }

  FwStandardBusinessLogicFwAppImageLogicEmailRequest copyWithWrapped(
      {Wrapped<String>? from,
      Wrapped<String>? to,
      Wrapped<String?>? cc,
      Wrapped<String?>? subject,
      Wrapped<String?>? body,
      Wrapped<bool?>? showImagesInBody,
      Wrapped<List<String>>? appImageIds}) {
    return FwStandardBusinessLogicFwAppImageLogicEmailRequest(
        from: (from != null ? from.value : this.from),
        to: (to != null ? to.value : this.to),
        cc: (cc != null ? cc.value : this.cc),
        subject: (subject != null ? subject.value : this.subject),
        body: (body != null ? body.value : this.body),
        showImagesInBody: (showImagesInBody != null
            ? showImagesInBody.value
            : this.showImagesInBody),
        appImageIds:
            (appImageIds != null ? appImageIds.value : this.appImageIds));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardBusinessLogicFwBusinessLogicFieldDefinition {
  FwStandardBusinessLogicFwBusinessLogicFieldDefinition({
    this.name,
    this.dataType,
  });

  factory FwStandardBusinessLogicFwBusinessLogicFieldDefinition.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionFromJson(json);

  @JsonKey(name: 'Name', includeIfNull: false)
  final String? name;
  @JsonKey(
    name: 'DataType',
    includeIfNull: false,
    toJson: fwStandardSqlServerFwDataTypesToJson,
    fromJson: fwStandardSqlServerFwDataTypesFromJson,
  )
  final enums.FwStandardSqlServerFwDataTypes? dataType;
  static const fromJsonFactory =
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionFromJson;
  static const toJsonFactory =
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardBusinessLogicFwBusinessLogicFieldDefinition &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.dataType, dataType) ||
                const DeepCollectionEquality()
                    .equals(other.dataType, dataType)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(name) ^
      const DeepCollectionEquality().hash(dataType) ^
      runtimeType.hashCode;
}

extension $FwStandardBusinessLogicFwBusinessLogicFieldDefinitionExtension
    on FwStandardBusinessLogicFwBusinessLogicFieldDefinition {
  FwStandardBusinessLogicFwBusinessLogicFieldDefinition copyWith(
      {String? name, enums.FwStandardSqlServerFwDataTypes? dataType}) {
    return FwStandardBusinessLogicFwBusinessLogicFieldDefinition(
        name: name ?? this.name, dataType: dataType ?? this.dataType);
  }

  FwStandardBusinessLogicFwBusinessLogicFieldDefinition copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<enums.FwStandardSqlServerFwDataTypes?>? dataType}) {
    return FwStandardBusinessLogicFwBusinessLogicFieldDefinition(
        name: (name != null ? name.value : this.name),
        dataType: (dataType != null ? dataType.value : this.dataType));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardDataFwCustomValue {
  FwStandardDataFwCustomValue({
    this.fieldName,
    this.fieldValue,
    this.fieldType,
  });

  factory FwStandardDataFwCustomValue.fromJson(Map<String, dynamic> json) =>
      _$FwStandardDataFwCustomValueFromJson(json);

  @JsonKey(name: 'FieldName', includeIfNull: false)
  final String? fieldName;
  @JsonKey(name: 'FieldValue', includeIfNull: false)
  final String? fieldValue;
  @JsonKey(name: 'FieldType', includeIfNull: false)
  final String? fieldType;
  static const fromJsonFactory = _$FwStandardDataFwCustomValueFromJson;
  static const toJsonFactory = _$FwStandardDataFwCustomValueToJson;
  Map<String, dynamic> toJson() => _$FwStandardDataFwCustomValueToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardDataFwCustomValue &&
            (identical(other.fieldName, fieldName) ||
                const DeepCollectionEquality()
                    .equals(other.fieldName, fieldName)) &&
            (identical(other.fieldValue, fieldValue) ||
                const DeepCollectionEquality()
                    .equals(other.fieldValue, fieldValue)) &&
            (identical(other.fieldType, fieldType) ||
                const DeepCollectionEquality()
                    .equals(other.fieldType, fieldType)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fieldName) ^
      const DeepCollectionEquality().hash(fieldValue) ^
      const DeepCollectionEquality().hash(fieldType) ^
      runtimeType.hashCode;
}

extension $FwStandardDataFwCustomValueExtension on FwStandardDataFwCustomValue {
  FwStandardDataFwCustomValue copyWith(
      {String? fieldName, String? fieldValue, String? fieldType}) {
    return FwStandardDataFwCustomValue(
        fieldName: fieldName ?? this.fieldName,
        fieldValue: fieldValue ?? this.fieldValue,
        fieldType: fieldType ?? this.fieldType);
  }

  FwStandardDataFwCustomValue copyWithWrapped(
      {Wrapped<String?>? fieldName,
      Wrapped<String?>? fieldValue,
      Wrapped<String?>? fieldType}) {
    return FwStandardDataFwCustomValue(
        fieldName: (fieldName != null ? fieldName.value : this.fieldName),
        fieldValue: (fieldValue != null ? fieldValue.value : this.fieldValue),
        fieldType: (fieldType != null ? fieldType.value : this.fieldType));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardDataFwDefaultAttribute {
  FwStandardDataFwDefaultAttribute({
    this.fieldName,
    this.attributeName,
    this.defaultValue,
  });

  factory FwStandardDataFwDefaultAttribute.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardDataFwDefaultAttributeFromJson(json);

  @JsonKey(name: 'FieldName', includeIfNull: false)
  final String? fieldName;
  @JsonKey(name: 'AttributeName', includeIfNull: false)
  final String? attributeName;
  @JsonKey(name: 'DefaultValue', includeIfNull: false)
  final String? defaultValue;
  static const fromJsonFactory = _$FwStandardDataFwDefaultAttributeFromJson;
  static const toJsonFactory = _$FwStandardDataFwDefaultAttributeToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardDataFwDefaultAttributeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardDataFwDefaultAttribute &&
            (identical(other.fieldName, fieldName) ||
                const DeepCollectionEquality()
                    .equals(other.fieldName, fieldName)) &&
            (identical(other.attributeName, attributeName) ||
                const DeepCollectionEquality()
                    .equals(other.attributeName, attributeName)) &&
            (identical(other.defaultValue, defaultValue) ||
                const DeepCollectionEquality()
                    .equals(other.defaultValue, defaultValue)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fieldName) ^
      const DeepCollectionEquality().hash(attributeName) ^
      const DeepCollectionEquality().hash(defaultValue) ^
      runtimeType.hashCode;
}

extension $FwStandardDataFwDefaultAttributeExtension
    on FwStandardDataFwDefaultAttribute {
  FwStandardDataFwDefaultAttribute copyWith(
      {String? fieldName, String? attributeName, String? defaultValue}) {
    return FwStandardDataFwDefaultAttribute(
        fieldName: fieldName ?? this.fieldName,
        attributeName: attributeName ?? this.attributeName,
        defaultValue: defaultValue ?? this.defaultValue);
  }

  FwStandardDataFwDefaultAttribute copyWithWrapped(
      {Wrapped<String?>? fieldName,
      Wrapped<String?>? attributeName,
      Wrapped<String?>? defaultValue}) {
    return FwStandardDataFwDefaultAttribute(
        fieldName: (fieldName != null ? fieldName.value : this.fieldName),
        attributeName:
            (attributeName != null ? attributeName.value : this.attributeName),
        defaultValue:
            (defaultValue != null ? defaultValue.value : this.defaultValue));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsBrowseRequest {
  FwStandardModelsBrowseRequest({
    this.miscfields,
    this.module,
    this.options,
    this.orderby,
    this.orderbydirection,
    this.top,
    this.pageno,
    this.pagesize,
    this.searchfieldoperators,
    this.searchfields,
    this.searchfieldvalues,
    this.searchfieldtypes,
    this.searchseparators,
    this.searchcondition,
    this.searchconjunctions,
    this.searchgroupings,
    this.uniqueids,
    this.boundids,
    this.filterfields,
    this.activeview,
    this.emptyobject,
    this.forexcel,
    this.includeallcolumns,
    this.fields,
    this.totalfields,
    this.activeviewfields,
  });

  factory FwStandardModelsBrowseRequest.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsBrowseRequestFromJson(json);

  @JsonKey(name: 'miscfields', includeIfNull: false)
  final dynamic miscfields;
  @JsonKey(name: 'module', includeIfNull: false)
  final String? module;
  @JsonKey(name: 'options', includeIfNull: false)
  final dynamic options;
  @JsonKey(name: 'orderby', includeIfNull: false)
  final String? orderby;
  @JsonKey(name: 'orderbydirection', includeIfNull: false)
  final String? orderbydirection;
  @JsonKey(name: 'top', includeIfNull: false)
  final int? top;
  @JsonKey(name: 'pageno', includeIfNull: false)
  final int? pageno;
  @JsonKey(name: 'pagesize', includeIfNull: false)
  final int? pagesize;
  @JsonKey(
      name: 'searchfieldoperators',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? searchfieldoperators;
  @JsonKey(name: 'searchfields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfields;
  @JsonKey(
      name: 'searchfieldvalues', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfieldvalues;
  @JsonKey(
      name: 'searchfieldtypes', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfieldtypes;
  @JsonKey(
      name: 'searchseparators', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchseparators;
  @JsonKey(
      name: 'searchcondition', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchcondition;
  @JsonKey(
      name: 'searchconjunctions',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? searchconjunctions;
  @JsonKey(name: 'searchgroupings', includeIfNull: false, defaultValue: <int>[])
  final List<int>? searchgroupings;
  @JsonKey(name: 'uniqueids', includeIfNull: false)
  final dynamic uniqueids;
  @JsonKey(name: 'boundids', includeIfNull: false)
  final dynamic boundids;
  @JsonKey(name: 'filterfields', includeIfNull: false)
  final Map<String, dynamic>? filterfields;
  @JsonKey(name: 'activeview', includeIfNull: false)
  final String? activeview;
  @JsonKey(name: 'emptyobject', includeIfNull: false)
  final bool? emptyobject;
  @JsonKey(name: 'forexcel', includeIfNull: false)
  final bool? forexcel;
  @JsonKey(name: 'includeallcolumns', includeIfNull: false)
  final bool? includeallcolumns;
  @JsonKey(
      name: 'fields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? fields;
  @JsonKey(name: 'totalfields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? totalfields;
  @JsonKey(name: 'activeviewfields', includeIfNull: false)
  final Map<String, dynamic>? activeviewfields;
  static const fromJsonFactory = _$FwStandardModelsBrowseRequestFromJson;
  static const toJsonFactory = _$FwStandardModelsBrowseRequestToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsBrowseRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsBrowseRequest &&
            (identical(other.miscfields, miscfields) ||
                const DeepCollectionEquality()
                    .equals(other.miscfields, miscfields)) &&
            (identical(other.module, module) ||
                const DeepCollectionEquality().equals(other.module, module)) &&
            (identical(other.options, options) ||
                const DeepCollectionEquality()
                    .equals(other.options, options)) &&
            (identical(other.orderby, orderby) ||
                const DeepCollectionEquality()
                    .equals(other.orderby, orderby)) &&
            (identical(other.orderbydirection, orderbydirection) ||
                const DeepCollectionEquality()
                    .equals(other.orderbydirection, orderbydirection)) &&
            (identical(other.top, top) ||
                const DeepCollectionEquality().equals(other.top, top)) &&
            (identical(other.pageno, pageno) ||
                const DeepCollectionEquality().equals(other.pageno, pageno)) &&
            (identical(other.pagesize, pagesize) ||
                const DeepCollectionEquality()
                    .equals(other.pagesize, pagesize)) &&
            (identical(other.searchfieldoperators, searchfieldoperators) ||
                const DeepCollectionEquality().equals(
                    other.searchfieldoperators, searchfieldoperators)) &&
            (identical(other.searchfields, searchfields) ||
                const DeepCollectionEquality()
                    .equals(other.searchfields, searchfields)) &&
            (identical(other.searchfieldvalues, searchfieldvalues) ||
                const DeepCollectionEquality()
                    .equals(other.searchfieldvalues, searchfieldvalues)) &&
            (identical(other.searchfieldtypes, searchfieldtypes) ||
                const DeepCollectionEquality()
                    .equals(other.searchfieldtypes, searchfieldtypes)) &&
            (identical(other.searchseparators, searchseparators) ||
                const DeepCollectionEquality()
                    .equals(other.searchseparators, searchseparators)) &&
            (identical(other.searchcondition, searchcondition) ||
                const DeepCollectionEquality()
                    .equals(other.searchcondition, searchcondition)) &&
            (identical(other.searchconjunctions, searchconjunctions) ||
                const DeepCollectionEquality()
                    .equals(other.searchconjunctions, searchconjunctions)) &&
            (identical(other.searchgroupings, searchgroupings) ||
                const DeepCollectionEquality()
                    .equals(other.searchgroupings, searchgroupings)) &&
            (identical(other.uniqueids, uniqueids) ||
                const DeepCollectionEquality()
                    .equals(other.uniqueids, uniqueids)) &&
            (identical(other.boundids, boundids) ||
                const DeepCollectionEquality()
                    .equals(other.boundids, boundids)) &&
            (identical(other.filterfields, filterfields) ||
                const DeepCollectionEquality()
                    .equals(other.filterfields, filterfields)) &&
            (identical(other.activeview, activeview) ||
                const DeepCollectionEquality()
                    .equals(other.activeview, activeview)) &&
            (identical(other.emptyobject, emptyobject) ||
                const DeepCollectionEquality()
                    .equals(other.emptyobject, emptyobject)) &&
            (identical(other.forexcel, forexcel) ||
                const DeepCollectionEquality()
                    .equals(other.forexcel, forexcel)) &&
            (identical(other.includeallcolumns, includeallcolumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeallcolumns, includeallcolumns)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.totalfields, totalfields) || const DeepCollectionEquality().equals(other.totalfields, totalfields)) &&
            (identical(other.activeviewfields, activeviewfields) || const DeepCollectionEquality().equals(other.activeviewfields, activeviewfields)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(miscfields) ^
      const DeepCollectionEquality().hash(module) ^
      const DeepCollectionEquality().hash(options) ^
      const DeepCollectionEquality().hash(orderby) ^
      const DeepCollectionEquality().hash(orderbydirection) ^
      const DeepCollectionEquality().hash(top) ^
      const DeepCollectionEquality().hash(pageno) ^
      const DeepCollectionEquality().hash(pagesize) ^
      const DeepCollectionEquality().hash(searchfieldoperators) ^
      const DeepCollectionEquality().hash(searchfields) ^
      const DeepCollectionEquality().hash(searchfieldvalues) ^
      const DeepCollectionEquality().hash(searchfieldtypes) ^
      const DeepCollectionEquality().hash(searchseparators) ^
      const DeepCollectionEquality().hash(searchcondition) ^
      const DeepCollectionEquality().hash(searchconjunctions) ^
      const DeepCollectionEquality().hash(searchgroupings) ^
      const DeepCollectionEquality().hash(uniqueids) ^
      const DeepCollectionEquality().hash(boundids) ^
      const DeepCollectionEquality().hash(filterfields) ^
      const DeepCollectionEquality().hash(activeview) ^
      const DeepCollectionEquality().hash(emptyobject) ^
      const DeepCollectionEquality().hash(forexcel) ^
      const DeepCollectionEquality().hash(includeallcolumns) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(totalfields) ^
      const DeepCollectionEquality().hash(activeviewfields) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsBrowseRequestExtension
    on FwStandardModelsBrowseRequest {
  FwStandardModelsBrowseRequest copyWith(
      {dynamic miscfields,
      String? module,
      dynamic options,
      String? orderby,
      String? orderbydirection,
      int? top,
      int? pageno,
      int? pagesize,
      List<String>? searchfieldoperators,
      List<String>? searchfields,
      List<String>? searchfieldvalues,
      List<String>? searchfieldtypes,
      List<String>? searchseparators,
      List<String>? searchcondition,
      List<String>? searchconjunctions,
      List<int>? searchgroupings,
      dynamic uniqueids,
      dynamic boundids,
      Map<String, dynamic>? filterfields,
      String? activeview,
      bool? emptyobject,
      bool? forexcel,
      bool? includeallcolumns,
      List<FwStandardModelsCheckBoxListItem>? fields,
      List<String>? totalfields,
      Map<String, dynamic>? activeviewfields}) {
    return FwStandardModelsBrowseRequest(
        miscfields: miscfields ?? this.miscfields,
        module: module ?? this.module,
        options: options ?? this.options,
        orderby: orderby ?? this.orderby,
        orderbydirection: orderbydirection ?? this.orderbydirection,
        top: top ?? this.top,
        pageno: pageno ?? this.pageno,
        pagesize: pagesize ?? this.pagesize,
        searchfieldoperators: searchfieldoperators ?? this.searchfieldoperators,
        searchfields: searchfields ?? this.searchfields,
        searchfieldvalues: searchfieldvalues ?? this.searchfieldvalues,
        searchfieldtypes: searchfieldtypes ?? this.searchfieldtypes,
        searchseparators: searchseparators ?? this.searchseparators,
        searchcondition: searchcondition ?? this.searchcondition,
        searchconjunctions: searchconjunctions ?? this.searchconjunctions,
        searchgroupings: searchgroupings ?? this.searchgroupings,
        uniqueids: uniqueids ?? this.uniqueids,
        boundids: boundids ?? this.boundids,
        filterfields: filterfields ?? this.filterfields,
        activeview: activeview ?? this.activeview,
        emptyobject: emptyobject ?? this.emptyobject,
        forexcel: forexcel ?? this.forexcel,
        includeallcolumns: includeallcolumns ?? this.includeallcolumns,
        fields: fields ?? this.fields,
        totalfields: totalfields ?? this.totalfields,
        activeviewfields: activeviewfields ?? this.activeviewfields);
  }

  FwStandardModelsBrowseRequest copyWithWrapped(
      {Wrapped<dynamic>? miscfields,
      Wrapped<String?>? module,
      Wrapped<dynamic>? options,
      Wrapped<String?>? orderby,
      Wrapped<String?>? orderbydirection,
      Wrapped<int?>? top,
      Wrapped<int?>? pageno,
      Wrapped<int?>? pagesize,
      Wrapped<List<String>?>? searchfieldoperators,
      Wrapped<List<String>?>? searchfields,
      Wrapped<List<String>?>? searchfieldvalues,
      Wrapped<List<String>?>? searchfieldtypes,
      Wrapped<List<String>?>? searchseparators,
      Wrapped<List<String>?>? searchcondition,
      Wrapped<List<String>?>? searchconjunctions,
      Wrapped<List<int>?>? searchgroupings,
      Wrapped<dynamic>? uniqueids,
      Wrapped<dynamic>? boundids,
      Wrapped<Map<String, dynamic>?>? filterfields,
      Wrapped<String?>? activeview,
      Wrapped<bool?>? emptyobject,
      Wrapped<bool?>? forexcel,
      Wrapped<bool?>? includeallcolumns,
      Wrapped<List<FwStandardModelsCheckBoxListItem>?>? fields,
      Wrapped<List<String>?>? totalfields,
      Wrapped<Map<String, dynamic>?>? activeviewfields}) {
    return FwStandardModelsBrowseRequest(
        miscfields: (miscfields != null ? miscfields.value : this.miscfields),
        module: (module != null ? module.value : this.module),
        options: (options != null ? options.value : this.options),
        orderby: (orderby != null ? orderby.value : this.orderby),
        orderbydirection: (orderbydirection != null
            ? orderbydirection.value
            : this.orderbydirection),
        top: (top != null ? top.value : this.top),
        pageno: (pageno != null ? pageno.value : this.pageno),
        pagesize: (pagesize != null ? pagesize.value : this.pagesize),
        searchfieldoperators: (searchfieldoperators != null
            ? searchfieldoperators.value
            : this.searchfieldoperators),
        searchfields:
            (searchfields != null ? searchfields.value : this.searchfields),
        searchfieldvalues: (searchfieldvalues != null
            ? searchfieldvalues.value
            : this.searchfieldvalues),
        searchfieldtypes: (searchfieldtypes != null
            ? searchfieldtypes.value
            : this.searchfieldtypes),
        searchseparators: (searchseparators != null
            ? searchseparators.value
            : this.searchseparators),
        searchcondition: (searchcondition != null
            ? searchcondition.value
            : this.searchcondition),
        searchconjunctions: (searchconjunctions != null
            ? searchconjunctions.value
            : this.searchconjunctions),
        searchgroupings: (searchgroupings != null
            ? searchgroupings.value
            : this.searchgroupings),
        uniqueids: (uniqueids != null ? uniqueids.value : this.uniqueids),
        boundids: (boundids != null ? boundids.value : this.boundids),
        filterfields:
            (filterfields != null ? filterfields.value : this.filterfields),
        activeview: (activeview != null ? activeview.value : this.activeview),
        emptyobject:
            (emptyobject != null ? emptyobject.value : this.emptyobject),
        forexcel: (forexcel != null ? forexcel.value : this.forexcel),
        includeallcolumns: (includeallcolumns != null
            ? includeallcolumns.value
            : this.includeallcolumns),
        fields: (fields != null ? fields.value : this.fields),
        totalfields:
            (totalfields != null ? totalfields.value : this.totalfields),
        activeviewfields: (activeviewfields != null
            ? activeviewfields.value
            : this.activeviewfields));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsCheckBoxListItem {
  FwStandardModelsCheckBoxListItem({
    this.value,
    this.text,
    this.selected,
  });

  factory FwStandardModelsCheckBoxListItem.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsCheckBoxListItemFromJson(json);

  @JsonKey(name: 'value', includeIfNull: false)
  final String? value;
  @JsonKey(name: 'text', includeIfNull: false)
  final String? text;
  @JsonKey(name: 'selected', includeIfNull: false)
  final bool? selected;
  static const fromJsonFactory = _$FwStandardModelsCheckBoxListItemFromJson;
  static const toJsonFactory = _$FwStandardModelsCheckBoxListItemToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsCheckBoxListItemToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsCheckBoxListItem &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)) &&
            (identical(other.text, text) ||
                const DeepCollectionEquality().equals(other.text, text)) &&
            (identical(other.selected, selected) ||
                const DeepCollectionEquality()
                    .equals(other.selected, selected)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(value) ^
      const DeepCollectionEquality().hash(text) ^
      const DeepCollectionEquality().hash(selected) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsCheckBoxListItemExtension
    on FwStandardModelsCheckBoxListItem {
  FwStandardModelsCheckBoxListItem copyWith(
      {String? value, String? text, bool? selected}) {
    return FwStandardModelsCheckBoxListItem(
        value: value ?? this.value,
        text: text ?? this.text,
        selected: selected ?? this.selected);
  }

  FwStandardModelsCheckBoxListItem copyWithWrapped(
      {Wrapped<String?>? value,
      Wrapped<String?>? text,
      Wrapped<bool?>? selected}) {
    return FwStandardModelsCheckBoxListItem(
        value: (value != null ? value.value : this.value),
        text: (text != null ? text.value : this.text),
        selected: (selected != null ? selected.value : this.selected));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwApiException {
  FwStandardModelsFwApiException({
    this.statusCode,
    this.message,
    this.stackTrace,
  });

  factory FwStandardModelsFwApiException.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsFwApiExceptionFromJson(json);

  @JsonKey(name: 'StatusCode', includeIfNull: false)
  final int? statusCode;
  @JsonKey(name: 'Message', includeIfNull: false)
  final String? message;
  @JsonKey(name: 'StackTrace', includeIfNull: false)
  final String? stackTrace;
  static const fromJsonFactory = _$FwStandardModelsFwApiExceptionFromJson;
  static const toJsonFactory = _$FwStandardModelsFwApiExceptionToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsFwApiExceptionToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwApiException &&
            (identical(other.statusCode, statusCode) ||
                const DeepCollectionEquality()
                    .equals(other.statusCode, statusCode)) &&
            (identical(other.message, message) ||
                const DeepCollectionEquality()
                    .equals(other.message, message)) &&
            (identical(other.stackTrace, stackTrace) ||
                const DeepCollectionEquality()
                    .equals(other.stackTrace, stackTrace)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(statusCode) ^
      const DeepCollectionEquality().hash(message) ^
      const DeepCollectionEquality().hash(stackTrace) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwApiExceptionExtension
    on FwStandardModelsFwApiException {
  FwStandardModelsFwApiException copyWith(
      {int? statusCode, String? message, String? stackTrace}) {
    return FwStandardModelsFwApiException(
        statusCode: statusCode ?? this.statusCode,
        message: message ?? this.message,
        stackTrace: stackTrace ?? this.stackTrace);
  }

  FwStandardModelsFwApiException copyWithWrapped(
      {Wrapped<int?>? statusCode,
      Wrapped<String?>? message,
      Wrapped<String?>? stackTrace}) {
    return FwStandardModelsFwApiException(
        statusCode: (statusCode != null ? statusCode.value : this.statusCode),
        message: (message != null ? message.value : this.message),
        stackTrace: (stackTrace != null ? stackTrace.value : this.stackTrace));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwAppImageModel {
  FwStandardModelsFwAppImageModel({
    this.appImageId,
    this.dateStamp,
    this.description,
    this.extension,
    this.mimeType,
    this.width,
    this.height,
    this.recType,
    this.fileDownloadName,
    this.orderBy,
    this.image,
  });

  factory FwStandardModelsFwAppImageModel.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsFwAppImageModelFromJson(json);

  @JsonKey(name: 'AppImageId', includeIfNull: false)
  final String? appImageId;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Extension', includeIfNull: false)
  final String? extension;
  @JsonKey(name: 'MimeType', includeIfNull: false)
  final String? mimeType;
  @JsonKey(name: 'Width', includeIfNull: false)
  final int? width;
  @JsonKey(name: 'Height', includeIfNull: false)
  final int? height;
  @JsonKey(name: 'RecType', includeIfNull: false)
  final String? recType;
  @JsonKey(name: 'FileDownloadName', includeIfNull: false)
  final String? fileDownloadName;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final int? orderBy;
  @JsonKey(name: 'Image', includeIfNull: false)
  final String? image;
  static const fromJsonFactory = _$FwStandardModelsFwAppImageModelFromJson;
  static const toJsonFactory = _$FwStandardModelsFwAppImageModelToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwAppImageModelToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwAppImageModel &&
            (identical(other.appImageId, appImageId) ||
                const DeepCollectionEquality()
                    .equals(other.appImageId, appImageId)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.extension, extension) ||
                const DeepCollectionEquality()
                    .equals(other.extension, extension)) &&
            (identical(other.mimeType, mimeType) ||
                const DeepCollectionEquality()
                    .equals(other.mimeType, mimeType)) &&
            (identical(other.width, width) ||
                const DeepCollectionEquality().equals(other.width, width)) &&
            (identical(other.height, height) ||
                const DeepCollectionEquality().equals(other.height, height)) &&
            (identical(other.recType, recType) ||
                const DeepCollectionEquality()
                    .equals(other.recType, recType)) &&
            (identical(other.fileDownloadName, fileDownloadName) ||
                const DeepCollectionEquality()
                    .equals(other.fileDownloadName, fileDownloadName)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality()
                    .equals(other.orderBy, orderBy)) &&
            (identical(other.image, image) ||
                const DeepCollectionEquality().equals(other.image, image)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(appImageId) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(extension) ^
      const DeepCollectionEquality().hash(mimeType) ^
      const DeepCollectionEquality().hash(width) ^
      const DeepCollectionEquality().hash(height) ^
      const DeepCollectionEquality().hash(recType) ^
      const DeepCollectionEquality().hash(fileDownloadName) ^
      const DeepCollectionEquality().hash(orderBy) ^
      const DeepCollectionEquality().hash(image) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwAppImageModelExtension
    on FwStandardModelsFwAppImageModel {
  FwStandardModelsFwAppImageModel copyWith(
      {String? appImageId,
      String? dateStamp,
      String? description,
      String? extension,
      String? mimeType,
      int? width,
      int? height,
      String? recType,
      String? fileDownloadName,
      int? orderBy,
      String? image}) {
    return FwStandardModelsFwAppImageModel(
        appImageId: appImageId ?? this.appImageId,
        dateStamp: dateStamp ?? this.dateStamp,
        description: description ?? this.description,
        extension: extension ?? this.extension,
        mimeType: mimeType ?? this.mimeType,
        width: width ?? this.width,
        height: height ?? this.height,
        recType: recType ?? this.recType,
        fileDownloadName: fileDownloadName ?? this.fileDownloadName,
        orderBy: orderBy ?? this.orderBy,
        image: image ?? this.image);
  }

  FwStandardModelsFwAppImageModel copyWithWrapped(
      {Wrapped<String?>? appImageId,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? description,
      Wrapped<String?>? extension,
      Wrapped<String?>? mimeType,
      Wrapped<int?>? width,
      Wrapped<int?>? height,
      Wrapped<String?>? recType,
      Wrapped<String?>? fileDownloadName,
      Wrapped<int?>? orderBy,
      Wrapped<String?>? image}) {
    return FwStandardModelsFwAppImageModel(
        appImageId: (appImageId != null ? appImageId.value : this.appImageId),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        description:
            (description != null ? description.value : this.description),
        extension: (extension != null ? extension.value : this.extension),
        mimeType: (mimeType != null ? mimeType.value : this.mimeType),
        width: (width != null ? width.value : this.width),
        height: (height != null ? height.value : this.height),
        recType: (recType != null ? recType.value : this.recType),
        fileDownloadName: (fileDownloadName != null
            ? fileDownloadName.value
            : this.fileDownloadName),
        orderBy: (orderBy != null ? orderBy.value : this.orderBy),
        image: (image != null ? image.value : this.image));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryFilter {
  FwStandardModelsFwQueryFilter({
    required this.field,
    required this.op,
    this.value,
  });

  factory FwStandardModelsFwQueryFilter.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryFilterFromJson(json);

  @JsonKey(name: 'Field', includeIfNull: false)
  final String field;
  @JsonKey(name: 'Op', includeIfNull: false)
  final String op;
  @JsonKey(name: 'Value', includeIfNull: false)
  final String? value;
  static const fromJsonFactory = _$FwStandardModelsFwQueryFilterFromJson;
  static const toJsonFactory = _$FwStandardModelsFwQueryFilterToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsFwQueryFilterToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryFilter &&
            (identical(other.field, field) ||
                const DeepCollectionEquality().equals(other.field, field)) &&
            (identical(other.op, op) ||
                const DeepCollectionEquality().equals(other.op, op)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(field) ^
      const DeepCollectionEquality().hash(op) ^
      const DeepCollectionEquality().hash(value) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryFilterExtension
    on FwStandardModelsFwQueryFilter {
  FwStandardModelsFwQueryFilter copyWith(
      {String? field, String? op, String? value}) {
    return FwStandardModelsFwQueryFilter(
        field: field ?? this.field,
        op: op ?? this.op,
        value: value ?? this.value);
  }

  FwStandardModelsFwQueryFilter copyWithWrapped(
      {Wrapped<String>? field, Wrapped<String>? op, Wrapped<String?>? value}) {
    return FwStandardModelsFwQueryFilter(
        field: (field != null ? field.value : this.field),
        op: (op != null ? op.value : this.op),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic {
  FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesAgentVendorVendor>[])
  final List<WebApiModulesAgentVendorVendor>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic {
  FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic copyWith(
      {List<WebApiModulesAgentVendorVendor>? items,
      int? pageNo,
      int? pageSize,
      int? totalItems,
      String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic
      copyWithWrapped(
          {Wrapped<List<WebApiModulesAgentVendorVendor>?>? items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesAgentVendorVendorLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesInventoryRentalInventoryRentalInventory>[])
  final List<WebApiModulesInventoryRentalInventoryRentalInventory>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic
      copyWith(
          {List<WebApiModulesInventoryRentalInventoryRentalInventory>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic
      copyWithWrapped(
          {Wrapped<List<WebApiModulesInventoryRentalInventoryRentalInventory>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesInventoryRentalInventoryRentalInventoryLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsAddressSettingsCountryCountry>[])
  final List<WebApiModulesSettingsAddressSettingsCountryCountry>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic
      copyWith(
          {List<WebApiModulesSettingsAddressSettingsCountryCountry>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic
      copyWithWrapped(
          {Wrapped<List<WebApiModulesSettingsAddressSettingsCountryCountry>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsAddressSettingsCountryCountryLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsCurrencySettingsCurrencyCurrency>[])
  final List<WebApiModulesSettingsCurrencySettingsCurrencyCurrency>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic
      copyWith(
          {List<WebApiModulesSettingsCurrencySettingsCurrencyCurrency>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic
      copyWithWrapped(
          {Wrapped<
                  List<WebApiModulesSettingsCurrencySettingsCurrencyCurrency>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsCurrencySettingsCurrencyCurrencyLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse>[])
  final List<WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic {
  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic
      copyWith(
          {List<WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic
      copyWithWrapped(
          {Wrapped<
                  List<
                      WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesSettingsWarehouseSettingsWarehouseWarehouseLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem>[])
  final List<
          WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic
      copyWith(
          {List<WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic
      copyWithWrapped(
          {Wrapped<
                  List<
                      WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking>[])
  final List<WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic
      copyWith(
          {List<WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic
      copyWithWrapped(
          {Wrapped<
                  List<
                      WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch>[])
  final List<WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic
      copyWith(
          {List<WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic
      copyWithWrapped(
          {Wrapped<List<WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem>[])
  final List<WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic
      copyWith(
          {List<WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic
      copyWithWrapped(
          {Wrapped<
                  List<
                      WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesUtilitiesRateUpdateItemRateUpdateItem>[])
  final List<WebApiModulesUtilitiesRateUpdateItemRateUpdateItem>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic
      copyWith(
          {List<WebApiModulesUtilitiesRateUpdateItemRateUpdateItem>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic
      copyWithWrapped(
          {Wrapped<List<WebApiModulesUtilitiesRateUpdateItemRateUpdateItem>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields>[])
  final List<
          WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic
      copyWith(
          {List<WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic
      copyWithWrapped(
          {Wrapped<
                  List<
                      WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogicFromJson(
          json);

  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings>[])
  final List<
          WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings>?
      items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic
      copyWith(
          {List<WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings>?
              items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic
      copyWithWrapped(
          {Wrapped<
                  List<
                      WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader {
  FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader({
    this.requireminlengthpassword,
    this.hubspotaccesstoken,
    this.hubspotrefreshtoken,
    this.minlengthpassword,
    this.requiredigitinpassword,
    this.requiresymbolinpassword,
    this.autologoutuser,
    this.autologoutminutes,
    this.lockuserafterfailedattempts,
    this.lockuserafterfailedattemptsnumber,
    this.epochlastsynced,
    this.recordTitle,
  });

  factory FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoaderFromJson(
          json);

  @JsonKey(name: 'requireminlengthpassword', includeIfNull: false)
  final String? requireminlengthpassword;
  @JsonKey(name: 'hubspotaccesstoken', includeIfNull: false)
  final String? hubspotaccesstoken;
  @JsonKey(name: 'hubspotrefreshtoken', includeIfNull: false)
  final String? hubspotrefreshtoken;
  @JsonKey(name: 'minlengthpassword', includeIfNull: false)
  final int? minlengthpassword;
  @JsonKey(name: 'requiredigitinpassword', includeIfNull: false)
  final String? requiredigitinpassword;
  @JsonKey(name: 'requiresymbolinpassword', includeIfNull: false)
  final String? requiresymbolinpassword;
  @JsonKey(name: 'autologoutuser', includeIfNull: false)
  final String? autologoutuser;
  @JsonKey(name: 'autologoutminutes', includeIfNull: false)
  final int? autologoutminutes;
  @JsonKey(name: 'lockuserafterfailedattempts', includeIfNull: false)
  final String? lockuserafterfailedattempts;
  @JsonKey(name: 'lockuserafterfailedattemptsnumber', includeIfNull: false)
  final int? lockuserafterfailedattemptsnumber;
  @JsonKey(name: 'epochlastsynced', includeIfNull: false)
  final num? epochlastsynced;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  static const fromJsonFactory =
      _$FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoaderFromJson;
  static const toJsonFactory =
      _$FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoaderToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoaderToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader &&
            (identical(other.requireminlengthpassword, requireminlengthpassword) ||
                const DeepCollectionEquality().equals(
                    other.requireminlengthpassword,
                    requireminlengthpassword)) &&
            (identical(other.hubspotaccesstoken, hubspotaccesstoken) ||
                const DeepCollectionEquality()
                    .equals(other.hubspotaccesstoken, hubspotaccesstoken)) &&
            (identical(other.hubspotrefreshtoken, hubspotrefreshtoken) ||
                const DeepCollectionEquality()
                    .equals(other.hubspotrefreshtoken, hubspotrefreshtoken)) &&
            (identical(other.minlengthpassword, minlengthpassword) ||
                const DeepCollectionEquality()
                    .equals(other.minlengthpassword, minlengthpassword)) &&
            (identical(other.requiredigitinpassword, requiredigitinpassword) ||
                const DeepCollectionEquality().equals(
                    other.requiredigitinpassword, requiredigitinpassword)) &&
            (identical(other.requiresymbolinpassword, requiresymbolinpassword) ||
                const DeepCollectionEquality().equals(
                    other.requiresymbolinpassword, requiresymbolinpassword)) &&
            (identical(other.autologoutuser, autologoutuser) ||
                const DeepCollectionEquality()
                    .equals(other.autologoutuser, autologoutuser)) &&
            (identical(other.autologoutminutes, autologoutminutes) ||
                const DeepCollectionEquality()
                    .equals(other.autologoutminutes, autologoutminutes)) &&
            (identical(other.lockuserafterfailedattempts, lockuserafterfailedattempts) ||
                const DeepCollectionEquality().equals(
                    other.lockuserafterfailedattempts,
                    lockuserafterfailedattempts)) &&
            (identical(other.lockuserafterfailedattemptsnumber, lockuserafterfailedattemptsnumber) ||
                const DeepCollectionEquality().equals(
                    other.lockuserafterfailedattemptsnumber,
                    lockuserafterfailedattemptsnumber)) &&
            (identical(other.epochlastsynced, epochlastsynced) || const DeepCollectionEquality().equals(other.epochlastsynced, epochlastsynced)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(requireminlengthpassword) ^
      const DeepCollectionEquality().hash(hubspotaccesstoken) ^
      const DeepCollectionEquality().hash(hubspotrefreshtoken) ^
      const DeepCollectionEquality().hash(minlengthpassword) ^
      const DeepCollectionEquality().hash(requiredigitinpassword) ^
      const DeepCollectionEquality().hash(requiresymbolinpassword) ^
      const DeepCollectionEquality().hash(autologoutuser) ^
      const DeepCollectionEquality().hash(autologoutminutes) ^
      const DeepCollectionEquality().hash(lockuserafterfailedattempts) ^
      const DeepCollectionEquality().hash(lockuserafterfailedattemptsnumber) ^
      const DeepCollectionEquality().hash(epochlastsynced) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      runtimeType.hashCode;
}

extension $FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoaderExtension
    on FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader {
  FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader copyWith(
      {String? requireminlengthpassword,
      String? hubspotaccesstoken,
      String? hubspotrefreshtoken,
      int? minlengthpassword,
      String? requiredigitinpassword,
      String? requiresymbolinpassword,
      String? autologoutuser,
      int? autologoutminutes,
      String? lockuserafterfailedattempts,
      int? lockuserafterfailedattemptsnumber,
      num? epochlastsynced,
      String? recordTitle}) {
    return FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader(
        requireminlengthpassword:
            requireminlengthpassword ?? this.requireminlengthpassword,
        hubspotaccesstoken: hubspotaccesstoken ?? this.hubspotaccesstoken,
        hubspotrefreshtoken: hubspotrefreshtoken ?? this.hubspotrefreshtoken,
        minlengthpassword: minlengthpassword ?? this.minlengthpassword,
        requiredigitinpassword:
            requiredigitinpassword ?? this.requiredigitinpassword,
        requiresymbolinpassword:
            requiresymbolinpassword ?? this.requiresymbolinpassword,
        autologoutuser: autologoutuser ?? this.autologoutuser,
        autologoutminutes: autologoutminutes ?? this.autologoutminutes,
        lockuserafterfailedattempts:
            lockuserafterfailedattempts ?? this.lockuserafterfailedattempts,
        lockuserafterfailedattemptsnumber: lockuserafterfailedattemptsnumber ??
            this.lockuserafterfailedattemptsnumber,
        epochlastsynced: epochlastsynced ?? this.epochlastsynced,
        recordTitle: recordTitle ?? this.recordTitle);
  }

  FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader
      copyWithWrapped(
          {Wrapped<String?>? requireminlengthpassword,
          Wrapped<String?>? hubspotaccesstoken,
          Wrapped<String?>? hubspotrefreshtoken,
          Wrapped<int?>? minlengthpassword,
          Wrapped<String?>? requiredigitinpassword,
          Wrapped<String?>? requiresymbolinpassword,
          Wrapped<String?>? autologoutuser,
          Wrapped<int?>? autologoutminutes,
          Wrapped<String?>? lockuserafterfailedattempts,
          Wrapped<int?>? lockuserafterfailedattemptsnumber,
          Wrapped<num?>? epochlastsynced,
          Wrapped<String?>? recordTitle}) {
    return FwStandardModulesAdministratorSecuritySettingsSecuritySettingsLoader(
        requireminlengthpassword: (requireminlengthpassword != null
            ? requireminlengthpassword.value
            : this.requireminlengthpassword),
        hubspotaccesstoken: (hubspotaccesstoken != null
            ? hubspotaccesstoken.value
            : this.hubspotaccesstoken),
        hubspotrefreshtoken: (hubspotrefreshtoken != null
            ? hubspotrefreshtoken.value
            : this.hubspotrefreshtoken),
        minlengthpassword: (minlengthpassword != null
            ? minlengthpassword.value
            : this.minlengthpassword),
        requiredigitinpassword: (requiredigitinpassword != null
            ? requiredigitinpassword.value
            : this.requiredigitinpassword),
        requiresymbolinpassword: (requiresymbolinpassword != null
            ? requiresymbolinpassword.value
            : this.requiresymbolinpassword),
        autologoutuser: (autologoutuser != null
            ? autologoutuser.value
            : this.autologoutuser),
        autologoutminutes: (autologoutminutes != null
            ? autologoutminutes.value
            : this.autologoutminutes),
        lockuserafterfailedattempts: (lockuserafterfailedattempts != null
            ? lockuserafterfailedattempts.value
            : this.lockuserafterfailedattempts),
        lockuserafterfailedattemptsnumber:
            (lockuserafterfailedattemptsnumber != null
                ? lockuserafterfailedattemptsnumber.value
                : this.lockuserafterfailedattemptsnumber),
        epochlastsynced: (epochlastsynced != null
            ? epochlastsynced.value
            : this.epochlastsynced),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardSqlServerFwJsonDataTable {
  FwStandardSqlServerFwJsonDataTable({
    this.columnIndex,
    this.totals,
    this.columns,
    this.rows,
    this.pageNo,
    this.pageSize,
    this.totalPages,
    this.totalRows,
    this.dateFields,
    this.columnNameByIndex,
  });

  factory FwStandardSqlServerFwJsonDataTable.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardSqlServerFwJsonDataTableFromJson(json);

  @JsonKey(name: 'ColumnIndex', includeIfNull: false)
  final Map<String, dynamic>? columnIndex;
  @JsonKey(name: 'Totals', includeIfNull: false)
  final Map<String, dynamic>? totals;
  @JsonKey(
      name: 'Columns',
      includeIfNull: false,
      defaultValue: <FwStandardSqlServerFwJsonDataTableColumn>[])
  final List<FwStandardSqlServerFwJsonDataTableColumn>? columns;
  @JsonKey(name: 'Rows', includeIfNull: false, defaultValue: <List<Object>>[])
  final List<List<Object?>>? rows;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalPages', includeIfNull: false)
  final int? totalPages;
  @JsonKey(name: 'TotalRows', includeIfNull: false)
  final int? totalRows;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(name: 'ColumnNameByIndex', includeIfNull: false)
  final Map<String, dynamic>? columnNameByIndex;
  static const fromJsonFactory = _$FwStandardSqlServerFwJsonDataTableFromJson;
  static const toJsonFactory = _$FwStandardSqlServerFwJsonDataTableToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardSqlServerFwJsonDataTableToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardSqlServerFwJsonDataTable &&
            (identical(other.columnIndex, columnIndex) ||
                const DeepCollectionEquality()
                    .equals(other.columnIndex, columnIndex)) &&
            (identical(other.totals, totals) ||
                const DeepCollectionEquality().equals(other.totals, totals)) &&
            (identical(other.columns, columns) ||
                const DeepCollectionEquality()
                    .equals(other.columns, columns)) &&
            (identical(other.rows, rows) ||
                const DeepCollectionEquality().equals(other.rows, rows)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalPages, totalPages) ||
                const DeepCollectionEquality()
                    .equals(other.totalPages, totalPages)) &&
            (identical(other.totalRows, totalRows) ||
                const DeepCollectionEquality()
                    .equals(other.totalRows, totalRows)) &&
            (identical(other.dateFields, dateFields) ||
                const DeepCollectionEquality()
                    .equals(other.dateFields, dateFields)) &&
            (identical(other.columnNameByIndex, columnNameByIndex) ||
                const DeepCollectionEquality()
                    .equals(other.columnNameByIndex, columnNameByIndex)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(columnIndex) ^
      const DeepCollectionEquality().hash(totals) ^
      const DeepCollectionEquality().hash(columns) ^
      const DeepCollectionEquality().hash(rows) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalPages) ^
      const DeepCollectionEquality().hash(totalRows) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(columnNameByIndex) ^
      runtimeType.hashCode;
}

extension $FwStandardSqlServerFwJsonDataTableExtension
    on FwStandardSqlServerFwJsonDataTable {
  FwStandardSqlServerFwJsonDataTable copyWith(
      {Map<String, dynamic>? columnIndex,
      Map<String, dynamic>? totals,
      List<FwStandardSqlServerFwJsonDataTableColumn>? columns,
      List<List<Object?>>? rows,
      int? pageNo,
      int? pageSize,
      int? totalPages,
      int? totalRows,
      List<String>? dateFields,
      Map<String, dynamic>? columnNameByIndex}) {
    return FwStandardSqlServerFwJsonDataTable(
        columnIndex: columnIndex ?? this.columnIndex,
        totals: totals ?? this.totals,
        columns: columns ?? this.columns,
        rows: rows ?? this.rows,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalPages: totalPages ?? this.totalPages,
        totalRows: totalRows ?? this.totalRows,
        dateFields: dateFields ?? this.dateFields,
        columnNameByIndex: columnNameByIndex ?? this.columnNameByIndex);
  }

  FwStandardSqlServerFwJsonDataTable copyWithWrapped(
      {Wrapped<Map<String, dynamic>?>? columnIndex,
      Wrapped<Map<String, dynamic>?>? totals,
      Wrapped<List<FwStandardSqlServerFwJsonDataTableColumn>?>? columns,
      Wrapped<List<List<Object>>?>? rows,
      Wrapped<int?>? pageNo,
      Wrapped<int?>? pageSize,
      Wrapped<int?>? totalPages,
      Wrapped<int?>? totalRows,
      Wrapped<List<String>?>? dateFields,
      Wrapped<Map<String, dynamic>?>? columnNameByIndex}) {
    return FwStandardSqlServerFwJsonDataTable(
        columnIndex:
            (columnIndex != null ? columnIndex.value : this.columnIndex),
        totals: (totals != null ? totals.value : this.totals),
        columns: (columns != null ? columns.value : this.columns),
        rows: (rows != null ? rows.value : this.rows),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalPages: (totalPages != null ? totalPages.value : this.totalPages),
        totalRows: (totalRows != null ? totalRows.value : this.totalRows),
        dateFields: (dateFields != null ? dateFields.value : this.dateFields),
        columnNameByIndex: (columnNameByIndex != null
            ? columnNameByIndex.value
            : this.columnNameByIndex));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardSqlServerFwJsonDataTableColumn {
  FwStandardSqlServerFwJsonDataTableColumn({
    this.name,
    this.dataField,
    this.dataType,
    this.isUniqueId,
    this.isVisible,
  });

  factory FwStandardSqlServerFwJsonDataTableColumn.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardSqlServerFwJsonDataTableColumnFromJson(json);

  @JsonKey(name: 'Name', includeIfNull: false)
  final String? name;
  @JsonKey(name: 'DataField', includeIfNull: false)
  final String? dataField;
  @JsonKey(
    name: 'DataType',
    includeIfNull: false,
    toJson: fwStandardSqlServerFwDataTypesToJson,
    fromJson: fwStandardSqlServerFwDataTypesFromJson,
  )
  final enums.FwStandardSqlServerFwDataTypes? dataType;
  @JsonKey(name: 'IsUniqueId', includeIfNull: false)
  final bool? isUniqueId;
  @JsonKey(name: 'IsVisible', includeIfNull: false)
  final bool? isVisible;
  static const fromJsonFactory =
      _$FwStandardSqlServerFwJsonDataTableColumnFromJson;
  static const toJsonFactory = _$FwStandardSqlServerFwJsonDataTableColumnToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardSqlServerFwJsonDataTableColumnToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardSqlServerFwJsonDataTableColumn &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.dataField, dataField) ||
                const DeepCollectionEquality()
                    .equals(other.dataField, dataField)) &&
            (identical(other.dataType, dataType) ||
                const DeepCollectionEquality()
                    .equals(other.dataType, dataType)) &&
            (identical(other.isUniqueId, isUniqueId) ||
                const DeepCollectionEquality()
                    .equals(other.isUniqueId, isUniqueId)) &&
            (identical(other.isVisible, isVisible) ||
                const DeepCollectionEquality()
                    .equals(other.isVisible, isVisible)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(name) ^
      const DeepCollectionEquality().hash(dataField) ^
      const DeepCollectionEquality().hash(dataType) ^
      const DeepCollectionEquality().hash(isUniqueId) ^
      const DeepCollectionEquality().hash(isVisible) ^
      runtimeType.hashCode;
}

extension $FwStandardSqlServerFwJsonDataTableColumnExtension
    on FwStandardSqlServerFwJsonDataTableColumn {
  FwStandardSqlServerFwJsonDataTableColumn copyWith(
      {String? name,
      String? dataField,
      enums.FwStandardSqlServerFwDataTypes? dataType,
      bool? isUniqueId,
      bool? isVisible}) {
    return FwStandardSqlServerFwJsonDataTableColumn(
        name: name ?? this.name,
        dataField: dataField ?? this.dataField,
        dataType: dataType ?? this.dataType,
        isUniqueId: isUniqueId ?? this.isUniqueId,
        isVisible: isVisible ?? this.isVisible);
  }

  FwStandardSqlServerFwJsonDataTableColumn copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<String?>? dataField,
      Wrapped<enums.FwStandardSqlServerFwDataTypes?>? dataType,
      Wrapped<bool?>? isUniqueId,
      Wrapped<bool?>? isVisible}) {
    return FwStandardSqlServerFwJsonDataTableColumn(
        name: (name != null ? name.value : this.name),
        dataField: (dataField != null ? dataField.value : this.dataField),
        dataType: (dataType != null ? dataType.value : this.dataType),
        isUniqueId: (isUniqueId != null ? isUniqueId.value : this.isUniqueId),
        isVisible: (isVisible != null ? isVisible.value : this.isVisible));
  }
}

@JsonSerializable(explicitToJson: true)
class MicrosoftAspNetCoreMvcActionResult {
  MicrosoftAspNetCoreMvcActionResult();

  factory MicrosoftAspNetCoreMvcActionResult.fromJson(
          Map<String, dynamic> json) =>
      _$MicrosoftAspNetCoreMvcActionResultFromJson(json);

  static const fromJsonFactory = _$MicrosoftAspNetCoreMvcActionResultFromJson;
  static const toJsonFactory = _$MicrosoftAspNetCoreMvcActionResultToJson;
  Map<String, dynamic> toJson() =>
      _$MicrosoftAspNetCoreMvcActionResultToJson(this);

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode => runtimeType.hashCode;
}

@JsonSerializable(explicitToJson: true)
class MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic({
    this.result,
    this.value,
  });

  factory MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic.fromJson(
          Map<String, dynamic> json) =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogicFromJson(
          json);

  @JsonKey(name: 'Result', includeIfNull: false)
  final MicrosoftAspNetCoreMvcActionResult? result;
  @JsonKey(name: 'Value', includeIfNull: false)
  final WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem? value;
  static const fromJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogicFromJson;
  static const toJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogicToJson;
  Map<String, dynamic> toJson() =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic &&
            (identical(other.result, result) ||
                const DeepCollectionEquality().equals(other.result, result)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(result) ^
      const DeepCollectionEquality().hash(value) ^
      runtimeType.hashCode;
}

extension $MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogicExtension
    on MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic
      copyWith(
          {MicrosoftAspNetCoreMvcActionResult? result,
          WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem?
              value}) {
    return MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic(
        result: result ?? this.result, value: value ?? this.value);
  }

  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic
      copyWithWrapped(
          {Wrapped<MicrosoftAspNetCoreMvcActionResult?>? result,
          Wrapped<WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem?>?
              value}) {
    return MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemLogic(
        result: (result != null ? result.value : this.result),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic({
    this.result,
    this.value,
  });

  factory MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic.fromJson(
          Map<String, dynamic> json) =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogicFromJson(
          json);

  @JsonKey(name: 'Result', includeIfNull: false)
  final MicrosoftAspNetCoreMvcActionResult? result;
  @JsonKey(name: 'Value', includeIfNull: false)
  final WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem?
      value;
  static const fromJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogicFromJson;
  static const toJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogicToJson;
  Map<String, dynamic> toJson() =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic &&
            (identical(other.result, result) ||
                const DeepCollectionEquality().equals(other.result, result)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(result) ^
      const DeepCollectionEquality().hash(value) ^
      runtimeType.hashCode;
}

extension $MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogicExtension
    on MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic
      copyWith(
          {MicrosoftAspNetCoreMvcActionResult? result,
          WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem?
              value}) {
    return MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic(
        result: result ?? this.result, value: value ?? this.value);
  }

  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic
      copyWithWrapped(
          {Wrapped<MicrosoftAspNetCoreMvcActionResult?>? result,
          Wrapped<WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem?>?
              value}) {
    return MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemLogic(
        result: (result != null ? result.value : this.result),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic({
    this.result,
    this.value,
  });

  factory MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic.fromJson(
          Map<String, dynamic> json) =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogicFromJson(
          json);

  @JsonKey(name: 'Result', includeIfNull: false)
  final MicrosoftAspNetCoreMvcActionResult? result;
  @JsonKey(name: 'Value', includeIfNull: false)
  final WebApiModulesUtilitiesRateUpdateItemRateUpdateItem? value;
  static const fromJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogicFromJson;
  static const toJsonFactory =
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogicToJson;
  Map<String, dynamic> toJson() =>
      _$MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic &&
            (identical(other.result, result) ||
                const DeepCollectionEquality().equals(other.result, result)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(result) ^
      const DeepCollectionEquality().hash(value) ^
      runtimeType.hashCode;
}

extension $MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogicExtension
    on MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic {
  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic
      copyWith(
          {MicrosoftAspNetCoreMvcActionResult? result,
          WebApiModulesUtilitiesRateUpdateItemRateUpdateItem? value}) {
    return MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic(
        result: result ?? this.result, value: value ?? this.value);
  }

  MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic
      copyWithWrapped(
          {Wrapped<MicrosoftAspNetCoreMvcActionResult?>? result,
          Wrapped<WebApiModulesUtilitiesRateUpdateItemRateUpdateItem?>?
              value}) {
    return MicrosoftAspNetCoreMvcActionResultWebApiModulesUtilitiesRateUpdateItemRateUpdateItemLogic(
        result: (result != null ? result.value : this.result),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequest {
  WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequest({
    this.uniqueid1,
    this.uniqueid2,
    this.uniqueid3,
    this.uniqueId1Int,
    this.description,
    this.extension,
    this.recType,
    this.imageDataUrl,
  });

  factory WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequestFromJson(
          json);

  @JsonKey(name: 'Uniqueid1', includeIfNull: false)
  final String? uniqueid1;
  @JsonKey(name: 'Uniqueid2', includeIfNull: false)
  final String? uniqueid2;
  @JsonKey(name: 'Uniqueid3', includeIfNull: false)
  final String? uniqueid3;
  @JsonKey(name: 'UniqueId1Int', includeIfNull: false)
  final int? uniqueId1Int;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Extension', includeIfNull: false)
  final String? extension;
  @JsonKey(name: 'RecType', includeIfNull: false)
  final String? recType;
  @JsonKey(name: 'ImageDataUrl', includeIfNull: false)
  final String? imageDataUrl;
  static const fromJsonFactory =
      _$WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequestFromJson;
  static const toJsonFactory =
      _$WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequest &&
            (identical(other.uniqueid1, uniqueid1) ||
                const DeepCollectionEquality()
                    .equals(other.uniqueid1, uniqueid1)) &&
            (identical(other.uniqueid2, uniqueid2) ||
                const DeepCollectionEquality()
                    .equals(other.uniqueid2, uniqueid2)) &&
            (identical(other.uniqueid3, uniqueid3) ||
                const DeepCollectionEquality()
                    .equals(other.uniqueid3, uniqueid3)) &&
            (identical(other.uniqueId1Int, uniqueId1Int) ||
                const DeepCollectionEquality()
                    .equals(other.uniqueId1Int, uniqueId1Int)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.extension, extension) ||
                const DeepCollectionEquality()
                    .equals(other.extension, extension)) &&
            (identical(other.recType, recType) ||
                const DeepCollectionEquality()
                    .equals(other.recType, recType)) &&
            (identical(other.imageDataUrl, imageDataUrl) ||
                const DeepCollectionEquality()
                    .equals(other.imageDataUrl, imageDataUrl)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(uniqueid1) ^
      const DeepCollectionEquality().hash(uniqueid2) ^
      const DeepCollectionEquality().hash(uniqueid3) ^
      const DeepCollectionEquality().hash(uniqueId1Int) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(extension) ^
      const DeepCollectionEquality().hash(recType) ^
      const DeepCollectionEquality().hash(imageDataUrl) ^
      runtimeType.hashCode;
}

extension $WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequestExtension
    on WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequest {
  WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequest
      copyWith(
          {String? uniqueid1,
          String? uniqueid2,
          String? uniqueid3,
          int? uniqueId1Int,
          String? description,
          String? extension,
          String? recType,
          String? imageDataUrl}) {
    return WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequest(
        uniqueid1: uniqueid1 ?? this.uniqueid1,
        uniqueid2: uniqueid2 ?? this.uniqueid2,
        uniqueid3: uniqueid3 ?? this.uniqueid3,
        uniqueId1Int: uniqueId1Int ?? this.uniqueId1Int,
        description: description ?? this.description,
        extension: extension ?? this.extension,
        recType: recType ?? this.recType,
        imageDataUrl: imageDataUrl ?? this.imageDataUrl);
  }

  WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequest
      copyWithWrapped(
          {Wrapped<String?>? uniqueid1,
          Wrapped<String?>? uniqueid2,
          Wrapped<String?>? uniqueid3,
          Wrapped<int?>? uniqueId1Int,
          Wrapped<String?>? description,
          Wrapped<String?>? extension,
          Wrapped<String?>? recType,
          Wrapped<String?>? imageDataUrl}) {
    return WebApiControllersSharedControlsAppImageAppImageControllerAddAsyncRequest(
        uniqueid1: (uniqueid1 != null ? uniqueid1.value : this.uniqueid1),
        uniqueid2: (uniqueid2 != null ? uniqueid2.value : this.uniqueid2),
        uniqueid3: (uniqueid3 != null ? uniqueid3.value : this.uniqueid3),
        uniqueId1Int:
            (uniqueId1Int != null ? uniqueId1Int.value : this.uniqueId1Int),
        description:
            (description != null ? description.value : this.description),
        extension: (extension != null ? extension.value : this.extension),
        recType: (recType != null ? recType.value : this.recType),
        imageDataUrl:
            (imageDataUrl != null ? imageDataUrl.value : this.imageDataUrl));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequest {
  WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequest({
    this.appImageId,
  });

  factory WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequestFromJson(
          json);

  @JsonKey(name: 'AppImageId', includeIfNull: false)
  final String? appImageId;
  static const fromJsonFactory =
      _$WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequestFromJson;
  static const toJsonFactory =
      _$WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequest &&
            (identical(other.appImageId, appImageId) ||
                const DeepCollectionEquality()
                    .equals(other.appImageId, appImageId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(appImageId) ^ runtimeType.hashCode;
}

extension $WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequestExtension
    on WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequest {
  WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequest
      copyWith({String? appImageId}) {
    return WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequest(
        appImageId: appImageId ?? this.appImageId);
  }

  WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequest
      copyWithWrapped({Wrapped<String?>? appImageId}) {
    return WebApiControllersSharedControlsAppImageAppImageControllerDeleteAsyncRequest(
        appImageId: (appImageId != null ? appImageId.value : this.appImageId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequest {
  WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequest({
    this.appImageId,
    this.orderBy,
  });

  factory WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequestFromJson(
          json);

  @JsonKey(name: 'AppImageId', includeIfNull: false)
  final String? appImageId;
  @JsonKey(name: 'OrderBy', includeIfNull: false)
  final int? orderBy;
  static const fromJsonFactory =
      _$WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequestFromJson;
  static const toJsonFactory =
      _$WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequest &&
            (identical(other.appImageId, appImageId) ||
                const DeepCollectionEquality()
                    .equals(other.appImageId, appImageId)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality().equals(other.orderBy, orderBy)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(appImageId) ^
      const DeepCollectionEquality().hash(orderBy) ^
      runtimeType.hashCode;
}

extension $WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequestExtension
    on WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequest {
  WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequest
      copyWith({String? appImageId, int? orderBy}) {
    return WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequest(
        appImageId: appImageId ?? this.appImageId,
        orderBy: orderBy ?? this.orderBy);
  }

  WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequest
      copyWithWrapped({Wrapped<String?>? appImageId, Wrapped<int?>? orderBy}) {
    return WebApiControllersSharedControlsAppImageAppImageControllerRepositionAsyncRequest(
        appImageId: (appImageId != null ? appImageId.value : this.appImageId),
        orderBy: (orderBy != null ? orderBy.value : this.orderBy));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiLogicTSpStatusResponse {
  WebApiLogicTSpStatusResponse({
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiLogicTSpStatusResponse.fromJson(Map<String, dynamic> json) =>
      _$WebApiLogicTSpStatusResponseFromJson(json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory = _$WebApiLogicTSpStatusResponseFromJson;
  static const toJsonFactory = _$WebApiLogicTSpStatusResponseToJson;
  Map<String, dynamic> toJson() => _$WebApiLogicTSpStatusResponseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiLogicTSpStatusResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      runtimeType.hashCode;
}

extension $WebApiLogicTSpStatusResponseExtension
    on WebApiLogicTSpStatusResponse {
  WebApiLogicTSpStatusResponse copyWith(
      {int? status, bool? success, String? msg}) {
    return WebApiLogicTSpStatusResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }

  WebApiLogicTSpStatusResponse copyWithWrapped(
      {Wrapped<int?>? status, Wrapped<bool?>? success, Wrapped<String?>? msg}) {
    return WebApiLogicTSpStatusResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesAgentOrderChangeOrderStatusRequest {
  WebApiModulesAgentOrderChangeOrderStatusRequest({
    this.orderId,
    this.newStatus,
  });

  factory WebApiModulesAgentOrderChangeOrderStatusRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesAgentOrderChangeOrderStatusRequestFromJson(json);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'NewStatus', includeIfNull: false)
  final String? newStatus;
  static const fromJsonFactory =
      _$WebApiModulesAgentOrderChangeOrderStatusRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesAgentOrderChangeOrderStatusRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesAgentOrderChangeOrderStatusRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesAgentOrderChangeOrderStatusRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.newStatus, newStatus) ||
                const DeepCollectionEquality()
                    .equals(other.newStatus, newStatus)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(newStatus) ^
      runtimeType.hashCode;
}

extension $WebApiModulesAgentOrderChangeOrderStatusRequestExtension
    on WebApiModulesAgentOrderChangeOrderStatusRequest {
  WebApiModulesAgentOrderChangeOrderStatusRequest copyWith(
      {String? orderId, String? newStatus}) {
    return WebApiModulesAgentOrderChangeOrderStatusRequest(
        orderId: orderId ?? this.orderId,
        newStatus: newStatus ?? this.newStatus);
  }

  WebApiModulesAgentOrderChangeOrderStatusRequest copyWithWrapped(
      {Wrapped<String?>? orderId, Wrapped<String?>? newStatus}) {
    return WebApiModulesAgentOrderChangeOrderStatusRequest(
        orderId: (orderId != null ? orderId.value : this.orderId),
        newStatus: (newStatus != null ? newStatus.value : this.newStatus));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesAgentOrderChangeOrderStatusResponse {
  WebApiModulesAgentOrderChangeOrderStatusResponse({
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiModulesAgentOrderChangeOrderStatusResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesAgentOrderChangeOrderStatusResponseFromJson(json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory =
      _$WebApiModulesAgentOrderChangeOrderStatusResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesAgentOrderChangeOrderStatusResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesAgentOrderChangeOrderStatusResponseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesAgentOrderChangeOrderStatusResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      runtimeType.hashCode;
}

extension $WebApiModulesAgentOrderChangeOrderStatusResponseExtension
    on WebApiModulesAgentOrderChangeOrderStatusResponse {
  WebApiModulesAgentOrderChangeOrderStatusResponse copyWith(
      {int? status, bool? success, String? msg}) {
    return WebApiModulesAgentOrderChangeOrderStatusResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }

  WebApiModulesAgentOrderChangeOrderStatusResponse copyWithWrapped(
      {Wrapped<int?>? status, Wrapped<bool?>? success, Wrapped<String?>? msg}) {
    return WebApiModulesAgentOrderChangeOrderStatusResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesAgentVendorVendor {
  WebApiModulesAgentVendorVendor({
    this.vendorId,
    this.vendor,
    this.vendorDisplayName,
    this.vendorNameType,
    this.vendorNumber,
    this.federalIdNumber,
    this.officeLocationId,
    this.officeLocation,
    this.salutation,
    this.firstName,
    this.middleInitial,
    this.lastName,
    this.address1,
    this.address2,
    this.city,
    this.state,
    this.countryId,
    this.country,
    this.countryCodeIsoAlpha2,
    this.countryCodePhone,
    this.zipCode,
    this.vendorClassId,
    this.vendorClass,
    this.phone,
    this.fax,
    this.phoneTollFree,
    this.otherPhone,
    this.webAddress,
    this.email,
    this.activeDate,
    this.inactiveDate,
    this.subRent,
    this.subSales,
    this.subMisc,
    this.subLabor,
    this.subVehicle,
    this.repair,
    this.rentalInventory,
    this.salesPartsInventory,
    this.manufacturer,
    this.freight,
    this.insurance,
    this.consignment,
    this.vendorColor,
    this.defaultSubRentDaysPerWeek,
    this.defaultSubRentDiscountPercent,
    this.defaultSubSaleDiscountPercent,
    this.defaultRate,
    this.billingCycleId,
    this.billingCycle,
    this.paymentTermsId,
    this.paymentTerms,
    this.accountNumber,
    this.defaultPoClassificationId,
    this.defaultPoClassification,
    this.organizationTypeId,
    this.organizationType,
    this.multipleCurrencies,
    this.defaultCurrencyId,
    this.defaultCurrencyCode,
    this.defaultCurrency,
    this.defaultCurrencySymbol,
    this.remitAttention1,
    this.remitAttention2,
    this.remitAddress1,
    this.remitAddress2,
    this.remitCity,
    this.remitState,
    this.remitCountryId,
    this.remitCountry,
    this.remitCountryCodeIsoAlpha2,
    this.remitCountryCodePhone,
    this.remitZipCode,
    this.remitPayeeNo,
    this.externalId,
    this.automaticallyAdjustContractDates,
    this.shippingTrackingLink,
    this.defaultOutgoingDeliveryType,
    this.defaultIncomingDeliveryType,
    this.customerId,
    this.customer,
    this.inputDate,
    this.lastModifiedDate,
    this.primaryContactId,
    this.primaryContact,
    this.primaryContactPhone,
    this.primaryContactExtension,
    this.inactive,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesAgentVendorVendor.fromJson(Map<String, dynamic> json) =>
      _$WebApiModulesAgentVendorVendorFromJson(json);

  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'Vendor', includeIfNull: false)
  final String? vendor;
  @JsonKey(name: 'VendorDisplayName', includeIfNull: false)
  final String? vendorDisplayName;
  @JsonKey(name: 'VendorNameType', includeIfNull: false)
  final String? vendorNameType;
  @JsonKey(name: 'VendorNumber', includeIfNull: false)
  final String? vendorNumber;
  @JsonKey(name: 'FederalIdNumber', includeIfNull: false)
  final String? federalIdNumber;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'OfficeLocation', includeIfNull: false)
  final String? officeLocation;
  @JsonKey(name: 'Salutation', includeIfNull: false)
  final String? salutation;
  @JsonKey(name: 'FirstName', includeIfNull: false)
  final String? firstName;
  @JsonKey(name: 'MiddleInitial', includeIfNull: false)
  final String? middleInitial;
  @JsonKey(name: 'LastName', includeIfNull: false)
  final String? lastName;
  @JsonKey(name: 'Address1', includeIfNull: false)
  final String? address1;
  @JsonKey(name: 'Address2', includeIfNull: false)
  final String? address2;
  @JsonKey(name: 'City', includeIfNull: false)
  final String? city;
  @JsonKey(name: 'State', includeIfNull: false)
  final String? state;
  @JsonKey(name: 'CountryId', includeIfNull: false)
  final String? countryId;
  @JsonKey(name: 'Country', includeIfNull: false)
  final String? country;
  @JsonKey(name: 'CountryCodeIsoAlpha2', includeIfNull: false)
  final String? countryCodeIsoAlpha2;
  @JsonKey(name: 'CountryCodePhone', includeIfNull: false)
  final int? countryCodePhone;
  @JsonKey(name: 'ZipCode', includeIfNull: false)
  final String? zipCode;
  @JsonKey(name: 'VendorClassId', includeIfNull: false)
  final String? vendorClassId;
  @JsonKey(name: 'VendorClass', includeIfNull: false)
  final String? vendorClass;
  @JsonKey(name: 'Phone', includeIfNull: false)
  final String? phone;
  @JsonKey(name: 'Fax', includeIfNull: false)
  final String? fax;
  @JsonKey(name: 'PhoneTollFree', includeIfNull: false)
  final String? phoneTollFree;
  @JsonKey(name: 'OtherPhone', includeIfNull: false)
  final String? otherPhone;
  @JsonKey(name: 'WebAddress', includeIfNull: false)
  final String? webAddress;
  @JsonKey(name: 'Email', includeIfNull: false)
  final String? email;
  @JsonKey(name: 'ActiveDate', includeIfNull: false)
  final String? activeDate;
  @JsonKey(name: 'InactiveDate', includeIfNull: false)
  final String? inactiveDate;
  @JsonKey(name: 'SubRent', includeIfNull: false)
  final bool? subRent;
  @JsonKey(name: 'SubSales', includeIfNull: false)
  final bool? subSales;
  @JsonKey(name: 'SubMisc', includeIfNull: false)
  final bool? subMisc;
  @JsonKey(name: 'SubLabor', includeIfNull: false)
  final bool? subLabor;
  @JsonKey(name: 'SubVehicle', includeIfNull: false)
  final bool? subVehicle;
  @JsonKey(name: 'Repair', includeIfNull: false)
  final bool? repair;
  @JsonKey(name: 'RentalInventory', includeIfNull: false)
  final bool? rentalInventory;
  @JsonKey(name: 'SalesPartsInventory', includeIfNull: false)
  final bool? salesPartsInventory;
  @JsonKey(name: 'Manufacturer', includeIfNull: false)
  final bool? manufacturer;
  @JsonKey(name: 'Freight', includeIfNull: false)
  final bool? freight;
  @JsonKey(name: 'Insurance', includeIfNull: false)
  final bool? insurance;
  @JsonKey(name: 'Consignment', includeIfNull: false)
  final bool? consignment;
  @JsonKey(name: 'VendorColor', includeIfNull: false)
  final String? vendorColor;
  @JsonKey(name: 'DefaultSubRentDaysPerWeek', includeIfNull: false)
  final double? defaultSubRentDaysPerWeek;
  @JsonKey(name: 'DefaultSubRentDiscountPercent', includeIfNull: false)
  final double? defaultSubRentDiscountPercent;
  @JsonKey(name: 'DefaultSubSaleDiscountPercent', includeIfNull: false)
  final double? defaultSubSaleDiscountPercent;
  @JsonKey(name: 'DefaultRate', includeIfNull: false)
  final String? defaultRate;
  @JsonKey(name: 'BillingCycleId', includeIfNull: false)
  final String? billingCycleId;
  @JsonKey(name: 'BillingCycle', includeIfNull: false)
  final String? billingCycle;
  @JsonKey(name: 'PaymentTermsId', includeIfNull: false)
  final String? paymentTermsId;
  @JsonKey(name: 'PaymentTerms', includeIfNull: false)
  final String? paymentTerms;
  @JsonKey(name: 'AccountNumber', includeIfNull: false)
  final String? accountNumber;
  @JsonKey(name: 'DefaultPoClassificationId', includeIfNull: false)
  final String? defaultPoClassificationId;
  @JsonKey(name: 'DefaultPoClassification', includeIfNull: false)
  final String? defaultPoClassification;
  @JsonKey(name: 'OrganizationTypeId', includeIfNull: false)
  final String? organizationTypeId;
  @JsonKey(name: 'OrganizationType', includeIfNull: false)
  final String? organizationType;
  @JsonKey(name: 'MultipleCurrencies', includeIfNull: false)
  final bool? multipleCurrencies;
  @JsonKey(name: 'DefaultCurrencyId', includeIfNull: false)
  final String? defaultCurrencyId;
  @JsonKey(name: 'DefaultCurrencyCode', includeIfNull: false)
  final String? defaultCurrencyCode;
  @JsonKey(name: 'DefaultCurrency', includeIfNull: false)
  final String? defaultCurrency;
  @JsonKey(name: 'DefaultCurrencySymbol', includeIfNull: false)
  final String? defaultCurrencySymbol;
  @JsonKey(name: 'RemitAttention1', includeIfNull: false)
  final String? remitAttention1;
  @JsonKey(name: 'RemitAttention2', includeIfNull: false)
  final String? remitAttention2;
  @JsonKey(name: 'RemitAddress1', includeIfNull: false)
  final String? remitAddress1;
  @JsonKey(name: 'RemitAddress2', includeIfNull: false)
  final String? remitAddress2;
  @JsonKey(name: 'RemitCity', includeIfNull: false)
  final String? remitCity;
  @JsonKey(name: 'RemitState', includeIfNull: false)
  final String? remitState;
  @JsonKey(name: 'RemitCountryId', includeIfNull: false)
  final String? remitCountryId;
  @JsonKey(name: 'RemitCountry', includeIfNull: false)
  final String? remitCountry;
  @JsonKey(name: 'RemitCountryCodeIsoAlpha2', includeIfNull: false)
  final String? remitCountryCodeIsoAlpha2;
  @JsonKey(name: 'RemitCountryCodePhone', includeIfNull: false)
  final int? remitCountryCodePhone;
  @JsonKey(name: 'RemitZipCode', includeIfNull: false)
  final String? remitZipCode;
  @JsonKey(name: 'RemitPayeeNo', includeIfNull: false)
  final String? remitPayeeNo;
  @JsonKey(name: 'ExternalId', includeIfNull: false)
  final String? externalId;
  @JsonKey(name: 'AutomaticallyAdjustContractDates', includeIfNull: false)
  final bool? automaticallyAdjustContractDates;
  @JsonKey(name: 'ShippingTrackingLink', includeIfNull: false)
  final String? shippingTrackingLink;
  @JsonKey(name: 'DefaultOutgoingDeliveryType', includeIfNull: false)
  final String? defaultOutgoingDeliveryType;
  @JsonKey(name: 'DefaultIncomingDeliveryType', includeIfNull: false)
  final String? defaultIncomingDeliveryType;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'Customer', includeIfNull: false)
  final String? customer;
  @JsonKey(name: 'InputDate', includeIfNull: false)
  final String? inputDate;
  @JsonKey(name: 'LastModifiedDate', includeIfNull: false)
  final String? lastModifiedDate;
  @JsonKey(name: 'PrimaryContactId', includeIfNull: false)
  final String? primaryContactId;
  @JsonKey(name: 'PrimaryContact', includeIfNull: false)
  final String? primaryContact;
  @JsonKey(name: 'PrimaryContactPhone', includeIfNull: false)
  final String? primaryContactPhone;
  @JsonKey(name: 'PrimaryContactExtension', includeIfNull: false)
  final String? primaryContactExtension;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory = _$WebApiModulesAgentVendorVendorFromJson;
  static const toJsonFactory = _$WebApiModulesAgentVendorVendorToJson;
  Map<String, dynamic> toJson() => _$WebApiModulesAgentVendorVendorToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesAgentVendorVendor &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.vendor, vendor) ||
                const DeepCollectionEquality().equals(other.vendor, vendor)) &&
            (identical(other.vendorDisplayName, vendorDisplayName) ||
                const DeepCollectionEquality()
                    .equals(other.vendorDisplayName, vendorDisplayName)) &&
            (identical(other.vendorNameType, vendorNameType) ||
                const DeepCollectionEquality()
                    .equals(other.vendorNameType, vendorNameType)) &&
            (identical(other.vendorNumber, vendorNumber) ||
                const DeepCollectionEquality()
                    .equals(other.vendorNumber, vendorNumber)) &&
            (identical(other.federalIdNumber, federalIdNumber) ||
                const DeepCollectionEquality()
                    .equals(other.federalIdNumber, federalIdNumber)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.officeLocation, officeLocation) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocation, officeLocation)) &&
            (identical(other.salutation, salutation) ||
                const DeepCollectionEquality()
                    .equals(other.salutation, salutation)) &&
            (identical(other.firstName, firstName) ||
                const DeepCollectionEquality()
                    .equals(other.firstName, firstName)) &&
            (identical(other.middleInitial, middleInitial) ||
                const DeepCollectionEquality()
                    .equals(other.middleInitial, middleInitial)) &&
            (identical(other.lastName, lastName) ||
                const DeepCollectionEquality()
                    .equals(other.lastName, lastName)) &&
            (identical(other.address1, address1) ||
                const DeepCollectionEquality()
                    .equals(other.address1, address1)) &&
            (identical(other.address2, address2) ||
                const DeepCollectionEquality()
                    .equals(other.address2, address2)) &&
            (identical(other.city, city) ||
                const DeepCollectionEquality().equals(other.city, city)) &&
            (identical(other.state, state) ||
                const DeepCollectionEquality().equals(other.state, state)) &&
            (identical(other.countryId, countryId) ||
                const DeepCollectionEquality()
                    .equals(other.countryId, countryId)) &&
            (identical(other.country, country) ||
                const DeepCollectionEquality()
                    .equals(other.country, country)) &&
            (identical(other.countryCodeIsoAlpha2, countryCodeIsoAlpha2) ||
                const DeepCollectionEquality().equals(
                    other.countryCodeIsoAlpha2, countryCodeIsoAlpha2)) &&
            (identical(other.countryCodePhone, countryCodePhone) ||
                const DeepCollectionEquality()
                    .equals(other.countryCodePhone, countryCodePhone)) &&
            (identical(other.zipCode, zipCode) ||
                const DeepCollectionEquality()
                    .equals(other.zipCode, zipCode)) &&
            (identical(other.vendorClassId, vendorClassId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorClassId, vendorClassId)) &&
            (identical(other.vendorClass, vendorClass) ||
                const DeepCollectionEquality()
                    .equals(other.vendorClass, vendorClass)) &&
            (identical(other.phone, phone) || const DeepCollectionEquality().equals(other.phone, phone)) &&
            (identical(other.fax, fax) || const DeepCollectionEquality().equals(other.fax, fax)) &&
            (identical(other.phoneTollFree, phoneTollFree) || const DeepCollectionEquality().equals(other.phoneTollFree, phoneTollFree)) &&
            (identical(other.otherPhone, otherPhone) || const DeepCollectionEquality().equals(other.otherPhone, otherPhone)) &&
            (identical(other.webAddress, webAddress) || const DeepCollectionEquality().equals(other.webAddress, webAddress)) &&
            (identical(other.email, email) || const DeepCollectionEquality().equals(other.email, email)) &&
            (identical(other.activeDate, activeDate) || const DeepCollectionEquality().equals(other.activeDate, activeDate)) &&
            (identical(other.inactiveDate, inactiveDate) || const DeepCollectionEquality().equals(other.inactiveDate, inactiveDate)) &&
            (identical(other.subRent, subRent) || const DeepCollectionEquality().equals(other.subRent, subRent)) &&
            (identical(other.subSales, subSales) || const DeepCollectionEquality().equals(other.subSales, subSales)) &&
            (identical(other.subMisc, subMisc) || const DeepCollectionEquality().equals(other.subMisc, subMisc)) &&
            (identical(other.subLabor, subLabor) || const DeepCollectionEquality().equals(other.subLabor, subLabor)) &&
            (identical(other.subVehicle, subVehicle) || const DeepCollectionEquality().equals(other.subVehicle, subVehicle)) &&
            (identical(other.repair, repair) || const DeepCollectionEquality().equals(other.repair, repair)) &&
            (identical(other.rentalInventory, rentalInventory) || const DeepCollectionEquality().equals(other.rentalInventory, rentalInventory)) &&
            (identical(other.salesPartsInventory, salesPartsInventory) || const DeepCollectionEquality().equals(other.salesPartsInventory, salesPartsInventory)) &&
            (identical(other.manufacturer, manufacturer) || const DeepCollectionEquality().equals(other.manufacturer, manufacturer)) &&
            (identical(other.freight, freight) || const DeepCollectionEquality().equals(other.freight, freight)) &&
            (identical(other.insurance, insurance) || const DeepCollectionEquality().equals(other.insurance, insurance)) &&
            (identical(other.consignment, consignment) || const DeepCollectionEquality().equals(other.consignment, consignment)) &&
            (identical(other.vendorColor, vendorColor) || const DeepCollectionEquality().equals(other.vendorColor, vendorColor)) &&
            (identical(other.defaultSubRentDaysPerWeek, defaultSubRentDaysPerWeek) || const DeepCollectionEquality().equals(other.defaultSubRentDaysPerWeek, defaultSubRentDaysPerWeek)) &&
            (identical(other.defaultSubRentDiscountPercent, defaultSubRentDiscountPercent) || const DeepCollectionEquality().equals(other.defaultSubRentDiscountPercent, defaultSubRentDiscountPercent)) &&
            (identical(other.defaultSubSaleDiscountPercent, defaultSubSaleDiscountPercent) || const DeepCollectionEquality().equals(other.defaultSubSaleDiscountPercent, defaultSubSaleDiscountPercent)) &&
            (identical(other.defaultRate, defaultRate) || const DeepCollectionEquality().equals(other.defaultRate, defaultRate)) &&
            (identical(other.billingCycleId, billingCycleId) || const DeepCollectionEquality().equals(other.billingCycleId, billingCycleId)) &&
            (identical(other.billingCycle, billingCycle) || const DeepCollectionEquality().equals(other.billingCycle, billingCycle)) &&
            (identical(other.paymentTermsId, paymentTermsId) || const DeepCollectionEquality().equals(other.paymentTermsId, paymentTermsId)) &&
            (identical(other.paymentTerms, paymentTerms) || const DeepCollectionEquality().equals(other.paymentTerms, paymentTerms)) &&
            (identical(other.accountNumber, accountNumber) || const DeepCollectionEquality().equals(other.accountNumber, accountNumber)) &&
            (identical(other.defaultPoClassificationId, defaultPoClassificationId) || const DeepCollectionEquality().equals(other.defaultPoClassificationId, defaultPoClassificationId)) &&
            (identical(other.defaultPoClassification, defaultPoClassification) || const DeepCollectionEquality().equals(other.defaultPoClassification, defaultPoClassification)) &&
            (identical(other.organizationTypeId, organizationTypeId) || const DeepCollectionEquality().equals(other.organizationTypeId, organizationTypeId)) &&
            (identical(other.organizationType, organizationType) || const DeepCollectionEquality().equals(other.organizationType, organizationType)) &&
            (identical(other.multipleCurrencies, multipleCurrencies) || const DeepCollectionEquality().equals(other.multipleCurrencies, multipleCurrencies)) &&
            (identical(other.defaultCurrencyId, defaultCurrencyId) || const DeepCollectionEquality().equals(other.defaultCurrencyId, defaultCurrencyId)) &&
            (identical(other.defaultCurrencyCode, defaultCurrencyCode) || const DeepCollectionEquality().equals(other.defaultCurrencyCode, defaultCurrencyCode)) &&
            (identical(other.defaultCurrency, defaultCurrency) || const DeepCollectionEquality().equals(other.defaultCurrency, defaultCurrency)) &&
            (identical(other.defaultCurrencySymbol, defaultCurrencySymbol) || const DeepCollectionEquality().equals(other.defaultCurrencySymbol, defaultCurrencySymbol)) &&
            (identical(other.remitAttention1, remitAttention1) || const DeepCollectionEquality().equals(other.remitAttention1, remitAttention1)) &&
            (identical(other.remitAttention2, remitAttention2) || const DeepCollectionEquality().equals(other.remitAttention2, remitAttention2)) &&
            (identical(other.remitAddress1, remitAddress1) || const DeepCollectionEquality().equals(other.remitAddress1, remitAddress1)) &&
            (identical(other.remitAddress2, remitAddress2) || const DeepCollectionEquality().equals(other.remitAddress2, remitAddress2)) &&
            (identical(other.remitCity, remitCity) || const DeepCollectionEquality().equals(other.remitCity, remitCity)) &&
            (identical(other.remitState, remitState) || const DeepCollectionEquality().equals(other.remitState, remitState)) &&
            (identical(other.remitCountryId, remitCountryId) || const DeepCollectionEquality().equals(other.remitCountryId, remitCountryId)) &&
            (identical(other.remitCountry, remitCountry) || const DeepCollectionEquality().equals(other.remitCountry, remitCountry)) &&
            (identical(other.remitCountryCodeIsoAlpha2, remitCountryCodeIsoAlpha2) || const DeepCollectionEquality().equals(other.remitCountryCodeIsoAlpha2, remitCountryCodeIsoAlpha2)) &&
            (identical(other.remitCountryCodePhone, remitCountryCodePhone) || const DeepCollectionEquality().equals(other.remitCountryCodePhone, remitCountryCodePhone)) &&
            (identical(other.remitZipCode, remitZipCode) || const DeepCollectionEquality().equals(other.remitZipCode, remitZipCode)) &&
            (identical(other.remitPayeeNo, remitPayeeNo) || const DeepCollectionEquality().equals(other.remitPayeeNo, remitPayeeNo)) &&
            (identical(other.externalId, externalId) || const DeepCollectionEquality().equals(other.externalId, externalId)) &&
            (identical(other.automaticallyAdjustContractDates, automaticallyAdjustContractDates) || const DeepCollectionEquality().equals(other.automaticallyAdjustContractDates, automaticallyAdjustContractDates)) &&
            (identical(other.shippingTrackingLink, shippingTrackingLink) || const DeepCollectionEquality().equals(other.shippingTrackingLink, shippingTrackingLink)) &&
            (identical(other.defaultOutgoingDeliveryType, defaultOutgoingDeliveryType) || const DeepCollectionEquality().equals(other.defaultOutgoingDeliveryType, defaultOutgoingDeliveryType)) &&
            (identical(other.defaultIncomingDeliveryType, defaultIncomingDeliveryType) || const DeepCollectionEquality().equals(other.defaultIncomingDeliveryType, defaultIncomingDeliveryType)) &&
            (identical(other.customerId, customerId) || const DeepCollectionEquality().equals(other.customerId, customerId)) &&
            (identical(other.customer, customer) || const DeepCollectionEquality().equals(other.customer, customer)) &&
            (identical(other.inputDate, inputDate) || const DeepCollectionEquality().equals(other.inputDate, inputDate)) &&
            (identical(other.lastModifiedDate, lastModifiedDate) || const DeepCollectionEquality().equals(other.lastModifiedDate, lastModifiedDate)) &&
            (identical(other.primaryContactId, primaryContactId) || const DeepCollectionEquality().equals(other.primaryContactId, primaryContactId)) &&
            (identical(other.primaryContact, primaryContact) || const DeepCollectionEquality().equals(other.primaryContact, primaryContact)) &&
            (identical(other.primaryContactPhone, primaryContactPhone) || const DeepCollectionEquality().equals(other.primaryContactPhone, primaryContactPhone)) &&
            (identical(other.primaryContactExtension, primaryContactExtension) || const DeepCollectionEquality().equals(other.primaryContactExtension, primaryContactExtension)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) || const DeepCollectionEquality().equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(vendor) ^
      const DeepCollectionEquality().hash(vendorDisplayName) ^
      const DeepCollectionEquality().hash(vendorNameType) ^
      const DeepCollectionEquality().hash(vendorNumber) ^
      const DeepCollectionEquality().hash(federalIdNumber) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(officeLocation) ^
      const DeepCollectionEquality().hash(salutation) ^
      const DeepCollectionEquality().hash(firstName) ^
      const DeepCollectionEquality().hash(middleInitial) ^
      const DeepCollectionEquality().hash(lastName) ^
      const DeepCollectionEquality().hash(address1) ^
      const DeepCollectionEquality().hash(address2) ^
      const DeepCollectionEquality().hash(city) ^
      const DeepCollectionEquality().hash(state) ^
      const DeepCollectionEquality().hash(countryId) ^
      const DeepCollectionEquality().hash(country) ^
      const DeepCollectionEquality().hash(countryCodeIsoAlpha2) ^
      const DeepCollectionEquality().hash(countryCodePhone) ^
      const DeepCollectionEquality().hash(zipCode) ^
      const DeepCollectionEquality().hash(vendorClassId) ^
      const DeepCollectionEquality().hash(vendorClass) ^
      const DeepCollectionEquality().hash(phone) ^
      const DeepCollectionEquality().hash(fax) ^
      const DeepCollectionEquality().hash(phoneTollFree) ^
      const DeepCollectionEquality().hash(otherPhone) ^
      const DeepCollectionEquality().hash(webAddress) ^
      const DeepCollectionEquality().hash(email) ^
      const DeepCollectionEquality().hash(activeDate) ^
      const DeepCollectionEquality().hash(inactiveDate) ^
      const DeepCollectionEquality().hash(subRent) ^
      const DeepCollectionEquality().hash(subSales) ^
      const DeepCollectionEquality().hash(subMisc) ^
      const DeepCollectionEquality().hash(subLabor) ^
      const DeepCollectionEquality().hash(subVehicle) ^
      const DeepCollectionEquality().hash(repair) ^
      const DeepCollectionEquality().hash(rentalInventory) ^
      const DeepCollectionEquality().hash(salesPartsInventory) ^
      const DeepCollectionEquality().hash(manufacturer) ^
      const DeepCollectionEquality().hash(freight) ^
      const DeepCollectionEquality().hash(insurance) ^
      const DeepCollectionEquality().hash(consignment) ^
      const DeepCollectionEquality().hash(vendorColor) ^
      const DeepCollectionEquality().hash(defaultSubRentDaysPerWeek) ^
      const DeepCollectionEquality().hash(defaultSubRentDiscountPercent) ^
      const DeepCollectionEquality().hash(defaultSubSaleDiscountPercent) ^
      const DeepCollectionEquality().hash(defaultRate) ^
      const DeepCollectionEquality().hash(billingCycleId) ^
      const DeepCollectionEquality().hash(billingCycle) ^
      const DeepCollectionEquality().hash(paymentTermsId) ^
      const DeepCollectionEquality().hash(paymentTerms) ^
      const DeepCollectionEquality().hash(accountNumber) ^
      const DeepCollectionEquality().hash(defaultPoClassificationId) ^
      const DeepCollectionEquality().hash(defaultPoClassification) ^
      const DeepCollectionEquality().hash(organizationTypeId) ^
      const DeepCollectionEquality().hash(organizationType) ^
      const DeepCollectionEquality().hash(multipleCurrencies) ^
      const DeepCollectionEquality().hash(defaultCurrencyId) ^
      const DeepCollectionEquality().hash(defaultCurrencyCode) ^
      const DeepCollectionEquality().hash(defaultCurrency) ^
      const DeepCollectionEquality().hash(defaultCurrencySymbol) ^
      const DeepCollectionEquality().hash(remitAttention1) ^
      const DeepCollectionEquality().hash(remitAttention2) ^
      const DeepCollectionEquality().hash(remitAddress1) ^
      const DeepCollectionEquality().hash(remitAddress2) ^
      const DeepCollectionEquality().hash(remitCity) ^
      const DeepCollectionEquality().hash(remitState) ^
      const DeepCollectionEquality().hash(remitCountryId) ^
      const DeepCollectionEquality().hash(remitCountry) ^
      const DeepCollectionEquality().hash(remitCountryCodeIsoAlpha2) ^
      const DeepCollectionEquality().hash(remitCountryCodePhone) ^
      const DeepCollectionEquality().hash(remitZipCode) ^
      const DeepCollectionEquality().hash(remitPayeeNo) ^
      const DeepCollectionEquality().hash(externalId) ^
      const DeepCollectionEquality().hash(automaticallyAdjustContractDates) ^
      const DeepCollectionEquality().hash(shippingTrackingLink) ^
      const DeepCollectionEquality().hash(defaultOutgoingDeliveryType) ^
      const DeepCollectionEquality().hash(defaultIncomingDeliveryType) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(customer) ^
      const DeepCollectionEquality().hash(inputDate) ^
      const DeepCollectionEquality().hash(lastModifiedDate) ^
      const DeepCollectionEquality().hash(primaryContactId) ^
      const DeepCollectionEquality().hash(primaryContact) ^
      const DeepCollectionEquality().hash(primaryContactPhone) ^
      const DeepCollectionEquality().hash(primaryContactExtension) ^
      const DeepCollectionEquality().hash(inactive) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesAgentVendorVendorExtension
    on WebApiModulesAgentVendorVendor {
  WebApiModulesAgentVendorVendor copyWith(
      {String? vendorId,
      String? vendor,
      String? vendorDisplayName,
      String? vendorNameType,
      String? vendorNumber,
      String? federalIdNumber,
      String? officeLocationId,
      String? officeLocation,
      String? salutation,
      String? firstName,
      String? middleInitial,
      String? lastName,
      String? address1,
      String? address2,
      String? city,
      String? state,
      String? countryId,
      String? country,
      String? countryCodeIsoAlpha2,
      int? countryCodePhone,
      String? zipCode,
      String? vendorClassId,
      String? vendorClass,
      String? phone,
      String? fax,
      String? phoneTollFree,
      String? otherPhone,
      String? webAddress,
      String? email,
      String? activeDate,
      String? inactiveDate,
      bool? subRent,
      bool? subSales,
      bool? subMisc,
      bool? subLabor,
      bool? subVehicle,
      bool? repair,
      bool? rentalInventory,
      bool? salesPartsInventory,
      bool? manufacturer,
      bool? freight,
      bool? insurance,
      bool? consignment,
      String? vendorColor,
      double? defaultSubRentDaysPerWeek,
      double? defaultSubRentDiscountPercent,
      double? defaultSubSaleDiscountPercent,
      String? defaultRate,
      String? billingCycleId,
      String? billingCycle,
      String? paymentTermsId,
      String? paymentTerms,
      String? accountNumber,
      String? defaultPoClassificationId,
      String? defaultPoClassification,
      String? organizationTypeId,
      String? organizationType,
      bool? multipleCurrencies,
      String? defaultCurrencyId,
      String? defaultCurrencyCode,
      String? defaultCurrency,
      String? defaultCurrencySymbol,
      String? remitAttention1,
      String? remitAttention2,
      String? remitAddress1,
      String? remitAddress2,
      String? remitCity,
      String? remitState,
      String? remitCountryId,
      String? remitCountry,
      String? remitCountryCodeIsoAlpha2,
      int? remitCountryCodePhone,
      String? remitZipCode,
      String? remitPayeeNo,
      String? externalId,
      bool? automaticallyAdjustContractDates,
      String? shippingTrackingLink,
      String? defaultOutgoingDeliveryType,
      String? defaultIncomingDeliveryType,
      String? customerId,
      String? customer,
      String? inputDate,
      String? lastModifiedDate,
      String? primaryContactId,
      String? primaryContact,
      String? primaryContactPhone,
      String? primaryContactExtension,
      bool? inactive,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesAgentVendorVendor(
        vendorId: vendorId ?? this.vendorId,
        vendor: vendor ?? this.vendor,
        vendorDisplayName: vendorDisplayName ?? this.vendorDisplayName,
        vendorNameType: vendorNameType ?? this.vendorNameType,
        vendorNumber: vendorNumber ?? this.vendorNumber,
        federalIdNumber: federalIdNumber ?? this.federalIdNumber,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        officeLocation: officeLocation ?? this.officeLocation,
        salutation: salutation ?? this.salutation,
        firstName: firstName ?? this.firstName,
        middleInitial: middleInitial ?? this.middleInitial,
        lastName: lastName ?? this.lastName,
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        city: city ?? this.city,
        state: state ?? this.state,
        countryId: countryId ?? this.countryId,
        country: country ?? this.country,
        countryCodeIsoAlpha2: countryCodeIsoAlpha2 ?? this.countryCodeIsoAlpha2,
        countryCodePhone: countryCodePhone ?? this.countryCodePhone,
        zipCode: zipCode ?? this.zipCode,
        vendorClassId: vendorClassId ?? this.vendorClassId,
        vendorClass: vendorClass ?? this.vendorClass,
        phone: phone ?? this.phone,
        fax: fax ?? this.fax,
        phoneTollFree: phoneTollFree ?? this.phoneTollFree,
        otherPhone: otherPhone ?? this.otherPhone,
        webAddress: webAddress ?? this.webAddress,
        email: email ?? this.email,
        activeDate: activeDate ?? this.activeDate,
        inactiveDate: inactiveDate ?? this.inactiveDate,
        subRent: subRent ?? this.subRent,
        subSales: subSales ?? this.subSales,
        subMisc: subMisc ?? this.subMisc,
        subLabor: subLabor ?? this.subLabor,
        subVehicle: subVehicle ?? this.subVehicle,
        repair: repair ?? this.repair,
        rentalInventory: rentalInventory ?? this.rentalInventory,
        salesPartsInventory: salesPartsInventory ?? this.salesPartsInventory,
        manufacturer: manufacturer ?? this.manufacturer,
        freight: freight ?? this.freight,
        insurance: insurance ?? this.insurance,
        consignment: consignment ?? this.consignment,
        vendorColor: vendorColor ?? this.vendorColor,
        defaultSubRentDaysPerWeek:
            defaultSubRentDaysPerWeek ?? this.defaultSubRentDaysPerWeek,
        defaultSubRentDiscountPercent:
            defaultSubRentDiscountPercent ?? this.defaultSubRentDiscountPercent,
        defaultSubSaleDiscountPercent:
            defaultSubSaleDiscountPercent ?? this.defaultSubSaleDiscountPercent,
        defaultRate: defaultRate ?? this.defaultRate,
        billingCycleId: billingCycleId ?? this.billingCycleId,
        billingCycle: billingCycle ?? this.billingCycle,
        paymentTermsId: paymentTermsId ?? this.paymentTermsId,
        paymentTerms: paymentTerms ?? this.paymentTerms,
        accountNumber: accountNumber ?? this.accountNumber,
        defaultPoClassificationId:
            defaultPoClassificationId ?? this.defaultPoClassificationId,
        defaultPoClassification:
            defaultPoClassification ?? this.defaultPoClassification,
        organizationTypeId: organizationTypeId ?? this.organizationTypeId,
        organizationType: organizationType ?? this.organizationType,
        multipleCurrencies: multipleCurrencies ?? this.multipleCurrencies,
        defaultCurrencyId: defaultCurrencyId ?? this.defaultCurrencyId,
        defaultCurrencyCode: defaultCurrencyCode ?? this.defaultCurrencyCode,
        defaultCurrency: defaultCurrency ?? this.defaultCurrency,
        defaultCurrencySymbol:
            defaultCurrencySymbol ?? this.defaultCurrencySymbol,
        remitAttention1: remitAttention1 ?? this.remitAttention1,
        remitAttention2: remitAttention2 ?? this.remitAttention2,
        remitAddress1: remitAddress1 ?? this.remitAddress1,
        remitAddress2: remitAddress2 ?? this.remitAddress2,
        remitCity: remitCity ?? this.remitCity,
        remitState: remitState ?? this.remitState,
        remitCountryId: remitCountryId ?? this.remitCountryId,
        remitCountry: remitCountry ?? this.remitCountry,
        remitCountryCodeIsoAlpha2:
            remitCountryCodeIsoAlpha2 ?? this.remitCountryCodeIsoAlpha2,
        remitCountryCodePhone:
            remitCountryCodePhone ?? this.remitCountryCodePhone,
        remitZipCode: remitZipCode ?? this.remitZipCode,
        remitPayeeNo: remitPayeeNo ?? this.remitPayeeNo,
        externalId: externalId ?? this.externalId,
        automaticallyAdjustContractDates: automaticallyAdjustContractDates ??
            this.automaticallyAdjustContractDates,
        shippingTrackingLink: shippingTrackingLink ?? this.shippingTrackingLink,
        defaultOutgoingDeliveryType:
            defaultOutgoingDeliveryType ?? this.defaultOutgoingDeliveryType,
        defaultIncomingDeliveryType:
            defaultIncomingDeliveryType ?? this.defaultIncomingDeliveryType,
        customerId: customerId ?? this.customerId,
        customer: customer ?? this.customer,
        inputDate: inputDate ?? this.inputDate,
        lastModifiedDate: lastModifiedDate ?? this.lastModifiedDate,
        primaryContactId: primaryContactId ?? this.primaryContactId,
        primaryContact: primaryContact ?? this.primaryContact,
        primaryContactPhone: primaryContactPhone ?? this.primaryContactPhone,
        primaryContactExtension:
            primaryContactExtension ?? this.primaryContactExtension,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesAgentVendorVendor copyWithWrapped(
      {Wrapped<String?>? vendorId,
      Wrapped<String?>? vendor,
      Wrapped<String?>? vendorDisplayName,
      Wrapped<String?>? vendorNameType,
      Wrapped<String?>? vendorNumber,
      Wrapped<String?>? federalIdNumber,
      Wrapped<String?>? officeLocationId,
      Wrapped<String?>? officeLocation,
      Wrapped<String?>? salutation,
      Wrapped<String?>? firstName,
      Wrapped<String?>? middleInitial,
      Wrapped<String?>? lastName,
      Wrapped<String?>? address1,
      Wrapped<String?>? address2,
      Wrapped<String?>? city,
      Wrapped<String?>? state,
      Wrapped<String?>? countryId,
      Wrapped<String?>? country,
      Wrapped<String?>? countryCodeIsoAlpha2,
      Wrapped<int?>? countryCodePhone,
      Wrapped<String?>? zipCode,
      Wrapped<String?>? vendorClassId,
      Wrapped<String?>? vendorClass,
      Wrapped<String?>? phone,
      Wrapped<String?>? fax,
      Wrapped<String?>? phoneTollFree,
      Wrapped<String?>? otherPhone,
      Wrapped<String?>? webAddress,
      Wrapped<String?>? email,
      Wrapped<String?>? activeDate,
      Wrapped<String?>? inactiveDate,
      Wrapped<bool?>? subRent,
      Wrapped<bool?>? subSales,
      Wrapped<bool?>? subMisc,
      Wrapped<bool?>? subLabor,
      Wrapped<bool?>? subVehicle,
      Wrapped<bool?>? repair,
      Wrapped<bool?>? rentalInventory,
      Wrapped<bool?>? salesPartsInventory,
      Wrapped<bool?>? manufacturer,
      Wrapped<bool?>? freight,
      Wrapped<bool?>? insurance,
      Wrapped<bool?>? consignment,
      Wrapped<String?>? vendorColor,
      Wrapped<double?>? defaultSubRentDaysPerWeek,
      Wrapped<double?>? defaultSubRentDiscountPercent,
      Wrapped<double?>? defaultSubSaleDiscountPercent,
      Wrapped<String?>? defaultRate,
      Wrapped<String?>? billingCycleId,
      Wrapped<String?>? billingCycle,
      Wrapped<String?>? paymentTermsId,
      Wrapped<String?>? paymentTerms,
      Wrapped<String?>? accountNumber,
      Wrapped<String?>? defaultPoClassificationId,
      Wrapped<String?>? defaultPoClassification,
      Wrapped<String?>? organizationTypeId,
      Wrapped<String?>? organizationType,
      Wrapped<bool?>? multipleCurrencies,
      Wrapped<String?>? defaultCurrencyId,
      Wrapped<String?>? defaultCurrencyCode,
      Wrapped<String?>? defaultCurrency,
      Wrapped<String?>? defaultCurrencySymbol,
      Wrapped<String?>? remitAttention1,
      Wrapped<String?>? remitAttention2,
      Wrapped<String?>? remitAddress1,
      Wrapped<String?>? remitAddress2,
      Wrapped<String?>? remitCity,
      Wrapped<String?>? remitState,
      Wrapped<String?>? remitCountryId,
      Wrapped<String?>? remitCountry,
      Wrapped<String?>? remitCountryCodeIsoAlpha2,
      Wrapped<int?>? remitCountryCodePhone,
      Wrapped<String?>? remitZipCode,
      Wrapped<String?>? remitPayeeNo,
      Wrapped<String?>? externalId,
      Wrapped<bool?>? automaticallyAdjustContractDates,
      Wrapped<String?>? shippingTrackingLink,
      Wrapped<String?>? defaultOutgoingDeliveryType,
      Wrapped<String?>? defaultIncomingDeliveryType,
      Wrapped<String?>? customerId,
      Wrapped<String?>? customer,
      Wrapped<String?>? inputDate,
      Wrapped<String?>? lastModifiedDate,
      Wrapped<String?>? primaryContactId,
      Wrapped<String?>? primaryContact,
      Wrapped<String?>? primaryContactPhone,
      Wrapped<String?>? primaryContactExtension,
      Wrapped<bool?>? inactive,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesAgentVendorVendor(
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        vendor: (vendor != null ? vendor.value : this.vendor),
        vendorDisplayName: (vendorDisplayName != null
            ? vendorDisplayName.value
            : this.vendorDisplayName),
        vendorNameType: (vendorNameType != null
            ? vendorNameType.value
            : this.vendorNameType),
        vendorNumber:
            (vendorNumber != null ? vendorNumber.value : this.vendorNumber),
        federalIdNumber: (federalIdNumber != null
            ? federalIdNumber.value
            : this.federalIdNumber),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        officeLocation: (officeLocation != null
            ? officeLocation.value
            : this.officeLocation),
        salutation: (salutation != null ? salutation.value : this.salutation),
        firstName: (firstName != null ? firstName.value : this.firstName),
        middleInitial:
            (middleInitial != null ? middleInitial.value : this.middleInitial),
        lastName: (lastName != null ? lastName.value : this.lastName),
        address1: (address1 != null ? address1.value : this.address1),
        address2: (address2 != null ? address2.value : this.address2),
        city: (city != null ? city.value : this.city),
        state: (state != null ? state.value : this.state),
        countryId: (countryId != null ? countryId.value : this.countryId),
        country: (country != null ? country.value : this.country),
        countryCodeIsoAlpha2: (countryCodeIsoAlpha2 != null
            ? countryCodeIsoAlpha2.value
            : this.countryCodeIsoAlpha2),
        countryCodePhone: (countryCodePhone != null
            ? countryCodePhone.value
            : this.countryCodePhone),
        zipCode: (zipCode != null ? zipCode.value : this.zipCode),
        vendorClassId:
            (vendorClassId != null ? vendorClassId.value : this.vendorClassId),
        vendorClass:
            (vendorClass != null ? vendorClass.value : this.vendorClass),
        phone: (phone != null ? phone.value : this.phone),
        fax: (fax != null ? fax.value : this.fax),
        phoneTollFree:
            (phoneTollFree != null ? phoneTollFree.value : this.phoneTollFree),
        otherPhone: (otherPhone != null ? otherPhone.value : this.otherPhone),
        webAddress: (webAddress != null ? webAddress.value : this.webAddress),
        email: (email != null ? email.value : this.email),
        activeDate: (activeDate != null ? activeDate.value : this.activeDate),
        inactiveDate:
            (inactiveDate != null ? inactiveDate.value : this.inactiveDate),
        subRent: (subRent != null ? subRent.value : this.subRent),
        subSales: (subSales != null ? subSales.value : this.subSales),
        subMisc: (subMisc != null ? subMisc.value : this.subMisc),
        subLabor: (subLabor != null ? subLabor.value : this.subLabor),
        subVehicle: (subVehicle != null ? subVehicle.value : this.subVehicle),
        repair: (repair != null ? repair.value : this.repair),
        rentalInventory: (rentalInventory != null
            ? rentalInventory.value
            : this.rentalInventory),
        salesPartsInventory: (salesPartsInventory != null
            ? salesPartsInventory.value
            : this.salesPartsInventory),
        manufacturer:
            (manufacturer != null ? manufacturer.value : this.manufacturer),
        freight: (freight != null ? freight.value : this.freight),
        insurance: (insurance != null ? insurance.value : this.insurance),
        consignment:
            (consignment != null ? consignment.value : this.consignment),
        vendorColor:
            (vendorColor != null ? vendorColor.value : this.vendorColor),
        defaultSubRentDaysPerWeek: (defaultSubRentDaysPerWeek != null
            ? defaultSubRentDaysPerWeek.value
            : this.defaultSubRentDaysPerWeek),
        defaultSubRentDiscountPercent: (defaultSubRentDiscountPercent != null
            ? defaultSubRentDiscountPercent.value
            : this.defaultSubRentDiscountPercent),
        defaultSubSaleDiscountPercent: (defaultSubSaleDiscountPercent != null
            ? defaultSubSaleDiscountPercent.value
            : this.defaultSubSaleDiscountPercent),
        defaultRate:
            (defaultRate != null ? defaultRate.value : this.defaultRate),
        billingCycleId: (billingCycleId != null
            ? billingCycleId.value
            : this.billingCycleId),
        billingCycle:
            (billingCycle != null ? billingCycle.value : this.billingCycle),
        paymentTermsId: (paymentTermsId != null
            ? paymentTermsId.value
            : this.paymentTermsId),
        paymentTerms:
            (paymentTerms != null ? paymentTerms.value : this.paymentTerms),
        accountNumber:
            (accountNumber != null ? accountNumber.value : this.accountNumber),
        defaultPoClassificationId: (defaultPoClassificationId != null
            ? defaultPoClassificationId.value
            : this.defaultPoClassificationId),
        defaultPoClassification: (defaultPoClassification != null
            ? defaultPoClassification.value
            : this.defaultPoClassification),
        organizationTypeId: (organizationTypeId != null
            ? organizationTypeId.value
            : this.organizationTypeId),
        organizationType: (organizationType != null
            ? organizationType.value
            : this.organizationType),
        multipleCurrencies: (multipleCurrencies != null
            ? multipleCurrencies.value
            : this.multipleCurrencies),
        defaultCurrencyId: (defaultCurrencyId != null
            ? defaultCurrencyId.value
            : this.defaultCurrencyId),
        defaultCurrencyCode: (defaultCurrencyCode != null
            ? defaultCurrencyCode.value
            : this.defaultCurrencyCode),
        defaultCurrency: (defaultCurrency != null
            ? defaultCurrency.value
            : this.defaultCurrency),
        defaultCurrencySymbol: (defaultCurrencySymbol != null
            ? defaultCurrencySymbol.value
            : this.defaultCurrencySymbol),
        remitAttention1: (remitAttention1 != null
            ? remitAttention1.value
            : this.remitAttention1),
        remitAttention2: (remitAttention2 != null
            ? remitAttention2.value
            : this.remitAttention2),
        remitAddress1:
            (remitAddress1 != null ? remitAddress1.value : this.remitAddress1),
        remitAddress2:
            (remitAddress2 != null ? remitAddress2.value : this.remitAddress2),
        remitCity: (remitCity != null ? remitCity.value : this.remitCity),
        remitState: (remitState != null ? remitState.value : this.remitState),
        remitCountryId: (remitCountryId != null
            ? remitCountryId.value
            : this.remitCountryId),
        remitCountry:
            (remitCountry != null ? remitCountry.value : this.remitCountry),
        remitCountryCodeIsoAlpha2: (remitCountryCodeIsoAlpha2 != null
            ? remitCountryCodeIsoAlpha2.value
            : this.remitCountryCodeIsoAlpha2),
        remitCountryCodePhone: (remitCountryCodePhone != null
            ? remitCountryCodePhone.value
            : this.remitCountryCodePhone),
        remitZipCode:
            (remitZipCode != null ? remitZipCode.value : this.remitZipCode),
        remitPayeeNo:
            (remitPayeeNo != null ? remitPayeeNo.value : this.remitPayeeNo),
        externalId: (externalId != null ? externalId.value : this.externalId),
        automaticallyAdjustContractDates: (automaticallyAdjustContractDates != null
            ? automaticallyAdjustContractDates.value
            : this.automaticallyAdjustContractDates),
        shippingTrackingLink: (shippingTrackingLink != null
            ? shippingTrackingLink.value
            : this.shippingTrackingLink),
        defaultOutgoingDeliveryType: (defaultOutgoingDeliveryType != null
            ? defaultOutgoingDeliveryType.value
            : this.defaultOutgoingDeliveryType),
        defaultIncomingDeliveryType: (defaultIncomingDeliveryType != null
            ? defaultIncomingDeliveryType.value
            : this.defaultIncomingDeliveryType),
        customerId: (customerId != null ? customerId.value : this.customerId),
        customer: (customer != null ? customer.value : this.customer),
        inputDate: (inputDate != null ? inputDate.value : this.inputDate),
        lastModifiedDate: (lastModifiedDate != null
            ? lastModifiedDate.value
            : this.lastModifiedDate),
        primaryContactId: (primaryContactId != null
            ? primaryContactId.value
            : this.primaryContactId),
        primaryContact: (primaryContact != null
            ? primaryContact.value
            : this.primaryContact),
        primaryContactPhone: (primaryContactPhone != null
            ? primaryContactPhone.value
            : this.primaryContactPhone),
        primaryContactExtension: (primaryContactExtension != null
            ? primaryContactExtension.value
            : this.primaryContactExtension),
        inactive: (inactive != null ? inactive.value : this.inactive),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequest {
  WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequest({
    this.fromDate,
    this.toDate,
    this.includeOrdersWithoutTracking,
    this.dataExportFormatId,
  });

  factory WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IncludeOrdersWithoutTracking', includeIfNull: false)
  final bool? includeOrdersWithoutTracking;
  @JsonKey(name: 'DataExportFormatId', includeIfNull: false)
  final String? dataExportFormatId;
  static const fromJsonFactory =
      _$WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.includeOrdersWithoutTracking,
                    includeOrdersWithoutTracking) ||
                const DeepCollectionEquality().equals(
                    other.includeOrdersWithoutTracking,
                    includeOrdersWithoutTracking)) &&
            (identical(other.dataExportFormatId, dataExportFormatId) ||
                const DeepCollectionEquality()
                    .equals(other.dataExportFormatId, dataExportFormatId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(includeOrdersWithoutTracking) ^
      const DeepCollectionEquality().hash(dataExportFormatId) ^
      runtimeType.hashCode;
}

extension $WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequestExtension
    on WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequest {
  WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? includeOrdersWithoutTracking,
          String? dataExportFormatId}) {
    return WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        includeOrdersWithoutTracking:
            includeOrdersWithoutTracking ?? this.includeOrdersWithoutTracking,
        dataExportFormatId: dataExportFormatId ?? this.dataExportFormatId);
  }

  WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<bool?>? includeOrdersWithoutTracking,
          Wrapped<String?>? dataExportFormatId}) {
    return WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        includeOrdersWithoutTracking: (includeOrdersWithoutTracking != null
            ? includeOrdersWithoutTracking.value
            : this.includeOrdersWithoutTracking),
        dataExportFormatId: (dataExportFormatId != null
            ? dataExportFormatId.value
            : this.dataExportFormatId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse {
  WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse({
    this.batchId,
    this.batchNumber,
    this.downloadUrl,
    this.success,
    this.message,
  });

  factory WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponseFromJson(
          json);

  @JsonKey(name: 'BatchId', includeIfNull: false)
  final String? batchId;
  @JsonKey(name: 'BatchNumber', includeIfNull: false)
  final String? batchNumber;
  @JsonKey(name: 'downloadUrl', includeIfNull: false)
  final String? downloadUrl;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'message', includeIfNull: false)
  final String? message;
  static const fromJsonFactory =
      _$WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse &&
            (identical(other.batchId, batchId) ||
                const DeepCollectionEquality()
                    .equals(other.batchId, batchId)) &&
            (identical(other.batchNumber, batchNumber) ||
                const DeepCollectionEquality()
                    .equals(other.batchNumber, batchNumber)) &&
            (identical(other.downloadUrl, downloadUrl) ||
                const DeepCollectionEquality()
                    .equals(other.downloadUrl, downloadUrl)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.message, message) ||
                const DeepCollectionEquality().equals(other.message, message)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batchId) ^
      const DeepCollectionEquality().hash(batchNumber) ^
      const DeepCollectionEquality().hash(downloadUrl) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(message) ^
      runtimeType.hashCode;
}

extension $WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponseExtension
    on WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse {
  WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse
      copyWith(
          {String? batchId,
          String? batchNumber,
          String? downloadUrl,
          bool? success,
          String? message}) {
    return WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse(
        batchId: batchId ?? this.batchId,
        batchNumber: batchNumber ?? this.batchNumber,
        downloadUrl: downloadUrl ?? this.downloadUrl,
        success: success ?? this.success,
        message: message ?? this.message);
  }

  WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse
      copyWithWrapped(
          {Wrapped<String?>? batchId,
          Wrapped<String?>? batchNumber,
          Wrapped<String?>? downloadUrl,
          Wrapped<bool?>? success,
          Wrapped<String?>? message}) {
    return WebApiModulesExportsOnlineOrderTrackingExportOnlineOrderTrackingExportResponse(
        batchId: (batchId != null ? batchId.value : this.batchId),
        batchNumber:
            (batchNumber != null ? batchNumber.value : this.batchNumber),
        downloadUrl:
            (downloadUrl != null ? downloadUrl.value : this.downloadUrl),
        success: (success != null ? success.value : this.success),
        message: (message != null ? message.value : this.message));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesExportsOrderExportOrderExportRequest {
  WebApiModulesExportsOrderExportOrderExportRequest({
    this.fromDate,
    this.toDate,
    this.dataExportFormatId,
  });

  factory WebApiModulesExportsOrderExportOrderExportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesExportsOrderExportOrderExportRequestFromJson(json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DataExportFormatId', includeIfNull: false)
  final String? dataExportFormatId;
  static const fromJsonFactory =
      _$WebApiModulesExportsOrderExportOrderExportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesExportsOrderExportOrderExportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesExportsOrderExportOrderExportRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesExportsOrderExportOrderExportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dataExportFormatId, dataExportFormatId) ||
                const DeepCollectionEquality()
                    .equals(other.dataExportFormatId, dataExportFormatId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dataExportFormatId) ^
      runtimeType.hashCode;
}

extension $WebApiModulesExportsOrderExportOrderExportRequestExtension
    on WebApiModulesExportsOrderExportOrderExportRequest {
  WebApiModulesExportsOrderExportOrderExportRequest copyWith(
      {DateTime? fromDate, DateTime? toDate, String? dataExportFormatId}) {
    return WebApiModulesExportsOrderExportOrderExportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dataExportFormatId: dataExportFormatId ?? this.dataExportFormatId);
  }

  WebApiModulesExportsOrderExportOrderExportRequest copyWithWrapped(
      {Wrapped<DateTime?>? fromDate,
      Wrapped<DateTime?>? toDate,
      Wrapped<String?>? dataExportFormatId}) {
    return WebApiModulesExportsOrderExportOrderExportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dataExportFormatId: (dataExportFormatId != null
            ? dataExportFormatId.value
            : this.dataExportFormatId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesExportsOrderExportOrderExportResponse {
  WebApiModulesExportsOrderExportOrderExportResponse({
    this.batchId,
    this.batchNumber,
    this.downloadUrl,
    this.success,
    this.message,
  });

  factory WebApiModulesExportsOrderExportOrderExportResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesExportsOrderExportOrderExportResponseFromJson(json);

  @JsonKey(name: 'BatchId', includeIfNull: false)
  final String? batchId;
  @JsonKey(name: 'BatchNumber', includeIfNull: false)
  final String? batchNumber;
  @JsonKey(name: 'downloadUrl', includeIfNull: false)
  final String? downloadUrl;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'message', includeIfNull: false)
  final String? message;
  static const fromJsonFactory =
      _$WebApiModulesExportsOrderExportOrderExportResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesExportsOrderExportOrderExportResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesExportsOrderExportOrderExportResponseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesExportsOrderExportOrderExportResponse &&
            (identical(other.batchId, batchId) ||
                const DeepCollectionEquality()
                    .equals(other.batchId, batchId)) &&
            (identical(other.batchNumber, batchNumber) ||
                const DeepCollectionEquality()
                    .equals(other.batchNumber, batchNumber)) &&
            (identical(other.downloadUrl, downloadUrl) ||
                const DeepCollectionEquality()
                    .equals(other.downloadUrl, downloadUrl)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.message, message) ||
                const DeepCollectionEquality().equals(other.message, message)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batchId) ^
      const DeepCollectionEquality().hash(batchNumber) ^
      const DeepCollectionEquality().hash(downloadUrl) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(message) ^
      runtimeType.hashCode;
}

extension $WebApiModulesExportsOrderExportOrderExportResponseExtension
    on WebApiModulesExportsOrderExportOrderExportResponse {
  WebApiModulesExportsOrderExportOrderExportResponse copyWith(
      {String? batchId,
      String? batchNumber,
      String? downloadUrl,
      bool? success,
      String? message}) {
    return WebApiModulesExportsOrderExportOrderExportResponse(
        batchId: batchId ?? this.batchId,
        batchNumber: batchNumber ?? this.batchNumber,
        downloadUrl: downloadUrl ?? this.downloadUrl,
        success: success ?? this.success,
        message: message ?? this.message);
  }

  WebApiModulesExportsOrderExportOrderExportResponse copyWithWrapped(
      {Wrapped<String?>? batchId,
      Wrapped<String?>? batchNumber,
      Wrapped<String?>? downloadUrl,
      Wrapped<bool?>? success,
      Wrapped<String?>? message}) {
    return WebApiModulesExportsOrderExportOrderExportResponse(
        batchId: (batchId != null ? batchId.value : this.batchId),
        batchNumber:
            (batchNumber != null ? batchNumber.value : this.batchNumber),
        downloadUrl:
            (downloadUrl != null ? downloadUrl.value : this.downloadUrl),
        success: (success != null ? success.value : this.success),
        message: (message != null ? message.value : this.message));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequest {
  WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequest({
    this.rateUpdateBatchName,
  });

  factory WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequestFromJson(
          json);

  @JsonKey(name: 'RateUpdateBatchName', includeIfNull: false)
  final String? rateUpdateBatchName;
  static const fromJsonFactory =
      _$WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequest &&
            (identical(other.rateUpdateBatchName, rateUpdateBatchName) ||
                const DeepCollectionEquality()
                    .equals(other.rateUpdateBatchName, rateUpdateBatchName)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(rateUpdateBatchName) ^
      runtimeType.hashCode;
}

extension $WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequestExtension
    on WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequest {
  WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequest
      copyWith({String? rateUpdateBatchName}) {
    return WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequest(
        rateUpdateBatchName: rateUpdateBatchName ?? this.rateUpdateBatchName);
  }

  WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequest
      copyWithWrapped({Wrapped<String?>? rateUpdateBatchName}) {
    return WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsRequest(
        rateUpdateBatchName: (rateUpdateBatchName != null
            ? rateUpdateBatchName.value
            : this.rateUpdateBatchName));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse {
  WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse({
    this.status,
    this.success,
    this.msg,
    this.rateUpdateBatch,
  });

  factory WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponseFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  @JsonKey(name: 'RateUpdateBatch', includeIfNull: false)
  final WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch? rateUpdateBatch;
  static const fromJsonFactory =
      _$WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)) &&
            (identical(other.rateUpdateBatch, rateUpdateBatch) ||
                const DeepCollectionEquality()
                    .equals(other.rateUpdateBatch, rateUpdateBatch)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      const DeepCollectionEquality().hash(rateUpdateBatch) ^
      runtimeType.hashCode;
}

extension $WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponseExtension
    on WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse {
  WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse
      copyWith(
          {int? status,
          bool? success,
          String? msg,
          WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch?
              rateUpdateBatch}) {
    return WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg,
        rateUpdateBatch: rateUpdateBatch ?? this.rateUpdateBatch);
  }

  WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse
      copyWithWrapped(
          {Wrapped<int?>? status,
          Wrapped<bool?>? success,
          Wrapped<String?>? msg,
          Wrapped<WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch?>?
              rateUpdateBatch}) {
    return WebApiModulesInventoryInventoryApplyPendingRateUpdateModificationsResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg),
        rateUpdateBatch: (rateUpdateBatch != null
            ? rateUpdateBatch.value
            : this.rateUpdateBatch));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesInventoryInventoryChangeICodeRequest {
  WebApiModulesInventoryInventoryChangeICodeRequest({
    this.itemId,
    this.inventoryId,
  });

  factory WebApiModulesInventoryInventoryChangeICodeRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesInventoryInventoryChangeICodeRequestFromJson(json);

  @JsonKey(name: 'ItemId', includeIfNull: false)
  final String? itemId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  static const fromJsonFactory =
      _$WebApiModulesInventoryInventoryChangeICodeRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesInventoryInventoryChangeICodeRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesInventoryInventoryChangeICodeRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesInventoryInventoryChangeICodeRequest &&
            (identical(other.itemId, itemId) ||
                const DeepCollectionEquality().equals(other.itemId, itemId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(itemId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      runtimeType.hashCode;
}

extension $WebApiModulesInventoryInventoryChangeICodeRequestExtension
    on WebApiModulesInventoryInventoryChangeICodeRequest {
  WebApiModulesInventoryInventoryChangeICodeRequest copyWith(
      {String? itemId, String? inventoryId}) {
    return WebApiModulesInventoryInventoryChangeICodeRequest(
        itemId: itemId ?? this.itemId,
        inventoryId: inventoryId ?? this.inventoryId);
  }

  WebApiModulesInventoryInventoryChangeICodeRequest copyWithWrapped(
      {Wrapped<String?>? itemId, Wrapped<String?>? inventoryId}) {
    return WebApiModulesInventoryInventoryChangeICodeRequest(
        itemId: (itemId != null ? itemId.value : this.itemId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesInventoryInventoryChangeICodeResponse {
  WebApiModulesInventoryInventoryChangeICodeResponse({
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiModulesInventoryInventoryChangeICodeResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesInventoryInventoryChangeICodeResponseFromJson(json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory =
      _$WebApiModulesInventoryInventoryChangeICodeResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesInventoryInventoryChangeICodeResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesInventoryInventoryChangeICodeResponseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesInventoryInventoryChangeICodeResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      runtimeType.hashCode;
}

extension $WebApiModulesInventoryInventoryChangeICodeResponseExtension
    on WebApiModulesInventoryInventoryChangeICodeResponse {
  WebApiModulesInventoryInventoryChangeICodeResponse copyWith(
      {int? status, bool? success, String? msg}) {
    return WebApiModulesInventoryInventoryChangeICodeResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }

  WebApiModulesInventoryInventoryChangeICodeResponse copyWithWrapped(
      {Wrapped<int?>? status, Wrapped<bool?>? success, Wrapped<String?>? msg}) {
    return WebApiModulesInventoryInventoryChangeICodeResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesInventoryInventoryRetireInventoryRequest {
  WebApiModulesInventoryInventoryRetireInventoryRequest({
    this.inventoryId,
    this.warehouseId,
    this.itemId,
    this.retiredReasonId,
    this.notes,
    this.quantity,
    this.changeICode,
    this.consignorId,
    this.consignorAgreementId,
  });

  factory WebApiModulesInventoryInventoryRetireInventoryRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesInventoryInventoryRetireInventoryRequestFromJson(json);

  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'ItemId', includeIfNull: false)
  final String? itemId;
  @JsonKey(name: 'RetiredReasonId', includeIfNull: false)
  final String? retiredReasonId;
  @JsonKey(name: 'Notes', includeIfNull: false)
  final String? notes;
  @JsonKey(name: 'Quantity', includeIfNull: false)
  final double? quantity;
  @JsonKey(name: 'ChangeICode', includeIfNull: false)
  final bool? changeICode;
  @JsonKey(name: 'ConsignorId', includeIfNull: false)
  final String? consignorId;
  @JsonKey(name: 'ConsignorAgreementId', includeIfNull: false)
  final String? consignorAgreementId;
  static const fromJsonFactory =
      _$WebApiModulesInventoryInventoryRetireInventoryRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesInventoryInventoryRetireInventoryRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesInventoryInventoryRetireInventoryRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesInventoryInventoryRetireInventoryRequest &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.itemId, itemId) ||
                const DeepCollectionEquality().equals(other.itemId, itemId)) &&
            (identical(other.retiredReasonId, retiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.retiredReasonId, retiredReasonId)) &&
            (identical(other.notes, notes) ||
                const DeepCollectionEquality().equals(other.notes, notes)) &&
            (identical(other.quantity, quantity) ||
                const DeepCollectionEquality()
                    .equals(other.quantity, quantity)) &&
            (identical(other.changeICode, changeICode) ||
                const DeepCollectionEquality()
                    .equals(other.changeICode, changeICode)) &&
            (identical(other.consignorId, consignorId) ||
                const DeepCollectionEquality()
                    .equals(other.consignorId, consignorId)) &&
            (identical(other.consignorAgreementId, consignorAgreementId) ||
                const DeepCollectionEquality()
                    .equals(other.consignorAgreementId, consignorAgreementId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(itemId) ^
      const DeepCollectionEquality().hash(retiredReasonId) ^
      const DeepCollectionEquality().hash(notes) ^
      const DeepCollectionEquality().hash(quantity) ^
      const DeepCollectionEquality().hash(changeICode) ^
      const DeepCollectionEquality().hash(consignorId) ^
      const DeepCollectionEquality().hash(consignorAgreementId) ^
      runtimeType.hashCode;
}

extension $WebApiModulesInventoryInventoryRetireInventoryRequestExtension
    on WebApiModulesInventoryInventoryRetireInventoryRequest {
  WebApiModulesInventoryInventoryRetireInventoryRequest copyWith(
      {String? inventoryId,
      String? warehouseId,
      String? itemId,
      String? retiredReasonId,
      String? notes,
      double? quantity,
      bool? changeICode,
      String? consignorId,
      String? consignorAgreementId}) {
    return WebApiModulesInventoryInventoryRetireInventoryRequest(
        inventoryId: inventoryId ?? this.inventoryId,
        warehouseId: warehouseId ?? this.warehouseId,
        itemId: itemId ?? this.itemId,
        retiredReasonId: retiredReasonId ?? this.retiredReasonId,
        notes: notes ?? this.notes,
        quantity: quantity ?? this.quantity,
        changeICode: changeICode ?? this.changeICode,
        consignorId: consignorId ?? this.consignorId,
        consignorAgreementId:
            consignorAgreementId ?? this.consignorAgreementId);
  }

  WebApiModulesInventoryInventoryRetireInventoryRequest copyWithWrapped(
      {Wrapped<String?>? inventoryId,
      Wrapped<String?>? warehouseId,
      Wrapped<String?>? itemId,
      Wrapped<String?>? retiredReasonId,
      Wrapped<String?>? notes,
      Wrapped<double?>? quantity,
      Wrapped<bool?>? changeICode,
      Wrapped<String?>? consignorId,
      Wrapped<String?>? consignorAgreementId}) {
    return WebApiModulesInventoryInventoryRetireInventoryRequest(
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        itemId: (itemId != null ? itemId.value : this.itemId),
        retiredReasonId: (retiredReasonId != null
            ? retiredReasonId.value
            : this.retiredReasonId),
        notes: (notes != null ? notes.value : this.notes),
        quantity: (quantity != null ? quantity.value : this.quantity),
        changeICode:
            (changeICode != null ? changeICode.value : this.changeICode),
        consignorId:
            (consignorId != null ? consignorId.value : this.consignorId),
        consignorAgreementId: (consignorAgreementId != null
            ? consignorAgreementId.value
            : this.consignorAgreementId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesInventoryInventoryRetireInventoryResponse {
  WebApiModulesInventoryInventoryRetireInventoryResponse({
    this.status,
    this.success,
    this.msg,
    this.retiredId,
  });

  factory WebApiModulesInventoryInventoryRetireInventoryResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesInventoryInventoryRetireInventoryResponseFromJson(json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  @JsonKey(name: 'RetiredId', includeIfNull: false)
  final String? retiredId;
  static const fromJsonFactory =
      _$WebApiModulesInventoryInventoryRetireInventoryResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesInventoryInventoryRetireInventoryResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesInventoryInventoryRetireInventoryResponseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesInventoryInventoryRetireInventoryResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)) &&
            (identical(other.retiredId, retiredId) ||
                const DeepCollectionEquality()
                    .equals(other.retiredId, retiredId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      const DeepCollectionEquality().hash(retiredId) ^
      runtimeType.hashCode;
}

extension $WebApiModulesInventoryInventoryRetireInventoryResponseExtension
    on WebApiModulesInventoryInventoryRetireInventoryResponse {
  WebApiModulesInventoryInventoryRetireInventoryResponse copyWith(
      {int? status, bool? success, String? msg, String? retiredId}) {
    return WebApiModulesInventoryInventoryRetireInventoryResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg,
        retiredId: retiredId ?? this.retiredId);
  }

  WebApiModulesInventoryInventoryRetireInventoryResponse copyWithWrapped(
      {Wrapped<int?>? status,
      Wrapped<bool?>? success,
      Wrapped<String?>? msg,
      Wrapped<String?>? retiredId}) {
    return WebApiModulesInventoryInventoryRetireInventoryResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg),
        retiredId: (retiredId != null ? retiredId.value : this.retiredId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesInventoryInventoryUnretireInventoryRequest {
  WebApiModulesInventoryInventoryUnretireInventoryRequest({
    this.retiredId,
    this.itemId,
    this.unretiredReasonId,
    this.notes,
    this.quantity,
  });

  factory WebApiModulesInventoryInventoryUnretireInventoryRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesInventoryInventoryUnretireInventoryRequestFromJson(json);

  @JsonKey(name: 'RetiredId', includeIfNull: false)
  final String? retiredId;
  @JsonKey(name: 'ItemId', includeIfNull: false)
  final String? itemId;
  @JsonKey(name: 'UnretiredReasonId', includeIfNull: false)
  final String? unretiredReasonId;
  @JsonKey(name: 'Notes', includeIfNull: false)
  final String? notes;
  @JsonKey(name: 'Quantity', includeIfNull: false)
  final double? quantity;
  static const fromJsonFactory =
      _$WebApiModulesInventoryInventoryUnretireInventoryRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesInventoryInventoryUnretireInventoryRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesInventoryInventoryUnretireInventoryRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesInventoryInventoryUnretireInventoryRequest &&
            (identical(other.retiredId, retiredId) ||
                const DeepCollectionEquality()
                    .equals(other.retiredId, retiredId)) &&
            (identical(other.itemId, itemId) ||
                const DeepCollectionEquality().equals(other.itemId, itemId)) &&
            (identical(other.unretiredReasonId, unretiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.unretiredReasonId, unretiredReasonId)) &&
            (identical(other.notes, notes) ||
                const DeepCollectionEquality().equals(other.notes, notes)) &&
            (identical(other.quantity, quantity) ||
                const DeepCollectionEquality()
                    .equals(other.quantity, quantity)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(retiredId) ^
      const DeepCollectionEquality().hash(itemId) ^
      const DeepCollectionEquality().hash(unretiredReasonId) ^
      const DeepCollectionEquality().hash(notes) ^
      const DeepCollectionEquality().hash(quantity) ^
      runtimeType.hashCode;
}

extension $WebApiModulesInventoryInventoryUnretireInventoryRequestExtension
    on WebApiModulesInventoryInventoryUnretireInventoryRequest {
  WebApiModulesInventoryInventoryUnretireInventoryRequest copyWith(
      {String? retiredId,
      String? itemId,
      String? unretiredReasonId,
      String? notes,
      double? quantity}) {
    return WebApiModulesInventoryInventoryUnretireInventoryRequest(
        retiredId: retiredId ?? this.retiredId,
        itemId: itemId ?? this.itemId,
        unretiredReasonId: unretiredReasonId ?? this.unretiredReasonId,
        notes: notes ?? this.notes,
        quantity: quantity ?? this.quantity);
  }

  WebApiModulesInventoryInventoryUnretireInventoryRequest copyWithWrapped(
      {Wrapped<String?>? retiredId,
      Wrapped<String?>? itemId,
      Wrapped<String?>? unretiredReasonId,
      Wrapped<String?>? notes,
      Wrapped<double?>? quantity}) {
    return WebApiModulesInventoryInventoryUnretireInventoryRequest(
        retiredId: (retiredId != null ? retiredId.value : this.retiredId),
        itemId: (itemId != null ? itemId.value : this.itemId),
        unretiredReasonId: (unretiredReasonId != null
            ? unretiredReasonId.value
            : this.unretiredReasonId),
        notes: (notes != null ? notes.value : this.notes),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesInventoryRentalInventoryRentalInventory {
  WebApiModulesInventoryRentalInventoryRentalInventory({
    this.excludeFromReturnOnAsset,
    this.isFixedAsset,
    this.multiAssignRFIDs,
    this.minimumDaysPerWeek,
    this.setOpeningId,
    this.setOpening,
    this.wallTypeId,
    this.wallType,
    this.setSurfaceId,
    this.setSurface,
    this.wallWidthFt,
    this.wallWidthIn,
    this.wallHeightFt,
    this.wallHeightIn,
    this.wallLengthFt,
    this.wallLengthIn,
    this.treatConsignedQtyAsOwned,
    this.dailyRate,
    this.weeklyRate,
    this.week2Rate,
    this.week3Rate,
    this.week4Rate,
    this.monthlyRate,
    this.unitValue,
    this.replacementCost,
    this.sourceId,
    this.inventoryId,
    this.inventoryTypeId,
    this.inventoryType,
    this.availableFrom,
    this.trackedBy,
    this.confirmTrackedBy,
    this.rank,
    this.manufacturerPartNumber,
    this.manufacturerId,
    this.manufacturer,
    this.manufacturerUrl,
    this.excludeImageFromQuoteOrderPrint,
    this.noAvailabilityCheck,
    this.availabilityManuallyResolveConflicts,
    this.sendAvailabilityAlert,
    this.primaryDimensionUniqueId,
    this.defaultImperialMetric,
    this.primaryDimensionDescription,
    this.primaryDimensionShipWeightLbs,
    this.primaryDimensionShipWeightOz,
    this.primaryDimensionWeightInCaseLbs,
    this.primaryDimensionWeightInCaseOz,
    this.primaryDimensionWidthFt,
    this.primaryDimensionWidthIn,
    this.primaryDimensionHeightFt,
    this.primaryDimensionHeightIn,
    this.primaryDimensionLengthFt,
    this.primaryDimensionLengthIn,
    this.primaryDimensionShipWeightKg,
    this.primaryDimensionShipWeightG,
    this.primaryDimensionWeightInCaseKg,
    this.primaryDimensionWeightInCaseG,
    this.primaryDimensionWidthM,
    this.primaryDimensionWidthCm,
    this.primaryDimensionHeightM,
    this.primaryDimensionHeightCm,
    this.primaryDimensionLengthM,
    this.primaryDimensionLengthCm,
    this.hasSecondaryDimensions,
    this.secondaryDimensionUniqueId,
    this.secondaryDimensionDescription,
    this.secondaryDimensionShipWeightLbs,
    this.secondaryDimensionShipWeightOz,
    this.secondaryDimensionWeightInCaseLbs,
    this.secondaryDimensionWeightInCaseOz,
    this.secondaryDimensionWidthFt,
    this.secondaryDimensionWidthIn,
    this.secondaryDimensionHeightFt,
    this.secondaryDimensionHeightIn,
    this.secondaryDimensionLengthFt,
    this.secondaryDimensionLengthIn,
    this.secondaryDimensionShipWeightKg,
    this.secondaryDimensionShipWeightG,
    this.secondaryDimensionWeightInCaseKg,
    this.secondaryDimensionWeightInCaseG,
    this.secondaryDimensionWidthM,
    this.secondaryDimensionWidthCm,
    this.secondaryDimensionHeightM,
    this.secondaryDimensionHeightCm,
    this.secondaryDimensionLengthM,
    this.secondaryDimensionLengthCm,
    this.countryOfOriginId,
    this.countryOfOrigin,
    this.displayInSummaryModeWhenRateIsZero,
    this.qcRequired,
    this.qcTime,
    this.copyAttributesAsNote,
    this.trackAssetUsage,
    this.trackLampUsage,
    this.trackStrikes,
    this.trackCandles,
    this.lampCount,
    this.minimumFootCandles,
    this.trackSoftware,
    this.softwareVersion,
    this.softwareEffectiveDate,
    this.warehouseSpecificPackage,
    this.completePackagePrice,
    this.kitPackagePrice,
    this.separatePackageOnQuoteOrder,
    this.containerId,
    this.containerScannableInventoryId,
    this.containerScannableICode,
    this.containerScannableDescription,
    this.automaticallyRebuildContainerAtCheckIn,
    this.automaticallyRebuildContainerAtTransferIn,
    this.containerStagingRule,
    this.excludeContainedItemsFromAvailability,
    this.useContainerNumber,
    this.containerPackingListBehavior,
    this.inventoryTypeIsWardrobe,
    this.inventoryTypeIsSets,
    this.patternId,
    this.pattern,
    this.periodId,
    this.period,
    this.materialId,
    this.material,
    this.genderId,
    this.gender,
    this.labelId,
    this.label,
    this.wardrobeSize,
    this.wardrobePieceCount,
    this.dyed,
    this.wardrobeSourceId,
    this.wardrobeSource,
    this.wardrobeCareId,
    this.wardrobeCare,
    this.cleaningFeeAmount,
    this.wardrobeDetailedDescription,
    this.webDetailedDescription,
    this.technicalNotes,
    this.overrideSystemDefaultRevenueAllocationBehavior,
    this.allocateRevenueForAccessories,
    this.packageRevenueCalculationFormula,
    this.isHazardousMaterial,
    this.descriptionWithAkas,
    this.costCalculation,
    this.quantity,
    this.quantityIn,
    this.quantityStaged,
    this.quantityOut,
    this.quantityInContainer,
    this.quantityInRepair,
    this.quantityInTransit,
    this.quantityOnTruck,
    this.totalQuantity,
    this.aisleLocation,
    this.shelfLocation,
    this.taxable,
    this.dateOfLastPhysicalInventory,
    this.hasImage,
    this.iCode,
    this.description,
    this.availFor,
    this.categoryId,
    this.category,
    this.subCategoryCount,
    this.subCategoryId,
    this.subCategory,
    this.classification,
    this.classificationDescription,
    this.classificationColor,
    this.unitId,
    this.unit,
    this.unitType,
    this.nonDiscountable,
    this.overrideProfitAndLossCategory,
    this.profitAndLossCategoryId,
    this.profitAndLossCategory,
    this.autoCopyNotesToQuoteOrder,
    this.note,
    this.printNoteOnInContract,
    this.printNoteOnOutContract,
    this.printNoteOnReceiveContract,
    this.printNoteOnReturnContract,
    this.printNoteOnInvoice,
    this.printNoteOnOrder,
    this.printNoteOnPickList,
    this.printNoteOnPO,
    this.printNoteOnQuote,
    this.printNoteOnReturnList,
    this.printNoteOnPoReceiveList,
    this.printNoteOnPoReturnList,
    this.assetAccountId,
    this.assetAccountNo,
    this.assetAccountDescription,
    this.incomeAccountId,
    this.incomeAccountNo,
    this.incomeAccountDescription,
    this.subIncomeAccountId,
    this.subIncomeAccountNo,
    this.subIncomeAccountDescription,
    this.consignmentIncomeAccountId,
    this.consignmentIncomeAccountNo,
    this.consignmentIncomeAccountDescription,
    this.ldIncomeAccountId,
    this.ldIncomeAccountNo,
    this.ldIncomeAccountDescription,
    this.equipmentSaleIncomeAccountId,
    this.equipmentSaleIncomeAccountNo,
    this.equipmentSaleIncomeAccountDescription,
    this.expenseAccountId,
    this.expenseAccountNo,
    this.expenseAccountDescription,
    this.costOfGoodsSoldExpenseAccountId,
    this.costOfGoodsSoldExpenseAccountNo,
    this.costOfGoodsSoldExpenseAccountDescription,
    this.costOfGoodsRentedExpenseAccountId,
    this.costOfGoodsRentedExpenseAccountNo,
    this.costOfGoodsRentedExpenseAccountDescription,
    this.depreciationExpenseAccountId,
    this.depreciationExpenseAccountNo,
    this.depreciationExpenseAccountDescription,
    this.accumulatedDepreciationExpenseAccountId,
    this.accumulatedDepreciationExpenseAccountNo,
    this.accumulatedDepreciationExpenseAccountDescription,
    this.originalShowId,
    this.inputDate,
    this.inputByUsersId,
    this.category2,
    this.class2,
    this.stockClass,
    this.inactive,
    this.dateStamp,
    this.manifestShippingContainer,
    this.manifestStandAloneItem,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesInventoryRentalInventoryRentalInventory.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesInventoryRentalInventoryRentalInventoryFromJson(json);

  @JsonKey(name: 'ExcludeFromReturnOnAsset', includeIfNull: false)
  final bool? excludeFromReturnOnAsset;
  @JsonKey(name: 'IsFixedAsset', includeIfNull: false)
  final bool? isFixedAsset;
  @JsonKey(name: 'MultiAssignRFIDs', includeIfNull: false)
  final bool? multiAssignRFIDs;
  @JsonKey(name: 'MinimumDaysPerWeek', includeIfNull: false)
  final double? minimumDaysPerWeek;
  @JsonKey(name: 'SetOpeningId', includeIfNull: false)
  final String? setOpeningId;
  @JsonKey(name: 'SetOpening', includeIfNull: false)
  final String? setOpening;
  @JsonKey(name: 'WallTypeId', includeIfNull: false)
  final String? wallTypeId;
  @JsonKey(name: 'WallType', includeIfNull: false)
  final String? wallType;
  @JsonKey(name: 'SetSurfaceId', includeIfNull: false)
  final String? setSurfaceId;
  @JsonKey(name: 'SetSurface', includeIfNull: false)
  final String? setSurface;
  @JsonKey(name: 'WallWidthFt', includeIfNull: false)
  final int? wallWidthFt;
  @JsonKey(name: 'WallWidthIn', includeIfNull: false)
  final int? wallWidthIn;
  @JsonKey(name: 'WallHeightFt', includeIfNull: false)
  final int? wallHeightFt;
  @JsonKey(name: 'WallHeightIn', includeIfNull: false)
  final int? wallHeightIn;
  @JsonKey(name: 'WallLengthFt', includeIfNull: false)
  final int? wallLengthFt;
  @JsonKey(name: 'WallLengthIn', includeIfNull: false)
  final int? wallLengthIn;
  @JsonKey(name: 'TreatConsignedQtyAsOwned', includeIfNull: false)
  final bool? treatConsignedQtyAsOwned;
  @JsonKey(name: 'DailyRate', includeIfNull: false)
  final double? dailyRate;
  @JsonKey(name: 'WeeklyRate', includeIfNull: false)
  final double? weeklyRate;
  @JsonKey(name: 'Week2Rate', includeIfNull: false)
  final double? week2Rate;
  @JsonKey(name: 'Week3Rate', includeIfNull: false)
  final double? week3Rate;
  @JsonKey(name: 'Week4Rate', includeIfNull: false)
  final double? week4Rate;
  @JsonKey(name: 'MonthlyRate', includeIfNull: false)
  final double? monthlyRate;
  @JsonKey(name: 'UnitValue', includeIfNull: false)
  final double? unitValue;
  @JsonKey(name: 'ReplacementCost', includeIfNull: false)
  final double? replacementCost;
  @JsonKey(name: 'SourceId', includeIfNull: false)
  final String? sourceId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'AvailableFrom', includeIfNull: false)
  final String? availableFrom;
  @JsonKey(name: 'TrackedBy', includeIfNull: false)
  final String? trackedBy;
  @JsonKey(name: 'ConfirmTrackedBy', includeIfNull: false)
  final String? confirmTrackedBy;
  @JsonKey(name: 'Rank', includeIfNull: false)
  final String? rank;
  @JsonKey(name: 'ManufacturerPartNumber', includeIfNull: false)
  final String? manufacturerPartNumber;
  @JsonKey(name: 'ManufacturerId', includeIfNull: false)
  final String? manufacturerId;
  @JsonKey(name: 'Manufacturer', includeIfNull: false)
  final String? manufacturer;
  @JsonKey(name: 'ManufacturerUrl', includeIfNull: false)
  final String? manufacturerUrl;
  @JsonKey(name: 'ExcludeImageFromQuoteOrderPrint', includeIfNull: false)
  final bool? excludeImageFromQuoteOrderPrint;
  @JsonKey(name: 'NoAvailabilityCheck', includeIfNull: false)
  final bool? noAvailabilityCheck;
  @JsonKey(name: 'AvailabilityManuallyResolveConflicts', includeIfNull: false)
  final bool? availabilityManuallyResolveConflicts;
  @JsonKey(name: 'SendAvailabilityAlert', includeIfNull: false)
  final bool? sendAvailabilityAlert;
  @JsonKey(name: 'PrimaryDimensionUniqueId', includeIfNull: false)
  final String? primaryDimensionUniqueId;
  @JsonKey(name: 'DefaultImperialMetric', includeIfNull: false)
  final String? defaultImperialMetric;
  @JsonKey(name: 'PrimaryDimensionDescription', includeIfNull: false)
  final String? primaryDimensionDescription;
  @JsonKey(name: 'PrimaryDimensionShipWeightLbs', includeIfNull: false)
  final int? primaryDimensionShipWeightLbs;
  @JsonKey(name: 'PrimaryDimensionShipWeightOz', includeIfNull: false)
  final int? primaryDimensionShipWeightOz;
  @JsonKey(name: 'PrimaryDimensionWeightInCaseLbs', includeIfNull: false)
  final int? primaryDimensionWeightInCaseLbs;
  @JsonKey(name: 'PrimaryDimensionWeightInCaseOz', includeIfNull: false)
  final int? primaryDimensionWeightInCaseOz;
  @JsonKey(name: 'PrimaryDimensionWidthFt', includeIfNull: false)
  final int? primaryDimensionWidthFt;
  @JsonKey(name: 'PrimaryDimensionWidthIn', includeIfNull: false)
  final int? primaryDimensionWidthIn;
  @JsonKey(name: 'PrimaryDimensionHeightFt', includeIfNull: false)
  final int? primaryDimensionHeightFt;
  @JsonKey(name: 'PrimaryDimensionHeightIn', includeIfNull: false)
  final int? primaryDimensionHeightIn;
  @JsonKey(name: 'PrimaryDimensionLengthFt', includeIfNull: false)
  final int? primaryDimensionLengthFt;
  @JsonKey(name: 'PrimaryDimensionLengthIn', includeIfNull: false)
  final int? primaryDimensionLengthIn;
  @JsonKey(name: 'PrimaryDimensionShipWeightKg', includeIfNull: false)
  final int? primaryDimensionShipWeightKg;
  @JsonKey(name: 'PrimaryDimensionShipWeightG', includeIfNull: false)
  final int? primaryDimensionShipWeightG;
  @JsonKey(name: 'PrimaryDimensionWeightInCaseKg', includeIfNull: false)
  final int? primaryDimensionWeightInCaseKg;
  @JsonKey(name: 'PrimaryDimensionWeightInCaseG', includeIfNull: false)
  final int? primaryDimensionWeightInCaseG;
  @JsonKey(name: 'PrimaryDimensionWidthM', includeIfNull: false)
  final int? primaryDimensionWidthM;
  @JsonKey(name: 'PrimaryDimensionWidthCm', includeIfNull: false)
  final int? primaryDimensionWidthCm;
  @JsonKey(name: 'PrimaryDimensionHeightM', includeIfNull: false)
  final int? primaryDimensionHeightM;
  @JsonKey(name: 'PrimaryDimensionHeightCm', includeIfNull: false)
  final int? primaryDimensionHeightCm;
  @JsonKey(name: 'PrimaryDimensionLengthM', includeIfNull: false)
  final int? primaryDimensionLengthM;
  @JsonKey(name: 'PrimaryDimensionLengthCm', includeIfNull: false)
  final int? primaryDimensionLengthCm;
  @JsonKey(name: 'HasSecondaryDimensions', includeIfNull: false)
  final bool? hasSecondaryDimensions;
  @JsonKey(name: 'SecondaryDimensionUniqueId', includeIfNull: false)
  final String? secondaryDimensionUniqueId;
  @JsonKey(name: 'SecondaryDimensionDescription', includeIfNull: false)
  final String? secondaryDimensionDescription;
  @JsonKey(name: 'SecondaryDimensionShipWeightLbs', includeIfNull: false)
  final int? secondaryDimensionShipWeightLbs;
  @JsonKey(name: 'SecondaryDimensionShipWeightOz', includeIfNull: false)
  final int? secondaryDimensionShipWeightOz;
  @JsonKey(name: 'SecondaryDimensionWeightInCaseLbs', includeIfNull: false)
  final int? secondaryDimensionWeightInCaseLbs;
  @JsonKey(name: 'SecondaryDimensionWeightInCaseOz', includeIfNull: false)
  final int? secondaryDimensionWeightInCaseOz;
  @JsonKey(name: 'SecondaryDimensionWidthFt', includeIfNull: false)
  final int? secondaryDimensionWidthFt;
  @JsonKey(name: 'SecondaryDimensionWidthIn', includeIfNull: false)
  final int? secondaryDimensionWidthIn;
  @JsonKey(name: 'SecondaryDimensionHeightFt', includeIfNull: false)
  final int? secondaryDimensionHeightFt;
  @JsonKey(name: 'SecondaryDimensionHeightIn', includeIfNull: false)
  final int? secondaryDimensionHeightIn;
  @JsonKey(name: 'SecondaryDimensionLengthFt', includeIfNull: false)
  final int? secondaryDimensionLengthFt;
  @JsonKey(name: 'SecondaryDimensionLengthIn', includeIfNull: false)
  final int? secondaryDimensionLengthIn;
  @JsonKey(name: 'SecondaryDimensionShipWeightKg', includeIfNull: false)
  final int? secondaryDimensionShipWeightKg;
  @JsonKey(name: 'SecondaryDimensionShipWeightG', includeIfNull: false)
  final int? secondaryDimensionShipWeightG;
  @JsonKey(name: 'SecondaryDimensionWeightInCaseKg', includeIfNull: false)
  final int? secondaryDimensionWeightInCaseKg;
  @JsonKey(name: 'SecondaryDimensionWeightInCaseG', includeIfNull: false)
  final int? secondaryDimensionWeightInCaseG;
  @JsonKey(name: 'SecondaryDimensionWidthM', includeIfNull: false)
  final int? secondaryDimensionWidthM;
  @JsonKey(name: 'SecondaryDimensionWidthCm', includeIfNull: false)
  final int? secondaryDimensionWidthCm;
  @JsonKey(name: 'SecondaryDimensionHeightM', includeIfNull: false)
  final int? secondaryDimensionHeightM;
  @JsonKey(name: 'SecondaryDimensionHeightCm', includeIfNull: false)
  final int? secondaryDimensionHeightCm;
  @JsonKey(name: 'SecondaryDimensionLengthM', includeIfNull: false)
  final int? secondaryDimensionLengthM;
  @JsonKey(name: 'SecondaryDimensionLengthCm', includeIfNull: false)
  final int? secondaryDimensionLengthCm;
  @JsonKey(name: 'CountryOfOriginId', includeIfNull: false)
  final String? countryOfOriginId;
  @JsonKey(name: 'CountryOfOrigin', includeIfNull: false)
  final String? countryOfOrigin;
  @JsonKey(name: 'DisplayInSummaryModeWhenRateIsZero', includeIfNull: false)
  final bool? displayInSummaryModeWhenRateIsZero;
  @JsonKey(name: 'QcRequired', includeIfNull: false)
  final bool? qcRequired;
  @JsonKey(name: 'QcTime', includeIfNull: false)
  final String? qcTime;
  @JsonKey(name: 'CopyAttributesAsNote', includeIfNull: false)
  final bool? copyAttributesAsNote;
  @JsonKey(name: 'TrackAssetUsage', includeIfNull: false)
  final bool? trackAssetUsage;
  @JsonKey(name: 'TrackLampUsage', includeIfNull: false)
  final bool? trackLampUsage;
  @JsonKey(name: 'TrackStrikes', includeIfNull: false)
  final bool? trackStrikes;
  @JsonKey(name: 'TrackCandles', includeIfNull: false)
  final bool? trackCandles;
  @JsonKey(name: 'LampCount', includeIfNull: false)
  final int? lampCount;
  @JsonKey(name: 'MinimumFootCandles', includeIfNull: false)
  final int? minimumFootCandles;
  @JsonKey(name: 'TrackSoftware', includeIfNull: false)
  final bool? trackSoftware;
  @JsonKey(name: 'SoftwareVersion', includeIfNull: false)
  final String? softwareVersion;
  @JsonKey(name: 'SoftwareEffectiveDate', includeIfNull: false)
  final String? softwareEffectiveDate;
  @JsonKey(name: 'WarehouseSpecificPackage', includeIfNull: false)
  final bool? warehouseSpecificPackage;
  @JsonKey(name: 'CompletePackagePrice', includeIfNull: false)
  final String? completePackagePrice;
  @JsonKey(name: 'KitPackagePrice', includeIfNull: false)
  final String? kitPackagePrice;
  @JsonKey(name: 'SeparatePackageOnQuoteOrder', includeIfNull: false)
  final bool? separatePackageOnQuoteOrder;
  @JsonKey(name: 'ContainerId', includeIfNull: false)
  final String? containerId;
  @JsonKey(name: 'ContainerScannableInventoryId', includeIfNull: false)
  final String? containerScannableInventoryId;
  @JsonKey(name: 'ContainerScannableICode', includeIfNull: false)
  final String? containerScannableICode;
  @JsonKey(name: 'ContainerScannableDescription', includeIfNull: false)
  final String? containerScannableDescription;
  @JsonKey(name: 'AutomaticallyRebuildContainerAtCheckIn', includeIfNull: false)
  final bool? automaticallyRebuildContainerAtCheckIn;
  @JsonKey(
      name: 'AutomaticallyRebuildContainerAtTransferIn', includeIfNull: false)
  final bool? automaticallyRebuildContainerAtTransferIn;
  @JsonKey(name: 'ContainerStagingRule', includeIfNull: false)
  final String? containerStagingRule;
  @JsonKey(name: 'ExcludeContainedItemsFromAvailability', includeIfNull: false)
  final bool? excludeContainedItemsFromAvailability;
  @JsonKey(name: 'UseContainerNumber', includeIfNull: false)
  final bool? useContainerNumber;
  @JsonKey(name: 'ContainerPackingListBehavior', includeIfNull: false)
  final String? containerPackingListBehavior;
  @JsonKey(name: 'InventoryTypeIsWardrobe', includeIfNull: false)
  final bool? inventoryTypeIsWardrobe;
  @JsonKey(name: 'InventoryTypeIsSets', includeIfNull: false)
  final bool? inventoryTypeIsSets;
  @JsonKey(name: 'PatternId', includeIfNull: false)
  final String? patternId;
  @JsonKey(name: 'Pattern', includeIfNull: false)
  final String? pattern;
  @JsonKey(name: 'PeriodId', includeIfNull: false)
  final String? periodId;
  @JsonKey(name: 'Period', includeIfNull: false)
  final String? period;
  @JsonKey(name: 'MaterialId', includeIfNull: false)
  final String? materialId;
  @JsonKey(name: 'Material', includeIfNull: false)
  final String? material;
  @JsonKey(name: 'GenderId', includeIfNull: false)
  final String? genderId;
  @JsonKey(name: 'Gender', includeIfNull: false)
  final String? gender;
  @JsonKey(name: 'LabelId', includeIfNull: false)
  final String? labelId;
  @JsonKey(name: 'Label', includeIfNull: false)
  final String? label;
  @JsonKey(name: 'WardrobeSize', includeIfNull: false)
  final String? wardrobeSize;
  @JsonKey(name: 'WardrobePieceCount', includeIfNull: false)
  final int? wardrobePieceCount;
  @JsonKey(name: 'Dyed', includeIfNull: false)
  final bool? dyed;
  @JsonKey(name: 'WardrobeSourceId', includeIfNull: false)
  final String? wardrobeSourceId;
  @JsonKey(name: 'WardrobeSource', includeIfNull: false)
  final String? wardrobeSource;
  @JsonKey(name: 'WardrobeCareId', includeIfNull: false)
  final String? wardrobeCareId;
  @JsonKey(name: 'WardrobeCare', includeIfNull: false)
  final String? wardrobeCare;
  @JsonKey(name: 'CleaningFeeAmount', includeIfNull: false)
  final double? cleaningFeeAmount;
  @JsonKey(name: 'WardrobeDetailedDescription', includeIfNull: false)
  final String? wardrobeDetailedDescription;
  @JsonKey(name: 'WebDetailedDescription', includeIfNull: false)
  final String? webDetailedDescription;
  @JsonKey(name: 'TechnicalNotes', includeIfNull: false)
  final String? technicalNotes;
  @JsonKey(
      name: 'OverrideSystemDefaultRevenueAllocationBehavior',
      includeIfNull: false)
  final bool? overrideSystemDefaultRevenueAllocationBehavior;
  @JsonKey(name: 'AllocateRevenueForAccessories', includeIfNull: false)
  final bool? allocateRevenueForAccessories;
  @JsonKey(name: 'PackageRevenueCalculationFormula', includeIfNull: false)
  final String? packageRevenueCalculationFormula;
  @JsonKey(name: 'IsHazardousMaterial', includeIfNull: false)
  final bool? isHazardousMaterial;
  @JsonKey(name: 'DescriptionWithAkas', includeIfNull: false)
  final String? descriptionWithAkas;
  @JsonKey(name: 'CostCalculation', includeIfNull: false)
  final String? costCalculation;
  @JsonKey(name: 'Quantity', includeIfNull: false)
  final double? quantity;
  @JsonKey(name: 'QuantityIn', includeIfNull: false)
  final double? quantityIn;
  @JsonKey(name: 'QuantityStaged', includeIfNull: false)
  final double? quantityStaged;
  @JsonKey(name: 'QuantityOut', includeIfNull: false)
  final double? quantityOut;
  @JsonKey(name: 'QuantityInContainer', includeIfNull: false)
  final double? quantityInContainer;
  @JsonKey(name: 'QuantityInRepair', includeIfNull: false)
  final double? quantityInRepair;
  @JsonKey(name: 'QuantityInTransit', includeIfNull: false)
  final double? quantityInTransit;
  @JsonKey(name: 'QuantityOnTruck', includeIfNull: false)
  final double? quantityOnTruck;
  @JsonKey(name: 'TotalQuantity', includeIfNull: false)
  final double? totalQuantity;
  @JsonKey(name: 'AisleLocation', includeIfNull: false)
  final String? aisleLocation;
  @JsonKey(name: 'ShelfLocation', includeIfNull: false)
  final String? shelfLocation;
  @JsonKey(name: 'Taxable', includeIfNull: false)
  final bool? taxable;
  @JsonKey(name: 'DateOfLastPhysicalInventory', includeIfNull: false)
  final String? dateOfLastPhysicalInventory;
  @JsonKey(name: 'HasImage', includeIfNull: false)
  final bool? hasImage;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'AvailFor', includeIfNull: false)
  final String? availFor;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'SubCategoryCount', includeIfNull: false)
  final int? subCategoryCount;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'SubCategory', includeIfNull: false)
  final String? subCategory;
  @JsonKey(name: 'Classification', includeIfNull: false)
  final String? classification;
  @JsonKey(name: 'ClassificationDescription', includeIfNull: false)
  final String? classificationDescription;
  @JsonKey(name: 'ClassificationColor', includeIfNull: false)
  final String? classificationColor;
  @JsonKey(name: 'UnitId', includeIfNull: false)
  final String? unitId;
  @JsonKey(name: 'Unit', includeIfNull: false)
  final String? unit;
  @JsonKey(name: 'UnitType', includeIfNull: false)
  final String? unitType;
  @JsonKey(name: 'NonDiscountable', includeIfNull: false)
  final bool? nonDiscountable;
  @JsonKey(name: 'OverrideProfitAndLossCategory', includeIfNull: false)
  final bool? overrideProfitAndLossCategory;
  @JsonKey(name: 'ProfitAndLossCategoryId', includeIfNull: false)
  final String? profitAndLossCategoryId;
  @JsonKey(name: 'ProfitAndLossCategory', includeIfNull: false)
  final String? profitAndLossCategory;
  @JsonKey(name: 'AutoCopyNotesToQuoteOrder', includeIfNull: false)
  final bool? autoCopyNotesToQuoteOrder;
  @JsonKey(name: 'Note', includeIfNull: false)
  final String? note;
  @JsonKey(name: 'PrintNoteOnInContract', includeIfNull: false)
  final bool? printNoteOnInContract;
  @JsonKey(name: 'PrintNoteOnOutContract', includeIfNull: false)
  final bool? printNoteOnOutContract;
  @JsonKey(name: 'PrintNoteOnReceiveContract', includeIfNull: false)
  final bool? printNoteOnReceiveContract;
  @JsonKey(name: 'PrintNoteOnReturnContract', includeIfNull: false)
  final bool? printNoteOnReturnContract;
  @JsonKey(name: 'PrintNoteOnInvoice', includeIfNull: false)
  final bool? printNoteOnInvoice;
  @JsonKey(name: 'PrintNoteOnOrder', includeIfNull: false)
  final bool? printNoteOnOrder;
  @JsonKey(name: 'PrintNoteOnPickList', includeIfNull: false)
  final bool? printNoteOnPickList;
  @JsonKey(name: 'PrintNoteOnPO', includeIfNull: false)
  final bool? printNoteOnPO;
  @JsonKey(name: 'PrintNoteOnQuote', includeIfNull: false)
  final bool? printNoteOnQuote;
  @JsonKey(name: 'PrintNoteOnReturnList', includeIfNull: false)
  final bool? printNoteOnReturnList;
  @JsonKey(name: 'PrintNoteOnPoReceiveList', includeIfNull: false)
  final bool? printNoteOnPoReceiveList;
  @JsonKey(name: 'PrintNoteOnPoReturnList', includeIfNull: false)
  final bool? printNoteOnPoReturnList;
  @JsonKey(name: 'AssetAccountId', includeIfNull: false)
  final String? assetAccountId;
  @JsonKey(name: 'AssetAccountNo', includeIfNull: false)
  final String? assetAccountNo;
  @JsonKey(name: 'AssetAccountDescription', includeIfNull: false)
  final String? assetAccountDescription;
  @JsonKey(name: 'IncomeAccountId', includeIfNull: false)
  final String? incomeAccountId;
  @JsonKey(name: 'IncomeAccountNo', includeIfNull: false)
  final String? incomeAccountNo;
  @JsonKey(name: 'IncomeAccountDescription', includeIfNull: false)
  final String? incomeAccountDescription;
  @JsonKey(name: 'SubIncomeAccountId', includeIfNull: false)
  final String? subIncomeAccountId;
  @JsonKey(name: 'SubIncomeAccountNo', includeIfNull: false)
  final String? subIncomeAccountNo;
  @JsonKey(name: 'SubIncomeAccountDescription', includeIfNull: false)
  final String? subIncomeAccountDescription;
  @JsonKey(name: 'ConsignmentIncomeAccountId', includeIfNull: false)
  final String? consignmentIncomeAccountId;
  @JsonKey(name: 'ConsignmentIncomeAccountNo', includeIfNull: false)
  final String? consignmentIncomeAccountNo;
  @JsonKey(name: 'ConsignmentIncomeAccountDescription', includeIfNull: false)
  final String? consignmentIncomeAccountDescription;
  @JsonKey(name: 'LdIncomeAccountId', includeIfNull: false)
  final String? ldIncomeAccountId;
  @JsonKey(name: 'LdIncomeAccountNo', includeIfNull: false)
  final String? ldIncomeAccountNo;
  @JsonKey(name: 'LdIncomeAccountDescription', includeIfNull: false)
  final String? ldIncomeAccountDescription;
  @JsonKey(name: 'EquipmentSaleIncomeAccountId', includeIfNull: false)
  final String? equipmentSaleIncomeAccountId;
  @JsonKey(name: 'EquipmentSaleIncomeAccountNo', includeIfNull: false)
  final String? equipmentSaleIncomeAccountNo;
  @JsonKey(name: 'EquipmentSaleIncomeAccountDescription', includeIfNull: false)
  final String? equipmentSaleIncomeAccountDescription;
  @JsonKey(name: 'ExpenseAccountId', includeIfNull: false)
  final String? expenseAccountId;
  @JsonKey(name: 'ExpenseAccountNo', includeIfNull: false)
  final String? expenseAccountNo;
  @JsonKey(name: 'ExpenseAccountDescription', includeIfNull: false)
  final String? expenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsSoldExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsSoldExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsSoldExpenseAccountDescription;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountId', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountId;
  @JsonKey(name: 'CostOfGoodsRentedExpenseAccountNo', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountNo;
  @JsonKey(
      name: 'CostOfGoodsRentedExpenseAccountDescription', includeIfNull: false)
  final String? costOfGoodsRentedExpenseAccountDescription;
  @JsonKey(name: 'DepreciationExpenseAccountId', includeIfNull: false)
  final String? depreciationExpenseAccountId;
  @JsonKey(name: 'DepreciationExpenseAccountNo', includeIfNull: false)
  final String? depreciationExpenseAccountNo;
  @JsonKey(name: 'DepreciationExpenseAccountDescription', includeIfNull: false)
  final String? depreciationExpenseAccountDescription;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountId', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountId;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountNo', includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountNo;
  @JsonKey(
      name: 'AccumulatedDepreciationExpenseAccountDescription',
      includeIfNull: false)
  final String? accumulatedDepreciationExpenseAccountDescription;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(name: 'InputDate', includeIfNull: false)
  final String? inputDate;
  @JsonKey(name: 'InputByUsersId', includeIfNull: false)
  final String? inputByUsersId;
  @JsonKey(name: 'Category2', includeIfNull: false)
  final String? category2;
  @JsonKey(name: 'Class2', includeIfNull: false)
  final String? class2;
  @JsonKey(name: 'StockClass', includeIfNull: false)
  final String? stockClass;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'ManifestShippingContainer', includeIfNull: false)
  final bool? manifestShippingContainer;
  @JsonKey(name: 'ManifestStandAloneItem', includeIfNull: false)
  final bool? manifestStandAloneItem;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesInventoryRentalInventoryRentalInventoryFromJson;
  static const toJsonFactory =
      _$WebApiModulesInventoryRentalInventoryRentalInventoryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesInventoryRentalInventoryRentalInventoryToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesInventoryRentalInventoryRentalInventory &&
            (identical(other.excludeFromReturnOnAsset, excludeFromReturnOnAsset) ||
                const DeepCollectionEquality().equals(
                    other.excludeFromReturnOnAsset,
                    excludeFromReturnOnAsset)) &&
            (identical(other.isFixedAsset, isFixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.isFixedAsset, isFixedAsset)) &&
            (identical(other.multiAssignRFIDs, multiAssignRFIDs) ||
                const DeepCollectionEquality()
                    .equals(other.multiAssignRFIDs, multiAssignRFIDs)) &&
            (identical(other.minimumDaysPerWeek, minimumDaysPerWeek) ||
                const DeepCollectionEquality()
                    .equals(other.minimumDaysPerWeek, minimumDaysPerWeek)) &&
            (identical(other.setOpeningId, setOpeningId) ||
                const DeepCollectionEquality()
                    .equals(other.setOpeningId, setOpeningId)) &&
            (identical(other.setOpening, setOpening) ||
                const DeepCollectionEquality()
                    .equals(other.setOpening, setOpening)) &&
            (identical(other.wallTypeId, wallTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.wallTypeId, wallTypeId)) &&
            (identical(other.wallType, wallType) ||
                const DeepCollectionEquality()
                    .equals(other.wallType, wallType)) &&
            (identical(other.setSurfaceId, setSurfaceId) ||
                const DeepCollectionEquality()
                    .equals(other.setSurfaceId, setSurfaceId)) &&
            (identical(other.setSurface, setSurface) ||
                const DeepCollectionEquality()
                    .equals(other.setSurface, setSurface)) &&
            (identical(other.wallWidthFt, wallWidthFt) ||
                const DeepCollectionEquality()
                    .equals(other.wallWidthFt, wallWidthFt)) &&
            (identical(other.wallWidthIn, wallWidthIn) ||
                const DeepCollectionEquality()
                    .equals(other.wallWidthIn, wallWidthIn)) &&
            (identical(other.wallHeightFt, wallHeightFt) ||
                const DeepCollectionEquality()
                    .equals(other.wallHeightFt, wallHeightFt)) &&
            (identical(other.wallHeightIn, wallHeightIn) ||
                const DeepCollectionEquality()
                    .equals(other.wallHeightIn, wallHeightIn)) &&
            (identical(other.wallLengthFt, wallLengthFt) ||
                const DeepCollectionEquality()
                    .equals(other.wallLengthFt, wallLengthFt)) &&
            (identical(other.wallLengthIn, wallLengthIn) ||
                const DeepCollectionEquality()
                    .equals(other.wallLengthIn, wallLengthIn)) &&
            (identical(other.treatConsignedQtyAsOwned, treatConsignedQtyAsOwned) || const DeepCollectionEquality().equals(other.treatConsignedQtyAsOwned, treatConsignedQtyAsOwned)) &&
            (identical(other.dailyRate, dailyRate) || const DeepCollectionEquality().equals(other.dailyRate, dailyRate)) &&
            (identical(other.weeklyRate, weeklyRate) || const DeepCollectionEquality().equals(other.weeklyRate, weeklyRate)) &&
            (identical(other.week2Rate, week2Rate) || const DeepCollectionEquality().equals(other.week2Rate, week2Rate)) &&
            (identical(other.week3Rate, week3Rate) || const DeepCollectionEquality().equals(other.week3Rate, week3Rate)) &&
            (identical(other.week4Rate, week4Rate) || const DeepCollectionEquality().equals(other.week4Rate, week4Rate)) &&
            (identical(other.monthlyRate, monthlyRate) || const DeepCollectionEquality().equals(other.monthlyRate, monthlyRate)) &&
            (identical(other.unitValue, unitValue) || const DeepCollectionEquality().equals(other.unitValue, unitValue)) &&
            (identical(other.replacementCost, replacementCost) || const DeepCollectionEquality().equals(other.replacementCost, replacementCost)) &&
            (identical(other.sourceId, sourceId) || const DeepCollectionEquality().equals(other.sourceId, sourceId)) &&
            (identical(other.inventoryId, inventoryId) || const DeepCollectionEquality().equals(other.inventoryId, inventoryId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) || const DeepCollectionEquality().equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) || const DeepCollectionEquality().equals(other.inventoryType, inventoryType)) &&
            (identical(other.availableFrom, availableFrom) || const DeepCollectionEquality().equals(other.availableFrom, availableFrom)) &&
            (identical(other.trackedBy, trackedBy) || const DeepCollectionEquality().equals(other.trackedBy, trackedBy)) &&
            (identical(other.confirmTrackedBy, confirmTrackedBy) || const DeepCollectionEquality().equals(other.confirmTrackedBy, confirmTrackedBy)) &&
            (identical(other.rank, rank) || const DeepCollectionEquality().equals(other.rank, rank)) &&
            (identical(other.manufacturerPartNumber, manufacturerPartNumber) || const DeepCollectionEquality().equals(other.manufacturerPartNumber, manufacturerPartNumber)) &&
            (identical(other.manufacturerId, manufacturerId) || const DeepCollectionEquality().equals(other.manufacturerId, manufacturerId)) &&
            (identical(other.manufacturer, manufacturer) || const DeepCollectionEquality().equals(other.manufacturer, manufacturer)) &&
            (identical(other.manufacturerUrl, manufacturerUrl) || const DeepCollectionEquality().equals(other.manufacturerUrl, manufacturerUrl)) &&
            (identical(other.excludeImageFromQuoteOrderPrint, excludeImageFromQuoteOrderPrint) || const DeepCollectionEquality().equals(other.excludeImageFromQuoteOrderPrint, excludeImageFromQuoteOrderPrint)) &&
            (identical(other.noAvailabilityCheck, noAvailabilityCheck) || const DeepCollectionEquality().equals(other.noAvailabilityCheck, noAvailabilityCheck)) &&
            (identical(other.availabilityManuallyResolveConflicts, availabilityManuallyResolveConflicts) || const DeepCollectionEquality().equals(other.availabilityManuallyResolveConflicts, availabilityManuallyResolveConflicts)) &&
            (identical(other.sendAvailabilityAlert, sendAvailabilityAlert) || const DeepCollectionEquality().equals(other.sendAvailabilityAlert, sendAvailabilityAlert)) &&
            (identical(other.primaryDimensionUniqueId, primaryDimensionUniqueId) || const DeepCollectionEquality().equals(other.primaryDimensionUniqueId, primaryDimensionUniqueId)) &&
            (identical(other.defaultImperialMetric, defaultImperialMetric) || const DeepCollectionEquality().equals(other.defaultImperialMetric, defaultImperialMetric)) &&
            (identical(other.primaryDimensionDescription, primaryDimensionDescription) || const DeepCollectionEquality().equals(other.primaryDimensionDescription, primaryDimensionDescription)) &&
            (identical(other.primaryDimensionShipWeightLbs, primaryDimensionShipWeightLbs) || const DeepCollectionEquality().equals(other.primaryDimensionShipWeightLbs, primaryDimensionShipWeightLbs)) &&
            (identical(other.primaryDimensionShipWeightOz, primaryDimensionShipWeightOz) || const DeepCollectionEquality().equals(other.primaryDimensionShipWeightOz, primaryDimensionShipWeightOz)) &&
            (identical(other.primaryDimensionWeightInCaseLbs, primaryDimensionWeightInCaseLbs) || const DeepCollectionEquality().equals(other.primaryDimensionWeightInCaseLbs, primaryDimensionWeightInCaseLbs)) &&
            (identical(other.primaryDimensionWeightInCaseOz, primaryDimensionWeightInCaseOz) || const DeepCollectionEquality().equals(other.primaryDimensionWeightInCaseOz, primaryDimensionWeightInCaseOz)) &&
            (identical(other.primaryDimensionWidthFt, primaryDimensionWidthFt) || const DeepCollectionEquality().equals(other.primaryDimensionWidthFt, primaryDimensionWidthFt)) &&
            (identical(other.primaryDimensionWidthIn, primaryDimensionWidthIn) || const DeepCollectionEquality().equals(other.primaryDimensionWidthIn, primaryDimensionWidthIn)) &&
            (identical(other.primaryDimensionHeightFt, primaryDimensionHeightFt) || const DeepCollectionEquality().equals(other.primaryDimensionHeightFt, primaryDimensionHeightFt)) &&
            (identical(other.primaryDimensionHeightIn, primaryDimensionHeightIn) || const DeepCollectionEquality().equals(other.primaryDimensionHeightIn, primaryDimensionHeightIn)) &&
            (identical(other.primaryDimensionLengthFt, primaryDimensionLengthFt) || const DeepCollectionEquality().equals(other.primaryDimensionLengthFt, primaryDimensionLengthFt)) &&
            (identical(other.primaryDimensionLengthIn, primaryDimensionLengthIn) || const DeepCollectionEquality().equals(other.primaryDimensionLengthIn, primaryDimensionLengthIn)) &&
            (identical(other.primaryDimensionShipWeightKg, primaryDimensionShipWeightKg) || const DeepCollectionEquality().equals(other.primaryDimensionShipWeightKg, primaryDimensionShipWeightKg)) &&
            (identical(other.primaryDimensionShipWeightG, primaryDimensionShipWeightG) || const DeepCollectionEquality().equals(other.primaryDimensionShipWeightG, primaryDimensionShipWeightG)) &&
            (identical(other.primaryDimensionWeightInCaseKg, primaryDimensionWeightInCaseKg) || const DeepCollectionEquality().equals(other.primaryDimensionWeightInCaseKg, primaryDimensionWeightInCaseKg)) &&
            (identical(other.primaryDimensionWeightInCaseG, primaryDimensionWeightInCaseG) || const DeepCollectionEquality().equals(other.primaryDimensionWeightInCaseG, primaryDimensionWeightInCaseG)) &&
            (identical(other.primaryDimensionWidthM, primaryDimensionWidthM) || const DeepCollectionEquality().equals(other.primaryDimensionWidthM, primaryDimensionWidthM)) &&
            (identical(other.primaryDimensionWidthCm, primaryDimensionWidthCm) || const DeepCollectionEquality().equals(other.primaryDimensionWidthCm, primaryDimensionWidthCm)) &&
            (identical(other.primaryDimensionHeightM, primaryDimensionHeightM) || const DeepCollectionEquality().equals(other.primaryDimensionHeightM, primaryDimensionHeightM)) &&
            (identical(other.primaryDimensionHeightCm, primaryDimensionHeightCm) || const DeepCollectionEquality().equals(other.primaryDimensionHeightCm, primaryDimensionHeightCm)) &&
            (identical(other.primaryDimensionLengthM, primaryDimensionLengthM) || const DeepCollectionEquality().equals(other.primaryDimensionLengthM, primaryDimensionLengthM)) &&
            (identical(other.primaryDimensionLengthCm, primaryDimensionLengthCm) || const DeepCollectionEquality().equals(other.primaryDimensionLengthCm, primaryDimensionLengthCm)) &&
            (identical(other.hasSecondaryDimensions, hasSecondaryDimensions) || const DeepCollectionEquality().equals(other.hasSecondaryDimensions, hasSecondaryDimensions)) &&
            (identical(other.secondaryDimensionUniqueId, secondaryDimensionUniqueId) || const DeepCollectionEquality().equals(other.secondaryDimensionUniqueId, secondaryDimensionUniqueId)) &&
            (identical(other.secondaryDimensionDescription, secondaryDimensionDescription) || const DeepCollectionEquality().equals(other.secondaryDimensionDescription, secondaryDimensionDescription)) &&
            (identical(other.secondaryDimensionShipWeightLbs, secondaryDimensionShipWeightLbs) || const DeepCollectionEquality().equals(other.secondaryDimensionShipWeightLbs, secondaryDimensionShipWeightLbs)) &&
            (identical(other.secondaryDimensionShipWeightOz, secondaryDimensionShipWeightOz) || const DeepCollectionEquality().equals(other.secondaryDimensionShipWeightOz, secondaryDimensionShipWeightOz)) &&
            (identical(other.secondaryDimensionWeightInCaseLbs, secondaryDimensionWeightInCaseLbs) || const DeepCollectionEquality().equals(other.secondaryDimensionWeightInCaseLbs, secondaryDimensionWeightInCaseLbs)) &&
            (identical(other.secondaryDimensionWeightInCaseOz, secondaryDimensionWeightInCaseOz) || const DeepCollectionEquality().equals(other.secondaryDimensionWeightInCaseOz, secondaryDimensionWeightInCaseOz)) &&
            (identical(other.secondaryDimensionWidthFt, secondaryDimensionWidthFt) || const DeepCollectionEquality().equals(other.secondaryDimensionWidthFt, secondaryDimensionWidthFt)) &&
            (identical(other.secondaryDimensionWidthIn, secondaryDimensionWidthIn) || const DeepCollectionEquality().equals(other.secondaryDimensionWidthIn, secondaryDimensionWidthIn)) &&
            (identical(other.secondaryDimensionHeightFt, secondaryDimensionHeightFt) || const DeepCollectionEquality().equals(other.secondaryDimensionHeightFt, secondaryDimensionHeightFt)) &&
            (identical(other.secondaryDimensionHeightIn, secondaryDimensionHeightIn) || const DeepCollectionEquality().equals(other.secondaryDimensionHeightIn, secondaryDimensionHeightIn)) &&
            (identical(other.secondaryDimensionLengthFt, secondaryDimensionLengthFt) || const DeepCollectionEquality().equals(other.secondaryDimensionLengthFt, secondaryDimensionLengthFt)) &&
            (identical(other.secondaryDimensionLengthIn, secondaryDimensionLengthIn) || const DeepCollectionEquality().equals(other.secondaryDimensionLengthIn, secondaryDimensionLengthIn)) &&
            (identical(other.secondaryDimensionShipWeightKg, secondaryDimensionShipWeightKg) || const DeepCollectionEquality().equals(other.secondaryDimensionShipWeightKg, secondaryDimensionShipWeightKg)) &&
            (identical(other.secondaryDimensionShipWeightG, secondaryDimensionShipWeightG) || const DeepCollectionEquality().equals(other.secondaryDimensionShipWeightG, secondaryDimensionShipWeightG)) &&
            (identical(other.secondaryDimensionWeightInCaseKg, secondaryDimensionWeightInCaseKg) || const DeepCollectionEquality().equals(other.secondaryDimensionWeightInCaseKg, secondaryDimensionWeightInCaseKg)) &&
            (identical(other.secondaryDimensionWeightInCaseG, secondaryDimensionWeightInCaseG) || const DeepCollectionEquality().equals(other.secondaryDimensionWeightInCaseG, secondaryDimensionWeightInCaseG)) &&
            (identical(other.secondaryDimensionWidthM, secondaryDimensionWidthM) || const DeepCollectionEquality().equals(other.secondaryDimensionWidthM, secondaryDimensionWidthM)) &&
            (identical(other.secondaryDimensionWidthCm, secondaryDimensionWidthCm) || const DeepCollectionEquality().equals(other.secondaryDimensionWidthCm, secondaryDimensionWidthCm)) &&
            (identical(other.secondaryDimensionHeightM, secondaryDimensionHeightM) || const DeepCollectionEquality().equals(other.secondaryDimensionHeightM, secondaryDimensionHeightM)) &&
            (identical(other.secondaryDimensionHeightCm, secondaryDimensionHeightCm) || const DeepCollectionEquality().equals(other.secondaryDimensionHeightCm, secondaryDimensionHeightCm)) &&
            (identical(other.secondaryDimensionLengthM, secondaryDimensionLengthM) || const DeepCollectionEquality().equals(other.secondaryDimensionLengthM, secondaryDimensionLengthM)) &&
            (identical(other.secondaryDimensionLengthCm, secondaryDimensionLengthCm) || const DeepCollectionEquality().equals(other.secondaryDimensionLengthCm, secondaryDimensionLengthCm)) &&
            (identical(other.countryOfOriginId, countryOfOriginId) || const DeepCollectionEquality().equals(other.countryOfOriginId, countryOfOriginId)) &&
            (identical(other.countryOfOrigin, countryOfOrigin) || const DeepCollectionEquality().equals(other.countryOfOrigin, countryOfOrigin)) &&
            (identical(other.displayInSummaryModeWhenRateIsZero, displayInSummaryModeWhenRateIsZero) || const DeepCollectionEquality().equals(other.displayInSummaryModeWhenRateIsZero, displayInSummaryModeWhenRateIsZero)) &&
            (identical(other.qcRequired, qcRequired) || const DeepCollectionEquality().equals(other.qcRequired, qcRequired)) &&
            (identical(other.qcTime, qcTime) || const DeepCollectionEquality().equals(other.qcTime, qcTime)) &&
            (identical(other.copyAttributesAsNote, copyAttributesAsNote) || const DeepCollectionEquality().equals(other.copyAttributesAsNote, copyAttributesAsNote)) &&
            (identical(other.trackAssetUsage, trackAssetUsage) || const DeepCollectionEquality().equals(other.trackAssetUsage, trackAssetUsage)) &&
            (identical(other.trackLampUsage, trackLampUsage) || const DeepCollectionEquality().equals(other.trackLampUsage, trackLampUsage)) &&
            (identical(other.trackStrikes, trackStrikes) || const DeepCollectionEquality().equals(other.trackStrikes, trackStrikes)) &&
            (identical(other.trackCandles, trackCandles) || const DeepCollectionEquality().equals(other.trackCandles, trackCandles)) &&
            (identical(other.lampCount, lampCount) || const DeepCollectionEquality().equals(other.lampCount, lampCount)) &&
            (identical(other.minimumFootCandles, minimumFootCandles) || const DeepCollectionEquality().equals(other.minimumFootCandles, minimumFootCandles)) &&
            (identical(other.trackSoftware, trackSoftware) || const DeepCollectionEquality().equals(other.trackSoftware, trackSoftware)) &&
            (identical(other.softwareVersion, softwareVersion) || const DeepCollectionEquality().equals(other.softwareVersion, softwareVersion)) &&
            (identical(other.softwareEffectiveDate, softwareEffectiveDate) || const DeepCollectionEquality().equals(other.softwareEffectiveDate, softwareEffectiveDate)) &&
            (identical(other.warehouseSpecificPackage, warehouseSpecificPackage) || const DeepCollectionEquality().equals(other.warehouseSpecificPackage, warehouseSpecificPackage)) &&
            (identical(other.completePackagePrice, completePackagePrice) || const DeepCollectionEquality().equals(other.completePackagePrice, completePackagePrice)) &&
            (identical(other.kitPackagePrice, kitPackagePrice) || const DeepCollectionEquality().equals(other.kitPackagePrice, kitPackagePrice)) &&
            (identical(other.separatePackageOnQuoteOrder, separatePackageOnQuoteOrder) || const DeepCollectionEquality().equals(other.separatePackageOnQuoteOrder, separatePackageOnQuoteOrder)) &&
            (identical(other.containerId, containerId) || const DeepCollectionEquality().equals(other.containerId, containerId)) &&
            (identical(other.containerScannableInventoryId, containerScannableInventoryId) || const DeepCollectionEquality().equals(other.containerScannableInventoryId, containerScannableInventoryId)) &&
            (identical(other.containerScannableICode, containerScannableICode) || const DeepCollectionEquality().equals(other.containerScannableICode, containerScannableICode)) &&
            (identical(other.containerScannableDescription, containerScannableDescription) || const DeepCollectionEquality().equals(other.containerScannableDescription, containerScannableDescription)) &&
            (identical(other.automaticallyRebuildContainerAtCheckIn, automaticallyRebuildContainerAtCheckIn) || const DeepCollectionEquality().equals(other.automaticallyRebuildContainerAtCheckIn, automaticallyRebuildContainerAtCheckIn)) &&
            (identical(other.automaticallyRebuildContainerAtTransferIn, automaticallyRebuildContainerAtTransferIn) || const DeepCollectionEquality().equals(other.automaticallyRebuildContainerAtTransferIn, automaticallyRebuildContainerAtTransferIn)) &&
            (identical(other.containerStagingRule, containerStagingRule) || const DeepCollectionEquality().equals(other.containerStagingRule, containerStagingRule)) &&
            (identical(other.excludeContainedItemsFromAvailability, excludeContainedItemsFromAvailability) || const DeepCollectionEquality().equals(other.excludeContainedItemsFromAvailability, excludeContainedItemsFromAvailability)) &&
            (identical(other.useContainerNumber, useContainerNumber) || const DeepCollectionEquality().equals(other.useContainerNumber, useContainerNumber)) &&
            (identical(other.containerPackingListBehavior, containerPackingListBehavior) || const DeepCollectionEquality().equals(other.containerPackingListBehavior, containerPackingListBehavior)) &&
            (identical(other.inventoryTypeIsWardrobe, inventoryTypeIsWardrobe) || const DeepCollectionEquality().equals(other.inventoryTypeIsWardrobe, inventoryTypeIsWardrobe)) &&
            (identical(other.inventoryTypeIsSets, inventoryTypeIsSets) || const DeepCollectionEquality().equals(other.inventoryTypeIsSets, inventoryTypeIsSets)) &&
            (identical(other.patternId, patternId) || const DeepCollectionEquality().equals(other.patternId, patternId)) &&
            (identical(other.pattern, pattern) || const DeepCollectionEquality().equals(other.pattern, pattern)) &&
            (identical(other.periodId, periodId) || const DeepCollectionEquality().equals(other.periodId, periodId)) &&
            (identical(other.period, period) || const DeepCollectionEquality().equals(other.period, period)) &&
            (identical(other.materialId, materialId) || const DeepCollectionEquality().equals(other.materialId, materialId)) &&
            (identical(other.material, material) || const DeepCollectionEquality().equals(other.material, material)) &&
            (identical(other.genderId, genderId) || const DeepCollectionEquality().equals(other.genderId, genderId)) &&
            (identical(other.gender, gender) || const DeepCollectionEquality().equals(other.gender, gender)) &&
            (identical(other.labelId, labelId) || const DeepCollectionEquality().equals(other.labelId, labelId)) &&
            (identical(other.label, label) || const DeepCollectionEquality().equals(other.label, label)) &&
            (identical(other.wardrobeSize, wardrobeSize) || const DeepCollectionEquality().equals(other.wardrobeSize, wardrobeSize)) &&
            (identical(other.wardrobePieceCount, wardrobePieceCount) || const DeepCollectionEquality().equals(other.wardrobePieceCount, wardrobePieceCount)) &&
            (identical(other.dyed, dyed) || const DeepCollectionEquality().equals(other.dyed, dyed)) &&
            (identical(other.wardrobeSourceId, wardrobeSourceId) || const DeepCollectionEquality().equals(other.wardrobeSourceId, wardrobeSourceId)) &&
            (identical(other.wardrobeSource, wardrobeSource) || const DeepCollectionEquality().equals(other.wardrobeSource, wardrobeSource)) &&
            (identical(other.wardrobeCareId, wardrobeCareId) || const DeepCollectionEquality().equals(other.wardrobeCareId, wardrobeCareId)) &&
            (identical(other.wardrobeCare, wardrobeCare) || const DeepCollectionEquality().equals(other.wardrobeCare, wardrobeCare)) &&
            (identical(other.cleaningFeeAmount, cleaningFeeAmount) || const DeepCollectionEquality().equals(other.cleaningFeeAmount, cleaningFeeAmount)) &&
            (identical(other.wardrobeDetailedDescription, wardrobeDetailedDescription) || const DeepCollectionEquality().equals(other.wardrobeDetailedDescription, wardrobeDetailedDescription)) &&
            (identical(other.webDetailedDescription, webDetailedDescription) || const DeepCollectionEquality().equals(other.webDetailedDescription, webDetailedDescription)) &&
            (identical(other.technicalNotes, technicalNotes) || const DeepCollectionEquality().equals(other.technicalNotes, technicalNotes)) &&
            (identical(other.overrideSystemDefaultRevenueAllocationBehavior, overrideSystemDefaultRevenueAllocationBehavior) || const DeepCollectionEquality().equals(other.overrideSystemDefaultRevenueAllocationBehavior, overrideSystemDefaultRevenueAllocationBehavior)) &&
            (identical(other.allocateRevenueForAccessories, allocateRevenueForAccessories) || const DeepCollectionEquality().equals(other.allocateRevenueForAccessories, allocateRevenueForAccessories)) &&
            (identical(other.packageRevenueCalculationFormula, packageRevenueCalculationFormula) || const DeepCollectionEquality().equals(other.packageRevenueCalculationFormula, packageRevenueCalculationFormula)) &&
            (identical(other.isHazardousMaterial, isHazardousMaterial) || const DeepCollectionEquality().equals(other.isHazardousMaterial, isHazardousMaterial)) &&
            (identical(other.descriptionWithAkas, descriptionWithAkas) || const DeepCollectionEquality().equals(other.descriptionWithAkas, descriptionWithAkas)) &&
            (identical(other.costCalculation, costCalculation) || const DeepCollectionEquality().equals(other.costCalculation, costCalculation)) &&
            (identical(other.quantity, quantity) || const DeepCollectionEquality().equals(other.quantity, quantity)) &&
            (identical(other.quantityIn, quantityIn) || const DeepCollectionEquality().equals(other.quantityIn, quantityIn)) &&
            (identical(other.quantityStaged, quantityStaged) || const DeepCollectionEquality().equals(other.quantityStaged, quantityStaged)) &&
            (identical(other.quantityOut, quantityOut) || const DeepCollectionEquality().equals(other.quantityOut, quantityOut)) &&
            (identical(other.quantityInContainer, quantityInContainer) || const DeepCollectionEquality().equals(other.quantityInContainer, quantityInContainer)) &&
            (identical(other.quantityInRepair, quantityInRepair) || const DeepCollectionEquality().equals(other.quantityInRepair, quantityInRepair)) &&
            (identical(other.quantityInTransit, quantityInTransit) || const DeepCollectionEquality().equals(other.quantityInTransit, quantityInTransit)) &&
            (identical(other.quantityOnTruck, quantityOnTruck) || const DeepCollectionEquality().equals(other.quantityOnTruck, quantityOnTruck)) &&
            (identical(other.totalQuantity, totalQuantity) || const DeepCollectionEquality().equals(other.totalQuantity, totalQuantity)) &&
            (identical(other.aisleLocation, aisleLocation) || const DeepCollectionEquality().equals(other.aisleLocation, aisleLocation)) &&
            (identical(other.shelfLocation, shelfLocation) || const DeepCollectionEquality().equals(other.shelfLocation, shelfLocation)) &&
            (identical(other.taxable, taxable) || const DeepCollectionEquality().equals(other.taxable, taxable)) &&
            (identical(other.dateOfLastPhysicalInventory, dateOfLastPhysicalInventory) || const DeepCollectionEquality().equals(other.dateOfLastPhysicalInventory, dateOfLastPhysicalInventory)) &&
            (identical(other.hasImage, hasImage) || const DeepCollectionEquality().equals(other.hasImage, hasImage)) &&
            (identical(other.iCode, iCode) || const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) || const DeepCollectionEquality().equals(other.description, description)) &&
            (identical(other.availFor, availFor) || const DeepCollectionEquality().equals(other.availFor, availFor)) &&
            (identical(other.categoryId, categoryId) || const DeepCollectionEquality().equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) || const DeepCollectionEquality().equals(other.category, category)) &&
            (identical(other.subCategoryCount, subCategoryCount) || const DeepCollectionEquality().equals(other.subCategoryCount, subCategoryCount)) &&
            (identical(other.subCategoryId, subCategoryId) || const DeepCollectionEquality().equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.subCategory, subCategory) || const DeepCollectionEquality().equals(other.subCategory, subCategory)) &&
            (identical(other.classification, classification) || const DeepCollectionEquality().equals(other.classification, classification)) &&
            (identical(other.classificationDescription, classificationDescription) || const DeepCollectionEquality().equals(other.classificationDescription, classificationDescription)) &&
            (identical(other.classificationColor, classificationColor) || const DeepCollectionEquality().equals(other.classificationColor, classificationColor)) &&
            (identical(other.unitId, unitId) || const DeepCollectionEquality().equals(other.unitId, unitId)) &&
            (identical(other.unit, unit) || const DeepCollectionEquality().equals(other.unit, unit)) &&
            (identical(other.unitType, unitType) || const DeepCollectionEquality().equals(other.unitType, unitType)) &&
            (identical(other.nonDiscountable, nonDiscountable) || const DeepCollectionEquality().equals(other.nonDiscountable, nonDiscountable)) &&
            (identical(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory) || const DeepCollectionEquality().equals(other.overrideProfitAndLossCategory, overrideProfitAndLossCategory)) &&
            (identical(other.profitAndLossCategoryId, profitAndLossCategoryId) || const DeepCollectionEquality().equals(other.profitAndLossCategoryId, profitAndLossCategoryId)) &&
            (identical(other.profitAndLossCategory, profitAndLossCategory) || const DeepCollectionEquality().equals(other.profitAndLossCategory, profitAndLossCategory)) &&
            (identical(other.autoCopyNotesToQuoteOrder, autoCopyNotesToQuoteOrder) || const DeepCollectionEquality().equals(other.autoCopyNotesToQuoteOrder, autoCopyNotesToQuoteOrder)) &&
            (identical(other.note, note) || const DeepCollectionEquality().equals(other.note, note)) &&
            (identical(other.printNoteOnInContract, printNoteOnInContract) || const DeepCollectionEquality().equals(other.printNoteOnInContract, printNoteOnInContract)) &&
            (identical(other.printNoteOnOutContract, printNoteOnOutContract) || const DeepCollectionEquality().equals(other.printNoteOnOutContract, printNoteOnOutContract)) &&
            (identical(other.printNoteOnReceiveContract, printNoteOnReceiveContract) || const DeepCollectionEquality().equals(other.printNoteOnReceiveContract, printNoteOnReceiveContract)) &&
            (identical(other.printNoteOnReturnContract, printNoteOnReturnContract) || const DeepCollectionEquality().equals(other.printNoteOnReturnContract, printNoteOnReturnContract)) &&
            (identical(other.printNoteOnInvoice, printNoteOnInvoice) || const DeepCollectionEquality().equals(other.printNoteOnInvoice, printNoteOnInvoice)) &&
            (identical(other.printNoteOnOrder, printNoteOnOrder) || const DeepCollectionEquality().equals(other.printNoteOnOrder, printNoteOnOrder)) &&
            (identical(other.printNoteOnPickList, printNoteOnPickList) || const DeepCollectionEquality().equals(other.printNoteOnPickList, printNoteOnPickList)) &&
            (identical(other.printNoteOnPO, printNoteOnPO) || const DeepCollectionEquality().equals(other.printNoteOnPO, printNoteOnPO)) &&
            (identical(other.printNoteOnQuote, printNoteOnQuote) || const DeepCollectionEquality().equals(other.printNoteOnQuote, printNoteOnQuote)) &&
            (identical(other.printNoteOnReturnList, printNoteOnReturnList) || const DeepCollectionEquality().equals(other.printNoteOnReturnList, printNoteOnReturnList)) &&
            (identical(other.printNoteOnPoReceiveList, printNoteOnPoReceiveList) || const DeepCollectionEquality().equals(other.printNoteOnPoReceiveList, printNoteOnPoReceiveList)) &&
            (identical(other.printNoteOnPoReturnList, printNoteOnPoReturnList) || const DeepCollectionEquality().equals(other.printNoteOnPoReturnList, printNoteOnPoReturnList)) &&
            (identical(other.assetAccountId, assetAccountId) || const DeepCollectionEquality().equals(other.assetAccountId, assetAccountId)) &&
            (identical(other.assetAccountNo, assetAccountNo) || const DeepCollectionEquality().equals(other.assetAccountNo, assetAccountNo)) &&
            (identical(other.assetAccountDescription, assetAccountDescription) || const DeepCollectionEquality().equals(other.assetAccountDescription, assetAccountDescription)) &&
            (identical(other.incomeAccountId, incomeAccountId) || const DeepCollectionEquality().equals(other.incomeAccountId, incomeAccountId)) &&
            (identical(other.incomeAccountNo, incomeAccountNo) || const DeepCollectionEquality().equals(other.incomeAccountNo, incomeAccountNo)) &&
            (identical(other.incomeAccountDescription, incomeAccountDescription) || const DeepCollectionEquality().equals(other.incomeAccountDescription, incomeAccountDescription)) &&
            (identical(other.subIncomeAccountId, subIncomeAccountId) || const DeepCollectionEquality().equals(other.subIncomeAccountId, subIncomeAccountId)) &&
            (identical(other.subIncomeAccountNo, subIncomeAccountNo) || const DeepCollectionEquality().equals(other.subIncomeAccountNo, subIncomeAccountNo)) &&
            (identical(other.subIncomeAccountDescription, subIncomeAccountDescription) || const DeepCollectionEquality().equals(other.subIncomeAccountDescription, subIncomeAccountDescription)) &&
            (identical(other.consignmentIncomeAccountId, consignmentIncomeAccountId) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountId, consignmentIncomeAccountId)) &&
            (identical(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountNo, consignmentIncomeAccountNo)) &&
            (identical(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription) || const DeepCollectionEquality().equals(other.consignmentIncomeAccountDescription, consignmentIncomeAccountDescription)) &&
            (identical(other.ldIncomeAccountId, ldIncomeAccountId) || const DeepCollectionEquality().equals(other.ldIncomeAccountId, ldIncomeAccountId)) &&
            (identical(other.ldIncomeAccountNo, ldIncomeAccountNo) || const DeepCollectionEquality().equals(other.ldIncomeAccountNo, ldIncomeAccountNo)) &&
            (identical(other.ldIncomeAccountDescription, ldIncomeAccountDescription) || const DeepCollectionEquality().equals(other.ldIncomeAccountDescription, ldIncomeAccountDescription)) &&
            (identical(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountId, equipmentSaleIncomeAccountId)) &&
            (identical(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountNo, equipmentSaleIncomeAccountNo)) &&
            (identical(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription) || const DeepCollectionEquality().equals(other.equipmentSaleIncomeAccountDescription, equipmentSaleIncomeAccountDescription)) &&
            (identical(other.expenseAccountId, expenseAccountId) || const DeepCollectionEquality().equals(other.expenseAccountId, expenseAccountId)) &&
            (identical(other.expenseAccountNo, expenseAccountNo) || const DeepCollectionEquality().equals(other.expenseAccountNo, expenseAccountNo)) &&
            (identical(other.expenseAccountDescription, expenseAccountDescription) || const DeepCollectionEquality().equals(other.expenseAccountDescription, expenseAccountDescription)) &&
            (identical(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountId, costOfGoodsSoldExpenseAccountId)) &&
            (identical(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountNo, costOfGoodsSoldExpenseAccountNo)) &&
            (identical(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsSoldExpenseAccountDescription, costOfGoodsSoldExpenseAccountDescription)) &&
            (identical(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountId, costOfGoodsRentedExpenseAccountId)) &&
            (identical(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountNo, costOfGoodsRentedExpenseAccountNo)) &&
            (identical(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription) || const DeepCollectionEquality().equals(other.costOfGoodsRentedExpenseAccountDescription, costOfGoodsRentedExpenseAccountDescription)) &&
            (identical(other.depreciationExpenseAccountId, depreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountId, depreciationExpenseAccountId)) &&
            (identical(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountNo, depreciationExpenseAccountNo)) &&
            (identical(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.depreciationExpenseAccountDescription, depreciationExpenseAccountDescription)) &&
            (identical(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountId, accumulatedDepreciationExpenseAccountId)) &&
            (identical(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountNo, accumulatedDepreciationExpenseAccountNo)) &&
            (identical(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription) || const DeepCollectionEquality().equals(other.accumulatedDepreciationExpenseAccountDescription, accumulatedDepreciationExpenseAccountDescription)) &&
            (identical(other.originalShowId, originalShowId) || const DeepCollectionEquality().equals(other.originalShowId, originalShowId)) &&
            (identical(other.inputDate, inputDate) || const DeepCollectionEquality().equals(other.inputDate, inputDate)) &&
            (identical(other.inputByUsersId, inputByUsersId) || const DeepCollectionEquality().equals(other.inputByUsersId, inputByUsersId)) &&
            (identical(other.category2, category2) || const DeepCollectionEquality().equals(other.category2, category2)) &&
            (identical(other.class2, class2) || const DeepCollectionEquality().equals(other.class2, class2)) &&
            (identical(other.stockClass, stockClass) || const DeepCollectionEquality().equals(other.stockClass, stockClass)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.manifestShippingContainer, manifestShippingContainer) || const DeepCollectionEquality().equals(other.manifestShippingContainer, manifestShippingContainer)) &&
            (identical(other.manifestStandAloneItem, manifestStandAloneItem) || const DeepCollectionEquality().equals(other.manifestStandAloneItem, manifestStandAloneItem)) &&
            (identical(other.auditNote, auditNote) || const DeepCollectionEquality().equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(excludeFromReturnOnAsset) ^
      const DeepCollectionEquality().hash(isFixedAsset) ^
      const DeepCollectionEquality().hash(multiAssignRFIDs) ^
      const DeepCollectionEquality().hash(minimumDaysPerWeek) ^
      const DeepCollectionEquality().hash(setOpeningId) ^
      const DeepCollectionEquality().hash(setOpening) ^
      const DeepCollectionEquality().hash(wallTypeId) ^
      const DeepCollectionEquality().hash(wallType) ^
      const DeepCollectionEquality().hash(setSurfaceId) ^
      const DeepCollectionEquality().hash(setSurface) ^
      const DeepCollectionEquality().hash(wallWidthFt) ^
      const DeepCollectionEquality().hash(wallWidthIn) ^
      const DeepCollectionEquality().hash(wallHeightFt) ^
      const DeepCollectionEquality().hash(wallHeightIn) ^
      const DeepCollectionEquality().hash(wallLengthFt) ^
      const DeepCollectionEquality().hash(wallLengthIn) ^
      const DeepCollectionEquality().hash(treatConsignedQtyAsOwned) ^
      const DeepCollectionEquality().hash(dailyRate) ^
      const DeepCollectionEquality().hash(weeklyRate) ^
      const DeepCollectionEquality().hash(week2Rate) ^
      const DeepCollectionEquality().hash(week3Rate) ^
      const DeepCollectionEquality().hash(week4Rate) ^
      const DeepCollectionEquality().hash(monthlyRate) ^
      const DeepCollectionEquality().hash(unitValue) ^
      const DeepCollectionEquality().hash(replacementCost) ^
      const DeepCollectionEquality().hash(sourceId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(inventoryType) ^
      const DeepCollectionEquality().hash(availableFrom) ^
      const DeepCollectionEquality().hash(trackedBy) ^
      const DeepCollectionEquality().hash(confirmTrackedBy) ^
      const DeepCollectionEquality().hash(rank) ^
      const DeepCollectionEquality().hash(manufacturerPartNumber) ^
      const DeepCollectionEquality().hash(manufacturerId) ^
      const DeepCollectionEquality().hash(manufacturer) ^
      const DeepCollectionEquality().hash(manufacturerUrl) ^
      const DeepCollectionEquality().hash(excludeImageFromQuoteOrderPrint) ^
      const DeepCollectionEquality().hash(noAvailabilityCheck) ^
      const DeepCollectionEquality()
          .hash(availabilityManuallyResolveConflicts) ^
      const DeepCollectionEquality().hash(sendAvailabilityAlert) ^
      const DeepCollectionEquality().hash(primaryDimensionUniqueId) ^
      const DeepCollectionEquality().hash(defaultImperialMetric) ^
      const DeepCollectionEquality().hash(primaryDimensionDescription) ^
      const DeepCollectionEquality().hash(primaryDimensionShipWeightLbs) ^
      const DeepCollectionEquality().hash(primaryDimensionShipWeightOz) ^
      const DeepCollectionEquality().hash(primaryDimensionWeightInCaseLbs) ^
      const DeepCollectionEquality().hash(primaryDimensionWeightInCaseOz) ^
      const DeepCollectionEquality().hash(primaryDimensionWidthFt) ^
      const DeepCollectionEquality().hash(primaryDimensionWidthIn) ^
      const DeepCollectionEquality().hash(primaryDimensionHeightFt) ^
      const DeepCollectionEquality().hash(primaryDimensionHeightIn) ^
      const DeepCollectionEquality().hash(primaryDimensionLengthFt) ^
      const DeepCollectionEquality().hash(primaryDimensionLengthIn) ^
      const DeepCollectionEquality().hash(primaryDimensionShipWeightKg) ^
      const DeepCollectionEquality().hash(primaryDimensionShipWeightG) ^
      const DeepCollectionEquality().hash(primaryDimensionWeightInCaseKg) ^
      const DeepCollectionEquality().hash(primaryDimensionWeightInCaseG) ^
      const DeepCollectionEquality().hash(primaryDimensionWidthM) ^
      const DeepCollectionEquality().hash(primaryDimensionWidthCm) ^
      const DeepCollectionEquality().hash(primaryDimensionHeightM) ^
      const DeepCollectionEquality().hash(primaryDimensionHeightCm) ^
      const DeepCollectionEquality().hash(primaryDimensionLengthM) ^
      const DeepCollectionEquality().hash(primaryDimensionLengthCm) ^
      const DeepCollectionEquality().hash(hasSecondaryDimensions) ^
      const DeepCollectionEquality().hash(secondaryDimensionUniqueId) ^
      const DeepCollectionEquality().hash(secondaryDimensionDescription) ^
      const DeepCollectionEquality().hash(secondaryDimensionShipWeightLbs) ^
      const DeepCollectionEquality().hash(secondaryDimensionShipWeightOz) ^
      const DeepCollectionEquality().hash(secondaryDimensionWeightInCaseLbs) ^
      const DeepCollectionEquality().hash(secondaryDimensionWeightInCaseOz) ^
      const DeepCollectionEquality().hash(secondaryDimensionWidthFt) ^
      const DeepCollectionEquality().hash(secondaryDimensionWidthIn) ^
      const DeepCollectionEquality().hash(secondaryDimensionHeightFt) ^
      const DeepCollectionEquality().hash(secondaryDimensionHeightIn) ^
      const DeepCollectionEquality().hash(secondaryDimensionLengthFt) ^
      const DeepCollectionEquality().hash(secondaryDimensionLengthIn) ^
      const DeepCollectionEquality().hash(secondaryDimensionShipWeightKg) ^
      const DeepCollectionEquality().hash(secondaryDimensionShipWeightG) ^
      const DeepCollectionEquality().hash(secondaryDimensionWeightInCaseKg) ^
      const DeepCollectionEquality().hash(secondaryDimensionWeightInCaseG) ^
      const DeepCollectionEquality().hash(secondaryDimensionWidthM) ^
      const DeepCollectionEquality().hash(secondaryDimensionWidthCm) ^
      const DeepCollectionEquality().hash(secondaryDimensionHeightM) ^
      const DeepCollectionEquality().hash(secondaryDimensionHeightCm) ^
      const DeepCollectionEquality().hash(secondaryDimensionLengthM) ^
      const DeepCollectionEquality().hash(secondaryDimensionLengthCm) ^
      const DeepCollectionEquality().hash(countryOfOriginId) ^
      const DeepCollectionEquality().hash(countryOfOrigin) ^
      const DeepCollectionEquality().hash(displayInSummaryModeWhenRateIsZero) ^
      const DeepCollectionEquality().hash(qcRequired) ^
      const DeepCollectionEquality().hash(qcTime) ^
      const DeepCollectionEquality().hash(copyAttributesAsNote) ^
      const DeepCollectionEquality().hash(trackAssetUsage) ^
      const DeepCollectionEquality().hash(trackLampUsage) ^
      const DeepCollectionEquality().hash(trackStrikes) ^
      const DeepCollectionEquality().hash(trackCandles) ^
      const DeepCollectionEquality().hash(lampCount) ^
      const DeepCollectionEquality().hash(minimumFootCandles) ^
      const DeepCollectionEquality().hash(trackSoftware) ^
      const DeepCollectionEquality().hash(softwareVersion) ^
      const DeepCollectionEquality().hash(softwareEffectiveDate) ^
      const DeepCollectionEquality().hash(warehouseSpecificPackage) ^
      const DeepCollectionEquality().hash(completePackagePrice) ^
      const DeepCollectionEquality().hash(kitPackagePrice) ^
      const DeepCollectionEquality().hash(separatePackageOnQuoteOrder) ^
      const DeepCollectionEquality().hash(containerId) ^
      const DeepCollectionEquality().hash(containerScannableInventoryId) ^
      const DeepCollectionEquality().hash(containerScannableICode) ^
      const DeepCollectionEquality().hash(containerScannableDescription) ^
      const DeepCollectionEquality()
          .hash(automaticallyRebuildContainerAtCheckIn) ^
      const DeepCollectionEquality()
          .hash(automaticallyRebuildContainerAtTransferIn) ^
      const DeepCollectionEquality().hash(containerStagingRule) ^
      const DeepCollectionEquality()
          .hash(excludeContainedItemsFromAvailability) ^
      const DeepCollectionEquality().hash(useContainerNumber) ^
      const DeepCollectionEquality().hash(containerPackingListBehavior) ^
      const DeepCollectionEquality().hash(inventoryTypeIsWardrobe) ^
      const DeepCollectionEquality().hash(inventoryTypeIsSets) ^
      const DeepCollectionEquality().hash(patternId) ^
      const DeepCollectionEquality().hash(pattern) ^
      const DeepCollectionEquality().hash(periodId) ^
      const DeepCollectionEquality().hash(period) ^
      const DeepCollectionEquality().hash(materialId) ^
      const DeepCollectionEquality().hash(material) ^
      const DeepCollectionEquality().hash(genderId) ^
      const DeepCollectionEquality().hash(gender) ^
      const DeepCollectionEquality().hash(labelId) ^
      const DeepCollectionEquality().hash(label) ^
      const DeepCollectionEquality().hash(wardrobeSize) ^
      const DeepCollectionEquality().hash(wardrobePieceCount) ^
      const DeepCollectionEquality().hash(dyed) ^
      const DeepCollectionEquality().hash(wardrobeSourceId) ^
      const DeepCollectionEquality().hash(wardrobeSource) ^
      const DeepCollectionEquality().hash(wardrobeCareId) ^
      const DeepCollectionEquality().hash(wardrobeCare) ^
      const DeepCollectionEquality().hash(cleaningFeeAmount) ^
      const DeepCollectionEquality().hash(wardrobeDetailedDescription) ^
      const DeepCollectionEquality().hash(webDetailedDescription) ^
      const DeepCollectionEquality().hash(technicalNotes) ^
      const DeepCollectionEquality()
          .hash(overrideSystemDefaultRevenueAllocationBehavior) ^
      const DeepCollectionEquality().hash(allocateRevenueForAccessories) ^
      const DeepCollectionEquality().hash(packageRevenueCalculationFormula) ^
      const DeepCollectionEquality().hash(isHazardousMaterial) ^
      const DeepCollectionEquality().hash(descriptionWithAkas) ^
      const DeepCollectionEquality().hash(costCalculation) ^
      const DeepCollectionEquality().hash(quantity) ^
      const DeepCollectionEquality().hash(quantityIn) ^
      const DeepCollectionEquality().hash(quantityStaged) ^
      const DeepCollectionEquality().hash(quantityOut) ^
      const DeepCollectionEquality().hash(quantityInContainer) ^
      const DeepCollectionEquality().hash(quantityInRepair) ^
      const DeepCollectionEquality().hash(quantityInTransit) ^
      const DeepCollectionEquality().hash(quantityOnTruck) ^
      const DeepCollectionEquality().hash(totalQuantity) ^
      const DeepCollectionEquality().hash(aisleLocation) ^
      const DeepCollectionEquality().hash(shelfLocation) ^
      const DeepCollectionEquality().hash(taxable) ^
      const DeepCollectionEquality().hash(dateOfLastPhysicalInventory) ^
      const DeepCollectionEquality().hash(hasImage) ^
      const DeepCollectionEquality().hash(iCode) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(availFor) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(category) ^
      const DeepCollectionEquality().hash(subCategoryCount) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(subCategory) ^
      const DeepCollectionEquality().hash(classification) ^
      const DeepCollectionEquality().hash(classificationDescription) ^
      const DeepCollectionEquality().hash(classificationColor) ^
      const DeepCollectionEquality().hash(unitId) ^
      const DeepCollectionEquality().hash(unit) ^
      const DeepCollectionEquality().hash(unitType) ^
      const DeepCollectionEquality().hash(nonDiscountable) ^
      const DeepCollectionEquality().hash(overrideProfitAndLossCategory) ^
      const DeepCollectionEquality().hash(profitAndLossCategoryId) ^
      const DeepCollectionEquality().hash(profitAndLossCategory) ^
      const DeepCollectionEquality().hash(autoCopyNotesToQuoteOrder) ^
      const DeepCollectionEquality().hash(note) ^
      const DeepCollectionEquality().hash(printNoteOnInContract) ^
      const DeepCollectionEquality().hash(printNoteOnOutContract) ^
      const DeepCollectionEquality().hash(printNoteOnReceiveContract) ^
      const DeepCollectionEquality().hash(printNoteOnReturnContract) ^
      const DeepCollectionEquality().hash(printNoteOnInvoice) ^
      const DeepCollectionEquality().hash(printNoteOnOrder) ^
      const DeepCollectionEquality().hash(printNoteOnPickList) ^
      const DeepCollectionEquality().hash(printNoteOnPO) ^
      const DeepCollectionEquality().hash(printNoteOnQuote) ^
      const DeepCollectionEquality().hash(printNoteOnReturnList) ^
      const DeepCollectionEquality().hash(printNoteOnPoReceiveList) ^
      const DeepCollectionEquality().hash(printNoteOnPoReturnList) ^
      const DeepCollectionEquality().hash(assetAccountId) ^
      const DeepCollectionEquality().hash(assetAccountNo) ^
      const DeepCollectionEquality().hash(assetAccountDescription) ^
      const DeepCollectionEquality().hash(incomeAccountId) ^
      const DeepCollectionEquality().hash(incomeAccountNo) ^
      const DeepCollectionEquality().hash(incomeAccountDescription) ^
      const DeepCollectionEquality().hash(subIncomeAccountId) ^
      const DeepCollectionEquality().hash(subIncomeAccountNo) ^
      const DeepCollectionEquality().hash(subIncomeAccountDescription) ^
      const DeepCollectionEquality().hash(consignmentIncomeAccountId) ^
      const DeepCollectionEquality().hash(consignmentIncomeAccountNo) ^
      const DeepCollectionEquality().hash(consignmentIncomeAccountDescription) ^
      const DeepCollectionEquality().hash(ldIncomeAccountId) ^
      const DeepCollectionEquality().hash(ldIncomeAccountNo) ^
      const DeepCollectionEquality().hash(ldIncomeAccountDescription) ^
      const DeepCollectionEquality().hash(equipmentSaleIncomeAccountId) ^
      const DeepCollectionEquality().hash(equipmentSaleIncomeAccountNo) ^
      const DeepCollectionEquality()
          .hash(equipmentSaleIncomeAccountDescription) ^
      const DeepCollectionEquality().hash(expenseAccountId) ^
      const DeepCollectionEquality().hash(expenseAccountNo) ^
      const DeepCollectionEquality().hash(expenseAccountDescription) ^
      const DeepCollectionEquality().hash(costOfGoodsSoldExpenseAccountId) ^
      const DeepCollectionEquality().hash(costOfGoodsSoldExpenseAccountNo) ^
      const DeepCollectionEquality()
          .hash(costOfGoodsSoldExpenseAccountDescription) ^
      const DeepCollectionEquality().hash(costOfGoodsRentedExpenseAccountId) ^
      const DeepCollectionEquality().hash(costOfGoodsRentedExpenseAccountNo) ^
      const DeepCollectionEquality()
          .hash(costOfGoodsRentedExpenseAccountDescription) ^
      const DeepCollectionEquality().hash(depreciationExpenseAccountId) ^
      const DeepCollectionEquality().hash(depreciationExpenseAccountNo) ^
      const DeepCollectionEquality()
          .hash(depreciationExpenseAccountDescription) ^
      const DeepCollectionEquality()
          .hash(accumulatedDepreciationExpenseAccountId) ^
      const DeepCollectionEquality()
          .hash(accumulatedDepreciationExpenseAccountNo) ^
      const DeepCollectionEquality()
          .hash(accumulatedDepreciationExpenseAccountDescription) ^
      const DeepCollectionEquality().hash(originalShowId) ^
      const DeepCollectionEquality().hash(inputDate) ^
      const DeepCollectionEquality().hash(inputByUsersId) ^
      const DeepCollectionEquality().hash(category2) ^
      const DeepCollectionEquality().hash(class2) ^
      const DeepCollectionEquality().hash(stockClass) ^
      const DeepCollectionEquality().hash(inactive) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(manifestShippingContainer) ^
      const DeepCollectionEquality().hash(manifestStandAloneItem) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesInventoryRentalInventoryRentalInventoryExtension
    on WebApiModulesInventoryRentalInventoryRentalInventory {
  WebApiModulesInventoryRentalInventoryRentalInventory copyWith(
      {bool? excludeFromReturnOnAsset,
      bool? isFixedAsset,
      bool? multiAssignRFIDs,
      double? minimumDaysPerWeek,
      String? setOpeningId,
      String? setOpening,
      String? wallTypeId,
      String? wallType,
      String? setSurfaceId,
      String? setSurface,
      int? wallWidthFt,
      int? wallWidthIn,
      int? wallHeightFt,
      int? wallHeightIn,
      int? wallLengthFt,
      int? wallLengthIn,
      bool? treatConsignedQtyAsOwned,
      double? dailyRate,
      double? weeklyRate,
      double? week2Rate,
      double? week3Rate,
      double? week4Rate,
      double? monthlyRate,
      double? unitValue,
      double? replacementCost,
      String? sourceId,
      String? inventoryId,
      String? inventoryTypeId,
      String? inventoryType,
      String? availableFrom,
      String? trackedBy,
      String? confirmTrackedBy,
      String? rank,
      String? manufacturerPartNumber,
      String? manufacturerId,
      String? manufacturer,
      String? manufacturerUrl,
      bool? excludeImageFromQuoteOrderPrint,
      bool? noAvailabilityCheck,
      bool? availabilityManuallyResolveConflicts,
      bool? sendAvailabilityAlert,
      String? primaryDimensionUniqueId,
      String? defaultImperialMetric,
      String? primaryDimensionDescription,
      int? primaryDimensionShipWeightLbs,
      int? primaryDimensionShipWeightOz,
      int? primaryDimensionWeightInCaseLbs,
      int? primaryDimensionWeightInCaseOz,
      int? primaryDimensionWidthFt,
      int? primaryDimensionWidthIn,
      int? primaryDimensionHeightFt,
      int? primaryDimensionHeightIn,
      int? primaryDimensionLengthFt,
      int? primaryDimensionLengthIn,
      int? primaryDimensionShipWeightKg,
      int? primaryDimensionShipWeightG,
      int? primaryDimensionWeightInCaseKg,
      int? primaryDimensionWeightInCaseG,
      int? primaryDimensionWidthM,
      int? primaryDimensionWidthCm,
      int? primaryDimensionHeightM,
      int? primaryDimensionHeightCm,
      int? primaryDimensionLengthM,
      int? primaryDimensionLengthCm,
      bool? hasSecondaryDimensions,
      String? secondaryDimensionUniqueId,
      String? secondaryDimensionDescription,
      int? secondaryDimensionShipWeightLbs,
      int? secondaryDimensionShipWeightOz,
      int? secondaryDimensionWeightInCaseLbs,
      int? secondaryDimensionWeightInCaseOz,
      int? secondaryDimensionWidthFt,
      int? secondaryDimensionWidthIn,
      int? secondaryDimensionHeightFt,
      int? secondaryDimensionHeightIn,
      int? secondaryDimensionLengthFt,
      int? secondaryDimensionLengthIn,
      int? secondaryDimensionShipWeightKg,
      int? secondaryDimensionShipWeightG,
      int? secondaryDimensionWeightInCaseKg,
      int? secondaryDimensionWeightInCaseG,
      int? secondaryDimensionWidthM,
      int? secondaryDimensionWidthCm,
      int? secondaryDimensionHeightM,
      int? secondaryDimensionHeightCm,
      int? secondaryDimensionLengthM,
      int? secondaryDimensionLengthCm,
      String? countryOfOriginId,
      String? countryOfOrigin,
      bool? displayInSummaryModeWhenRateIsZero,
      bool? qcRequired,
      String? qcTime,
      bool? copyAttributesAsNote,
      bool? trackAssetUsage,
      bool? trackLampUsage,
      bool? trackStrikes,
      bool? trackCandles,
      int? lampCount,
      int? minimumFootCandles,
      bool? trackSoftware,
      String? softwareVersion,
      String? softwareEffectiveDate,
      bool? warehouseSpecificPackage,
      String? completePackagePrice,
      String? kitPackagePrice,
      bool? separatePackageOnQuoteOrder,
      String? containerId,
      String? containerScannableInventoryId,
      String? containerScannableICode,
      String? containerScannableDescription,
      bool? automaticallyRebuildContainerAtCheckIn,
      bool? automaticallyRebuildContainerAtTransferIn,
      String? containerStagingRule,
      bool? excludeContainedItemsFromAvailability,
      bool? useContainerNumber,
      String? containerPackingListBehavior,
      bool? inventoryTypeIsWardrobe,
      bool? inventoryTypeIsSets,
      String? patternId,
      String? pattern,
      String? periodId,
      String? period,
      String? materialId,
      String? material,
      String? genderId,
      String? gender,
      String? labelId,
      String? label,
      String? wardrobeSize,
      int? wardrobePieceCount,
      bool? dyed,
      String? wardrobeSourceId,
      String? wardrobeSource,
      String? wardrobeCareId,
      String? wardrobeCare,
      double? cleaningFeeAmount,
      String? wardrobeDetailedDescription,
      String? webDetailedDescription,
      String? technicalNotes,
      bool? overrideSystemDefaultRevenueAllocationBehavior,
      bool? allocateRevenueForAccessories,
      String? packageRevenueCalculationFormula,
      bool? isHazardousMaterial,
      String? descriptionWithAkas,
      String? costCalculation,
      double? quantity,
      double? quantityIn,
      double? quantityStaged,
      double? quantityOut,
      double? quantityInContainer,
      double? quantityInRepair,
      double? quantityInTransit,
      double? quantityOnTruck,
      double? totalQuantity,
      String? aisleLocation,
      String? shelfLocation,
      bool? taxable,
      String? dateOfLastPhysicalInventory,
      bool? hasImage,
      String? iCode,
      String? description,
      String? availFor,
      String? categoryId,
      String? category,
      int? subCategoryCount,
      String? subCategoryId,
      String? subCategory,
      String? classification,
      String? classificationDescription,
      String? classificationColor,
      String? unitId,
      String? unit,
      String? unitType,
      bool? nonDiscountable,
      bool? overrideProfitAndLossCategory,
      String? profitAndLossCategoryId,
      String? profitAndLossCategory,
      bool? autoCopyNotesToQuoteOrder,
      String? note,
      bool? printNoteOnInContract,
      bool? printNoteOnOutContract,
      bool? printNoteOnReceiveContract,
      bool? printNoteOnReturnContract,
      bool? printNoteOnInvoice,
      bool? printNoteOnOrder,
      bool? printNoteOnPickList,
      bool? printNoteOnPO,
      bool? printNoteOnQuote,
      bool? printNoteOnReturnList,
      bool? printNoteOnPoReceiveList,
      bool? printNoteOnPoReturnList,
      String? assetAccountId,
      String? assetAccountNo,
      String? assetAccountDescription,
      String? incomeAccountId,
      String? incomeAccountNo,
      String? incomeAccountDescription,
      String? subIncomeAccountId,
      String? subIncomeAccountNo,
      String? subIncomeAccountDescription,
      String? consignmentIncomeAccountId,
      String? consignmentIncomeAccountNo,
      String? consignmentIncomeAccountDescription,
      String? ldIncomeAccountId,
      String? ldIncomeAccountNo,
      String? ldIncomeAccountDescription,
      String? equipmentSaleIncomeAccountId,
      String? equipmentSaleIncomeAccountNo,
      String? equipmentSaleIncomeAccountDescription,
      String? expenseAccountId,
      String? expenseAccountNo,
      String? expenseAccountDescription,
      String? costOfGoodsSoldExpenseAccountId,
      String? costOfGoodsSoldExpenseAccountNo,
      String? costOfGoodsSoldExpenseAccountDescription,
      String? costOfGoodsRentedExpenseAccountId,
      String? costOfGoodsRentedExpenseAccountNo,
      String? costOfGoodsRentedExpenseAccountDescription,
      String? depreciationExpenseAccountId,
      String? depreciationExpenseAccountNo,
      String? depreciationExpenseAccountDescription,
      String? accumulatedDepreciationExpenseAccountId,
      String? accumulatedDepreciationExpenseAccountNo,
      String? accumulatedDepreciationExpenseAccountDescription,
      String? originalShowId,
      String? inputDate,
      String? inputByUsersId,
      String? category2,
      String? class2,
      String? stockClass,
      bool? inactive,
      String? dateStamp,
      bool? manifestShippingContainer,
      bool? manifestStandAloneItem,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesInventoryRentalInventoryRentalInventory(
        excludeFromReturnOnAsset:
            excludeFromReturnOnAsset ?? this.excludeFromReturnOnAsset,
        isFixedAsset: isFixedAsset ?? this.isFixedAsset,
        multiAssignRFIDs: multiAssignRFIDs ?? this.multiAssignRFIDs,
        minimumDaysPerWeek: minimumDaysPerWeek ?? this.minimumDaysPerWeek,
        setOpeningId: setOpeningId ?? this.setOpeningId,
        setOpening: setOpening ?? this.setOpening,
        wallTypeId: wallTypeId ?? this.wallTypeId,
        wallType: wallType ?? this.wallType,
        setSurfaceId: setSurfaceId ?? this.setSurfaceId,
        setSurface: setSurface ?? this.setSurface,
        wallWidthFt: wallWidthFt ?? this.wallWidthFt,
        wallWidthIn: wallWidthIn ?? this.wallWidthIn,
        wallHeightFt: wallHeightFt ?? this.wallHeightFt,
        wallHeightIn: wallHeightIn ?? this.wallHeightIn,
        wallLengthFt: wallLengthFt ?? this.wallLengthFt,
        wallLengthIn: wallLengthIn ?? this.wallLengthIn,
        treatConsignedQtyAsOwned:
            treatConsignedQtyAsOwned ?? this.treatConsignedQtyAsOwned,
        dailyRate: dailyRate ?? this.dailyRate,
        weeklyRate: weeklyRate ?? this.weeklyRate,
        week2Rate: week2Rate ?? this.week2Rate,
        week3Rate: week3Rate ?? this.week3Rate,
        week4Rate: week4Rate ?? this.week4Rate,
        monthlyRate: monthlyRate ?? this.monthlyRate,
        unitValue: unitValue ?? this.unitValue,
        replacementCost: replacementCost ?? this.replacementCost,
        sourceId: sourceId ?? this.sourceId,
        inventoryId: inventoryId ?? this.inventoryId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        availableFrom: availableFrom ?? this.availableFrom,
        trackedBy: trackedBy ?? this.trackedBy,
        confirmTrackedBy: confirmTrackedBy ?? this.confirmTrackedBy,
        rank: rank ?? this.rank,
        manufacturerPartNumber:
            manufacturerPartNumber ?? this.manufacturerPartNumber,
        manufacturerId: manufacturerId ?? this.manufacturerId,
        manufacturer: manufacturer ?? this.manufacturer,
        manufacturerUrl: manufacturerUrl ?? this.manufacturerUrl,
        excludeImageFromQuoteOrderPrint: excludeImageFromQuoteOrderPrint ??
            this.excludeImageFromQuoteOrderPrint,
        noAvailabilityCheck: noAvailabilityCheck ?? this.noAvailabilityCheck,
        availabilityManuallyResolveConflicts: availabilityManuallyResolveConflicts ??
            this.availabilityManuallyResolveConflicts,
        sendAvailabilityAlert:
            sendAvailabilityAlert ?? this.sendAvailabilityAlert,
        primaryDimensionUniqueId:
            primaryDimensionUniqueId ?? this.primaryDimensionUniqueId,
        defaultImperialMetric:
            defaultImperialMetric ?? this.defaultImperialMetric,
        primaryDimensionDescription:
            primaryDimensionDescription ?? this.primaryDimensionDescription,
        primaryDimensionShipWeightLbs:
            primaryDimensionShipWeightLbs ?? this.primaryDimensionShipWeightLbs,
        primaryDimensionShipWeightOz:
            primaryDimensionShipWeightOz ?? this.primaryDimensionShipWeightOz,
        primaryDimensionWeightInCaseLbs: primaryDimensionWeightInCaseLbs ??
            this.primaryDimensionWeightInCaseLbs,
        primaryDimensionWeightInCaseOz: primaryDimensionWeightInCaseOz ??
            this.primaryDimensionWeightInCaseOz,
        primaryDimensionWidthFt:
            primaryDimensionWidthFt ?? this.primaryDimensionWidthFt,
        primaryDimensionWidthIn:
            primaryDimensionWidthIn ?? this.primaryDimensionWidthIn,
        primaryDimensionHeightFt:
            primaryDimensionHeightFt ?? this.primaryDimensionHeightFt,
        primaryDimensionHeightIn:
            primaryDimensionHeightIn ?? this.primaryDimensionHeightIn,
        primaryDimensionLengthFt:
            primaryDimensionLengthFt ?? this.primaryDimensionLengthFt,
        primaryDimensionLengthIn:
            primaryDimensionLengthIn ?? this.primaryDimensionLengthIn,
        primaryDimensionShipWeightKg:
            primaryDimensionShipWeightKg ?? this.primaryDimensionShipWeightKg,
        primaryDimensionShipWeightG:
            primaryDimensionShipWeightG ?? this.primaryDimensionShipWeightG,
        primaryDimensionWeightInCaseKg: primaryDimensionWeightInCaseKg ??
            this.primaryDimensionWeightInCaseKg,
        primaryDimensionWeightInCaseG:
            primaryDimensionWeightInCaseG ?? this.primaryDimensionWeightInCaseG,
        primaryDimensionWidthM:
            primaryDimensionWidthM ?? this.primaryDimensionWidthM,
        primaryDimensionWidthCm:
            primaryDimensionWidthCm ?? this.primaryDimensionWidthCm,
        primaryDimensionHeightM:
            primaryDimensionHeightM ?? this.primaryDimensionHeightM,
        primaryDimensionHeightCm:
            primaryDimensionHeightCm ?? this.primaryDimensionHeightCm,
        primaryDimensionLengthM:
            primaryDimensionLengthM ?? this.primaryDimensionLengthM,
        primaryDimensionLengthCm:
            primaryDimensionLengthCm ?? this.primaryDimensionLengthCm,
        hasSecondaryDimensions:
            hasSecondaryDimensions ?? this.hasSecondaryDimensions,
        secondaryDimensionUniqueId:
            secondaryDimensionUniqueId ?? this.secondaryDimensionUniqueId,
        secondaryDimensionDescription:
            secondaryDimensionDescription ?? this.secondaryDimensionDescription,
        secondaryDimensionShipWeightLbs: secondaryDimensionShipWeightLbs ??
            this.secondaryDimensionShipWeightLbs,
        secondaryDimensionShipWeightOz: secondaryDimensionShipWeightOz ??
            this.secondaryDimensionShipWeightOz,
        secondaryDimensionWeightInCaseLbs: secondaryDimensionWeightInCaseLbs ??
            this.secondaryDimensionWeightInCaseLbs,
        secondaryDimensionWeightInCaseOz: secondaryDimensionWeightInCaseOz ??
            this.secondaryDimensionWeightInCaseOz,
        secondaryDimensionWidthFt:
            secondaryDimensionWidthFt ?? this.secondaryDimensionWidthFt,
        secondaryDimensionWidthIn:
            secondaryDimensionWidthIn ?? this.secondaryDimensionWidthIn,
        secondaryDimensionHeightFt:
            secondaryDimensionHeightFt ?? this.secondaryDimensionHeightFt,
        secondaryDimensionHeightIn:
            secondaryDimensionHeightIn ?? this.secondaryDimensionHeightIn,
        secondaryDimensionLengthFt:
            secondaryDimensionLengthFt ?? this.secondaryDimensionLengthFt,
        secondaryDimensionLengthIn:
            secondaryDimensionLengthIn ?? this.secondaryDimensionLengthIn,
        secondaryDimensionShipWeightKg: secondaryDimensionShipWeightKg ??
            this.secondaryDimensionShipWeightKg,
        secondaryDimensionShipWeightG:
            secondaryDimensionShipWeightG ?? this.secondaryDimensionShipWeightG,
        secondaryDimensionWeightInCaseKg: secondaryDimensionWeightInCaseKg ??
            this.secondaryDimensionWeightInCaseKg,
        secondaryDimensionWeightInCaseG: secondaryDimensionWeightInCaseG ??
            this.secondaryDimensionWeightInCaseG,
        secondaryDimensionWidthM:
            secondaryDimensionWidthM ?? this.secondaryDimensionWidthM,
        secondaryDimensionWidthCm:
            secondaryDimensionWidthCm ?? this.secondaryDimensionWidthCm,
        secondaryDimensionHeightM:
            secondaryDimensionHeightM ?? this.secondaryDimensionHeightM,
        secondaryDimensionHeightCm:
            secondaryDimensionHeightCm ?? this.secondaryDimensionHeightCm,
        secondaryDimensionLengthM:
            secondaryDimensionLengthM ?? this.secondaryDimensionLengthM,
        secondaryDimensionLengthCm:
            secondaryDimensionLengthCm ?? this.secondaryDimensionLengthCm,
        countryOfOriginId: countryOfOriginId ?? this.countryOfOriginId,
        countryOfOrigin: countryOfOrigin ?? this.countryOfOrigin,
        displayInSummaryModeWhenRateIsZero: displayInSummaryModeWhenRateIsZero ??
            this.displayInSummaryModeWhenRateIsZero,
        qcRequired: qcRequired ?? this.qcRequired,
        qcTime: qcTime ?? this.qcTime,
        copyAttributesAsNote: copyAttributesAsNote ?? this.copyAttributesAsNote,
        trackAssetUsage: trackAssetUsage ?? this.trackAssetUsage,
        trackLampUsage: trackLampUsage ?? this.trackLampUsage,
        trackStrikes: trackStrikes ?? this.trackStrikes,
        trackCandles: trackCandles ?? this.trackCandles,
        lampCount: lampCount ?? this.lampCount,
        minimumFootCandles: minimumFootCandles ?? this.minimumFootCandles,
        trackSoftware: trackSoftware ?? this.trackSoftware,
        softwareVersion: softwareVersion ?? this.softwareVersion,
        softwareEffectiveDate:
            softwareEffectiveDate ?? this.softwareEffectiveDate,
        warehouseSpecificPackage:
            warehouseSpecificPackage ?? this.warehouseSpecificPackage,
        completePackagePrice: completePackagePrice ?? this.completePackagePrice,
        kitPackagePrice: kitPackagePrice ?? this.kitPackagePrice,
        separatePackageOnQuoteOrder:
            separatePackageOnQuoteOrder ?? this.separatePackageOnQuoteOrder,
        containerId: containerId ?? this.containerId,
        containerScannableInventoryId:
            containerScannableInventoryId ?? this.containerScannableInventoryId,
        containerScannableICode:
            containerScannableICode ?? this.containerScannableICode,
        containerScannableDescription:
            containerScannableDescription ?? this.containerScannableDescription,
        automaticallyRebuildContainerAtCheckIn: automaticallyRebuildContainerAtCheckIn ??
            this.automaticallyRebuildContainerAtCheckIn,
        automaticallyRebuildContainerAtTransferIn: automaticallyRebuildContainerAtTransferIn ?? this.automaticallyRebuildContainerAtTransferIn,
        containerStagingRule: containerStagingRule ?? this.containerStagingRule,
        excludeContainedItemsFromAvailability: excludeContainedItemsFromAvailability ?? this.excludeContainedItemsFromAvailability,
        useContainerNumber: useContainerNumber ?? this.useContainerNumber,
        containerPackingListBehavior: containerPackingListBehavior ?? this.containerPackingListBehavior,
        inventoryTypeIsWardrobe: inventoryTypeIsWardrobe ?? this.inventoryTypeIsWardrobe,
        inventoryTypeIsSets: inventoryTypeIsSets ?? this.inventoryTypeIsSets,
        patternId: patternId ?? this.patternId,
        pattern: pattern ?? this.pattern,
        periodId: periodId ?? this.periodId,
        period: period ?? this.period,
        materialId: materialId ?? this.materialId,
        material: material ?? this.material,
        genderId: genderId ?? this.genderId,
        gender: gender ?? this.gender,
        labelId: labelId ?? this.labelId,
        label: label ?? this.label,
        wardrobeSize: wardrobeSize ?? this.wardrobeSize,
        wardrobePieceCount: wardrobePieceCount ?? this.wardrobePieceCount,
        dyed: dyed ?? this.dyed,
        wardrobeSourceId: wardrobeSourceId ?? this.wardrobeSourceId,
        wardrobeSource: wardrobeSource ?? this.wardrobeSource,
        wardrobeCareId: wardrobeCareId ?? this.wardrobeCareId,
        wardrobeCare: wardrobeCare ?? this.wardrobeCare,
        cleaningFeeAmount: cleaningFeeAmount ?? this.cleaningFeeAmount,
        wardrobeDetailedDescription: wardrobeDetailedDescription ?? this.wardrobeDetailedDescription,
        webDetailedDescription: webDetailedDescription ?? this.webDetailedDescription,
        technicalNotes: technicalNotes ?? this.technicalNotes,
        overrideSystemDefaultRevenueAllocationBehavior: overrideSystemDefaultRevenueAllocationBehavior ?? this.overrideSystemDefaultRevenueAllocationBehavior,
        allocateRevenueForAccessories: allocateRevenueForAccessories ?? this.allocateRevenueForAccessories,
        packageRevenueCalculationFormula: packageRevenueCalculationFormula ?? this.packageRevenueCalculationFormula,
        isHazardousMaterial: isHazardousMaterial ?? this.isHazardousMaterial,
        descriptionWithAkas: descriptionWithAkas ?? this.descriptionWithAkas,
        costCalculation: costCalculation ?? this.costCalculation,
        quantity: quantity ?? this.quantity,
        quantityIn: quantityIn ?? this.quantityIn,
        quantityStaged: quantityStaged ?? this.quantityStaged,
        quantityOut: quantityOut ?? this.quantityOut,
        quantityInContainer: quantityInContainer ?? this.quantityInContainer,
        quantityInRepair: quantityInRepair ?? this.quantityInRepair,
        quantityInTransit: quantityInTransit ?? this.quantityInTransit,
        quantityOnTruck: quantityOnTruck ?? this.quantityOnTruck,
        totalQuantity: totalQuantity ?? this.totalQuantity,
        aisleLocation: aisleLocation ?? this.aisleLocation,
        shelfLocation: shelfLocation ?? this.shelfLocation,
        taxable: taxable ?? this.taxable,
        dateOfLastPhysicalInventory: dateOfLastPhysicalInventory ?? this.dateOfLastPhysicalInventory,
        hasImage: hasImage ?? this.hasImage,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        availFor: availFor ?? this.availFor,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        subCategoryCount: subCategoryCount ?? this.subCategoryCount,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        subCategory: subCategory ?? this.subCategory,
        classification: classification ?? this.classification,
        classificationDescription: classificationDescription ?? this.classificationDescription,
        classificationColor: classificationColor ?? this.classificationColor,
        unitId: unitId ?? this.unitId,
        unit: unit ?? this.unit,
        unitType: unitType ?? this.unitType,
        nonDiscountable: nonDiscountable ?? this.nonDiscountable,
        overrideProfitAndLossCategory: overrideProfitAndLossCategory ?? this.overrideProfitAndLossCategory,
        profitAndLossCategoryId: profitAndLossCategoryId ?? this.profitAndLossCategoryId,
        profitAndLossCategory: profitAndLossCategory ?? this.profitAndLossCategory,
        autoCopyNotesToQuoteOrder: autoCopyNotesToQuoteOrder ?? this.autoCopyNotesToQuoteOrder,
        note: note ?? this.note,
        printNoteOnInContract: printNoteOnInContract ?? this.printNoteOnInContract,
        printNoteOnOutContract: printNoteOnOutContract ?? this.printNoteOnOutContract,
        printNoteOnReceiveContract: printNoteOnReceiveContract ?? this.printNoteOnReceiveContract,
        printNoteOnReturnContract: printNoteOnReturnContract ?? this.printNoteOnReturnContract,
        printNoteOnInvoice: printNoteOnInvoice ?? this.printNoteOnInvoice,
        printNoteOnOrder: printNoteOnOrder ?? this.printNoteOnOrder,
        printNoteOnPickList: printNoteOnPickList ?? this.printNoteOnPickList,
        printNoteOnPO: printNoteOnPO ?? this.printNoteOnPO,
        printNoteOnQuote: printNoteOnQuote ?? this.printNoteOnQuote,
        printNoteOnReturnList: printNoteOnReturnList ?? this.printNoteOnReturnList,
        printNoteOnPoReceiveList: printNoteOnPoReceiveList ?? this.printNoteOnPoReceiveList,
        printNoteOnPoReturnList: printNoteOnPoReturnList ?? this.printNoteOnPoReturnList,
        assetAccountId: assetAccountId ?? this.assetAccountId,
        assetAccountNo: assetAccountNo ?? this.assetAccountNo,
        assetAccountDescription: assetAccountDescription ?? this.assetAccountDescription,
        incomeAccountId: incomeAccountId ?? this.incomeAccountId,
        incomeAccountNo: incomeAccountNo ?? this.incomeAccountNo,
        incomeAccountDescription: incomeAccountDescription ?? this.incomeAccountDescription,
        subIncomeAccountId: subIncomeAccountId ?? this.subIncomeAccountId,
        subIncomeAccountNo: subIncomeAccountNo ?? this.subIncomeAccountNo,
        subIncomeAccountDescription: subIncomeAccountDescription ?? this.subIncomeAccountDescription,
        consignmentIncomeAccountId: consignmentIncomeAccountId ?? this.consignmentIncomeAccountId,
        consignmentIncomeAccountNo: consignmentIncomeAccountNo ?? this.consignmentIncomeAccountNo,
        consignmentIncomeAccountDescription: consignmentIncomeAccountDescription ?? this.consignmentIncomeAccountDescription,
        ldIncomeAccountId: ldIncomeAccountId ?? this.ldIncomeAccountId,
        ldIncomeAccountNo: ldIncomeAccountNo ?? this.ldIncomeAccountNo,
        ldIncomeAccountDescription: ldIncomeAccountDescription ?? this.ldIncomeAccountDescription,
        equipmentSaleIncomeAccountId: equipmentSaleIncomeAccountId ?? this.equipmentSaleIncomeAccountId,
        equipmentSaleIncomeAccountNo: equipmentSaleIncomeAccountNo ?? this.equipmentSaleIncomeAccountNo,
        equipmentSaleIncomeAccountDescription: equipmentSaleIncomeAccountDescription ?? this.equipmentSaleIncomeAccountDescription,
        expenseAccountId: expenseAccountId ?? this.expenseAccountId,
        expenseAccountNo: expenseAccountNo ?? this.expenseAccountNo,
        expenseAccountDescription: expenseAccountDescription ?? this.expenseAccountDescription,
        costOfGoodsSoldExpenseAccountId: costOfGoodsSoldExpenseAccountId ?? this.costOfGoodsSoldExpenseAccountId,
        costOfGoodsSoldExpenseAccountNo: costOfGoodsSoldExpenseAccountNo ?? this.costOfGoodsSoldExpenseAccountNo,
        costOfGoodsSoldExpenseAccountDescription: costOfGoodsSoldExpenseAccountDescription ?? this.costOfGoodsSoldExpenseAccountDescription,
        costOfGoodsRentedExpenseAccountId: costOfGoodsRentedExpenseAccountId ?? this.costOfGoodsRentedExpenseAccountId,
        costOfGoodsRentedExpenseAccountNo: costOfGoodsRentedExpenseAccountNo ?? this.costOfGoodsRentedExpenseAccountNo,
        costOfGoodsRentedExpenseAccountDescription: costOfGoodsRentedExpenseAccountDescription ?? this.costOfGoodsRentedExpenseAccountDescription,
        depreciationExpenseAccountId: depreciationExpenseAccountId ?? this.depreciationExpenseAccountId,
        depreciationExpenseAccountNo: depreciationExpenseAccountNo ?? this.depreciationExpenseAccountNo,
        depreciationExpenseAccountDescription: depreciationExpenseAccountDescription ?? this.depreciationExpenseAccountDescription,
        accumulatedDepreciationExpenseAccountId: accumulatedDepreciationExpenseAccountId ?? this.accumulatedDepreciationExpenseAccountId,
        accumulatedDepreciationExpenseAccountNo: accumulatedDepreciationExpenseAccountNo ?? this.accumulatedDepreciationExpenseAccountNo,
        accumulatedDepreciationExpenseAccountDescription: accumulatedDepreciationExpenseAccountDescription ?? this.accumulatedDepreciationExpenseAccountDescription,
        originalShowId: originalShowId ?? this.originalShowId,
        inputDate: inputDate ?? this.inputDate,
        inputByUsersId: inputByUsersId ?? this.inputByUsersId,
        category2: category2 ?? this.category2,
        class2: class2 ?? this.class2,
        stockClass: stockClass ?? this.stockClass,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        manifestShippingContainer: manifestShippingContainer ?? this.manifestShippingContainer,
        manifestStandAloneItem: manifestStandAloneItem ?? this.manifestStandAloneItem,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesInventoryRentalInventoryRentalInventory copyWithWrapped(
      {Wrapped<bool?>? excludeFromReturnOnAsset,
      Wrapped<bool?>? isFixedAsset,
      Wrapped<bool?>? multiAssignRFIDs,
      Wrapped<double?>? minimumDaysPerWeek,
      Wrapped<String?>? setOpeningId,
      Wrapped<String?>? setOpening,
      Wrapped<String?>? wallTypeId,
      Wrapped<String?>? wallType,
      Wrapped<String?>? setSurfaceId,
      Wrapped<String?>? setSurface,
      Wrapped<int?>? wallWidthFt,
      Wrapped<int?>? wallWidthIn,
      Wrapped<int?>? wallHeightFt,
      Wrapped<int?>? wallHeightIn,
      Wrapped<int?>? wallLengthFt,
      Wrapped<int?>? wallLengthIn,
      Wrapped<bool?>? treatConsignedQtyAsOwned,
      Wrapped<double?>? dailyRate,
      Wrapped<double?>? weeklyRate,
      Wrapped<double?>? week2Rate,
      Wrapped<double?>? week3Rate,
      Wrapped<double?>? week4Rate,
      Wrapped<double?>? monthlyRate,
      Wrapped<double?>? unitValue,
      Wrapped<double?>? replacementCost,
      Wrapped<String?>? sourceId,
      Wrapped<String?>? inventoryId,
      Wrapped<String?>? inventoryTypeId,
      Wrapped<String?>? inventoryType,
      Wrapped<String?>? availableFrom,
      Wrapped<String?>? trackedBy,
      Wrapped<String?>? confirmTrackedBy,
      Wrapped<String?>? rank,
      Wrapped<String?>? manufacturerPartNumber,
      Wrapped<String?>? manufacturerId,
      Wrapped<String?>? manufacturer,
      Wrapped<String?>? manufacturerUrl,
      Wrapped<bool?>? excludeImageFromQuoteOrderPrint,
      Wrapped<bool?>? noAvailabilityCheck,
      Wrapped<bool?>? availabilityManuallyResolveConflicts,
      Wrapped<bool?>? sendAvailabilityAlert,
      Wrapped<String?>? primaryDimensionUniqueId,
      Wrapped<String?>? defaultImperialMetric,
      Wrapped<String?>? primaryDimensionDescription,
      Wrapped<int?>? primaryDimensionShipWeightLbs,
      Wrapped<int?>? primaryDimensionShipWeightOz,
      Wrapped<int?>? primaryDimensionWeightInCaseLbs,
      Wrapped<int?>? primaryDimensionWeightInCaseOz,
      Wrapped<int?>? primaryDimensionWidthFt,
      Wrapped<int?>? primaryDimensionWidthIn,
      Wrapped<int?>? primaryDimensionHeightFt,
      Wrapped<int?>? primaryDimensionHeightIn,
      Wrapped<int?>? primaryDimensionLengthFt,
      Wrapped<int?>? primaryDimensionLengthIn,
      Wrapped<int?>? primaryDimensionShipWeightKg,
      Wrapped<int?>? primaryDimensionShipWeightG,
      Wrapped<int?>? primaryDimensionWeightInCaseKg,
      Wrapped<int?>? primaryDimensionWeightInCaseG,
      Wrapped<int?>? primaryDimensionWidthM,
      Wrapped<int?>? primaryDimensionWidthCm,
      Wrapped<int?>? primaryDimensionHeightM,
      Wrapped<int?>? primaryDimensionHeightCm,
      Wrapped<int?>? primaryDimensionLengthM,
      Wrapped<int?>? primaryDimensionLengthCm,
      Wrapped<bool?>? hasSecondaryDimensions,
      Wrapped<String?>? secondaryDimensionUniqueId,
      Wrapped<String?>? secondaryDimensionDescription,
      Wrapped<int?>? secondaryDimensionShipWeightLbs,
      Wrapped<int?>? secondaryDimensionShipWeightOz,
      Wrapped<int?>? secondaryDimensionWeightInCaseLbs,
      Wrapped<int?>? secondaryDimensionWeightInCaseOz,
      Wrapped<int?>? secondaryDimensionWidthFt,
      Wrapped<int?>? secondaryDimensionWidthIn,
      Wrapped<int?>? secondaryDimensionHeightFt,
      Wrapped<int?>? secondaryDimensionHeightIn,
      Wrapped<int?>? secondaryDimensionLengthFt,
      Wrapped<int?>? secondaryDimensionLengthIn,
      Wrapped<int?>? secondaryDimensionShipWeightKg,
      Wrapped<int?>? secondaryDimensionShipWeightG,
      Wrapped<int?>? secondaryDimensionWeightInCaseKg,
      Wrapped<int?>? secondaryDimensionWeightInCaseG,
      Wrapped<int?>? secondaryDimensionWidthM,
      Wrapped<int?>? secondaryDimensionWidthCm,
      Wrapped<int?>? secondaryDimensionHeightM,
      Wrapped<int?>? secondaryDimensionHeightCm,
      Wrapped<int?>? secondaryDimensionLengthM,
      Wrapped<int?>? secondaryDimensionLengthCm,
      Wrapped<String?>? countryOfOriginId,
      Wrapped<String?>? countryOfOrigin,
      Wrapped<bool?>? displayInSummaryModeWhenRateIsZero,
      Wrapped<bool?>? qcRequired,
      Wrapped<String?>? qcTime,
      Wrapped<bool?>? copyAttributesAsNote,
      Wrapped<bool?>? trackAssetUsage,
      Wrapped<bool?>? trackLampUsage,
      Wrapped<bool?>? trackStrikes,
      Wrapped<bool?>? trackCandles,
      Wrapped<int?>? lampCount,
      Wrapped<int?>? minimumFootCandles,
      Wrapped<bool?>? trackSoftware,
      Wrapped<String?>? softwareVersion,
      Wrapped<String?>? softwareEffectiveDate,
      Wrapped<bool?>? warehouseSpecificPackage,
      Wrapped<String?>? completePackagePrice,
      Wrapped<String?>? kitPackagePrice,
      Wrapped<bool?>? separatePackageOnQuoteOrder,
      Wrapped<String?>? containerId,
      Wrapped<String?>? containerScannableInventoryId,
      Wrapped<String?>? containerScannableICode,
      Wrapped<String?>? containerScannableDescription,
      Wrapped<bool?>? automaticallyRebuildContainerAtCheckIn,
      Wrapped<bool?>? automaticallyRebuildContainerAtTransferIn,
      Wrapped<String?>? containerStagingRule,
      Wrapped<bool?>? excludeContainedItemsFromAvailability,
      Wrapped<bool?>? useContainerNumber,
      Wrapped<String?>? containerPackingListBehavior,
      Wrapped<bool?>? inventoryTypeIsWardrobe,
      Wrapped<bool?>? inventoryTypeIsSets,
      Wrapped<String?>? patternId,
      Wrapped<String?>? pattern,
      Wrapped<String?>? periodId,
      Wrapped<String?>? period,
      Wrapped<String?>? materialId,
      Wrapped<String?>? material,
      Wrapped<String?>? genderId,
      Wrapped<String?>? gender,
      Wrapped<String?>? labelId,
      Wrapped<String?>? label,
      Wrapped<String?>? wardrobeSize,
      Wrapped<int?>? wardrobePieceCount,
      Wrapped<bool?>? dyed,
      Wrapped<String?>? wardrobeSourceId,
      Wrapped<String?>? wardrobeSource,
      Wrapped<String?>? wardrobeCareId,
      Wrapped<String?>? wardrobeCare,
      Wrapped<double?>? cleaningFeeAmount,
      Wrapped<String?>? wardrobeDetailedDescription,
      Wrapped<String?>? webDetailedDescription,
      Wrapped<String?>? technicalNotes,
      Wrapped<bool?>? overrideSystemDefaultRevenueAllocationBehavior,
      Wrapped<bool?>? allocateRevenueForAccessories,
      Wrapped<String?>? packageRevenueCalculationFormula,
      Wrapped<bool?>? isHazardousMaterial,
      Wrapped<String?>? descriptionWithAkas,
      Wrapped<String?>? costCalculation,
      Wrapped<double?>? quantity,
      Wrapped<double?>? quantityIn,
      Wrapped<double?>? quantityStaged,
      Wrapped<double?>? quantityOut,
      Wrapped<double?>? quantityInContainer,
      Wrapped<double?>? quantityInRepair,
      Wrapped<double?>? quantityInTransit,
      Wrapped<double?>? quantityOnTruck,
      Wrapped<double?>? totalQuantity,
      Wrapped<String?>? aisleLocation,
      Wrapped<String?>? shelfLocation,
      Wrapped<bool?>? taxable,
      Wrapped<String?>? dateOfLastPhysicalInventory,
      Wrapped<bool?>? hasImage,
      Wrapped<String?>? iCode,
      Wrapped<String?>? description,
      Wrapped<String?>? availFor,
      Wrapped<String?>? categoryId,
      Wrapped<String?>? category,
      Wrapped<int?>? subCategoryCount,
      Wrapped<String?>? subCategoryId,
      Wrapped<String?>? subCategory,
      Wrapped<String?>? classification,
      Wrapped<String?>? classificationDescription,
      Wrapped<String?>? classificationColor,
      Wrapped<String?>? unitId,
      Wrapped<String?>? unit,
      Wrapped<String?>? unitType,
      Wrapped<bool?>? nonDiscountable,
      Wrapped<bool?>? overrideProfitAndLossCategory,
      Wrapped<String?>? profitAndLossCategoryId,
      Wrapped<String?>? profitAndLossCategory,
      Wrapped<bool?>? autoCopyNotesToQuoteOrder,
      Wrapped<String?>? note,
      Wrapped<bool?>? printNoteOnInContract,
      Wrapped<bool?>? printNoteOnOutContract,
      Wrapped<bool?>? printNoteOnReceiveContract,
      Wrapped<bool?>? printNoteOnReturnContract,
      Wrapped<bool?>? printNoteOnInvoice,
      Wrapped<bool?>? printNoteOnOrder,
      Wrapped<bool?>? printNoteOnPickList,
      Wrapped<bool?>? printNoteOnPO,
      Wrapped<bool?>? printNoteOnQuote,
      Wrapped<bool?>? printNoteOnReturnList,
      Wrapped<bool?>? printNoteOnPoReceiveList,
      Wrapped<bool?>? printNoteOnPoReturnList,
      Wrapped<String?>? assetAccountId,
      Wrapped<String?>? assetAccountNo,
      Wrapped<String?>? assetAccountDescription,
      Wrapped<String?>? incomeAccountId,
      Wrapped<String?>? incomeAccountNo,
      Wrapped<String?>? incomeAccountDescription,
      Wrapped<String?>? subIncomeAccountId,
      Wrapped<String?>? subIncomeAccountNo,
      Wrapped<String?>? subIncomeAccountDescription,
      Wrapped<String?>? consignmentIncomeAccountId,
      Wrapped<String?>? consignmentIncomeAccountNo,
      Wrapped<String?>? consignmentIncomeAccountDescription,
      Wrapped<String?>? ldIncomeAccountId,
      Wrapped<String?>? ldIncomeAccountNo,
      Wrapped<String?>? ldIncomeAccountDescription,
      Wrapped<String?>? equipmentSaleIncomeAccountId,
      Wrapped<String?>? equipmentSaleIncomeAccountNo,
      Wrapped<String?>? equipmentSaleIncomeAccountDescription,
      Wrapped<String?>? expenseAccountId,
      Wrapped<String?>? expenseAccountNo,
      Wrapped<String?>? expenseAccountDescription,
      Wrapped<String?>? costOfGoodsSoldExpenseAccountId,
      Wrapped<String?>? costOfGoodsSoldExpenseAccountNo,
      Wrapped<String?>? costOfGoodsSoldExpenseAccountDescription,
      Wrapped<String?>? costOfGoodsRentedExpenseAccountId,
      Wrapped<String?>? costOfGoodsRentedExpenseAccountNo,
      Wrapped<String?>? costOfGoodsRentedExpenseAccountDescription,
      Wrapped<String?>? depreciationExpenseAccountId,
      Wrapped<String?>? depreciationExpenseAccountNo,
      Wrapped<String?>? depreciationExpenseAccountDescription,
      Wrapped<String?>? accumulatedDepreciationExpenseAccountId,
      Wrapped<String?>? accumulatedDepreciationExpenseAccountNo,
      Wrapped<String?>? accumulatedDepreciationExpenseAccountDescription,
      Wrapped<String?>? originalShowId,
      Wrapped<String?>? inputDate,
      Wrapped<String?>? inputByUsersId,
      Wrapped<String?>? category2,
      Wrapped<String?>? class2,
      Wrapped<String?>? stockClass,
      Wrapped<bool?>? inactive,
      Wrapped<String?>? dateStamp,
      Wrapped<bool?>? manifestShippingContainer,
      Wrapped<bool?>? manifestStandAloneItem,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesInventoryRentalInventoryRentalInventory(
        excludeFromReturnOnAsset: (excludeFromReturnOnAsset != null
            ? excludeFromReturnOnAsset.value
            : this.excludeFromReturnOnAsset),
        isFixedAsset:
            (isFixedAsset != null ? isFixedAsset.value : this.isFixedAsset),
        multiAssignRFIDs: (multiAssignRFIDs != null
            ? multiAssignRFIDs.value
            : this.multiAssignRFIDs),
        minimumDaysPerWeek: (minimumDaysPerWeek != null
            ? minimumDaysPerWeek.value
            : this.minimumDaysPerWeek),
        setOpeningId:
            (setOpeningId != null ? setOpeningId.value : this.setOpeningId),
        setOpening: (setOpening != null ? setOpening.value : this.setOpening),
        wallTypeId: (wallTypeId != null ? wallTypeId.value : this.wallTypeId),
        wallType: (wallType != null ? wallType.value : this.wallType),
        setSurfaceId:
            (setSurfaceId != null ? setSurfaceId.value : this.setSurfaceId),
        setSurface: (setSurface != null ? setSurface.value : this.setSurface),
        wallWidthFt:
            (wallWidthFt != null ? wallWidthFt.value : this.wallWidthFt),
        wallWidthIn:
            (wallWidthIn != null ? wallWidthIn.value : this.wallWidthIn),
        wallHeightFt:
            (wallHeightFt != null ? wallHeightFt.value : this.wallHeightFt),
        wallHeightIn:
            (wallHeightIn != null ? wallHeightIn.value : this.wallHeightIn),
        wallLengthFt:
            (wallLengthFt != null ? wallLengthFt.value : this.wallLengthFt),
        wallLengthIn:
            (wallLengthIn != null ? wallLengthIn.value : this.wallLengthIn),
        treatConsignedQtyAsOwned: (treatConsignedQtyAsOwned != null
            ? treatConsignedQtyAsOwned.value
            : this.treatConsignedQtyAsOwned),
        dailyRate: (dailyRate != null ? dailyRate.value : this.dailyRate),
        weeklyRate: (weeklyRate != null ? weeklyRate.value : this.weeklyRate),
        week2Rate: (week2Rate != null ? week2Rate.value : this.week2Rate),
        week3Rate: (week3Rate != null ? week3Rate.value : this.week3Rate),
        week4Rate: (week4Rate != null ? week4Rate.value : this.week4Rate),
        monthlyRate:
            (monthlyRate != null ? monthlyRate.value : this.monthlyRate),
        unitValue: (unitValue != null ? unitValue.value : this.unitValue),
        replacementCost: (replacementCost != null
            ? replacementCost.value
            : this.replacementCost),
        sourceId: (sourceId != null ? sourceId.value : this.sourceId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        inventoryType:
            (inventoryType != null ? inventoryType.value : this.inventoryType),
        availableFrom:
            (availableFrom != null ? availableFrom.value : this.availableFrom),
        trackedBy: (trackedBy != null ? trackedBy.value : this.trackedBy),
        confirmTrackedBy: (confirmTrackedBy != null
            ? confirmTrackedBy.value
            : this.confirmTrackedBy),
        rank: (rank != null ? rank.value : this.rank),
        manufacturerPartNumber: (manufacturerPartNumber != null
            ? manufacturerPartNumber.value
            : this.manufacturerPartNumber),
        manufacturerId: (manufacturerId != null
            ? manufacturerId.value
            : this.manufacturerId),
        manufacturer:
            (manufacturer != null ? manufacturer.value : this.manufacturer),
        manufacturerUrl: (manufacturerUrl != null
            ? manufacturerUrl.value
            : this.manufacturerUrl),
        excludeImageFromQuoteOrderPrint: (excludeImageFromQuoteOrderPrint != null
            ? excludeImageFromQuoteOrderPrint.value
            : this.excludeImageFromQuoteOrderPrint),
        noAvailabilityCheck: (noAvailabilityCheck != null
            ? noAvailabilityCheck.value
            : this.noAvailabilityCheck),
        availabilityManuallyResolveConflicts: (availabilityManuallyResolveConflicts != null
            ? availabilityManuallyResolveConflicts.value
            : this.availabilityManuallyResolveConflicts),
        sendAvailabilityAlert: (sendAvailabilityAlert != null
            ? sendAvailabilityAlert.value
            : this.sendAvailabilityAlert),
        primaryDimensionUniqueId: (primaryDimensionUniqueId != null
            ? primaryDimensionUniqueId.value
            : this.primaryDimensionUniqueId),
        defaultImperialMetric: (defaultImperialMetric != null
            ? defaultImperialMetric.value
            : this.defaultImperialMetric),
        primaryDimensionDescription: (primaryDimensionDescription != null
            ? primaryDimensionDescription.value
            : this.primaryDimensionDescription),
        primaryDimensionShipWeightLbs: (primaryDimensionShipWeightLbs != null
            ? primaryDimensionShipWeightLbs.value
            : this.primaryDimensionShipWeightLbs),
        primaryDimensionShipWeightOz: (primaryDimensionShipWeightOz != null
            ? primaryDimensionShipWeightOz.value
            : this.primaryDimensionShipWeightOz),
        primaryDimensionWeightInCaseLbs: (primaryDimensionWeightInCaseLbs != null
            ? primaryDimensionWeightInCaseLbs.value
            : this.primaryDimensionWeightInCaseLbs),
        primaryDimensionWeightInCaseOz: (primaryDimensionWeightInCaseOz != null
            ? primaryDimensionWeightInCaseOz.value
            : this.primaryDimensionWeightInCaseOz),
        primaryDimensionWidthFt: (primaryDimensionWidthFt != null
            ? primaryDimensionWidthFt.value
            : this.primaryDimensionWidthFt),
        primaryDimensionWidthIn: (primaryDimensionWidthIn != null
            ? primaryDimensionWidthIn.value
            : this.primaryDimensionWidthIn),
        primaryDimensionHeightFt: (primaryDimensionHeightFt != null
            ? primaryDimensionHeightFt.value
            : this.primaryDimensionHeightFt),
        primaryDimensionHeightIn: (primaryDimensionHeightIn != null
            ? primaryDimensionHeightIn.value
            : this.primaryDimensionHeightIn),
        primaryDimensionLengthFt:
            (primaryDimensionLengthFt != null ? primaryDimensionLengthFt.value : this.primaryDimensionLengthFt),
        primaryDimensionLengthIn: (primaryDimensionLengthIn != null ? primaryDimensionLengthIn.value : this.primaryDimensionLengthIn),
        primaryDimensionShipWeightKg: (primaryDimensionShipWeightKg != null ? primaryDimensionShipWeightKg.value : this.primaryDimensionShipWeightKg),
        primaryDimensionShipWeightG: (primaryDimensionShipWeightG != null ? primaryDimensionShipWeightG.value : this.primaryDimensionShipWeightG),
        primaryDimensionWeightInCaseKg: (primaryDimensionWeightInCaseKg != null ? primaryDimensionWeightInCaseKg.value : this.primaryDimensionWeightInCaseKg),
        primaryDimensionWeightInCaseG: (primaryDimensionWeightInCaseG != null ? primaryDimensionWeightInCaseG.value : this.primaryDimensionWeightInCaseG),
        primaryDimensionWidthM: (primaryDimensionWidthM != null ? primaryDimensionWidthM.value : this.primaryDimensionWidthM),
        primaryDimensionWidthCm: (primaryDimensionWidthCm != null ? primaryDimensionWidthCm.value : this.primaryDimensionWidthCm),
        primaryDimensionHeightM: (primaryDimensionHeightM != null ? primaryDimensionHeightM.value : this.primaryDimensionHeightM),
        primaryDimensionHeightCm: (primaryDimensionHeightCm != null ? primaryDimensionHeightCm.value : this.primaryDimensionHeightCm),
        primaryDimensionLengthM: (primaryDimensionLengthM != null ? primaryDimensionLengthM.value : this.primaryDimensionLengthM),
        primaryDimensionLengthCm: (primaryDimensionLengthCm != null ? primaryDimensionLengthCm.value : this.primaryDimensionLengthCm),
        hasSecondaryDimensions: (hasSecondaryDimensions != null ? hasSecondaryDimensions.value : this.hasSecondaryDimensions),
        secondaryDimensionUniqueId: (secondaryDimensionUniqueId != null ? secondaryDimensionUniqueId.value : this.secondaryDimensionUniqueId),
        secondaryDimensionDescription: (secondaryDimensionDescription != null ? secondaryDimensionDescription.value : this.secondaryDimensionDescription),
        secondaryDimensionShipWeightLbs: (secondaryDimensionShipWeightLbs != null ? secondaryDimensionShipWeightLbs.value : this.secondaryDimensionShipWeightLbs),
        secondaryDimensionShipWeightOz: (secondaryDimensionShipWeightOz != null ? secondaryDimensionShipWeightOz.value : this.secondaryDimensionShipWeightOz),
        secondaryDimensionWeightInCaseLbs: (secondaryDimensionWeightInCaseLbs != null ? secondaryDimensionWeightInCaseLbs.value : this.secondaryDimensionWeightInCaseLbs),
        secondaryDimensionWeightInCaseOz: (secondaryDimensionWeightInCaseOz != null ? secondaryDimensionWeightInCaseOz.value : this.secondaryDimensionWeightInCaseOz),
        secondaryDimensionWidthFt: (secondaryDimensionWidthFt != null ? secondaryDimensionWidthFt.value : this.secondaryDimensionWidthFt),
        secondaryDimensionWidthIn: (secondaryDimensionWidthIn != null ? secondaryDimensionWidthIn.value : this.secondaryDimensionWidthIn),
        secondaryDimensionHeightFt: (secondaryDimensionHeightFt != null ? secondaryDimensionHeightFt.value : this.secondaryDimensionHeightFt),
        secondaryDimensionHeightIn: (secondaryDimensionHeightIn != null ? secondaryDimensionHeightIn.value : this.secondaryDimensionHeightIn),
        secondaryDimensionLengthFt: (secondaryDimensionLengthFt != null ? secondaryDimensionLengthFt.value : this.secondaryDimensionLengthFt),
        secondaryDimensionLengthIn: (secondaryDimensionLengthIn != null ? secondaryDimensionLengthIn.value : this.secondaryDimensionLengthIn),
        secondaryDimensionShipWeightKg: (secondaryDimensionShipWeightKg != null ? secondaryDimensionShipWeightKg.value : this.secondaryDimensionShipWeightKg),
        secondaryDimensionShipWeightG: (secondaryDimensionShipWeightG != null ? secondaryDimensionShipWeightG.value : this.secondaryDimensionShipWeightG),
        secondaryDimensionWeightInCaseKg: (secondaryDimensionWeightInCaseKg != null ? secondaryDimensionWeightInCaseKg.value : this.secondaryDimensionWeightInCaseKg),
        secondaryDimensionWeightInCaseG: (secondaryDimensionWeightInCaseG != null ? secondaryDimensionWeightInCaseG.value : this.secondaryDimensionWeightInCaseG),
        secondaryDimensionWidthM: (secondaryDimensionWidthM != null ? secondaryDimensionWidthM.value : this.secondaryDimensionWidthM),
        secondaryDimensionWidthCm: (secondaryDimensionWidthCm != null ? secondaryDimensionWidthCm.value : this.secondaryDimensionWidthCm),
        secondaryDimensionHeightM: (secondaryDimensionHeightM != null ? secondaryDimensionHeightM.value : this.secondaryDimensionHeightM),
        secondaryDimensionHeightCm: (secondaryDimensionHeightCm != null ? secondaryDimensionHeightCm.value : this.secondaryDimensionHeightCm),
        secondaryDimensionLengthM: (secondaryDimensionLengthM != null ? secondaryDimensionLengthM.value : this.secondaryDimensionLengthM),
        secondaryDimensionLengthCm: (secondaryDimensionLengthCm != null ? secondaryDimensionLengthCm.value : this.secondaryDimensionLengthCm),
        countryOfOriginId: (countryOfOriginId != null ? countryOfOriginId.value : this.countryOfOriginId),
        countryOfOrigin: (countryOfOrigin != null ? countryOfOrigin.value : this.countryOfOrigin),
        displayInSummaryModeWhenRateIsZero: (displayInSummaryModeWhenRateIsZero != null ? displayInSummaryModeWhenRateIsZero.value : this.displayInSummaryModeWhenRateIsZero),
        qcRequired: (qcRequired != null ? qcRequired.value : this.qcRequired),
        qcTime: (qcTime != null ? qcTime.value : this.qcTime),
        copyAttributesAsNote: (copyAttributesAsNote != null ? copyAttributesAsNote.value : this.copyAttributesAsNote),
        trackAssetUsage: (trackAssetUsage != null ? trackAssetUsage.value : this.trackAssetUsage),
        trackLampUsage: (trackLampUsage != null ? trackLampUsage.value : this.trackLampUsage),
        trackStrikes: (trackStrikes != null ? trackStrikes.value : this.trackStrikes),
        trackCandles: (trackCandles != null ? trackCandles.value : this.trackCandles),
        lampCount: (lampCount != null ? lampCount.value : this.lampCount),
        minimumFootCandles: (minimumFootCandles != null ? minimumFootCandles.value : this.minimumFootCandles),
        trackSoftware: (trackSoftware != null ? trackSoftware.value : this.trackSoftware),
        softwareVersion: (softwareVersion != null ? softwareVersion.value : this.softwareVersion),
        softwareEffectiveDate: (softwareEffectiveDate != null ? softwareEffectiveDate.value : this.softwareEffectiveDate),
        warehouseSpecificPackage: (warehouseSpecificPackage != null ? warehouseSpecificPackage.value : this.warehouseSpecificPackage),
        completePackagePrice: (completePackagePrice != null ? completePackagePrice.value : this.completePackagePrice),
        kitPackagePrice: (kitPackagePrice != null ? kitPackagePrice.value : this.kitPackagePrice),
        separatePackageOnQuoteOrder: (separatePackageOnQuoteOrder != null ? separatePackageOnQuoteOrder.value : this.separatePackageOnQuoteOrder),
        containerId: (containerId != null ? containerId.value : this.containerId),
        containerScannableInventoryId: (containerScannableInventoryId != null ? containerScannableInventoryId.value : this.containerScannableInventoryId),
        containerScannableICode: (containerScannableICode != null ? containerScannableICode.value : this.containerScannableICode),
        containerScannableDescription: (containerScannableDescription != null ? containerScannableDescription.value : this.containerScannableDescription),
        automaticallyRebuildContainerAtCheckIn: (automaticallyRebuildContainerAtCheckIn != null ? automaticallyRebuildContainerAtCheckIn.value : this.automaticallyRebuildContainerAtCheckIn),
        automaticallyRebuildContainerAtTransferIn: (automaticallyRebuildContainerAtTransferIn != null ? automaticallyRebuildContainerAtTransferIn.value : this.automaticallyRebuildContainerAtTransferIn),
        containerStagingRule: (containerStagingRule != null ? containerStagingRule.value : this.containerStagingRule),
        excludeContainedItemsFromAvailability: (excludeContainedItemsFromAvailability != null ? excludeContainedItemsFromAvailability.value : this.excludeContainedItemsFromAvailability),
        useContainerNumber: (useContainerNumber != null ? useContainerNumber.value : this.useContainerNumber),
        containerPackingListBehavior: (containerPackingListBehavior != null ? containerPackingListBehavior.value : this.containerPackingListBehavior),
        inventoryTypeIsWardrobe: (inventoryTypeIsWardrobe != null ? inventoryTypeIsWardrobe.value : this.inventoryTypeIsWardrobe),
        inventoryTypeIsSets: (inventoryTypeIsSets != null ? inventoryTypeIsSets.value : this.inventoryTypeIsSets),
        patternId: (patternId != null ? patternId.value : this.patternId),
        pattern: (pattern != null ? pattern.value : this.pattern),
        periodId: (periodId != null ? periodId.value : this.periodId),
        period: (period != null ? period.value : this.period),
        materialId: (materialId != null ? materialId.value : this.materialId),
        material: (material != null ? material.value : this.material),
        genderId: (genderId != null ? genderId.value : this.genderId),
        gender: (gender != null ? gender.value : this.gender),
        labelId: (labelId != null ? labelId.value : this.labelId),
        label: (label != null ? label.value : this.label),
        wardrobeSize: (wardrobeSize != null ? wardrobeSize.value : this.wardrobeSize),
        wardrobePieceCount: (wardrobePieceCount != null ? wardrobePieceCount.value : this.wardrobePieceCount),
        dyed: (dyed != null ? dyed.value : this.dyed),
        wardrobeSourceId: (wardrobeSourceId != null ? wardrobeSourceId.value : this.wardrobeSourceId),
        wardrobeSource: (wardrobeSource != null ? wardrobeSource.value : this.wardrobeSource),
        wardrobeCareId: (wardrobeCareId != null ? wardrobeCareId.value : this.wardrobeCareId),
        wardrobeCare: (wardrobeCare != null ? wardrobeCare.value : this.wardrobeCare),
        cleaningFeeAmount: (cleaningFeeAmount != null ? cleaningFeeAmount.value : this.cleaningFeeAmount),
        wardrobeDetailedDescription: (wardrobeDetailedDescription != null ? wardrobeDetailedDescription.value : this.wardrobeDetailedDescription),
        webDetailedDescription: (webDetailedDescription != null ? webDetailedDescription.value : this.webDetailedDescription),
        technicalNotes: (technicalNotes != null ? technicalNotes.value : this.technicalNotes),
        overrideSystemDefaultRevenueAllocationBehavior: (overrideSystemDefaultRevenueAllocationBehavior != null ? overrideSystemDefaultRevenueAllocationBehavior.value : this.overrideSystemDefaultRevenueAllocationBehavior),
        allocateRevenueForAccessories: (allocateRevenueForAccessories != null ? allocateRevenueForAccessories.value : this.allocateRevenueForAccessories),
        packageRevenueCalculationFormula: (packageRevenueCalculationFormula != null ? packageRevenueCalculationFormula.value : this.packageRevenueCalculationFormula),
        isHazardousMaterial: (isHazardousMaterial != null ? isHazardousMaterial.value : this.isHazardousMaterial),
        descriptionWithAkas: (descriptionWithAkas != null ? descriptionWithAkas.value : this.descriptionWithAkas),
        costCalculation: (costCalculation != null ? costCalculation.value : this.costCalculation),
        quantity: (quantity != null ? quantity.value : this.quantity),
        quantityIn: (quantityIn != null ? quantityIn.value : this.quantityIn),
        quantityStaged: (quantityStaged != null ? quantityStaged.value : this.quantityStaged),
        quantityOut: (quantityOut != null ? quantityOut.value : this.quantityOut),
        quantityInContainer: (quantityInContainer != null ? quantityInContainer.value : this.quantityInContainer),
        quantityInRepair: (quantityInRepair != null ? quantityInRepair.value : this.quantityInRepair),
        quantityInTransit: (quantityInTransit != null ? quantityInTransit.value : this.quantityInTransit),
        quantityOnTruck: (quantityOnTruck != null ? quantityOnTruck.value : this.quantityOnTruck),
        totalQuantity: (totalQuantity != null ? totalQuantity.value : this.totalQuantity),
        aisleLocation: (aisleLocation != null ? aisleLocation.value : this.aisleLocation),
        shelfLocation: (shelfLocation != null ? shelfLocation.value : this.shelfLocation),
        taxable: (taxable != null ? taxable.value : this.taxable),
        dateOfLastPhysicalInventory: (dateOfLastPhysicalInventory != null ? dateOfLastPhysicalInventory.value : this.dateOfLastPhysicalInventory),
        hasImage: (hasImage != null ? hasImage.value : this.hasImage),
        iCode: (iCode != null ? iCode.value : this.iCode),
        description: (description != null ? description.value : this.description),
        availFor: (availFor != null ? availFor.value : this.availFor),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        category: (category != null ? category.value : this.category),
        subCategoryCount: (subCategoryCount != null ? subCategoryCount.value : this.subCategoryCount),
        subCategoryId: (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        subCategory: (subCategory != null ? subCategory.value : this.subCategory),
        classification: (classification != null ? classification.value : this.classification),
        classificationDescription: (classificationDescription != null ? classificationDescription.value : this.classificationDescription),
        classificationColor: (classificationColor != null ? classificationColor.value : this.classificationColor),
        unitId: (unitId != null ? unitId.value : this.unitId),
        unit: (unit != null ? unit.value : this.unit),
        unitType: (unitType != null ? unitType.value : this.unitType),
        nonDiscountable: (nonDiscountable != null ? nonDiscountable.value : this.nonDiscountable),
        overrideProfitAndLossCategory: (overrideProfitAndLossCategory != null ? overrideProfitAndLossCategory.value : this.overrideProfitAndLossCategory),
        profitAndLossCategoryId: (profitAndLossCategoryId != null ? profitAndLossCategoryId.value : this.profitAndLossCategoryId),
        profitAndLossCategory: (profitAndLossCategory != null ? profitAndLossCategory.value : this.profitAndLossCategory),
        autoCopyNotesToQuoteOrder: (autoCopyNotesToQuoteOrder != null ? autoCopyNotesToQuoteOrder.value : this.autoCopyNotesToQuoteOrder),
        note: (note != null ? note.value : this.note),
        printNoteOnInContract: (printNoteOnInContract != null ? printNoteOnInContract.value : this.printNoteOnInContract),
        printNoteOnOutContract: (printNoteOnOutContract != null ? printNoteOnOutContract.value : this.printNoteOnOutContract),
        printNoteOnReceiveContract: (printNoteOnReceiveContract != null ? printNoteOnReceiveContract.value : this.printNoteOnReceiveContract),
        printNoteOnReturnContract: (printNoteOnReturnContract != null ? printNoteOnReturnContract.value : this.printNoteOnReturnContract),
        printNoteOnInvoice: (printNoteOnInvoice != null ? printNoteOnInvoice.value : this.printNoteOnInvoice),
        printNoteOnOrder: (printNoteOnOrder != null ? printNoteOnOrder.value : this.printNoteOnOrder),
        printNoteOnPickList: (printNoteOnPickList != null ? printNoteOnPickList.value : this.printNoteOnPickList),
        printNoteOnPO: (printNoteOnPO != null ? printNoteOnPO.value : this.printNoteOnPO),
        printNoteOnQuote: (printNoteOnQuote != null ? printNoteOnQuote.value : this.printNoteOnQuote),
        printNoteOnReturnList: (printNoteOnReturnList != null ? printNoteOnReturnList.value : this.printNoteOnReturnList),
        printNoteOnPoReceiveList: (printNoteOnPoReceiveList != null ? printNoteOnPoReceiveList.value : this.printNoteOnPoReceiveList),
        printNoteOnPoReturnList: (printNoteOnPoReturnList != null ? printNoteOnPoReturnList.value : this.printNoteOnPoReturnList),
        assetAccountId: (assetAccountId != null ? assetAccountId.value : this.assetAccountId),
        assetAccountNo: (assetAccountNo != null ? assetAccountNo.value : this.assetAccountNo),
        assetAccountDescription: (assetAccountDescription != null ? assetAccountDescription.value : this.assetAccountDescription),
        incomeAccountId: (incomeAccountId != null ? incomeAccountId.value : this.incomeAccountId),
        incomeAccountNo: (incomeAccountNo != null ? incomeAccountNo.value : this.incomeAccountNo),
        incomeAccountDescription: (incomeAccountDescription != null ? incomeAccountDescription.value : this.incomeAccountDescription),
        subIncomeAccountId: (subIncomeAccountId != null ? subIncomeAccountId.value : this.subIncomeAccountId),
        subIncomeAccountNo: (subIncomeAccountNo != null ? subIncomeAccountNo.value : this.subIncomeAccountNo),
        subIncomeAccountDescription: (subIncomeAccountDescription != null ? subIncomeAccountDescription.value : this.subIncomeAccountDescription),
        consignmentIncomeAccountId: (consignmentIncomeAccountId != null ? consignmentIncomeAccountId.value : this.consignmentIncomeAccountId),
        consignmentIncomeAccountNo: (consignmentIncomeAccountNo != null ? consignmentIncomeAccountNo.value : this.consignmentIncomeAccountNo),
        consignmentIncomeAccountDescription: (consignmentIncomeAccountDescription != null ? consignmentIncomeAccountDescription.value : this.consignmentIncomeAccountDescription),
        ldIncomeAccountId: (ldIncomeAccountId != null ? ldIncomeAccountId.value : this.ldIncomeAccountId),
        ldIncomeAccountNo: (ldIncomeAccountNo != null ? ldIncomeAccountNo.value : this.ldIncomeAccountNo),
        ldIncomeAccountDescription: (ldIncomeAccountDescription != null ? ldIncomeAccountDescription.value : this.ldIncomeAccountDescription),
        equipmentSaleIncomeAccountId: (equipmentSaleIncomeAccountId != null ? equipmentSaleIncomeAccountId.value : this.equipmentSaleIncomeAccountId),
        equipmentSaleIncomeAccountNo: (equipmentSaleIncomeAccountNo != null ? equipmentSaleIncomeAccountNo.value : this.equipmentSaleIncomeAccountNo),
        equipmentSaleIncomeAccountDescription: (equipmentSaleIncomeAccountDescription != null ? equipmentSaleIncomeAccountDescription.value : this.equipmentSaleIncomeAccountDescription),
        expenseAccountId: (expenseAccountId != null ? expenseAccountId.value : this.expenseAccountId),
        expenseAccountNo: (expenseAccountNo != null ? expenseAccountNo.value : this.expenseAccountNo),
        expenseAccountDescription: (expenseAccountDescription != null ? expenseAccountDescription.value : this.expenseAccountDescription),
        costOfGoodsSoldExpenseAccountId: (costOfGoodsSoldExpenseAccountId != null ? costOfGoodsSoldExpenseAccountId.value : this.costOfGoodsSoldExpenseAccountId),
        costOfGoodsSoldExpenseAccountNo: (costOfGoodsSoldExpenseAccountNo != null ? costOfGoodsSoldExpenseAccountNo.value : this.costOfGoodsSoldExpenseAccountNo),
        costOfGoodsSoldExpenseAccountDescription: (costOfGoodsSoldExpenseAccountDescription != null ? costOfGoodsSoldExpenseAccountDescription.value : this.costOfGoodsSoldExpenseAccountDescription),
        costOfGoodsRentedExpenseAccountId: (costOfGoodsRentedExpenseAccountId != null ? costOfGoodsRentedExpenseAccountId.value : this.costOfGoodsRentedExpenseAccountId),
        costOfGoodsRentedExpenseAccountNo: (costOfGoodsRentedExpenseAccountNo != null ? costOfGoodsRentedExpenseAccountNo.value : this.costOfGoodsRentedExpenseAccountNo),
        costOfGoodsRentedExpenseAccountDescription: (costOfGoodsRentedExpenseAccountDescription != null ? costOfGoodsRentedExpenseAccountDescription.value : this.costOfGoodsRentedExpenseAccountDescription),
        depreciationExpenseAccountId: (depreciationExpenseAccountId != null ? depreciationExpenseAccountId.value : this.depreciationExpenseAccountId),
        depreciationExpenseAccountNo: (depreciationExpenseAccountNo != null ? depreciationExpenseAccountNo.value : this.depreciationExpenseAccountNo),
        depreciationExpenseAccountDescription: (depreciationExpenseAccountDescription != null ? depreciationExpenseAccountDescription.value : this.depreciationExpenseAccountDescription),
        accumulatedDepreciationExpenseAccountId: (accumulatedDepreciationExpenseAccountId != null ? accumulatedDepreciationExpenseAccountId.value : this.accumulatedDepreciationExpenseAccountId),
        accumulatedDepreciationExpenseAccountNo: (accumulatedDepreciationExpenseAccountNo != null ? accumulatedDepreciationExpenseAccountNo.value : this.accumulatedDepreciationExpenseAccountNo),
        accumulatedDepreciationExpenseAccountDescription: (accumulatedDepreciationExpenseAccountDescription != null ? accumulatedDepreciationExpenseAccountDescription.value : this.accumulatedDepreciationExpenseAccountDescription),
        originalShowId: (originalShowId != null ? originalShowId.value : this.originalShowId),
        inputDate: (inputDate != null ? inputDate.value : this.inputDate),
        inputByUsersId: (inputByUsersId != null ? inputByUsersId.value : this.inputByUsersId),
        category2: (category2 != null ? category2.value : this.category2),
        class2: (class2 != null ? class2.value : this.class2),
        stockClass: (stockClass != null ? stockClass.value : this.stockClass),
        inactive: (inactive != null ? inactive.value : this.inactive),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        manifestShippingContainer: (manifestShippingContainer != null ? manifestShippingContainer.value : this.manifestShippingContainer),
        manifestStandAloneItem: (manifestStandAloneItem != null ? manifestStandAloneItem.value : this.manifestStandAloneItem),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle: (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null ? defaultFieldAttributes.value : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsAddressSettingsCountryCountry {
  WebApiModulesSettingsAddressSettingsCountryCountry({
    this.countryId,
    this.country,
    this.countryISOName,
    this.countryCodeISOAlpha2,
    this.countryCodeISOAlpha3,
    this.countryCodeISONumeric,
    this.countryCodePhone,
    this.flagImage,
    this.metric,
    this.currencyId,
    this.currency,
    this.currencyCode,
    this.inactive,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsAddressSettingsCountryCountry.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsAddressSettingsCountryCountryFromJson(json);

  @JsonKey(name: 'CountryId', includeIfNull: false)
  final String? countryId;
  @JsonKey(name: 'Country', includeIfNull: false)
  final String? country;
  @JsonKey(name: 'CountryISOName', includeIfNull: false)
  final String? countryISOName;
  @JsonKey(name: 'CountryCodeISOAlpha2', includeIfNull: false)
  final String? countryCodeISOAlpha2;
  @JsonKey(name: 'CountryCodeISOAlpha3', includeIfNull: false)
  final String? countryCodeISOAlpha3;
  @JsonKey(name: 'CountryCodeISONumeric', includeIfNull: false)
  final int? countryCodeISONumeric;
  @JsonKey(name: 'CountryCodePhone', includeIfNull: false)
  final int? countryCodePhone;
  @JsonKey(name: 'FlagImage', includeIfNull: false)
  final String? flagImage;
  @JsonKey(name: 'Metric', includeIfNull: false)
  final bool? metric;
  @JsonKey(name: 'CurrencyId', includeIfNull: false)
  final String? currencyId;
  @JsonKey(name: 'Currency', includeIfNull: false)
  final String? currency;
  @JsonKey(name: 'CurrencyCode', includeIfNull: false)
  final String? currencyCode;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsAddressSettingsCountryCountryFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsAddressSettingsCountryCountryToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsAddressSettingsCountryCountryToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsAddressSettingsCountryCountry &&
            (identical(other.countryId, countryId) ||
                const DeepCollectionEquality()
                    .equals(other.countryId, countryId)) &&
            (identical(other.country, country) ||
                const DeepCollectionEquality()
                    .equals(other.country, country)) &&
            (identical(other.countryISOName, countryISOName) ||
                const DeepCollectionEquality()
                    .equals(other.countryISOName, countryISOName)) &&
            (identical(other.countryCodeISOAlpha2, countryCodeISOAlpha2) ||
                const DeepCollectionEquality().equals(
                    other.countryCodeISOAlpha2, countryCodeISOAlpha2)) &&
            (identical(other.countryCodeISOAlpha3, countryCodeISOAlpha3) ||
                const DeepCollectionEquality().equals(
                    other.countryCodeISOAlpha3, countryCodeISOAlpha3)) &&
            (identical(other.countryCodeISONumeric, countryCodeISONumeric) ||
                const DeepCollectionEquality().equals(
                    other.countryCodeISONumeric, countryCodeISONumeric)) &&
            (identical(other.countryCodePhone, countryCodePhone) ||
                const DeepCollectionEquality()
                    .equals(other.countryCodePhone, countryCodePhone)) &&
            (identical(other.flagImage, flagImage) ||
                const DeepCollectionEquality()
                    .equals(other.flagImage, flagImage)) &&
            (identical(other.metric, metric) ||
                const DeepCollectionEquality().equals(other.metric, metric)) &&
            (identical(other.currencyId, currencyId) ||
                const DeepCollectionEquality()
                    .equals(other.currencyId, currencyId)) &&
            (identical(other.currency, currency) ||
                const DeepCollectionEquality()
                    .equals(other.currency, currency)) &&
            (identical(other.currencyCode, currencyCode) ||
                const DeepCollectionEquality()
                    .equals(other.currencyCode, currencyCode)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(countryId) ^
      const DeepCollectionEquality().hash(country) ^
      const DeepCollectionEquality().hash(countryISOName) ^
      const DeepCollectionEquality().hash(countryCodeISOAlpha2) ^
      const DeepCollectionEquality().hash(countryCodeISOAlpha3) ^
      const DeepCollectionEquality().hash(countryCodeISONumeric) ^
      const DeepCollectionEquality().hash(countryCodePhone) ^
      const DeepCollectionEquality().hash(flagImage) ^
      const DeepCollectionEquality().hash(metric) ^
      const DeepCollectionEquality().hash(currencyId) ^
      const DeepCollectionEquality().hash(currency) ^
      const DeepCollectionEquality().hash(currencyCode) ^
      const DeepCollectionEquality().hash(inactive) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesSettingsAddressSettingsCountryCountryExtension
    on WebApiModulesSettingsAddressSettingsCountryCountry {
  WebApiModulesSettingsAddressSettingsCountryCountry copyWith(
      {String? countryId,
      String? country,
      String? countryISOName,
      String? countryCodeISOAlpha2,
      String? countryCodeISOAlpha3,
      int? countryCodeISONumeric,
      int? countryCodePhone,
      String? flagImage,
      bool? metric,
      String? currencyId,
      String? currency,
      String? currencyCode,
      bool? inactive,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsAddressSettingsCountryCountry(
        countryId: countryId ?? this.countryId,
        country: country ?? this.country,
        countryISOName: countryISOName ?? this.countryISOName,
        countryCodeISOAlpha2: countryCodeISOAlpha2 ?? this.countryCodeISOAlpha2,
        countryCodeISOAlpha3: countryCodeISOAlpha3 ?? this.countryCodeISOAlpha3,
        countryCodeISONumeric:
            countryCodeISONumeric ?? this.countryCodeISONumeric,
        countryCodePhone: countryCodePhone ?? this.countryCodePhone,
        flagImage: flagImage ?? this.flagImage,
        metric: metric ?? this.metric,
        currencyId: currencyId ?? this.currencyId,
        currency: currency ?? this.currency,
        currencyCode: currencyCode ?? this.currencyCode,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesSettingsAddressSettingsCountryCountry copyWithWrapped(
      {Wrapped<String?>? countryId,
      Wrapped<String?>? country,
      Wrapped<String?>? countryISOName,
      Wrapped<String?>? countryCodeISOAlpha2,
      Wrapped<String?>? countryCodeISOAlpha3,
      Wrapped<int?>? countryCodeISONumeric,
      Wrapped<int?>? countryCodePhone,
      Wrapped<String?>? flagImage,
      Wrapped<bool?>? metric,
      Wrapped<String?>? currencyId,
      Wrapped<String?>? currency,
      Wrapped<String?>? currencyCode,
      Wrapped<bool?>? inactive,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesSettingsAddressSettingsCountryCountry(
        countryId: (countryId != null ? countryId.value : this.countryId),
        country: (country != null ? country.value : this.country),
        countryISOName: (countryISOName != null
            ? countryISOName.value
            : this.countryISOName),
        countryCodeISOAlpha2: (countryCodeISOAlpha2 != null
            ? countryCodeISOAlpha2.value
            : this.countryCodeISOAlpha2),
        countryCodeISOAlpha3: (countryCodeISOAlpha3 != null
            ? countryCodeISOAlpha3.value
            : this.countryCodeISOAlpha3),
        countryCodeISONumeric: (countryCodeISONumeric != null
            ? countryCodeISONumeric.value
            : this.countryCodeISONumeric),
        countryCodePhone: (countryCodePhone != null
            ? countryCodePhone.value
            : this.countryCodePhone),
        flagImage: (flagImage != null ? flagImage.value : this.flagImage),
        metric: (metric != null ? metric.value : this.metric),
        currencyId: (currencyId != null ? currencyId.value : this.currencyId),
        currency: (currency != null ? currency.value : this.currency),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        inactive: (inactive != null ? inactive.value : this.inactive),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsAvailableWidgetAvailableWidget {
  WebApiModulesSettingsAvailableWidgetAvailableWidget({
    this.widgetId,
    this.widget,
    this.value,
    this.text,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsAvailableWidgetAvailableWidget.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsAvailableWidgetAvailableWidgetFromJson(json);

  @JsonKey(name: 'WidgetId', includeIfNull: false)
  final String? widgetId;
  @JsonKey(name: 'Widget', includeIfNull: false)
  final String? widget;
  @JsonKey(name: 'value', includeIfNull: false)
  final String? value;
  @JsonKey(name: 'text', includeIfNull: false)
  final String? text;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsAvailableWidgetAvailableWidgetFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsAvailableWidgetAvailableWidgetToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsAvailableWidgetAvailableWidgetToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsAvailableWidgetAvailableWidget &&
            (identical(other.widgetId, widgetId) ||
                const DeepCollectionEquality()
                    .equals(other.widgetId, widgetId)) &&
            (identical(other.widget, widget) ||
                const DeepCollectionEquality().equals(other.widget, widget)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)) &&
            (identical(other.text, text) ||
                const DeepCollectionEquality().equals(other.text, text)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(widgetId) ^
      const DeepCollectionEquality().hash(widget) ^
      const DeepCollectionEquality().hash(value) ^
      const DeepCollectionEquality().hash(text) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesSettingsAvailableWidgetAvailableWidgetExtension
    on WebApiModulesSettingsAvailableWidgetAvailableWidget {
  WebApiModulesSettingsAvailableWidgetAvailableWidget copyWith(
      {String? widgetId,
      String? widget,
      String? value,
      String? text,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsAvailableWidgetAvailableWidget(
        widgetId: widgetId ?? this.widgetId,
        widget: widget ?? this.widget,
        value: value ?? this.value,
        text: text ?? this.text,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesSettingsAvailableWidgetAvailableWidget copyWithWrapped(
      {Wrapped<String?>? widgetId,
      Wrapped<String?>? widget,
      Wrapped<String?>? value,
      Wrapped<String?>? text,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesSettingsAvailableWidgetAvailableWidget(
        widgetId: (widgetId != null ? widgetId.value : this.widgetId),
        widget: (widget != null ? widget.value : this.widget),
        value: (value != null ? value.value : this.value),
        text: (text != null ? text.value : this.text),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsCurrencySettingsCurrencyCurrency {
  WebApiModulesSettingsCurrencySettingsCurrencyCurrency({
    this.currencyId,
    this.currency,
    this.currencyISOName,
    this.currencyCode,
    this.currencySymbol,
    this.downloadExchangeRates,
    this.inactive,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsCurrencySettingsCurrencyCurrency.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsCurrencySettingsCurrencyCurrencyFromJson(json);

  @JsonKey(name: 'CurrencyId', includeIfNull: false)
  final String? currencyId;
  @JsonKey(name: 'Currency', includeIfNull: false)
  final String? currency;
  @JsonKey(name: 'CurrencyISOName', includeIfNull: false)
  final String? currencyISOName;
  @JsonKey(name: 'CurrencyCode', includeIfNull: false)
  final String? currencyCode;
  @JsonKey(name: 'CurrencySymbol', includeIfNull: false)
  final String? currencySymbol;
  @JsonKey(name: 'DownloadExchangeRates', includeIfNull: false)
  final bool? downloadExchangeRates;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsCurrencySettingsCurrencyCurrencyFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsCurrencySettingsCurrencyCurrencyToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsCurrencySettingsCurrencyCurrencyToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsCurrencySettingsCurrencyCurrency &&
            (identical(other.currencyId, currencyId) ||
                const DeepCollectionEquality()
                    .equals(other.currencyId, currencyId)) &&
            (identical(other.currency, currency) ||
                const DeepCollectionEquality()
                    .equals(other.currency, currency)) &&
            (identical(other.currencyISOName, currencyISOName) ||
                const DeepCollectionEquality()
                    .equals(other.currencyISOName, currencyISOName)) &&
            (identical(other.currencyCode, currencyCode) ||
                const DeepCollectionEquality()
                    .equals(other.currencyCode, currencyCode)) &&
            (identical(other.currencySymbol, currencySymbol) ||
                const DeepCollectionEquality()
                    .equals(other.currencySymbol, currencySymbol)) &&
            (identical(other.downloadExchangeRates, downloadExchangeRates) ||
                const DeepCollectionEquality().equals(
                    other.downloadExchangeRates, downloadExchangeRates)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(currencyId) ^
      const DeepCollectionEquality().hash(currency) ^
      const DeepCollectionEquality().hash(currencyISOName) ^
      const DeepCollectionEquality().hash(currencyCode) ^
      const DeepCollectionEquality().hash(currencySymbol) ^
      const DeepCollectionEquality().hash(downloadExchangeRates) ^
      const DeepCollectionEquality().hash(inactive) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesSettingsCurrencySettingsCurrencyCurrencyExtension
    on WebApiModulesSettingsCurrencySettingsCurrencyCurrency {
  WebApiModulesSettingsCurrencySettingsCurrencyCurrency copyWith(
      {String? currencyId,
      String? currency,
      String? currencyISOName,
      String? currencyCode,
      String? currencySymbol,
      bool? downloadExchangeRates,
      bool? inactive,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsCurrencySettingsCurrencyCurrency(
        currencyId: currencyId ?? this.currencyId,
        currency: currency ?? this.currency,
        currencyISOName: currencyISOName ?? this.currencyISOName,
        currencyCode: currencyCode ?? this.currencyCode,
        currencySymbol: currencySymbol ?? this.currencySymbol,
        downloadExchangeRates:
            downloadExchangeRates ?? this.downloadExchangeRates,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesSettingsCurrencySettingsCurrencyCurrency copyWithWrapped(
      {Wrapped<String?>? currencyId,
      Wrapped<String?>? currency,
      Wrapped<String?>? currencyISOName,
      Wrapped<String?>? currencyCode,
      Wrapped<String?>? currencySymbol,
      Wrapped<bool?>? downloadExchangeRates,
      Wrapped<bool?>? inactive,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesSettingsCurrencySettingsCurrencyCurrency(
        currencyId: (currencyId != null ? currencyId.value : this.currencyId),
        currency: (currency != null ? currency.value : this.currency),
        currencyISOName: (currencyISOName != null
            ? currencyISOName.value
            : this.currencyISOName),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        currencySymbol: (currencySymbol != null
            ? currencySymbol.value
            : this.currencySymbol),
        downloadExchangeRates: (downloadExchangeRates != null
            ? downloadExchangeRates.value
            : this.downloadExchangeRates),
        inactive: (inactive != null ? inactive.value : this.inactive),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse {
  WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse({
    this.warehouseId,
    this.warehouse,
    this.warehouseCode,
    this.taxOptionId,
    this.taxOption,
    this.taxCountry,
    this.taxRule,
    this.rentalTaxRate1,
    this.rentalTaxRate2,
    this.rentalExempt,
    this.salesTaxRate1,
    this.salesTaxRate2,
    this.salesExempt,
    this.laborTaxRate1,
    this.laborTaxRate2,
    this.laborExempt,
    this.attention,
    this.address1,
    this.address2,
    this.city,
    this.zipCode,
    this.state,
    this.countryId,
    this.country,
    this.countryCodeIsoAlpha2,
    this.countryCodePhone,
    this.phone,
    this.fax,
    this.assignBarCodesBy,
    this.salesMarkupPercent,
    this.partsMarkupPercent,
    this.markupSales,
    this.markupParts,
    this.includeFreightInSalesCost,
    this.includeFreightInPartsCost,
    this.receiveVendorBarCodes,
    this.allowNegativeInventory,
    this.defaultDeliveryType,
    this.exchangedItemsRepairByDefault,
    this.stagingCompleteComponents,
    this.checkInSortBy,
    this.defaultPackageTruckScheduleMethod,
    this.stageQuantityAccessories,
    this.promptForCheckOutExceptions,
    this.promptForCheckInExceptions,
    this.deleteAssetLocationOnOut,
    this.deleteAssetConditionOnOut,
    this.stagingShowCheckedInHoldingItems,
    this.poDeliveryType,
    this.availabilityCacheDays,
    this.availabilityPreserveConflicts,
    this.defaultRepairDays,
    this.quikLocateDefaultDeliveryType,
    this.repairBillableOrderAgentFrom,
    this.returnListPrintInQuantity,
    this.returnListPrintOutQuantity,
    this.availabilityIncludePurchaseOrders,
    this.availabilityPurchaseOrderLateDays,
    this.regionId,
    this.region,
    this.color,
    this.availabilityLateDays,
    this.useBarCodeLabelDesigner,
    this.inventoryLabelDesignId,
    this.inventoryLabelDesign,
    this.itemLabelDesignId,
    this.itemLabelDesign,
    this.dataWarehouseExcludeFromROA,
    this.availabilityLateHours,
    this.availabilityStartHour,
    this.availabilityStopHour,
    this.includeTaxInAssetValue,
    this.productionExchangeAvailabilityPercent,
    this.productionexchangeEnabled,
    this.productionExchangeWarehouseCode,
    this.week4RatePercent,
    this.glSuffix,
    this.requireScanVendorBarCodeOnReturn,
    this.glPrefix,
    this.internalDealId,
    this.internalDeal,
    this.internalVendorId,
    this.internalVendor,
    this.calculateOnPoAfterApproved,
    this.transferDefaultReturnToWarehouse,
    this.availabilityCalculateInBackground,
    this.quikLocateCannotTransfer,
    this.quikLocateDefaultRequiredDate,
    this.quikLocateRequiredDaysBefore,
    this.calculateDefaultRentalRates,
    this.rentalDailyRatePercentOfReplacementCost,
    this.rentalWeeklyRateMultipleOfDailyRate,
    this.checkInEnableScanningToAisleShelf,
    this.currencyId,
    this.currencyCode,
    this.currency,
    this.rentalBarCodeRangeId,
    this.rentalBarCodeRange,
    this.rentalFixedAssetBarCodeRangeId,
    this.rentalFixedAssetBarCodeRange,
    this.salesBarCodeRangeId,
    this.salesBarCodeRange,
    this.autoUpdateUnitValueOnReceivingHigherCostItem,
    this.markupReplacementCost,
    this.replacementCostMarkupPercent,
    this.availabilityHourlyDays,
    this.transferAvailabilityDays,
    this.salesRestockPercent,
    this.availabilityExcludeConsigned,
    this.availabilityRequireConsignedReserved,
    this.availabilityEnableQcDelay,
    this.availabilityQcDelayExcludeWeekend,
    this.availabilityQcDelayExcludeHoliday,
    this.availabilityQcDelayIndefinite,
    this.defaultNoChargePrintItemsAddedToOrderAtStaging,
    this.quikReceiptEnable,
    this.storageContainerCheckInEnable,
    this.storageContainerStagingEnable,
    this.storageContainerRescanRequired,
    this.quikReceiptTermsConditionsId,
    this.quikReceiptTermsConditions,
    this.disableSubstituteNote,
    this.daysToExpireSuspendedSessions,
    this.inactive,
    this.dateStamp,
    this.officeLocationIds,
    this.officeLocations,
    this.copyRates,
    this.copyFromWarehouseId,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWarehouseSettingsWarehouseWarehouseFromJson(json);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'TaxOptionId', includeIfNull: false)
  final String? taxOptionId;
  @JsonKey(name: 'TaxOption', includeIfNull: false)
  final String? taxOption;
  @JsonKey(name: 'TaxCountry', includeIfNull: false)
  final String? taxCountry;
  @JsonKey(name: 'TaxRule', includeIfNull: false)
  final String? taxRule;
  @JsonKey(name: 'RentalTaxRate1', includeIfNull: false)
  final double? rentalTaxRate1;
  @JsonKey(name: 'RentalTaxRate2', includeIfNull: false)
  final double? rentalTaxRate2;
  @JsonKey(name: 'RentalExempt', includeIfNull: false)
  final bool? rentalExempt;
  @JsonKey(name: 'SalesTaxRate1', includeIfNull: false)
  final double? salesTaxRate1;
  @JsonKey(name: 'SalesTaxRate2', includeIfNull: false)
  final double? salesTaxRate2;
  @JsonKey(name: 'SalesExempt', includeIfNull: false)
  final bool? salesExempt;
  @JsonKey(name: 'LaborTaxRate1', includeIfNull: false)
  final double? laborTaxRate1;
  @JsonKey(name: 'LaborTaxRate2', includeIfNull: false)
  final double? laborTaxRate2;
  @JsonKey(name: 'LaborExempt', includeIfNull: false)
  final bool? laborExempt;
  @JsonKey(name: 'Attention', includeIfNull: false)
  final String? attention;
  @JsonKey(name: 'Address1', includeIfNull: false)
  final String? address1;
  @JsonKey(name: 'Address2', includeIfNull: false)
  final String? address2;
  @JsonKey(name: 'City', includeIfNull: false)
  final String? city;
  @JsonKey(name: 'ZipCode', includeIfNull: false)
  final String? zipCode;
  @JsonKey(name: 'State', includeIfNull: false)
  final String? state;
  @JsonKey(name: 'CountryId', includeIfNull: false)
  final String? countryId;
  @JsonKey(name: 'Country', includeIfNull: false)
  final String? country;
  @JsonKey(name: 'CountryCodeIsoAlpha2', includeIfNull: false)
  final String? countryCodeIsoAlpha2;
  @JsonKey(name: 'CountryCodePhone', includeIfNull: false)
  final int? countryCodePhone;
  @JsonKey(name: 'Phone', includeIfNull: false)
  final String? phone;
  @JsonKey(name: 'Fax', includeIfNull: false)
  final String? fax;
  @JsonKey(name: 'AssignBarCodesBy', includeIfNull: false)
  final String? assignBarCodesBy;
  @JsonKey(name: 'SalesMarkupPercent', includeIfNull: false)
  final double? salesMarkupPercent;
  @JsonKey(name: 'PartsMarkupPercent', includeIfNull: false)
  final double? partsMarkupPercent;
  @JsonKey(name: 'MarkupSales', includeIfNull: false)
  final bool? markupSales;
  @JsonKey(name: 'MarkupParts', includeIfNull: false)
  final bool? markupParts;
  @JsonKey(name: 'IncludeFreightInSalesCost', includeIfNull: false)
  final bool? includeFreightInSalesCost;
  @JsonKey(name: 'IncludeFreightInPartsCost', includeIfNull: false)
  final bool? includeFreightInPartsCost;
  @JsonKey(name: 'ReceiveVendorBarCodes', includeIfNull: false)
  final bool? receiveVendorBarCodes;
  @JsonKey(name: 'AllowNegativeInventory', includeIfNull: false)
  final bool? allowNegativeInventory;
  @JsonKey(name: 'DefaultDeliveryType', includeIfNull: false)
  final String? defaultDeliveryType;
  @JsonKey(name: 'ExchangedItemsRepairByDefault', includeIfNull: false)
  final bool? exchangedItemsRepairByDefault;
  @JsonKey(name: 'StagingCompleteComponents', includeIfNull: false)
  final String? stagingCompleteComponents;
  @JsonKey(name: 'CheckInSortBy', includeIfNull: false)
  final String? checkInSortBy;
  @JsonKey(name: 'DefaultPackageTruckScheduleMethod', includeIfNull: false)
  final String? defaultPackageTruckScheduleMethod;
  @JsonKey(name: 'StageQuantityAccessories', includeIfNull: false)
  final bool? stageQuantityAccessories;
  @JsonKey(name: 'PromptForCheckOutExceptions', includeIfNull: false)
  final bool? promptForCheckOutExceptions;
  @JsonKey(name: 'PromptForCheckInExceptions', includeIfNull: false)
  final bool? promptForCheckInExceptions;
  @JsonKey(name: 'DeleteAssetLocationOnOut', includeIfNull: false)
  final bool? deleteAssetLocationOnOut;
  @JsonKey(name: 'DeleteAssetConditionOnOut', includeIfNull: false)
  final bool? deleteAssetConditionOnOut;
  @JsonKey(name: 'StagingShowCheckedInHoldingItems', includeIfNull: false)
  final bool? stagingShowCheckedInHoldingItems;
  @JsonKey(name: 'PoDeliveryType', includeIfNull: false)
  final String? poDeliveryType;
  @JsonKey(name: 'AvailabilityCacheDays', includeIfNull: false)
  final int? availabilityCacheDays;
  @JsonKey(name: 'AvailabilityPreserveConflicts', includeIfNull: false)
  final bool? availabilityPreserveConflicts;
  @JsonKey(name: 'DefaultRepairDays', includeIfNull: false)
  final int? defaultRepairDays;
  @JsonKey(name: 'QuikLocateDefaultDeliveryType', includeIfNull: false)
  final String? quikLocateDefaultDeliveryType;
  @JsonKey(name: 'RepairBillableOrderAgentFrom', includeIfNull: false)
  final String? repairBillableOrderAgentFrom;
  @JsonKey(name: 'ReturnListPrintInQuantity', includeIfNull: false)
  final bool? returnListPrintInQuantity;
  @JsonKey(name: 'ReturnListPrintOutQuantity', includeIfNull: false)
  final bool? returnListPrintOutQuantity;
  @JsonKey(name: 'AvailabilityIncludePurchaseOrders', includeIfNull: false)
  final bool? availabilityIncludePurchaseOrders;
  @JsonKey(name: 'AvailabilityPurchaseOrderLateDays', includeIfNull: false)
  final int? availabilityPurchaseOrderLateDays;
  @JsonKey(name: 'RegionId', includeIfNull: false)
  final String? regionId;
  @JsonKey(name: 'Region', includeIfNull: false)
  final String? region;
  @JsonKey(name: 'Color', includeIfNull: false)
  final String? color;
  @JsonKey(name: 'AvailabilityLateDays', includeIfNull: false)
  final int? availabilityLateDays;
  @JsonKey(name: 'UseBarCodeLabelDesigner', includeIfNull: false)
  final bool? useBarCodeLabelDesigner;
  @JsonKey(name: 'InventoryLabelDesignId', includeIfNull: false)
  final String? inventoryLabelDesignId;
  @JsonKey(name: 'InventoryLabelDesign', includeIfNull: false)
  final String? inventoryLabelDesign;
  @JsonKey(name: 'ItemLabelDesignId', includeIfNull: false)
  final String? itemLabelDesignId;
  @JsonKey(name: 'ItemLabelDesign', includeIfNull: false)
  final String? itemLabelDesign;
  @JsonKey(name: 'DataWarehouseExcludeFromROA', includeIfNull: false)
  final bool? dataWarehouseExcludeFromROA;
  @JsonKey(name: 'AvailabilityLateHours', includeIfNull: false)
  final int? availabilityLateHours;
  @JsonKey(name: 'AvailabilityStartHour', includeIfNull: false)
  final int? availabilityStartHour;
  @JsonKey(name: 'AvailabilityStopHour', includeIfNull: false)
  final int? availabilityStopHour;
  @JsonKey(name: 'IncludeTaxInAssetValue', includeIfNull: false)
  final bool? includeTaxInAssetValue;
  @JsonKey(name: 'ProductionExchangeAvailabilityPercent', includeIfNull: false)
  final int? productionExchangeAvailabilityPercent;
  @JsonKey(name: 'ProductionexchangeEnabled', includeIfNull: false)
  final bool? productionexchangeEnabled;
  @JsonKey(name: 'ProductionExchangeWarehouseCode', includeIfNull: false)
  final String? productionExchangeWarehouseCode;
  @JsonKey(name: 'Week4RatePercent', includeIfNull: false)
  final double? week4RatePercent;
  @JsonKey(name: 'GlSuffix', includeIfNull: false)
  final String? glSuffix;
  @JsonKey(name: 'RequireScanVendorBarCodeOnReturn', includeIfNull: false)
  final bool? requireScanVendorBarCodeOnReturn;
  @JsonKey(name: 'GlPrefix', includeIfNull: false)
  final String? glPrefix;
  @JsonKey(name: 'InternalDealId', includeIfNull: false)
  final String? internalDealId;
  @JsonKey(name: 'InternalDeal', includeIfNull: false)
  final String? internalDeal;
  @JsonKey(name: 'InternalVendorId', includeIfNull: false)
  final String? internalVendorId;
  @JsonKey(name: 'InternalVendor', includeIfNull: false)
  final String? internalVendor;
  @JsonKey(name: 'CalculateOnPoAfterApproved', includeIfNull: false)
  final bool? calculateOnPoAfterApproved;
  @JsonKey(name: 'TransferDefaultReturnToWarehouse', includeIfNull: false)
  final bool? transferDefaultReturnToWarehouse;
  @JsonKey(name: 'AvailabilityCalculateInBackground', includeIfNull: false)
  final bool? availabilityCalculateInBackground;
  @JsonKey(name: 'QuikLocateCannotTransfer', includeIfNull: false)
  final bool? quikLocateCannotTransfer;
  @JsonKey(name: 'QuikLocateDefaultRequiredDate', includeIfNull: false)
  final String? quikLocateDefaultRequiredDate;
  @JsonKey(name: 'QuikLocateRequiredDaysBefore', includeIfNull: false)
  final int? quikLocateRequiredDaysBefore;
  @JsonKey(name: 'CalculateDefaultRentalRates', includeIfNull: false)
  final bool? calculateDefaultRentalRates;
  @JsonKey(
      name: 'RentalDailyRatePercentOfReplacementCost', includeIfNull: false)
  final double? rentalDailyRatePercentOfReplacementCost;
  @JsonKey(name: 'RentalWeeklyRateMultipleOfDailyRate', includeIfNull: false)
  final double? rentalWeeklyRateMultipleOfDailyRate;
  @JsonKey(name: 'CheckInEnableScanningToAisleShelf', includeIfNull: false)
  final bool? checkInEnableScanningToAisleShelf;
  @JsonKey(name: 'CurrencyId', includeIfNull: false)
  final String? currencyId;
  @JsonKey(name: 'CurrencyCode', includeIfNull: false)
  final String? currencyCode;
  @JsonKey(name: 'Currency', includeIfNull: false)
  final String? currency;
  @JsonKey(name: 'RentalBarCodeRangeId', includeIfNull: false)
  final String? rentalBarCodeRangeId;
  @JsonKey(name: 'RentalBarCodeRange', includeIfNull: false)
  final String? rentalBarCodeRange;
  @JsonKey(name: 'RentalFixedAssetBarCodeRangeId', includeIfNull: false)
  final String? rentalFixedAssetBarCodeRangeId;
  @JsonKey(name: 'RentalFixedAssetBarCodeRange', includeIfNull: false)
  final String? rentalFixedAssetBarCodeRange;
  @JsonKey(name: 'SalesBarCodeRangeId', includeIfNull: false)
  final String? salesBarCodeRangeId;
  @JsonKey(name: 'SalesBarCodeRange', includeIfNull: false)
  final String? salesBarCodeRange;
  @JsonKey(
      name: 'AutoUpdateUnitValueOnReceivingHigherCostItem',
      includeIfNull: false)
  final bool? autoUpdateUnitValueOnReceivingHigherCostItem;
  @JsonKey(name: 'MarkupReplacementCost', includeIfNull: false)
  final bool? markupReplacementCost;
  @JsonKey(name: 'ReplacementCostMarkupPercent', includeIfNull: false)
  final double? replacementCostMarkupPercent;
  @JsonKey(name: 'AvailabilityHourlyDays', includeIfNull: false)
  final int? availabilityHourlyDays;
  @JsonKey(name: 'TransferAvailabilityDays', includeIfNull: false)
  final int? transferAvailabilityDays;
  @JsonKey(name: 'SalesRestockPercent', includeIfNull: false)
  final double? salesRestockPercent;
  @JsonKey(name: 'AvailabilityExcludeConsigned', includeIfNull: false)
  final bool? availabilityExcludeConsigned;
  @JsonKey(name: 'AvailabilityRequireConsignedReserved', includeIfNull: false)
  final bool? availabilityRequireConsignedReserved;
  @JsonKey(name: 'AvailabilityEnableQcDelay', includeIfNull: false)
  final bool? availabilityEnableQcDelay;
  @JsonKey(name: 'AvailabilityQcDelayExcludeWeekend', includeIfNull: false)
  final bool? availabilityQcDelayExcludeWeekend;
  @JsonKey(name: 'AvailabilityQcDelayExcludeHoliday', includeIfNull: false)
  final bool? availabilityQcDelayExcludeHoliday;
  @JsonKey(name: 'AvailabilityQcDelayIndefinite', includeIfNull: false)
  final bool? availabilityQcDelayIndefinite;
  @JsonKey(
      name: 'DefaultNoChargePrintItemsAddedToOrderAtStaging',
      includeIfNull: false)
  final bool? defaultNoChargePrintItemsAddedToOrderAtStaging;
  @JsonKey(name: 'QuikReceiptEnable', includeIfNull: false)
  final bool? quikReceiptEnable;
  @JsonKey(name: 'StorageContainerCheckInEnable', includeIfNull: false)
  final bool? storageContainerCheckInEnable;
  @JsonKey(name: 'StorageContainerStagingEnable', includeIfNull: false)
  final bool? storageContainerStagingEnable;
  @JsonKey(name: 'StorageContainerRescanRequired', includeIfNull: false)
  final bool? storageContainerRescanRequired;
  @JsonKey(name: 'QuikReceiptTermsConditionsId', includeIfNull: false)
  final String? quikReceiptTermsConditionsId;
  @JsonKey(name: 'QuikReceiptTermsConditions', includeIfNull: false)
  final String? quikReceiptTermsConditions;
  @JsonKey(name: 'DisableSubstituteNote', includeIfNull: false)
  final bool? disableSubstituteNote;
  @JsonKey(name: 'DaysToExpireSuspendedSessions', includeIfNull: false)
  final int? daysToExpireSuspendedSessions;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'OfficeLocationIds', includeIfNull: false)
  final String? officeLocationIds;
  @JsonKey(name: 'OfficeLocations', includeIfNull: false)
  final String? officeLocations;
  @JsonKey(name: 'CopyRates', includeIfNull: false)
  final bool? copyRates;
  @JsonKey(name: 'CopyFromWarehouseId', includeIfNull: false)
  final String? copyFromWarehouseId;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWarehouseSettingsWarehouseWarehouseFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWarehouseSettingsWarehouseWarehouseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWarehouseSettingsWarehouseWarehouseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.taxOptionId, taxOptionId) ||
                const DeepCollectionEquality()
                    .equals(other.taxOptionId, taxOptionId)) &&
            (identical(other.taxOption, taxOption) ||
                const DeepCollectionEquality()
                    .equals(other.taxOption, taxOption)) &&
            (identical(other.taxCountry, taxCountry) ||
                const DeepCollectionEquality()
                    .equals(other.taxCountry, taxCountry)) &&
            (identical(other.taxRule, taxRule) ||
                const DeepCollectionEquality()
                    .equals(other.taxRule, taxRule)) &&
            (identical(other.rentalTaxRate1, rentalTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.rentalTaxRate1, rentalTaxRate1)) &&
            (identical(other.rentalTaxRate2, rentalTaxRate2) ||
                const DeepCollectionEquality()
                    .equals(other.rentalTaxRate2, rentalTaxRate2)) &&
            (identical(other.rentalExempt, rentalExempt) ||
                const DeepCollectionEquality()
                    .equals(other.rentalExempt, rentalExempt)) &&
            (identical(other.salesTaxRate1, salesTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.salesTaxRate1, salesTaxRate1)) &&
            (identical(other.salesTaxRate2, salesTaxRate2) ||
                const DeepCollectionEquality()
                    .equals(other.salesTaxRate2, salesTaxRate2)) &&
            (identical(other.salesExempt, salesExempt) ||
                const DeepCollectionEquality()
                    .equals(other.salesExempt, salesExempt)) &&
            (identical(other.laborTaxRate1, laborTaxRate1) ||
                const DeepCollectionEquality()
                    .equals(other.laborTaxRate1, laborTaxRate1)) &&
            (identical(other.laborTaxRate2, laborTaxRate2) ||
                const DeepCollectionEquality()
                    .equals(other.laborTaxRate2, laborTaxRate2)) &&
            (identical(other.laborExempt, laborExempt) ||
                const DeepCollectionEquality()
                    .equals(other.laborExempt, laborExempt)) &&
            (identical(other.attention, attention) ||
                const DeepCollectionEquality()
                    .equals(other.attention, attention)) &&
            (identical(other.address1, address1) ||
                const DeepCollectionEquality()
                    .equals(other.address1, address1)) &&
            (identical(other.address2, address2) ||
                const DeepCollectionEquality()
                    .equals(other.address2, address2)) &&
            (identical(other.city, city) ||
                const DeepCollectionEquality().equals(other.city, city)) &&
            (identical(other.zipCode, zipCode) ||
                const DeepCollectionEquality()
                    .equals(other.zipCode, zipCode)) &&
            (identical(other.state, state) ||
                const DeepCollectionEquality().equals(other.state, state)) &&
            (identical(other.countryId, countryId) ||
                const DeepCollectionEquality().equals(other.countryId, countryId)) &&
            (identical(other.country, country) || const DeepCollectionEquality().equals(other.country, country)) &&
            (identical(other.countryCodeIsoAlpha2, countryCodeIsoAlpha2) || const DeepCollectionEquality().equals(other.countryCodeIsoAlpha2, countryCodeIsoAlpha2)) &&
            (identical(other.countryCodePhone, countryCodePhone) || const DeepCollectionEquality().equals(other.countryCodePhone, countryCodePhone)) &&
            (identical(other.phone, phone) || const DeepCollectionEquality().equals(other.phone, phone)) &&
            (identical(other.fax, fax) || const DeepCollectionEquality().equals(other.fax, fax)) &&
            (identical(other.assignBarCodesBy, assignBarCodesBy) || const DeepCollectionEquality().equals(other.assignBarCodesBy, assignBarCodesBy)) &&
            (identical(other.salesMarkupPercent, salesMarkupPercent) || const DeepCollectionEquality().equals(other.salesMarkupPercent, salesMarkupPercent)) &&
            (identical(other.partsMarkupPercent, partsMarkupPercent) || const DeepCollectionEquality().equals(other.partsMarkupPercent, partsMarkupPercent)) &&
            (identical(other.markupSales, markupSales) || const DeepCollectionEquality().equals(other.markupSales, markupSales)) &&
            (identical(other.markupParts, markupParts) || const DeepCollectionEquality().equals(other.markupParts, markupParts)) &&
            (identical(other.includeFreightInSalesCost, includeFreightInSalesCost) || const DeepCollectionEquality().equals(other.includeFreightInSalesCost, includeFreightInSalesCost)) &&
            (identical(other.includeFreightInPartsCost, includeFreightInPartsCost) || const DeepCollectionEquality().equals(other.includeFreightInPartsCost, includeFreightInPartsCost)) &&
            (identical(other.receiveVendorBarCodes, receiveVendorBarCodes) || const DeepCollectionEquality().equals(other.receiveVendorBarCodes, receiveVendorBarCodes)) &&
            (identical(other.allowNegativeInventory, allowNegativeInventory) || const DeepCollectionEquality().equals(other.allowNegativeInventory, allowNegativeInventory)) &&
            (identical(other.defaultDeliveryType, defaultDeliveryType) || const DeepCollectionEquality().equals(other.defaultDeliveryType, defaultDeliveryType)) &&
            (identical(other.exchangedItemsRepairByDefault, exchangedItemsRepairByDefault) || const DeepCollectionEquality().equals(other.exchangedItemsRepairByDefault, exchangedItemsRepairByDefault)) &&
            (identical(other.stagingCompleteComponents, stagingCompleteComponents) || const DeepCollectionEquality().equals(other.stagingCompleteComponents, stagingCompleteComponents)) &&
            (identical(other.checkInSortBy, checkInSortBy) || const DeepCollectionEquality().equals(other.checkInSortBy, checkInSortBy)) &&
            (identical(other.defaultPackageTruckScheduleMethod, defaultPackageTruckScheduleMethod) || const DeepCollectionEquality().equals(other.defaultPackageTruckScheduleMethod, defaultPackageTruckScheduleMethod)) &&
            (identical(other.stageQuantityAccessories, stageQuantityAccessories) || const DeepCollectionEquality().equals(other.stageQuantityAccessories, stageQuantityAccessories)) &&
            (identical(other.promptForCheckOutExceptions, promptForCheckOutExceptions) || const DeepCollectionEquality().equals(other.promptForCheckOutExceptions, promptForCheckOutExceptions)) &&
            (identical(other.promptForCheckInExceptions, promptForCheckInExceptions) || const DeepCollectionEquality().equals(other.promptForCheckInExceptions, promptForCheckInExceptions)) &&
            (identical(other.deleteAssetLocationOnOut, deleteAssetLocationOnOut) || const DeepCollectionEquality().equals(other.deleteAssetLocationOnOut, deleteAssetLocationOnOut)) &&
            (identical(other.deleteAssetConditionOnOut, deleteAssetConditionOnOut) || const DeepCollectionEquality().equals(other.deleteAssetConditionOnOut, deleteAssetConditionOnOut)) &&
            (identical(other.stagingShowCheckedInHoldingItems, stagingShowCheckedInHoldingItems) || const DeepCollectionEquality().equals(other.stagingShowCheckedInHoldingItems, stagingShowCheckedInHoldingItems)) &&
            (identical(other.poDeliveryType, poDeliveryType) || const DeepCollectionEquality().equals(other.poDeliveryType, poDeliveryType)) &&
            (identical(other.availabilityCacheDays, availabilityCacheDays) || const DeepCollectionEquality().equals(other.availabilityCacheDays, availabilityCacheDays)) &&
            (identical(other.availabilityPreserveConflicts, availabilityPreserveConflicts) || const DeepCollectionEquality().equals(other.availabilityPreserveConflicts, availabilityPreserveConflicts)) &&
            (identical(other.defaultRepairDays, defaultRepairDays) || const DeepCollectionEquality().equals(other.defaultRepairDays, defaultRepairDays)) &&
            (identical(other.quikLocateDefaultDeliveryType, quikLocateDefaultDeliveryType) || const DeepCollectionEquality().equals(other.quikLocateDefaultDeliveryType, quikLocateDefaultDeliveryType)) &&
            (identical(other.repairBillableOrderAgentFrom, repairBillableOrderAgentFrom) || const DeepCollectionEquality().equals(other.repairBillableOrderAgentFrom, repairBillableOrderAgentFrom)) &&
            (identical(other.returnListPrintInQuantity, returnListPrintInQuantity) || const DeepCollectionEquality().equals(other.returnListPrintInQuantity, returnListPrintInQuantity)) &&
            (identical(other.returnListPrintOutQuantity, returnListPrintOutQuantity) || const DeepCollectionEquality().equals(other.returnListPrintOutQuantity, returnListPrintOutQuantity)) &&
            (identical(other.availabilityIncludePurchaseOrders, availabilityIncludePurchaseOrders) || const DeepCollectionEquality().equals(other.availabilityIncludePurchaseOrders, availabilityIncludePurchaseOrders)) &&
            (identical(other.availabilityPurchaseOrderLateDays, availabilityPurchaseOrderLateDays) || const DeepCollectionEquality().equals(other.availabilityPurchaseOrderLateDays, availabilityPurchaseOrderLateDays)) &&
            (identical(other.regionId, regionId) || const DeepCollectionEquality().equals(other.regionId, regionId)) &&
            (identical(other.region, region) || const DeepCollectionEquality().equals(other.region, region)) &&
            (identical(other.color, color) || const DeepCollectionEquality().equals(other.color, color)) &&
            (identical(other.availabilityLateDays, availabilityLateDays) || const DeepCollectionEquality().equals(other.availabilityLateDays, availabilityLateDays)) &&
            (identical(other.useBarCodeLabelDesigner, useBarCodeLabelDesigner) || const DeepCollectionEquality().equals(other.useBarCodeLabelDesigner, useBarCodeLabelDesigner)) &&
            (identical(other.inventoryLabelDesignId, inventoryLabelDesignId) || const DeepCollectionEquality().equals(other.inventoryLabelDesignId, inventoryLabelDesignId)) &&
            (identical(other.inventoryLabelDesign, inventoryLabelDesign) || const DeepCollectionEquality().equals(other.inventoryLabelDesign, inventoryLabelDesign)) &&
            (identical(other.itemLabelDesignId, itemLabelDesignId) || const DeepCollectionEquality().equals(other.itemLabelDesignId, itemLabelDesignId)) &&
            (identical(other.itemLabelDesign, itemLabelDesign) || const DeepCollectionEquality().equals(other.itemLabelDesign, itemLabelDesign)) &&
            (identical(other.dataWarehouseExcludeFromROA, dataWarehouseExcludeFromROA) || const DeepCollectionEquality().equals(other.dataWarehouseExcludeFromROA, dataWarehouseExcludeFromROA)) &&
            (identical(other.availabilityLateHours, availabilityLateHours) || const DeepCollectionEquality().equals(other.availabilityLateHours, availabilityLateHours)) &&
            (identical(other.availabilityStartHour, availabilityStartHour) || const DeepCollectionEquality().equals(other.availabilityStartHour, availabilityStartHour)) &&
            (identical(other.availabilityStopHour, availabilityStopHour) || const DeepCollectionEquality().equals(other.availabilityStopHour, availabilityStopHour)) &&
            (identical(other.includeTaxInAssetValue, includeTaxInAssetValue) || const DeepCollectionEquality().equals(other.includeTaxInAssetValue, includeTaxInAssetValue)) &&
            (identical(other.productionExchangeAvailabilityPercent, productionExchangeAvailabilityPercent) || const DeepCollectionEquality().equals(other.productionExchangeAvailabilityPercent, productionExchangeAvailabilityPercent)) &&
            (identical(other.productionexchangeEnabled, productionexchangeEnabled) || const DeepCollectionEquality().equals(other.productionexchangeEnabled, productionexchangeEnabled)) &&
            (identical(other.productionExchangeWarehouseCode, productionExchangeWarehouseCode) || const DeepCollectionEquality().equals(other.productionExchangeWarehouseCode, productionExchangeWarehouseCode)) &&
            (identical(other.week4RatePercent, week4RatePercent) || const DeepCollectionEquality().equals(other.week4RatePercent, week4RatePercent)) &&
            (identical(other.glSuffix, glSuffix) || const DeepCollectionEquality().equals(other.glSuffix, glSuffix)) &&
            (identical(other.requireScanVendorBarCodeOnReturn, requireScanVendorBarCodeOnReturn) || const DeepCollectionEquality().equals(other.requireScanVendorBarCodeOnReturn, requireScanVendorBarCodeOnReturn)) &&
            (identical(other.glPrefix, glPrefix) || const DeepCollectionEquality().equals(other.glPrefix, glPrefix)) &&
            (identical(other.internalDealId, internalDealId) || const DeepCollectionEquality().equals(other.internalDealId, internalDealId)) &&
            (identical(other.internalDeal, internalDeal) || const DeepCollectionEquality().equals(other.internalDeal, internalDeal)) &&
            (identical(other.internalVendorId, internalVendorId) || const DeepCollectionEquality().equals(other.internalVendorId, internalVendorId)) &&
            (identical(other.internalVendor, internalVendor) || const DeepCollectionEquality().equals(other.internalVendor, internalVendor)) &&
            (identical(other.calculateOnPoAfterApproved, calculateOnPoAfterApproved) || const DeepCollectionEquality().equals(other.calculateOnPoAfterApproved, calculateOnPoAfterApproved)) &&
            (identical(other.transferDefaultReturnToWarehouse, transferDefaultReturnToWarehouse) || const DeepCollectionEquality().equals(other.transferDefaultReturnToWarehouse, transferDefaultReturnToWarehouse)) &&
            (identical(other.availabilityCalculateInBackground, availabilityCalculateInBackground) || const DeepCollectionEquality().equals(other.availabilityCalculateInBackground, availabilityCalculateInBackground)) &&
            (identical(other.quikLocateCannotTransfer, quikLocateCannotTransfer) || const DeepCollectionEquality().equals(other.quikLocateCannotTransfer, quikLocateCannotTransfer)) &&
            (identical(other.quikLocateDefaultRequiredDate, quikLocateDefaultRequiredDate) || const DeepCollectionEquality().equals(other.quikLocateDefaultRequiredDate, quikLocateDefaultRequiredDate)) &&
            (identical(other.quikLocateRequiredDaysBefore, quikLocateRequiredDaysBefore) || const DeepCollectionEquality().equals(other.quikLocateRequiredDaysBefore, quikLocateRequiredDaysBefore)) &&
            (identical(other.calculateDefaultRentalRates, calculateDefaultRentalRates) || const DeepCollectionEquality().equals(other.calculateDefaultRentalRates, calculateDefaultRentalRates)) &&
            (identical(other.rentalDailyRatePercentOfReplacementCost, rentalDailyRatePercentOfReplacementCost) || const DeepCollectionEquality().equals(other.rentalDailyRatePercentOfReplacementCost, rentalDailyRatePercentOfReplacementCost)) &&
            (identical(other.rentalWeeklyRateMultipleOfDailyRate, rentalWeeklyRateMultipleOfDailyRate) || const DeepCollectionEquality().equals(other.rentalWeeklyRateMultipleOfDailyRate, rentalWeeklyRateMultipleOfDailyRate)) &&
            (identical(other.checkInEnableScanningToAisleShelf, checkInEnableScanningToAisleShelf) || const DeepCollectionEquality().equals(other.checkInEnableScanningToAisleShelf, checkInEnableScanningToAisleShelf)) &&
            (identical(other.currencyId, currencyId) || const DeepCollectionEquality().equals(other.currencyId, currencyId)) &&
            (identical(other.currencyCode, currencyCode) || const DeepCollectionEquality().equals(other.currencyCode, currencyCode)) &&
            (identical(other.currency, currency) || const DeepCollectionEquality().equals(other.currency, currency)) &&
            (identical(other.rentalBarCodeRangeId, rentalBarCodeRangeId) || const DeepCollectionEquality().equals(other.rentalBarCodeRangeId, rentalBarCodeRangeId)) &&
            (identical(other.rentalBarCodeRange, rentalBarCodeRange) || const DeepCollectionEquality().equals(other.rentalBarCodeRange, rentalBarCodeRange)) &&
            (identical(other.rentalFixedAssetBarCodeRangeId, rentalFixedAssetBarCodeRangeId) || const DeepCollectionEquality().equals(other.rentalFixedAssetBarCodeRangeId, rentalFixedAssetBarCodeRangeId)) &&
            (identical(other.rentalFixedAssetBarCodeRange, rentalFixedAssetBarCodeRange) || const DeepCollectionEquality().equals(other.rentalFixedAssetBarCodeRange, rentalFixedAssetBarCodeRange)) &&
            (identical(other.salesBarCodeRangeId, salesBarCodeRangeId) || const DeepCollectionEquality().equals(other.salesBarCodeRangeId, salesBarCodeRangeId)) &&
            (identical(other.salesBarCodeRange, salesBarCodeRange) || const DeepCollectionEquality().equals(other.salesBarCodeRange, salesBarCodeRange)) &&
            (identical(other.autoUpdateUnitValueOnReceivingHigherCostItem, autoUpdateUnitValueOnReceivingHigherCostItem) || const DeepCollectionEquality().equals(other.autoUpdateUnitValueOnReceivingHigherCostItem, autoUpdateUnitValueOnReceivingHigherCostItem)) &&
            (identical(other.markupReplacementCost, markupReplacementCost) || const DeepCollectionEquality().equals(other.markupReplacementCost, markupReplacementCost)) &&
            (identical(other.replacementCostMarkupPercent, replacementCostMarkupPercent) || const DeepCollectionEquality().equals(other.replacementCostMarkupPercent, replacementCostMarkupPercent)) &&
            (identical(other.availabilityHourlyDays, availabilityHourlyDays) || const DeepCollectionEquality().equals(other.availabilityHourlyDays, availabilityHourlyDays)) &&
            (identical(other.transferAvailabilityDays, transferAvailabilityDays) || const DeepCollectionEquality().equals(other.transferAvailabilityDays, transferAvailabilityDays)) &&
            (identical(other.salesRestockPercent, salesRestockPercent) || const DeepCollectionEquality().equals(other.salesRestockPercent, salesRestockPercent)) &&
            (identical(other.availabilityExcludeConsigned, availabilityExcludeConsigned) || const DeepCollectionEquality().equals(other.availabilityExcludeConsigned, availabilityExcludeConsigned)) &&
            (identical(other.availabilityRequireConsignedReserved, availabilityRequireConsignedReserved) || const DeepCollectionEquality().equals(other.availabilityRequireConsignedReserved, availabilityRequireConsignedReserved)) &&
            (identical(other.availabilityEnableQcDelay, availabilityEnableQcDelay) || const DeepCollectionEquality().equals(other.availabilityEnableQcDelay, availabilityEnableQcDelay)) &&
            (identical(other.availabilityQcDelayExcludeWeekend, availabilityQcDelayExcludeWeekend) || const DeepCollectionEquality().equals(other.availabilityQcDelayExcludeWeekend, availabilityQcDelayExcludeWeekend)) &&
            (identical(other.availabilityQcDelayExcludeHoliday, availabilityQcDelayExcludeHoliday) || const DeepCollectionEquality().equals(other.availabilityQcDelayExcludeHoliday, availabilityQcDelayExcludeHoliday)) &&
            (identical(other.availabilityQcDelayIndefinite, availabilityQcDelayIndefinite) || const DeepCollectionEquality().equals(other.availabilityQcDelayIndefinite, availabilityQcDelayIndefinite)) &&
            (identical(other.defaultNoChargePrintItemsAddedToOrderAtStaging, defaultNoChargePrintItemsAddedToOrderAtStaging) || const DeepCollectionEquality().equals(other.defaultNoChargePrintItemsAddedToOrderAtStaging, defaultNoChargePrintItemsAddedToOrderAtStaging)) &&
            (identical(other.quikReceiptEnable, quikReceiptEnable) || const DeepCollectionEquality().equals(other.quikReceiptEnable, quikReceiptEnable)) &&
            (identical(other.storageContainerCheckInEnable, storageContainerCheckInEnable) || const DeepCollectionEquality().equals(other.storageContainerCheckInEnable, storageContainerCheckInEnable)) &&
            (identical(other.storageContainerStagingEnable, storageContainerStagingEnable) || const DeepCollectionEquality().equals(other.storageContainerStagingEnable, storageContainerStagingEnable)) &&
            (identical(other.storageContainerRescanRequired, storageContainerRescanRequired) || const DeepCollectionEquality().equals(other.storageContainerRescanRequired, storageContainerRescanRequired)) &&
            (identical(other.quikReceiptTermsConditionsId, quikReceiptTermsConditionsId) || const DeepCollectionEquality().equals(other.quikReceiptTermsConditionsId, quikReceiptTermsConditionsId)) &&
            (identical(other.quikReceiptTermsConditions, quikReceiptTermsConditions) || const DeepCollectionEquality().equals(other.quikReceiptTermsConditions, quikReceiptTermsConditions)) &&
            (identical(other.disableSubstituteNote, disableSubstituteNote) || const DeepCollectionEquality().equals(other.disableSubstituteNote, disableSubstituteNote)) &&
            (identical(other.daysToExpireSuspendedSessions, daysToExpireSuspendedSessions) || const DeepCollectionEquality().equals(other.daysToExpireSuspendedSessions, daysToExpireSuspendedSessions)) &&
            (identical(other.inactive, inactive) || const DeepCollectionEquality().equals(other.inactive, inactive)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.officeLocationIds, officeLocationIds) || const DeepCollectionEquality().equals(other.officeLocationIds, officeLocationIds)) &&
            (identical(other.officeLocations, officeLocations) || const DeepCollectionEquality().equals(other.officeLocations, officeLocations)) &&
            (identical(other.copyRates, copyRates) || const DeepCollectionEquality().equals(other.copyRates, copyRates)) &&
            (identical(other.copyFromWarehouseId, copyFromWarehouseId) || const DeepCollectionEquality().equals(other.copyFromWarehouseId, copyFromWarehouseId)) &&
            (identical(other.auditNote, auditNote) || const DeepCollectionEquality().equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(warehouse) ^
      const DeepCollectionEquality().hash(warehouseCode) ^
      const DeepCollectionEquality().hash(taxOptionId) ^
      const DeepCollectionEquality().hash(taxOption) ^
      const DeepCollectionEquality().hash(taxCountry) ^
      const DeepCollectionEquality().hash(taxRule) ^
      const DeepCollectionEquality().hash(rentalTaxRate1) ^
      const DeepCollectionEquality().hash(rentalTaxRate2) ^
      const DeepCollectionEquality().hash(rentalExempt) ^
      const DeepCollectionEquality().hash(salesTaxRate1) ^
      const DeepCollectionEquality().hash(salesTaxRate2) ^
      const DeepCollectionEquality().hash(salesExempt) ^
      const DeepCollectionEquality().hash(laborTaxRate1) ^
      const DeepCollectionEquality().hash(laborTaxRate2) ^
      const DeepCollectionEquality().hash(laborExempt) ^
      const DeepCollectionEquality().hash(attention) ^
      const DeepCollectionEquality().hash(address1) ^
      const DeepCollectionEquality().hash(address2) ^
      const DeepCollectionEquality().hash(city) ^
      const DeepCollectionEquality().hash(zipCode) ^
      const DeepCollectionEquality().hash(state) ^
      const DeepCollectionEquality().hash(countryId) ^
      const DeepCollectionEquality().hash(country) ^
      const DeepCollectionEquality().hash(countryCodeIsoAlpha2) ^
      const DeepCollectionEquality().hash(countryCodePhone) ^
      const DeepCollectionEquality().hash(phone) ^
      const DeepCollectionEquality().hash(fax) ^
      const DeepCollectionEquality().hash(assignBarCodesBy) ^
      const DeepCollectionEquality().hash(salesMarkupPercent) ^
      const DeepCollectionEquality().hash(partsMarkupPercent) ^
      const DeepCollectionEquality().hash(markupSales) ^
      const DeepCollectionEquality().hash(markupParts) ^
      const DeepCollectionEquality().hash(includeFreightInSalesCost) ^
      const DeepCollectionEquality().hash(includeFreightInPartsCost) ^
      const DeepCollectionEquality().hash(receiveVendorBarCodes) ^
      const DeepCollectionEquality().hash(allowNegativeInventory) ^
      const DeepCollectionEquality().hash(defaultDeliveryType) ^
      const DeepCollectionEquality().hash(exchangedItemsRepairByDefault) ^
      const DeepCollectionEquality().hash(stagingCompleteComponents) ^
      const DeepCollectionEquality().hash(checkInSortBy) ^
      const DeepCollectionEquality().hash(defaultPackageTruckScheduleMethod) ^
      const DeepCollectionEquality().hash(stageQuantityAccessories) ^
      const DeepCollectionEquality().hash(promptForCheckOutExceptions) ^
      const DeepCollectionEquality().hash(promptForCheckInExceptions) ^
      const DeepCollectionEquality().hash(deleteAssetLocationOnOut) ^
      const DeepCollectionEquality().hash(deleteAssetConditionOnOut) ^
      const DeepCollectionEquality().hash(stagingShowCheckedInHoldingItems) ^
      const DeepCollectionEquality().hash(poDeliveryType) ^
      const DeepCollectionEquality().hash(availabilityCacheDays) ^
      const DeepCollectionEquality().hash(availabilityPreserveConflicts) ^
      const DeepCollectionEquality().hash(defaultRepairDays) ^
      const DeepCollectionEquality().hash(quikLocateDefaultDeliveryType) ^
      const DeepCollectionEquality().hash(repairBillableOrderAgentFrom) ^
      const DeepCollectionEquality().hash(returnListPrintInQuantity) ^
      const DeepCollectionEquality().hash(returnListPrintOutQuantity) ^
      const DeepCollectionEquality().hash(availabilityIncludePurchaseOrders) ^
      const DeepCollectionEquality().hash(availabilityPurchaseOrderLateDays) ^
      const DeepCollectionEquality().hash(regionId) ^
      const DeepCollectionEquality().hash(region) ^
      const DeepCollectionEquality().hash(color) ^
      const DeepCollectionEquality().hash(availabilityLateDays) ^
      const DeepCollectionEquality().hash(useBarCodeLabelDesigner) ^
      const DeepCollectionEquality().hash(inventoryLabelDesignId) ^
      const DeepCollectionEquality().hash(inventoryLabelDesign) ^
      const DeepCollectionEquality().hash(itemLabelDesignId) ^
      const DeepCollectionEquality().hash(itemLabelDesign) ^
      const DeepCollectionEquality().hash(dataWarehouseExcludeFromROA) ^
      const DeepCollectionEquality().hash(availabilityLateHours) ^
      const DeepCollectionEquality().hash(availabilityStartHour) ^
      const DeepCollectionEquality().hash(availabilityStopHour) ^
      const DeepCollectionEquality().hash(includeTaxInAssetValue) ^
      const DeepCollectionEquality()
          .hash(productionExchangeAvailabilityPercent) ^
      const DeepCollectionEquality().hash(productionexchangeEnabled) ^
      const DeepCollectionEquality().hash(productionExchangeWarehouseCode) ^
      const DeepCollectionEquality().hash(week4RatePercent) ^
      const DeepCollectionEquality().hash(glSuffix) ^
      const DeepCollectionEquality().hash(requireScanVendorBarCodeOnReturn) ^
      const DeepCollectionEquality().hash(glPrefix) ^
      const DeepCollectionEquality().hash(internalDealId) ^
      const DeepCollectionEquality().hash(internalDeal) ^
      const DeepCollectionEquality().hash(internalVendorId) ^
      const DeepCollectionEquality().hash(internalVendor) ^
      const DeepCollectionEquality().hash(calculateOnPoAfterApproved) ^
      const DeepCollectionEquality().hash(transferDefaultReturnToWarehouse) ^
      const DeepCollectionEquality().hash(availabilityCalculateInBackground) ^
      const DeepCollectionEquality().hash(quikLocateCannotTransfer) ^
      const DeepCollectionEquality().hash(quikLocateDefaultRequiredDate) ^
      const DeepCollectionEquality().hash(quikLocateRequiredDaysBefore) ^
      const DeepCollectionEquality().hash(calculateDefaultRentalRates) ^
      const DeepCollectionEquality()
          .hash(rentalDailyRatePercentOfReplacementCost) ^
      const DeepCollectionEquality().hash(rentalWeeklyRateMultipleOfDailyRate) ^
      const DeepCollectionEquality().hash(checkInEnableScanningToAisleShelf) ^
      const DeepCollectionEquality().hash(currencyId) ^
      const DeepCollectionEquality().hash(currencyCode) ^
      const DeepCollectionEquality().hash(currency) ^
      const DeepCollectionEquality().hash(rentalBarCodeRangeId) ^
      const DeepCollectionEquality().hash(rentalBarCodeRange) ^
      const DeepCollectionEquality().hash(rentalFixedAssetBarCodeRangeId) ^
      const DeepCollectionEquality().hash(rentalFixedAssetBarCodeRange) ^
      const DeepCollectionEquality().hash(salesBarCodeRangeId) ^
      const DeepCollectionEquality().hash(salesBarCodeRange) ^
      const DeepCollectionEquality()
          .hash(autoUpdateUnitValueOnReceivingHigherCostItem) ^
      const DeepCollectionEquality().hash(markupReplacementCost) ^
      const DeepCollectionEquality().hash(replacementCostMarkupPercent) ^
      const DeepCollectionEquality().hash(availabilityHourlyDays) ^
      const DeepCollectionEquality().hash(transferAvailabilityDays) ^
      const DeepCollectionEquality().hash(salesRestockPercent) ^
      const DeepCollectionEquality().hash(availabilityExcludeConsigned) ^
      const DeepCollectionEquality()
          .hash(availabilityRequireConsignedReserved) ^
      const DeepCollectionEquality().hash(availabilityEnableQcDelay) ^
      const DeepCollectionEquality().hash(availabilityQcDelayExcludeWeekend) ^
      const DeepCollectionEquality().hash(availabilityQcDelayExcludeHoliday) ^
      const DeepCollectionEquality().hash(availabilityQcDelayIndefinite) ^
      const DeepCollectionEquality()
          .hash(defaultNoChargePrintItemsAddedToOrderAtStaging) ^
      const DeepCollectionEquality().hash(quikReceiptEnable) ^
      const DeepCollectionEquality().hash(storageContainerCheckInEnable) ^
      const DeepCollectionEquality().hash(storageContainerStagingEnable) ^
      const DeepCollectionEquality().hash(storageContainerRescanRequired) ^
      const DeepCollectionEquality().hash(quikReceiptTermsConditionsId) ^
      const DeepCollectionEquality().hash(quikReceiptTermsConditions) ^
      const DeepCollectionEquality().hash(disableSubstituteNote) ^
      const DeepCollectionEquality().hash(daysToExpireSuspendedSessions) ^
      const DeepCollectionEquality().hash(inactive) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(officeLocationIds) ^
      const DeepCollectionEquality().hash(officeLocations) ^
      const DeepCollectionEquality().hash(copyRates) ^
      const DeepCollectionEquality().hash(copyFromWarehouseId) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesSettingsWarehouseSettingsWarehouseWarehouseExtension
    on WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse {
  WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse copyWith(
      {String? warehouseId,
      String? warehouse,
      String? warehouseCode,
      String? taxOptionId,
      String? taxOption,
      String? taxCountry,
      String? taxRule,
      double? rentalTaxRate1,
      double? rentalTaxRate2,
      bool? rentalExempt,
      double? salesTaxRate1,
      double? salesTaxRate2,
      bool? salesExempt,
      double? laborTaxRate1,
      double? laborTaxRate2,
      bool? laborExempt,
      String? attention,
      String? address1,
      String? address2,
      String? city,
      String? zipCode,
      String? state,
      String? countryId,
      String? country,
      String? countryCodeIsoAlpha2,
      int? countryCodePhone,
      String? phone,
      String? fax,
      String? assignBarCodesBy,
      double? salesMarkupPercent,
      double? partsMarkupPercent,
      bool? markupSales,
      bool? markupParts,
      bool? includeFreightInSalesCost,
      bool? includeFreightInPartsCost,
      bool? receiveVendorBarCodes,
      bool? allowNegativeInventory,
      String? defaultDeliveryType,
      bool? exchangedItemsRepairByDefault,
      String? stagingCompleteComponents,
      String? checkInSortBy,
      String? defaultPackageTruckScheduleMethod,
      bool? stageQuantityAccessories,
      bool? promptForCheckOutExceptions,
      bool? promptForCheckInExceptions,
      bool? deleteAssetLocationOnOut,
      bool? deleteAssetConditionOnOut,
      bool? stagingShowCheckedInHoldingItems,
      String? poDeliveryType,
      int? availabilityCacheDays,
      bool? availabilityPreserveConflicts,
      int? defaultRepairDays,
      String? quikLocateDefaultDeliveryType,
      String? repairBillableOrderAgentFrom,
      bool? returnListPrintInQuantity,
      bool? returnListPrintOutQuantity,
      bool? availabilityIncludePurchaseOrders,
      int? availabilityPurchaseOrderLateDays,
      String? regionId,
      String? region,
      String? color,
      int? availabilityLateDays,
      bool? useBarCodeLabelDesigner,
      String? inventoryLabelDesignId,
      String? inventoryLabelDesign,
      String? itemLabelDesignId,
      String? itemLabelDesign,
      bool? dataWarehouseExcludeFromROA,
      int? availabilityLateHours,
      int? availabilityStartHour,
      int? availabilityStopHour,
      bool? includeTaxInAssetValue,
      int? productionExchangeAvailabilityPercent,
      bool? productionexchangeEnabled,
      String? productionExchangeWarehouseCode,
      double? week4RatePercent,
      String? glSuffix,
      bool? requireScanVendorBarCodeOnReturn,
      String? glPrefix,
      String? internalDealId,
      String? internalDeal,
      String? internalVendorId,
      String? internalVendor,
      bool? calculateOnPoAfterApproved,
      bool? transferDefaultReturnToWarehouse,
      bool? availabilityCalculateInBackground,
      bool? quikLocateCannotTransfer,
      String? quikLocateDefaultRequiredDate,
      int? quikLocateRequiredDaysBefore,
      bool? calculateDefaultRentalRates,
      double? rentalDailyRatePercentOfReplacementCost,
      double? rentalWeeklyRateMultipleOfDailyRate,
      bool? checkInEnableScanningToAisleShelf,
      String? currencyId,
      String? currencyCode,
      String? currency,
      String? rentalBarCodeRangeId,
      String? rentalBarCodeRange,
      String? rentalFixedAssetBarCodeRangeId,
      String? rentalFixedAssetBarCodeRange,
      String? salesBarCodeRangeId,
      String? salesBarCodeRange,
      bool? autoUpdateUnitValueOnReceivingHigherCostItem,
      bool? markupReplacementCost,
      double? replacementCostMarkupPercent,
      int? availabilityHourlyDays,
      int? transferAvailabilityDays,
      double? salesRestockPercent,
      bool? availabilityExcludeConsigned,
      bool? availabilityRequireConsignedReserved,
      bool? availabilityEnableQcDelay,
      bool? availabilityQcDelayExcludeWeekend,
      bool? availabilityQcDelayExcludeHoliday,
      bool? availabilityQcDelayIndefinite,
      bool? defaultNoChargePrintItemsAddedToOrderAtStaging,
      bool? quikReceiptEnable,
      bool? storageContainerCheckInEnable,
      bool? storageContainerStagingEnable,
      bool? storageContainerRescanRequired,
      String? quikReceiptTermsConditionsId,
      String? quikReceiptTermsConditions,
      bool? disableSubstituteNote,
      int? daysToExpireSuspendedSessions,
      bool? inactive,
      String? dateStamp,
      String? officeLocationIds,
      String? officeLocations,
      bool? copyRates,
      String? copyFromWarehouseId,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse(
        warehouseId: warehouseId ?? this.warehouseId,
        warehouse: warehouse ?? this.warehouse,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        taxOptionId: taxOptionId ?? this.taxOptionId,
        taxOption: taxOption ?? this.taxOption,
        taxCountry: taxCountry ?? this.taxCountry,
        taxRule: taxRule ?? this.taxRule,
        rentalTaxRate1: rentalTaxRate1 ?? this.rentalTaxRate1,
        rentalTaxRate2: rentalTaxRate2 ?? this.rentalTaxRate2,
        rentalExempt: rentalExempt ?? this.rentalExempt,
        salesTaxRate1: salesTaxRate1 ?? this.salesTaxRate1,
        salesTaxRate2: salesTaxRate2 ?? this.salesTaxRate2,
        salesExempt: salesExempt ?? this.salesExempt,
        laborTaxRate1: laborTaxRate1 ?? this.laborTaxRate1,
        laborTaxRate2: laborTaxRate2 ?? this.laborTaxRate2,
        laborExempt: laborExempt ?? this.laborExempt,
        attention: attention ?? this.attention,
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        city: city ?? this.city,
        zipCode: zipCode ?? this.zipCode,
        state: state ?? this.state,
        countryId: countryId ?? this.countryId,
        country: country ?? this.country,
        countryCodeIsoAlpha2: countryCodeIsoAlpha2 ?? this.countryCodeIsoAlpha2,
        countryCodePhone: countryCodePhone ?? this.countryCodePhone,
        phone: phone ?? this.phone,
        fax: fax ?? this.fax,
        assignBarCodesBy: assignBarCodesBy ?? this.assignBarCodesBy,
        salesMarkupPercent: salesMarkupPercent ?? this.salesMarkupPercent,
        partsMarkupPercent: partsMarkupPercent ?? this.partsMarkupPercent,
        markupSales: markupSales ?? this.markupSales,
        markupParts: markupParts ?? this.markupParts,
        includeFreightInSalesCost:
            includeFreightInSalesCost ?? this.includeFreightInSalesCost,
        includeFreightInPartsCost:
            includeFreightInPartsCost ?? this.includeFreightInPartsCost,
        receiveVendorBarCodes:
            receiveVendorBarCodes ?? this.receiveVendorBarCodes,
        allowNegativeInventory:
            allowNegativeInventory ?? this.allowNegativeInventory,
        defaultDeliveryType: defaultDeliveryType ?? this.defaultDeliveryType,
        exchangedItemsRepairByDefault:
            exchangedItemsRepairByDefault ?? this.exchangedItemsRepairByDefault,
        stagingCompleteComponents:
            stagingCompleteComponents ?? this.stagingCompleteComponents,
        checkInSortBy: checkInSortBy ?? this.checkInSortBy,
        defaultPackageTruckScheduleMethod: defaultPackageTruckScheduleMethod ??
            this.defaultPackageTruckScheduleMethod,
        stageQuantityAccessories:
            stageQuantityAccessories ?? this.stageQuantityAccessories,
        promptForCheckOutExceptions:
            promptForCheckOutExceptions ?? this.promptForCheckOutExceptions,
        promptForCheckInExceptions:
            promptForCheckInExceptions ?? this.promptForCheckInExceptions,
        deleteAssetLocationOnOut:
            deleteAssetLocationOnOut ?? this.deleteAssetLocationOnOut,
        deleteAssetConditionOnOut:
            deleteAssetConditionOnOut ?? this.deleteAssetConditionOnOut,
        stagingShowCheckedInHoldingItems: stagingShowCheckedInHoldingItems ??
            this.stagingShowCheckedInHoldingItems,
        poDeliveryType: poDeliveryType ?? this.poDeliveryType,
        availabilityCacheDays:
            availabilityCacheDays ?? this.availabilityCacheDays,
        availabilityPreserveConflicts:
            availabilityPreserveConflicts ?? this.availabilityPreserveConflicts,
        defaultRepairDays: defaultRepairDays ?? this.defaultRepairDays,
        quikLocateDefaultDeliveryType:
            quikLocateDefaultDeliveryType ?? this.quikLocateDefaultDeliveryType,
        repairBillableOrderAgentFrom:
            repairBillableOrderAgentFrom ?? this.repairBillableOrderAgentFrom,
        returnListPrintInQuantity:
            returnListPrintInQuantity ?? this.returnListPrintInQuantity,
        returnListPrintOutQuantity:
            returnListPrintOutQuantity ?? this.returnListPrintOutQuantity,
        availabilityIncludePurchaseOrders: availabilityIncludePurchaseOrders ??
            this.availabilityIncludePurchaseOrders,
        availabilityPurchaseOrderLateDays: availabilityPurchaseOrderLateDays ??
            this.availabilityPurchaseOrderLateDays,
        regionId: regionId ?? this.regionId,
        region: region ?? this.region,
        color: color ?? this.color,
        availabilityLateDays: availabilityLateDays ?? this.availabilityLateDays,
        useBarCodeLabelDesigner:
            useBarCodeLabelDesigner ?? this.useBarCodeLabelDesigner,
        inventoryLabelDesignId:
            inventoryLabelDesignId ?? this.inventoryLabelDesignId,
        inventoryLabelDesign: inventoryLabelDesign ?? this.inventoryLabelDesign,
        itemLabelDesignId: itemLabelDesignId ?? this.itemLabelDesignId,
        itemLabelDesign: itemLabelDesign ?? this.itemLabelDesign,
        dataWarehouseExcludeFromROA:
            dataWarehouseExcludeFromROA ?? this.dataWarehouseExcludeFromROA,
        availabilityLateHours:
            availabilityLateHours ?? this.availabilityLateHours,
        availabilityStartHour:
            availabilityStartHour ?? this.availabilityStartHour,
        availabilityStopHour: availabilityStopHour ?? this.availabilityStopHour,
        includeTaxInAssetValue:
            includeTaxInAssetValue ?? this.includeTaxInAssetValue,
        productionExchangeAvailabilityPercent: productionExchangeAvailabilityPercent ??
            this.productionExchangeAvailabilityPercent,
        productionexchangeEnabled:
            productionexchangeEnabled ?? this.productionexchangeEnabled,
        productionExchangeWarehouseCode: productionExchangeWarehouseCode ??
            this.productionExchangeWarehouseCode,
        week4RatePercent: week4RatePercent ?? this.week4RatePercent,
        glSuffix: glSuffix ?? this.glSuffix,
        requireScanVendorBarCodeOnReturn: requireScanVendorBarCodeOnReturn ??
            this.requireScanVendorBarCodeOnReturn,
        glPrefix: glPrefix ?? this.glPrefix,
        internalDealId: internalDealId ?? this.internalDealId,
        internalDeal: internalDeal ?? this.internalDeal,
        internalVendorId: internalVendorId ?? this.internalVendorId,
        internalVendor: internalVendor ?? this.internalVendor,
        calculateOnPoAfterApproved:
            calculateOnPoAfterApproved ?? this.calculateOnPoAfterApproved,
        transferDefaultReturnToWarehouse: transferDefaultReturnToWarehouse ??
            this.transferDefaultReturnToWarehouse,
        availabilityCalculateInBackground: availabilityCalculateInBackground ??
            this.availabilityCalculateInBackground,
        quikLocateCannotTransfer:
            quikLocateCannotTransfer ?? this.quikLocateCannotTransfer,
        quikLocateDefaultRequiredDate:
            quikLocateDefaultRequiredDate ?? this.quikLocateDefaultRequiredDate,
        quikLocateRequiredDaysBefore:
            quikLocateRequiredDaysBefore ?? this.quikLocateRequiredDaysBefore,
        calculateDefaultRentalRates:
            calculateDefaultRentalRates ?? this.calculateDefaultRentalRates,
        rentalDailyRatePercentOfReplacementCost:
            rentalDailyRatePercentOfReplacementCost ??
                this.rentalDailyRatePercentOfReplacementCost,
        rentalWeeklyRateMultipleOfDailyRate: rentalWeeklyRateMultipleOfDailyRate ??
            this.rentalWeeklyRateMultipleOfDailyRate,
        checkInEnableScanningToAisleShelf: checkInEnableScanningToAisleShelf ??
            this.checkInEnableScanningToAisleShelf,
        currencyId: currencyId ?? this.currencyId,
        currencyCode: currencyCode ?? this.currencyCode,
        currency: currency ?? this.currency,
        rentalBarCodeRangeId: rentalBarCodeRangeId ?? this.rentalBarCodeRangeId,
        rentalBarCodeRange: rentalBarCodeRange ?? this.rentalBarCodeRange,
        rentalFixedAssetBarCodeRangeId: rentalFixedAssetBarCodeRangeId ??
            this.rentalFixedAssetBarCodeRangeId,
        rentalFixedAssetBarCodeRange:
            rentalFixedAssetBarCodeRange ?? this.rentalFixedAssetBarCodeRange,
        salesBarCodeRangeId: salesBarCodeRangeId ?? this.salesBarCodeRangeId,
        salesBarCodeRange: salesBarCodeRange ?? this.salesBarCodeRange,
        autoUpdateUnitValueOnReceivingHigherCostItem:
            autoUpdateUnitValueOnReceivingHigherCostItem ??
                this.autoUpdateUnitValueOnReceivingHigherCostItem,
        markupReplacementCost:
            markupReplacementCost ?? this.markupReplacementCost,
        replacementCostMarkupPercent:
            replacementCostMarkupPercent ?? this.replacementCostMarkupPercent,
        availabilityHourlyDays:
            availabilityHourlyDays ?? this.availabilityHourlyDays,
        transferAvailabilityDays:
            transferAvailabilityDays ?? this.transferAvailabilityDays,
        salesRestockPercent: salesRestockPercent ?? this.salesRestockPercent,
        availabilityExcludeConsigned:
            availabilityExcludeConsigned ?? this.availabilityExcludeConsigned,
        availabilityRequireConsignedReserved: availabilityRequireConsignedReserved ??
            this.availabilityRequireConsignedReserved,
        availabilityEnableQcDelay: availabilityEnableQcDelay ?? this.availabilityEnableQcDelay,
        availabilityQcDelayExcludeWeekend: availabilityQcDelayExcludeWeekend ?? this.availabilityQcDelayExcludeWeekend,
        availabilityQcDelayExcludeHoliday: availabilityQcDelayExcludeHoliday ?? this.availabilityQcDelayExcludeHoliday,
        availabilityQcDelayIndefinite: availabilityQcDelayIndefinite ?? this.availabilityQcDelayIndefinite,
        defaultNoChargePrintItemsAddedToOrderAtStaging: defaultNoChargePrintItemsAddedToOrderAtStaging ?? this.defaultNoChargePrintItemsAddedToOrderAtStaging,
        quikReceiptEnable: quikReceiptEnable ?? this.quikReceiptEnable,
        storageContainerCheckInEnable: storageContainerCheckInEnable ?? this.storageContainerCheckInEnable,
        storageContainerStagingEnable: storageContainerStagingEnable ?? this.storageContainerStagingEnable,
        storageContainerRescanRequired: storageContainerRescanRequired ?? this.storageContainerRescanRequired,
        quikReceiptTermsConditionsId: quikReceiptTermsConditionsId ?? this.quikReceiptTermsConditionsId,
        quikReceiptTermsConditions: quikReceiptTermsConditions ?? this.quikReceiptTermsConditions,
        disableSubstituteNote: disableSubstituteNote ?? this.disableSubstituteNote,
        daysToExpireSuspendedSessions: daysToExpireSuspendedSessions ?? this.daysToExpireSuspendedSessions,
        inactive: inactive ?? this.inactive,
        dateStamp: dateStamp ?? this.dateStamp,
        officeLocationIds: officeLocationIds ?? this.officeLocationIds,
        officeLocations: officeLocations ?? this.officeLocations,
        copyRates: copyRates ?? this.copyRates,
        copyFromWarehouseId: copyFromWarehouseId ?? this.copyFromWarehouseId,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes: defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse copyWithWrapped(
      {Wrapped<String?>? warehouseId,
      Wrapped<String?>? warehouse,
      Wrapped<String?>? warehouseCode,
      Wrapped<String?>? taxOptionId,
      Wrapped<String?>? taxOption,
      Wrapped<String?>? taxCountry,
      Wrapped<String?>? taxRule,
      Wrapped<double?>? rentalTaxRate1,
      Wrapped<double?>? rentalTaxRate2,
      Wrapped<bool?>? rentalExempt,
      Wrapped<double?>? salesTaxRate1,
      Wrapped<double?>? salesTaxRate2,
      Wrapped<bool?>? salesExempt,
      Wrapped<double?>? laborTaxRate1,
      Wrapped<double?>? laborTaxRate2,
      Wrapped<bool?>? laborExempt,
      Wrapped<String?>? attention,
      Wrapped<String?>? address1,
      Wrapped<String?>? address2,
      Wrapped<String?>? city,
      Wrapped<String?>? zipCode,
      Wrapped<String?>? state,
      Wrapped<String?>? countryId,
      Wrapped<String?>? country,
      Wrapped<String?>? countryCodeIsoAlpha2,
      Wrapped<int?>? countryCodePhone,
      Wrapped<String?>? phone,
      Wrapped<String?>? fax,
      Wrapped<String?>? assignBarCodesBy,
      Wrapped<double?>? salesMarkupPercent,
      Wrapped<double?>? partsMarkupPercent,
      Wrapped<bool?>? markupSales,
      Wrapped<bool?>? markupParts,
      Wrapped<bool?>? includeFreightInSalesCost,
      Wrapped<bool?>? includeFreightInPartsCost,
      Wrapped<bool?>? receiveVendorBarCodes,
      Wrapped<bool?>? allowNegativeInventory,
      Wrapped<String?>? defaultDeliveryType,
      Wrapped<bool?>? exchangedItemsRepairByDefault,
      Wrapped<String?>? stagingCompleteComponents,
      Wrapped<String?>? checkInSortBy,
      Wrapped<String?>? defaultPackageTruckScheduleMethod,
      Wrapped<bool?>? stageQuantityAccessories,
      Wrapped<bool?>? promptForCheckOutExceptions,
      Wrapped<bool?>? promptForCheckInExceptions,
      Wrapped<bool?>? deleteAssetLocationOnOut,
      Wrapped<bool?>? deleteAssetConditionOnOut,
      Wrapped<bool?>? stagingShowCheckedInHoldingItems,
      Wrapped<String?>? poDeliveryType,
      Wrapped<int?>? availabilityCacheDays,
      Wrapped<bool?>? availabilityPreserveConflicts,
      Wrapped<int?>? defaultRepairDays,
      Wrapped<String?>? quikLocateDefaultDeliveryType,
      Wrapped<String?>? repairBillableOrderAgentFrom,
      Wrapped<bool?>? returnListPrintInQuantity,
      Wrapped<bool?>? returnListPrintOutQuantity,
      Wrapped<bool?>? availabilityIncludePurchaseOrders,
      Wrapped<int?>? availabilityPurchaseOrderLateDays,
      Wrapped<String?>? regionId,
      Wrapped<String?>? region,
      Wrapped<String?>? color,
      Wrapped<int?>? availabilityLateDays,
      Wrapped<bool?>? useBarCodeLabelDesigner,
      Wrapped<String?>? inventoryLabelDesignId,
      Wrapped<String?>? inventoryLabelDesign,
      Wrapped<String?>? itemLabelDesignId,
      Wrapped<String?>? itemLabelDesign,
      Wrapped<bool?>? dataWarehouseExcludeFromROA,
      Wrapped<int?>? availabilityLateHours,
      Wrapped<int?>? availabilityStartHour,
      Wrapped<int?>? availabilityStopHour,
      Wrapped<bool?>? includeTaxInAssetValue,
      Wrapped<int?>? productionExchangeAvailabilityPercent,
      Wrapped<bool?>? productionexchangeEnabled,
      Wrapped<String?>? productionExchangeWarehouseCode,
      Wrapped<double?>? week4RatePercent,
      Wrapped<String?>? glSuffix,
      Wrapped<bool?>? requireScanVendorBarCodeOnReturn,
      Wrapped<String?>? glPrefix,
      Wrapped<String?>? internalDealId,
      Wrapped<String?>? internalDeal,
      Wrapped<String?>? internalVendorId,
      Wrapped<String?>? internalVendor,
      Wrapped<bool?>? calculateOnPoAfterApproved,
      Wrapped<bool?>? transferDefaultReturnToWarehouse,
      Wrapped<bool?>? availabilityCalculateInBackground,
      Wrapped<bool?>? quikLocateCannotTransfer,
      Wrapped<String?>? quikLocateDefaultRequiredDate,
      Wrapped<int?>? quikLocateRequiredDaysBefore,
      Wrapped<bool?>? calculateDefaultRentalRates,
      Wrapped<double?>? rentalDailyRatePercentOfReplacementCost,
      Wrapped<double?>? rentalWeeklyRateMultipleOfDailyRate,
      Wrapped<bool?>? checkInEnableScanningToAisleShelf,
      Wrapped<String?>? currencyId,
      Wrapped<String?>? currencyCode,
      Wrapped<String?>? currency,
      Wrapped<String?>? rentalBarCodeRangeId,
      Wrapped<String?>? rentalBarCodeRange,
      Wrapped<String?>? rentalFixedAssetBarCodeRangeId,
      Wrapped<String?>? rentalFixedAssetBarCodeRange,
      Wrapped<String?>? salesBarCodeRangeId,
      Wrapped<String?>? salesBarCodeRange,
      Wrapped<bool?>? autoUpdateUnitValueOnReceivingHigherCostItem,
      Wrapped<bool?>? markupReplacementCost,
      Wrapped<double?>? replacementCostMarkupPercent,
      Wrapped<int?>? availabilityHourlyDays,
      Wrapped<int?>? transferAvailabilityDays,
      Wrapped<double?>? salesRestockPercent,
      Wrapped<bool?>? availabilityExcludeConsigned,
      Wrapped<bool?>? availabilityRequireConsignedReserved,
      Wrapped<bool?>? availabilityEnableQcDelay,
      Wrapped<bool?>? availabilityQcDelayExcludeWeekend,
      Wrapped<bool?>? availabilityQcDelayExcludeHoliday,
      Wrapped<bool?>? availabilityQcDelayIndefinite,
      Wrapped<bool?>? defaultNoChargePrintItemsAddedToOrderAtStaging,
      Wrapped<bool?>? quikReceiptEnable,
      Wrapped<bool?>? storageContainerCheckInEnable,
      Wrapped<bool?>? storageContainerStagingEnable,
      Wrapped<bool?>? storageContainerRescanRequired,
      Wrapped<String?>? quikReceiptTermsConditionsId,
      Wrapped<String?>? quikReceiptTermsConditions,
      Wrapped<bool?>? disableSubstituteNote,
      Wrapped<int?>? daysToExpireSuspendedSessions,
      Wrapped<bool?>? inactive,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? officeLocationIds,
      Wrapped<String?>? officeLocations,
      Wrapped<bool?>? copyRates,
      Wrapped<String?>? copyFromWarehouseId,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesSettingsWarehouseSettingsWarehouseWarehouse(
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        warehouse: (warehouse != null ? warehouse.value : this.warehouse),
        warehouseCode:
            (warehouseCode != null ? warehouseCode.value : this.warehouseCode),
        taxOptionId:
            (taxOptionId != null ? taxOptionId.value : this.taxOptionId),
        taxOption: (taxOption != null ? taxOption.value : this.taxOption),
        taxCountry: (taxCountry != null ? taxCountry.value : this.taxCountry),
        taxRule: (taxRule != null ? taxRule.value : this.taxRule),
        rentalTaxRate1: (rentalTaxRate1 != null
            ? rentalTaxRate1.value
            : this.rentalTaxRate1),
        rentalTaxRate2: (rentalTaxRate2 != null
            ? rentalTaxRate2.value
            : this.rentalTaxRate2),
        rentalExempt:
            (rentalExempt != null ? rentalExempt.value : this.rentalExempt),
        salesTaxRate1:
            (salesTaxRate1 != null ? salesTaxRate1.value : this.salesTaxRate1),
        salesTaxRate2:
            (salesTaxRate2 != null ? salesTaxRate2.value : this.salesTaxRate2),
        salesExempt:
            (salesExempt != null ? salesExempt.value : this.salesExempt),
        laborTaxRate1:
            (laborTaxRate1 != null ? laborTaxRate1.value : this.laborTaxRate1),
        laborTaxRate2:
            (laborTaxRate2 != null ? laborTaxRate2.value : this.laborTaxRate2),
        laborExempt:
            (laborExempt != null ? laborExempt.value : this.laborExempt),
        attention: (attention != null ? attention.value : this.attention),
        address1: (address1 != null ? address1.value : this.address1),
        address2: (address2 != null ? address2.value : this.address2),
        city: (city != null ? city.value : this.city),
        zipCode: (zipCode != null ? zipCode.value : this.zipCode),
        state: (state != null ? state.value : this.state),
        countryId: (countryId != null ? countryId.value : this.countryId),
        country: (country != null ? country.value : this.country),
        countryCodeIsoAlpha2: (countryCodeIsoAlpha2 != null
            ? countryCodeIsoAlpha2.value
            : this.countryCodeIsoAlpha2),
        countryCodePhone: (countryCodePhone != null
            ? countryCodePhone.value
            : this.countryCodePhone),
        phone: (phone != null ? phone.value : this.phone),
        fax: (fax != null ? fax.value : this.fax),
        assignBarCodesBy: (assignBarCodesBy != null
            ? assignBarCodesBy.value
            : this.assignBarCodesBy),
        salesMarkupPercent: (salesMarkupPercent != null
            ? salesMarkupPercent.value
            : this.salesMarkupPercent),
        partsMarkupPercent: (partsMarkupPercent != null
            ? partsMarkupPercent.value
            : this.partsMarkupPercent),
        markupSales:
            (markupSales != null ? markupSales.value : this.markupSales),
        markupParts:
            (markupParts != null ? markupParts.value : this.markupParts),
        includeFreightInSalesCost: (includeFreightInSalesCost != null
            ? includeFreightInSalesCost.value
            : this.includeFreightInSalesCost),
        includeFreightInPartsCost: (includeFreightInPartsCost != null
            ? includeFreightInPartsCost.value
            : this.includeFreightInPartsCost),
        receiveVendorBarCodes: (receiveVendorBarCodes != null
            ? receiveVendorBarCodes.value
            : this.receiveVendorBarCodes),
        allowNegativeInventory: (allowNegativeInventory != null
            ? allowNegativeInventory.value
            : this.allowNegativeInventory),
        defaultDeliveryType: (defaultDeliveryType != null
            ? defaultDeliveryType.value
            : this.defaultDeliveryType),
        exchangedItemsRepairByDefault: (exchangedItemsRepairByDefault != null
            ? exchangedItemsRepairByDefault.value
            : this.exchangedItemsRepairByDefault),
        stagingCompleteComponents: (stagingCompleteComponents != null
            ? stagingCompleteComponents.value
            : this.stagingCompleteComponents),
        checkInSortBy:
            (checkInSortBy != null ? checkInSortBy.value : this.checkInSortBy),
        defaultPackageTruckScheduleMethod: (defaultPackageTruckScheduleMethod != null
            ? defaultPackageTruckScheduleMethod.value
            : this.defaultPackageTruckScheduleMethod),
        stageQuantityAccessories: (stageQuantityAccessories != null
            ? stageQuantityAccessories.value
            : this.stageQuantityAccessories),
        promptForCheckOutExceptions: (promptForCheckOutExceptions != null
            ? promptForCheckOutExceptions.value
            : this.promptForCheckOutExceptions),
        promptForCheckInExceptions: (promptForCheckInExceptions != null
            ? promptForCheckInExceptions.value
            : this.promptForCheckInExceptions),
        deleteAssetLocationOnOut: (deleteAssetLocationOnOut != null
            ? deleteAssetLocationOnOut.value
            : this.deleteAssetLocationOnOut),
        deleteAssetConditionOnOut: (deleteAssetConditionOnOut != null
            ? deleteAssetConditionOnOut.value
            : this.deleteAssetConditionOnOut),
        stagingShowCheckedInHoldingItems: (stagingShowCheckedInHoldingItems != null
            ? stagingShowCheckedInHoldingItems.value
            : this.stagingShowCheckedInHoldingItems),
        poDeliveryType: (poDeliveryType != null
            ? poDeliveryType.value
            : this.poDeliveryType),
        availabilityCacheDays: (availabilityCacheDays != null
            ? availabilityCacheDays.value
            : this.availabilityCacheDays),
        availabilityPreserveConflicts: (availabilityPreserveConflicts != null
            ? availabilityPreserveConflicts.value
            : this.availabilityPreserveConflicts),
        defaultRepairDays: (defaultRepairDays != null
            ? defaultRepairDays.value
            : this.defaultRepairDays),
        quikLocateDefaultDeliveryType: (quikLocateDefaultDeliveryType != null
            ? quikLocateDefaultDeliveryType.value
            : this.quikLocateDefaultDeliveryType),
        repairBillableOrderAgentFrom: (repairBillableOrderAgentFrom != null
            ? repairBillableOrderAgentFrom.value
            : this.repairBillableOrderAgentFrom),
        returnListPrintInQuantity: (returnListPrintInQuantity != null
            ? returnListPrintInQuantity.value
            : this.returnListPrintInQuantity),
        returnListPrintOutQuantity: (returnListPrintOutQuantity != null
            ? returnListPrintOutQuantity.value
            : this.returnListPrintOutQuantity),
        availabilityIncludePurchaseOrders: (availabilityIncludePurchaseOrders != null
            ? availabilityIncludePurchaseOrders.value
            : this.availabilityIncludePurchaseOrders),
        availabilityPurchaseOrderLateDays: (availabilityPurchaseOrderLateDays != null
            ? availabilityPurchaseOrderLateDays.value
            : this.availabilityPurchaseOrderLateDays),
        regionId: (regionId != null ? regionId.value : this.regionId),
        region: (region != null ? region.value : this.region),
        color: (color != null ? color.value : this.color),
        availabilityLateDays: (availabilityLateDays != null
            ? availabilityLateDays.value
            : this.availabilityLateDays),
        useBarCodeLabelDesigner: (useBarCodeLabelDesigner != null
            ? useBarCodeLabelDesigner.value
            : this.useBarCodeLabelDesigner),
        inventoryLabelDesignId: (inventoryLabelDesignId != null ? inventoryLabelDesignId.value : this.inventoryLabelDesignId),
        inventoryLabelDesign: (inventoryLabelDesign != null ? inventoryLabelDesign.value : this.inventoryLabelDesign),
        itemLabelDesignId: (itemLabelDesignId != null ? itemLabelDesignId.value : this.itemLabelDesignId),
        itemLabelDesign: (itemLabelDesign != null ? itemLabelDesign.value : this.itemLabelDesign),
        dataWarehouseExcludeFromROA: (dataWarehouseExcludeFromROA != null ? dataWarehouseExcludeFromROA.value : this.dataWarehouseExcludeFromROA),
        availabilityLateHours: (availabilityLateHours != null ? availabilityLateHours.value : this.availabilityLateHours),
        availabilityStartHour: (availabilityStartHour != null ? availabilityStartHour.value : this.availabilityStartHour),
        availabilityStopHour: (availabilityStopHour != null ? availabilityStopHour.value : this.availabilityStopHour),
        includeTaxInAssetValue: (includeTaxInAssetValue != null ? includeTaxInAssetValue.value : this.includeTaxInAssetValue),
        productionExchangeAvailabilityPercent: (productionExchangeAvailabilityPercent != null ? productionExchangeAvailabilityPercent.value : this.productionExchangeAvailabilityPercent),
        productionexchangeEnabled: (productionexchangeEnabled != null ? productionexchangeEnabled.value : this.productionexchangeEnabled),
        productionExchangeWarehouseCode: (productionExchangeWarehouseCode != null ? productionExchangeWarehouseCode.value : this.productionExchangeWarehouseCode),
        week4RatePercent: (week4RatePercent != null ? week4RatePercent.value : this.week4RatePercent),
        glSuffix: (glSuffix != null ? glSuffix.value : this.glSuffix),
        requireScanVendorBarCodeOnReturn: (requireScanVendorBarCodeOnReturn != null ? requireScanVendorBarCodeOnReturn.value : this.requireScanVendorBarCodeOnReturn),
        glPrefix: (glPrefix != null ? glPrefix.value : this.glPrefix),
        internalDealId: (internalDealId != null ? internalDealId.value : this.internalDealId),
        internalDeal: (internalDeal != null ? internalDeal.value : this.internalDeal),
        internalVendorId: (internalVendorId != null ? internalVendorId.value : this.internalVendorId),
        internalVendor: (internalVendor != null ? internalVendor.value : this.internalVendor),
        calculateOnPoAfterApproved: (calculateOnPoAfterApproved != null ? calculateOnPoAfterApproved.value : this.calculateOnPoAfterApproved),
        transferDefaultReturnToWarehouse: (transferDefaultReturnToWarehouse != null ? transferDefaultReturnToWarehouse.value : this.transferDefaultReturnToWarehouse),
        availabilityCalculateInBackground: (availabilityCalculateInBackground != null ? availabilityCalculateInBackground.value : this.availabilityCalculateInBackground),
        quikLocateCannotTransfer: (quikLocateCannotTransfer != null ? quikLocateCannotTransfer.value : this.quikLocateCannotTransfer),
        quikLocateDefaultRequiredDate: (quikLocateDefaultRequiredDate != null ? quikLocateDefaultRequiredDate.value : this.quikLocateDefaultRequiredDate),
        quikLocateRequiredDaysBefore: (quikLocateRequiredDaysBefore != null ? quikLocateRequiredDaysBefore.value : this.quikLocateRequiredDaysBefore),
        calculateDefaultRentalRates: (calculateDefaultRentalRates != null ? calculateDefaultRentalRates.value : this.calculateDefaultRentalRates),
        rentalDailyRatePercentOfReplacementCost: (rentalDailyRatePercentOfReplacementCost != null ? rentalDailyRatePercentOfReplacementCost.value : this.rentalDailyRatePercentOfReplacementCost),
        rentalWeeklyRateMultipleOfDailyRate: (rentalWeeklyRateMultipleOfDailyRate != null ? rentalWeeklyRateMultipleOfDailyRate.value : this.rentalWeeklyRateMultipleOfDailyRate),
        checkInEnableScanningToAisleShelf: (checkInEnableScanningToAisleShelf != null ? checkInEnableScanningToAisleShelf.value : this.checkInEnableScanningToAisleShelf),
        currencyId: (currencyId != null ? currencyId.value : this.currencyId),
        currencyCode: (currencyCode != null ? currencyCode.value : this.currencyCode),
        currency: (currency != null ? currency.value : this.currency),
        rentalBarCodeRangeId: (rentalBarCodeRangeId != null ? rentalBarCodeRangeId.value : this.rentalBarCodeRangeId),
        rentalBarCodeRange: (rentalBarCodeRange != null ? rentalBarCodeRange.value : this.rentalBarCodeRange),
        rentalFixedAssetBarCodeRangeId: (rentalFixedAssetBarCodeRangeId != null ? rentalFixedAssetBarCodeRangeId.value : this.rentalFixedAssetBarCodeRangeId),
        rentalFixedAssetBarCodeRange: (rentalFixedAssetBarCodeRange != null ? rentalFixedAssetBarCodeRange.value : this.rentalFixedAssetBarCodeRange),
        salesBarCodeRangeId: (salesBarCodeRangeId != null ? salesBarCodeRangeId.value : this.salesBarCodeRangeId),
        salesBarCodeRange: (salesBarCodeRange != null ? salesBarCodeRange.value : this.salesBarCodeRange),
        autoUpdateUnitValueOnReceivingHigherCostItem: (autoUpdateUnitValueOnReceivingHigherCostItem != null ? autoUpdateUnitValueOnReceivingHigherCostItem.value : this.autoUpdateUnitValueOnReceivingHigherCostItem),
        markupReplacementCost: (markupReplacementCost != null ? markupReplacementCost.value : this.markupReplacementCost),
        replacementCostMarkupPercent: (replacementCostMarkupPercent != null ? replacementCostMarkupPercent.value : this.replacementCostMarkupPercent),
        availabilityHourlyDays: (availabilityHourlyDays != null ? availabilityHourlyDays.value : this.availabilityHourlyDays),
        transferAvailabilityDays: (transferAvailabilityDays != null ? transferAvailabilityDays.value : this.transferAvailabilityDays),
        salesRestockPercent: (salesRestockPercent != null ? salesRestockPercent.value : this.salesRestockPercent),
        availabilityExcludeConsigned: (availabilityExcludeConsigned != null ? availabilityExcludeConsigned.value : this.availabilityExcludeConsigned),
        availabilityRequireConsignedReserved: (availabilityRequireConsignedReserved != null ? availabilityRequireConsignedReserved.value : this.availabilityRequireConsignedReserved),
        availabilityEnableQcDelay: (availabilityEnableQcDelay != null ? availabilityEnableQcDelay.value : this.availabilityEnableQcDelay),
        availabilityQcDelayExcludeWeekend: (availabilityQcDelayExcludeWeekend != null ? availabilityQcDelayExcludeWeekend.value : this.availabilityQcDelayExcludeWeekend),
        availabilityQcDelayExcludeHoliday: (availabilityQcDelayExcludeHoliday != null ? availabilityQcDelayExcludeHoliday.value : this.availabilityQcDelayExcludeHoliday),
        availabilityQcDelayIndefinite: (availabilityQcDelayIndefinite != null ? availabilityQcDelayIndefinite.value : this.availabilityQcDelayIndefinite),
        defaultNoChargePrintItemsAddedToOrderAtStaging: (defaultNoChargePrintItemsAddedToOrderAtStaging != null ? defaultNoChargePrintItemsAddedToOrderAtStaging.value : this.defaultNoChargePrintItemsAddedToOrderAtStaging),
        quikReceiptEnable: (quikReceiptEnable != null ? quikReceiptEnable.value : this.quikReceiptEnable),
        storageContainerCheckInEnable: (storageContainerCheckInEnable != null ? storageContainerCheckInEnable.value : this.storageContainerCheckInEnable),
        storageContainerStagingEnable: (storageContainerStagingEnable != null ? storageContainerStagingEnable.value : this.storageContainerStagingEnable),
        storageContainerRescanRequired: (storageContainerRescanRequired != null ? storageContainerRescanRequired.value : this.storageContainerRescanRequired),
        quikReceiptTermsConditionsId: (quikReceiptTermsConditionsId != null ? quikReceiptTermsConditionsId.value : this.quikReceiptTermsConditionsId),
        quikReceiptTermsConditions: (quikReceiptTermsConditions != null ? quikReceiptTermsConditions.value : this.quikReceiptTermsConditions),
        disableSubstituteNote: (disableSubstituteNote != null ? disableSubstituteNote.value : this.disableSubstituteNote),
        daysToExpireSuspendedSessions: (daysToExpireSuspendedSessions != null ? daysToExpireSuspendedSessions.value : this.daysToExpireSuspendedSessions),
        inactive: (inactive != null ? inactive.value : this.inactive),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        officeLocationIds: (officeLocationIds != null ? officeLocationIds.value : this.officeLocationIds),
        officeLocations: (officeLocations != null ? officeLocations.value : this.officeLocations),
        copyRates: (copyRates != null ? copyRates.value : this.copyRates),
        copyFromWarehouseId: (copyFromWarehouseId != null ? copyFromWarehouseId.value : this.copyFromWarehouseId),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle: (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null ? defaultFieldAttributes.value : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWidgetSettingsWidgetWidget {
  WebApiModulesSettingsWidgetSettingsWidgetWidget({
    this.locationId,
    this.warehouseId,
    this.departmentId,
    this.locationCodes,
    this.locations,
    this.dateBehaviorId,
    this.dateField,
    this.fromDate,
    this.toDate,
    this.type,
    this.data,
    this.options,
    this.dataPoints,
    this.apiName,
    this.procedureName,
    this.counterFieldName,
    this.label1FieldName,
    this.label2FieldName,
    this.backgroundColorFieldName,
    this.borderColorFieldName,
    this.opacity,
    this.stacked,
  });

  factory WebApiModulesSettingsWidgetSettingsWidgetWidget.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetFromJson(json);

  @JsonKey(name: 'locationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'warehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'departmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'locationCodes', includeIfNull: false)
  final String? locationCodes;
  @JsonKey(name: 'locations', includeIfNull: false)
  final String? locations;
  @JsonKey(name: 'dateBehaviorId', includeIfNull: false)
  final String? dateBehaviorId;
  @JsonKey(name: 'dateField', includeIfNull: false)
  final String? dateField;
  @JsonKey(name: 'fromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'toDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'type', includeIfNull: false)
  final String? type;
  @JsonKey(name: 'data', includeIfNull: false)
  final WebApiModulesSettingsWidgetSettingsWidgetWidgetData? data;
  @JsonKey(name: 'options', includeIfNull: false)
  final WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions? options;
  @JsonKey(name: 'dataPoints', includeIfNull: false)
  final int? dataPoints;
  @JsonKey(name: 'apiName', includeIfNull: false)
  final String? apiName;
  @JsonKey(name: 'procedureName', includeIfNull: false)
  final String? procedureName;
  @JsonKey(name: 'counterFieldName', includeIfNull: false)
  final String? counterFieldName;
  @JsonKey(name: 'label1FieldName', includeIfNull: false)
  final String? label1FieldName;
  @JsonKey(name: 'label2FieldName', includeIfNull: false)
  final String? label2FieldName;
  @JsonKey(name: 'backgroundColorFieldName', includeIfNull: false)
  final String? backgroundColorFieldName;
  @JsonKey(name: 'borderColorFieldName', includeIfNull: false)
  final String? borderColorFieldName;
  @JsonKey(name: 'opacity', includeIfNull: false)
  final double? opacity;
  @JsonKey(name: 'stacked', includeIfNull: false)
  final bool? stacked;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWidgetSettingsWidgetWidget &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.locationCodes, locationCodes) ||
                const DeepCollectionEquality()
                    .equals(other.locationCodes, locationCodes)) &&
            (identical(other.locations, locations) ||
                const DeepCollectionEquality()
                    .equals(other.locations, locations)) &&
            (identical(other.dateBehaviorId, dateBehaviorId) ||
                const DeepCollectionEquality()
                    .equals(other.dateBehaviorId, dateBehaviorId)) &&
            (identical(other.dateField, dateField) ||
                const DeepCollectionEquality()
                    .equals(other.dateField, dateField)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.type, type) ||
                const DeepCollectionEquality().equals(other.type, type)) &&
            (identical(other.data, data) ||
                const DeepCollectionEquality().equals(other.data, data)) &&
            (identical(other.options, options) ||
                const DeepCollectionEquality()
                    .equals(other.options, options)) &&
            (identical(other.dataPoints, dataPoints) ||
                const DeepCollectionEquality()
                    .equals(other.dataPoints, dataPoints)) &&
            (identical(other.apiName, apiName) ||
                const DeepCollectionEquality()
                    .equals(other.apiName, apiName)) &&
            (identical(other.procedureName, procedureName) ||
                const DeepCollectionEquality()
                    .equals(other.procedureName, procedureName)) &&
            (identical(other.counterFieldName, counterFieldName) ||
                const DeepCollectionEquality()
                    .equals(other.counterFieldName, counterFieldName)) &&
            (identical(other.label1FieldName, label1FieldName) ||
                const DeepCollectionEquality()
                    .equals(other.label1FieldName, label1FieldName)) &&
            (identical(other.label2FieldName, label2FieldName) ||
                const DeepCollectionEquality()
                    .equals(other.label2FieldName, label2FieldName)) &&
            (identical(other.backgroundColorFieldName, backgroundColorFieldName) ||
                const DeepCollectionEquality().equals(
                    other.backgroundColorFieldName,
                    backgroundColorFieldName)) &&
            (identical(other.borderColorFieldName, borderColorFieldName) ||
                const DeepCollectionEquality().equals(
                    other.borderColorFieldName, borderColorFieldName)) &&
            (identical(other.opacity, opacity) ||
                const DeepCollectionEquality()
                    .equals(other.opacity, opacity)) &&
            (identical(other.stacked, stacked) ||
                const DeepCollectionEquality().equals(other.stacked, stacked)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(locationId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(locationCodes) ^
      const DeepCollectionEquality().hash(locations) ^
      const DeepCollectionEquality().hash(dateBehaviorId) ^
      const DeepCollectionEquality().hash(dateField) ^
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(type) ^
      const DeepCollectionEquality().hash(data) ^
      const DeepCollectionEquality().hash(options) ^
      const DeepCollectionEquality().hash(dataPoints) ^
      const DeepCollectionEquality().hash(apiName) ^
      const DeepCollectionEquality().hash(procedureName) ^
      const DeepCollectionEquality().hash(counterFieldName) ^
      const DeepCollectionEquality().hash(label1FieldName) ^
      const DeepCollectionEquality().hash(label2FieldName) ^
      const DeepCollectionEquality().hash(backgroundColorFieldName) ^
      const DeepCollectionEquality().hash(borderColorFieldName) ^
      const DeepCollectionEquality().hash(opacity) ^
      const DeepCollectionEquality().hash(stacked) ^
      runtimeType.hashCode;
}

extension $WebApiModulesSettingsWidgetSettingsWidgetWidgetExtension
    on WebApiModulesSettingsWidgetSettingsWidgetWidget {
  WebApiModulesSettingsWidgetSettingsWidgetWidget copyWith(
      {String? locationId,
      String? warehouseId,
      String? departmentId,
      String? locationCodes,
      String? locations,
      String? dateBehaviorId,
      String? dateField,
      DateTime? fromDate,
      DateTime? toDate,
      String? type,
      WebApiModulesSettingsWidgetSettingsWidgetWidgetData? data,
      WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions? options,
      int? dataPoints,
      String? apiName,
      String? procedureName,
      String? counterFieldName,
      String? label1FieldName,
      String? label2FieldName,
      String? backgroundColorFieldName,
      String? borderColorFieldName,
      double? opacity,
      bool? stacked}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidget(
        locationId: locationId ?? this.locationId,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        locationCodes: locationCodes ?? this.locationCodes,
        locations: locations ?? this.locations,
        dateBehaviorId: dateBehaviorId ?? this.dateBehaviorId,
        dateField: dateField ?? this.dateField,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        type: type ?? this.type,
        data: data ?? this.data,
        options: options ?? this.options,
        dataPoints: dataPoints ?? this.dataPoints,
        apiName: apiName ?? this.apiName,
        procedureName: procedureName ?? this.procedureName,
        counterFieldName: counterFieldName ?? this.counterFieldName,
        label1FieldName: label1FieldName ?? this.label1FieldName,
        label2FieldName: label2FieldName ?? this.label2FieldName,
        backgroundColorFieldName:
            backgroundColorFieldName ?? this.backgroundColorFieldName,
        borderColorFieldName: borderColorFieldName ?? this.borderColorFieldName,
        opacity: opacity ?? this.opacity,
        stacked: stacked ?? this.stacked);
  }

  WebApiModulesSettingsWidgetSettingsWidgetWidget copyWithWrapped(
      {Wrapped<String?>? locationId,
      Wrapped<String?>? warehouseId,
      Wrapped<String?>? departmentId,
      Wrapped<String?>? locationCodes,
      Wrapped<String?>? locations,
      Wrapped<String?>? dateBehaviorId,
      Wrapped<String?>? dateField,
      Wrapped<DateTime?>? fromDate,
      Wrapped<DateTime?>? toDate,
      Wrapped<String?>? type,
      Wrapped<WebApiModulesSettingsWidgetSettingsWidgetWidgetData?>? data,
      Wrapped<WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions?>? options,
      Wrapped<int?>? dataPoints,
      Wrapped<String?>? apiName,
      Wrapped<String?>? procedureName,
      Wrapped<String?>? counterFieldName,
      Wrapped<String?>? label1FieldName,
      Wrapped<String?>? label2FieldName,
      Wrapped<String?>? backgroundColorFieldName,
      Wrapped<String?>? borderColorFieldName,
      Wrapped<double?>? opacity,
      Wrapped<bool?>? stacked}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidget(
        locationId: (locationId != null ? locationId.value : this.locationId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        locationCodes:
            (locationCodes != null ? locationCodes.value : this.locationCodes),
        locations: (locations != null ? locations.value : this.locations),
        dateBehaviorId: (dateBehaviorId != null
            ? dateBehaviorId.value
            : this.dateBehaviorId),
        dateField: (dateField != null ? dateField.value : this.dateField),
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        type: (type != null ? type.value : this.type),
        data: (data != null ? data.value : this.data),
        options: (options != null ? options.value : this.options),
        dataPoints: (dataPoints != null ? dataPoints.value : this.dataPoints),
        apiName: (apiName != null ? apiName.value : this.apiName),
        procedureName:
            (procedureName != null ? procedureName.value : this.procedureName),
        counterFieldName: (counterFieldName != null
            ? counterFieldName.value
            : this.counterFieldName),
        label1FieldName: (label1FieldName != null
            ? label1FieldName.value
            : this.label1FieldName),
        label2FieldName: (label2FieldName != null
            ? label2FieldName.value
            : this.label2FieldName),
        backgroundColorFieldName: (backgroundColorFieldName != null
            ? backgroundColorFieldName.value
            : this.backgroundColorFieldName),
        borderColorFieldName: (borderColorFieldName != null
            ? borderColorFieldName.value
            : this.borderColorFieldName),
        opacity: (opacity != null ? opacity.value : this.opacity),
        stacked: (stacked != null ? stacked.value : this.stacked));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis({
    this.ticks,
    this.stacked,
  });

  factory WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisFromJson(json);

  @JsonKey(name: 'ticks', includeIfNull: false)
  final WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks? ticks;
  @JsonKey(name: 'stacked', includeIfNull: false)
  final bool? stacked;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis &&
            (identical(other.ticks, ticks) ||
                const DeepCollectionEquality().equals(other.ticks, ticks)) &&
            (identical(other.stacked, stacked) ||
                const DeepCollectionEquality().equals(other.stacked, stacked)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(ticks) ^
      const DeepCollectionEquality().hash(stacked) ^
      runtimeType.hashCode;
}

extension $WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisExtension
    on WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis copyWith(
      {WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks? ticks,
      bool? stacked}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis(
        ticks: ticks ?? this.ticks, stacked: stacked ?? this.stacked);
  }

  WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis copyWithWrapped(
      {Wrapped<WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks?>?
          ticks,
      Wrapped<bool?>? stacked}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis(
        ticks: (ticks != null ? ticks.value : this.ticks),
        stacked: (stacked != null ? stacked.value : this.stacked));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks({
    this.beginAtZero,
  });

  factory WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicksFromJson(json);

  @JsonKey(name: 'beginAtZero', includeIfNull: false)
  final bool? beginAtZero;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicksFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicksToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicksToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks &&
            (identical(other.beginAtZero, beginAtZero) ||
                const DeepCollectionEquality()
                    .equals(other.beginAtZero, beginAtZero)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(beginAtZero) ^ runtimeType.hashCode;
}

extension $WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicksExtension
    on WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks copyWith(
      {bool? beginAtZero}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks(
        beginAtZero: beginAtZero ?? this.beginAtZero);
  }

  WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks copyWithWrapped(
      {Wrapped<bool?>? beginAtZero}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetAxisTicks(
        beginAtZero:
            (beginAtZero != null ? beginAtZero.value : this.beginAtZero));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWidgetSettingsWidgetWidgetData {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetData({
    this.labels,
    this.datasets,
  });

  factory WebApiModulesSettingsWidgetSettingsWidgetWidgetData.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetDataFromJson(json);

  @JsonKey(name: 'labels', includeIfNull: false, defaultValue: <String>[])
  final List<String>? labels;
  @JsonKey(
      name: 'datasets',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet>[])
  final List<WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet>? datasets;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetDataFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetDataToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetDataToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWidgetSettingsWidgetWidgetData &&
            (identical(other.labels, labels) ||
                const DeepCollectionEquality().equals(other.labels, labels)) &&
            (identical(other.datasets, datasets) ||
                const DeepCollectionEquality()
                    .equals(other.datasets, datasets)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(labels) ^
      const DeepCollectionEquality().hash(datasets) ^
      runtimeType.hashCode;
}

extension $WebApiModulesSettingsWidgetSettingsWidgetWidgetDataExtension
    on WebApiModulesSettingsWidgetSettingsWidgetWidgetData {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetData copyWith(
      {List<String>? labels,
      List<WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet>? datasets}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetData(
        labels: labels ?? this.labels, datasets: datasets ?? this.datasets);
  }

  WebApiModulesSettingsWidgetSettingsWidgetWidgetData copyWithWrapped(
      {Wrapped<List<String>?>? labels,
      Wrapped<List<WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet>?>?
          datasets}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetData(
        labels: (labels != null ? labels.value : this.labels),
        datasets: (datasets != null ? datasets.value : this.datasets));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet({
    this.label,
    this.data,
    this.backgroundColor,
    this.borderColor,
    this.borderWidth,
  });

  factory WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSetFromJson(json);

  @JsonKey(name: 'label', includeIfNull: false)
  final String? label;
  @JsonKey(name: 'data', includeIfNull: false, defaultValue: <double>[])
  final List<double>? data;
  @JsonKey(
      name: 'backgroundColor', includeIfNull: false, defaultValue: <String>[])
  final List<String>? backgroundColor;
  @JsonKey(name: 'borderColor', includeIfNull: false, defaultValue: <String>[])
  final List<String>? borderColor;
  @JsonKey(name: 'borderWidth', includeIfNull: false)
  final int? borderWidth;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSetFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSetToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSetToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet &&
            (identical(other.label, label) ||
                const DeepCollectionEquality().equals(other.label, label)) &&
            (identical(other.data, data) ||
                const DeepCollectionEquality().equals(other.data, data)) &&
            (identical(other.backgroundColor, backgroundColor) ||
                const DeepCollectionEquality()
                    .equals(other.backgroundColor, backgroundColor)) &&
            (identical(other.borderColor, borderColor) ||
                const DeepCollectionEquality()
                    .equals(other.borderColor, borderColor)) &&
            (identical(other.borderWidth, borderWidth) ||
                const DeepCollectionEquality()
                    .equals(other.borderWidth, borderWidth)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(label) ^
      const DeepCollectionEquality().hash(data) ^
      const DeepCollectionEquality().hash(backgroundColor) ^
      const DeepCollectionEquality().hash(borderColor) ^
      const DeepCollectionEquality().hash(borderWidth) ^
      runtimeType.hashCode;
}

extension $WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSetExtension
    on WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet copyWith(
      {String? label,
      List<double>? data,
      List<String>? backgroundColor,
      List<String>? borderColor,
      int? borderWidth}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet(
        label: label ?? this.label,
        data: data ?? this.data,
        backgroundColor: backgroundColor ?? this.backgroundColor,
        borderColor: borderColor ?? this.borderColor,
        borderWidth: borderWidth ?? this.borderWidth);
  }

  WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet copyWithWrapped(
      {Wrapped<String?>? label,
      Wrapped<List<double>?>? data,
      Wrapped<List<String>?>? backgroundColor,
      Wrapped<List<String>?>? borderColor,
      Wrapped<int?>? borderWidth}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetDataSet(
        label: (label != null ? label.value : this.label),
        data: (data != null ? data.value : this.data),
        backgroundColor: (backgroundColor != null
            ? backgroundColor.value
            : this.backgroundColor),
        borderColor:
            (borderColor != null ? borderColor.value : this.borderColor),
        borderWidth:
            (borderWidth != null ? borderWidth.value : this.borderWidth));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend({
    this.display,
  });

  factory WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetLegendFromJson(json);

  @JsonKey(name: 'display', includeIfNull: false)
  final bool? display;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetLegendFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetLegendToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetLegendToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend &&
            (identical(other.display, display) ||
                const DeepCollectionEquality().equals(other.display, display)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(display) ^ runtimeType.hashCode;
}

extension $WebApiModulesSettingsWidgetSettingsWidgetWidgetLegendExtension
    on WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend copyWith(
      {bool? display}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend(
        display: display ?? this.display);
  }

  WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend copyWithWrapped(
      {Wrapped<bool?>? display}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend(
        display: (display != null ? display.value : this.display));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions({
    this.title,
    this.legend,
    this.scales,
    this.responsive,
    this.maintainAspectRatio,
  });

  factory WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetOptionsFromJson(json);

  @JsonKey(name: 'title', includeIfNull: false)
  final WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle? title;
  @JsonKey(name: 'legend', includeIfNull: false)
  final WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend? legend;
  @JsonKey(name: 'scales', includeIfNull: false)
  final WebApiModulesSettingsWidgetSettingsWidgetWidgetScales? scales;
  @JsonKey(name: 'responsive', includeIfNull: false)
  final bool? responsive;
  @JsonKey(name: 'maintainAspectRatio', includeIfNull: false)
  final bool? maintainAspectRatio;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetOptionsFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetOptionsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetOptionsToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions &&
            (identical(other.title, title) ||
                const DeepCollectionEquality().equals(other.title, title)) &&
            (identical(other.legend, legend) ||
                const DeepCollectionEquality().equals(other.legend, legend)) &&
            (identical(other.scales, scales) ||
                const DeepCollectionEquality().equals(other.scales, scales)) &&
            (identical(other.responsive, responsive) ||
                const DeepCollectionEquality()
                    .equals(other.responsive, responsive)) &&
            (identical(other.maintainAspectRatio, maintainAspectRatio) ||
                const DeepCollectionEquality()
                    .equals(other.maintainAspectRatio, maintainAspectRatio)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(title) ^
      const DeepCollectionEquality().hash(legend) ^
      const DeepCollectionEquality().hash(scales) ^
      const DeepCollectionEquality().hash(responsive) ^
      const DeepCollectionEquality().hash(maintainAspectRatio) ^
      runtimeType.hashCode;
}

extension $WebApiModulesSettingsWidgetSettingsWidgetWidgetOptionsExtension
    on WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions copyWith(
      {WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle? title,
      WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend? legend,
      WebApiModulesSettingsWidgetSettingsWidgetWidgetScales? scales,
      bool? responsive,
      bool? maintainAspectRatio}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions(
        title: title ?? this.title,
        legend: legend ?? this.legend,
        scales: scales ?? this.scales,
        responsive: responsive ?? this.responsive,
        maintainAspectRatio: maintainAspectRatio ?? this.maintainAspectRatio);
  }

  WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions copyWithWrapped(
      {Wrapped<WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle?>? title,
      Wrapped<WebApiModulesSettingsWidgetSettingsWidgetWidgetLegend?>? legend,
      Wrapped<WebApiModulesSettingsWidgetSettingsWidgetWidgetScales?>? scales,
      Wrapped<bool?>? responsive,
      Wrapped<bool?>? maintainAspectRatio}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetOptions(
        title: (title != null ? title.value : this.title),
        legend: (legend != null ? legend.value : this.legend),
        scales: (scales != null ? scales.value : this.scales),
        responsive: (responsive != null ? responsive.value : this.responsive),
        maintainAspectRatio: (maintainAspectRatio != null
            ? maintainAspectRatio.value
            : this.maintainAspectRatio));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWidgetSettingsWidgetWidgetScales {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetScales({
    this.xAxes,
    this.yAxes,
  });

  factory WebApiModulesSettingsWidgetSettingsWidgetWidgetScales.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetScalesFromJson(json);

  @JsonKey(
      name: 'xAxes',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis>[])
  final List<WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis>? xAxes;
  @JsonKey(
      name: 'yAxes',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis>[])
  final List<WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis>? yAxes;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetScalesFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetScalesToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetScalesToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWidgetSettingsWidgetWidgetScales &&
            (identical(other.xAxes, xAxes) ||
                const DeepCollectionEquality().equals(other.xAxes, xAxes)) &&
            (identical(other.yAxes, yAxes) ||
                const DeepCollectionEquality().equals(other.yAxes, yAxes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(xAxes) ^
      const DeepCollectionEquality().hash(yAxes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesSettingsWidgetSettingsWidgetWidgetScalesExtension
    on WebApiModulesSettingsWidgetSettingsWidgetWidgetScales {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetScales copyWith(
      {List<WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis>? xAxes,
      List<WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis>? yAxes}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetScales(
        xAxes: xAxes ?? this.xAxes, yAxes: yAxes ?? this.yAxes);
  }

  WebApiModulesSettingsWidgetSettingsWidgetWidgetScales copyWithWrapped(
      {Wrapped<List<WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis>?>?
          xAxes,
      Wrapped<List<WebApiModulesSettingsWidgetSettingsWidgetWidgetAxis>?>?
          yAxes}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetScales(
        xAxes: (xAxes != null ? xAxes.value : this.xAxes),
        yAxes: (yAxes != null ? yAxes.value : this.yAxes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle({
    this.fontSize,
    this.display,
    this.text,
  });

  factory WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetTitleFromJson(json);

  @JsonKey(name: 'fontSize', includeIfNull: false)
  final int? fontSize;
  @JsonKey(name: 'display', includeIfNull: false)
  final bool? display;
  @JsonKey(name: 'text', includeIfNull: false)
  final String? text;
  static const fromJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetTitleFromJson;
  static const toJsonFactory =
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetTitleToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesSettingsWidgetSettingsWidgetWidgetTitleToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle &&
            (identical(other.fontSize, fontSize) ||
                const DeepCollectionEquality()
                    .equals(other.fontSize, fontSize)) &&
            (identical(other.display, display) ||
                const DeepCollectionEquality()
                    .equals(other.display, display)) &&
            (identical(other.text, text) ||
                const DeepCollectionEquality().equals(other.text, text)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fontSize) ^
      const DeepCollectionEquality().hash(display) ^
      const DeepCollectionEquality().hash(text) ^
      runtimeType.hashCode;
}

extension $WebApiModulesSettingsWidgetSettingsWidgetWidgetTitleExtension
    on WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle {
  WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle copyWith(
      {int? fontSize, bool? display, String? text}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle(
        fontSize: fontSize ?? this.fontSize,
        display: display ?? this.display,
        text: text ?? this.text);
  }

  WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle copyWithWrapped(
      {Wrapped<int?>? fontSize,
      Wrapped<bool?>? display,
      Wrapped<String?>? text}) {
    return WebApiModulesSettingsWidgetSettingsWidgetWidgetTitle(
        fontSize: (fontSize != null ? fontSize.value : this.fontSize),
        display: (display != null ? display.value : this.display),
        text: (text != null ? text.value : this.text));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesRequest {
  WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesRequest();

  factory WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesRequestFromJson(
          json);

  static const fromJsonFactory =
      _$WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesRequestToJson(
          this);

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode => runtimeType.hashCode;
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse {
  WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse({
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponseFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponseExtension
    on WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse {
  WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse
      copyWith({int? status, bool? success, String? msg}) {
    return WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }

  WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse
      copyWithWrapped(
          {Wrapped<int?>? status,
          Wrapped<bool?>? success,
          Wrapped<String?>? msg}) {
    return WebApiModulesUtilitiesCurrencyMissingUtilityApplyProposedCurrenciesResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesDashboardSettingsDashboardSettings {
  WebApiModulesUtilitiesDashboardSettingsDashboardSettings({
    this.userId,
    this.widgetsPerRow,
    this.availableWidgets,
    this.userWidgets,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesDashboardSettingsDashboardSettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesDashboardSettingsDashboardSettingsFromJson(json);

  @JsonKey(name: 'UserId', includeIfNull: false)
  final String? userId;
  @JsonKey(name: 'WidgetsPerRow', includeIfNull: false)
  final int? widgetsPerRow;
  @JsonKey(
      name: 'AvailableWidgets',
      includeIfNull: false,
      defaultValue: <WebApiModulesSettingsAvailableWidgetAvailableWidget>[])
  final List<WebApiModulesSettingsAvailableWidgetAvailableWidget>?
      availableWidgets;
  @JsonKey(name: 'UserWidgets', includeIfNull: false, defaultValue: <
      WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting>[])
  final List<
          WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting>?
      userWidgets;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesDashboardSettingsDashboardSettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesDashboardSettingsDashboardSettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesDashboardSettingsDashboardSettingsToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesDashboardSettingsDashboardSettings &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.widgetsPerRow, widgetsPerRow) ||
                const DeepCollectionEquality()
                    .equals(other.widgetsPerRow, widgetsPerRow)) &&
            (identical(other.availableWidgets, availableWidgets) ||
                const DeepCollectionEquality()
                    .equals(other.availableWidgets, availableWidgets)) &&
            (identical(other.userWidgets, userWidgets) ||
                const DeepCollectionEquality()
                    .equals(other.userWidgets, userWidgets)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(widgetsPerRow) ^
      const DeepCollectionEquality().hash(availableWidgets) ^
      const DeepCollectionEquality().hash(userWidgets) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesDashboardSettingsDashboardSettingsExtension
    on WebApiModulesUtilitiesDashboardSettingsDashboardSettings {
  WebApiModulesUtilitiesDashboardSettingsDashboardSettings copyWith(
      {String? userId,
      int? widgetsPerRow,
      List<WebApiModulesSettingsAvailableWidgetAvailableWidget>?
          availableWidgets,
      List<WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting>?
          userWidgets,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesDashboardSettingsDashboardSettings(
        userId: userId ?? this.userId,
        widgetsPerRow: widgetsPerRow ?? this.widgetsPerRow,
        availableWidgets: availableWidgets ?? this.availableWidgets,
        userWidgets: userWidgets ?? this.userWidgets,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesDashboardSettingsDashboardSettings copyWithWrapped(
      {Wrapped<String?>? userId,
      Wrapped<int?>? widgetsPerRow,
      Wrapped<List<WebApiModulesSettingsAvailableWidgetAvailableWidget>?>?
          availableWidgets,
      Wrapped<
              List<
                  WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting>?>?
          userWidgets,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesUtilitiesDashboardSettingsDashboardSettings(
        userId: (userId != null ? userId.value : this.userId),
        widgetsPerRow:
            (widgetsPerRow != null ? widgetsPerRow.value : this.widgetsPerRow),
        availableWidgets: (availableWidgets != null
            ? availableWidgets.value
            : this.availableWidgets),
        userWidgets:
            (userWidgets != null ? userWidgets.value : this.userWidgets),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting {
  WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting({
    this.userWidgetId,
    this.value,
    this.text,
    this.selected,
    this.apiname,
    this.modulename,
    this.clickpath,
    this.defaulttype,
    this.widgettype,
    this.defaultDataPoints,
    this.dataPoints,
    this.defaultAxisNumberFormatId,
    this.defaultAxisNumberFormat,
    this.defaultAxisNumberFormatMask,
    this.axisNumberFormatId,
    this.axisNumberFormat,
    this.axisNumberFormatMask,
    this.defaultDataNumberFormatId,
    this.defaultDataNumberFormat,
    this.defaultDataNumberFormatMask,
    this.dataNumberFormatId,
    this.dataNumberFormat,
    this.dataNumberFormatMask,
    this.defaultDateBehaviorId,
    this.defaultDateBehavior,
    this.dateBehaviorId,
    this.dateBehavior,
    this.dateFieldDisplayNames,
    this.dateFields,
    this.defaultDateField,
    this.dateField,
    this.defaultFromDate,
    this.fromDate,
    this.defaultToDate,
    this.toDate,
    this.officeLocationId,
    this.officeLocation,
    this.officeLocationCode,
    this.defaultStacked,
    this.stacked,
  });

  factory WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSettingFromJson(
          json);

  @JsonKey(name: 'userWidgetId', includeIfNull: false)
  final String? userWidgetId;
  @JsonKey(name: 'value', includeIfNull: false)
  final String? value;
  @JsonKey(name: 'text', includeIfNull: false)
  final String? text;
  @JsonKey(name: 'selected', includeIfNull: false)
  final bool? selected;
  @JsonKey(name: 'apiname', includeIfNull: false)
  final String? apiname;
  @JsonKey(name: 'modulename', includeIfNull: false)
  final String? modulename;
  @JsonKey(name: 'clickpath', includeIfNull: false)
  final String? clickpath;
  @JsonKey(name: 'defaulttype', includeIfNull: false)
  final String? defaulttype;
  @JsonKey(name: 'widgettype', includeIfNull: false)
  final String? widgettype;
  @JsonKey(name: 'defaultDataPoints', includeIfNull: false)
  final int? defaultDataPoints;
  @JsonKey(name: 'dataPoints', includeIfNull: false)
  final int? dataPoints;
  @JsonKey(name: 'defaultAxisNumberFormatId', includeIfNull: false)
  final String? defaultAxisNumberFormatId;
  @JsonKey(name: 'defaultAxisNumberFormat', includeIfNull: false)
  final String? defaultAxisNumberFormat;
  @JsonKey(name: 'defaultAxisNumberFormatMask', includeIfNull: false)
  final String? defaultAxisNumberFormatMask;
  @JsonKey(name: 'axisNumberFormatId', includeIfNull: false)
  final String? axisNumberFormatId;
  @JsonKey(name: 'axisNumberFormat', includeIfNull: false)
  final String? axisNumberFormat;
  @JsonKey(name: 'axisNumberFormatMask', includeIfNull: false)
  final String? axisNumberFormatMask;
  @JsonKey(name: 'defaultDataNumberFormatId', includeIfNull: false)
  final String? defaultDataNumberFormatId;
  @JsonKey(name: 'defaultDataNumberFormat', includeIfNull: false)
  final String? defaultDataNumberFormat;
  @JsonKey(name: 'defaultDataNumberFormatMask', includeIfNull: false)
  final String? defaultDataNumberFormatMask;
  @JsonKey(name: 'dataNumberFormatId', includeIfNull: false)
  final String? dataNumberFormatId;
  @JsonKey(name: 'dataNumberFormat', includeIfNull: false)
  final String? dataNumberFormat;
  @JsonKey(name: 'dataNumberFormatMask', includeIfNull: false)
  final String? dataNumberFormatMask;
  @JsonKey(name: 'defaultDateBehaviorId', includeIfNull: false)
  final String? defaultDateBehaviorId;
  @JsonKey(name: 'defaultDateBehavior', includeIfNull: false)
  final String? defaultDateBehavior;
  @JsonKey(name: 'dateBehaviorId', includeIfNull: false)
  final String? dateBehaviorId;
  @JsonKey(name: 'dateBehavior', includeIfNull: false)
  final String? dateBehavior;
  @JsonKey(name: 'dateFieldDisplayNames', includeIfNull: false)
  final String? dateFieldDisplayNames;
  @JsonKey(name: 'dateFields', includeIfNull: false)
  final String? dateFields;
  @JsonKey(name: 'defaultDateField', includeIfNull: false)
  final String? defaultDateField;
  @JsonKey(name: 'dateField', includeIfNull: false)
  final String? dateField;
  @JsonKey(name: 'defaultFromDate', includeIfNull: false)
  final DateTime? defaultFromDate;
  @JsonKey(name: 'fromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'defaultToDate', includeIfNull: false)
  final DateTime? defaultToDate;
  @JsonKey(name: 'toDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'officeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'officeLocation', includeIfNull: false)
  final String? officeLocation;
  @JsonKey(name: 'officeLocationCode', includeIfNull: false)
  final String? officeLocationCode;
  @JsonKey(name: 'defaultStacked', includeIfNull: false)
  final bool? defaultStacked;
  @JsonKey(name: 'stacked', includeIfNull: false)
  final bool? stacked;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSettingFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSettingToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSettingToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting &&
            (identical(other.userWidgetId, userWidgetId) ||
                const DeepCollectionEquality()
                    .equals(other.userWidgetId, userWidgetId)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)) &&
            (identical(other.text, text) ||
                const DeepCollectionEquality().equals(other.text, text)) &&
            (identical(other.selected, selected) ||
                const DeepCollectionEquality()
                    .equals(other.selected, selected)) &&
            (identical(other.apiname, apiname) ||
                const DeepCollectionEquality()
                    .equals(other.apiname, apiname)) &&
            (identical(other.modulename, modulename) ||
                const DeepCollectionEquality()
                    .equals(other.modulename, modulename)) &&
            (identical(other.clickpath, clickpath) ||
                const DeepCollectionEquality()
                    .equals(other.clickpath, clickpath)) &&
            (identical(other.defaulttype, defaulttype) ||
                const DeepCollectionEquality()
                    .equals(other.defaulttype, defaulttype)) &&
            (identical(other.widgettype, widgettype) ||
                const DeepCollectionEquality()
                    .equals(other.widgettype, widgettype)) &&
            (identical(other.defaultDataPoints, defaultDataPoints) ||
                const DeepCollectionEquality()
                    .equals(other.defaultDataPoints, defaultDataPoints)) &&
            (identical(other.dataPoints, dataPoints) ||
                const DeepCollectionEquality()
                    .equals(other.dataPoints, dataPoints)) &&
            (identical(other.defaultAxisNumberFormatId, defaultAxisNumberFormatId) ||
                const DeepCollectionEquality().equals(
                    other.defaultAxisNumberFormatId,
                    defaultAxisNumberFormatId)) &&
            (identical(other.defaultAxisNumberFormat, defaultAxisNumberFormat) ||
                const DeepCollectionEquality().equals(
                    other.defaultAxisNumberFormat, defaultAxisNumberFormat)) &&
            (identical(other.defaultAxisNumberFormatMask, defaultAxisNumberFormatMask) ||
                const DeepCollectionEquality().equals(
                    other.defaultAxisNumberFormatMask,
                    defaultAxisNumberFormatMask)) &&
            (identical(other.axisNumberFormatId, axisNumberFormatId) ||
                const DeepCollectionEquality().equals(other.axisNumberFormatId, axisNumberFormatId)) &&
            (identical(other.axisNumberFormat, axisNumberFormat) || const DeepCollectionEquality().equals(other.axisNumberFormat, axisNumberFormat)) &&
            (identical(other.axisNumberFormatMask, axisNumberFormatMask) || const DeepCollectionEquality().equals(other.axisNumberFormatMask, axisNumberFormatMask)) &&
            (identical(other.defaultDataNumberFormatId, defaultDataNumberFormatId) || const DeepCollectionEquality().equals(other.defaultDataNumberFormatId, defaultDataNumberFormatId)) &&
            (identical(other.defaultDataNumberFormat, defaultDataNumberFormat) || const DeepCollectionEquality().equals(other.defaultDataNumberFormat, defaultDataNumberFormat)) &&
            (identical(other.defaultDataNumberFormatMask, defaultDataNumberFormatMask) || const DeepCollectionEquality().equals(other.defaultDataNumberFormatMask, defaultDataNumberFormatMask)) &&
            (identical(other.dataNumberFormatId, dataNumberFormatId) || const DeepCollectionEquality().equals(other.dataNumberFormatId, dataNumberFormatId)) &&
            (identical(other.dataNumberFormat, dataNumberFormat) || const DeepCollectionEquality().equals(other.dataNumberFormat, dataNumberFormat)) &&
            (identical(other.dataNumberFormatMask, dataNumberFormatMask) || const DeepCollectionEquality().equals(other.dataNumberFormatMask, dataNumberFormatMask)) &&
            (identical(other.defaultDateBehaviorId, defaultDateBehaviorId) || const DeepCollectionEquality().equals(other.defaultDateBehaviorId, defaultDateBehaviorId)) &&
            (identical(other.defaultDateBehavior, defaultDateBehavior) || const DeepCollectionEquality().equals(other.defaultDateBehavior, defaultDateBehavior)) &&
            (identical(other.dateBehaviorId, dateBehaviorId) || const DeepCollectionEquality().equals(other.dateBehaviorId, dateBehaviorId)) &&
            (identical(other.dateBehavior, dateBehavior) || const DeepCollectionEquality().equals(other.dateBehavior, dateBehavior)) &&
            (identical(other.dateFieldDisplayNames, dateFieldDisplayNames) || const DeepCollectionEquality().equals(other.dateFieldDisplayNames, dateFieldDisplayNames)) &&
            (identical(other.dateFields, dateFields) || const DeepCollectionEquality().equals(other.dateFields, dateFields)) &&
            (identical(other.defaultDateField, defaultDateField) || const DeepCollectionEquality().equals(other.defaultDateField, defaultDateField)) &&
            (identical(other.dateField, dateField) || const DeepCollectionEquality().equals(other.dateField, dateField)) &&
            (identical(other.defaultFromDate, defaultFromDate) || const DeepCollectionEquality().equals(other.defaultFromDate, defaultFromDate)) &&
            (identical(other.fromDate, fromDate) || const DeepCollectionEquality().equals(other.fromDate, fromDate)) &&
            (identical(other.defaultToDate, defaultToDate) || const DeepCollectionEquality().equals(other.defaultToDate, defaultToDate)) &&
            (identical(other.toDate, toDate) || const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) || const DeepCollectionEquality().equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.officeLocation, officeLocation) || const DeepCollectionEquality().equals(other.officeLocation, officeLocation)) &&
            (identical(other.officeLocationCode, officeLocationCode) || const DeepCollectionEquality().equals(other.officeLocationCode, officeLocationCode)) &&
            (identical(other.defaultStacked, defaultStacked) || const DeepCollectionEquality().equals(other.defaultStacked, defaultStacked)) &&
            (identical(other.stacked, stacked) || const DeepCollectionEquality().equals(other.stacked, stacked)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(userWidgetId) ^
      const DeepCollectionEquality().hash(value) ^
      const DeepCollectionEquality().hash(text) ^
      const DeepCollectionEquality().hash(selected) ^
      const DeepCollectionEquality().hash(apiname) ^
      const DeepCollectionEquality().hash(modulename) ^
      const DeepCollectionEquality().hash(clickpath) ^
      const DeepCollectionEquality().hash(defaulttype) ^
      const DeepCollectionEquality().hash(widgettype) ^
      const DeepCollectionEquality().hash(defaultDataPoints) ^
      const DeepCollectionEquality().hash(dataPoints) ^
      const DeepCollectionEquality().hash(defaultAxisNumberFormatId) ^
      const DeepCollectionEquality().hash(defaultAxisNumberFormat) ^
      const DeepCollectionEquality().hash(defaultAxisNumberFormatMask) ^
      const DeepCollectionEquality().hash(axisNumberFormatId) ^
      const DeepCollectionEquality().hash(axisNumberFormat) ^
      const DeepCollectionEquality().hash(axisNumberFormatMask) ^
      const DeepCollectionEquality().hash(defaultDataNumberFormatId) ^
      const DeepCollectionEquality().hash(defaultDataNumberFormat) ^
      const DeepCollectionEquality().hash(defaultDataNumberFormatMask) ^
      const DeepCollectionEquality().hash(dataNumberFormatId) ^
      const DeepCollectionEquality().hash(dataNumberFormat) ^
      const DeepCollectionEquality().hash(dataNumberFormatMask) ^
      const DeepCollectionEquality().hash(defaultDateBehaviorId) ^
      const DeepCollectionEquality().hash(defaultDateBehavior) ^
      const DeepCollectionEquality().hash(dateBehaviorId) ^
      const DeepCollectionEquality().hash(dateBehavior) ^
      const DeepCollectionEquality().hash(dateFieldDisplayNames) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(defaultDateField) ^
      const DeepCollectionEquality().hash(dateField) ^
      const DeepCollectionEquality().hash(defaultFromDate) ^
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(defaultToDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(officeLocation) ^
      const DeepCollectionEquality().hash(officeLocationCode) ^
      const DeepCollectionEquality().hash(defaultStacked) ^
      const DeepCollectionEquality().hash(stacked) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSettingExtension
    on WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting {
  WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting
      copyWith(
          {String? userWidgetId,
          String? value,
          String? text,
          bool? selected,
          String? apiname,
          String? modulename,
          String? clickpath,
          String? defaulttype,
          String? widgettype,
          int? defaultDataPoints,
          int? dataPoints,
          String? defaultAxisNumberFormatId,
          String? defaultAxisNumberFormat,
          String? defaultAxisNumberFormatMask,
          String? axisNumberFormatId,
          String? axisNumberFormat,
          String? axisNumberFormatMask,
          String? defaultDataNumberFormatId,
          String? defaultDataNumberFormat,
          String? defaultDataNumberFormatMask,
          String? dataNumberFormatId,
          String? dataNumberFormat,
          String? dataNumberFormatMask,
          String? defaultDateBehaviorId,
          String? defaultDateBehavior,
          String? dateBehaviorId,
          String? dateBehavior,
          String? dateFieldDisplayNames,
          String? dateFields,
          String? defaultDateField,
          String? dateField,
          DateTime? defaultFromDate,
          DateTime? fromDate,
          DateTime? defaultToDate,
          DateTime? toDate,
          String? officeLocationId,
          String? officeLocation,
          String? officeLocationCode,
          bool? defaultStacked,
          bool? stacked}) {
    return WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting(
        userWidgetId: userWidgetId ?? this.userWidgetId,
        value: value ?? this.value,
        text: text ?? this.text,
        selected: selected ?? this.selected,
        apiname: apiname ?? this.apiname,
        modulename: modulename ?? this.modulename,
        clickpath: clickpath ?? this.clickpath,
        defaulttype: defaulttype ?? this.defaulttype,
        widgettype: widgettype ?? this.widgettype,
        defaultDataPoints: defaultDataPoints ?? this.defaultDataPoints,
        dataPoints: dataPoints ?? this.dataPoints,
        defaultAxisNumberFormatId:
            defaultAxisNumberFormatId ?? this.defaultAxisNumberFormatId,
        defaultAxisNumberFormat:
            defaultAxisNumberFormat ?? this.defaultAxisNumberFormat,
        defaultAxisNumberFormatMask:
            defaultAxisNumberFormatMask ?? this.defaultAxisNumberFormatMask,
        axisNumberFormatId: axisNumberFormatId ?? this.axisNumberFormatId,
        axisNumberFormat: axisNumberFormat ?? this.axisNumberFormat,
        axisNumberFormatMask: axisNumberFormatMask ?? this.axisNumberFormatMask,
        defaultDataNumberFormatId:
            defaultDataNumberFormatId ?? this.defaultDataNumberFormatId,
        defaultDataNumberFormat:
            defaultDataNumberFormat ?? this.defaultDataNumberFormat,
        defaultDataNumberFormatMask:
            defaultDataNumberFormatMask ?? this.defaultDataNumberFormatMask,
        dataNumberFormatId: dataNumberFormatId ?? this.dataNumberFormatId,
        dataNumberFormat: dataNumberFormat ?? this.dataNumberFormat,
        dataNumberFormatMask: dataNumberFormatMask ?? this.dataNumberFormatMask,
        defaultDateBehaviorId:
            defaultDateBehaviorId ?? this.defaultDateBehaviorId,
        defaultDateBehavior: defaultDateBehavior ?? this.defaultDateBehavior,
        dateBehaviorId: dateBehaviorId ?? this.dateBehaviorId,
        dateBehavior: dateBehavior ?? this.dateBehavior,
        dateFieldDisplayNames:
            dateFieldDisplayNames ?? this.dateFieldDisplayNames,
        dateFields: dateFields ?? this.dateFields,
        defaultDateField: defaultDateField ?? this.defaultDateField,
        dateField: dateField ?? this.dateField,
        defaultFromDate: defaultFromDate ?? this.defaultFromDate,
        fromDate: fromDate ?? this.fromDate,
        defaultToDate: defaultToDate ?? this.defaultToDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        officeLocation: officeLocation ?? this.officeLocation,
        officeLocationCode: officeLocationCode ?? this.officeLocationCode,
        defaultStacked: defaultStacked ?? this.defaultStacked,
        stacked: stacked ?? this.stacked);
  }

  WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting
      copyWithWrapped(
          {Wrapped<String?>? userWidgetId,
          Wrapped<String?>? value,
          Wrapped<String?>? text,
          Wrapped<bool?>? selected,
          Wrapped<String?>? apiname,
          Wrapped<String?>? modulename,
          Wrapped<String?>? clickpath,
          Wrapped<String?>? defaulttype,
          Wrapped<String?>? widgettype,
          Wrapped<int?>? defaultDataPoints,
          Wrapped<int?>? dataPoints,
          Wrapped<String?>? defaultAxisNumberFormatId,
          Wrapped<String?>? defaultAxisNumberFormat,
          Wrapped<String?>? defaultAxisNumberFormatMask,
          Wrapped<String?>? axisNumberFormatId,
          Wrapped<String?>? axisNumberFormat,
          Wrapped<String?>? axisNumberFormatMask,
          Wrapped<String?>? defaultDataNumberFormatId,
          Wrapped<String?>? defaultDataNumberFormat,
          Wrapped<String?>? defaultDataNumberFormatMask,
          Wrapped<String?>? dataNumberFormatId,
          Wrapped<String?>? dataNumberFormat,
          Wrapped<String?>? dataNumberFormatMask,
          Wrapped<String?>? defaultDateBehaviorId,
          Wrapped<String?>? defaultDateBehavior,
          Wrapped<String?>? dateBehaviorId,
          Wrapped<String?>? dateBehavior,
          Wrapped<String?>? dateFieldDisplayNames,
          Wrapped<String?>? dateFields,
          Wrapped<String?>? defaultDateField,
          Wrapped<String?>? dateField,
          Wrapped<DateTime?>? defaultFromDate,
          Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? defaultToDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? officeLocation,
          Wrapped<String?>? officeLocationCode,
          Wrapped<bool?>? defaultStacked,
          Wrapped<bool?>? stacked}) {
    return WebApiModulesUtilitiesDashboardSettingsDashboardSettingsLogicUserDashboardSetting(
        userWidgetId:
            (userWidgetId != null ? userWidgetId.value : this.userWidgetId),
        value: (value != null ? value.value : this.value),
        text: (text != null ? text.value : this.text),
        selected: (selected != null ? selected.value : this.selected),
        apiname: (apiname != null ? apiname.value : this.apiname),
        modulename: (modulename != null ? modulename.value : this.modulename),
        clickpath: (clickpath != null ? clickpath.value : this.clickpath),
        defaulttype:
            (defaulttype != null ? defaulttype.value : this.defaulttype),
        widgettype: (widgettype != null ? widgettype.value : this.widgettype),
        defaultDataPoints: (defaultDataPoints != null
            ? defaultDataPoints.value
            : this.defaultDataPoints),
        dataPoints: (dataPoints != null ? dataPoints.value : this.dataPoints),
        defaultAxisNumberFormatId: (defaultAxisNumberFormatId != null
            ? defaultAxisNumberFormatId.value
            : this.defaultAxisNumberFormatId),
        defaultAxisNumberFormat: (defaultAxisNumberFormat != null
            ? defaultAxisNumberFormat.value
            : this.defaultAxisNumberFormat),
        defaultAxisNumberFormatMask: (defaultAxisNumberFormatMask != null
            ? defaultAxisNumberFormatMask.value
            : this.defaultAxisNumberFormatMask),
        axisNumberFormatId: (axisNumberFormatId != null
            ? axisNumberFormatId.value
            : this.axisNumberFormatId),
        axisNumberFormat: (axisNumberFormat != null
            ? axisNumberFormat.value
            : this.axisNumberFormat),
        axisNumberFormatMask: (axisNumberFormatMask != null
            ? axisNumberFormatMask.value
            : this.axisNumberFormatMask),
        defaultDataNumberFormatId: (defaultDataNumberFormatId != null
            ? defaultDataNumberFormatId.value
            : this.defaultDataNumberFormatId),
        defaultDataNumberFormat: (defaultDataNumberFormat != null
            ? defaultDataNumberFormat.value
            : this.defaultDataNumberFormat),
        defaultDataNumberFormatMask: (defaultDataNumberFormatMask != null
            ? defaultDataNumberFormatMask.value
            : this.defaultDataNumberFormatMask),
        dataNumberFormatId: (dataNumberFormatId != null
            ? dataNumberFormatId.value
            : this.dataNumberFormatId),
        dataNumberFormat: (dataNumberFormat != null
            ? dataNumberFormat.value
            : this.dataNumberFormat),
        dataNumberFormatMask: (dataNumberFormatMask != null
            ? dataNumberFormatMask.value
            : this.dataNumberFormatMask),
        defaultDateBehaviorId: (defaultDateBehaviorId != null
            ? defaultDateBehaviorId.value
            : this.defaultDateBehaviorId),
        defaultDateBehavior: (defaultDateBehavior != null
            ? defaultDateBehavior.value
            : this.defaultDateBehavior),
        dateBehaviorId: (dateBehaviorId != null
            ? dateBehaviorId.value
            : this.dateBehaviorId),
        dateBehavior:
            (dateBehavior != null ? dateBehavior.value : this.dateBehavior),
        dateFieldDisplayNames: (dateFieldDisplayNames != null
            ? dateFieldDisplayNames.value
            : this.dateFieldDisplayNames),
        dateFields: (dateFields != null ? dateFields.value : this.dateFields),
        defaultDateField: (defaultDateField != null
            ? defaultDateField.value
            : this.defaultDateField),
        dateField: (dateField != null ? dateField.value : this.dateField),
        defaultFromDate: (defaultFromDate != null
            ? defaultFromDate.value
            : this.defaultFromDate),
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        defaultToDate:
            (defaultToDate != null ? defaultToDate.value : this.defaultToDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        officeLocation: (officeLocation != null
            ? officeLocation.value
            : this.officeLocation),
        officeLocationCode: (officeLocationCode != null
            ? officeLocationCode.value
            : this.officeLocationCode),
        defaultStacked: (defaultStacked != null
            ? defaultStacked.value
            : this.defaultStacked),
        stacked: (stacked != null ? stacked.value : this.stacked));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem {
  WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem({
    this.inventoryId,
    this.warehouseId,
    this.iCode,
    this.description,
    this.availableFor,
    this.rank,
    this.categoryId,
    this.category,
    this.subCategoryId,
    this.subCategory,
    this.inventoryTypeId,
    this.inventoryType,
    this.warehouseCode,
    this.warehouse,
    this.quantity,
    this.aisleLocation,
    this.shelfLocation,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemFromJson(
          json);

  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'AvailableFor', includeIfNull: false)
  final String? availableFor;
  @JsonKey(name: 'Rank', includeIfNull: false)
  final String? rank;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'SubCategory', includeIfNull: false)
  final String? subCategory;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'Quantity', includeIfNull: false)
  final double? quantity;
  @JsonKey(name: 'AisleLocation', includeIfNull: false)
  final String? aisleLocation;
  @JsonKey(name: 'ShelfLocation', includeIfNull: false)
  final String? shelfLocation;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.iCode, iCode) ||
                const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.availableFor, availableFor) ||
                const DeepCollectionEquality()
                    .equals(other.availableFor, availableFor)) &&
            (identical(other.rank, rank) ||
                const DeepCollectionEquality().equals(other.rank, rank)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) ||
                const DeepCollectionEquality()
                    .equals(other.category, category)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.subCategory, subCategory) ||
                const DeepCollectionEquality()
                    .equals(other.subCategory, subCategory)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.quantity, quantity) ||
                const DeepCollectionEquality()
                    .equals(other.quantity, quantity)) &&
            (identical(other.aisleLocation, aisleLocation) ||
                const DeepCollectionEquality()
                    .equals(other.aisleLocation, aisleLocation)) &&
            (identical(other.shelfLocation, shelfLocation) ||
                const DeepCollectionEquality()
                    .equals(other.shelfLocation, shelfLocation)) &&
            (identical(other.auditNote, auditNote) || const DeepCollectionEquality().equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(iCode) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(availableFor) ^
      const DeepCollectionEquality().hash(rank) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(category) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(subCategory) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(inventoryType) ^
      const DeepCollectionEquality().hash(warehouseCode) ^
      const DeepCollectionEquality().hash(warehouse) ^
      const DeepCollectionEquality().hash(quantity) ^
      const DeepCollectionEquality().hash(aisleLocation) ^
      const DeepCollectionEquality().hash(shelfLocation) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItemExtension
    on WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem {
  WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem copyWith(
      {String? inventoryId,
      String? warehouseId,
      String? iCode,
      String? description,
      String? availableFor,
      String? rank,
      String? categoryId,
      String? category,
      String? subCategoryId,
      String? subCategory,
      String? inventoryTypeId,
      String? inventoryType,
      String? warehouseCode,
      String? warehouse,
      double? quantity,
      String? aisleLocation,
      String? shelfLocation,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem(
        inventoryId: inventoryId ?? this.inventoryId,
        warehouseId: warehouseId ?? this.warehouseId,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        availableFor: availableFor ?? this.availableFor,
        rank: rank ?? this.rank,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        subCategory: subCategory ?? this.subCategory,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        warehouse: warehouse ?? this.warehouse,
        quantity: quantity ?? this.quantity,
        aisleLocation: aisleLocation ?? this.aisleLocation,
        shelfLocation: shelfLocation ?? this.shelfLocation,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem
      copyWithWrapped(
          {Wrapped<String?>? inventoryId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? iCode,
          Wrapped<String?>? description,
          Wrapped<String?>? availableFor,
          Wrapped<String?>? rank,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? category,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? subCategory,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? inventoryType,
          Wrapped<String?>? warehouseCode,
          Wrapped<String?>? warehouse,
          Wrapped<double?>? quantity,
          Wrapped<String?>? aisleLocation,
          Wrapped<String?>? shelfLocation,
          Wrapped<String?>? auditNote,
          Wrapped<String?>? recordTitle,
          Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
              fields,
          Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
          Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
              defaultFieldAttributes}) {
    return WebApiModulesUtilitiesInventoryLocationItemInventoryLocationItem(
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        iCode: (iCode != null ? iCode.value : this.iCode),
        description:
            (description != null ? description.value : this.description),
        availableFor:
            (availableFor != null ? availableFor.value : this.availableFor),
        rank: (rank != null ? rank.value : this.rank),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        category: (category != null ? category.value : this.category),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        subCategory:
            (subCategory != null ? subCategory.value : this.subCategory),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        inventoryType:
            (inventoryType != null ? inventoryType.value : this.inventoryType),
        warehouseCode:
            (warehouseCode != null ? warehouseCode.value : this.warehouseCode),
        warehouse: (warehouse != null ? warehouse.value : this.warehouse),
        quantity: (quantity != null ? quantity.value : this.quantity),
        aisleLocation:
            (aisleLocation != null ? aisleLocation.value : this.aisleLocation),
        shelfLocation:
            (shelfLocation != null ? shelfLocation.value : this.shelfLocation),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryMergeInventoryMerge {
  WebApiModulesUtilitiesInventoryMergeInventoryMerge({
    this.inventoryMergeId,
    this.sessionId,
    this.fromInventoryId,
    this.fromICode,
    this.fromDescription,
    this.toInventoryId,
    this.toICode,
    this.toDescription,
    this.warehouseId,
    this.warehouse,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesInventoryMergeInventoryMerge.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryMergeInventoryMergeFromJson(json);

  @JsonKey(name: 'InventoryMergeId', includeIfNull: false)
  final int? inventoryMergeId;
  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'FromInventoryId', includeIfNull: false)
  final String? fromInventoryId;
  @JsonKey(name: 'FromICode', includeIfNull: false)
  final String? fromICode;
  @JsonKey(name: 'FromDescription', includeIfNull: false)
  final String? fromDescription;
  @JsonKey(name: 'ToInventoryId', includeIfNull: false)
  final String? toInventoryId;
  @JsonKey(name: 'ToICode', includeIfNull: false)
  final String? toICode;
  @JsonKey(name: 'ToDescription', includeIfNull: false)
  final String? toDescription;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryMergeInventoryMergeFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryMergeInventoryMergeToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryMergeInventoryMergeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryMergeInventoryMerge &&
            (identical(other.inventoryMergeId, inventoryMergeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryMergeId, inventoryMergeId)) &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)) &&
            (identical(other.fromInventoryId, fromInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.fromInventoryId, fromInventoryId)) &&
            (identical(other.fromICode, fromICode) ||
                const DeepCollectionEquality()
                    .equals(other.fromICode, fromICode)) &&
            (identical(other.fromDescription, fromDescription) ||
                const DeepCollectionEquality()
                    .equals(other.fromDescription, fromDescription)) &&
            (identical(other.toInventoryId, toInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.toInventoryId, toInventoryId)) &&
            (identical(other.toICode, toICode) ||
                const DeepCollectionEquality()
                    .equals(other.toICode, toICode)) &&
            (identical(other.toDescription, toDescription) ||
                const DeepCollectionEquality()
                    .equals(other.toDescription, toDescription)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(inventoryMergeId) ^
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(fromInventoryId) ^
      const DeepCollectionEquality().hash(fromICode) ^
      const DeepCollectionEquality().hash(fromDescription) ^
      const DeepCollectionEquality().hash(toInventoryId) ^
      const DeepCollectionEquality().hash(toICode) ^
      const DeepCollectionEquality().hash(toDescription) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(warehouse) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryMergeInventoryMergeExtension
    on WebApiModulesUtilitiesInventoryMergeInventoryMerge {
  WebApiModulesUtilitiesInventoryMergeInventoryMerge copyWith(
      {int? inventoryMergeId,
      String? sessionId,
      String? fromInventoryId,
      String? fromICode,
      String? fromDescription,
      String? toInventoryId,
      String? toICode,
      String? toDescription,
      String? warehouseId,
      String? warehouse,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesInventoryMergeInventoryMerge(
        inventoryMergeId: inventoryMergeId ?? this.inventoryMergeId,
        sessionId: sessionId ?? this.sessionId,
        fromInventoryId: fromInventoryId ?? this.fromInventoryId,
        fromICode: fromICode ?? this.fromICode,
        fromDescription: fromDescription ?? this.fromDescription,
        toInventoryId: toInventoryId ?? this.toInventoryId,
        toICode: toICode ?? this.toICode,
        toDescription: toDescription ?? this.toDescription,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouse: warehouse ?? this.warehouse,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesInventoryMergeInventoryMerge copyWithWrapped(
      {Wrapped<int?>? inventoryMergeId,
      Wrapped<String?>? sessionId,
      Wrapped<String?>? fromInventoryId,
      Wrapped<String?>? fromICode,
      Wrapped<String?>? fromDescription,
      Wrapped<String?>? toInventoryId,
      Wrapped<String?>? toICode,
      Wrapped<String?>? toDescription,
      Wrapped<String?>? warehouseId,
      Wrapped<String?>? warehouse,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesUtilitiesInventoryMergeInventoryMerge(
        inventoryMergeId: (inventoryMergeId != null
            ? inventoryMergeId.value
            : this.inventoryMergeId),
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        fromInventoryId: (fromInventoryId != null
            ? fromInventoryId.value
            : this.fromInventoryId),
        fromICode: (fromICode != null ? fromICode.value : this.fromICode),
        fromDescription: (fromDescription != null
            ? fromDescription.value
            : this.fromDescription),
        toInventoryId:
            (toInventoryId != null ? toInventoryId.value : this.toInventoryId),
        toICode: (toICode != null ? toICode.value : this.toICode),
        toDescription:
            (toDescription != null ? toDescription.value : this.toDescription),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        warehouse: (warehouse != null ? warehouse.value : this.warehouse),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequest {
  WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequest({
    this.sessionId,
    this.makeInactive,
  });

  factory WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequestFromJson(
          json);

  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'MakeInactive', includeIfNull: false)
  final String? makeInactive;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequest &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)) &&
            (identical(other.makeInactive, makeInactive) ||
                const DeepCollectionEquality()
                    .equals(other.makeInactive, makeInactive)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(makeInactive) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequestExtension
    on WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequest {
  WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequest copyWith(
      {String? sessionId, String? makeInactive}) {
    return WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequest(
        sessionId: sessionId ?? this.sessionId,
        makeInactive: makeInactive ?? this.makeInactive);
  }

  WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequest
      copyWithWrapped(
          {Wrapped<String?>? sessionId, Wrapped<String?>? makeInactive}) {
    return WebApiModulesUtilitiesInventoryMergeUtilityMergeInventoryRequest(
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        makeInactive:
            (makeInactive != null ? makeInactive.value : this.makeInactive));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequest {
  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequest({
    this.status,
    this.success,
    this.msg,
    this.sessionId,
    this.inventoryId,
    this.warehouseId,
  });

  factory WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequestFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequest &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)) &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequestExtension
    on WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequest {
  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequest
      copyWith(
          {int? status,
          bool? success,
          String? msg,
          String? sessionId,
          String? inventoryId,
          String? warehouseId}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequest(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg,
        sessionId: sessionId ?? this.sessionId,
        inventoryId: inventoryId ?? this.inventoryId,
        warehouseId: warehouseId ?? this.warehouseId);
  }

  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequest
      copyWithWrapped(
          {Wrapped<int?>? status,
          Wrapped<bool?>? success,
          Wrapped<String?>? msg,
          Wrapped<String?>? sessionId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? warehouseId}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesRequest(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg),
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse {
  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse({
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponseFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponseExtension
    on WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse {
  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse
      copyWith({int? status, bool? success, String? msg}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }

  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse
      copyWithWrapped(
          {Wrapped<int?>? status,
          Wrapped<bool?>? success,
          Wrapped<String?>? msg}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseAssignBarCodesResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequest {
  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequest({
    this.status,
    this.success,
    this.msg,
    this.sessionId,
    this.inventoryId,
    this.quantity,
    this.warehouseId,
    this.aisleLocation,
    this.shelfLocation,
    this.manufacturerVendorId,
    this.manufacturerModelNumber,
    this.manufacturerPartNumber,
    this.countryId,
    this.warrantyDays,
    this.warrantyExpiration,
    this.purchaseVendorId,
    this.outsidePoNumber,
    this.purchaseDate,
    this.receiveDate,
    this.vendorPartNumber,
    this.currencyId,
    this.unitCost,
    this.originalShowId,
  });

  factory WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequestFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'Quantity', includeIfNull: false)
  final int? quantity;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'AisleLocation', includeIfNull: false)
  final String? aisleLocation;
  @JsonKey(name: 'ShelfLocation', includeIfNull: false)
  final String? shelfLocation;
  @JsonKey(name: 'ManufacturerVendorId', includeIfNull: false)
  final String? manufacturerVendorId;
  @JsonKey(name: 'ManufacturerModelNumber', includeIfNull: false)
  final String? manufacturerModelNumber;
  @JsonKey(name: 'ManufacturerPartNumber', includeIfNull: false)
  final String? manufacturerPartNumber;
  @JsonKey(name: 'CountryId', includeIfNull: false)
  final String? countryId;
  @JsonKey(name: 'WarrantyDays', includeIfNull: false)
  final int? warrantyDays;
  @JsonKey(name: 'WarrantyExpiration', includeIfNull: false)
  final String? warrantyExpiration;
  @JsonKey(name: 'PurchaseVendorId', includeIfNull: false)
  final String? purchaseVendorId;
  @JsonKey(name: 'OutsidePoNumber', includeIfNull: false)
  final String? outsidePoNumber;
  @JsonKey(name: 'PurchaseDate', includeIfNull: false)
  final DateTime? purchaseDate;
  @JsonKey(name: 'ReceiveDate', includeIfNull: false)
  final DateTime? receiveDate;
  @JsonKey(name: 'VendorPartNumber', includeIfNull: false)
  final String? vendorPartNumber;
  @JsonKey(name: 'CurrencyId', includeIfNull: false)
  final String? currencyId;
  @JsonKey(name: 'UnitCost', includeIfNull: false)
  final double? unitCost;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequest &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)) &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.quantity, quantity) ||
                const DeepCollectionEquality()
                    .equals(other.quantity, quantity)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.aisleLocation, aisleLocation) ||
                const DeepCollectionEquality()
                    .equals(other.aisleLocation, aisleLocation)) &&
            (identical(other.shelfLocation, shelfLocation) ||
                const DeepCollectionEquality()
                    .equals(other.shelfLocation, shelfLocation)) &&
            (identical(other.manufacturerVendorId, manufacturerVendorId) ||
                const DeepCollectionEquality().equals(
                    other.manufacturerVendorId, manufacturerVendorId)) &&
            (identical(other.manufacturerModelNumber, manufacturerModelNumber) ||
                const DeepCollectionEquality().equals(
                    other.manufacturerModelNumber, manufacturerModelNumber)) &&
            (identical(other.manufacturerPartNumber, manufacturerPartNumber) ||
                const DeepCollectionEquality().equals(
                    other.manufacturerPartNumber, manufacturerPartNumber)) &&
            (identical(other.countryId, countryId) ||
                const DeepCollectionEquality()
                    .equals(other.countryId, countryId)) &&
            (identical(other.warrantyDays, warrantyDays) ||
                const DeepCollectionEquality()
                    .equals(other.warrantyDays, warrantyDays)) &&
            (identical(other.warrantyExpiration, warrantyExpiration) ||
                const DeepCollectionEquality()
                    .equals(other.warrantyExpiration, warrantyExpiration)) &&
            (identical(other.purchaseVendorId, purchaseVendorId) ||
                const DeepCollectionEquality().equals(other.purchaseVendorId, purchaseVendorId)) &&
            (identical(other.outsidePoNumber, outsidePoNumber) || const DeepCollectionEquality().equals(other.outsidePoNumber, outsidePoNumber)) &&
            (identical(other.purchaseDate, purchaseDate) || const DeepCollectionEquality().equals(other.purchaseDate, purchaseDate)) &&
            (identical(other.receiveDate, receiveDate) || const DeepCollectionEquality().equals(other.receiveDate, receiveDate)) &&
            (identical(other.vendorPartNumber, vendorPartNumber) || const DeepCollectionEquality().equals(other.vendorPartNumber, vendorPartNumber)) &&
            (identical(other.currencyId, currencyId) || const DeepCollectionEquality().equals(other.currencyId, currencyId)) &&
            (identical(other.unitCost, unitCost) || const DeepCollectionEquality().equals(other.unitCost, unitCost)) &&
            (identical(other.originalShowId, originalShowId) || const DeepCollectionEquality().equals(other.originalShowId, originalShowId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(quantity) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(aisleLocation) ^
      const DeepCollectionEquality().hash(shelfLocation) ^
      const DeepCollectionEquality().hash(manufacturerVendorId) ^
      const DeepCollectionEquality().hash(manufacturerModelNumber) ^
      const DeepCollectionEquality().hash(manufacturerPartNumber) ^
      const DeepCollectionEquality().hash(countryId) ^
      const DeepCollectionEquality().hash(warrantyDays) ^
      const DeepCollectionEquality().hash(warrantyExpiration) ^
      const DeepCollectionEquality().hash(purchaseVendorId) ^
      const DeepCollectionEquality().hash(outsidePoNumber) ^
      const DeepCollectionEquality().hash(purchaseDate) ^
      const DeepCollectionEquality().hash(receiveDate) ^
      const DeepCollectionEquality().hash(vendorPartNumber) ^
      const DeepCollectionEquality().hash(currencyId) ^
      const DeepCollectionEquality().hash(unitCost) ^
      const DeepCollectionEquality().hash(originalShowId) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequestExtension
    on WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequest {
  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequest
      copyWith(
          {int? status,
          bool? success,
          String? msg,
          String? sessionId,
          String? inventoryId,
          int? quantity,
          String? warehouseId,
          String? aisleLocation,
          String? shelfLocation,
          String? manufacturerVendorId,
          String? manufacturerModelNumber,
          String? manufacturerPartNumber,
          String? countryId,
          int? warrantyDays,
          String? warrantyExpiration,
          String? purchaseVendorId,
          String? outsidePoNumber,
          DateTime? purchaseDate,
          DateTime? receiveDate,
          String? vendorPartNumber,
          String? currencyId,
          double? unitCost,
          String? originalShowId}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequest(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg,
        sessionId: sessionId ?? this.sessionId,
        inventoryId: inventoryId ?? this.inventoryId,
        quantity: quantity ?? this.quantity,
        warehouseId: warehouseId ?? this.warehouseId,
        aisleLocation: aisleLocation ?? this.aisleLocation,
        shelfLocation: shelfLocation ?? this.shelfLocation,
        manufacturerVendorId: manufacturerVendorId ?? this.manufacturerVendorId,
        manufacturerModelNumber:
            manufacturerModelNumber ?? this.manufacturerModelNumber,
        manufacturerPartNumber:
            manufacturerPartNumber ?? this.manufacturerPartNumber,
        countryId: countryId ?? this.countryId,
        warrantyDays: warrantyDays ?? this.warrantyDays,
        warrantyExpiration: warrantyExpiration ?? this.warrantyExpiration,
        purchaseVendorId: purchaseVendorId ?? this.purchaseVendorId,
        outsidePoNumber: outsidePoNumber ?? this.outsidePoNumber,
        purchaseDate: purchaseDate ?? this.purchaseDate,
        receiveDate: receiveDate ?? this.receiveDate,
        vendorPartNumber: vendorPartNumber ?? this.vendorPartNumber,
        currencyId: currencyId ?? this.currencyId,
        unitCost: unitCost ?? this.unitCost,
        originalShowId: originalShowId ?? this.originalShowId);
  }

  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequest
      copyWithWrapped(
          {Wrapped<int?>? status,
          Wrapped<bool?>? success,
          Wrapped<String?>? msg,
          Wrapped<String?>? sessionId,
          Wrapped<String?>? inventoryId,
          Wrapped<int?>? quantity,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? aisleLocation,
          Wrapped<String?>? shelfLocation,
          Wrapped<String?>? manufacturerVendorId,
          Wrapped<String?>? manufacturerModelNumber,
          Wrapped<String?>? manufacturerPartNumber,
          Wrapped<String?>? countryId,
          Wrapped<int?>? warrantyDays,
          Wrapped<String?>? warrantyExpiration,
          Wrapped<String?>? purchaseVendorId,
          Wrapped<String?>? outsidePoNumber,
          Wrapped<DateTime?>? purchaseDate,
          Wrapped<DateTime?>? receiveDate,
          Wrapped<String?>? vendorPartNumber,
          Wrapped<String?>? currencyId,
          Wrapped<double?>? unitCost,
          Wrapped<String?>? originalShowId}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionRequest(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg),
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        quantity: (quantity != null ? quantity.value : this.quantity),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        aisleLocation:
            (aisleLocation != null ? aisleLocation.value : this.aisleLocation),
        shelfLocation:
            (shelfLocation != null ? shelfLocation.value : this.shelfLocation),
        manufacturerVendorId: (manufacturerVendorId != null
            ? manufacturerVendorId.value
            : this.manufacturerVendorId),
        manufacturerModelNumber: (manufacturerModelNumber != null
            ? manufacturerModelNumber.value
            : this.manufacturerModelNumber),
        manufacturerPartNumber: (manufacturerPartNumber != null
            ? manufacturerPartNumber.value
            : this.manufacturerPartNumber),
        countryId: (countryId != null ? countryId.value : this.countryId),
        warrantyDays:
            (warrantyDays != null ? warrantyDays.value : this.warrantyDays),
        warrantyExpiration: (warrantyExpiration != null
            ? warrantyExpiration.value
            : this.warrantyExpiration),
        purchaseVendorId: (purchaseVendorId != null
            ? purchaseVendorId.value
            : this.purchaseVendorId),
        outsidePoNumber: (outsidePoNumber != null
            ? outsidePoNumber.value
            : this.outsidePoNumber),
        purchaseDate:
            (purchaseDate != null ? purchaseDate.value : this.purchaseDate),
        receiveDate:
            (receiveDate != null ? receiveDate.value : this.receiveDate),
        vendorPartNumber: (vendorPartNumber != null
            ? vendorPartNumber.value
            : this.vendorPartNumber),
        currencyId: (currencyId != null ? currencyId.value : this.currencyId),
        unitCost: (unitCost != null ? unitCost.value : this.unitCost),
        originalShowId: (originalShowId != null
            ? originalShowId.value
            : this.originalShowId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse {
  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse({
    this.status,
    this.success,
    this.msg,
    this.purchaseId,
    this.itemId,
    this.quantityAdded,
  });

  factory WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponseFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  @JsonKey(name: 'PurchaseId', includeIfNull: false, defaultValue: <String>[])
  final List<String>? purchaseId;
  @JsonKey(name: 'ItemId', includeIfNull: false, defaultValue: <String>[])
  final List<String>? itemId;
  @JsonKey(name: 'QuantityAdded', includeIfNull: false)
  final int? quantityAdded;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)) &&
            (identical(other.purchaseId, purchaseId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseId, purchaseId)) &&
            (identical(other.itemId, itemId) ||
                const DeepCollectionEquality().equals(other.itemId, itemId)) &&
            (identical(other.quantityAdded, quantityAdded) ||
                const DeepCollectionEquality()
                    .equals(other.quantityAdded, quantityAdded)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      const DeepCollectionEquality().hash(purchaseId) ^
      const DeepCollectionEquality().hash(itemId) ^
      const DeepCollectionEquality().hash(quantityAdded) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponseExtension
    on WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse {
  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse
      copyWith(
          {int? status,
          bool? success,
          String? msg,
          List<String>? purchaseId,
          List<String>? itemId,
          int? quantityAdded}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg,
        purchaseId: purchaseId ?? this.purchaseId,
        itemId: itemId ?? this.itemId,
        quantityAdded: quantityAdded ?? this.quantityAdded);
  }

  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse
      copyWithWrapped(
          {Wrapped<int?>? status,
          Wrapped<bool?>? success,
          Wrapped<String?>? msg,
          Wrapped<List<String>?>? purchaseId,
          Wrapped<List<String>?>? itemId,
          Wrapped<int?>? quantityAdded}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseCompleteSessionResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg),
        purchaseId: (purchaseId != null ? purchaseId.value : this.purchaseId),
        itemId: (itemId != null ? itemId.value : this.itemId),
        quantityAdded:
            (quantityAdded != null ? quantityAdded.value : this.quantityAdded));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem {
  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem({
    this.inventoryPurchaseItemId,
    this.sessionId,
    this.barCode,
    this.manufactureDate,
    this.printQuantity,
    this.serialNumber,
    this.rfId,
    this.serialNumberIsMixedCase,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemFromJson(
          json);

  @JsonKey(name: 'InventoryPurchaseItemId', includeIfNull: false)
  final int? inventoryPurchaseItemId;
  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'BarCode', includeIfNull: false)
  final String? barCode;
  @JsonKey(name: 'ManufactureDate', includeIfNull: false)
  final String? manufactureDate;
  @JsonKey(name: 'PrintQuantity', includeIfNull: false)
  final int? printQuantity;
  @JsonKey(name: 'SerialNumber', includeIfNull: false)
  final String? serialNumber;
  @JsonKey(name: 'RfId', includeIfNull: false)
  final String? rfId;
  @JsonKey(name: 'SerialNumberIsMixedCase', includeIfNull: false)
  final bool? serialNumberIsMixedCase;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem &&
            (identical(other.inventoryPurchaseItemId, inventoryPurchaseItemId) ||
                const DeepCollectionEquality().equals(
                    other.inventoryPurchaseItemId, inventoryPurchaseItemId)) &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)) &&
            (identical(other.barCode, barCode) ||
                const DeepCollectionEquality()
                    .equals(other.barCode, barCode)) &&
            (identical(other.manufactureDate, manufactureDate) ||
                const DeepCollectionEquality()
                    .equals(other.manufactureDate, manufactureDate)) &&
            (identical(other.printQuantity, printQuantity) ||
                const DeepCollectionEquality()
                    .equals(other.printQuantity, printQuantity)) &&
            (identical(other.serialNumber, serialNumber) ||
                const DeepCollectionEquality()
                    .equals(other.serialNumber, serialNumber)) &&
            (identical(other.rfId, rfId) ||
                const DeepCollectionEquality().equals(other.rfId, rfId)) &&
            (identical(other.serialNumberIsMixedCase, serialNumberIsMixedCase) ||
                const DeepCollectionEquality().equals(
                    other.serialNumberIsMixedCase, serialNumberIsMixedCase)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(inventoryPurchaseItemId) ^
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(barCode) ^
      const DeepCollectionEquality().hash(manufactureDate) ^
      const DeepCollectionEquality().hash(printQuantity) ^
      const DeepCollectionEquality().hash(serialNumber) ^
      const DeepCollectionEquality().hash(rfId) ^
      const DeepCollectionEquality().hash(serialNumberIsMixedCase) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItemExtension
    on WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem {
  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem copyWith(
      {int? inventoryPurchaseItemId,
      String? sessionId,
      String? barCode,
      String? manufactureDate,
      int? printQuantity,
      String? serialNumber,
      String? rfId,
      bool? serialNumberIsMixedCase,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem(
        inventoryPurchaseItemId:
            inventoryPurchaseItemId ?? this.inventoryPurchaseItemId,
        sessionId: sessionId ?? this.sessionId,
        barCode: barCode ?? this.barCode,
        manufactureDate: manufactureDate ?? this.manufactureDate,
        printQuantity: printQuantity ?? this.printQuantity,
        serialNumber: serialNumber ?? this.serialNumber,
        rfId: rfId ?? this.rfId,
        serialNumberIsMixedCase:
            serialNumberIsMixedCase ?? this.serialNumberIsMixedCase,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem
      copyWithWrapped(
          {Wrapped<int?>? inventoryPurchaseItemId,
          Wrapped<String?>? sessionId,
          Wrapped<String?>? barCode,
          Wrapped<String?>? manufactureDate,
          Wrapped<int?>? printQuantity,
          Wrapped<String?>? serialNumber,
          Wrapped<String?>? rfId,
          Wrapped<bool?>? serialNumberIsMixedCase,
          Wrapped<String?>? dateStamp,
          Wrapped<String?>? auditNote,
          Wrapped<String?>? recordTitle,
          Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
              fields,
          Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
          Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
              defaultFieldAttributes}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityInventoryPurchaseItem(
        inventoryPurchaseItemId: (inventoryPurchaseItemId != null
            ? inventoryPurchaseItemId.value
            : this.inventoryPurchaseItemId),
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        barCode: (barCode != null ? barCode.value : this.barCode),
        manufactureDate: (manufactureDate != null
            ? manufactureDate.value
            : this.manufactureDate),
        printQuantity:
            (printQuantity != null ? printQuantity.value : this.printQuantity),
        serialNumber:
            (serialNumber != null ? serialNumber.value : this.serialNumber),
        rfId: (rfId != null ? rfId.value : this.rfId),
        serialNumberIsMixedCase: (serialNumberIsMixedCase != null
            ? serialNumberIsMixedCase.value
            : this.serialNumberIsMixedCase),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequest {
  WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequest({
    this.inventoryId,
    this.quantity,
  });

  factory WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequestFromJson(
          json);

  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'Quantity', includeIfNull: false)
  final int? quantity;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequest &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.quantity, quantity) ||
                const DeepCollectionEquality()
                    .equals(other.quantity, quantity)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(quantity) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequestExtension
    on WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequest {
  WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequest
      copyWith({String? inventoryId, int? quantity}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequest(
        inventoryId: inventoryId ?? this.inventoryId,
        quantity: quantity ?? this.quantity);
  }

  WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequest
      copyWithWrapped(
          {Wrapped<String?>? inventoryId, Wrapped<int?>? quantity}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionRequest(
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse {
  WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse({
    this.sessionId,
  });

  factory WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponseFromJson(
          json);

  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionId) ^ runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponseExtension
    on WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse {
  WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse
      copyWith({String? sessionId}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse(
        sessionId: sessionId ?? this.sessionId);
  }

  WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse
      copyWithWrapped({Wrapped<String?>? sessionId}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityStartInventoryPurchaseSessionResponse(
        sessionId: (sessionId != null ? sessionId.value : this.sessionId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequest {
  WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequest({
    this.sessionId,
    this.inventoryId,
    this.quantity,
  });

  factory WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequestFromJson(
          json);

  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'Quantity', includeIfNull: false)
  final int? quantity;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequest &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.quantity, quantity) ||
                const DeepCollectionEquality()
                    .equals(other.quantity, quantity)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(quantity) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequestExtension
    on WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequest {
  WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequest
      copyWith({String? sessionId, String? inventoryId, int? quantity}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequest(
        sessionId: sessionId ?? this.sessionId,
        inventoryId: inventoryId ?? this.inventoryId,
        quantity: quantity ?? this.quantity);
  }

  WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequest
      copyWithWrapped(
          {Wrapped<String?>? sessionId,
          Wrapped<String?>? inventoryId,
          Wrapped<int?>? quantity}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionRequest(
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse {
  WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse({
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponseFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponseExtension
    on WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse {
  WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse
      copyWith({int? status, bool? success, String? msg}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }

  WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse
      copyWithWrapped(
          {Wrapped<int?>? status,
          Wrapped<bool?>? success,
          Wrapped<String?>? msg}) {
    return WebApiModulesUtilitiesInventoryPurchaseUtilityUpdateInventoryPurchaseSessionResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch {
  WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch({
    this.batchId,
    this.locationId,
    this.batchType,
    this.divisionCode,
    this.batchNumber,
    this.batchDate,
    this.batchTime,
    this.batchDateTime,
    this.exportDate,
    this.exported,
    this.recordCount,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchFromJson(
          json);

  @JsonKey(name: 'BatchId', includeIfNull: false)
  final String? batchId;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'BatchType', includeIfNull: false)
  final String? batchType;
  @JsonKey(name: 'DivisionCode', includeIfNull: false)
  final String? divisionCode;
  @JsonKey(name: 'BatchNumber', includeIfNull: false)
  final String? batchNumber;
  @JsonKey(name: 'BatchDate', includeIfNull: false)
  final String? batchDate;
  @JsonKey(name: 'BatchTime', includeIfNull: false)
  final String? batchTime;
  @JsonKey(name: 'BatchDateTime', includeIfNull: false)
  final String? batchDateTime;
  @JsonKey(name: 'ExportDate', includeIfNull: false)
  final String? exportDate;
  @JsonKey(name: 'Exported', includeIfNull: false)
  final bool? exported;
  @JsonKey(name: 'RecordCount', includeIfNull: false)
  final int? recordCount;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch &&
            (identical(other.batchId, batchId) ||
                const DeepCollectionEquality()
                    .equals(other.batchId, batchId)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.batchType, batchType) ||
                const DeepCollectionEquality()
                    .equals(other.batchType, batchType)) &&
            (identical(other.divisionCode, divisionCode) ||
                const DeepCollectionEquality()
                    .equals(other.divisionCode, divisionCode)) &&
            (identical(other.batchNumber, batchNumber) ||
                const DeepCollectionEquality()
                    .equals(other.batchNumber, batchNumber)) &&
            (identical(other.batchDate, batchDate) ||
                const DeepCollectionEquality()
                    .equals(other.batchDate, batchDate)) &&
            (identical(other.batchTime, batchTime) ||
                const DeepCollectionEquality()
                    .equals(other.batchTime, batchTime)) &&
            (identical(other.batchDateTime, batchDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.batchDateTime, batchDateTime)) &&
            (identical(other.exportDate, exportDate) ||
                const DeepCollectionEquality()
                    .equals(other.exportDate, exportDate)) &&
            (identical(other.exported, exported) ||
                const DeepCollectionEquality()
                    .equals(other.exported, exported)) &&
            (identical(other.recordCount, recordCount) ||
                const DeepCollectionEquality()
                    .equals(other.recordCount, recordCount)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality()
                    .equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batchId) ^
      const DeepCollectionEquality().hash(locationId) ^
      const DeepCollectionEquality().hash(batchType) ^
      const DeepCollectionEquality().hash(divisionCode) ^
      const DeepCollectionEquality().hash(batchNumber) ^
      const DeepCollectionEquality().hash(batchDate) ^
      const DeepCollectionEquality().hash(batchTime) ^
      const DeepCollectionEquality().hash(batchDateTime) ^
      const DeepCollectionEquality().hash(exportDate) ^
      const DeepCollectionEquality().hash(exported) ^
      const DeepCollectionEquality().hash(recordCount) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchExtension
    on WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch {
  WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch copyWith(
      {String? batchId,
      String? locationId,
      String? batchType,
      String? divisionCode,
      String? batchNumber,
      String? batchDate,
      String? batchTime,
      String? batchDateTime,
      String? exportDate,
      bool? exported,
      int? recordCount,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch(
        batchId: batchId ?? this.batchId,
        locationId: locationId ?? this.locationId,
        batchType: batchType ?? this.batchType,
        divisionCode: divisionCode ?? this.divisionCode,
        batchNumber: batchNumber ?? this.batchNumber,
        batchDate: batchDate ?? this.batchDate,
        batchTime: batchTime ?? this.batchTime,
        batchDateTime: batchDateTime ?? this.batchDateTime,
        exportDate: exportDate ?? this.exportDate,
        exported: exported ?? this.exported,
        recordCount: recordCount ?? this.recordCount,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch copyWithWrapped(
      {Wrapped<String?>? batchId,
      Wrapped<String?>? locationId,
      Wrapped<String?>? batchType,
      Wrapped<String?>? divisionCode,
      Wrapped<String?>? batchNumber,
      Wrapped<String?>? batchDate,
      Wrapped<String?>? batchTime,
      Wrapped<String?>? batchDateTime,
      Wrapped<String?>? exportDate,
      Wrapped<bool?>? exported,
      Wrapped<int?>? recordCount,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch(
        batchId: (batchId != null ? batchId.value : this.batchId),
        locationId: (locationId != null ? locationId.value : this.locationId),
        batchType: (batchType != null ? batchType.value : this.batchType),
        divisionCode:
            (divisionCode != null ? divisionCode.value : this.divisionCode),
        batchNumber:
            (batchNumber != null ? batchNumber.value : this.batchNumber),
        batchDate: (batchDate != null ? batchDate.value : this.batchDate),
        batchTime: (batchTime != null ? batchTime.value : this.batchTime),
        batchDateTime:
            (batchDateTime != null ? batchDateTime.value : this.batchDateTime),
        exportDate: (exportDate != null ? exportDate.value : this.exportDate),
        exported: (exported != null ? exported.value : this.exported),
        recordCount:
            (recordCount != null ? recordCount.value : this.recordCount),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequest {
  WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequest({
    this.locationId,
    this.asOfDate,
  });

  factory WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequestFromJson(
          json);

  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequest &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(locationId) ^
      const DeepCollectionEquality().hash(asOfDate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequestExtension
    on WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequest {
  WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequest copyWith(
      {String? locationId, DateTime? asOfDate}) {
    return WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequest(
        locationId: locationId ?? this.locationId,
        asOfDate: asOfDate ?? this.asOfDate);
  }

  WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequest
      copyWithWrapped(
          {Wrapped<String?>? locationId, Wrapped<DateTime?>? asOfDate}) {
    return WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchRequest(
        locationId: (locationId != null ? locationId.value : this.locationId),
        asOfDate: (asOfDate != null ? asOfDate.value : this.asOfDate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse {
  WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse({
    this.status,
    this.success,
    this.msg,
    this.batch,
    this.autoProcessDepeletingDeposit,
  });

  factory WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponseFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  @JsonKey(name: 'Batch', includeIfNull: false)
  final WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch? batch;
  @JsonKey(name: 'AutoProcessDepeletingDeposit', includeIfNull: false)
  final bool? autoProcessDepeletingDeposit;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)) &&
            (identical(other.batch, batch) ||
                const DeepCollectionEquality().equals(other.batch, batch)) &&
            (identical(other.autoProcessDepeletingDeposit,
                    autoProcessDepeletingDeposit) ||
                const DeepCollectionEquality().equals(
                    other.autoProcessDepeletingDeposit,
                    autoProcessDepeletingDeposit)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      const DeepCollectionEquality().hash(batch) ^
      const DeepCollectionEquality().hash(autoProcessDepeletingDeposit) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponseExtension
    on WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse {
  WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse copyWith(
      {int? status,
      bool? success,
      String? msg,
      WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch? batch,
      bool? autoProcessDepeletingDeposit}) {
    return WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg,
        batch: batch ?? this.batch,
        autoProcessDepeletingDeposit:
            autoProcessDepeletingDeposit ?? this.autoProcessDepeletingDeposit);
  }

  WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse
      copyWithWrapped(
          {Wrapped<int?>? status,
          Wrapped<bool?>? success,
          Wrapped<String?>? msg,
          Wrapped<WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatch?>?
              batch,
          Wrapped<bool?>? autoProcessDepeletingDeposit}) {
    return WebApiModulesUtilitiesInvoiceProcessBatchInvoiceProcessBatchResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg),
        batch: (batch != null ? batch.value : this.batch),
        autoProcessDepeletingDeposit: (autoProcessDepeletingDeposit != null
            ? autoProcessDepeletingDeposit.value
            : this.autoProcessDepeletingDeposit));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequest {
  WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequest({
    this.sessionId,
    this.migrateToNewOrder,
    this.newOrderOfficeLocationId,
    this.newOrderWarehouseId,
    this.newOrderDealId,
    this.newOrderDepartmentId,
    this.newOrderOrderTypeId,
    this.newOrderDescription,
    this.newOrderRateType,
    this.newOrderFromDate,
    this.newOrderFromTime,
    this.newOrderToDate,
    this.newOrderToTime,
    this.newOrderBillingStopDate,
    this.newOrderPendingPO,
    this.newOrderFlatPO,
    this.newOrderPurchaseOrderNumber,
    this.newOrderPurchaseOrderAmount,
    this.migrateToExistingOrder,
    this.existingOrderId,
    this.inventoryFulfillIncrement,
    this.fulfillStrictPricingMatch,
    this.copyLineItemNotes,
    this.copyOrderNotes,
    this.copyRentalRates,
    this.updateBillingStopDate,
    this.billingStopDate,
    this.officeLocationId,
    this.warehouseId,
    this.responsiblePersonId,
  });

  factory WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequestFromJson(
          json);

  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'MigrateToNewOrder', includeIfNull: false)
  final bool? migrateToNewOrder;
  @JsonKey(name: 'NewOrderOfficeLocationId', includeIfNull: false)
  final String? newOrderOfficeLocationId;
  @JsonKey(name: 'NewOrderWarehouseId', includeIfNull: false)
  final String? newOrderWarehouseId;
  @JsonKey(name: 'NewOrderDealId', includeIfNull: false)
  final String? newOrderDealId;
  @JsonKey(name: 'NewOrderDepartmentId', includeIfNull: false)
  final String? newOrderDepartmentId;
  @JsonKey(name: 'NewOrderOrderTypeId', includeIfNull: false)
  final String? newOrderOrderTypeId;
  @JsonKey(name: 'NewOrderDescription', includeIfNull: false)
  final String? newOrderDescription;
  @JsonKey(name: 'NewOrderRateType', includeIfNull: false)
  final String? newOrderRateType;
  @JsonKey(name: 'NewOrderFromDate', includeIfNull: false)
  final String? newOrderFromDate;
  @JsonKey(name: 'NewOrderFromTime', includeIfNull: false)
  final String? newOrderFromTime;
  @JsonKey(name: 'NewOrderToDate', includeIfNull: false)
  final String? newOrderToDate;
  @JsonKey(name: 'NewOrderToTime', includeIfNull: false)
  final String? newOrderToTime;
  @JsonKey(name: 'NewOrderBillingStopDate', includeIfNull: false)
  final String? newOrderBillingStopDate;
  @JsonKey(name: 'NewOrderPendingPO', includeIfNull: false)
  final bool? newOrderPendingPO;
  @JsonKey(name: 'NewOrderFlatPO', includeIfNull: false)
  final bool? newOrderFlatPO;
  @JsonKey(name: 'NewOrderPurchaseOrderNumber', includeIfNull: false)
  final String? newOrderPurchaseOrderNumber;
  @JsonKey(name: 'NewOrderPurchaseOrderAmount', includeIfNull: false)
  final double? newOrderPurchaseOrderAmount;
  @JsonKey(name: 'MigrateToExistingOrder', includeIfNull: false)
  final bool? migrateToExistingOrder;
  @JsonKey(name: 'ExistingOrderId', includeIfNull: false)
  final String? existingOrderId;
  @JsonKey(name: 'InventoryFulfillIncrement', includeIfNull: false)
  final String? inventoryFulfillIncrement;
  @JsonKey(name: 'FulfillStrictPricingMatch', includeIfNull: false)
  final bool? fulfillStrictPricingMatch;
  @JsonKey(name: 'CopyLineItemNotes', includeIfNull: false)
  final bool? copyLineItemNotes;
  @JsonKey(name: 'CopyOrderNotes', includeIfNull: false)
  final bool? copyOrderNotes;
  @JsonKey(name: 'CopyRentalRates', includeIfNull: false)
  final bool? copyRentalRates;
  @JsonKey(name: 'UpdateBillingStopDate', includeIfNull: false)
  final bool? updateBillingStopDate;
  @JsonKey(name: 'BillingStopDate', includeIfNull: false)
  final DateTime? billingStopDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'ResponsiblePersonId', includeIfNull: false)
  final String? responsiblePersonId;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequest &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)) &&
            (identical(other.migrateToNewOrder, migrateToNewOrder) ||
                const DeepCollectionEquality()
                    .equals(other.migrateToNewOrder, migrateToNewOrder)) &&
            (identical(other.newOrderOfficeLocationId, newOrderOfficeLocationId) ||
                const DeepCollectionEquality().equals(
                    other.newOrderOfficeLocationId,
                    newOrderOfficeLocationId)) &&
            (identical(other.newOrderWarehouseId, newOrderWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.newOrderWarehouseId, newOrderWarehouseId)) &&
            (identical(other.newOrderDealId, newOrderDealId) ||
                const DeepCollectionEquality()
                    .equals(other.newOrderDealId, newOrderDealId)) &&
            (identical(other.newOrderDepartmentId, newOrderDepartmentId) ||
                const DeepCollectionEquality().equals(
                    other.newOrderDepartmentId, newOrderDepartmentId)) &&
            (identical(other.newOrderOrderTypeId, newOrderOrderTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.newOrderOrderTypeId, newOrderOrderTypeId)) &&
            (identical(other.newOrderDescription, newOrderDescription) ||
                const DeepCollectionEquality()
                    .equals(other.newOrderDescription, newOrderDescription)) &&
            (identical(other.newOrderRateType, newOrderRateType) ||
                const DeepCollectionEquality()
                    .equals(other.newOrderRateType, newOrderRateType)) &&
            (identical(other.newOrderFromDate, newOrderFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.newOrderFromDate, newOrderFromDate)) &&
            (identical(other.newOrderFromTime, newOrderFromTime) ||
                const DeepCollectionEquality()
                    .equals(other.newOrderFromTime, newOrderFromTime)) &&
            (identical(other.newOrderToDate, newOrderToDate) ||
                const DeepCollectionEquality()
                    .equals(other.newOrderToDate, newOrderToDate)) &&
            (identical(other.newOrderToTime, newOrderToTime) ||
                const DeepCollectionEquality()
                    .equals(other.newOrderToTime, newOrderToTime)) &&
            (identical(other.newOrderBillingStopDate, newOrderBillingStopDate) ||
                const DeepCollectionEquality().equals(
                    other.newOrderBillingStopDate, newOrderBillingStopDate)) &&
            (identical(other.newOrderPendingPO, newOrderPendingPO) ||
                const DeepCollectionEquality()
                    .equals(other.newOrderPendingPO, newOrderPendingPO)) &&
            (identical(other.newOrderFlatPO, newOrderFlatPO) ||
                const DeepCollectionEquality()
                    .equals(other.newOrderFlatPO, newOrderFlatPO)) &&
            (identical(other.newOrderPurchaseOrderNumber, newOrderPurchaseOrderNumber) || const DeepCollectionEquality().equals(other.newOrderPurchaseOrderNumber, newOrderPurchaseOrderNumber)) &&
            (identical(other.newOrderPurchaseOrderAmount, newOrderPurchaseOrderAmount) || const DeepCollectionEquality().equals(other.newOrderPurchaseOrderAmount, newOrderPurchaseOrderAmount)) &&
            (identical(other.migrateToExistingOrder, migrateToExistingOrder) || const DeepCollectionEquality().equals(other.migrateToExistingOrder, migrateToExistingOrder)) &&
            (identical(other.existingOrderId, existingOrderId) || const DeepCollectionEquality().equals(other.existingOrderId, existingOrderId)) &&
            (identical(other.inventoryFulfillIncrement, inventoryFulfillIncrement) || const DeepCollectionEquality().equals(other.inventoryFulfillIncrement, inventoryFulfillIncrement)) &&
            (identical(other.fulfillStrictPricingMatch, fulfillStrictPricingMatch) || const DeepCollectionEquality().equals(other.fulfillStrictPricingMatch, fulfillStrictPricingMatch)) &&
            (identical(other.copyLineItemNotes, copyLineItemNotes) || const DeepCollectionEquality().equals(other.copyLineItemNotes, copyLineItemNotes)) &&
            (identical(other.copyOrderNotes, copyOrderNotes) || const DeepCollectionEquality().equals(other.copyOrderNotes, copyOrderNotes)) &&
            (identical(other.copyRentalRates, copyRentalRates) || const DeepCollectionEquality().equals(other.copyRentalRates, copyRentalRates)) &&
            (identical(other.updateBillingStopDate, updateBillingStopDate) || const DeepCollectionEquality().equals(other.updateBillingStopDate, updateBillingStopDate)) &&
            (identical(other.billingStopDate, billingStopDate) || const DeepCollectionEquality().equals(other.billingStopDate, billingStopDate)) &&
            (identical(other.officeLocationId, officeLocationId) || const DeepCollectionEquality().equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.warehouseId, warehouseId) || const DeepCollectionEquality().equals(other.warehouseId, warehouseId)) &&
            (identical(other.responsiblePersonId, responsiblePersonId) || const DeepCollectionEquality().equals(other.responsiblePersonId, responsiblePersonId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(migrateToNewOrder) ^
      const DeepCollectionEquality().hash(newOrderOfficeLocationId) ^
      const DeepCollectionEquality().hash(newOrderWarehouseId) ^
      const DeepCollectionEquality().hash(newOrderDealId) ^
      const DeepCollectionEquality().hash(newOrderDepartmentId) ^
      const DeepCollectionEquality().hash(newOrderOrderTypeId) ^
      const DeepCollectionEquality().hash(newOrderDescription) ^
      const DeepCollectionEquality().hash(newOrderRateType) ^
      const DeepCollectionEquality().hash(newOrderFromDate) ^
      const DeepCollectionEquality().hash(newOrderFromTime) ^
      const DeepCollectionEquality().hash(newOrderToDate) ^
      const DeepCollectionEquality().hash(newOrderToTime) ^
      const DeepCollectionEquality().hash(newOrderBillingStopDate) ^
      const DeepCollectionEquality().hash(newOrderPendingPO) ^
      const DeepCollectionEquality().hash(newOrderFlatPO) ^
      const DeepCollectionEquality().hash(newOrderPurchaseOrderNumber) ^
      const DeepCollectionEquality().hash(newOrderPurchaseOrderAmount) ^
      const DeepCollectionEquality().hash(migrateToExistingOrder) ^
      const DeepCollectionEquality().hash(existingOrderId) ^
      const DeepCollectionEquality().hash(inventoryFulfillIncrement) ^
      const DeepCollectionEquality().hash(fulfillStrictPricingMatch) ^
      const DeepCollectionEquality().hash(copyLineItemNotes) ^
      const DeepCollectionEquality().hash(copyOrderNotes) ^
      const DeepCollectionEquality().hash(copyRentalRates) ^
      const DeepCollectionEquality().hash(updateBillingStopDate) ^
      const DeepCollectionEquality().hash(billingStopDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(responsiblePersonId) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequestExtension
    on WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequest {
  WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequest copyWith(
      {String? sessionId,
      bool? migrateToNewOrder,
      String? newOrderOfficeLocationId,
      String? newOrderWarehouseId,
      String? newOrderDealId,
      String? newOrderDepartmentId,
      String? newOrderOrderTypeId,
      String? newOrderDescription,
      String? newOrderRateType,
      String? newOrderFromDate,
      String? newOrderFromTime,
      String? newOrderToDate,
      String? newOrderToTime,
      String? newOrderBillingStopDate,
      bool? newOrderPendingPO,
      bool? newOrderFlatPO,
      String? newOrderPurchaseOrderNumber,
      double? newOrderPurchaseOrderAmount,
      bool? migrateToExistingOrder,
      String? existingOrderId,
      String? inventoryFulfillIncrement,
      bool? fulfillStrictPricingMatch,
      bool? copyLineItemNotes,
      bool? copyOrderNotes,
      bool? copyRentalRates,
      bool? updateBillingStopDate,
      DateTime? billingStopDate,
      String? officeLocationId,
      String? warehouseId,
      String? responsiblePersonId}) {
    return WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequest(
        sessionId: sessionId ?? this.sessionId,
        migrateToNewOrder: migrateToNewOrder ?? this.migrateToNewOrder,
        newOrderOfficeLocationId:
            newOrderOfficeLocationId ?? this.newOrderOfficeLocationId,
        newOrderWarehouseId: newOrderWarehouseId ?? this.newOrderWarehouseId,
        newOrderDealId: newOrderDealId ?? this.newOrderDealId,
        newOrderDepartmentId: newOrderDepartmentId ?? this.newOrderDepartmentId,
        newOrderOrderTypeId: newOrderOrderTypeId ?? this.newOrderOrderTypeId,
        newOrderDescription: newOrderDescription ?? this.newOrderDescription,
        newOrderRateType: newOrderRateType ?? this.newOrderRateType,
        newOrderFromDate: newOrderFromDate ?? this.newOrderFromDate,
        newOrderFromTime: newOrderFromTime ?? this.newOrderFromTime,
        newOrderToDate: newOrderToDate ?? this.newOrderToDate,
        newOrderToTime: newOrderToTime ?? this.newOrderToTime,
        newOrderBillingStopDate:
            newOrderBillingStopDate ?? this.newOrderBillingStopDate,
        newOrderPendingPO: newOrderPendingPO ?? this.newOrderPendingPO,
        newOrderFlatPO: newOrderFlatPO ?? this.newOrderFlatPO,
        newOrderPurchaseOrderNumber:
            newOrderPurchaseOrderNumber ?? this.newOrderPurchaseOrderNumber,
        newOrderPurchaseOrderAmount:
            newOrderPurchaseOrderAmount ?? this.newOrderPurchaseOrderAmount,
        migrateToExistingOrder:
            migrateToExistingOrder ?? this.migrateToExistingOrder,
        existingOrderId: existingOrderId ?? this.existingOrderId,
        inventoryFulfillIncrement:
            inventoryFulfillIncrement ?? this.inventoryFulfillIncrement,
        fulfillStrictPricingMatch:
            fulfillStrictPricingMatch ?? this.fulfillStrictPricingMatch,
        copyLineItemNotes: copyLineItemNotes ?? this.copyLineItemNotes,
        copyOrderNotes: copyOrderNotes ?? this.copyOrderNotes,
        copyRentalRates: copyRentalRates ?? this.copyRentalRates,
        updateBillingStopDate:
            updateBillingStopDate ?? this.updateBillingStopDate,
        billingStopDate: billingStopDate ?? this.billingStopDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        warehouseId: warehouseId ?? this.warehouseId,
        responsiblePersonId: responsiblePersonId ?? this.responsiblePersonId);
  }

  WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequest copyWithWrapped(
      {Wrapped<String?>? sessionId,
      Wrapped<bool?>? migrateToNewOrder,
      Wrapped<String?>? newOrderOfficeLocationId,
      Wrapped<String?>? newOrderWarehouseId,
      Wrapped<String?>? newOrderDealId,
      Wrapped<String?>? newOrderDepartmentId,
      Wrapped<String?>? newOrderOrderTypeId,
      Wrapped<String?>? newOrderDescription,
      Wrapped<String?>? newOrderRateType,
      Wrapped<String?>? newOrderFromDate,
      Wrapped<String?>? newOrderFromTime,
      Wrapped<String?>? newOrderToDate,
      Wrapped<String?>? newOrderToTime,
      Wrapped<String?>? newOrderBillingStopDate,
      Wrapped<bool?>? newOrderPendingPO,
      Wrapped<bool?>? newOrderFlatPO,
      Wrapped<String?>? newOrderPurchaseOrderNumber,
      Wrapped<double?>? newOrderPurchaseOrderAmount,
      Wrapped<bool?>? migrateToExistingOrder,
      Wrapped<String?>? existingOrderId,
      Wrapped<String?>? inventoryFulfillIncrement,
      Wrapped<bool?>? fulfillStrictPricingMatch,
      Wrapped<bool?>? copyLineItemNotes,
      Wrapped<bool?>? copyOrderNotes,
      Wrapped<bool?>? copyRentalRates,
      Wrapped<bool?>? updateBillingStopDate,
      Wrapped<DateTime?>? billingStopDate,
      Wrapped<String?>? officeLocationId,
      Wrapped<String?>? warehouseId,
      Wrapped<String?>? responsiblePersonId}) {
    return WebApiModulesUtilitiesMigrateCompleteMigrateSessionRequest(
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        migrateToNewOrder: (migrateToNewOrder != null
            ? migrateToNewOrder.value
            : this.migrateToNewOrder),
        newOrderOfficeLocationId: (newOrderOfficeLocationId != null
            ? newOrderOfficeLocationId.value
            : this.newOrderOfficeLocationId),
        newOrderWarehouseId: (newOrderWarehouseId != null
            ? newOrderWarehouseId.value
            : this.newOrderWarehouseId),
        newOrderDealId: (newOrderDealId != null
            ? newOrderDealId.value
            : this.newOrderDealId),
        newOrderDepartmentId: (newOrderDepartmentId != null
            ? newOrderDepartmentId.value
            : this.newOrderDepartmentId),
        newOrderOrderTypeId: (newOrderOrderTypeId != null
            ? newOrderOrderTypeId.value
            : this.newOrderOrderTypeId),
        newOrderDescription: (newOrderDescription != null
            ? newOrderDescription.value
            : this.newOrderDescription),
        newOrderRateType: (newOrderRateType != null
            ? newOrderRateType.value
            : this.newOrderRateType),
        newOrderFromDate: (newOrderFromDate != null
            ? newOrderFromDate.value
            : this.newOrderFromDate),
        newOrderFromTime: (newOrderFromTime != null
            ? newOrderFromTime.value
            : this.newOrderFromTime),
        newOrderToDate: (newOrderToDate != null
            ? newOrderToDate.value
            : this.newOrderToDate),
        newOrderToTime: (newOrderToTime != null
            ? newOrderToTime.value
            : this.newOrderToTime),
        newOrderBillingStopDate: (newOrderBillingStopDate != null
            ? newOrderBillingStopDate.value
            : this.newOrderBillingStopDate),
        newOrderPendingPO: (newOrderPendingPO != null
            ? newOrderPendingPO.value
            : this.newOrderPendingPO),
        newOrderFlatPO: (newOrderFlatPO != null
            ? newOrderFlatPO.value
            : this.newOrderFlatPO),
        newOrderPurchaseOrderNumber: (newOrderPurchaseOrderNumber != null
            ? newOrderPurchaseOrderNumber.value
            : this.newOrderPurchaseOrderNumber),
        newOrderPurchaseOrderAmount: (newOrderPurchaseOrderAmount != null
            ? newOrderPurchaseOrderAmount.value
            : this.newOrderPurchaseOrderAmount),
        migrateToExistingOrder: (migrateToExistingOrder != null
            ? migrateToExistingOrder.value
            : this.migrateToExistingOrder),
        existingOrderId: (existingOrderId != null
            ? existingOrderId.value
            : this.existingOrderId),
        inventoryFulfillIncrement: (inventoryFulfillIncrement != null
            ? inventoryFulfillIncrement.value
            : this.inventoryFulfillIncrement),
        fulfillStrictPricingMatch: (fulfillStrictPricingMatch != null
            ? fulfillStrictPricingMatch.value
            : this.fulfillStrictPricingMatch),
        copyLineItemNotes: (copyLineItemNotes != null
            ? copyLineItemNotes.value
            : this.copyLineItemNotes),
        copyOrderNotes: (copyOrderNotes != null
            ? copyOrderNotes.value
            : this.copyOrderNotes),
        copyRentalRates: (copyRentalRates != null
            ? copyRentalRates.value
            : this.copyRentalRates),
        updateBillingStopDate: (updateBillingStopDate != null
            ? updateBillingStopDate.value
            : this.updateBillingStopDate),
        billingStopDate: (billingStopDate != null
            ? billingStopDate.value
            : this.billingStopDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        responsiblePersonId: (responsiblePersonId != null
            ? responsiblePersonId.value
            : this.responsiblePersonId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse {
  WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse({
    this.status,
    this.success,
    this.msg,
    this.contractIds,
    this.contracts,
  });

  factory WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponseFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  @JsonKey(name: 'ContractIds', includeIfNull: false)
  final String? contractIds;
  @JsonKey(
      name: 'Contracts',
      includeIfNull: false,
      defaultValue: <WebApiModulesWarehouseContractContract>[])
  final List<WebApiModulesWarehouseContractContract>? contracts;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)) &&
            (identical(other.contractIds, contractIds) ||
                const DeepCollectionEquality()
                    .equals(other.contractIds, contractIds)) &&
            (identical(other.contracts, contracts) ||
                const DeepCollectionEquality()
                    .equals(other.contracts, contracts)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      const DeepCollectionEquality().hash(contractIds) ^
      const DeepCollectionEquality().hash(contracts) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponseExtension
    on WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse {
  WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse copyWith(
      {int? status,
      bool? success,
      String? msg,
      String? contractIds,
      List<WebApiModulesWarehouseContractContract>? contracts}) {
    return WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg,
        contractIds: contractIds ?? this.contractIds,
        contracts: contracts ?? this.contracts);
  }

  WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse copyWithWrapped(
      {Wrapped<int?>? status,
      Wrapped<bool?>? success,
      Wrapped<String?>? msg,
      Wrapped<String?>? contractIds,
      Wrapped<List<WebApiModulesWarehouseContractContract>?>? contracts}) {
    return WebApiModulesUtilitiesMigrateCompleteMigrateSessionResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg),
        contractIds:
            (contractIds != null ? contractIds.value : this.contractIds),
        contracts: (contracts != null ? contracts.value : this.contracts));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest {
  WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest({
    required this.sessionId,
  });

  factory WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequestFromJson(
          json);

  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String sessionId;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionId) ^ runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequestExtension
    on WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest {
  WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest copyWith(
      {String? sessionId}) {
    return WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest(
        sessionId: sessionId ?? this.sessionId);
  }

  WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest copyWithWrapped(
      {Wrapped<String>? sessionId}) {
    return WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemRequest(
        sessionId: (sessionId != null ? sessionId.value : this.sessionId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse {
  WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse({
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponseFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponseExtension
    on WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse {
  WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse copyWith(
      {int? status, bool? success, String? msg}) {
    return WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }

  WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse copyWithWrapped(
      {Wrapped<int?>? status, Wrapped<bool?>? success, Wrapped<String?>? msg}) {
    return WebApiModulesUtilitiesMigrateSelectAllNoneMigrateItemResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesMigrateStartMigrateSessionRequest {
  WebApiModulesUtilitiesMigrateStartMigrateSessionRequest({
    this.dealId,
    this.departmentId,
    this.orderIds,
  });

  factory WebApiModulesUtilitiesMigrateStartMigrateSessionRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesMigrateStartMigrateSessionRequestFromJson(json);

  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'OrderIds', includeIfNull: false)
  final String? orderIds;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesMigrateStartMigrateSessionRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesMigrateStartMigrateSessionRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesMigrateStartMigrateSessionRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesMigrateStartMigrateSessionRequest &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.orderIds, orderIds) ||
                const DeepCollectionEquality()
                    .equals(other.orderIds, orderIds)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(orderIds) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesMigrateStartMigrateSessionRequestExtension
    on WebApiModulesUtilitiesMigrateStartMigrateSessionRequest {
  WebApiModulesUtilitiesMigrateStartMigrateSessionRequest copyWith(
      {String? dealId, String? departmentId, String? orderIds}) {
    return WebApiModulesUtilitiesMigrateStartMigrateSessionRequest(
        dealId: dealId ?? this.dealId,
        departmentId: departmentId ?? this.departmentId,
        orderIds: orderIds ?? this.orderIds);
  }

  WebApiModulesUtilitiesMigrateStartMigrateSessionRequest copyWithWrapped(
      {Wrapped<String?>? dealId,
      Wrapped<String?>? departmentId,
      Wrapped<String?>? orderIds}) {
    return WebApiModulesUtilitiesMigrateStartMigrateSessionRequest(
        dealId: (dealId != null ? dealId.value : this.dealId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        orderIds: (orderIds != null ? orderIds.value : this.orderIds));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesMigrateStartMigrateSessionResponse {
  WebApiModulesUtilitiesMigrateStartMigrateSessionResponse({
    this.sessionId,
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiModulesUtilitiesMigrateStartMigrateSessionResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesMigrateStartMigrateSessionResponseFromJson(json);

  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesMigrateStartMigrateSessionResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesMigrateStartMigrateSessionResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesMigrateStartMigrateSessionResponseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesMigrateStartMigrateSessionResponse &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)) &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesMigrateStartMigrateSessionResponseExtension
    on WebApiModulesUtilitiesMigrateStartMigrateSessionResponse {
  WebApiModulesUtilitiesMigrateStartMigrateSessionResponse copyWith(
      {String? sessionId, int? status, bool? success, String? msg}) {
    return WebApiModulesUtilitiesMigrateStartMigrateSessionResponse(
        sessionId: sessionId ?? this.sessionId,
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }

  WebApiModulesUtilitiesMigrateStartMigrateSessionResponse copyWithWrapped(
      {Wrapped<String?>? sessionId,
      Wrapped<int?>? status,
      Wrapped<bool?>? success,
      Wrapped<String?>? msg}) {
    return WebApiModulesUtilitiesMigrateStartMigrateSessionResponse(
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesMigrateUpdateMigrateItemRequest {
  WebApiModulesUtilitiesMigrateUpdateMigrateItemRequest({
    this.sessionId,
    this.orderId,
    this.orderItemId,
    this.barCode,
    this.quantity,
  });

  factory WebApiModulesUtilitiesMigrateUpdateMigrateItemRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesMigrateUpdateMigrateItemRequestFromJson(json);

  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'OrderItemId', includeIfNull: false)
  final String? orderItemId;
  @JsonKey(name: 'BarCode', includeIfNull: false)
  final String? barCode;
  @JsonKey(name: 'Quantity', includeIfNull: false)
  final int? quantity;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesMigrateUpdateMigrateItemRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesMigrateUpdateMigrateItemRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesMigrateUpdateMigrateItemRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesMigrateUpdateMigrateItemRequest &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.orderItemId, orderItemId) ||
                const DeepCollectionEquality()
                    .equals(other.orderItemId, orderItemId)) &&
            (identical(other.barCode, barCode) ||
                const DeepCollectionEquality()
                    .equals(other.barCode, barCode)) &&
            (identical(other.quantity, quantity) ||
                const DeepCollectionEquality()
                    .equals(other.quantity, quantity)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(orderItemId) ^
      const DeepCollectionEquality().hash(barCode) ^
      const DeepCollectionEquality().hash(quantity) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesMigrateUpdateMigrateItemRequestExtension
    on WebApiModulesUtilitiesMigrateUpdateMigrateItemRequest {
  WebApiModulesUtilitiesMigrateUpdateMigrateItemRequest copyWith(
      {String? sessionId,
      String? orderId,
      String? orderItemId,
      String? barCode,
      int? quantity}) {
    return WebApiModulesUtilitiesMigrateUpdateMigrateItemRequest(
        sessionId: sessionId ?? this.sessionId,
        orderId: orderId ?? this.orderId,
        orderItemId: orderItemId ?? this.orderItemId,
        barCode: barCode ?? this.barCode,
        quantity: quantity ?? this.quantity);
  }

  WebApiModulesUtilitiesMigrateUpdateMigrateItemRequest copyWithWrapped(
      {Wrapped<String?>? sessionId,
      Wrapped<String?>? orderId,
      Wrapped<String?>? orderItemId,
      Wrapped<String?>? barCode,
      Wrapped<int?>? quantity}) {
    return WebApiModulesUtilitiesMigrateUpdateMigrateItemRequest(
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        orderItemId:
            (orderItemId != null ? orderItemId.value : this.orderItemId),
        barCode: (barCode != null ? barCode.value : this.barCode),
        quantity: (quantity != null ? quantity.value : this.quantity));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse {
  WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse({
    this.newQuantity,
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesMigrateUpdateMigrateItemResponseFromJson(json);

  @JsonKey(name: 'NewQuantity', includeIfNull: false)
  final int? newQuantity;
  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesMigrateUpdateMigrateItemResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesMigrateUpdateMigrateItemResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesMigrateUpdateMigrateItemResponseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse &&
            (identical(other.newQuantity, newQuantity) ||
                const DeepCollectionEquality()
                    .equals(other.newQuantity, newQuantity)) &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(newQuantity) ^
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesMigrateUpdateMigrateItemResponseExtension
    on WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse {
  WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse copyWith(
      {int? newQuantity, int? status, bool? success, String? msg}) {
    return WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse(
        newQuantity: newQuantity ?? this.newQuantity,
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }

  WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse copyWithWrapped(
      {Wrapped<int?>? newQuantity,
      Wrapped<int?>? status,
      Wrapped<bool?>? success,
      Wrapped<String?>? msg}) {
    return WebApiModulesUtilitiesMigrateUpdateMigrateItemResponse(
        newQuantity:
            (newQuantity != null ? newQuantity.value : this.newQuantity),
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking {
  WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking({
    this.deliveryShipId,
    this.orderId,
    this.deliveryId,
    this.orderNumber,
    this.orderDate,
    this.orderDescription,
    this.status,
    this.statusDate,
    this.dealId,
    this.deal,
    this.dealNumber,
    this.trackingNumber,
    this.shippingVendorId,
    this.shippingVendor,
    this.carrierId,
    this.carrier,
    this.onlineOrderNumber,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingFromJson(
          json);

  @JsonKey(name: 'DeliveryShipId', includeIfNull: false)
  final String? deliveryShipId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'DeliveryId', includeIfNull: false)
  final String? deliveryId;
  @JsonKey(name: 'OrderNumber', includeIfNull: false)
  final String? orderNumber;
  @JsonKey(name: 'OrderDate', includeIfNull: false)
  final String? orderDate;
  @JsonKey(name: 'OrderDescription', includeIfNull: false)
  final String? orderDescription;
  @JsonKey(name: 'Status', includeIfNull: false)
  final String? status;
  @JsonKey(name: 'StatusDate', includeIfNull: false)
  final String? statusDate;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'Deal', includeIfNull: false)
  final String? deal;
  @JsonKey(name: 'DealNumber', includeIfNull: false)
  final String? dealNumber;
  @JsonKey(name: 'TrackingNumber', includeIfNull: false)
  final String? trackingNumber;
  @JsonKey(name: 'ShippingVendorId', includeIfNull: false)
  final String? shippingVendorId;
  @JsonKey(name: 'ShippingVendor', includeIfNull: false)
  final String? shippingVendor;
  @JsonKey(name: 'CarrierId', includeIfNull: false)
  final String? carrierId;
  @JsonKey(name: 'Carrier', includeIfNull: false)
  final String? carrier;
  @JsonKey(name: 'OnlineOrderNumber', includeIfNull: false)
  final String? onlineOrderNumber;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking &&
            (identical(other.deliveryShipId, deliveryShipId) ||
                const DeepCollectionEquality()
                    .equals(other.deliveryShipId, deliveryShipId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.deliveryId, deliveryId) ||
                const DeepCollectionEquality()
                    .equals(other.deliveryId, deliveryId)) &&
            (identical(other.orderNumber, orderNumber) ||
                const DeepCollectionEquality()
                    .equals(other.orderNumber, orderNumber)) &&
            (identical(other.orderDate, orderDate) ||
                const DeepCollectionEquality()
                    .equals(other.orderDate, orderDate)) &&
            (identical(other.orderDescription, orderDescription) ||
                const DeepCollectionEquality()
                    .equals(other.orderDescription, orderDescription)) &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.statusDate, statusDate) ||
                const DeepCollectionEquality()
                    .equals(other.statusDate, statusDate)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.deal, deal) ||
                const DeepCollectionEquality().equals(other.deal, deal)) &&
            (identical(other.dealNumber, dealNumber) ||
                const DeepCollectionEquality()
                    .equals(other.dealNumber, dealNumber)) &&
            (identical(other.trackingNumber, trackingNumber) ||
                const DeepCollectionEquality()
                    .equals(other.trackingNumber, trackingNumber)) &&
            (identical(other.shippingVendorId, shippingVendorId) ||
                const DeepCollectionEquality()
                    .equals(other.shippingVendorId, shippingVendorId)) &&
            (identical(other.shippingVendor, shippingVendor) ||
                const DeepCollectionEquality()
                    .equals(other.shippingVendor, shippingVendor)) &&
            (identical(other.carrierId, carrierId) ||
                const DeepCollectionEquality()
                    .equals(other.carrierId, carrierId)) &&
            (identical(other.carrier, carrier) ||
                const DeepCollectionEquality()
                    .equals(other.carrier, carrier)) &&
            (identical(other.onlineOrderNumber, onlineOrderNumber) ||
                const DeepCollectionEquality()
                    .equals(other.onlineOrderNumber, onlineOrderNumber)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) || const DeepCollectionEquality().equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(deliveryShipId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(deliveryId) ^
      const DeepCollectionEquality().hash(orderNumber) ^
      const DeepCollectionEquality().hash(orderDate) ^
      const DeepCollectionEquality().hash(orderDescription) ^
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(statusDate) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(deal) ^
      const DeepCollectionEquality().hash(dealNumber) ^
      const DeepCollectionEquality().hash(trackingNumber) ^
      const DeepCollectionEquality().hash(shippingVendorId) ^
      const DeepCollectionEquality().hash(shippingVendor) ^
      const DeepCollectionEquality().hash(carrierId) ^
      const DeepCollectionEquality().hash(carrier) ^
      const DeepCollectionEquality().hash(onlineOrderNumber) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTrackingExtension
    on WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking {
  WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking copyWith(
      {String? deliveryShipId,
      String? orderId,
      String? deliveryId,
      String? orderNumber,
      String? orderDate,
      String? orderDescription,
      String? status,
      String? statusDate,
      String? dealId,
      String? deal,
      String? dealNumber,
      String? trackingNumber,
      String? shippingVendorId,
      String? shippingVendor,
      String? carrierId,
      String? carrier,
      String? onlineOrderNumber,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking(
        deliveryShipId: deliveryShipId ?? this.deliveryShipId,
        orderId: orderId ?? this.orderId,
        deliveryId: deliveryId ?? this.deliveryId,
        orderNumber: orderNumber ?? this.orderNumber,
        orderDate: orderDate ?? this.orderDate,
        orderDescription: orderDescription ?? this.orderDescription,
        status: status ?? this.status,
        statusDate: statusDate ?? this.statusDate,
        dealId: dealId ?? this.dealId,
        deal: deal ?? this.deal,
        dealNumber: dealNumber ?? this.dealNumber,
        trackingNumber: trackingNumber ?? this.trackingNumber,
        shippingVendorId: shippingVendorId ?? this.shippingVendorId,
        shippingVendor: shippingVendor ?? this.shippingVendor,
        carrierId: carrierId ?? this.carrierId,
        carrier: carrier ?? this.carrier,
        onlineOrderNumber: onlineOrderNumber ?? this.onlineOrderNumber,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking copyWithWrapped(
      {Wrapped<String?>? deliveryShipId,
      Wrapped<String?>? orderId,
      Wrapped<String?>? deliveryId,
      Wrapped<String?>? orderNumber,
      Wrapped<String?>? orderDate,
      Wrapped<String?>? orderDescription,
      Wrapped<String?>? status,
      Wrapped<String?>? statusDate,
      Wrapped<String?>? dealId,
      Wrapped<String?>? deal,
      Wrapped<String?>? dealNumber,
      Wrapped<String?>? trackingNumber,
      Wrapped<String?>? shippingVendorId,
      Wrapped<String?>? shippingVendor,
      Wrapped<String?>? carrierId,
      Wrapped<String?>? carrier,
      Wrapped<String?>? onlineOrderNumber,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesUtilitiesOnlineOrderTrackingOnlineOrderTracking(
        deliveryShipId: (deliveryShipId != null
            ? deliveryShipId.value
            : this.deliveryShipId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        deliveryId: (deliveryId != null ? deliveryId.value : this.deliveryId),
        orderNumber:
            (orderNumber != null ? orderNumber.value : this.orderNumber),
        orderDate: (orderDate != null ? orderDate.value : this.orderDate),
        orderDescription: (orderDescription != null
            ? orderDescription.value
            : this.orderDescription),
        status: (status != null ? status.value : this.status),
        statusDate: (statusDate != null ? statusDate.value : this.statusDate),
        dealId: (dealId != null ? dealId.value : this.dealId),
        deal: (deal != null ? deal.value : this.deal),
        dealNumber: (dealNumber != null ? dealNumber.value : this.dealNumber),
        trackingNumber: (trackingNumber != null
            ? trackingNumber.value
            : this.trackingNumber),
        shippingVendorId: (shippingVendorId != null
            ? shippingVendorId.value
            : this.shippingVendorId),
        shippingVendor: (shippingVendor != null
            ? shippingVendor.value
            : this.shippingVendor),
        carrierId: (carrierId != null ? carrierId.value : this.carrierId),
        carrier: (carrier != null ? carrier.value : this.carrier),
        onlineOrderNumber: (onlineOrderNumber != null
            ? onlineOrderNumber.value
            : this.onlineOrderNumber),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent {
  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent({
    this.start,
    this.end,
    this.text,
    this.backColor,
    this.barColor,
    this.textColor,
    this.resource,
    this.orderId,
    this.orderNumber,
    this.orderType,
    this.orderStatus,
    this.orderDescription,
    this.orderLocation,
    this.deal,
    this.poNumber,
    this.id,
    this.orderBy,
  });

  factory WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEventFromJson(
          json);

  @JsonKey(name: 'start', includeIfNull: false)
  final String? start;
  @JsonKey(name: 'end', includeIfNull: false)
  final String? end;
  @JsonKey(name: 'text', includeIfNull: false)
  final String? text;
  @JsonKey(name: 'backColor', includeIfNull: false)
  final String? backColor;
  @JsonKey(name: 'barColor', includeIfNull: false)
  final String? barColor;
  @JsonKey(name: 'textColor', includeIfNull: false)
  final String? textColor;
  @JsonKey(name: 'resource', includeIfNull: false)
  final String? resource;
  @JsonKey(name: 'orderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'orderNumber', includeIfNull: false)
  final String? orderNumber;
  @JsonKey(name: 'orderType', includeIfNull: false)
  final String? orderType;
  @JsonKey(name: 'orderStatus', includeIfNull: false)
  final String? orderStatus;
  @JsonKey(name: 'orderDescription', includeIfNull: false)
  final String? orderDescription;
  @JsonKey(name: 'orderLocation', includeIfNull: false)
  final String? orderLocation;
  @JsonKey(name: 'deal', includeIfNull: false)
  final String? deal;
  @JsonKey(name: 'poNumber', includeIfNull: false)
  final String? poNumber;
  @JsonKey(name: 'id', includeIfNull: false)
  final String? id;
  @JsonKey(name: 'orderBy', includeIfNull: false)
  final String? orderBy;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEventFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEventToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEventToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent &&
            (identical(other.start, start) ||
                const DeepCollectionEquality().equals(other.start, start)) &&
            (identical(other.end, end) ||
                const DeepCollectionEquality().equals(other.end, end)) &&
            (identical(other.text, text) ||
                const DeepCollectionEquality().equals(other.text, text)) &&
            (identical(other.backColor, backColor) ||
                const DeepCollectionEquality()
                    .equals(other.backColor, backColor)) &&
            (identical(other.barColor, barColor) ||
                const DeepCollectionEquality()
                    .equals(other.barColor, barColor)) &&
            (identical(other.textColor, textColor) ||
                const DeepCollectionEquality()
                    .equals(other.textColor, textColor)) &&
            (identical(other.resource, resource) ||
                const DeepCollectionEquality()
                    .equals(other.resource, resource)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.orderNumber, orderNumber) ||
                const DeepCollectionEquality()
                    .equals(other.orderNumber, orderNumber)) &&
            (identical(other.orderType, orderType) ||
                const DeepCollectionEquality()
                    .equals(other.orderType, orderType)) &&
            (identical(other.orderStatus, orderStatus) ||
                const DeepCollectionEquality()
                    .equals(other.orderStatus, orderStatus)) &&
            (identical(other.orderDescription, orderDescription) ||
                const DeepCollectionEquality()
                    .equals(other.orderDescription, orderDescription)) &&
            (identical(other.orderLocation, orderLocation) ||
                const DeepCollectionEquality()
                    .equals(other.orderLocation, orderLocation)) &&
            (identical(other.deal, deal) ||
                const DeepCollectionEquality().equals(other.deal, deal)) &&
            (identical(other.poNumber, poNumber) ||
                const DeepCollectionEquality()
                    .equals(other.poNumber, poNumber)) &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality().equals(other.orderBy, orderBy)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(start) ^
      const DeepCollectionEquality().hash(end) ^
      const DeepCollectionEquality().hash(text) ^
      const DeepCollectionEquality().hash(backColor) ^
      const DeepCollectionEquality().hash(barColor) ^
      const DeepCollectionEquality().hash(textColor) ^
      const DeepCollectionEquality().hash(resource) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(orderNumber) ^
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(orderStatus) ^
      const DeepCollectionEquality().hash(orderDescription) ^
      const DeepCollectionEquality().hash(orderLocation) ^
      const DeepCollectionEquality().hash(deal) ^
      const DeepCollectionEquality().hash(poNumber) ^
      const DeepCollectionEquality().hash(id) ^
      const DeepCollectionEquality().hash(orderBy) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEventExtension
    on WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent {
  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent
      copyWith(
          {String? start,
          String? end,
          String? text,
          String? backColor,
          String? barColor,
          String? textColor,
          String? resource,
          String? orderId,
          String? orderNumber,
          String? orderType,
          String? orderStatus,
          String? orderDescription,
          String? orderLocation,
          String? deal,
          String? poNumber,
          String? id,
          String? orderBy}) {
    return WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent(
        start: start ?? this.start,
        end: end ?? this.end,
        text: text ?? this.text,
        backColor: backColor ?? this.backColor,
        barColor: barColor ?? this.barColor,
        textColor: textColor ?? this.textColor,
        resource: resource ?? this.resource,
        orderId: orderId ?? this.orderId,
        orderNumber: orderNumber ?? this.orderNumber,
        orderType: orderType ?? this.orderType,
        orderStatus: orderStatus ?? this.orderStatus,
        orderDescription: orderDescription ?? this.orderDescription,
        orderLocation: orderLocation ?? this.orderLocation,
        deal: deal ?? this.deal,
        poNumber: poNumber ?? this.poNumber,
        id: id ?? this.id,
        orderBy: orderBy ?? this.orderBy);
  }

  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent
      copyWithWrapped(
          {Wrapped<String?>? start,
          Wrapped<String?>? end,
          Wrapped<String?>? text,
          Wrapped<String?>? backColor,
          Wrapped<String?>? barColor,
          Wrapped<String?>? textColor,
          Wrapped<String?>? resource,
          Wrapped<String?>? orderId,
          Wrapped<String?>? orderNumber,
          Wrapped<String?>? orderType,
          Wrapped<String?>? orderStatus,
          Wrapped<String?>? orderDescription,
          Wrapped<String?>? orderLocation,
          Wrapped<String?>? deal,
          Wrapped<String?>? poNumber,
          Wrapped<String?>? id,
          Wrapped<String?>? orderBy}) {
    return WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent(
        start: (start != null ? start.value : this.start),
        end: (end != null ? end.value : this.end),
        text: (text != null ? text.value : this.text),
        backColor: (backColor != null ? backColor.value : this.backColor),
        barColor: (barColor != null ? barColor.value : this.barColor),
        textColor: (textColor != null ? textColor.value : this.textColor),
        resource: (resource != null ? resource.value : this.resource),
        orderId: (orderId != null ? orderId.value : this.orderId),
        orderNumber:
            (orderNumber != null ? orderNumber.value : this.orderNumber),
        orderType: (orderType != null ? orderType.value : this.orderType),
        orderStatus:
            (orderStatus != null ? orderStatus.value : this.orderStatus),
        orderDescription: (orderDescription != null
            ? orderDescription.value
            : this.orderDescription),
        orderLocation:
            (orderLocation != null ? orderLocation.value : this.orderLocation),
        deal: (deal != null ? deal.value : this.deal),
        poNumber: (poNumber != null ? poNumber.value : this.poNumber),
        id: (id != null ? id.value : this.id),
        orderBy: (orderBy != null ? orderBy.value : this.orderBy));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequest {
  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.customerId,
    this.departmentId,
    this.dealId,
    this.projectId,
    this.projectManagerId,
    this.includeCompleted,
  });

  factory WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'ProjectId', includeIfNull: false)
  final String? projectId;
  @JsonKey(name: 'ProjectManagerId', includeIfNull: false)
  final String? projectManagerId;
  @JsonKey(name: 'IncludeCompleted', includeIfNull: false)
  final bool? includeCompleted;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.projectId, projectId) ||
                const DeepCollectionEquality()
                    .equals(other.projectId, projectId)) &&
            (identical(other.projectManagerId, projectManagerId) ||
                const DeepCollectionEquality()
                    .equals(other.projectManagerId, projectManagerId)) &&
            (identical(other.includeCompleted, includeCompleted) ||
                const DeepCollectionEquality()
                    .equals(other.includeCompleted, includeCompleted)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(projectId) ^
      const DeepCollectionEquality().hash(projectManagerId) ^
      const DeepCollectionEquality().hash(includeCompleted) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequestExtension
    on WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequest {
  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? customerId,
          String? departmentId,
          String? dealId,
          String? projectId,
          String? projectManagerId,
          bool? includeCompleted}) {
    return WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        departmentId: departmentId ?? this.departmentId,
        dealId: dealId ?? this.dealId,
        projectId: projectId ?? this.projectId,
        projectManagerId: projectManagerId ?? this.projectManagerId,
        includeCompleted: includeCompleted ?? this.includeCompleted);
  }

  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? projectId,
          Wrapped<String?>? projectManagerId,
          Wrapped<bool?>? includeCompleted}) {
    return WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        projectId: (projectId != null ? projectId.value : this.projectId),
        projectManagerId: (projectManagerId != null
            ? projectManagerId.value
            : this.projectManagerId),
        includeCompleted: (includeCompleted != null
            ? includeCompleted.value
            : this.includeCompleted));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource {
  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource({
    this.name,
    this.id,
    this.backColor,
    this.orderBy,
  });

  factory WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResourceFromJson(
          json);

  @JsonKey(name: 'name', includeIfNull: false)
  final String? name;
  @JsonKey(name: 'id', includeIfNull: false)
  final String? id;
  @JsonKey(name: 'backColor', includeIfNull: false)
  final String? backColor;
  @JsonKey(name: 'orderBy', includeIfNull: false)
  final String? orderBy;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResourceFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResourceToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResourceToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.backColor, backColor) ||
                const DeepCollectionEquality()
                    .equals(other.backColor, backColor)) &&
            (identical(other.orderBy, orderBy) ||
                const DeepCollectionEquality().equals(other.orderBy, orderBy)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(name) ^
      const DeepCollectionEquality().hash(id) ^
      const DeepCollectionEquality().hash(backColor) ^
      const DeepCollectionEquality().hash(orderBy) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResourceExtension
    on WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource {
  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource
      copyWith({String? name, String? id, String? backColor, String? orderBy}) {
    return WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource(
        name: name ?? this.name,
        id: id ?? this.id,
        backColor: backColor ?? this.backColor,
        orderBy: orderBy ?? this.orderBy);
  }

  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource
      copyWithWrapped(
          {Wrapped<String?>? name,
          Wrapped<String?>? id,
          Wrapped<String?>? backColor,
          Wrapped<String?>? orderBy}) {
    return WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource(
        name: (name != null ? name.value : this.name),
        id: (id != null ? id.value : this.id),
        backColor: (backColor != null ? backColor.value : this.backColor),
        orderBy: (orderBy != null ? orderBy.value : this.orderBy));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse {
  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse({
    this.orderLocationScheduleResources,
    this.orderLocationScheduleEvents,
  });

  factory WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponseFromJson(
          json);

  @JsonKey(
      name: 'OrderLocationScheduleResources',
      includeIfNull: false,
      defaultValue: <
          WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource>[])
  final List<
          WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource>?
      orderLocationScheduleResources;
  @JsonKey(
      name: 'OrderLocationScheduleEvents', includeIfNull: false, defaultValue: <
          WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent>[])
  final List<
          WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent>?
      orderLocationScheduleEvents;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse &&
            (identical(other.orderLocationScheduleResources,
                    orderLocationScheduleResources) ||
                const DeepCollectionEquality().equals(
                    other.orderLocationScheduleResources,
                    orderLocationScheduleResources)) &&
            (identical(other.orderLocationScheduleEvents,
                    orderLocationScheduleEvents) ||
                const DeepCollectionEquality().equals(
                    other.orderLocationScheduleEvents,
                    orderLocationScheduleEvents)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderLocationScheduleResources) ^
      const DeepCollectionEquality().hash(orderLocationScheduleEvents) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponseExtension
    on WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse {
  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse copyWith(
      {List<WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource>?
          orderLocationScheduleResources,
      List<WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent>?
          orderLocationScheduleEvents}) {
    return WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse(
        orderLocationScheduleResources: orderLocationScheduleResources ??
            this.orderLocationScheduleResources,
        orderLocationScheduleEvents:
            orderLocationScheduleEvents ?? this.orderLocationScheduleEvents);
  }

  WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse
      copyWithWrapped(
          {Wrapped<
                  List<
                      WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResource>?>?
              orderLocationScheduleResources,
          Wrapped<
                  List<
                      WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleEvent>?>?
              orderLocationScheduleEvents}) {
    return WebApiModulesUtilitiesOrderLocationScheduleOrderLocationScheduleResponse(
        orderLocationScheduleResources: (orderLocationScheduleResources != null
            ? orderLocationScheduleResources.value
            : this.orderLocationScheduleResources),
        orderLocationScheduleEvents: (orderLocationScheduleEvents != null
            ? orderLocationScheduleEvents.value
            : this.orderLocationScheduleEvents));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesProgressMeterProgressMeter {
  WebApiModulesUtilitiesProgressMeterProgressMeter({
    this.sessionId,
    this.caption,
    this.currentStep,
    this.totalSteps,
    this.percentComplete,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesProgressMeterProgressMeter.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesProgressMeterProgressMeterFromJson(json);

  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'Caption', includeIfNull: false)
  final String? caption;
  @JsonKey(name: 'CurrentStep', includeIfNull: false)
  final int? currentStep;
  @JsonKey(name: 'TotalSteps', includeIfNull: false)
  final int? totalSteps;
  @JsonKey(name: 'PercentComplete', includeIfNull: false)
  final int? percentComplete;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesProgressMeterProgressMeterFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesProgressMeterProgressMeterToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesProgressMeterProgressMeterToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesProgressMeterProgressMeter &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)) &&
            (identical(other.caption, caption) ||
                const DeepCollectionEquality()
                    .equals(other.caption, caption)) &&
            (identical(other.currentStep, currentStep) ||
                const DeepCollectionEquality()
                    .equals(other.currentStep, currentStep)) &&
            (identical(other.totalSteps, totalSteps) ||
                const DeepCollectionEquality()
                    .equals(other.totalSteps, totalSteps)) &&
            (identical(other.percentComplete, percentComplete) ||
                const DeepCollectionEquality()
                    .equals(other.percentComplete, percentComplete)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(caption) ^
      const DeepCollectionEquality().hash(currentStep) ^
      const DeepCollectionEquality().hash(totalSteps) ^
      const DeepCollectionEquality().hash(percentComplete) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesProgressMeterProgressMeterExtension
    on WebApiModulesUtilitiesProgressMeterProgressMeter {
  WebApiModulesUtilitiesProgressMeterProgressMeter copyWith(
      {String? sessionId,
      String? caption,
      int? currentStep,
      int? totalSteps,
      int? percentComplete,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesProgressMeterProgressMeter(
        sessionId: sessionId ?? this.sessionId,
        caption: caption ?? this.caption,
        currentStep: currentStep ?? this.currentStep,
        totalSteps: totalSteps ?? this.totalSteps,
        percentComplete: percentComplete ?? this.percentComplete,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesProgressMeterProgressMeter copyWithWrapped(
      {Wrapped<String?>? sessionId,
      Wrapped<String?>? caption,
      Wrapped<int?>? currentStep,
      Wrapped<int?>? totalSteps,
      Wrapped<int?>? percentComplete,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesUtilitiesProgressMeterProgressMeter(
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        caption: (caption != null ? caption.value : this.caption),
        currentStep:
            (currentStep != null ? currentStep.value : this.currentStep),
        totalSteps: (totalSteps != null ? totalSteps.value : this.totalSteps),
        percentComplete: (percentComplete != null
            ? percentComplete.value
            : this.percentComplete),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesQuikActivityQuikActivity {
  WebApiModulesUtilitiesQuikActivityQuikActivity({
    this.activityId,
    this.activityDate,
    this.activityTime,
    this.activityTypeId,
    this.activityTypeDescription,
    this.activityTypeColor,
    this.activityTypeTextColor,
    this.activityStatusId,
    this.activityStatus,
    this.activityStatusColor,
    this.activityStatusTextColor,
    this.orderId,
    this.orderNumber,
    this.orderType,
    this.orderTypeController,
    this.orderDescription,
    this.orderLocation,
    this.dealId,
    this.deal,
    this.vendorId,
    this.vendor,
    this.inventoryId,
    this.iCode,
    this.description,
    this.totalQuantity,
    this.remainingQuantity,
    this.completeQuantity,
    this.completePercent,
    this.assignedToUserId,
    this.assignedToUserName,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesQuikActivityQuikActivity.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFromJson(json);

  @JsonKey(name: 'ActivityId', includeIfNull: false)
  final int? activityId;
  @JsonKey(name: 'ActivityDate', includeIfNull: false)
  final String? activityDate;
  @JsonKey(name: 'ActivityTime', includeIfNull: false)
  final String? activityTime;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final String? activityTypeId;
  @JsonKey(name: 'ActivityTypeDescription', includeIfNull: false)
  final String? activityTypeDescription;
  @JsonKey(name: 'ActivityTypeColor', includeIfNull: false)
  final String? activityTypeColor;
  @JsonKey(name: 'ActivityTypeTextColor', includeIfNull: false)
  final String? activityTypeTextColor;
  @JsonKey(name: 'ActivityStatusId', includeIfNull: false)
  final int? activityStatusId;
  @JsonKey(name: 'ActivityStatus', includeIfNull: false)
  final String? activityStatus;
  @JsonKey(name: 'ActivityStatusColor', includeIfNull: false)
  final String? activityStatusColor;
  @JsonKey(name: 'ActivityStatusTextColor', includeIfNull: false)
  final String? activityStatusTextColor;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'OrderNumber', includeIfNull: false)
  final String? orderNumber;
  @JsonKey(name: 'OrderType', includeIfNull: false)
  final String? orderType;
  @JsonKey(name: 'OrderTypeController', includeIfNull: false)
  final String? orderTypeController;
  @JsonKey(name: 'OrderDescription', includeIfNull: false)
  final String? orderDescription;
  @JsonKey(name: 'OrderLocation', includeIfNull: false)
  final String? orderLocation;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'Deal', includeIfNull: false)
  final String? deal;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'Vendor', includeIfNull: false)
  final String? vendor;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'TotalQuantity', includeIfNull: false)
  final int? totalQuantity;
  @JsonKey(name: 'RemainingQuantity', includeIfNull: false)
  final int? remainingQuantity;
  @JsonKey(name: 'CompleteQuantity', includeIfNull: false)
  final int? completeQuantity;
  @JsonKey(name: 'CompletePercent', includeIfNull: false)
  final double? completePercent;
  @JsonKey(name: 'AssignedToUserId', includeIfNull: false)
  final String? assignedToUserId;
  @JsonKey(name: 'AssignedToUserName', includeIfNull: false)
  final String? assignedToUserName;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesQuikActivityQuikActivity &&
            (identical(other.activityId, activityId) ||
                const DeepCollectionEquality()
                    .equals(other.activityId, activityId)) &&
            (identical(other.activityDate, activityDate) ||
                const DeepCollectionEquality()
                    .equals(other.activityDate, activityDate)) &&
            (identical(other.activityTime, activityTime) ||
                const DeepCollectionEquality()
                    .equals(other.activityTime, activityTime)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.activityTypeDescription, activityTypeDescription) ||
                const DeepCollectionEquality().equals(
                    other.activityTypeDescription, activityTypeDescription)) &&
            (identical(other.activityTypeColor, activityTypeColor) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeColor, activityTypeColor)) &&
            (identical(other.activityTypeTextColor, activityTypeTextColor) ||
                const DeepCollectionEquality().equals(
                    other.activityTypeTextColor, activityTypeTextColor)) &&
            (identical(other.activityStatusId, activityStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.activityStatusId, activityStatusId)) &&
            (identical(other.activityStatus, activityStatus) ||
                const DeepCollectionEquality()
                    .equals(other.activityStatus, activityStatus)) &&
            (identical(other.activityStatusColor, activityStatusColor) ||
                const DeepCollectionEquality()
                    .equals(other.activityStatusColor, activityStatusColor)) &&
            (identical(other.activityStatusTextColor, activityStatusTextColor) ||
                const DeepCollectionEquality().equals(
                    other.activityStatusTextColor, activityStatusTextColor)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.orderNumber, orderNumber) ||
                const DeepCollectionEquality()
                    .equals(other.orderNumber, orderNumber)) &&
            (identical(other.orderType, orderType) ||
                const DeepCollectionEquality()
                    .equals(other.orderType, orderType)) &&
            (identical(other.orderTypeController, orderTypeController) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeController, orderTypeController)) &&
            (identical(other.orderDescription, orderDescription) ||
                const DeepCollectionEquality()
                    .equals(other.orderDescription, orderDescription)) &&
            (identical(other.orderLocation, orderLocation) || const DeepCollectionEquality().equals(other.orderLocation, orderLocation)) &&
            (identical(other.dealId, dealId) || const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.deal, deal) || const DeepCollectionEquality().equals(other.deal, deal)) &&
            (identical(other.vendorId, vendorId) || const DeepCollectionEquality().equals(other.vendorId, vendorId)) &&
            (identical(other.vendor, vendor) || const DeepCollectionEquality().equals(other.vendor, vendor)) &&
            (identical(other.inventoryId, inventoryId) || const DeepCollectionEquality().equals(other.inventoryId, inventoryId)) &&
            (identical(other.iCode, iCode) || const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) || const DeepCollectionEquality().equals(other.description, description)) &&
            (identical(other.totalQuantity, totalQuantity) || const DeepCollectionEquality().equals(other.totalQuantity, totalQuantity)) &&
            (identical(other.remainingQuantity, remainingQuantity) || const DeepCollectionEquality().equals(other.remainingQuantity, remainingQuantity)) &&
            (identical(other.completeQuantity, completeQuantity) || const DeepCollectionEquality().equals(other.completeQuantity, completeQuantity)) &&
            (identical(other.completePercent, completePercent) || const DeepCollectionEquality().equals(other.completePercent, completePercent)) &&
            (identical(other.assignedToUserId, assignedToUserId) || const DeepCollectionEquality().equals(other.assignedToUserId, assignedToUserId)) &&
            (identical(other.assignedToUserName, assignedToUserName) || const DeepCollectionEquality().equals(other.assignedToUserName, assignedToUserName)) &&
            (identical(other.auditNote, auditNote) || const DeepCollectionEquality().equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(activityId) ^
      const DeepCollectionEquality().hash(activityDate) ^
      const DeepCollectionEquality().hash(activityTime) ^
      const DeepCollectionEquality().hash(activityTypeId) ^
      const DeepCollectionEquality().hash(activityTypeDescription) ^
      const DeepCollectionEquality().hash(activityTypeColor) ^
      const DeepCollectionEquality().hash(activityTypeTextColor) ^
      const DeepCollectionEquality().hash(activityStatusId) ^
      const DeepCollectionEquality().hash(activityStatus) ^
      const DeepCollectionEquality().hash(activityStatusColor) ^
      const DeepCollectionEquality().hash(activityStatusTextColor) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(orderNumber) ^
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(orderTypeController) ^
      const DeepCollectionEquality().hash(orderDescription) ^
      const DeepCollectionEquality().hash(orderLocation) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(deal) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(vendor) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(iCode) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(totalQuantity) ^
      const DeepCollectionEquality().hash(remainingQuantity) ^
      const DeepCollectionEquality().hash(completeQuantity) ^
      const DeepCollectionEquality().hash(completePercent) ^
      const DeepCollectionEquality().hash(assignedToUserId) ^
      const DeepCollectionEquality().hash(assignedToUserName) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesQuikActivityQuikActivityExtension
    on WebApiModulesUtilitiesQuikActivityQuikActivity {
  WebApiModulesUtilitiesQuikActivityQuikActivity copyWith(
      {int? activityId,
      String? activityDate,
      String? activityTime,
      String? activityTypeId,
      String? activityTypeDescription,
      String? activityTypeColor,
      String? activityTypeTextColor,
      int? activityStatusId,
      String? activityStatus,
      String? activityStatusColor,
      String? activityStatusTextColor,
      String? orderId,
      String? orderNumber,
      String? orderType,
      String? orderTypeController,
      String? orderDescription,
      String? orderLocation,
      String? dealId,
      String? deal,
      String? vendorId,
      String? vendor,
      String? inventoryId,
      String? iCode,
      String? description,
      int? totalQuantity,
      int? remainingQuantity,
      int? completeQuantity,
      double? completePercent,
      String? assignedToUserId,
      String? assignedToUserName,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivity(
        activityId: activityId ?? this.activityId,
        activityDate: activityDate ?? this.activityDate,
        activityTime: activityTime ?? this.activityTime,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        activityTypeDescription:
            activityTypeDescription ?? this.activityTypeDescription,
        activityTypeColor: activityTypeColor ?? this.activityTypeColor,
        activityTypeTextColor:
            activityTypeTextColor ?? this.activityTypeTextColor,
        activityStatusId: activityStatusId ?? this.activityStatusId,
        activityStatus: activityStatus ?? this.activityStatus,
        activityStatusColor: activityStatusColor ?? this.activityStatusColor,
        activityStatusTextColor:
            activityStatusTextColor ?? this.activityStatusTextColor,
        orderId: orderId ?? this.orderId,
        orderNumber: orderNumber ?? this.orderNumber,
        orderType: orderType ?? this.orderType,
        orderTypeController: orderTypeController ?? this.orderTypeController,
        orderDescription: orderDescription ?? this.orderDescription,
        orderLocation: orderLocation ?? this.orderLocation,
        dealId: dealId ?? this.dealId,
        deal: deal ?? this.deal,
        vendorId: vendorId ?? this.vendorId,
        vendor: vendor ?? this.vendor,
        inventoryId: inventoryId ?? this.inventoryId,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        totalQuantity: totalQuantity ?? this.totalQuantity,
        remainingQuantity: remainingQuantity ?? this.remainingQuantity,
        completeQuantity: completeQuantity ?? this.completeQuantity,
        completePercent: completePercent ?? this.completePercent,
        assignedToUserId: assignedToUserId ?? this.assignedToUserId,
        assignedToUserName: assignedToUserName ?? this.assignedToUserName,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesQuikActivityQuikActivity copyWithWrapped(
      {Wrapped<int?>? activityId,
      Wrapped<String?>? activityDate,
      Wrapped<String?>? activityTime,
      Wrapped<String?>? activityTypeId,
      Wrapped<String?>? activityTypeDescription,
      Wrapped<String?>? activityTypeColor,
      Wrapped<String?>? activityTypeTextColor,
      Wrapped<int?>? activityStatusId,
      Wrapped<String?>? activityStatus,
      Wrapped<String?>? activityStatusColor,
      Wrapped<String?>? activityStatusTextColor,
      Wrapped<String?>? orderId,
      Wrapped<String?>? orderNumber,
      Wrapped<String?>? orderType,
      Wrapped<String?>? orderTypeController,
      Wrapped<String?>? orderDescription,
      Wrapped<String?>? orderLocation,
      Wrapped<String?>? dealId,
      Wrapped<String?>? deal,
      Wrapped<String?>? vendorId,
      Wrapped<String?>? vendor,
      Wrapped<String?>? inventoryId,
      Wrapped<String?>? iCode,
      Wrapped<String?>? description,
      Wrapped<int?>? totalQuantity,
      Wrapped<int?>? remainingQuantity,
      Wrapped<int?>? completeQuantity,
      Wrapped<double?>? completePercent,
      Wrapped<String?>? assignedToUserId,
      Wrapped<String?>? assignedToUserName,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivity(
        activityId: (activityId != null ? activityId.value : this.activityId),
        activityDate:
            (activityDate != null ? activityDate.value : this.activityDate),
        activityTime:
            (activityTime != null ? activityTime.value : this.activityTime),
        activityTypeId: (activityTypeId != null
            ? activityTypeId.value
            : this.activityTypeId),
        activityTypeDescription: (activityTypeDescription != null
            ? activityTypeDescription.value
            : this.activityTypeDescription),
        activityTypeColor: (activityTypeColor != null
            ? activityTypeColor.value
            : this.activityTypeColor),
        activityTypeTextColor: (activityTypeTextColor != null
            ? activityTypeTextColor.value
            : this.activityTypeTextColor),
        activityStatusId: (activityStatusId != null
            ? activityStatusId.value
            : this.activityStatusId),
        activityStatus: (activityStatus != null
            ? activityStatus.value
            : this.activityStatus),
        activityStatusColor: (activityStatusColor != null
            ? activityStatusColor.value
            : this.activityStatusColor),
        activityStatusTextColor: (activityStatusTextColor != null
            ? activityStatusTextColor.value
            : this.activityStatusTextColor),
        orderId: (orderId != null ? orderId.value : this.orderId),
        orderNumber:
            (orderNumber != null ? orderNumber.value : this.orderNumber),
        orderType: (orderType != null ? orderType.value : this.orderType),
        orderTypeController: (orderTypeController != null
            ? orderTypeController.value
            : this.orderTypeController),
        orderDescription: (orderDescription != null
            ? orderDescription.value
            : this.orderDescription),
        orderLocation:
            (orderLocation != null ? orderLocation.value : this.orderLocation),
        dealId: (dealId != null ? dealId.value : this.dealId),
        deal: (deal != null ? deal.value : this.deal),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        vendor: (vendor != null ? vendor.value : this.vendor),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        iCode: (iCode != null ? iCode.value : this.iCode),
        description:
            (description != null ? description.value : this.description),
        totalQuantity:
            (totalQuantity != null ? totalQuantity.value : this.totalQuantity),
        remainingQuantity: (remainingQuantity != null
            ? remainingQuantity.value
            : this.remainingQuantity),
        completeQuantity: (completeQuantity != null
            ? completeQuantity.value
            : this.completeQuantity),
        completePercent: (completePercent != null
            ? completePercent.value
            : this.completePercent),
        assignedToUserId: (assignedToUserId != null
            ? assignedToUserId.value
            : this.assignedToUserId),
        assignedToUserName: (assignedToUserName != null
            ? assignedToUserName.value
            : this.assignedToUserName),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequest {
  WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.warehouseId,
    this.departmentId,
    this.dealId,
    this.activityTypeId,
    this.assignedToUserId,
    this.includeCompleted,
    this.summary,
  });

  factory WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final String? activityTypeId;
  @JsonKey(name: 'AssignedToUserId', includeIfNull: false)
  final String? assignedToUserId;
  @JsonKey(name: 'IncludeCompleted', includeIfNull: false)
  final bool? includeCompleted;
  @JsonKey(name: 'Summary', includeIfNull: false)
  final bool? summary;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.assignedToUserId, assignedToUserId) ||
                const DeepCollectionEquality()
                    .equals(other.assignedToUserId, assignedToUserId)) &&
            (identical(other.includeCompleted, includeCompleted) ||
                const DeepCollectionEquality()
                    .equals(other.includeCompleted, includeCompleted)) &&
            (identical(other.summary, summary) ||
                const DeepCollectionEquality().equals(other.summary, summary)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(activityTypeId) ^
      const DeepCollectionEquality().hash(assignedToUserId) ^
      const DeepCollectionEquality().hash(includeCompleted) ^
      const DeepCollectionEquality().hash(summary) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequestExtension
    on WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequest {
  WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? warehouseId,
          String? departmentId,
          String? dealId,
          String? activityTypeId,
          String? assignedToUserId,
          bool? includeCompleted,
          bool? summary}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        dealId: dealId ?? this.dealId,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        assignedToUserId: assignedToUserId ?? this.assignedToUserId,
        includeCompleted: includeCompleted ?? this.includeCompleted,
        summary: summary ?? this.summary);
  }

  WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? activityTypeId,
          Wrapped<String?>? assignedToUserId,
          Wrapped<bool?>? includeCompleted,
          Wrapped<bool?>? summary}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        activityTypeId: (activityTypeId != null
            ? activityTypeId.value
            : this.activityTypeId),
        assignedToUserId: (assignedToUserId != null
            ? assignedToUserId.value
            : this.assignedToUserId),
        includeCompleted: (includeCompleted != null
            ? includeCompleted.value
            : this.includeCompleted),
        summary: (summary != null ? summary.value : this.summary));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse {
  WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse({
    this.status,
    this.success,
    this.msg,
    this.sessionId,
  });

  factory WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponseFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)) &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      const DeepCollectionEquality().hash(sessionId) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponseExtension
    on WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse {
  WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse
      copyWith({int? status, bool? success, String? msg, String? sessionId}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg,
        sessionId: sessionId ?? this.sessionId);
  }

  WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse
      copyWithWrapped(
          {Wrapped<int?>? status,
          Wrapped<bool?>? success,
          Wrapped<String?>? msg,
          Wrapped<String?>? sessionId}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivityFuncPopulateQuikActivityResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg),
        sessionId: (sessionId != null ? sessionId.value : this.sessionId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent {
  WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent({
    this.start,
    this.end,
    this.text,
    this.backColor,
    this.textColor,
    this.activityType,
    this.id,
  });

  factory WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEventFromJson(
          json);

  @JsonKey(name: 'start', includeIfNull: false)
  final String? start;
  @JsonKey(name: 'end', includeIfNull: false)
  final String? end;
  @JsonKey(name: 'text', includeIfNull: false)
  final String? text;
  @JsonKey(name: 'backColor', includeIfNull: false)
  final String? backColor;
  @JsonKey(name: 'textColor', includeIfNull: false)
  final String? textColor;
  @JsonKey(name: 'activityType', includeIfNull: false)
  final String? activityType;
  @JsonKey(name: 'id', includeIfNull: false)
  final String? id;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEventFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEventToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEventToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent &&
            (identical(other.start, start) ||
                const DeepCollectionEquality().equals(other.start, start)) &&
            (identical(other.end, end) ||
                const DeepCollectionEquality().equals(other.end, end)) &&
            (identical(other.text, text) ||
                const DeepCollectionEquality().equals(other.text, text)) &&
            (identical(other.backColor, backColor) ||
                const DeepCollectionEquality()
                    .equals(other.backColor, backColor)) &&
            (identical(other.textColor, textColor) ||
                const DeepCollectionEquality()
                    .equals(other.textColor, textColor)) &&
            (identical(other.activityType, activityType) ||
                const DeepCollectionEquality()
                    .equals(other.activityType, activityType)) &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(start) ^
      const DeepCollectionEquality().hash(end) ^
      const DeepCollectionEquality().hash(text) ^
      const DeepCollectionEquality().hash(backColor) ^
      const DeepCollectionEquality().hash(textColor) ^
      const DeepCollectionEquality().hash(activityType) ^
      const DeepCollectionEquality().hash(id) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEventExtension
    on WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent {
  WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent
      copyWith(
          {String? start,
          String? end,
          String? text,
          String? backColor,
          String? textColor,
          String? activityType,
          String? id}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent(
        start: start ?? this.start,
        end: end ?? this.end,
        text: text ?? this.text,
        backColor: backColor ?? this.backColor,
        textColor: textColor ?? this.textColor,
        activityType: activityType ?? this.activityType,
        id: id ?? this.id);
  }

  WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent
      copyWithWrapped(
          {Wrapped<String?>? start,
          Wrapped<String?>? end,
          Wrapped<String?>? text,
          Wrapped<String?>? backColor,
          Wrapped<String?>? textColor,
          Wrapped<String?>? activityType,
          Wrapped<String?>? id}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent(
        start: (start != null ? start.value : this.start),
        end: (end != null ? end.value : this.end),
        text: (text != null ? text.value : this.text),
        backColor: (backColor != null ? backColor.value : this.backColor),
        textColor: (textColor != null ? textColor.value : this.textColor),
        activityType:
            (activityType != null ? activityType.value : this.activityType),
        id: (id != null ? id.value : this.id));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequest {
  WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.warehouseId,
    this.departmentId,
    this.dealId,
    this.activityTypeId,
    this.assignedToUserId,
    this.includeCompleted,
    this.includeTimes,
  });

  factory WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final String? activityTypeId;
  @JsonKey(name: 'AssignedToUserId', includeIfNull: false)
  final String? assignedToUserId;
  @JsonKey(name: 'IncludeCompleted', includeIfNull: false)
  final bool? includeCompleted;
  @JsonKey(name: 'IncludeTimes', includeIfNull: false)
  final bool? includeTimes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.assignedToUserId, assignedToUserId) ||
                const DeepCollectionEquality()
                    .equals(other.assignedToUserId, assignedToUserId)) &&
            (identical(other.includeCompleted, includeCompleted) ||
                const DeepCollectionEquality()
                    .equals(other.includeCompleted, includeCompleted)) &&
            (identical(other.includeTimes, includeTimes) ||
                const DeepCollectionEquality()
                    .equals(other.includeTimes, includeTimes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(activityTypeId) ^
      const DeepCollectionEquality().hash(assignedToUserId) ^
      const DeepCollectionEquality().hash(includeCompleted) ^
      const DeepCollectionEquality().hash(includeTimes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequestExtension
    on WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequest {
  WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? warehouseId,
          String? departmentId,
          String? dealId,
          String? activityTypeId,
          String? assignedToUserId,
          bool? includeCompleted,
          bool? includeTimes}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        dealId: dealId ?? this.dealId,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        assignedToUserId: assignedToUserId ?? this.assignedToUserId,
        includeCompleted: includeCompleted ?? this.includeCompleted,
        includeTimes: includeTimes ?? this.includeTimes);
  }

  WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? activityTypeId,
          Wrapped<String?>? assignedToUserId,
          Wrapped<bool?>? includeCompleted,
          Wrapped<bool?>? includeTimes}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        activityTypeId: (activityTypeId != null
            ? activityTypeId.value
            : this.activityTypeId),
        assignedToUserId: (assignedToUserId != null
            ? assignedToUserId.value
            : this.assignedToUserId),
        includeCompleted: (includeCompleted != null
            ? includeCompleted.value
            : this.includeCompleted),
        includeTimes:
            (includeTimes != null ? includeTimes.value : this.includeTimes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse {
  WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse({
    this.sessionId,
    this.quikActivityCalendarEvents,
  });

  factory WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponseFromJson(
          json);

  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'QuikActivityCalendarEvents', includeIfNull: false, defaultValue: <
      WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent>[])
  final List<
          WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent>?
      quikActivityCalendarEvents;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)) &&
            (identical(other.quikActivityCalendarEvents,
                    quikActivityCalendarEvents) ||
                const DeepCollectionEquality().equals(
                    other.quikActivityCalendarEvents,
                    quikActivityCalendarEvents)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(quikActivityCalendarEvents) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponseExtension
    on WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse {
  WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse
      copyWith(
          {String? sessionId,
          List<WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent>?
              quikActivityCalendarEvents}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse(
        sessionId: sessionId ?? this.sessionId,
        quikActivityCalendarEvents:
            quikActivityCalendarEvents ?? this.quikActivityCalendarEvents);
  }

  WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse
      copyWithWrapped(
          {Wrapped<String?>? sessionId,
          Wrapped<
                  List<
                      WebApiModulesUtilitiesQuikActivityQuikActivityFuncQuikActivityCalendarEvent>?>?
              quikActivityCalendarEvents}) {
    return WebApiModulesUtilitiesQuikActivityQuikActivityFuncTQuikActivityCalendarResponse(
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        quikActivityCalendarEvents: (quikActivityCalendarEvents != null
            ? quikActivityCalendarEvents.value
            : this.quikActivityCalendarEvents));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch {
  WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch({
    this.rateUpdateBatchId,
    this.rateUpdateBatch,
    this.usersId,
    this.userName,
    this.applied,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchFromJson(json);

  @JsonKey(name: 'RateUpdateBatchId', includeIfNull: false)
  final int? rateUpdateBatchId;
  @JsonKey(name: 'RateUpdateBatch', includeIfNull: false)
  final String? rateUpdateBatch;
  @JsonKey(name: 'UsersId', includeIfNull: false)
  final String? usersId;
  @JsonKey(name: 'UserName', includeIfNull: false)
  final String? userName;
  @JsonKey(name: 'Applied', includeIfNull: false)
  final DateTime? applied;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch &&
            (identical(other.rateUpdateBatchId, rateUpdateBatchId) ||
                const DeepCollectionEquality()
                    .equals(other.rateUpdateBatchId, rateUpdateBatchId)) &&
            (identical(other.rateUpdateBatch, rateUpdateBatch) ||
                const DeepCollectionEquality()
                    .equals(other.rateUpdateBatch, rateUpdateBatch)) &&
            (identical(other.usersId, usersId) ||
                const DeepCollectionEquality()
                    .equals(other.usersId, usersId)) &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.applied, applied) ||
                const DeepCollectionEquality()
                    .equals(other.applied, applied)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(rateUpdateBatchId) ^
      const DeepCollectionEquality().hash(rateUpdateBatch) ^
      const DeepCollectionEquality().hash(usersId) ^
      const DeepCollectionEquality().hash(userName) ^
      const DeepCollectionEquality().hash(applied) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatchExtension
    on WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch {
  WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch copyWith(
      {int? rateUpdateBatchId,
      String? rateUpdateBatch,
      String? usersId,
      String? userName,
      DateTime? applied,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch(
        rateUpdateBatchId: rateUpdateBatchId ?? this.rateUpdateBatchId,
        rateUpdateBatch: rateUpdateBatch ?? this.rateUpdateBatch,
        usersId: usersId ?? this.usersId,
        userName: userName ?? this.userName,
        applied: applied ?? this.applied,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch copyWithWrapped(
      {Wrapped<int?>? rateUpdateBatchId,
      Wrapped<String?>? rateUpdateBatch,
      Wrapped<String?>? usersId,
      Wrapped<String?>? userName,
      Wrapped<DateTime?>? applied,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesUtilitiesRateUpdateBatchRateUpdateBatch(
        rateUpdateBatchId: (rateUpdateBatchId != null
            ? rateUpdateBatchId.value
            : this.rateUpdateBatchId),
        rateUpdateBatch: (rateUpdateBatch != null
            ? rateUpdateBatch.value
            : this.rateUpdateBatch),
        usersId: (usersId != null ? usersId.value : this.usersId),
        userName: (userName != null ? userName.value : this.userName),
        applied: (applied != null ? applied.value : this.applied),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem {
  WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem({
    this.rateUpdateBatchItemId,
    this.inventoryId,
    this.iCode,
    this.currencyId,
    this.description,
    this.availableFor,
    this.rank,
    this.classification,
    this.inventoryTypeId,
    this.inventoryType,
    this.categoryId,
    this.category,
    this.subCategoryId,
    this.subCategory,
    this.warehouseId,
    this.warehouseCode,
    this.warehouse,
    this.manufacturerId,
    this.manufacturer,
    this.unitId,
    this.partNumber,
    this.oldDefaultCost,
    this.newDefaultCost,
    this.oldCost,
    this.newCost,
    this.oldPrice,
    this.newPrice,
    this.oldRetail,
    this.newRetail,
    this.oldHourlyRate,
    this.newHourlyRate,
    this.oldHourlyCost,
    this.newHourlyCost,
    this.oldDailyRate,
    this.newDailyRate,
    this.oldDailyCost,
    this.newDailyCost,
    this.oldWeeklyRate,
    this.oldWeek2Rate,
    this.oldWeek3Rate,
    this.oldWeek4Rate,
    this.oldWeek5Rate,
    this.oldWeeklyCost,
    this.newWeeklyRate,
    this.newWeek2Rate,
    this.newWeek3Rate,
    this.newWeek4Rate,
    this.newWeek5Rate,
    this.newWeeklyCost,
    this.oldMonthlyRate,
    this.oldMonthlyCost,
    this.oldMaxDiscount,
    this.newMonthlyRate,
    this.newMonthlyCost,
    this.newMaxDiscount,
    this.oldUnitValue,
    this.newUnitValue,
    this.oldReplacementCost,
    this.newReplacementCost,
    this.oldMinDaysPerWeek,
    this.newMinDaysPerWeek,
    this.rateUpdateBatchId,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemFromJson(
          json);

  @JsonKey(name: 'RateUpdateBatchItemId', includeIfNull: false)
  final int? rateUpdateBatchItemId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'CurrencyId', includeIfNull: false)
  final String? currencyId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'AvailableFor', includeIfNull: false)
  final String? availableFor;
  @JsonKey(name: 'Rank', includeIfNull: false)
  final bool? rank;
  @JsonKey(name: 'Classification', includeIfNull: false)
  final String? classification;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'SubCategory', includeIfNull: false)
  final String? subCategory;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'ManufacturerId', includeIfNull: false)
  final String? manufacturerId;
  @JsonKey(name: 'Manufacturer', includeIfNull: false)
  final String? manufacturer;
  @JsonKey(name: 'UnitId', includeIfNull: false)
  final String? unitId;
  @JsonKey(name: 'PartNumber', includeIfNull: false)
  final String? partNumber;
  @JsonKey(name: 'OldDefaultCost', includeIfNull: false)
  final double? oldDefaultCost;
  @JsonKey(name: 'NewDefaultCost', includeIfNull: false)
  final double? newDefaultCost;
  @JsonKey(name: 'OldCost', includeIfNull: false)
  final double? oldCost;
  @JsonKey(name: 'NewCost', includeIfNull: false)
  final double? newCost;
  @JsonKey(name: 'OldPrice', includeIfNull: false)
  final double? oldPrice;
  @JsonKey(name: 'NewPrice', includeIfNull: false)
  final double? newPrice;
  @JsonKey(name: 'OldRetail', includeIfNull: false)
  final double? oldRetail;
  @JsonKey(name: 'NewRetail', includeIfNull: false)
  final double? newRetail;
  @JsonKey(name: 'OldHourlyRate', includeIfNull: false)
  final double? oldHourlyRate;
  @JsonKey(name: 'NewHourlyRate', includeIfNull: false)
  final double? newHourlyRate;
  @JsonKey(name: 'OldHourlyCost', includeIfNull: false)
  final double? oldHourlyCost;
  @JsonKey(name: 'NewHourlyCost', includeIfNull: false)
  final double? newHourlyCost;
  @JsonKey(name: 'OldDailyRate', includeIfNull: false)
  final double? oldDailyRate;
  @JsonKey(name: 'NewDailyRate', includeIfNull: false)
  final double? newDailyRate;
  @JsonKey(name: 'OldDailyCost', includeIfNull: false)
  final double? oldDailyCost;
  @JsonKey(name: 'NewDailyCost', includeIfNull: false)
  final double? newDailyCost;
  @JsonKey(name: 'OldWeeklyRate', includeIfNull: false)
  final double? oldWeeklyRate;
  @JsonKey(name: 'OldWeek2Rate', includeIfNull: false)
  final double? oldWeek2Rate;
  @JsonKey(name: 'OldWeek3Rate', includeIfNull: false)
  final double? oldWeek3Rate;
  @JsonKey(name: 'OldWeek4Rate', includeIfNull: false)
  final double? oldWeek4Rate;
  @JsonKey(name: 'OldWeek5Rate', includeIfNull: false)
  final double? oldWeek5Rate;
  @JsonKey(name: 'OldWeeklyCost', includeIfNull: false)
  final double? oldWeeklyCost;
  @JsonKey(name: 'NewWeeklyRate', includeIfNull: false)
  final double? newWeeklyRate;
  @JsonKey(name: 'NewWeek2Rate', includeIfNull: false)
  final double? newWeek2Rate;
  @JsonKey(name: 'NewWeek3Rate', includeIfNull: false)
  final double? newWeek3Rate;
  @JsonKey(name: 'NewWeek4Rate', includeIfNull: false)
  final double? newWeek4Rate;
  @JsonKey(name: 'NewWeek5Rate', includeIfNull: false)
  final double? newWeek5Rate;
  @JsonKey(name: 'NewWeeklyCost', includeIfNull: false)
  final double? newWeeklyCost;
  @JsonKey(name: 'OldMonthlyRate', includeIfNull: false)
  final double? oldMonthlyRate;
  @JsonKey(name: 'OldMonthlyCost', includeIfNull: false)
  final double? oldMonthlyCost;
  @JsonKey(name: 'OldMaxDiscount', includeIfNull: false)
  final double? oldMaxDiscount;
  @JsonKey(name: 'NewMonthlyRate', includeIfNull: false)
  final double? newMonthlyRate;
  @JsonKey(name: 'NewMonthlyCost', includeIfNull: false)
  final double? newMonthlyCost;
  @JsonKey(name: 'NewMaxDiscount', includeIfNull: false)
  final double? newMaxDiscount;
  @JsonKey(name: 'OldUnitValue', includeIfNull: false)
  final double? oldUnitValue;
  @JsonKey(name: 'NewUnitValue', includeIfNull: false)
  final double? newUnitValue;
  @JsonKey(name: 'OldReplacementCost', includeIfNull: false)
  final double? oldReplacementCost;
  @JsonKey(name: 'NewReplacementCost', includeIfNull: false)
  final double? newReplacementCost;
  @JsonKey(name: 'OldMinDaysPerWeek', includeIfNull: false)
  final double? oldMinDaysPerWeek;
  @JsonKey(name: 'NewMinDaysPerWeek', includeIfNull: false)
  final double? newMinDaysPerWeek;
  @JsonKey(name: 'RateUpdateBatchId', includeIfNull: false)
  final int? rateUpdateBatchId;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem &&
            (identical(other.rateUpdateBatchItemId, rateUpdateBatchItemId) ||
                const DeepCollectionEquality().equals(
                    other.rateUpdateBatchItemId, rateUpdateBatchItemId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.iCode, iCode) ||
                const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.currencyId, currencyId) ||
                const DeepCollectionEquality()
                    .equals(other.currencyId, currencyId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.availableFor, availableFor) ||
                const DeepCollectionEquality()
                    .equals(other.availableFor, availableFor)) &&
            (identical(other.rank, rank) ||
                const DeepCollectionEquality().equals(other.rank, rank)) &&
            (identical(other.classification, classification) ||
                const DeepCollectionEquality()
                    .equals(other.classification, classification)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) ||
                const DeepCollectionEquality()
                    .equals(other.category, category)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.subCategory, subCategory) ||
                const DeepCollectionEquality()
                    .equals(other.subCategory, subCategory)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality().equals(other.warehouse, warehouse)) &&
            (identical(other.manufacturerId, manufacturerId) || const DeepCollectionEquality().equals(other.manufacturerId, manufacturerId)) &&
            (identical(other.manufacturer, manufacturer) || const DeepCollectionEquality().equals(other.manufacturer, manufacturer)) &&
            (identical(other.unitId, unitId) || const DeepCollectionEquality().equals(other.unitId, unitId)) &&
            (identical(other.partNumber, partNumber) || const DeepCollectionEquality().equals(other.partNumber, partNumber)) &&
            (identical(other.oldDefaultCost, oldDefaultCost) || const DeepCollectionEquality().equals(other.oldDefaultCost, oldDefaultCost)) &&
            (identical(other.newDefaultCost, newDefaultCost) || const DeepCollectionEquality().equals(other.newDefaultCost, newDefaultCost)) &&
            (identical(other.oldCost, oldCost) || const DeepCollectionEquality().equals(other.oldCost, oldCost)) &&
            (identical(other.newCost, newCost) || const DeepCollectionEquality().equals(other.newCost, newCost)) &&
            (identical(other.oldPrice, oldPrice) || const DeepCollectionEquality().equals(other.oldPrice, oldPrice)) &&
            (identical(other.newPrice, newPrice) || const DeepCollectionEquality().equals(other.newPrice, newPrice)) &&
            (identical(other.oldRetail, oldRetail) || const DeepCollectionEquality().equals(other.oldRetail, oldRetail)) &&
            (identical(other.newRetail, newRetail) || const DeepCollectionEquality().equals(other.newRetail, newRetail)) &&
            (identical(other.oldHourlyRate, oldHourlyRate) || const DeepCollectionEquality().equals(other.oldHourlyRate, oldHourlyRate)) &&
            (identical(other.newHourlyRate, newHourlyRate) || const DeepCollectionEquality().equals(other.newHourlyRate, newHourlyRate)) &&
            (identical(other.oldHourlyCost, oldHourlyCost) || const DeepCollectionEquality().equals(other.oldHourlyCost, oldHourlyCost)) &&
            (identical(other.newHourlyCost, newHourlyCost) || const DeepCollectionEquality().equals(other.newHourlyCost, newHourlyCost)) &&
            (identical(other.oldDailyRate, oldDailyRate) || const DeepCollectionEquality().equals(other.oldDailyRate, oldDailyRate)) &&
            (identical(other.newDailyRate, newDailyRate) || const DeepCollectionEquality().equals(other.newDailyRate, newDailyRate)) &&
            (identical(other.oldDailyCost, oldDailyCost) || const DeepCollectionEquality().equals(other.oldDailyCost, oldDailyCost)) &&
            (identical(other.newDailyCost, newDailyCost) || const DeepCollectionEquality().equals(other.newDailyCost, newDailyCost)) &&
            (identical(other.oldWeeklyRate, oldWeeklyRate) || const DeepCollectionEquality().equals(other.oldWeeklyRate, oldWeeklyRate)) &&
            (identical(other.oldWeek2Rate, oldWeek2Rate) || const DeepCollectionEquality().equals(other.oldWeek2Rate, oldWeek2Rate)) &&
            (identical(other.oldWeek3Rate, oldWeek3Rate) || const DeepCollectionEquality().equals(other.oldWeek3Rate, oldWeek3Rate)) &&
            (identical(other.oldWeek4Rate, oldWeek4Rate) || const DeepCollectionEquality().equals(other.oldWeek4Rate, oldWeek4Rate)) &&
            (identical(other.oldWeek5Rate, oldWeek5Rate) || const DeepCollectionEquality().equals(other.oldWeek5Rate, oldWeek5Rate)) &&
            (identical(other.oldWeeklyCost, oldWeeklyCost) || const DeepCollectionEquality().equals(other.oldWeeklyCost, oldWeeklyCost)) &&
            (identical(other.newWeeklyRate, newWeeklyRate) || const DeepCollectionEquality().equals(other.newWeeklyRate, newWeeklyRate)) &&
            (identical(other.newWeek2Rate, newWeek2Rate) || const DeepCollectionEquality().equals(other.newWeek2Rate, newWeek2Rate)) &&
            (identical(other.newWeek3Rate, newWeek3Rate) || const DeepCollectionEquality().equals(other.newWeek3Rate, newWeek3Rate)) &&
            (identical(other.newWeek4Rate, newWeek4Rate) || const DeepCollectionEquality().equals(other.newWeek4Rate, newWeek4Rate)) &&
            (identical(other.newWeek5Rate, newWeek5Rate) || const DeepCollectionEquality().equals(other.newWeek5Rate, newWeek5Rate)) &&
            (identical(other.newWeeklyCost, newWeeklyCost) || const DeepCollectionEquality().equals(other.newWeeklyCost, newWeeklyCost)) &&
            (identical(other.oldMonthlyRate, oldMonthlyRate) || const DeepCollectionEquality().equals(other.oldMonthlyRate, oldMonthlyRate)) &&
            (identical(other.oldMonthlyCost, oldMonthlyCost) || const DeepCollectionEquality().equals(other.oldMonthlyCost, oldMonthlyCost)) &&
            (identical(other.oldMaxDiscount, oldMaxDiscount) || const DeepCollectionEquality().equals(other.oldMaxDiscount, oldMaxDiscount)) &&
            (identical(other.newMonthlyRate, newMonthlyRate) || const DeepCollectionEquality().equals(other.newMonthlyRate, newMonthlyRate)) &&
            (identical(other.newMonthlyCost, newMonthlyCost) || const DeepCollectionEquality().equals(other.newMonthlyCost, newMonthlyCost)) &&
            (identical(other.newMaxDiscount, newMaxDiscount) || const DeepCollectionEquality().equals(other.newMaxDiscount, newMaxDiscount)) &&
            (identical(other.oldUnitValue, oldUnitValue) || const DeepCollectionEquality().equals(other.oldUnitValue, oldUnitValue)) &&
            (identical(other.newUnitValue, newUnitValue) || const DeepCollectionEquality().equals(other.newUnitValue, newUnitValue)) &&
            (identical(other.oldReplacementCost, oldReplacementCost) || const DeepCollectionEquality().equals(other.oldReplacementCost, oldReplacementCost)) &&
            (identical(other.newReplacementCost, newReplacementCost) || const DeepCollectionEquality().equals(other.newReplacementCost, newReplacementCost)) &&
            (identical(other.oldMinDaysPerWeek, oldMinDaysPerWeek) || const DeepCollectionEquality().equals(other.oldMinDaysPerWeek, oldMinDaysPerWeek)) &&
            (identical(other.newMinDaysPerWeek, newMinDaysPerWeek) || const DeepCollectionEquality().equals(other.newMinDaysPerWeek, newMinDaysPerWeek)) &&
            (identical(other.rateUpdateBatchId, rateUpdateBatchId) || const DeepCollectionEquality().equals(other.rateUpdateBatchId, rateUpdateBatchId)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) || const DeepCollectionEquality().equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(rateUpdateBatchItemId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(iCode) ^
      const DeepCollectionEquality().hash(currencyId) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(availableFor) ^
      const DeepCollectionEquality().hash(rank) ^
      const DeepCollectionEquality().hash(classification) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(inventoryType) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(category) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(subCategory) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(warehouseCode) ^
      const DeepCollectionEquality().hash(warehouse) ^
      const DeepCollectionEquality().hash(manufacturerId) ^
      const DeepCollectionEquality().hash(manufacturer) ^
      const DeepCollectionEquality().hash(unitId) ^
      const DeepCollectionEquality().hash(partNumber) ^
      const DeepCollectionEquality().hash(oldDefaultCost) ^
      const DeepCollectionEquality().hash(newDefaultCost) ^
      const DeepCollectionEquality().hash(oldCost) ^
      const DeepCollectionEquality().hash(newCost) ^
      const DeepCollectionEquality().hash(oldPrice) ^
      const DeepCollectionEquality().hash(newPrice) ^
      const DeepCollectionEquality().hash(oldRetail) ^
      const DeepCollectionEquality().hash(newRetail) ^
      const DeepCollectionEquality().hash(oldHourlyRate) ^
      const DeepCollectionEquality().hash(newHourlyRate) ^
      const DeepCollectionEquality().hash(oldHourlyCost) ^
      const DeepCollectionEquality().hash(newHourlyCost) ^
      const DeepCollectionEquality().hash(oldDailyRate) ^
      const DeepCollectionEquality().hash(newDailyRate) ^
      const DeepCollectionEquality().hash(oldDailyCost) ^
      const DeepCollectionEquality().hash(newDailyCost) ^
      const DeepCollectionEquality().hash(oldWeeklyRate) ^
      const DeepCollectionEquality().hash(oldWeek2Rate) ^
      const DeepCollectionEquality().hash(oldWeek3Rate) ^
      const DeepCollectionEquality().hash(oldWeek4Rate) ^
      const DeepCollectionEquality().hash(oldWeek5Rate) ^
      const DeepCollectionEquality().hash(oldWeeklyCost) ^
      const DeepCollectionEquality().hash(newWeeklyRate) ^
      const DeepCollectionEquality().hash(newWeek2Rate) ^
      const DeepCollectionEquality().hash(newWeek3Rate) ^
      const DeepCollectionEquality().hash(newWeek4Rate) ^
      const DeepCollectionEquality().hash(newWeek5Rate) ^
      const DeepCollectionEquality().hash(newWeeklyCost) ^
      const DeepCollectionEquality().hash(oldMonthlyRate) ^
      const DeepCollectionEquality().hash(oldMonthlyCost) ^
      const DeepCollectionEquality().hash(oldMaxDiscount) ^
      const DeepCollectionEquality().hash(newMonthlyRate) ^
      const DeepCollectionEquality().hash(newMonthlyCost) ^
      const DeepCollectionEquality().hash(newMaxDiscount) ^
      const DeepCollectionEquality().hash(oldUnitValue) ^
      const DeepCollectionEquality().hash(newUnitValue) ^
      const DeepCollectionEquality().hash(oldReplacementCost) ^
      const DeepCollectionEquality().hash(newReplacementCost) ^
      const DeepCollectionEquality().hash(oldMinDaysPerWeek) ^
      const DeepCollectionEquality().hash(newMinDaysPerWeek) ^
      const DeepCollectionEquality().hash(rateUpdateBatchId) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItemExtension
    on WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem {
  WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem copyWith(
      {int? rateUpdateBatchItemId,
      String? inventoryId,
      String? iCode,
      String? currencyId,
      String? description,
      String? availableFor,
      bool? rank,
      String? classification,
      String? inventoryTypeId,
      String? inventoryType,
      String? categoryId,
      String? category,
      String? subCategoryId,
      String? subCategory,
      String? warehouseId,
      String? warehouseCode,
      String? warehouse,
      String? manufacturerId,
      String? manufacturer,
      String? unitId,
      String? partNumber,
      double? oldDefaultCost,
      double? newDefaultCost,
      double? oldCost,
      double? newCost,
      double? oldPrice,
      double? newPrice,
      double? oldRetail,
      double? newRetail,
      double? oldHourlyRate,
      double? newHourlyRate,
      double? oldHourlyCost,
      double? newHourlyCost,
      double? oldDailyRate,
      double? newDailyRate,
      double? oldDailyCost,
      double? newDailyCost,
      double? oldWeeklyRate,
      double? oldWeek2Rate,
      double? oldWeek3Rate,
      double? oldWeek4Rate,
      double? oldWeek5Rate,
      double? oldWeeklyCost,
      double? newWeeklyRate,
      double? newWeek2Rate,
      double? newWeek3Rate,
      double? newWeek4Rate,
      double? newWeek5Rate,
      double? newWeeklyCost,
      double? oldMonthlyRate,
      double? oldMonthlyCost,
      double? oldMaxDiscount,
      double? newMonthlyRate,
      double? newMonthlyCost,
      double? newMaxDiscount,
      double? oldUnitValue,
      double? newUnitValue,
      double? oldReplacementCost,
      double? newReplacementCost,
      double? oldMinDaysPerWeek,
      double? newMinDaysPerWeek,
      int? rateUpdateBatchId,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem(
        rateUpdateBatchItemId:
            rateUpdateBatchItemId ?? this.rateUpdateBatchItemId,
        inventoryId: inventoryId ?? this.inventoryId,
        iCode: iCode ?? this.iCode,
        currencyId: currencyId ?? this.currencyId,
        description: description ?? this.description,
        availableFor: availableFor ?? this.availableFor,
        rank: rank ?? this.rank,
        classification: classification ?? this.classification,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        subCategory: subCategory ?? this.subCategory,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        warehouse: warehouse ?? this.warehouse,
        manufacturerId: manufacturerId ?? this.manufacturerId,
        manufacturer: manufacturer ?? this.manufacturer,
        unitId: unitId ?? this.unitId,
        partNumber: partNumber ?? this.partNumber,
        oldDefaultCost: oldDefaultCost ?? this.oldDefaultCost,
        newDefaultCost: newDefaultCost ?? this.newDefaultCost,
        oldCost: oldCost ?? this.oldCost,
        newCost: newCost ?? this.newCost,
        oldPrice: oldPrice ?? this.oldPrice,
        newPrice: newPrice ?? this.newPrice,
        oldRetail: oldRetail ?? this.oldRetail,
        newRetail: newRetail ?? this.newRetail,
        oldHourlyRate: oldHourlyRate ?? this.oldHourlyRate,
        newHourlyRate: newHourlyRate ?? this.newHourlyRate,
        oldHourlyCost: oldHourlyCost ?? this.oldHourlyCost,
        newHourlyCost: newHourlyCost ?? this.newHourlyCost,
        oldDailyRate: oldDailyRate ?? this.oldDailyRate,
        newDailyRate: newDailyRate ?? this.newDailyRate,
        oldDailyCost: oldDailyCost ?? this.oldDailyCost,
        newDailyCost: newDailyCost ?? this.newDailyCost,
        oldWeeklyRate: oldWeeklyRate ?? this.oldWeeklyRate,
        oldWeek2Rate: oldWeek2Rate ?? this.oldWeek2Rate,
        oldWeek3Rate: oldWeek3Rate ?? this.oldWeek3Rate,
        oldWeek4Rate: oldWeek4Rate ?? this.oldWeek4Rate,
        oldWeek5Rate: oldWeek5Rate ?? this.oldWeek5Rate,
        oldWeeklyCost: oldWeeklyCost ?? this.oldWeeklyCost,
        newWeeklyRate: newWeeklyRate ?? this.newWeeklyRate,
        newWeek2Rate: newWeek2Rate ?? this.newWeek2Rate,
        newWeek3Rate: newWeek3Rate ?? this.newWeek3Rate,
        newWeek4Rate: newWeek4Rate ?? this.newWeek4Rate,
        newWeek5Rate: newWeek5Rate ?? this.newWeek5Rate,
        newWeeklyCost: newWeeklyCost ?? this.newWeeklyCost,
        oldMonthlyRate: oldMonthlyRate ?? this.oldMonthlyRate,
        oldMonthlyCost: oldMonthlyCost ?? this.oldMonthlyCost,
        oldMaxDiscount: oldMaxDiscount ?? this.oldMaxDiscount,
        newMonthlyRate: newMonthlyRate ?? this.newMonthlyRate,
        newMonthlyCost: newMonthlyCost ?? this.newMonthlyCost,
        newMaxDiscount: newMaxDiscount ?? this.newMaxDiscount,
        oldUnitValue: oldUnitValue ?? this.oldUnitValue,
        newUnitValue: newUnitValue ?? this.newUnitValue,
        oldReplacementCost: oldReplacementCost ?? this.oldReplacementCost,
        newReplacementCost: newReplacementCost ?? this.newReplacementCost,
        oldMinDaysPerWeek: oldMinDaysPerWeek ?? this.oldMinDaysPerWeek,
        newMinDaysPerWeek: newMinDaysPerWeek ?? this.newMinDaysPerWeek,
        rateUpdateBatchId: rateUpdateBatchId ?? this.rateUpdateBatchId,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem copyWithWrapped(
      {Wrapped<int?>? rateUpdateBatchItemId,
      Wrapped<String?>? inventoryId,
      Wrapped<String?>? iCode,
      Wrapped<String?>? currencyId,
      Wrapped<String?>? description,
      Wrapped<String?>? availableFor,
      Wrapped<bool?>? rank,
      Wrapped<String?>? classification,
      Wrapped<String?>? inventoryTypeId,
      Wrapped<String?>? inventoryType,
      Wrapped<String?>? categoryId,
      Wrapped<String?>? category,
      Wrapped<String?>? subCategoryId,
      Wrapped<String?>? subCategory,
      Wrapped<String?>? warehouseId,
      Wrapped<String?>? warehouseCode,
      Wrapped<String?>? warehouse,
      Wrapped<String?>? manufacturerId,
      Wrapped<String?>? manufacturer,
      Wrapped<String?>? unitId,
      Wrapped<String?>? partNumber,
      Wrapped<double?>? oldDefaultCost,
      Wrapped<double?>? newDefaultCost,
      Wrapped<double?>? oldCost,
      Wrapped<double?>? newCost,
      Wrapped<double?>? oldPrice,
      Wrapped<double?>? newPrice,
      Wrapped<double?>? oldRetail,
      Wrapped<double?>? newRetail,
      Wrapped<double?>? oldHourlyRate,
      Wrapped<double?>? newHourlyRate,
      Wrapped<double?>? oldHourlyCost,
      Wrapped<double?>? newHourlyCost,
      Wrapped<double?>? oldDailyRate,
      Wrapped<double?>? newDailyRate,
      Wrapped<double?>? oldDailyCost,
      Wrapped<double?>? newDailyCost,
      Wrapped<double?>? oldWeeklyRate,
      Wrapped<double?>? oldWeek2Rate,
      Wrapped<double?>? oldWeek3Rate,
      Wrapped<double?>? oldWeek4Rate,
      Wrapped<double?>? oldWeek5Rate,
      Wrapped<double?>? oldWeeklyCost,
      Wrapped<double?>? newWeeklyRate,
      Wrapped<double?>? newWeek2Rate,
      Wrapped<double?>? newWeek3Rate,
      Wrapped<double?>? newWeek4Rate,
      Wrapped<double?>? newWeek5Rate,
      Wrapped<double?>? newWeeklyCost,
      Wrapped<double?>? oldMonthlyRate,
      Wrapped<double?>? oldMonthlyCost,
      Wrapped<double?>? oldMaxDiscount,
      Wrapped<double?>? newMonthlyRate,
      Wrapped<double?>? newMonthlyCost,
      Wrapped<double?>? newMaxDiscount,
      Wrapped<double?>? oldUnitValue,
      Wrapped<double?>? newUnitValue,
      Wrapped<double?>? oldReplacementCost,
      Wrapped<double?>? newReplacementCost,
      Wrapped<double?>? oldMinDaysPerWeek,
      Wrapped<double?>? newMinDaysPerWeek,
      Wrapped<int?>? rateUpdateBatchId,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesUtilitiesRateUpdateBatchItemRateUpdateBatchItem(
        rateUpdateBatchItemId: (rateUpdateBatchItemId != null
            ? rateUpdateBatchItemId.value
            : this.rateUpdateBatchItemId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        iCode: (iCode != null ? iCode.value : this.iCode),
        currencyId: (currencyId != null ? currencyId.value : this.currencyId),
        description:
            (description != null ? description.value : this.description),
        availableFor:
            (availableFor != null ? availableFor.value : this.availableFor),
        rank: (rank != null ? rank.value : this.rank),
        classification: (classification != null
            ? classification.value
            : this.classification),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        inventoryType:
            (inventoryType != null ? inventoryType.value : this.inventoryType),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        category: (category != null ? category.value : this.category),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        subCategory:
            (subCategory != null ? subCategory.value : this.subCategory),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        warehouseCode:
            (warehouseCode != null ? warehouseCode.value : this.warehouseCode),
        warehouse: (warehouse != null ? warehouse.value : this.warehouse),
        manufacturerId: (manufacturerId != null
            ? manufacturerId.value
            : this.manufacturerId),
        manufacturer:
            (manufacturer != null ? manufacturer.value : this.manufacturer),
        unitId: (unitId != null ? unitId.value : this.unitId),
        partNumber: (partNumber != null ? partNumber.value : this.partNumber),
        oldDefaultCost: (oldDefaultCost != null
            ? oldDefaultCost.value
            : this.oldDefaultCost),
        newDefaultCost: (newDefaultCost != null
            ? newDefaultCost.value
            : this.newDefaultCost),
        oldCost: (oldCost != null ? oldCost.value : this.oldCost),
        newCost: (newCost != null ? newCost.value : this.newCost),
        oldPrice: (oldPrice != null ? oldPrice.value : this.oldPrice),
        newPrice: (newPrice != null ? newPrice.value : this.newPrice),
        oldRetail: (oldRetail != null ? oldRetail.value : this.oldRetail),
        newRetail: (newRetail != null ? newRetail.value : this.newRetail),
        oldHourlyRate:
            (oldHourlyRate != null ? oldHourlyRate.value : this.oldHourlyRate),
        newHourlyRate:
            (newHourlyRate != null ? newHourlyRate.value : this.newHourlyRate),
        oldHourlyCost:
            (oldHourlyCost != null ? oldHourlyCost.value : this.oldHourlyCost),
        newHourlyCost:
            (newHourlyCost != null ? newHourlyCost.value : this.newHourlyCost),
        oldDailyRate:
            (oldDailyRate != null ? oldDailyRate.value : this.oldDailyRate),
        newDailyRate:
            (newDailyRate != null ? newDailyRate.value : this.newDailyRate),
        oldDailyCost:
            (oldDailyCost != null ? oldDailyCost.value : this.oldDailyCost),
        newDailyCost:
            (newDailyCost != null ? newDailyCost.value : this.newDailyCost),
        oldWeeklyRate:
            (oldWeeklyRate != null ? oldWeeklyRate.value : this.oldWeeklyRate),
        oldWeek2Rate:
            (oldWeek2Rate != null ? oldWeek2Rate.value : this.oldWeek2Rate),
        oldWeek3Rate:
            (oldWeek3Rate != null ? oldWeek3Rate.value : this.oldWeek3Rate),
        oldWeek4Rate:
            (oldWeek4Rate != null ? oldWeek4Rate.value : this.oldWeek4Rate),
        oldWeek5Rate:
            (oldWeek5Rate != null ? oldWeek5Rate.value : this.oldWeek5Rate),
        oldWeeklyCost:
            (oldWeeklyCost != null ? oldWeeklyCost.value : this.oldWeeklyCost),
        newWeeklyRate:
            (newWeeklyRate != null ? newWeeklyRate.value : this.newWeeklyRate),
        newWeek2Rate:
            (newWeek2Rate != null ? newWeek2Rate.value : this.newWeek2Rate),
        newWeek3Rate:
            (newWeek3Rate != null ? newWeek3Rate.value : this.newWeek3Rate),
        newWeek4Rate:
            (newWeek4Rate != null ? newWeek4Rate.value : this.newWeek4Rate),
        newWeek5Rate:
            (newWeek5Rate != null ? newWeek5Rate.value : this.newWeek5Rate),
        newWeeklyCost:
            (newWeeklyCost != null ? newWeeklyCost.value : this.newWeeklyCost),
        oldMonthlyRate: (oldMonthlyRate != null
            ? oldMonthlyRate.value
            : this.oldMonthlyRate),
        oldMonthlyCost: (oldMonthlyCost != null
            ? oldMonthlyCost.value
            : this.oldMonthlyCost),
        oldMaxDiscount: (oldMaxDiscount != null
            ? oldMaxDiscount.value
            : this.oldMaxDiscount),
        newMonthlyRate: (newMonthlyRate != null
            ? newMonthlyRate.value
            : this.newMonthlyRate),
        newMonthlyCost: (newMonthlyCost != null
            ? newMonthlyCost.value
            : this.newMonthlyCost),
        newMaxDiscount: (newMaxDiscount != null
            ? newMaxDiscount.value
            : this.newMaxDiscount),
        oldUnitValue:
            (oldUnitValue != null ? oldUnitValue.value : this.oldUnitValue),
        newUnitValue:
            (newUnitValue != null ? newUnitValue.value : this.newUnitValue),
        oldReplacementCost: (oldReplacementCost != null
            ? oldReplacementCost.value
            : this.oldReplacementCost),
        newReplacementCost: (newReplacementCost != null
            ? newReplacementCost.value
            : this.newReplacementCost),
        oldMinDaysPerWeek: (oldMinDaysPerWeek != null
            ? oldMinDaysPerWeek.value
            : this.oldMinDaysPerWeek),
        newMinDaysPerWeek: (newMinDaysPerWeek != null
            ? newMinDaysPerWeek.value
            : this.newMinDaysPerWeek),
        rateUpdateBatchId: (rateUpdateBatchId != null
            ? rateUpdateBatchId.value
            : this.rateUpdateBatchId),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesRateUpdateItemRateUpdateItem {
  WebApiModulesUtilitiesRateUpdateItemRateUpdateItem({
    this.inventoryId,
    this.warehouseId,
    this.description,
    this.iCode,
    this.warehouseCode,
    this.warehouse,
    this.availableFor,
    this.rank,
    this.classification,
    this.inventoryTypeId,
    this.inventoryType,
    this.categoryId,
    this.category,
    this.subCategoryId,
    this.subCategory,
    this.unitId,
    this.partNumber,
    this.manufacturerId,
    this.manufacturer,
    this.cost,
    this.newCost,
    this.defaultCost,
    this.newDefaultCost,
    this.price,
    this.newPrice,
    this.hourlyRate,
    this.dailyRate,
    this.weeklyRate,
    this.monthlyRate,
    this.newHourlyRate,
    this.newDailyRate,
    this.newWeeklyRate,
    this.newMonthlyRate,
    this.week2Rate,
    this.week3Rate,
    this.week4Rate,
    this.week5Rate,
    this.newWeek2Rate,
    this.newWeek3Rate,
    this.newWeek4Rate,
    this.newWeek5Rate,
    this.maxDiscount,
    this.newMaxDiscount,
    this.hourlyCost,
    this.newHourlyCost,
    this.dailyCost,
    this.newDailyCost,
    this.weeklyCost,
    this.newWeeklyCost,
    this.monthlyCost,
    this.newMonthlyCost,
    this.unitValue,
    this.newUnitValue,
    this.replacementCost,
    this.newReplacementCost,
    this.retail,
    this.newRetail,
    this.minDaysPerWeek,
    this.newMinDaysPerWeek,
    this.currencyId,
    this.currency,
    this.currencySymbol,
    this.currencyCode,
    this.isForeignCurrency,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesRateUpdateItemRateUpdateItem.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesRateUpdateItemRateUpdateItemFromJson(json);

  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'AvailableFor', includeIfNull: false)
  final String? availableFor;
  @JsonKey(name: 'Rank', includeIfNull: false)
  final String? rank;
  @JsonKey(name: 'Classification', includeIfNull: false)
  final String? classification;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryType', includeIfNull: false)
  final String? inventoryType;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'Category', includeIfNull: false)
  final String? category;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'SubCategory', includeIfNull: false)
  final String? subCategory;
  @JsonKey(name: 'UnitId', includeIfNull: false)
  final String? unitId;
  @JsonKey(name: 'PartNumber', includeIfNull: false)
  final String? partNumber;
  @JsonKey(name: 'ManufacturerId', includeIfNull: false)
  final String? manufacturerId;
  @JsonKey(name: 'Manufacturer', includeIfNull: false)
  final String? manufacturer;
  @JsonKey(name: 'Cost', includeIfNull: false)
  final double? cost;
  @JsonKey(name: 'NewCost', includeIfNull: false)
  final double? newCost;
  @JsonKey(name: 'DefaultCost', includeIfNull: false)
  final double? defaultCost;
  @JsonKey(name: 'NewDefaultCost', includeIfNull: false)
  final double? newDefaultCost;
  @JsonKey(name: 'Price', includeIfNull: false)
  final double? price;
  @JsonKey(name: 'NewPrice', includeIfNull: false)
  final double? newPrice;
  @JsonKey(name: 'HourlyRate', includeIfNull: false)
  final double? hourlyRate;
  @JsonKey(name: 'DailyRate', includeIfNull: false)
  final double? dailyRate;
  @JsonKey(name: 'WeeklyRate', includeIfNull: false)
  final double? weeklyRate;
  @JsonKey(name: 'MonthlyRate', includeIfNull: false)
  final double? monthlyRate;
  @JsonKey(name: 'NewHourlyRate', includeIfNull: false)
  final double? newHourlyRate;
  @JsonKey(name: 'NewDailyRate', includeIfNull: false)
  final double? newDailyRate;
  @JsonKey(name: 'NewWeeklyRate', includeIfNull: false)
  final double? newWeeklyRate;
  @JsonKey(name: 'NewMonthlyRate', includeIfNull: false)
  final double? newMonthlyRate;
  @JsonKey(name: 'Week2Rate', includeIfNull: false)
  final double? week2Rate;
  @JsonKey(name: 'Week3Rate', includeIfNull: false)
  final double? week3Rate;
  @JsonKey(name: 'Week4Rate', includeIfNull: false)
  final double? week4Rate;
  @JsonKey(name: 'Week5Rate', includeIfNull: false)
  final double? week5Rate;
  @JsonKey(name: 'NewWeek2Rate', includeIfNull: false)
  final double? newWeek2Rate;
  @JsonKey(name: 'NewWeek3Rate', includeIfNull: false)
  final double? newWeek3Rate;
  @JsonKey(name: 'NewWeek4Rate', includeIfNull: false)
  final double? newWeek4Rate;
  @JsonKey(name: 'NewWeek5Rate', includeIfNull: false)
  final double? newWeek5Rate;
  @JsonKey(name: 'MaxDiscount', includeIfNull: false)
  final double? maxDiscount;
  @JsonKey(name: 'NewMaxDiscount', includeIfNull: false)
  final double? newMaxDiscount;
  @JsonKey(name: 'HourlyCost', includeIfNull: false)
  final double? hourlyCost;
  @JsonKey(name: 'NewHourlyCost', includeIfNull: false)
  final double? newHourlyCost;
  @JsonKey(name: 'DailyCost', includeIfNull: false)
  final double? dailyCost;
  @JsonKey(name: 'NewDailyCost', includeIfNull: false)
  final double? newDailyCost;
  @JsonKey(name: 'WeeklyCost', includeIfNull: false)
  final double? weeklyCost;
  @JsonKey(name: 'NewWeeklyCost', includeIfNull: false)
  final double? newWeeklyCost;
  @JsonKey(name: 'MonthlyCost', includeIfNull: false)
  final double? monthlyCost;
  @JsonKey(name: 'NewMonthlyCost', includeIfNull: false)
  final double? newMonthlyCost;
  @JsonKey(name: 'UnitValue', includeIfNull: false)
  final double? unitValue;
  @JsonKey(name: 'NewUnitValue', includeIfNull: false)
  final double? newUnitValue;
  @JsonKey(name: 'ReplacementCost', includeIfNull: false)
  final double? replacementCost;
  @JsonKey(name: 'NewReplacementCost', includeIfNull: false)
  final double? newReplacementCost;
  @JsonKey(name: 'Retail', includeIfNull: false)
  final double? retail;
  @JsonKey(name: 'NewRetail', includeIfNull: false)
  final double? newRetail;
  @JsonKey(name: 'MinDaysPerWeek', includeIfNull: false)
  final double? minDaysPerWeek;
  @JsonKey(name: 'NewMinDaysPerWeek', includeIfNull: false)
  final double? newMinDaysPerWeek;
  @JsonKey(name: 'CurrencyId', includeIfNull: false)
  final String? currencyId;
  @JsonKey(name: 'Currency', includeIfNull: false)
  final String? currency;
  @JsonKey(name: 'CurrencySymbol', includeIfNull: false)
  final String? currencySymbol;
  @JsonKey(name: 'CurrencyCode', includeIfNull: false)
  final String? currencyCode;
  @JsonKey(name: 'IsForeignCurrency', includeIfNull: false)
  final bool? isForeignCurrency;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesRateUpdateItemRateUpdateItemFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesRateUpdateItemRateUpdateItemToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesRateUpdateItemRateUpdateItemToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesRateUpdateItemRateUpdateItem &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.iCode, iCode) ||
                const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.availableFor, availableFor) ||
                const DeepCollectionEquality()
                    .equals(other.availableFor, availableFor)) &&
            (identical(other.rank, rank) ||
                const DeepCollectionEquality().equals(other.rank, rank)) &&
            (identical(other.classification, classification) ||
                const DeepCollectionEquality()
                    .equals(other.classification, classification)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryType, inventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryType, inventoryType)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.category, category) ||
                const DeepCollectionEquality()
                    .equals(other.category, category)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.subCategory, subCategory) ||
                const DeepCollectionEquality()
                    .equals(other.subCategory, subCategory)) &&
            (identical(other.unitId, unitId) ||
                const DeepCollectionEquality().equals(other.unitId, unitId)) &&
            (identical(other.partNumber, partNumber) ||
                const DeepCollectionEquality()
                    .equals(other.partNumber, partNumber)) &&
            (identical(other.manufacturerId, manufacturerId) ||
                const DeepCollectionEquality()
                    .equals(other.manufacturerId, manufacturerId)) &&
            (identical(other.manufacturer, manufacturer) ||
                const DeepCollectionEquality()
                    .equals(other.manufacturer, manufacturer)) &&
            (identical(other.cost, cost) ||
                const DeepCollectionEquality().equals(other.cost, cost)) &&
            (identical(other.newCost, newCost) ||
                const DeepCollectionEquality()
                    .equals(other.newCost, newCost)) &&
            (identical(other.defaultCost, defaultCost) ||
                const DeepCollectionEquality()
                    .equals(other.defaultCost, defaultCost)) &&
            (identical(other.newDefaultCost, newDefaultCost) ||
                const DeepCollectionEquality()
                    .equals(other.newDefaultCost, newDefaultCost)) &&
            (identical(other.price, price) ||
                const DeepCollectionEquality().equals(other.price, price)) &&
            (identical(other.newPrice, newPrice) || const DeepCollectionEquality().equals(other.newPrice, newPrice)) &&
            (identical(other.hourlyRate, hourlyRate) || const DeepCollectionEquality().equals(other.hourlyRate, hourlyRate)) &&
            (identical(other.dailyRate, dailyRate) || const DeepCollectionEquality().equals(other.dailyRate, dailyRate)) &&
            (identical(other.weeklyRate, weeklyRate) || const DeepCollectionEquality().equals(other.weeklyRate, weeklyRate)) &&
            (identical(other.monthlyRate, monthlyRate) || const DeepCollectionEquality().equals(other.monthlyRate, monthlyRate)) &&
            (identical(other.newHourlyRate, newHourlyRate) || const DeepCollectionEquality().equals(other.newHourlyRate, newHourlyRate)) &&
            (identical(other.newDailyRate, newDailyRate) || const DeepCollectionEquality().equals(other.newDailyRate, newDailyRate)) &&
            (identical(other.newWeeklyRate, newWeeklyRate) || const DeepCollectionEquality().equals(other.newWeeklyRate, newWeeklyRate)) &&
            (identical(other.newMonthlyRate, newMonthlyRate) || const DeepCollectionEquality().equals(other.newMonthlyRate, newMonthlyRate)) &&
            (identical(other.week2Rate, week2Rate) || const DeepCollectionEquality().equals(other.week2Rate, week2Rate)) &&
            (identical(other.week3Rate, week3Rate) || const DeepCollectionEquality().equals(other.week3Rate, week3Rate)) &&
            (identical(other.week4Rate, week4Rate) || const DeepCollectionEquality().equals(other.week4Rate, week4Rate)) &&
            (identical(other.week5Rate, week5Rate) || const DeepCollectionEquality().equals(other.week5Rate, week5Rate)) &&
            (identical(other.newWeek2Rate, newWeek2Rate) || const DeepCollectionEquality().equals(other.newWeek2Rate, newWeek2Rate)) &&
            (identical(other.newWeek3Rate, newWeek3Rate) || const DeepCollectionEquality().equals(other.newWeek3Rate, newWeek3Rate)) &&
            (identical(other.newWeek4Rate, newWeek4Rate) || const DeepCollectionEquality().equals(other.newWeek4Rate, newWeek4Rate)) &&
            (identical(other.newWeek5Rate, newWeek5Rate) || const DeepCollectionEquality().equals(other.newWeek5Rate, newWeek5Rate)) &&
            (identical(other.maxDiscount, maxDiscount) || const DeepCollectionEquality().equals(other.maxDiscount, maxDiscount)) &&
            (identical(other.newMaxDiscount, newMaxDiscount) || const DeepCollectionEquality().equals(other.newMaxDiscount, newMaxDiscount)) &&
            (identical(other.hourlyCost, hourlyCost) || const DeepCollectionEquality().equals(other.hourlyCost, hourlyCost)) &&
            (identical(other.newHourlyCost, newHourlyCost) || const DeepCollectionEquality().equals(other.newHourlyCost, newHourlyCost)) &&
            (identical(other.dailyCost, dailyCost) || const DeepCollectionEquality().equals(other.dailyCost, dailyCost)) &&
            (identical(other.newDailyCost, newDailyCost) || const DeepCollectionEquality().equals(other.newDailyCost, newDailyCost)) &&
            (identical(other.weeklyCost, weeklyCost) || const DeepCollectionEquality().equals(other.weeklyCost, weeklyCost)) &&
            (identical(other.newWeeklyCost, newWeeklyCost) || const DeepCollectionEquality().equals(other.newWeeklyCost, newWeeklyCost)) &&
            (identical(other.monthlyCost, monthlyCost) || const DeepCollectionEquality().equals(other.monthlyCost, monthlyCost)) &&
            (identical(other.newMonthlyCost, newMonthlyCost) || const DeepCollectionEquality().equals(other.newMonthlyCost, newMonthlyCost)) &&
            (identical(other.unitValue, unitValue) || const DeepCollectionEquality().equals(other.unitValue, unitValue)) &&
            (identical(other.newUnitValue, newUnitValue) || const DeepCollectionEquality().equals(other.newUnitValue, newUnitValue)) &&
            (identical(other.replacementCost, replacementCost) || const DeepCollectionEquality().equals(other.replacementCost, replacementCost)) &&
            (identical(other.newReplacementCost, newReplacementCost) || const DeepCollectionEquality().equals(other.newReplacementCost, newReplacementCost)) &&
            (identical(other.retail, retail) || const DeepCollectionEquality().equals(other.retail, retail)) &&
            (identical(other.newRetail, newRetail) || const DeepCollectionEquality().equals(other.newRetail, newRetail)) &&
            (identical(other.minDaysPerWeek, minDaysPerWeek) || const DeepCollectionEquality().equals(other.minDaysPerWeek, minDaysPerWeek)) &&
            (identical(other.newMinDaysPerWeek, newMinDaysPerWeek) || const DeepCollectionEquality().equals(other.newMinDaysPerWeek, newMinDaysPerWeek)) &&
            (identical(other.currencyId, currencyId) || const DeepCollectionEquality().equals(other.currencyId, currencyId)) &&
            (identical(other.currency, currency) || const DeepCollectionEquality().equals(other.currency, currency)) &&
            (identical(other.currencySymbol, currencySymbol) || const DeepCollectionEquality().equals(other.currencySymbol, currencySymbol)) &&
            (identical(other.currencyCode, currencyCode) || const DeepCollectionEquality().equals(other.currencyCode, currencyCode)) &&
            (identical(other.isForeignCurrency, isForeignCurrency) || const DeepCollectionEquality().equals(other.isForeignCurrency, isForeignCurrency)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) || const DeepCollectionEquality().equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(iCode) ^
      const DeepCollectionEquality().hash(warehouseCode) ^
      const DeepCollectionEquality().hash(warehouse) ^
      const DeepCollectionEquality().hash(availableFor) ^
      const DeepCollectionEquality().hash(rank) ^
      const DeepCollectionEquality().hash(classification) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(inventoryType) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(category) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(subCategory) ^
      const DeepCollectionEquality().hash(unitId) ^
      const DeepCollectionEquality().hash(partNumber) ^
      const DeepCollectionEquality().hash(manufacturerId) ^
      const DeepCollectionEquality().hash(manufacturer) ^
      const DeepCollectionEquality().hash(cost) ^
      const DeepCollectionEquality().hash(newCost) ^
      const DeepCollectionEquality().hash(defaultCost) ^
      const DeepCollectionEquality().hash(newDefaultCost) ^
      const DeepCollectionEquality().hash(price) ^
      const DeepCollectionEquality().hash(newPrice) ^
      const DeepCollectionEquality().hash(hourlyRate) ^
      const DeepCollectionEquality().hash(dailyRate) ^
      const DeepCollectionEquality().hash(weeklyRate) ^
      const DeepCollectionEquality().hash(monthlyRate) ^
      const DeepCollectionEquality().hash(newHourlyRate) ^
      const DeepCollectionEquality().hash(newDailyRate) ^
      const DeepCollectionEquality().hash(newWeeklyRate) ^
      const DeepCollectionEquality().hash(newMonthlyRate) ^
      const DeepCollectionEquality().hash(week2Rate) ^
      const DeepCollectionEquality().hash(week3Rate) ^
      const DeepCollectionEquality().hash(week4Rate) ^
      const DeepCollectionEquality().hash(week5Rate) ^
      const DeepCollectionEquality().hash(newWeek2Rate) ^
      const DeepCollectionEquality().hash(newWeek3Rate) ^
      const DeepCollectionEquality().hash(newWeek4Rate) ^
      const DeepCollectionEquality().hash(newWeek5Rate) ^
      const DeepCollectionEquality().hash(maxDiscount) ^
      const DeepCollectionEquality().hash(newMaxDiscount) ^
      const DeepCollectionEquality().hash(hourlyCost) ^
      const DeepCollectionEquality().hash(newHourlyCost) ^
      const DeepCollectionEquality().hash(dailyCost) ^
      const DeepCollectionEquality().hash(newDailyCost) ^
      const DeepCollectionEquality().hash(weeklyCost) ^
      const DeepCollectionEquality().hash(newWeeklyCost) ^
      const DeepCollectionEquality().hash(monthlyCost) ^
      const DeepCollectionEquality().hash(newMonthlyCost) ^
      const DeepCollectionEquality().hash(unitValue) ^
      const DeepCollectionEquality().hash(newUnitValue) ^
      const DeepCollectionEquality().hash(replacementCost) ^
      const DeepCollectionEquality().hash(newReplacementCost) ^
      const DeepCollectionEquality().hash(retail) ^
      const DeepCollectionEquality().hash(newRetail) ^
      const DeepCollectionEquality().hash(minDaysPerWeek) ^
      const DeepCollectionEquality().hash(newMinDaysPerWeek) ^
      const DeepCollectionEquality().hash(currencyId) ^
      const DeepCollectionEquality().hash(currency) ^
      const DeepCollectionEquality().hash(currencySymbol) ^
      const DeepCollectionEquality().hash(currencyCode) ^
      const DeepCollectionEquality().hash(isForeignCurrency) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesRateUpdateItemRateUpdateItemExtension
    on WebApiModulesUtilitiesRateUpdateItemRateUpdateItem {
  WebApiModulesUtilitiesRateUpdateItemRateUpdateItem copyWith(
      {String? inventoryId,
      String? warehouseId,
      String? description,
      String? iCode,
      String? warehouseCode,
      String? warehouse,
      String? availableFor,
      String? rank,
      String? classification,
      String? inventoryTypeId,
      String? inventoryType,
      String? categoryId,
      String? category,
      String? subCategoryId,
      String? subCategory,
      String? unitId,
      String? partNumber,
      String? manufacturerId,
      String? manufacturer,
      double? cost,
      double? newCost,
      double? defaultCost,
      double? newDefaultCost,
      double? price,
      double? newPrice,
      double? hourlyRate,
      double? dailyRate,
      double? weeklyRate,
      double? monthlyRate,
      double? newHourlyRate,
      double? newDailyRate,
      double? newWeeklyRate,
      double? newMonthlyRate,
      double? week2Rate,
      double? week3Rate,
      double? week4Rate,
      double? week5Rate,
      double? newWeek2Rate,
      double? newWeek3Rate,
      double? newWeek4Rate,
      double? newWeek5Rate,
      double? maxDiscount,
      double? newMaxDiscount,
      double? hourlyCost,
      double? newHourlyCost,
      double? dailyCost,
      double? newDailyCost,
      double? weeklyCost,
      double? newWeeklyCost,
      double? monthlyCost,
      double? newMonthlyCost,
      double? unitValue,
      double? newUnitValue,
      double? replacementCost,
      double? newReplacementCost,
      double? retail,
      double? newRetail,
      double? minDaysPerWeek,
      double? newMinDaysPerWeek,
      String? currencyId,
      String? currency,
      String? currencySymbol,
      String? currencyCode,
      bool? isForeignCurrency,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesRateUpdateItemRateUpdateItem(
        inventoryId: inventoryId ?? this.inventoryId,
        warehouseId: warehouseId ?? this.warehouseId,
        description: description ?? this.description,
        iCode: iCode ?? this.iCode,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        warehouse: warehouse ?? this.warehouse,
        availableFor: availableFor ?? this.availableFor,
        rank: rank ?? this.rank,
        classification: classification ?? this.classification,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryType: inventoryType ?? this.inventoryType,
        categoryId: categoryId ?? this.categoryId,
        category: category ?? this.category,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        subCategory: subCategory ?? this.subCategory,
        unitId: unitId ?? this.unitId,
        partNumber: partNumber ?? this.partNumber,
        manufacturerId: manufacturerId ?? this.manufacturerId,
        manufacturer: manufacturer ?? this.manufacturer,
        cost: cost ?? this.cost,
        newCost: newCost ?? this.newCost,
        defaultCost: defaultCost ?? this.defaultCost,
        newDefaultCost: newDefaultCost ?? this.newDefaultCost,
        price: price ?? this.price,
        newPrice: newPrice ?? this.newPrice,
        hourlyRate: hourlyRate ?? this.hourlyRate,
        dailyRate: dailyRate ?? this.dailyRate,
        weeklyRate: weeklyRate ?? this.weeklyRate,
        monthlyRate: monthlyRate ?? this.monthlyRate,
        newHourlyRate: newHourlyRate ?? this.newHourlyRate,
        newDailyRate: newDailyRate ?? this.newDailyRate,
        newWeeklyRate: newWeeklyRate ?? this.newWeeklyRate,
        newMonthlyRate: newMonthlyRate ?? this.newMonthlyRate,
        week2Rate: week2Rate ?? this.week2Rate,
        week3Rate: week3Rate ?? this.week3Rate,
        week4Rate: week4Rate ?? this.week4Rate,
        week5Rate: week5Rate ?? this.week5Rate,
        newWeek2Rate: newWeek2Rate ?? this.newWeek2Rate,
        newWeek3Rate: newWeek3Rate ?? this.newWeek3Rate,
        newWeek4Rate: newWeek4Rate ?? this.newWeek4Rate,
        newWeek5Rate: newWeek5Rate ?? this.newWeek5Rate,
        maxDiscount: maxDiscount ?? this.maxDiscount,
        newMaxDiscount: newMaxDiscount ?? this.newMaxDiscount,
        hourlyCost: hourlyCost ?? this.hourlyCost,
        newHourlyCost: newHourlyCost ?? this.newHourlyCost,
        dailyCost: dailyCost ?? this.dailyCost,
        newDailyCost: newDailyCost ?? this.newDailyCost,
        weeklyCost: weeklyCost ?? this.weeklyCost,
        newWeeklyCost: newWeeklyCost ?? this.newWeeklyCost,
        monthlyCost: monthlyCost ?? this.monthlyCost,
        newMonthlyCost: newMonthlyCost ?? this.newMonthlyCost,
        unitValue: unitValue ?? this.unitValue,
        newUnitValue: newUnitValue ?? this.newUnitValue,
        replacementCost: replacementCost ?? this.replacementCost,
        newReplacementCost: newReplacementCost ?? this.newReplacementCost,
        retail: retail ?? this.retail,
        newRetail: newRetail ?? this.newRetail,
        minDaysPerWeek: minDaysPerWeek ?? this.minDaysPerWeek,
        newMinDaysPerWeek: newMinDaysPerWeek ?? this.newMinDaysPerWeek,
        currencyId: currencyId ?? this.currencyId,
        currency: currency ?? this.currency,
        currencySymbol: currencySymbol ?? this.currencySymbol,
        currencyCode: currencyCode ?? this.currencyCode,
        isForeignCurrency: isForeignCurrency ?? this.isForeignCurrency,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesRateUpdateItemRateUpdateItem copyWithWrapped(
      {Wrapped<String?>? inventoryId,
      Wrapped<String?>? warehouseId,
      Wrapped<String?>? description,
      Wrapped<String?>? iCode,
      Wrapped<String?>? warehouseCode,
      Wrapped<String?>? warehouse,
      Wrapped<String?>? availableFor,
      Wrapped<String?>? rank,
      Wrapped<String?>? classification,
      Wrapped<String?>? inventoryTypeId,
      Wrapped<String?>? inventoryType,
      Wrapped<String?>? categoryId,
      Wrapped<String?>? category,
      Wrapped<String?>? subCategoryId,
      Wrapped<String?>? subCategory,
      Wrapped<String?>? unitId,
      Wrapped<String?>? partNumber,
      Wrapped<String?>? manufacturerId,
      Wrapped<String?>? manufacturer,
      Wrapped<double?>? cost,
      Wrapped<double?>? newCost,
      Wrapped<double?>? defaultCost,
      Wrapped<double?>? newDefaultCost,
      Wrapped<double?>? price,
      Wrapped<double?>? newPrice,
      Wrapped<double?>? hourlyRate,
      Wrapped<double?>? dailyRate,
      Wrapped<double?>? weeklyRate,
      Wrapped<double?>? monthlyRate,
      Wrapped<double?>? newHourlyRate,
      Wrapped<double?>? newDailyRate,
      Wrapped<double?>? newWeeklyRate,
      Wrapped<double?>? newMonthlyRate,
      Wrapped<double?>? week2Rate,
      Wrapped<double?>? week3Rate,
      Wrapped<double?>? week4Rate,
      Wrapped<double?>? week5Rate,
      Wrapped<double?>? newWeek2Rate,
      Wrapped<double?>? newWeek3Rate,
      Wrapped<double?>? newWeek4Rate,
      Wrapped<double?>? newWeek5Rate,
      Wrapped<double?>? maxDiscount,
      Wrapped<double?>? newMaxDiscount,
      Wrapped<double?>? hourlyCost,
      Wrapped<double?>? newHourlyCost,
      Wrapped<double?>? dailyCost,
      Wrapped<double?>? newDailyCost,
      Wrapped<double?>? weeklyCost,
      Wrapped<double?>? newWeeklyCost,
      Wrapped<double?>? monthlyCost,
      Wrapped<double?>? newMonthlyCost,
      Wrapped<double?>? unitValue,
      Wrapped<double?>? newUnitValue,
      Wrapped<double?>? replacementCost,
      Wrapped<double?>? newReplacementCost,
      Wrapped<double?>? retail,
      Wrapped<double?>? newRetail,
      Wrapped<double?>? minDaysPerWeek,
      Wrapped<double?>? newMinDaysPerWeek,
      Wrapped<String?>? currencyId,
      Wrapped<String?>? currency,
      Wrapped<String?>? currencySymbol,
      Wrapped<String?>? currencyCode,
      Wrapped<bool?>? isForeignCurrency,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesUtilitiesRateUpdateItemRateUpdateItem(
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        description:
            (description != null ? description.value : this.description),
        iCode: (iCode != null ? iCode.value : this.iCode),
        warehouseCode:
            (warehouseCode != null ? warehouseCode.value : this.warehouseCode),
        warehouse: (warehouse != null ? warehouse.value : this.warehouse),
        availableFor:
            (availableFor != null ? availableFor.value : this.availableFor),
        rank: (rank != null ? rank.value : this.rank),
        classification: (classification != null
            ? classification.value
            : this.classification),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        inventoryType:
            (inventoryType != null ? inventoryType.value : this.inventoryType),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        category: (category != null ? category.value : this.category),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        subCategory:
            (subCategory != null ? subCategory.value : this.subCategory),
        unitId: (unitId != null ? unitId.value : this.unitId),
        partNumber: (partNumber != null ? partNumber.value : this.partNumber),
        manufacturerId: (manufacturerId != null
            ? manufacturerId.value
            : this.manufacturerId),
        manufacturer:
            (manufacturer != null ? manufacturer.value : this.manufacturer),
        cost: (cost != null ? cost.value : this.cost),
        newCost: (newCost != null ? newCost.value : this.newCost),
        defaultCost:
            (defaultCost != null ? defaultCost.value : this.defaultCost),
        newDefaultCost: (newDefaultCost != null
            ? newDefaultCost.value
            : this.newDefaultCost),
        price: (price != null ? price.value : this.price),
        newPrice: (newPrice != null ? newPrice.value : this.newPrice),
        hourlyRate: (hourlyRate != null ? hourlyRate.value : this.hourlyRate),
        dailyRate: (dailyRate != null ? dailyRate.value : this.dailyRate),
        weeklyRate: (weeklyRate != null ? weeklyRate.value : this.weeklyRate),
        monthlyRate:
            (monthlyRate != null ? monthlyRate.value : this.monthlyRate),
        newHourlyRate:
            (newHourlyRate != null ? newHourlyRate.value : this.newHourlyRate),
        newDailyRate:
            (newDailyRate != null ? newDailyRate.value : this.newDailyRate),
        newWeeklyRate:
            (newWeeklyRate != null ? newWeeklyRate.value : this.newWeeklyRate),
        newMonthlyRate: (newMonthlyRate != null
            ? newMonthlyRate.value
            : this.newMonthlyRate),
        week2Rate: (week2Rate != null ? week2Rate.value : this.week2Rate),
        week3Rate: (week3Rate != null ? week3Rate.value : this.week3Rate),
        week4Rate: (week4Rate != null ? week4Rate.value : this.week4Rate),
        week5Rate: (week5Rate != null ? week5Rate.value : this.week5Rate),
        newWeek2Rate:
            (newWeek2Rate != null ? newWeek2Rate.value : this.newWeek2Rate),
        newWeek3Rate:
            (newWeek3Rate != null ? newWeek3Rate.value : this.newWeek3Rate),
        newWeek4Rate:
            (newWeek4Rate != null ? newWeek4Rate.value : this.newWeek4Rate),
        newWeek5Rate:
            (newWeek5Rate != null ? newWeek5Rate.value : this.newWeek5Rate),
        maxDiscount:
            (maxDiscount != null ? maxDiscount.value : this.maxDiscount),
        newMaxDiscount: (newMaxDiscount != null
            ? newMaxDiscount.value
            : this.newMaxDiscount),
        hourlyCost: (hourlyCost != null ? hourlyCost.value : this.hourlyCost),
        newHourlyCost:
            (newHourlyCost != null ? newHourlyCost.value : this.newHourlyCost),
        dailyCost: (dailyCost != null ? dailyCost.value : this.dailyCost),
        newDailyCost:
            (newDailyCost != null ? newDailyCost.value : this.newDailyCost),
        weeklyCost: (weeklyCost != null ? weeklyCost.value : this.weeklyCost),
        newWeeklyCost:
            (newWeeklyCost != null ? newWeeklyCost.value : this.newWeeklyCost),
        monthlyCost:
            (monthlyCost != null ? monthlyCost.value : this.monthlyCost),
        newMonthlyCost: (newMonthlyCost != null
            ? newMonthlyCost.value
            : this.newMonthlyCost),
        unitValue: (unitValue != null ? unitValue.value : this.unitValue),
        newUnitValue:
            (newUnitValue != null ? newUnitValue.value : this.newUnitValue),
        replacementCost: (replacementCost != null
            ? replacementCost.value
            : this.replacementCost),
        newReplacementCost: (newReplacementCost != null
            ? newReplacementCost.value
            : this.newReplacementCost),
        retail: (retail != null ? retail.value : this.retail),
        newRetail: (newRetail != null ? newRetail.value : this.newRetail),
        minDaysPerWeek: (minDaysPerWeek != null
            ? minDaysPerWeek.value
            : this.minDaysPerWeek),
        newMinDaysPerWeek: (newMinDaysPerWeek != null
            ? newMinDaysPerWeek.value
            : this.newMinDaysPerWeek),
        currencyId: (currencyId != null ? currencyId.value : this.currencyId),
        currency: (currency != null ? currency.value : this.currency),
        currencySymbol: (currencySymbol != null
            ? currencySymbol.value
            : this.currencySymbol),
        currencyCode:
            (currencyCode != null ? currencyCode.value : this.currencyCode),
        isForeignCurrency: (isForeignCurrency != null
            ? isForeignCurrency.value
            : this.isForeignCurrency),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch {
  WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch({
    this.batchId,
    this.locationId,
    this.batchType,
    this.divisionCode,
    this.batchNumber,
    this.batchDate,
    this.batchTime,
    this.batchDateTime,
    this.exportDate,
    this.exported,
    this.recordCount,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchFromJson(
          json);

  @JsonKey(name: 'BatchId', includeIfNull: false)
  final String? batchId;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'BatchType', includeIfNull: false)
  final String? batchType;
  @JsonKey(name: 'DivisionCode', includeIfNull: false)
  final String? divisionCode;
  @JsonKey(name: 'BatchNumber', includeIfNull: false)
  final String? batchNumber;
  @JsonKey(name: 'BatchDate', includeIfNull: false)
  final String? batchDate;
  @JsonKey(name: 'BatchTime', includeIfNull: false)
  final String? batchTime;
  @JsonKey(name: 'BatchDateTime', includeIfNull: false)
  final String? batchDateTime;
  @JsonKey(name: 'ExportDate', includeIfNull: false)
  final String? exportDate;
  @JsonKey(name: 'Exported', includeIfNull: false)
  final bool? exported;
  @JsonKey(name: 'RecordCount', includeIfNull: false)
  final int? recordCount;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch &&
            (identical(other.batchId, batchId) ||
                const DeepCollectionEquality()
                    .equals(other.batchId, batchId)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.batchType, batchType) ||
                const DeepCollectionEquality()
                    .equals(other.batchType, batchType)) &&
            (identical(other.divisionCode, divisionCode) ||
                const DeepCollectionEquality()
                    .equals(other.divisionCode, divisionCode)) &&
            (identical(other.batchNumber, batchNumber) ||
                const DeepCollectionEquality()
                    .equals(other.batchNumber, batchNumber)) &&
            (identical(other.batchDate, batchDate) ||
                const DeepCollectionEquality()
                    .equals(other.batchDate, batchDate)) &&
            (identical(other.batchTime, batchTime) ||
                const DeepCollectionEquality()
                    .equals(other.batchTime, batchTime)) &&
            (identical(other.batchDateTime, batchDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.batchDateTime, batchDateTime)) &&
            (identical(other.exportDate, exportDate) ||
                const DeepCollectionEquality()
                    .equals(other.exportDate, exportDate)) &&
            (identical(other.exported, exported) ||
                const DeepCollectionEquality()
                    .equals(other.exported, exported)) &&
            (identical(other.recordCount, recordCount) ||
                const DeepCollectionEquality()
                    .equals(other.recordCount, recordCount)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality()
                    .equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batchId) ^
      const DeepCollectionEquality().hash(locationId) ^
      const DeepCollectionEquality().hash(batchType) ^
      const DeepCollectionEquality().hash(divisionCode) ^
      const DeepCollectionEquality().hash(batchNumber) ^
      const DeepCollectionEquality().hash(batchDate) ^
      const DeepCollectionEquality().hash(batchTime) ^
      const DeepCollectionEquality().hash(batchDateTime) ^
      const DeepCollectionEquality().hash(exportDate) ^
      const DeepCollectionEquality().hash(exported) ^
      const DeepCollectionEquality().hash(recordCount) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchExtension
    on WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch {
  WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch copyWith(
      {String? batchId,
      String? locationId,
      String? batchType,
      String? divisionCode,
      String? batchNumber,
      String? batchDate,
      String? batchTime,
      String? batchDateTime,
      String? exportDate,
      bool? exported,
      int? recordCount,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch(
        batchId: batchId ?? this.batchId,
        locationId: locationId ?? this.locationId,
        batchType: batchType ?? this.batchType,
        divisionCode: divisionCode ?? this.divisionCode,
        batchNumber: batchNumber ?? this.batchNumber,
        batchDate: batchDate ?? this.batchDate,
        batchTime: batchTime ?? this.batchTime,
        batchDateTime: batchDateTime ?? this.batchDateTime,
        exportDate: exportDate ?? this.exportDate,
        exported: exported ?? this.exported,
        recordCount: recordCount ?? this.recordCount,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch copyWithWrapped(
      {Wrapped<String?>? batchId,
      Wrapped<String?>? locationId,
      Wrapped<String?>? batchType,
      Wrapped<String?>? divisionCode,
      Wrapped<String?>? batchNumber,
      Wrapped<String?>? batchDate,
      Wrapped<String?>? batchTime,
      Wrapped<String?>? batchDateTime,
      Wrapped<String?>? exportDate,
      Wrapped<bool?>? exported,
      Wrapped<int?>? recordCount,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch(
        batchId: (batchId != null ? batchId.value : this.batchId),
        locationId: (locationId != null ? locationId.value : this.locationId),
        batchType: (batchType != null ? batchType.value : this.batchType),
        divisionCode:
            (divisionCode != null ? divisionCode.value : this.divisionCode),
        batchNumber:
            (batchNumber != null ? batchNumber.value : this.batchNumber),
        batchDate: (batchDate != null ? batchDate.value : this.batchDate),
        batchTime: (batchTime != null ? batchTime.value : this.batchTime),
        batchDateTime:
            (batchDateTime != null ? batchDateTime.value : this.batchDateTime),
        exportDate: (exportDate != null ? exportDate.value : this.exportDate),
        exported: (exported != null ? exported.value : this.exported),
        recordCount:
            (recordCount != null ? recordCount.value : this.recordCount),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequest {
  WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequest({
    this.officeLocationId,
    this.fromDate,
    this.toDate,
  });

  factory WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequestFromJson(
          json);

  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequest &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequestExtension
    on WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequest {
  WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequest copyWith(
      {String? officeLocationId, DateTime? fromDate, DateTime? toDate}) {
    return WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequest(
        officeLocationId: officeLocationId ?? this.officeLocationId,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate);
  }

  WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequest
      copyWithWrapped(
          {Wrapped<String?>? officeLocationId,
          Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate}) {
    return WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchRequest(
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse {
  WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse({
    this.batch,
    this.status,
    this.success,
    this.msg,
  });

  factory WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponseFromJson(
          json);

  @JsonKey(name: 'Batch', includeIfNull: false)
  final WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch? batch;
  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse &&
            (identical(other.batch, batch) ||
                const DeepCollectionEquality().equals(other.batch, batch)) &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batch) ^
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponseExtension
    on WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse {
  WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse copyWith(
      {WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch? batch,
      int? status,
      bool? success,
      String? msg}) {
    return WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse(
        batch: batch ?? this.batch,
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg);
  }

  WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse
      copyWithWrapped(
          {Wrapped<
                  WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatch?>?
              batch,
          Wrapped<int?>? status,
          Wrapped<bool?>? success,
          Wrapped<String?>? msg}) {
    return WebApiModulesUtilitiesReceiptProcessBatchReceiptProcessBatchResponse(
        batch: (batch != null ? batch.value : this.batch),
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesUserProfileUserProfile {
  WebApiModulesUtilitiesUserProfileUserProfile({
    this.webUserId,
    this.userName,
    this.userId,
    this.loginName,
    this.browseDefaultRows,
    this.applicationTheme,
    this.homeMenuGuid,
    this.homeMenuPath,
    this.successSoundId,
    this.successSound,
    this.successBase64Sound,
    this.errorSoundId,
    this.errorSound,
    this.errorBase64Sound,
    this.notificationSoundId,
    this.notificationSound,
    this.notificationBase64Sound,
    this.favoritesJson,
    this.firstDayOfWeek,
    this.settingsNavigationMenuVisible,
    this.reportsNavigationMenuVisible,
    this.mainMenuPinned,
    this.webAdministrator,
    this.quikActivitySetting,
    this.emailSignature,
    this.newPassword,
    this.oldPassword,
    this.locale,
    this.availabilityPreference,
    this.availabilityAllWarehouses,
    this.emailApp,
    this.addRentalWorksUserSignature,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesUserProfileUserProfile.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesUserProfileUserProfileFromJson(json);

  @JsonKey(name: 'WebUserId', includeIfNull: false)
  final String? webUserId;
  @JsonKey(name: 'UserName', includeIfNull: false)
  final String? userName;
  @JsonKey(name: 'UserId', includeIfNull: false)
  final String? userId;
  @JsonKey(name: 'LoginName', includeIfNull: false)
  final String? loginName;
  @JsonKey(name: 'BrowseDefaultRows', includeIfNull: false)
  final int? browseDefaultRows;
  @JsonKey(name: 'ApplicationTheme', includeIfNull: false)
  final String? applicationTheme;
  @JsonKey(name: 'HomeMenuGuid', includeIfNull: false)
  final String? homeMenuGuid;
  @JsonKey(name: 'HomeMenuPath', includeIfNull: false)
  final String? homeMenuPath;
  @JsonKey(name: 'SuccessSoundId', includeIfNull: false)
  final String? successSoundId;
  @JsonKey(name: 'SuccessSound', includeIfNull: false)
  final String? successSound;
  @JsonKey(name: 'SuccessBase64Sound', includeIfNull: false)
  final String? successBase64Sound;
  @JsonKey(name: 'ErrorSoundId', includeIfNull: false)
  final String? errorSoundId;
  @JsonKey(name: 'ErrorSound', includeIfNull: false)
  final String? errorSound;
  @JsonKey(name: 'ErrorBase64Sound', includeIfNull: false)
  final String? errorBase64Sound;
  @JsonKey(name: 'NotificationSoundId', includeIfNull: false)
  final String? notificationSoundId;
  @JsonKey(name: 'NotificationSound', includeIfNull: false)
  final String? notificationSound;
  @JsonKey(name: 'NotificationBase64Sound', includeIfNull: false)
  final String? notificationBase64Sound;
  @JsonKey(name: 'FavoritesJson', includeIfNull: false)
  final String? favoritesJson;
  @JsonKey(name: 'FirstDayOfWeek', includeIfNull: false)
  final int? firstDayOfWeek;
  @JsonKey(name: 'SettingsNavigationMenuVisible', includeIfNull: false)
  final bool? settingsNavigationMenuVisible;
  @JsonKey(name: 'ReportsNavigationMenuVisible', includeIfNull: false)
  final bool? reportsNavigationMenuVisible;
  @JsonKey(name: 'MainMenuPinned', includeIfNull: false)
  final bool? mainMenuPinned;
  @JsonKey(name: 'WebAdministrator', includeIfNull: false)
  final bool? webAdministrator;
  @JsonKey(name: 'QuikActivitySetting', includeIfNull: false)
  final String? quikActivitySetting;
  @JsonKey(name: 'EmailSignature', includeIfNull: false)
  final String? emailSignature;
  @JsonKey(name: 'NewPassword', includeIfNull: false)
  final String? newPassword;
  @JsonKey(name: 'OldPassword', includeIfNull: false)
  final String? oldPassword;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(name: 'AvailabilityPreference', includeIfNull: false)
  final String? availabilityPreference;
  @JsonKey(name: 'AvailabilityAllWarehouses', includeIfNull: false)
  final bool? availabilityAllWarehouses;
  @JsonKey(name: 'EmailApp', includeIfNull: false)
  final String? emailApp;
  @JsonKey(name: 'AddRentalWorksUserSignature', includeIfNull: false)
  final bool? addRentalWorksUserSignature;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesUserProfileUserProfileFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesUserProfileUserProfileToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesUserProfileUserProfileToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesUserProfileUserProfile &&
            (identical(other.webUserId, webUserId) ||
                const DeepCollectionEquality()
                    .equals(other.webUserId, webUserId)) &&
            (identical(other.userName, userName) ||
                const DeepCollectionEquality()
                    .equals(other.userName, userName)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.loginName, loginName) ||
                const DeepCollectionEquality()
                    .equals(other.loginName, loginName)) &&
            (identical(other.browseDefaultRows, browseDefaultRows) ||
                const DeepCollectionEquality()
                    .equals(other.browseDefaultRows, browseDefaultRows)) &&
            (identical(other.applicationTheme, applicationTheme) ||
                const DeepCollectionEquality()
                    .equals(other.applicationTheme, applicationTheme)) &&
            (identical(other.homeMenuGuid, homeMenuGuid) ||
                const DeepCollectionEquality()
                    .equals(other.homeMenuGuid, homeMenuGuid)) &&
            (identical(other.homeMenuPath, homeMenuPath) ||
                const DeepCollectionEquality()
                    .equals(other.homeMenuPath, homeMenuPath)) &&
            (identical(other.successSoundId, successSoundId) ||
                const DeepCollectionEquality()
                    .equals(other.successSoundId, successSoundId)) &&
            (identical(other.successSound, successSound) ||
                const DeepCollectionEquality()
                    .equals(other.successSound, successSound)) &&
            (identical(other.successBase64Sound, successBase64Sound) ||
                const DeepCollectionEquality()
                    .equals(other.successBase64Sound, successBase64Sound)) &&
            (identical(other.errorSoundId, errorSoundId) ||
                const DeepCollectionEquality()
                    .equals(other.errorSoundId, errorSoundId)) &&
            (identical(other.errorSound, errorSound) ||
                const DeepCollectionEquality()
                    .equals(other.errorSound, errorSound)) &&
            (identical(other.errorBase64Sound, errorBase64Sound) ||
                const DeepCollectionEquality()
                    .equals(other.errorBase64Sound, errorBase64Sound)) &&
            (identical(other.notificationSoundId, notificationSoundId) ||
                const DeepCollectionEquality()
                    .equals(other.notificationSoundId, notificationSoundId)) &&
            (identical(other.notificationSound, notificationSound) ||
                const DeepCollectionEquality()
                    .equals(other.notificationSound, notificationSound)) &&
            (identical(other.notificationBase64Sound, notificationBase64Sound) ||
                const DeepCollectionEquality().equals(
                    other.notificationBase64Sound, notificationBase64Sound)) &&
            (identical(other.favoritesJson, favoritesJson) ||
                const DeepCollectionEquality()
                    .equals(other.favoritesJson, favoritesJson)) &&
            (identical(other.firstDayOfWeek, firstDayOfWeek) ||
                const DeepCollectionEquality()
                    .equals(other.firstDayOfWeek, firstDayOfWeek)) &&
            (identical(other.settingsNavigationMenuVisible, settingsNavigationMenuVisible) ||
                const DeepCollectionEquality().equals(
                    other.settingsNavigationMenuVisible,
                    settingsNavigationMenuVisible)) &&
            (identical(other.reportsNavigationMenuVisible, reportsNavigationMenuVisible) ||
                const DeepCollectionEquality().equals(other.reportsNavigationMenuVisible, reportsNavigationMenuVisible)) &&
            (identical(other.mainMenuPinned, mainMenuPinned) || const DeepCollectionEquality().equals(other.mainMenuPinned, mainMenuPinned)) &&
            (identical(other.webAdministrator, webAdministrator) || const DeepCollectionEquality().equals(other.webAdministrator, webAdministrator)) &&
            (identical(other.quikActivitySetting, quikActivitySetting) || const DeepCollectionEquality().equals(other.quikActivitySetting, quikActivitySetting)) &&
            (identical(other.emailSignature, emailSignature) || const DeepCollectionEquality().equals(other.emailSignature, emailSignature)) &&
            (identical(other.newPassword, newPassword) || const DeepCollectionEquality().equals(other.newPassword, newPassword)) &&
            (identical(other.oldPassword, oldPassword) || const DeepCollectionEquality().equals(other.oldPassword, oldPassword)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.availabilityPreference, availabilityPreference) || const DeepCollectionEquality().equals(other.availabilityPreference, availabilityPreference)) &&
            (identical(other.availabilityAllWarehouses, availabilityAllWarehouses) || const DeepCollectionEquality().equals(other.availabilityAllWarehouses, availabilityAllWarehouses)) &&
            (identical(other.emailApp, emailApp) || const DeepCollectionEquality().equals(other.emailApp, emailApp)) &&
            (identical(other.addRentalWorksUserSignature, addRentalWorksUserSignature) || const DeepCollectionEquality().equals(other.addRentalWorksUserSignature, addRentalWorksUserSignature)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) || const DeepCollectionEquality().equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(webUserId) ^
      const DeepCollectionEquality().hash(userName) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(loginName) ^
      const DeepCollectionEquality().hash(browseDefaultRows) ^
      const DeepCollectionEquality().hash(applicationTheme) ^
      const DeepCollectionEquality().hash(homeMenuGuid) ^
      const DeepCollectionEquality().hash(homeMenuPath) ^
      const DeepCollectionEquality().hash(successSoundId) ^
      const DeepCollectionEquality().hash(successSound) ^
      const DeepCollectionEquality().hash(successBase64Sound) ^
      const DeepCollectionEquality().hash(errorSoundId) ^
      const DeepCollectionEquality().hash(errorSound) ^
      const DeepCollectionEquality().hash(errorBase64Sound) ^
      const DeepCollectionEquality().hash(notificationSoundId) ^
      const DeepCollectionEquality().hash(notificationSound) ^
      const DeepCollectionEquality().hash(notificationBase64Sound) ^
      const DeepCollectionEquality().hash(favoritesJson) ^
      const DeepCollectionEquality().hash(firstDayOfWeek) ^
      const DeepCollectionEquality().hash(settingsNavigationMenuVisible) ^
      const DeepCollectionEquality().hash(reportsNavigationMenuVisible) ^
      const DeepCollectionEquality().hash(mainMenuPinned) ^
      const DeepCollectionEquality().hash(webAdministrator) ^
      const DeepCollectionEquality().hash(quikActivitySetting) ^
      const DeepCollectionEquality().hash(emailSignature) ^
      const DeepCollectionEquality().hash(newPassword) ^
      const DeepCollectionEquality().hash(oldPassword) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(availabilityPreference) ^
      const DeepCollectionEquality().hash(availabilityAllWarehouses) ^
      const DeepCollectionEquality().hash(emailApp) ^
      const DeepCollectionEquality().hash(addRentalWorksUserSignature) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesUserProfileUserProfileExtension
    on WebApiModulesUtilitiesUserProfileUserProfile {
  WebApiModulesUtilitiesUserProfileUserProfile copyWith(
      {String? webUserId,
      String? userName,
      String? userId,
      String? loginName,
      int? browseDefaultRows,
      String? applicationTheme,
      String? homeMenuGuid,
      String? homeMenuPath,
      String? successSoundId,
      String? successSound,
      String? successBase64Sound,
      String? errorSoundId,
      String? errorSound,
      String? errorBase64Sound,
      String? notificationSoundId,
      String? notificationSound,
      String? notificationBase64Sound,
      String? favoritesJson,
      int? firstDayOfWeek,
      bool? settingsNavigationMenuVisible,
      bool? reportsNavigationMenuVisible,
      bool? mainMenuPinned,
      bool? webAdministrator,
      String? quikActivitySetting,
      String? emailSignature,
      String? newPassword,
      String? oldPassword,
      String? locale,
      String? availabilityPreference,
      bool? availabilityAllWarehouses,
      String? emailApp,
      bool? addRentalWorksUserSignature,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesUserProfileUserProfile(
        webUserId: webUserId ?? this.webUserId,
        userName: userName ?? this.userName,
        userId: userId ?? this.userId,
        loginName: loginName ?? this.loginName,
        browseDefaultRows: browseDefaultRows ?? this.browseDefaultRows,
        applicationTheme: applicationTheme ?? this.applicationTheme,
        homeMenuGuid: homeMenuGuid ?? this.homeMenuGuid,
        homeMenuPath: homeMenuPath ?? this.homeMenuPath,
        successSoundId: successSoundId ?? this.successSoundId,
        successSound: successSound ?? this.successSound,
        successBase64Sound: successBase64Sound ?? this.successBase64Sound,
        errorSoundId: errorSoundId ?? this.errorSoundId,
        errorSound: errorSound ?? this.errorSound,
        errorBase64Sound: errorBase64Sound ?? this.errorBase64Sound,
        notificationSoundId: notificationSoundId ?? this.notificationSoundId,
        notificationSound: notificationSound ?? this.notificationSound,
        notificationBase64Sound:
            notificationBase64Sound ?? this.notificationBase64Sound,
        favoritesJson: favoritesJson ?? this.favoritesJson,
        firstDayOfWeek: firstDayOfWeek ?? this.firstDayOfWeek,
        settingsNavigationMenuVisible:
            settingsNavigationMenuVisible ?? this.settingsNavigationMenuVisible,
        reportsNavigationMenuVisible:
            reportsNavigationMenuVisible ?? this.reportsNavigationMenuVisible,
        mainMenuPinned: mainMenuPinned ?? this.mainMenuPinned,
        webAdministrator: webAdministrator ?? this.webAdministrator,
        quikActivitySetting: quikActivitySetting ?? this.quikActivitySetting,
        emailSignature: emailSignature ?? this.emailSignature,
        newPassword: newPassword ?? this.newPassword,
        oldPassword: oldPassword ?? this.oldPassword,
        locale: locale ?? this.locale,
        availabilityPreference:
            availabilityPreference ?? this.availabilityPreference,
        availabilityAllWarehouses:
            availabilityAllWarehouses ?? this.availabilityAllWarehouses,
        emailApp: emailApp ?? this.emailApp,
        addRentalWorksUserSignature:
            addRentalWorksUserSignature ?? this.addRentalWorksUserSignature,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesUserProfileUserProfile copyWithWrapped(
      {Wrapped<String?>? webUserId,
      Wrapped<String?>? userName,
      Wrapped<String?>? userId,
      Wrapped<String?>? loginName,
      Wrapped<int?>? browseDefaultRows,
      Wrapped<String?>? applicationTheme,
      Wrapped<String?>? homeMenuGuid,
      Wrapped<String?>? homeMenuPath,
      Wrapped<String?>? successSoundId,
      Wrapped<String?>? successSound,
      Wrapped<String?>? successBase64Sound,
      Wrapped<String?>? errorSoundId,
      Wrapped<String?>? errorSound,
      Wrapped<String?>? errorBase64Sound,
      Wrapped<String?>? notificationSoundId,
      Wrapped<String?>? notificationSound,
      Wrapped<String?>? notificationBase64Sound,
      Wrapped<String?>? favoritesJson,
      Wrapped<int?>? firstDayOfWeek,
      Wrapped<bool?>? settingsNavigationMenuVisible,
      Wrapped<bool?>? reportsNavigationMenuVisible,
      Wrapped<bool?>? mainMenuPinned,
      Wrapped<bool?>? webAdministrator,
      Wrapped<String?>? quikActivitySetting,
      Wrapped<String?>? emailSignature,
      Wrapped<String?>? newPassword,
      Wrapped<String?>? oldPassword,
      Wrapped<String?>? locale,
      Wrapped<String?>? availabilityPreference,
      Wrapped<bool?>? availabilityAllWarehouses,
      Wrapped<String?>? emailApp,
      Wrapped<bool?>? addRentalWorksUserSignature,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesUtilitiesUserProfileUserProfile(
        webUserId: (webUserId != null ? webUserId.value : this.webUserId),
        userName: (userName != null ? userName.value : this.userName),
        userId: (userId != null ? userId.value : this.userId),
        loginName: (loginName != null ? loginName.value : this.loginName),
        browseDefaultRows: (browseDefaultRows != null
            ? browseDefaultRows.value
            : this.browseDefaultRows),
        applicationTheme: (applicationTheme != null
            ? applicationTheme.value
            : this.applicationTheme),
        homeMenuGuid:
            (homeMenuGuid != null ? homeMenuGuid.value : this.homeMenuGuid),
        homeMenuPath:
            (homeMenuPath != null ? homeMenuPath.value : this.homeMenuPath),
        successSoundId: (successSoundId != null
            ? successSoundId.value
            : this.successSoundId),
        successSound:
            (successSound != null ? successSound.value : this.successSound),
        successBase64Sound: (successBase64Sound != null
            ? successBase64Sound.value
            : this.successBase64Sound),
        errorSoundId:
            (errorSoundId != null ? errorSoundId.value : this.errorSoundId),
        errorSound: (errorSound != null ? errorSound.value : this.errorSound),
        errorBase64Sound: (errorBase64Sound != null
            ? errorBase64Sound.value
            : this.errorBase64Sound),
        notificationSoundId: (notificationSoundId != null
            ? notificationSoundId.value
            : this.notificationSoundId),
        notificationSound: (notificationSound != null
            ? notificationSound.value
            : this.notificationSound),
        notificationBase64Sound: (notificationBase64Sound != null
            ? notificationBase64Sound.value
            : this.notificationBase64Sound),
        favoritesJson:
            (favoritesJson != null ? favoritesJson.value : this.favoritesJson),
        firstDayOfWeek: (firstDayOfWeek != null
            ? firstDayOfWeek.value
            : this.firstDayOfWeek),
        settingsNavigationMenuVisible: (settingsNavigationMenuVisible != null
            ? settingsNavigationMenuVisible.value
            : this.settingsNavigationMenuVisible),
        reportsNavigationMenuVisible: (reportsNavigationMenuVisible != null
            ? reportsNavigationMenuVisible.value
            : this.reportsNavigationMenuVisible),
        mainMenuPinned: (mainMenuPinned != null
            ? mainMenuPinned.value
            : this.mainMenuPinned),
        webAdministrator: (webAdministrator != null
            ? webAdministrator.value
            : this.webAdministrator),
        quikActivitySetting: (quikActivitySetting != null
            ? quikActivitySetting.value
            : this.quikActivitySetting),
        emailSignature: (emailSignature != null
            ? emailSignature.value
            : this.emailSignature),
        newPassword:
            (newPassword != null ? newPassword.value : this.newPassword),
        oldPassword:
            (oldPassword != null ? oldPassword.value : this.oldPassword),
        locale: (locale != null ? locale.value : this.locale),
        availabilityPreference: (availabilityPreference != null
            ? availabilityPreference.value
            : this.availabilityPreference),
        availabilityAllWarehouses: (availabilityAllWarehouses != null
            ? availabilityAllWarehouses.value
            : this.availabilityAllWarehouses),
        emailApp: (emailApp != null ? emailApp.value : this.emailApp),
        addRentalWorksUserSignature: (addRentalWorksUserSignature != null
            ? addRentalWorksUserSignature.value
            : this.addRentalWorksUserSignature),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch {
  WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch({
    this.batchId,
    this.locationId,
    this.batchType,
    this.divisionCode,
    this.batchNumber,
    this.batchDate,
    this.batchTime,
    this.batchDateTime,
    this.exportDate,
    this.exported,
    this.recordCount,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchFromJson(
          json);

  @JsonKey(name: 'BatchId', includeIfNull: false)
  final String? batchId;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'BatchType', includeIfNull: false)
  final String? batchType;
  @JsonKey(name: 'DivisionCode', includeIfNull: false)
  final String? divisionCode;
  @JsonKey(name: 'BatchNumber', includeIfNull: false)
  final String? batchNumber;
  @JsonKey(name: 'BatchDate', includeIfNull: false)
  final String? batchDate;
  @JsonKey(name: 'BatchTime', includeIfNull: false)
  final String? batchTime;
  @JsonKey(name: 'BatchDateTime', includeIfNull: false)
  final String? batchDateTime;
  @JsonKey(name: 'ExportDate', includeIfNull: false)
  final String? exportDate;
  @JsonKey(name: 'Exported', includeIfNull: false)
  final bool? exported;
  @JsonKey(name: 'RecordCount', includeIfNull: false)
  final int? recordCount;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch &&
            (identical(other.batchId, batchId) ||
                const DeepCollectionEquality()
                    .equals(other.batchId, batchId)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.batchType, batchType) ||
                const DeepCollectionEquality()
                    .equals(other.batchType, batchType)) &&
            (identical(other.divisionCode, divisionCode) ||
                const DeepCollectionEquality()
                    .equals(other.divisionCode, divisionCode)) &&
            (identical(other.batchNumber, batchNumber) ||
                const DeepCollectionEquality()
                    .equals(other.batchNumber, batchNumber)) &&
            (identical(other.batchDate, batchDate) ||
                const DeepCollectionEquality()
                    .equals(other.batchDate, batchDate)) &&
            (identical(other.batchTime, batchTime) ||
                const DeepCollectionEquality()
                    .equals(other.batchTime, batchTime)) &&
            (identical(other.batchDateTime, batchDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.batchDateTime, batchDateTime)) &&
            (identical(other.exportDate, exportDate) ||
                const DeepCollectionEquality()
                    .equals(other.exportDate, exportDate)) &&
            (identical(other.exported, exported) ||
                const DeepCollectionEquality()
                    .equals(other.exported, exported)) &&
            (identical(other.recordCount, recordCount) ||
                const DeepCollectionEquality()
                    .equals(other.recordCount, recordCount)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality()
                    .equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batchId) ^
      const DeepCollectionEquality().hash(locationId) ^
      const DeepCollectionEquality().hash(batchType) ^
      const DeepCollectionEquality().hash(divisionCode) ^
      const DeepCollectionEquality().hash(batchNumber) ^
      const DeepCollectionEquality().hash(batchDate) ^
      const DeepCollectionEquality().hash(batchTime) ^
      const DeepCollectionEquality().hash(batchDateTime) ^
      const DeepCollectionEquality().hash(exportDate) ^
      const DeepCollectionEquality().hash(exported) ^
      const DeepCollectionEquality().hash(recordCount) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchExtension
    on WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch {
  WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch
      copyWith(
          {String? batchId,
          String? locationId,
          String? batchType,
          String? divisionCode,
          String? batchNumber,
          String? batchDate,
          String? batchTime,
          String? batchDateTime,
          String? exportDate,
          bool? exported,
          int? recordCount,
          String? dateStamp,
          String? auditNote,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch(
        batchId: batchId ?? this.batchId,
        locationId: locationId ?? this.locationId,
        batchType: batchType ?? this.batchType,
        divisionCode: divisionCode ?? this.divisionCode,
        batchNumber: batchNumber ?? this.batchNumber,
        batchDate: batchDate ?? this.batchDate,
        batchTime: batchTime ?? this.batchTime,
        batchDateTime: batchDateTime ?? this.batchDateTime,
        exportDate: exportDate ?? this.exportDate,
        exported: exported ?? this.exported,
        recordCount: recordCount ?? this.recordCount,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch
      copyWithWrapped(
          {Wrapped<String?>? batchId,
          Wrapped<String?>? locationId,
          Wrapped<String?>? batchType,
          Wrapped<String?>? divisionCode,
          Wrapped<String?>? batchNumber,
          Wrapped<String?>? batchDate,
          Wrapped<String?>? batchTime,
          Wrapped<String?>? batchDateTime,
          Wrapped<String?>? exportDate,
          Wrapped<bool?>? exported,
          Wrapped<int?>? recordCount,
          Wrapped<String?>? dateStamp,
          Wrapped<String?>? auditNote,
          Wrapped<String?>? recordTitle,
          Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
              fields,
          Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
          Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
              defaultFieldAttributes}) {
    return WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch(
        batchId: (batchId != null ? batchId.value : this.batchId),
        locationId: (locationId != null ? locationId.value : this.locationId),
        batchType: (batchType != null ? batchType.value : this.batchType),
        divisionCode:
            (divisionCode != null ? divisionCode.value : this.divisionCode),
        batchNumber:
            (batchNumber != null ? batchNumber.value : this.batchNumber),
        batchDate: (batchDate != null ? batchDate.value : this.batchDate),
        batchTime: (batchTime != null ? batchTime.value : this.batchTime),
        batchDateTime:
            (batchDateTime != null ? batchDateTime.value : this.batchDateTime),
        exportDate: (exportDate != null ? exportDate.value : this.exportDate),
        exported: (exported != null ? exported.value : this.exported),
        recordCount:
            (recordCount != null ? recordCount.value : this.recordCount),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequest {
  WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequest({
    this.locationId,
  });

  factory WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequestFromJson(
          json);

  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequest &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(locationId) ^ runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequestExtension
    on WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequest {
  WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequest
      copyWith({String? locationId}) {
    return WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequest(
        locationId: locationId ?? this.locationId);
  }

  WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequest
      copyWithWrapped({Wrapped<String?>? locationId}) {
    return WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchRequest(
        locationId: (locationId != null ? locationId.value : this.locationId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse {
  WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse({
    this.status,
    this.success,
    this.msg,
    this.batch,
  });

  factory WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponseFromJson(
          json);

  @JsonKey(name: 'status', includeIfNull: false)
  final int? status;
  @JsonKey(name: 'success', includeIfNull: false)
  final bool? success;
  @JsonKey(name: 'msg', includeIfNull: false)
  final String? msg;
  @JsonKey(name: 'Batch', includeIfNull: false)
  final WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch?
      batch;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.success, success) ||
                const DeepCollectionEquality()
                    .equals(other.success, success)) &&
            (identical(other.msg, msg) ||
                const DeepCollectionEquality().equals(other.msg, msg)) &&
            (identical(other.batch, batch) ||
                const DeepCollectionEquality().equals(other.batch, batch)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(success) ^
      const DeepCollectionEquality().hash(msg) ^
      const DeepCollectionEquality().hash(batch) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponseExtension
    on WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse {
  WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse
      copyWith(
          {int? status,
          bool? success,
          String? msg,
          WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch?
              batch}) {
    return WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse(
        status: status ?? this.status,
        success: success ?? this.success,
        msg: msg ?? this.msg,
        batch: batch ?? this.batch);
  }

  WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse
      copyWithWrapped(
          {Wrapped<int?>? status,
          Wrapped<bool?>? success,
          Wrapped<String?>? msg,
          Wrapped<WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatch?>?
              batch}) {
    return WebApiModulesUtilitiesVendorInvoiceProcessBatchVendorInvoiceProcessBatchResponse(
        status: (status != null ? status.value : this.status),
        success: (success != null ? success.value : this.success),
        msg: (msg != null ? msg.value : this.msg),
        batch: (batch != null ? batch.value : this.batch));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields {
  WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields({
    this.id,
    this.webUserId,
    this.officeLocationId,
    this.moduleName,
    this.activeViewFields,
    this.dateStamp,
    this.exportFields,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsFromJson(
          json);

  @JsonKey(name: 'Id', includeIfNull: false)
  final int? id;
  @JsonKey(name: 'WebUserId', includeIfNull: false)
  final String? webUserId;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'ModuleName', includeIfNull: false)
  final String? moduleName;
  @JsonKey(name: 'ActiveViewFields', includeIfNull: false)
  final String? activeViewFields;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'ExportFields', includeIfNull: false)
  final String? exportFields;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.webUserId, webUserId) ||
                const DeepCollectionEquality()
                    .equals(other.webUserId, webUserId)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.moduleName, moduleName) ||
                const DeepCollectionEquality()
                    .equals(other.moduleName, moduleName)) &&
            (identical(other.activeViewFields, activeViewFields) ||
                const DeepCollectionEquality()
                    .equals(other.activeViewFields, activeViewFields)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.exportFields, exportFields) ||
                const DeepCollectionEquality()
                    .equals(other.exportFields, exportFields)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(id) ^
      const DeepCollectionEquality().hash(webUserId) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(moduleName) ^
      const DeepCollectionEquality().hash(activeViewFields) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(exportFields) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFieldsExtension
    on WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields {
  WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields
      copyWith(
          {int? id,
          String? webUserId,
          String? officeLocationId,
          String? moduleName,
          String? activeViewFields,
          String? dateStamp,
          String? exportFields,
          String? auditNote,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields(
        id: id ?? this.id,
        webUserId: webUserId ?? this.webUserId,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        moduleName: moduleName ?? this.moduleName,
        activeViewFields: activeViewFields ?? this.activeViewFields,
        dateStamp: dateStamp ?? this.dateStamp,
        exportFields: exportFields ?? this.exportFields,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields
      copyWithWrapped(
          {Wrapped<int?>? id,
          Wrapped<String?>? webUserId,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? moduleName,
          Wrapped<String?>? activeViewFields,
          Wrapped<String?>? dateStamp,
          Wrapped<String?>? exportFields,
          Wrapped<String?>? auditNote,
          Wrapped<String?>? recordTitle,
          Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
              fields,
          Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
          Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
              defaultFieldAttributes}) {
    return WebApiModulesUtilitiesControlsBrowseActiveViewFieldsBrowseActiveViewFields(
        id: (id != null ? id.value : this.id),
        webUserId: (webUserId != null ? webUserId.value : this.webUserId),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        moduleName: (moduleName != null ? moduleName.value : this.moduleName),
        activeViewFields: (activeViewFields != null
            ? activeViewFields.value
            : this.activeViewFields),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        exportFields:
            (exportFields != null ? exportFields.value : this.exportFields),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings {
  WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings({
    this.id,
    this.webUsersId,
    this.description,
    this.settings,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsFromJson(
          json);

  @JsonKey(name: 'Id', includeIfNull: false)
  final int? id;
  @JsonKey(name: 'WebUsersId', includeIfNull: false)
  final String? webUsersId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Settings', includeIfNull: false)
  final String? settings;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.webUsersId, webUsersId) ||
                const DeepCollectionEquality()
                    .equals(other.webUsersId, webUsersId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.settings, settings) ||
                const DeepCollectionEquality()
                    .equals(other.settings, settings)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(id) ^
      const DeepCollectionEquality().hash(webUsersId) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(settings) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettingsExtension
    on WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings {
  WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings
      copyWith(
          {int? id,
          String? webUsersId,
          String? description,
          String? settings,
          String? dateStamp,
          String? auditNote,
          String? recordTitle,
          List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings(
        id: id ?? this.id,
        webUsersId: webUsersId ?? this.webUsersId,
        description: description ?? this.description,
        settings: settings ?? this.settings,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings
      copyWithWrapped(
          {Wrapped<int?>? id,
          Wrapped<String?>? webUsersId,
          Wrapped<String?>? description,
          Wrapped<String?>? settings,
          Wrapped<String?>? dateStamp,
          Wrapped<String?>? auditNote,
          Wrapped<String?>? recordTitle,
          Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
              fields,
          Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
          Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
              defaultFieldAttributes}) {
    return WebApiModulesUtilitiesControlsQuikActivitySettingsQuikActivitySettings(
        id: (id != null ? id.value : this.id),
        webUsersId: (webUsersId != null ? webUsersId.value : this.webUsersId),
        description:
            (description != null ? description.value : this.description),
        settings: (settings != null ? settings.value : this.settings),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse {
  WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse({
    this.sessionId,
  });

  factory WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponseFromJson(
          json);

  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  static const fromJsonFactory =
      _$WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponseFromJson;
  static const toJsonFactory =
      _$WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponseToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponseToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse &&
            (identical(other.sessionId, sessionId) ||
                const DeepCollectionEquality()
                    .equals(other.sessionId, sessionId)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionId) ^ runtimeType.hashCode;
}

extension $WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponseExtension
    on WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse {
  WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse copyWith(
      {String? sessionId}) {
    return WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse(
        sessionId: sessionId ?? this.sessionId);
  }

  WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse
      copyWithWrapped({Wrapped<String?>? sessionId}) {
    return WebApiModulesUtilitiesControlsUtilityFunctionsNewSessionIdResponse(
        sessionId: (sessionId != null ? sessionId.value : this.sessionId));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesWarehouseContractContract {
  WebApiModulesWarehouseContractContract({
    this.contractId,
    this.contractNumber,
    this.contractType,
    this.contractDate,
    this.contractTime,
    this.locationId,
    this.locationCode,
    this.location,
    this.warehouseId,
    this.warehouseCode,
    this.warehouse,
    this.customerId,
    this.customer,
    this.dealId,
    this.deal,
    this.orderId,
    this.orderNumber,
    this.departmentId,
    this.department,
    this.purchaseOrderId,
    this.purchaseOrderNumber,
    this.requisitionNumber,
    this.vendorId,
    this.vendor,
    this.isMigrated,
    this.unassigned,
    this.needReconcile,
    this.pendingExchange,
    this.exchangeContractId,
    this.rental,
    this.sales,
    this.exchange,
    this.inputByUserId,
    this.inputByUser,
    this.dealInactive,
    this.truck,
    this.billingDate,
    this.billingDateChangeReason,
    this.lastBillingDateChangeReason,
    this.billingDateAdjusted,
    this.hasVoId,
    this.hasTransfer,
    this.sessionId,
    this.orderDescription,
    this.poOrderDescription,
    this.deliveryId,
    this.deliveryDeliveryType,
    this.deliveryRequiredDate,
    this.deliveryRequiredTime,
    this.deliveryTargetShipDate,
    this.deliveryTargetShipTime,
    this.deliveryDirection,
    this.deliveryAddressType,
    this.deliveryFromLocation,
    this.deliveryFromContact,
    this.deliveryFromContactPhone,
    this.deliveryFromAlternateContact,
    this.deliveryFromAlternateContactPhone,
    this.deliveryFromAttention,
    this.deliveryFromAddress1,
    this.deliveryFromAddress2,
    this.deliveryFromCity,
    this.deliveryFromState,
    this.deliveryFromZipCode,
    this.deliveryFromCountry,
    this.deliveryFromCountryCodeIsoAlpha2,
    this.deliveryFromCountryCodePhone,
    this.deliveryFromCountryId,
    this.deliveryFromCrossStreets,
    this.deliveryToLocation,
    this.deliveryToContact,
    this.deliveryToContactPhone,
    this.deliveryToAlternateContact,
    this.deliveryToAlternateContactPhone,
    this.deliveryToAttention,
    this.deliveryToAddress1,
    this.deliveryToAddress2,
    this.deliveryToCity,
    this.deliveryToState,
    this.deliveryToZipCode,
    this.deliveryToCountryId,
    this.deliveryToCountry,
    this.deliveryToCountryCodeIsoAlpha2,
    this.deliveryToCountryCodePhone,
    this.deliveryToContactFax,
    this.deliveryToCrossStreets,
    this.deliveryDeliveryNotes,
    this.deliveryCarrierId,
    this.deliveryCarrier,
    this.deliveryCarrierAccount,
    this.deliveryShipViaId,
    this.deliveryShipVia,
    this.deliveryInvoiceId,
    this.deliveryVendorInvoiceId,
    this.deliveryEstimatedFreight,
    this.deliveryFreightInvoiceAmount,
    this.deliveryChargeType,
    this.deliveryFreightTrackingNumber,
    this.deliveryFreightTrackingUrl,
    this.deliveryDropShip,
    this.deliveryPackageCode,
    this.deliveryBillPoFreightOnOrder,
    this.deliveryOnlineOrderNumber,
    this.deliveryOnlineOrderStatus,
    this.deliveryToVenue,
    this.deliveryToVenueId,
    this.deliveryDateStamp,
    this.note,
    this.printNoteOnOrder,
    this.termsConditionsId,
    this.quikReceiptTermsConditionsId,
    this.quikReceiptTermsConditions,
    this.termsConditions,
    this.containerId,
    this.containerItemId,
    this.containerDescription,
    this.containerScannableBarCode,
    this.containerScannableItemId,
    this.responsiblePersonId,
    this.responsiblePerson,
    this.responsiblePersonEmail,
    this.responsiblePersonMobilePhone,
    this.responsiblePersonOfficePhone,
    this.responsiblePersonOfficeExtension,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesWarehouseContractContract.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesWarehouseContractContractFromJson(json);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'ContractNumber', includeIfNull: false)
  final String? contractNumber;
  @JsonKey(name: 'ContractType', includeIfNull: false)
  final String? contractType;
  @JsonKey(name: 'ContractDate', includeIfNull: false)
  final String? contractDate;
  @JsonKey(name: 'ContractTime', includeIfNull: false)
  final String? contractTime;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'LocationCode', includeIfNull: false)
  final String? locationCode;
  @JsonKey(name: 'Location', includeIfNull: false)
  final String? location;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'WarehouseCode', includeIfNull: false)
  final String? warehouseCode;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'Customer', includeIfNull: false)
  final String? customer;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'Deal', includeIfNull: false)
  final String? deal;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'OrderNumber', includeIfNull: false)
  final String? orderNumber;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'Department', includeIfNull: false)
  final String? department;
  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'PurchaseOrderNumber', includeIfNull: false)
  final String? purchaseOrderNumber;
  @JsonKey(name: 'RequisitionNumber', includeIfNull: false)
  final String? requisitionNumber;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'Vendor', includeIfNull: false)
  final String? vendor;
  @JsonKey(name: 'IsMigrated', includeIfNull: false)
  final bool? isMigrated;
  @JsonKey(name: 'Unassigned', includeIfNull: false)
  final bool? unassigned;
  @JsonKey(name: 'NeedReconcile', includeIfNull: false)
  final bool? needReconcile;
  @JsonKey(name: 'PendingExchange', includeIfNull: false)
  final bool? pendingExchange;
  @JsonKey(name: 'ExchangeContractId', includeIfNull: false)
  final String? exchangeContractId;
  @JsonKey(name: 'Rental', includeIfNull: false)
  final bool? rental;
  @JsonKey(name: 'Sales', includeIfNull: false)
  final bool? sales;
  @JsonKey(name: 'Exchange', includeIfNull: false)
  final bool? exchange;
  @JsonKey(name: 'InputByUserId', includeIfNull: false)
  final String? inputByUserId;
  @JsonKey(name: 'InputByUser', includeIfNull: false)
  final String? inputByUser;
  @JsonKey(name: 'DealInactive', includeIfNull: false)
  final bool? dealInactive;
  @JsonKey(name: 'Truck', includeIfNull: false)
  final bool? truck;
  @JsonKey(name: 'BillingDate', includeIfNull: false)
  final String? billingDate;
  @JsonKey(name: 'BillingDateChangeReason', includeIfNull: false)
  final String? billingDateChangeReason;
  @JsonKey(name: 'LastBillingDateChangeReason', includeIfNull: false)
  final String? lastBillingDateChangeReason;
  @JsonKey(name: 'BillingDateAdjusted', includeIfNull: false)
  final bool? billingDateAdjusted;
  @JsonKey(name: 'HasVoId', includeIfNull: false)
  final bool? hasVoId;
  @JsonKey(name: 'HasTransfer', includeIfNull: false)
  final bool? hasTransfer;
  @JsonKey(name: 'SessionId', includeIfNull: false)
  final String? sessionId;
  @JsonKey(name: 'OrderDescription', includeIfNull: false)
  final String? orderDescription;
  @JsonKey(name: 'PoOrderDescription', includeIfNull: false)
  final String? poOrderDescription;
  @JsonKey(name: 'DeliveryId', includeIfNull: false)
  final String? deliveryId;
  @JsonKey(name: 'DeliveryDeliveryType', includeIfNull: false)
  final String? deliveryDeliveryType;
  @JsonKey(name: 'DeliveryRequiredDate', includeIfNull: false)
  final String? deliveryRequiredDate;
  @JsonKey(name: 'DeliveryRequiredTime', includeIfNull: false)
  final String? deliveryRequiredTime;
  @JsonKey(name: 'DeliveryTargetShipDate', includeIfNull: false)
  final String? deliveryTargetShipDate;
  @JsonKey(name: 'DeliveryTargetShipTime', includeIfNull: false)
  final String? deliveryTargetShipTime;
  @JsonKey(name: 'DeliveryDirection', includeIfNull: false)
  final String? deliveryDirection;
  @JsonKey(name: 'DeliveryAddressType', includeIfNull: false)
  final String? deliveryAddressType;
  @JsonKey(name: 'DeliveryFromLocation', includeIfNull: false)
  final String? deliveryFromLocation;
  @JsonKey(name: 'DeliveryFromContact', includeIfNull: false)
  final String? deliveryFromContact;
  @JsonKey(name: 'DeliveryFromContactPhone', includeIfNull: false)
  final String? deliveryFromContactPhone;
  @JsonKey(name: 'DeliveryFromAlternateContact', includeIfNull: false)
  final String? deliveryFromAlternateContact;
  @JsonKey(name: 'DeliveryFromAlternateContactPhone', includeIfNull: false)
  final String? deliveryFromAlternateContactPhone;
  @JsonKey(name: 'DeliveryFromAttention', includeIfNull: false)
  final String? deliveryFromAttention;
  @JsonKey(name: 'DeliveryFromAddress1', includeIfNull: false)
  final String? deliveryFromAddress1;
  @JsonKey(name: 'DeliveryFromAddress2', includeIfNull: false)
  final String? deliveryFromAddress2;
  @JsonKey(name: 'DeliveryFromCity', includeIfNull: false)
  final String? deliveryFromCity;
  @JsonKey(name: 'DeliveryFromState', includeIfNull: false)
  final String? deliveryFromState;
  @JsonKey(name: 'DeliveryFromZipCode', includeIfNull: false)
  final String? deliveryFromZipCode;
  @JsonKey(name: 'DeliveryFromCountry', includeIfNull: false)
  final String? deliveryFromCountry;
  @JsonKey(name: 'DeliveryFromCountryCodeIsoAlpha2', includeIfNull: false)
  final String? deliveryFromCountryCodeIsoAlpha2;
  @JsonKey(name: 'DeliveryFromCountryCodePhone', includeIfNull: false)
  final int? deliveryFromCountryCodePhone;
  @JsonKey(name: 'DeliveryFromCountryId', includeIfNull: false)
  final String? deliveryFromCountryId;
  @JsonKey(name: 'DeliveryFromCrossStreets', includeIfNull: false)
  final String? deliveryFromCrossStreets;
  @JsonKey(name: 'DeliveryToLocation', includeIfNull: false)
  final String? deliveryToLocation;
  @JsonKey(name: 'DeliveryToContact', includeIfNull: false)
  final String? deliveryToContact;
  @JsonKey(name: 'DeliveryToContactPhone', includeIfNull: false)
  final String? deliveryToContactPhone;
  @JsonKey(name: 'DeliveryToAlternateContact', includeIfNull: false)
  final String? deliveryToAlternateContact;
  @JsonKey(name: 'DeliveryToAlternateContactPhone', includeIfNull: false)
  final String? deliveryToAlternateContactPhone;
  @JsonKey(name: 'DeliveryToAttention', includeIfNull: false)
  final String? deliveryToAttention;
  @JsonKey(name: 'DeliveryToAddress1', includeIfNull: false)
  final String? deliveryToAddress1;
  @JsonKey(name: 'DeliveryToAddress2', includeIfNull: false)
  final String? deliveryToAddress2;
  @JsonKey(name: 'DeliveryToCity', includeIfNull: false)
  final String? deliveryToCity;
  @JsonKey(name: 'DeliveryToState', includeIfNull: false)
  final String? deliveryToState;
  @JsonKey(name: 'DeliveryToZipCode', includeIfNull: false)
  final String? deliveryToZipCode;
  @JsonKey(name: 'DeliveryToCountryId', includeIfNull: false)
  final String? deliveryToCountryId;
  @JsonKey(name: 'DeliveryToCountry', includeIfNull: false)
  final String? deliveryToCountry;
  @JsonKey(name: 'DeliveryToCountryCodeIsoAlpha2', includeIfNull: false)
  final String? deliveryToCountryCodeIsoAlpha2;
  @JsonKey(name: 'DeliveryToCountryCodePhone', includeIfNull: false)
  final int? deliveryToCountryCodePhone;
  @JsonKey(name: 'DeliveryToContactFax', includeIfNull: false)
  final String? deliveryToContactFax;
  @JsonKey(name: 'DeliveryToCrossStreets', includeIfNull: false)
  final String? deliveryToCrossStreets;
  @JsonKey(name: 'DeliveryDeliveryNotes', includeIfNull: false)
  final String? deliveryDeliveryNotes;
  @JsonKey(name: 'DeliveryCarrierId', includeIfNull: false)
  final String? deliveryCarrierId;
  @JsonKey(name: 'DeliveryCarrier', includeIfNull: false)
  final String? deliveryCarrier;
  @JsonKey(name: 'DeliveryCarrierAccount', includeIfNull: false)
  final String? deliveryCarrierAccount;
  @JsonKey(name: 'DeliveryShipViaId', includeIfNull: false)
  final String? deliveryShipViaId;
  @JsonKey(name: 'DeliveryShipVia', includeIfNull: false)
  final String? deliveryShipVia;
  @JsonKey(name: 'DeliveryInvoiceId', includeIfNull: false)
  final String? deliveryInvoiceId;
  @JsonKey(name: 'DeliveryVendorInvoiceId', includeIfNull: false)
  final String? deliveryVendorInvoiceId;
  @JsonKey(name: 'DeliveryEstimatedFreight', includeIfNull: false)
  final double? deliveryEstimatedFreight;
  @JsonKey(name: 'DeliveryFreightInvoiceAmount', includeIfNull: false)
  final double? deliveryFreightInvoiceAmount;
  @JsonKey(name: 'DeliveryChargeType', includeIfNull: false)
  final String? deliveryChargeType;
  @JsonKey(name: 'DeliveryFreightTrackingNumber', includeIfNull: false)
  final String? deliveryFreightTrackingNumber;
  @JsonKey(name: 'DeliveryFreightTrackingUrl', includeIfNull: false)
  final String? deliveryFreightTrackingUrl;
  @JsonKey(name: 'DeliveryDropShip', includeIfNull: false)
  final bool? deliveryDropShip;
  @JsonKey(name: 'DeliveryPackageCode', includeIfNull: false)
  final String? deliveryPackageCode;
  @JsonKey(name: 'DeliveryBillPoFreightOnOrder', includeIfNull: false)
  final bool? deliveryBillPoFreightOnOrder;
  @JsonKey(name: 'DeliveryOnlineOrderNumber', includeIfNull: false)
  final String? deliveryOnlineOrderNumber;
  @JsonKey(name: 'DeliveryOnlineOrderStatus', includeIfNull: false)
  final String? deliveryOnlineOrderStatus;
  @JsonKey(name: 'DeliveryToVenue', includeIfNull: false)
  final String? deliveryToVenue;
  @JsonKey(name: 'DeliveryToVenueId', includeIfNull: false)
  final String? deliveryToVenueId;
  @JsonKey(name: 'DeliveryDateStamp', includeIfNull: false)
  final String? deliveryDateStamp;
  @JsonKey(name: 'Note', includeIfNull: false)
  final String? note;
  @JsonKey(name: 'PrintNoteOnOrder', includeIfNull: false)
  final bool? printNoteOnOrder;
  @JsonKey(name: 'TermsConditionsId', includeIfNull: false)
  final String? termsConditionsId;
  @JsonKey(name: 'QuikReceiptTermsConditionsId', includeIfNull: false)
  final String? quikReceiptTermsConditionsId;
  @JsonKey(name: 'QuikReceiptTermsConditions', includeIfNull: false)
  final String? quikReceiptTermsConditions;
  @JsonKey(name: 'TermsConditions', includeIfNull: false)
  final String? termsConditions;
  @JsonKey(name: 'ContainerId', includeIfNull: false)
  final String? containerId;
  @JsonKey(name: 'ContainerItemId', includeIfNull: false)
  final String? containerItemId;
  @JsonKey(name: 'ContainerDescription', includeIfNull: false)
  final String? containerDescription;
  @JsonKey(name: 'ContainerScannableBarCode', includeIfNull: false)
  final String? containerScannableBarCode;
  @JsonKey(name: 'ContainerScannableItemId', includeIfNull: false)
  final String? containerScannableItemId;
  @JsonKey(name: 'ResponsiblePersonId', includeIfNull: false)
  final String? responsiblePersonId;
  @JsonKey(name: 'ResponsiblePerson', includeIfNull: false)
  final String? responsiblePerson;
  @JsonKey(name: 'ResponsiblePersonEmail', includeIfNull: false)
  final String? responsiblePersonEmail;
  @JsonKey(name: 'ResponsiblePersonMobilePhone', includeIfNull: false)
  final String? responsiblePersonMobilePhone;
  @JsonKey(name: 'ResponsiblePersonOfficePhone', includeIfNull: false)
  final String? responsiblePersonOfficePhone;
  @JsonKey(name: 'ResponsiblePersonOfficeExtension', includeIfNull: false)
  final String? responsiblePersonOfficeExtension;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesWarehouseContractContractFromJson;
  static const toJsonFactory = _$WebApiModulesWarehouseContractContractToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesWarehouseContractContractToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesWarehouseContractContract &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.contractNumber, contractNumber) ||
                const DeepCollectionEquality()
                    .equals(other.contractNumber, contractNumber)) &&
            (identical(other.contractType, contractType) ||
                const DeepCollectionEquality()
                    .equals(other.contractType, contractType)) &&
            (identical(other.contractDate, contractDate) ||
                const DeepCollectionEquality()
                    .equals(other.contractDate, contractDate)) &&
            (identical(other.contractTime, contractTime) ||
                const DeepCollectionEquality()
                    .equals(other.contractTime, contractTime)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.locationCode, locationCode) ||
                const DeepCollectionEquality()
                    .equals(other.locationCode, locationCode)) &&
            (identical(other.location, location) ||
                const DeepCollectionEquality()
                    .equals(other.location, location)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.warehouseCode, warehouseCode) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCode, warehouseCode)) &&
            (identical(other.warehouse, warehouse) ||
                const DeepCollectionEquality()
                    .equals(other.warehouse, warehouse)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.customer, customer) ||
                const DeepCollectionEquality()
                    .equals(other.customer, customer)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.deal, deal) ||
                const DeepCollectionEquality().equals(other.deal, deal)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.orderNumber, orderNumber) ||
                const DeepCollectionEquality()
                    .equals(other.orderNumber, orderNumber)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.department, department) ||
                const DeepCollectionEquality()
                    .equals(other.department, department)) &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.purchaseOrderNumber, purchaseOrderNumber) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderNumber, purchaseOrderNumber)) &&
            (identical(other.requisitionNumber, requisitionNumber) ||
                const DeepCollectionEquality()
                    .equals(other.requisitionNumber, requisitionNumber)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality().equals(other.vendorId, vendorId)) &&
            (identical(other.vendor, vendor) || const DeepCollectionEquality().equals(other.vendor, vendor)) &&
            (identical(other.isMigrated, isMigrated) || const DeepCollectionEquality().equals(other.isMigrated, isMigrated)) &&
            (identical(other.unassigned, unassigned) || const DeepCollectionEquality().equals(other.unassigned, unassigned)) &&
            (identical(other.needReconcile, needReconcile) || const DeepCollectionEquality().equals(other.needReconcile, needReconcile)) &&
            (identical(other.pendingExchange, pendingExchange) || const DeepCollectionEquality().equals(other.pendingExchange, pendingExchange)) &&
            (identical(other.exchangeContractId, exchangeContractId) || const DeepCollectionEquality().equals(other.exchangeContractId, exchangeContractId)) &&
            (identical(other.rental, rental) || const DeepCollectionEquality().equals(other.rental, rental)) &&
            (identical(other.sales, sales) || const DeepCollectionEquality().equals(other.sales, sales)) &&
            (identical(other.exchange, exchange) || const DeepCollectionEquality().equals(other.exchange, exchange)) &&
            (identical(other.inputByUserId, inputByUserId) || const DeepCollectionEquality().equals(other.inputByUserId, inputByUserId)) &&
            (identical(other.inputByUser, inputByUser) || const DeepCollectionEquality().equals(other.inputByUser, inputByUser)) &&
            (identical(other.dealInactive, dealInactive) || const DeepCollectionEquality().equals(other.dealInactive, dealInactive)) &&
            (identical(other.truck, truck) || const DeepCollectionEquality().equals(other.truck, truck)) &&
            (identical(other.billingDate, billingDate) || const DeepCollectionEquality().equals(other.billingDate, billingDate)) &&
            (identical(other.billingDateChangeReason, billingDateChangeReason) || const DeepCollectionEquality().equals(other.billingDateChangeReason, billingDateChangeReason)) &&
            (identical(other.lastBillingDateChangeReason, lastBillingDateChangeReason) || const DeepCollectionEquality().equals(other.lastBillingDateChangeReason, lastBillingDateChangeReason)) &&
            (identical(other.billingDateAdjusted, billingDateAdjusted) || const DeepCollectionEquality().equals(other.billingDateAdjusted, billingDateAdjusted)) &&
            (identical(other.hasVoId, hasVoId) || const DeepCollectionEquality().equals(other.hasVoId, hasVoId)) &&
            (identical(other.hasTransfer, hasTransfer) || const DeepCollectionEquality().equals(other.hasTransfer, hasTransfer)) &&
            (identical(other.sessionId, sessionId) || const DeepCollectionEquality().equals(other.sessionId, sessionId)) &&
            (identical(other.orderDescription, orderDescription) || const DeepCollectionEquality().equals(other.orderDescription, orderDescription)) &&
            (identical(other.poOrderDescription, poOrderDescription) || const DeepCollectionEquality().equals(other.poOrderDescription, poOrderDescription)) &&
            (identical(other.deliveryId, deliveryId) || const DeepCollectionEquality().equals(other.deliveryId, deliveryId)) &&
            (identical(other.deliveryDeliveryType, deliveryDeliveryType) || const DeepCollectionEquality().equals(other.deliveryDeliveryType, deliveryDeliveryType)) &&
            (identical(other.deliveryRequiredDate, deliveryRequiredDate) || const DeepCollectionEquality().equals(other.deliveryRequiredDate, deliveryRequiredDate)) &&
            (identical(other.deliveryRequiredTime, deliveryRequiredTime) || const DeepCollectionEquality().equals(other.deliveryRequiredTime, deliveryRequiredTime)) &&
            (identical(other.deliveryTargetShipDate, deliveryTargetShipDate) || const DeepCollectionEquality().equals(other.deliveryTargetShipDate, deliveryTargetShipDate)) &&
            (identical(other.deliveryTargetShipTime, deliveryTargetShipTime) || const DeepCollectionEquality().equals(other.deliveryTargetShipTime, deliveryTargetShipTime)) &&
            (identical(other.deliveryDirection, deliveryDirection) || const DeepCollectionEquality().equals(other.deliveryDirection, deliveryDirection)) &&
            (identical(other.deliveryAddressType, deliveryAddressType) || const DeepCollectionEquality().equals(other.deliveryAddressType, deliveryAddressType)) &&
            (identical(other.deliveryFromLocation, deliveryFromLocation) || const DeepCollectionEquality().equals(other.deliveryFromLocation, deliveryFromLocation)) &&
            (identical(other.deliveryFromContact, deliveryFromContact) || const DeepCollectionEquality().equals(other.deliveryFromContact, deliveryFromContact)) &&
            (identical(other.deliveryFromContactPhone, deliveryFromContactPhone) || const DeepCollectionEquality().equals(other.deliveryFromContactPhone, deliveryFromContactPhone)) &&
            (identical(other.deliveryFromAlternateContact, deliveryFromAlternateContact) || const DeepCollectionEquality().equals(other.deliveryFromAlternateContact, deliveryFromAlternateContact)) &&
            (identical(other.deliveryFromAlternateContactPhone, deliveryFromAlternateContactPhone) || const DeepCollectionEquality().equals(other.deliveryFromAlternateContactPhone, deliveryFromAlternateContactPhone)) &&
            (identical(other.deliveryFromAttention, deliveryFromAttention) || const DeepCollectionEquality().equals(other.deliveryFromAttention, deliveryFromAttention)) &&
            (identical(other.deliveryFromAddress1, deliveryFromAddress1) || const DeepCollectionEquality().equals(other.deliveryFromAddress1, deliveryFromAddress1)) &&
            (identical(other.deliveryFromAddress2, deliveryFromAddress2) || const DeepCollectionEquality().equals(other.deliveryFromAddress2, deliveryFromAddress2)) &&
            (identical(other.deliveryFromCity, deliveryFromCity) || const DeepCollectionEquality().equals(other.deliveryFromCity, deliveryFromCity)) &&
            (identical(other.deliveryFromState, deliveryFromState) || const DeepCollectionEquality().equals(other.deliveryFromState, deliveryFromState)) &&
            (identical(other.deliveryFromZipCode, deliveryFromZipCode) || const DeepCollectionEquality().equals(other.deliveryFromZipCode, deliveryFromZipCode)) &&
            (identical(other.deliveryFromCountry, deliveryFromCountry) || const DeepCollectionEquality().equals(other.deliveryFromCountry, deliveryFromCountry)) &&
            (identical(other.deliveryFromCountryCodeIsoAlpha2, deliveryFromCountryCodeIsoAlpha2) || const DeepCollectionEquality().equals(other.deliveryFromCountryCodeIsoAlpha2, deliveryFromCountryCodeIsoAlpha2)) &&
            (identical(other.deliveryFromCountryCodePhone, deliveryFromCountryCodePhone) || const DeepCollectionEquality().equals(other.deliveryFromCountryCodePhone, deliveryFromCountryCodePhone)) &&
            (identical(other.deliveryFromCountryId, deliveryFromCountryId) || const DeepCollectionEquality().equals(other.deliveryFromCountryId, deliveryFromCountryId)) &&
            (identical(other.deliveryFromCrossStreets, deliveryFromCrossStreets) || const DeepCollectionEquality().equals(other.deliveryFromCrossStreets, deliveryFromCrossStreets)) &&
            (identical(other.deliveryToLocation, deliveryToLocation) || const DeepCollectionEquality().equals(other.deliveryToLocation, deliveryToLocation)) &&
            (identical(other.deliveryToContact, deliveryToContact) || const DeepCollectionEquality().equals(other.deliveryToContact, deliveryToContact)) &&
            (identical(other.deliveryToContactPhone, deliveryToContactPhone) || const DeepCollectionEquality().equals(other.deliveryToContactPhone, deliveryToContactPhone)) &&
            (identical(other.deliveryToAlternateContact, deliveryToAlternateContact) || const DeepCollectionEquality().equals(other.deliveryToAlternateContact, deliveryToAlternateContact)) &&
            (identical(other.deliveryToAlternateContactPhone, deliveryToAlternateContactPhone) || const DeepCollectionEquality().equals(other.deliveryToAlternateContactPhone, deliveryToAlternateContactPhone)) &&
            (identical(other.deliveryToAttention, deliveryToAttention) || const DeepCollectionEquality().equals(other.deliveryToAttention, deliveryToAttention)) &&
            (identical(other.deliveryToAddress1, deliveryToAddress1) || const DeepCollectionEquality().equals(other.deliveryToAddress1, deliveryToAddress1)) &&
            (identical(other.deliveryToAddress2, deliveryToAddress2) || const DeepCollectionEquality().equals(other.deliveryToAddress2, deliveryToAddress2)) &&
            (identical(other.deliveryToCity, deliveryToCity) || const DeepCollectionEquality().equals(other.deliveryToCity, deliveryToCity)) &&
            (identical(other.deliveryToState, deliveryToState) || const DeepCollectionEquality().equals(other.deliveryToState, deliveryToState)) &&
            (identical(other.deliveryToZipCode, deliveryToZipCode) || const DeepCollectionEquality().equals(other.deliveryToZipCode, deliveryToZipCode)) &&
            (identical(other.deliveryToCountryId, deliveryToCountryId) || const DeepCollectionEquality().equals(other.deliveryToCountryId, deliveryToCountryId)) &&
            (identical(other.deliveryToCountry, deliveryToCountry) || const DeepCollectionEquality().equals(other.deliveryToCountry, deliveryToCountry)) &&
            (identical(other.deliveryToCountryCodeIsoAlpha2, deliveryToCountryCodeIsoAlpha2) || const DeepCollectionEquality().equals(other.deliveryToCountryCodeIsoAlpha2, deliveryToCountryCodeIsoAlpha2)) &&
            (identical(other.deliveryToCountryCodePhone, deliveryToCountryCodePhone) || const DeepCollectionEquality().equals(other.deliveryToCountryCodePhone, deliveryToCountryCodePhone)) &&
            (identical(other.deliveryToContactFax, deliveryToContactFax) || const DeepCollectionEquality().equals(other.deliveryToContactFax, deliveryToContactFax)) &&
            (identical(other.deliveryToCrossStreets, deliveryToCrossStreets) || const DeepCollectionEquality().equals(other.deliveryToCrossStreets, deliveryToCrossStreets)) &&
            (identical(other.deliveryDeliveryNotes, deliveryDeliveryNotes) || const DeepCollectionEquality().equals(other.deliveryDeliveryNotes, deliveryDeliveryNotes)) &&
            (identical(other.deliveryCarrierId, deliveryCarrierId) || const DeepCollectionEquality().equals(other.deliveryCarrierId, deliveryCarrierId)) &&
            (identical(other.deliveryCarrier, deliveryCarrier) || const DeepCollectionEquality().equals(other.deliveryCarrier, deliveryCarrier)) &&
            (identical(other.deliveryCarrierAccount, deliveryCarrierAccount) || const DeepCollectionEquality().equals(other.deliveryCarrierAccount, deliveryCarrierAccount)) &&
            (identical(other.deliveryShipViaId, deliveryShipViaId) || const DeepCollectionEquality().equals(other.deliveryShipViaId, deliveryShipViaId)) &&
            (identical(other.deliveryShipVia, deliveryShipVia) || const DeepCollectionEquality().equals(other.deliveryShipVia, deliveryShipVia)) &&
            (identical(other.deliveryInvoiceId, deliveryInvoiceId) || const DeepCollectionEquality().equals(other.deliveryInvoiceId, deliveryInvoiceId)) &&
            (identical(other.deliveryVendorInvoiceId, deliveryVendorInvoiceId) || const DeepCollectionEquality().equals(other.deliveryVendorInvoiceId, deliveryVendorInvoiceId)) &&
            (identical(other.deliveryEstimatedFreight, deliveryEstimatedFreight) || const DeepCollectionEquality().equals(other.deliveryEstimatedFreight, deliveryEstimatedFreight)) &&
            (identical(other.deliveryFreightInvoiceAmount, deliveryFreightInvoiceAmount) || const DeepCollectionEquality().equals(other.deliveryFreightInvoiceAmount, deliveryFreightInvoiceAmount)) &&
            (identical(other.deliveryChargeType, deliveryChargeType) || const DeepCollectionEquality().equals(other.deliveryChargeType, deliveryChargeType)) &&
            (identical(other.deliveryFreightTrackingNumber, deliveryFreightTrackingNumber) || const DeepCollectionEquality().equals(other.deliveryFreightTrackingNumber, deliveryFreightTrackingNumber)) &&
            (identical(other.deliveryFreightTrackingUrl, deliveryFreightTrackingUrl) || const DeepCollectionEquality().equals(other.deliveryFreightTrackingUrl, deliveryFreightTrackingUrl)) &&
            (identical(other.deliveryDropShip, deliveryDropShip) || const DeepCollectionEquality().equals(other.deliveryDropShip, deliveryDropShip)) &&
            (identical(other.deliveryPackageCode, deliveryPackageCode) || const DeepCollectionEquality().equals(other.deliveryPackageCode, deliveryPackageCode)) &&
            (identical(other.deliveryBillPoFreightOnOrder, deliveryBillPoFreightOnOrder) || const DeepCollectionEquality().equals(other.deliveryBillPoFreightOnOrder, deliveryBillPoFreightOnOrder)) &&
            (identical(other.deliveryOnlineOrderNumber, deliveryOnlineOrderNumber) || const DeepCollectionEquality().equals(other.deliveryOnlineOrderNumber, deliveryOnlineOrderNumber)) &&
            (identical(other.deliveryOnlineOrderStatus, deliveryOnlineOrderStatus) || const DeepCollectionEquality().equals(other.deliveryOnlineOrderStatus, deliveryOnlineOrderStatus)) &&
            (identical(other.deliveryToVenue, deliveryToVenue) || const DeepCollectionEquality().equals(other.deliveryToVenue, deliveryToVenue)) &&
            (identical(other.deliveryToVenueId, deliveryToVenueId) || const DeepCollectionEquality().equals(other.deliveryToVenueId, deliveryToVenueId)) &&
            (identical(other.deliveryDateStamp, deliveryDateStamp) || const DeepCollectionEquality().equals(other.deliveryDateStamp, deliveryDateStamp)) &&
            (identical(other.note, note) || const DeepCollectionEquality().equals(other.note, note)) &&
            (identical(other.printNoteOnOrder, printNoteOnOrder) || const DeepCollectionEquality().equals(other.printNoteOnOrder, printNoteOnOrder)) &&
            (identical(other.termsConditionsId, termsConditionsId) || const DeepCollectionEquality().equals(other.termsConditionsId, termsConditionsId)) &&
            (identical(other.quikReceiptTermsConditionsId, quikReceiptTermsConditionsId) || const DeepCollectionEquality().equals(other.quikReceiptTermsConditionsId, quikReceiptTermsConditionsId)) &&
            (identical(other.quikReceiptTermsConditions, quikReceiptTermsConditions) || const DeepCollectionEquality().equals(other.quikReceiptTermsConditions, quikReceiptTermsConditions)) &&
            (identical(other.termsConditions, termsConditions) || const DeepCollectionEquality().equals(other.termsConditions, termsConditions)) &&
            (identical(other.containerId, containerId) || const DeepCollectionEquality().equals(other.containerId, containerId)) &&
            (identical(other.containerItemId, containerItemId) || const DeepCollectionEquality().equals(other.containerItemId, containerItemId)) &&
            (identical(other.containerDescription, containerDescription) || const DeepCollectionEquality().equals(other.containerDescription, containerDescription)) &&
            (identical(other.containerScannableBarCode, containerScannableBarCode) || const DeepCollectionEquality().equals(other.containerScannableBarCode, containerScannableBarCode)) &&
            (identical(other.containerScannableItemId, containerScannableItemId) || const DeepCollectionEquality().equals(other.containerScannableItemId, containerScannableItemId)) &&
            (identical(other.responsiblePersonId, responsiblePersonId) || const DeepCollectionEquality().equals(other.responsiblePersonId, responsiblePersonId)) &&
            (identical(other.responsiblePerson, responsiblePerson) || const DeepCollectionEquality().equals(other.responsiblePerson, responsiblePerson)) &&
            (identical(other.responsiblePersonEmail, responsiblePersonEmail) || const DeepCollectionEquality().equals(other.responsiblePersonEmail, responsiblePersonEmail)) &&
            (identical(other.responsiblePersonMobilePhone, responsiblePersonMobilePhone) || const DeepCollectionEquality().equals(other.responsiblePersonMobilePhone, responsiblePersonMobilePhone)) &&
            (identical(other.responsiblePersonOfficePhone, responsiblePersonOfficePhone) || const DeepCollectionEquality().equals(other.responsiblePersonOfficePhone, responsiblePersonOfficePhone)) &&
            (identical(other.responsiblePersonOfficeExtension, responsiblePersonOfficeExtension) || const DeepCollectionEquality().equals(other.responsiblePersonOfficeExtension, responsiblePersonOfficeExtension)) &&
            (identical(other.dateStamp, dateStamp) || const DeepCollectionEquality().equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) || const DeepCollectionEquality().equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) || const DeepCollectionEquality().equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(contractNumber) ^
      const DeepCollectionEquality().hash(contractType) ^
      const DeepCollectionEquality().hash(contractDate) ^
      const DeepCollectionEquality().hash(contractTime) ^
      const DeepCollectionEquality().hash(locationId) ^
      const DeepCollectionEquality().hash(locationCode) ^
      const DeepCollectionEquality().hash(location) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(warehouseCode) ^
      const DeepCollectionEquality().hash(warehouse) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(customer) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(deal) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(orderNumber) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(department) ^
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(purchaseOrderNumber) ^
      const DeepCollectionEquality().hash(requisitionNumber) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(vendor) ^
      const DeepCollectionEquality().hash(isMigrated) ^
      const DeepCollectionEquality().hash(unassigned) ^
      const DeepCollectionEquality().hash(needReconcile) ^
      const DeepCollectionEquality().hash(pendingExchange) ^
      const DeepCollectionEquality().hash(exchangeContractId) ^
      const DeepCollectionEquality().hash(rental) ^
      const DeepCollectionEquality().hash(sales) ^
      const DeepCollectionEquality().hash(exchange) ^
      const DeepCollectionEquality().hash(inputByUserId) ^
      const DeepCollectionEquality().hash(inputByUser) ^
      const DeepCollectionEquality().hash(dealInactive) ^
      const DeepCollectionEquality().hash(truck) ^
      const DeepCollectionEquality().hash(billingDate) ^
      const DeepCollectionEquality().hash(billingDateChangeReason) ^
      const DeepCollectionEquality().hash(lastBillingDateChangeReason) ^
      const DeepCollectionEquality().hash(billingDateAdjusted) ^
      const DeepCollectionEquality().hash(hasVoId) ^
      const DeepCollectionEquality().hash(hasTransfer) ^
      const DeepCollectionEquality().hash(sessionId) ^
      const DeepCollectionEquality().hash(orderDescription) ^
      const DeepCollectionEquality().hash(poOrderDescription) ^
      const DeepCollectionEquality().hash(deliveryId) ^
      const DeepCollectionEquality().hash(deliveryDeliveryType) ^
      const DeepCollectionEquality().hash(deliveryRequiredDate) ^
      const DeepCollectionEquality().hash(deliveryRequiredTime) ^
      const DeepCollectionEquality().hash(deliveryTargetShipDate) ^
      const DeepCollectionEquality().hash(deliveryTargetShipTime) ^
      const DeepCollectionEquality().hash(deliveryDirection) ^
      const DeepCollectionEquality().hash(deliveryAddressType) ^
      const DeepCollectionEquality().hash(deliveryFromLocation) ^
      const DeepCollectionEquality().hash(deliveryFromContact) ^
      const DeepCollectionEquality().hash(deliveryFromContactPhone) ^
      const DeepCollectionEquality().hash(deliveryFromAlternateContact) ^
      const DeepCollectionEquality().hash(deliveryFromAlternateContactPhone) ^
      const DeepCollectionEquality().hash(deliveryFromAttention) ^
      const DeepCollectionEquality().hash(deliveryFromAddress1) ^
      const DeepCollectionEquality().hash(deliveryFromAddress2) ^
      const DeepCollectionEquality().hash(deliveryFromCity) ^
      const DeepCollectionEquality().hash(deliveryFromState) ^
      const DeepCollectionEquality().hash(deliveryFromZipCode) ^
      const DeepCollectionEquality().hash(deliveryFromCountry) ^
      const DeepCollectionEquality().hash(deliveryFromCountryCodeIsoAlpha2) ^
      const DeepCollectionEquality().hash(deliveryFromCountryCodePhone) ^
      const DeepCollectionEquality().hash(deliveryFromCountryId) ^
      const DeepCollectionEquality().hash(deliveryFromCrossStreets) ^
      const DeepCollectionEquality().hash(deliveryToLocation) ^
      const DeepCollectionEquality().hash(deliveryToContact) ^
      const DeepCollectionEquality().hash(deliveryToContactPhone) ^
      const DeepCollectionEquality().hash(deliveryToAlternateContact) ^
      const DeepCollectionEquality().hash(deliveryToAlternateContactPhone) ^
      const DeepCollectionEquality().hash(deliveryToAttention) ^
      const DeepCollectionEquality().hash(deliveryToAddress1) ^
      const DeepCollectionEquality().hash(deliveryToAddress2) ^
      const DeepCollectionEquality().hash(deliveryToCity) ^
      const DeepCollectionEquality().hash(deliveryToState) ^
      const DeepCollectionEquality().hash(deliveryToZipCode) ^
      const DeepCollectionEquality().hash(deliveryToCountryId) ^
      const DeepCollectionEquality().hash(deliveryToCountry) ^
      const DeepCollectionEquality().hash(deliveryToCountryCodeIsoAlpha2) ^
      const DeepCollectionEquality().hash(deliveryToCountryCodePhone) ^
      const DeepCollectionEquality().hash(deliveryToContactFax) ^
      const DeepCollectionEquality().hash(deliveryToCrossStreets) ^
      const DeepCollectionEquality().hash(deliveryDeliveryNotes) ^
      const DeepCollectionEquality().hash(deliveryCarrierId) ^
      const DeepCollectionEquality().hash(deliveryCarrier) ^
      const DeepCollectionEquality().hash(deliveryCarrierAccount) ^
      const DeepCollectionEquality().hash(deliveryShipViaId) ^
      const DeepCollectionEquality().hash(deliveryShipVia) ^
      const DeepCollectionEquality().hash(deliveryInvoiceId) ^
      const DeepCollectionEquality().hash(deliveryVendorInvoiceId) ^
      const DeepCollectionEquality().hash(deliveryEstimatedFreight) ^
      const DeepCollectionEquality().hash(deliveryFreightInvoiceAmount) ^
      const DeepCollectionEquality().hash(deliveryChargeType) ^
      const DeepCollectionEquality().hash(deliveryFreightTrackingNumber) ^
      const DeepCollectionEquality().hash(deliveryFreightTrackingUrl) ^
      const DeepCollectionEquality().hash(deliveryDropShip) ^
      const DeepCollectionEquality().hash(deliveryPackageCode) ^
      const DeepCollectionEquality().hash(deliveryBillPoFreightOnOrder) ^
      const DeepCollectionEquality().hash(deliveryOnlineOrderNumber) ^
      const DeepCollectionEquality().hash(deliveryOnlineOrderStatus) ^
      const DeepCollectionEquality().hash(deliveryToVenue) ^
      const DeepCollectionEquality().hash(deliveryToVenueId) ^
      const DeepCollectionEquality().hash(deliveryDateStamp) ^
      const DeepCollectionEquality().hash(note) ^
      const DeepCollectionEquality().hash(printNoteOnOrder) ^
      const DeepCollectionEquality().hash(termsConditionsId) ^
      const DeepCollectionEquality().hash(quikReceiptTermsConditionsId) ^
      const DeepCollectionEquality().hash(quikReceiptTermsConditions) ^
      const DeepCollectionEquality().hash(termsConditions) ^
      const DeepCollectionEquality().hash(containerId) ^
      const DeepCollectionEquality().hash(containerItemId) ^
      const DeepCollectionEquality().hash(containerDescription) ^
      const DeepCollectionEquality().hash(containerScannableBarCode) ^
      const DeepCollectionEquality().hash(containerScannableItemId) ^
      const DeepCollectionEquality().hash(responsiblePersonId) ^
      const DeepCollectionEquality().hash(responsiblePerson) ^
      const DeepCollectionEquality().hash(responsiblePersonEmail) ^
      const DeepCollectionEquality().hash(responsiblePersonMobilePhone) ^
      const DeepCollectionEquality().hash(responsiblePersonOfficePhone) ^
      const DeepCollectionEquality().hash(responsiblePersonOfficeExtension) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesWarehouseContractContractExtension
    on WebApiModulesWarehouseContractContract {
  WebApiModulesWarehouseContractContract copyWith(
      {String? contractId,
      String? contractNumber,
      String? contractType,
      String? contractDate,
      String? contractTime,
      String? locationId,
      String? locationCode,
      String? location,
      String? warehouseId,
      String? warehouseCode,
      String? warehouse,
      String? customerId,
      String? customer,
      String? dealId,
      String? deal,
      String? orderId,
      String? orderNumber,
      String? departmentId,
      String? department,
      String? purchaseOrderId,
      String? purchaseOrderNumber,
      String? requisitionNumber,
      String? vendorId,
      String? vendor,
      bool? isMigrated,
      bool? unassigned,
      bool? needReconcile,
      bool? pendingExchange,
      String? exchangeContractId,
      bool? rental,
      bool? sales,
      bool? exchange,
      String? inputByUserId,
      String? inputByUser,
      bool? dealInactive,
      bool? truck,
      String? billingDate,
      String? billingDateChangeReason,
      String? lastBillingDateChangeReason,
      bool? billingDateAdjusted,
      bool? hasVoId,
      bool? hasTransfer,
      String? sessionId,
      String? orderDescription,
      String? poOrderDescription,
      String? deliveryId,
      String? deliveryDeliveryType,
      String? deliveryRequiredDate,
      String? deliveryRequiredTime,
      String? deliveryTargetShipDate,
      String? deliveryTargetShipTime,
      String? deliveryDirection,
      String? deliveryAddressType,
      String? deliveryFromLocation,
      String? deliveryFromContact,
      String? deliveryFromContactPhone,
      String? deliveryFromAlternateContact,
      String? deliveryFromAlternateContactPhone,
      String? deliveryFromAttention,
      String? deliveryFromAddress1,
      String? deliveryFromAddress2,
      String? deliveryFromCity,
      String? deliveryFromState,
      String? deliveryFromZipCode,
      String? deliveryFromCountry,
      String? deliveryFromCountryCodeIsoAlpha2,
      int? deliveryFromCountryCodePhone,
      String? deliveryFromCountryId,
      String? deliveryFromCrossStreets,
      String? deliveryToLocation,
      String? deliveryToContact,
      String? deliveryToContactPhone,
      String? deliveryToAlternateContact,
      String? deliveryToAlternateContactPhone,
      String? deliveryToAttention,
      String? deliveryToAddress1,
      String? deliveryToAddress2,
      String? deliveryToCity,
      String? deliveryToState,
      String? deliveryToZipCode,
      String? deliveryToCountryId,
      String? deliveryToCountry,
      String? deliveryToCountryCodeIsoAlpha2,
      int? deliveryToCountryCodePhone,
      String? deliveryToContactFax,
      String? deliveryToCrossStreets,
      String? deliveryDeliveryNotes,
      String? deliveryCarrierId,
      String? deliveryCarrier,
      String? deliveryCarrierAccount,
      String? deliveryShipViaId,
      String? deliveryShipVia,
      String? deliveryInvoiceId,
      String? deliveryVendorInvoiceId,
      double? deliveryEstimatedFreight,
      double? deliveryFreightInvoiceAmount,
      String? deliveryChargeType,
      String? deliveryFreightTrackingNumber,
      String? deliveryFreightTrackingUrl,
      bool? deliveryDropShip,
      String? deliveryPackageCode,
      bool? deliveryBillPoFreightOnOrder,
      String? deliveryOnlineOrderNumber,
      String? deliveryOnlineOrderStatus,
      String? deliveryToVenue,
      String? deliveryToVenueId,
      String? deliveryDateStamp,
      String? note,
      bool? printNoteOnOrder,
      String? termsConditionsId,
      String? quikReceiptTermsConditionsId,
      String? quikReceiptTermsConditions,
      String? termsConditions,
      String? containerId,
      String? containerItemId,
      String? containerDescription,
      String? containerScannableBarCode,
      String? containerScannableItemId,
      String? responsiblePersonId,
      String? responsiblePerson,
      String? responsiblePersonEmail,
      String? responsiblePersonMobilePhone,
      String? responsiblePersonOfficePhone,
      String? responsiblePersonOfficeExtension,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesWarehouseContractContract(
        contractId: contractId ?? this.contractId,
        contractNumber: contractNumber ?? this.contractNumber,
        contractType: contractType ?? this.contractType,
        contractDate: contractDate ?? this.contractDate,
        contractTime: contractTime ?? this.contractTime,
        locationId: locationId ?? this.locationId,
        locationCode: locationCode ?? this.locationCode,
        location: location ?? this.location,
        warehouseId: warehouseId ?? this.warehouseId,
        warehouseCode: warehouseCode ?? this.warehouseCode,
        warehouse: warehouse ?? this.warehouse,
        customerId: customerId ?? this.customerId,
        customer: customer ?? this.customer,
        dealId: dealId ?? this.dealId,
        deal: deal ?? this.deal,
        orderId: orderId ?? this.orderId,
        orderNumber: orderNumber ?? this.orderNumber,
        departmentId: departmentId ?? this.departmentId,
        department: department ?? this.department,
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        purchaseOrderNumber: purchaseOrderNumber ?? this.purchaseOrderNumber,
        requisitionNumber: requisitionNumber ?? this.requisitionNumber,
        vendorId: vendorId ?? this.vendorId,
        vendor: vendor ?? this.vendor,
        isMigrated: isMigrated ?? this.isMigrated,
        unassigned: unassigned ?? this.unassigned,
        needReconcile: needReconcile ?? this.needReconcile,
        pendingExchange: pendingExchange ?? this.pendingExchange,
        exchangeContractId: exchangeContractId ?? this.exchangeContractId,
        rental: rental ?? this.rental,
        sales: sales ?? this.sales,
        exchange: exchange ?? this.exchange,
        inputByUserId: inputByUserId ?? this.inputByUserId,
        inputByUser: inputByUser ?? this.inputByUser,
        dealInactive: dealInactive ?? this.dealInactive,
        truck: truck ?? this.truck,
        billingDate: billingDate ?? this.billingDate,
        billingDateChangeReason:
            billingDateChangeReason ?? this.billingDateChangeReason,
        lastBillingDateChangeReason:
            lastBillingDateChangeReason ?? this.lastBillingDateChangeReason,
        billingDateAdjusted: billingDateAdjusted ?? this.billingDateAdjusted,
        hasVoId: hasVoId ?? this.hasVoId,
        hasTransfer: hasTransfer ?? this.hasTransfer,
        sessionId: sessionId ?? this.sessionId,
        orderDescription: orderDescription ?? this.orderDescription,
        poOrderDescription: poOrderDescription ?? this.poOrderDescription,
        deliveryId: deliveryId ?? this.deliveryId,
        deliveryDeliveryType: deliveryDeliveryType ?? this.deliveryDeliveryType,
        deliveryRequiredDate: deliveryRequiredDate ?? this.deliveryRequiredDate,
        deliveryRequiredTime: deliveryRequiredTime ?? this.deliveryRequiredTime,
        deliveryTargetShipDate:
            deliveryTargetShipDate ?? this.deliveryTargetShipDate,
        deliveryTargetShipTime:
            deliveryTargetShipTime ?? this.deliveryTargetShipTime,
        deliveryDirection: deliveryDirection ?? this.deliveryDirection,
        deliveryAddressType: deliveryAddressType ?? this.deliveryAddressType,
        deliveryFromLocation: deliveryFromLocation ?? this.deliveryFromLocation,
        deliveryFromContact: deliveryFromContact ?? this.deliveryFromContact,
        deliveryFromContactPhone:
            deliveryFromContactPhone ?? this.deliveryFromContactPhone,
        deliveryFromAlternateContact:
            deliveryFromAlternateContact ?? this.deliveryFromAlternateContact,
        deliveryFromAlternateContactPhone: deliveryFromAlternateContactPhone ??
            this.deliveryFromAlternateContactPhone,
        deliveryFromAttention:
            deliveryFromAttention ?? this.deliveryFromAttention,
        deliveryFromAddress1: deliveryFromAddress1 ?? this.deliveryFromAddress1,
        deliveryFromAddress2: deliveryFromAddress2 ?? this.deliveryFromAddress2,
        deliveryFromCity: deliveryFromCity ?? this.deliveryFromCity,
        deliveryFromState: deliveryFromState ?? this.deliveryFromState,
        deliveryFromZipCode: deliveryFromZipCode ?? this.deliveryFromZipCode,
        deliveryFromCountry: deliveryFromCountry ?? this.deliveryFromCountry,
        deliveryFromCountryCodeIsoAlpha2: deliveryFromCountryCodeIsoAlpha2 ??
            this.deliveryFromCountryCodeIsoAlpha2,
        deliveryFromCountryCodePhone:
            deliveryFromCountryCodePhone ?? this.deliveryFromCountryCodePhone,
        deliveryFromCountryId:
            deliveryFromCountryId ?? this.deliveryFromCountryId,
        deliveryFromCrossStreets:
            deliveryFromCrossStreets ?? this.deliveryFromCrossStreets,
        deliveryToLocation: deliveryToLocation ?? this.deliveryToLocation,
        deliveryToContact: deliveryToContact ?? this.deliveryToContact,
        deliveryToContactPhone:
            deliveryToContactPhone ?? this.deliveryToContactPhone,
        deliveryToAlternateContact:
            deliveryToAlternateContact ?? this.deliveryToAlternateContact,
        deliveryToAlternateContactPhone: deliveryToAlternateContactPhone ??
            this.deliveryToAlternateContactPhone,
        deliveryToAttention: deliveryToAttention ?? this.deliveryToAttention,
        deliveryToAddress1: deliveryToAddress1 ?? this.deliveryToAddress1,
        deliveryToAddress2: deliveryToAddress2 ?? this.deliveryToAddress2,
        deliveryToCity: deliveryToCity ?? this.deliveryToCity,
        deliveryToState: deliveryToState ?? this.deliveryToState,
        deliveryToZipCode: deliveryToZipCode ?? this.deliveryToZipCode,
        deliveryToCountryId: deliveryToCountryId ?? this.deliveryToCountryId,
        deliveryToCountry: deliveryToCountry ?? this.deliveryToCountry,
        deliveryToCountryCodeIsoAlpha2: deliveryToCountryCodeIsoAlpha2 ??
            this.deliveryToCountryCodeIsoAlpha2,
        deliveryToCountryCodePhone:
            deliveryToCountryCodePhone ?? this.deliveryToCountryCodePhone,
        deliveryToContactFax: deliveryToContactFax ?? this.deliveryToContactFax,
        deliveryToCrossStreets:
            deliveryToCrossStreets ?? this.deliveryToCrossStreets,
        deliveryDeliveryNotes:
            deliveryDeliveryNotes ?? this.deliveryDeliveryNotes,
        deliveryCarrierId: deliveryCarrierId ?? this.deliveryCarrierId,
        deliveryCarrier: deliveryCarrier ?? this.deliveryCarrier,
        deliveryCarrierAccount:
            deliveryCarrierAccount ?? this.deliveryCarrierAccount,
        deliveryShipViaId: deliveryShipViaId ?? this.deliveryShipViaId,
        deliveryShipVia: deliveryShipVia ?? this.deliveryShipVia,
        deliveryInvoiceId: deliveryInvoiceId ?? this.deliveryInvoiceId,
        deliveryVendorInvoiceId:
            deliveryVendorInvoiceId ?? this.deliveryVendorInvoiceId,
        deliveryEstimatedFreight:
            deliveryEstimatedFreight ?? this.deliveryEstimatedFreight,
        deliveryFreightInvoiceAmount:
            deliveryFreightInvoiceAmount ?? this.deliveryFreightInvoiceAmount,
        deliveryChargeType: deliveryChargeType ?? this.deliveryChargeType,
        deliveryFreightTrackingNumber:
            deliveryFreightTrackingNumber ?? this.deliveryFreightTrackingNumber,
        deliveryFreightTrackingUrl:
            deliveryFreightTrackingUrl ?? this.deliveryFreightTrackingUrl,
        deliveryDropShip: deliveryDropShip ?? this.deliveryDropShip,
        deliveryPackageCode: deliveryPackageCode ?? this.deliveryPackageCode,
        deliveryBillPoFreightOnOrder:
            deliveryBillPoFreightOnOrder ?? this.deliveryBillPoFreightOnOrder,
        deliveryOnlineOrderNumber:
            deliveryOnlineOrderNumber ?? this.deliveryOnlineOrderNumber,
        deliveryOnlineOrderStatus:
            deliveryOnlineOrderStatus ?? this.deliveryOnlineOrderStatus,
        deliveryToVenue: deliveryToVenue ?? this.deliveryToVenue,
        deliveryToVenueId: deliveryToVenueId ?? this.deliveryToVenueId,
        deliveryDateStamp: deliveryDateStamp ?? this.deliveryDateStamp,
        note: note ?? this.note,
        printNoteOnOrder: printNoteOnOrder ?? this.printNoteOnOrder,
        termsConditionsId: termsConditionsId ?? this.termsConditionsId,
        quikReceiptTermsConditionsId:
            quikReceiptTermsConditionsId ?? this.quikReceiptTermsConditionsId,
        quikReceiptTermsConditions:
            quikReceiptTermsConditions ?? this.quikReceiptTermsConditions,
        termsConditions: termsConditions ?? this.termsConditions,
        containerId: containerId ?? this.containerId,
        containerItemId: containerItemId ?? this.containerItemId,
        containerDescription: containerDescription ?? this.containerDescription,
        containerScannableBarCode:
            containerScannableBarCode ?? this.containerScannableBarCode,
        containerScannableItemId:
            containerScannableItemId ?? this.containerScannableItemId,
        responsiblePersonId: responsiblePersonId ?? this.responsiblePersonId,
        responsiblePerson: responsiblePerson ?? this.responsiblePerson,
        responsiblePersonEmail:
            responsiblePersonEmail ?? this.responsiblePersonEmail,
        responsiblePersonMobilePhone:
            responsiblePersonMobilePhone ?? this.responsiblePersonMobilePhone,
        responsiblePersonOfficePhone:
            responsiblePersonOfficePhone ?? this.responsiblePersonOfficePhone,
        responsiblePersonOfficeExtension: responsiblePersonOfficeExtension ??
            this.responsiblePersonOfficeExtension,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }

  WebApiModulesWarehouseContractContract copyWithWrapped(
      {Wrapped<String?>? contractId,
      Wrapped<String?>? contractNumber,
      Wrapped<String?>? contractType,
      Wrapped<String?>? contractDate,
      Wrapped<String?>? contractTime,
      Wrapped<String?>? locationId,
      Wrapped<String?>? locationCode,
      Wrapped<String?>? location,
      Wrapped<String?>? warehouseId,
      Wrapped<String?>? warehouseCode,
      Wrapped<String?>? warehouse,
      Wrapped<String?>? customerId,
      Wrapped<String?>? customer,
      Wrapped<String?>? dealId,
      Wrapped<String?>? deal,
      Wrapped<String?>? orderId,
      Wrapped<String?>? orderNumber,
      Wrapped<String?>? departmentId,
      Wrapped<String?>? department,
      Wrapped<String?>? purchaseOrderId,
      Wrapped<String?>? purchaseOrderNumber,
      Wrapped<String?>? requisitionNumber,
      Wrapped<String?>? vendorId,
      Wrapped<String?>? vendor,
      Wrapped<bool?>? isMigrated,
      Wrapped<bool?>? unassigned,
      Wrapped<bool?>? needReconcile,
      Wrapped<bool?>? pendingExchange,
      Wrapped<String?>? exchangeContractId,
      Wrapped<bool?>? rental,
      Wrapped<bool?>? sales,
      Wrapped<bool?>? exchange,
      Wrapped<String?>? inputByUserId,
      Wrapped<String?>? inputByUser,
      Wrapped<bool?>? dealInactive,
      Wrapped<bool?>? truck,
      Wrapped<String?>? billingDate,
      Wrapped<String?>? billingDateChangeReason,
      Wrapped<String?>? lastBillingDateChangeReason,
      Wrapped<bool?>? billingDateAdjusted,
      Wrapped<bool?>? hasVoId,
      Wrapped<bool?>? hasTransfer,
      Wrapped<String?>? sessionId,
      Wrapped<String?>? orderDescription,
      Wrapped<String?>? poOrderDescription,
      Wrapped<String?>? deliveryId,
      Wrapped<String?>? deliveryDeliveryType,
      Wrapped<String?>? deliveryRequiredDate,
      Wrapped<String?>? deliveryRequiredTime,
      Wrapped<String?>? deliveryTargetShipDate,
      Wrapped<String?>? deliveryTargetShipTime,
      Wrapped<String?>? deliveryDirection,
      Wrapped<String?>? deliveryAddressType,
      Wrapped<String?>? deliveryFromLocation,
      Wrapped<String?>? deliveryFromContact,
      Wrapped<String?>? deliveryFromContactPhone,
      Wrapped<String?>? deliveryFromAlternateContact,
      Wrapped<String?>? deliveryFromAlternateContactPhone,
      Wrapped<String?>? deliveryFromAttention,
      Wrapped<String?>? deliveryFromAddress1,
      Wrapped<String?>? deliveryFromAddress2,
      Wrapped<String?>? deliveryFromCity,
      Wrapped<String?>? deliveryFromState,
      Wrapped<String?>? deliveryFromZipCode,
      Wrapped<String?>? deliveryFromCountry,
      Wrapped<String?>? deliveryFromCountryCodeIsoAlpha2,
      Wrapped<int?>? deliveryFromCountryCodePhone,
      Wrapped<String?>? deliveryFromCountryId,
      Wrapped<String?>? deliveryFromCrossStreets,
      Wrapped<String?>? deliveryToLocation,
      Wrapped<String?>? deliveryToContact,
      Wrapped<String?>? deliveryToContactPhone,
      Wrapped<String?>? deliveryToAlternateContact,
      Wrapped<String?>? deliveryToAlternateContactPhone,
      Wrapped<String?>? deliveryToAttention,
      Wrapped<String?>? deliveryToAddress1,
      Wrapped<String?>? deliveryToAddress2,
      Wrapped<String?>? deliveryToCity,
      Wrapped<String?>? deliveryToState,
      Wrapped<String?>? deliveryToZipCode,
      Wrapped<String?>? deliveryToCountryId,
      Wrapped<String?>? deliveryToCountry,
      Wrapped<String?>? deliveryToCountryCodeIsoAlpha2,
      Wrapped<int?>? deliveryToCountryCodePhone,
      Wrapped<String?>? deliveryToContactFax,
      Wrapped<String?>? deliveryToCrossStreets,
      Wrapped<String?>? deliveryDeliveryNotes,
      Wrapped<String?>? deliveryCarrierId,
      Wrapped<String?>? deliveryCarrier,
      Wrapped<String?>? deliveryCarrierAccount,
      Wrapped<String?>? deliveryShipViaId,
      Wrapped<String?>? deliveryShipVia,
      Wrapped<String?>? deliveryInvoiceId,
      Wrapped<String?>? deliveryVendorInvoiceId,
      Wrapped<double?>? deliveryEstimatedFreight,
      Wrapped<double?>? deliveryFreightInvoiceAmount,
      Wrapped<String?>? deliveryChargeType,
      Wrapped<String?>? deliveryFreightTrackingNumber,
      Wrapped<String?>? deliveryFreightTrackingUrl,
      Wrapped<bool?>? deliveryDropShip,
      Wrapped<String?>? deliveryPackageCode,
      Wrapped<bool?>? deliveryBillPoFreightOnOrder,
      Wrapped<String?>? deliveryOnlineOrderNumber,
      Wrapped<String?>? deliveryOnlineOrderStatus,
      Wrapped<String?>? deliveryToVenue,
      Wrapped<String?>? deliveryToVenueId,
      Wrapped<String?>? deliveryDateStamp,
      Wrapped<String?>? note,
      Wrapped<bool?>? printNoteOnOrder,
      Wrapped<String?>? termsConditionsId,
      Wrapped<String?>? quikReceiptTermsConditionsId,
      Wrapped<String?>? quikReceiptTermsConditions,
      Wrapped<String?>? termsConditions,
      Wrapped<String?>? containerId,
      Wrapped<String?>? containerItemId,
      Wrapped<String?>? containerDescription,
      Wrapped<String?>? containerScannableBarCode,
      Wrapped<String?>? containerScannableItemId,
      Wrapped<String?>? responsiblePersonId,
      Wrapped<String?>? responsiblePerson,
      Wrapped<String?>? responsiblePersonEmail,
      Wrapped<String?>? responsiblePersonMobilePhone,
      Wrapped<String?>? responsiblePersonOfficePhone,
      Wrapped<String?>? responsiblePersonOfficeExtension,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
          defaultFieldAttributes}) {
    return WebApiModulesWarehouseContractContract(
        contractId: (contractId != null ? contractId.value : this.contractId),
        contractNumber: (contractNumber != null
            ? contractNumber.value
            : this.contractNumber),
        contractType:
            (contractType != null ? contractType.value : this.contractType),
        contractDate:
            (contractDate != null ? contractDate.value : this.contractDate),
        contractTime:
            (contractTime != null ? contractTime.value : this.contractTime),
        locationId: (locationId != null ? locationId.value : this.locationId),
        locationCode:
            (locationCode != null ? locationCode.value : this.locationCode),
        location: (location != null ? location.value : this.location),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        warehouseCode:
            (warehouseCode != null ? warehouseCode.value : this.warehouseCode),
        warehouse: (warehouse != null ? warehouse.value : this.warehouse),
        customerId: (customerId != null ? customerId.value : this.customerId),
        customer: (customer != null ? customer.value : this.customer),
        dealId: (dealId != null ? dealId.value : this.dealId),
        deal: (deal != null ? deal.value : this.deal),
        orderId: (orderId != null ? orderId.value : this.orderId),
        orderNumber:
            (orderNumber != null ? orderNumber.value : this.orderNumber),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        department: (department != null ? department.value : this.department),
        purchaseOrderId: (purchaseOrderId != null
            ? purchaseOrderId.value
            : this.purchaseOrderId),
        purchaseOrderNumber: (purchaseOrderNumber != null
            ? purchaseOrderNumber.value
            : this.purchaseOrderNumber),
        requisitionNumber: (requisitionNumber != null
            ? requisitionNumber.value
            : this.requisitionNumber),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        vendor: (vendor != null ? vendor.value : this.vendor),
        isMigrated: (isMigrated != null ? isMigrated.value : this.isMigrated),
        unassigned: (unassigned != null ? unassigned.value : this.unassigned),
        needReconcile:
            (needReconcile != null ? needReconcile.value : this.needReconcile),
        pendingExchange: (pendingExchange != null
            ? pendingExchange.value
            : this.pendingExchange),
        exchangeContractId: (exchangeContractId != null
            ? exchangeContractId.value
            : this.exchangeContractId),
        rental: (rental != null ? rental.value : this.rental),
        sales: (sales != null ? sales.value : this.sales),
        exchange: (exchange != null ? exchange.value : this.exchange),
        inputByUserId:
            (inputByUserId != null ? inputByUserId.value : this.inputByUserId),
        inputByUser:
            (inputByUser != null ? inputByUser.value : this.inputByUser),
        dealInactive:
            (dealInactive != null ? dealInactive.value : this.dealInactive),
        truck: (truck != null ? truck.value : this.truck),
        billingDate:
            (billingDate != null ? billingDate.value : this.billingDate),
        billingDateChangeReason: (billingDateChangeReason != null
            ? billingDateChangeReason.value
            : this.billingDateChangeReason),
        lastBillingDateChangeReason: (lastBillingDateChangeReason != null
            ? lastBillingDateChangeReason.value
            : this.lastBillingDateChangeReason),
        billingDateAdjusted: (billingDateAdjusted != null
            ? billingDateAdjusted.value
            : this.billingDateAdjusted),
        hasVoId: (hasVoId != null ? hasVoId.value : this.hasVoId),
        hasTransfer:
            (hasTransfer != null ? hasTransfer.value : this.hasTransfer),
        sessionId: (sessionId != null ? sessionId.value : this.sessionId),
        orderDescription: (orderDescription != null
            ? orderDescription.value
            : this.orderDescription),
        poOrderDescription: (poOrderDescription != null
            ? poOrderDescription.value
            : this.poOrderDescription),
        deliveryId: (deliveryId != null ? deliveryId.value : this.deliveryId),
        deliveryDeliveryType: (deliveryDeliveryType != null
            ? deliveryDeliveryType.value
            : this.deliveryDeliveryType),
        deliveryRequiredDate: (deliveryRequiredDate != null
            ? deliveryRequiredDate.value
            : this.deliveryRequiredDate),
        deliveryRequiredTime: (deliveryRequiredTime != null
            ? deliveryRequiredTime.value
            : this.deliveryRequiredTime),
        deliveryTargetShipDate: (deliveryTargetShipDate != null
            ? deliveryTargetShipDate.value
            : this.deliveryTargetShipDate),
        deliveryTargetShipTime: (deliveryTargetShipTime != null
            ? deliveryTargetShipTime.value
            : this.deliveryTargetShipTime),
        deliveryDirection: (deliveryDirection != null
            ? deliveryDirection.value
            : this.deliveryDirection),
        deliveryAddressType: (deliveryAddressType != null
            ? deliveryAddressType.value
            : this.deliveryAddressType),
        deliveryFromLocation: (deliveryFromLocation != null
            ? deliveryFromLocation.value
            : this.deliveryFromLocation),
        deliveryFromContact: (deliveryFromContact != null
            ? deliveryFromContact.value
            : this.deliveryFromContact),
        deliveryFromContactPhone: (deliveryFromContactPhone != null
            ? deliveryFromContactPhone.value
            : this.deliveryFromContactPhone),
        deliveryFromAlternateContact: (deliveryFromAlternateContact != null
            ? deliveryFromAlternateContact.value
            : this.deliveryFromAlternateContact),
        deliveryFromAlternateContactPhone: (deliveryFromAlternateContactPhone != null
            ? deliveryFromAlternateContactPhone.value
            : this.deliveryFromAlternateContactPhone),
        deliveryFromAttention: (deliveryFromAttention != null
            ? deliveryFromAttention.value
            : this.deliveryFromAttention),
        deliveryFromAddress1: (deliveryFromAddress1 != null
            ? deliveryFromAddress1.value
            : this.deliveryFromAddress1),
        deliveryFromAddress2: (deliveryFromAddress2 != null
            ? deliveryFromAddress2.value
            : this.deliveryFromAddress2),
        deliveryFromCity: (deliveryFromCity != null
            ? deliveryFromCity.value
            : this.deliveryFromCity),
        deliveryFromState: (deliveryFromState != null
            ? deliveryFromState.value
            : this.deliveryFromState),
        deliveryFromZipCode: (deliveryFromZipCode != null
            ? deliveryFromZipCode.value
            : this.deliveryFromZipCode),
        deliveryFromCountry: (deliveryFromCountry != null
            ? deliveryFromCountry.value
            : this.deliveryFromCountry),
        deliveryFromCountryCodeIsoAlpha2: (deliveryFromCountryCodeIsoAlpha2 != null
            ? deliveryFromCountryCodeIsoAlpha2.value
            : this.deliveryFromCountryCodeIsoAlpha2),
        deliveryFromCountryCodePhone: (deliveryFromCountryCodePhone != null
            ? deliveryFromCountryCodePhone.value
            : this.deliveryFromCountryCodePhone),
        deliveryFromCountryId: (deliveryFromCountryId != null
            ? deliveryFromCountryId.value
            : this.deliveryFromCountryId),
        deliveryFromCrossStreets: (deliveryFromCrossStreets != null
            ? deliveryFromCrossStreets.value
            : this.deliveryFromCrossStreets),
        deliveryToLocation: (deliveryToLocation != null
            ? deliveryToLocation.value
            : this.deliveryToLocation),
        deliveryToContact: (deliveryToContact != null
            ? deliveryToContact.value
            : this.deliveryToContact),
        deliveryToContactPhone: (deliveryToContactPhone != null
            ? deliveryToContactPhone.value
            : this.deliveryToContactPhone),
        deliveryToAlternateContact: (deliveryToAlternateContact != null
            ? deliveryToAlternateContact.value
            : this.deliveryToAlternateContact),
        deliveryToAlternateContactPhone: (deliveryToAlternateContactPhone != null ? deliveryToAlternateContactPhone.value : this.deliveryToAlternateContactPhone),
        deliveryToAttention: (deliveryToAttention != null ? deliveryToAttention.value : this.deliveryToAttention),
        deliveryToAddress1: (deliveryToAddress1 != null ? deliveryToAddress1.value : this.deliveryToAddress1),
        deliveryToAddress2: (deliveryToAddress2 != null ? deliveryToAddress2.value : this.deliveryToAddress2),
        deliveryToCity: (deliveryToCity != null ? deliveryToCity.value : this.deliveryToCity),
        deliveryToState: (deliveryToState != null ? deliveryToState.value : this.deliveryToState),
        deliveryToZipCode: (deliveryToZipCode != null ? deliveryToZipCode.value : this.deliveryToZipCode),
        deliveryToCountryId: (deliveryToCountryId != null ? deliveryToCountryId.value : this.deliveryToCountryId),
        deliveryToCountry: (deliveryToCountry != null ? deliveryToCountry.value : this.deliveryToCountry),
        deliveryToCountryCodeIsoAlpha2: (deliveryToCountryCodeIsoAlpha2 != null ? deliveryToCountryCodeIsoAlpha2.value : this.deliveryToCountryCodeIsoAlpha2),
        deliveryToCountryCodePhone: (deliveryToCountryCodePhone != null ? deliveryToCountryCodePhone.value : this.deliveryToCountryCodePhone),
        deliveryToContactFax: (deliveryToContactFax != null ? deliveryToContactFax.value : this.deliveryToContactFax),
        deliveryToCrossStreets: (deliveryToCrossStreets != null ? deliveryToCrossStreets.value : this.deliveryToCrossStreets),
        deliveryDeliveryNotes: (deliveryDeliveryNotes != null ? deliveryDeliveryNotes.value : this.deliveryDeliveryNotes),
        deliveryCarrierId: (deliveryCarrierId != null ? deliveryCarrierId.value : this.deliveryCarrierId),
        deliveryCarrier: (deliveryCarrier != null ? deliveryCarrier.value : this.deliveryCarrier),
        deliveryCarrierAccount: (deliveryCarrierAccount != null ? deliveryCarrierAccount.value : this.deliveryCarrierAccount),
        deliveryShipViaId: (deliveryShipViaId != null ? deliveryShipViaId.value : this.deliveryShipViaId),
        deliveryShipVia: (deliveryShipVia != null ? deliveryShipVia.value : this.deliveryShipVia),
        deliveryInvoiceId: (deliveryInvoiceId != null ? deliveryInvoiceId.value : this.deliveryInvoiceId),
        deliveryVendorInvoiceId: (deliveryVendorInvoiceId != null ? deliveryVendorInvoiceId.value : this.deliveryVendorInvoiceId),
        deliveryEstimatedFreight: (deliveryEstimatedFreight != null ? deliveryEstimatedFreight.value : this.deliveryEstimatedFreight),
        deliveryFreightInvoiceAmount: (deliveryFreightInvoiceAmount != null ? deliveryFreightInvoiceAmount.value : this.deliveryFreightInvoiceAmount),
        deliveryChargeType: (deliveryChargeType != null ? deliveryChargeType.value : this.deliveryChargeType),
        deliveryFreightTrackingNumber: (deliveryFreightTrackingNumber != null ? deliveryFreightTrackingNumber.value : this.deliveryFreightTrackingNumber),
        deliveryFreightTrackingUrl: (deliveryFreightTrackingUrl != null ? deliveryFreightTrackingUrl.value : this.deliveryFreightTrackingUrl),
        deliveryDropShip: (deliveryDropShip != null ? deliveryDropShip.value : this.deliveryDropShip),
        deliveryPackageCode: (deliveryPackageCode != null ? deliveryPackageCode.value : this.deliveryPackageCode),
        deliveryBillPoFreightOnOrder: (deliveryBillPoFreightOnOrder != null ? deliveryBillPoFreightOnOrder.value : this.deliveryBillPoFreightOnOrder),
        deliveryOnlineOrderNumber: (deliveryOnlineOrderNumber != null ? deliveryOnlineOrderNumber.value : this.deliveryOnlineOrderNumber),
        deliveryOnlineOrderStatus: (deliveryOnlineOrderStatus != null ? deliveryOnlineOrderStatus.value : this.deliveryOnlineOrderStatus),
        deliveryToVenue: (deliveryToVenue != null ? deliveryToVenue.value : this.deliveryToVenue),
        deliveryToVenueId: (deliveryToVenueId != null ? deliveryToVenueId.value : this.deliveryToVenueId),
        deliveryDateStamp: (deliveryDateStamp != null ? deliveryDateStamp.value : this.deliveryDateStamp),
        note: (note != null ? note.value : this.note),
        printNoteOnOrder: (printNoteOnOrder != null ? printNoteOnOrder.value : this.printNoteOnOrder),
        termsConditionsId: (termsConditionsId != null ? termsConditionsId.value : this.termsConditionsId),
        quikReceiptTermsConditionsId: (quikReceiptTermsConditionsId != null ? quikReceiptTermsConditionsId.value : this.quikReceiptTermsConditionsId),
        quikReceiptTermsConditions: (quikReceiptTermsConditions != null ? quikReceiptTermsConditions.value : this.quikReceiptTermsConditions),
        termsConditions: (termsConditions != null ? termsConditions.value : this.termsConditions),
        containerId: (containerId != null ? containerId.value : this.containerId),
        containerItemId: (containerItemId != null ? containerItemId.value : this.containerItemId),
        containerDescription: (containerDescription != null ? containerDescription.value : this.containerDescription),
        containerScannableBarCode: (containerScannableBarCode != null ? containerScannableBarCode.value : this.containerScannableBarCode),
        containerScannableItemId: (containerScannableItemId != null ? containerScannableItemId.value : this.containerScannableItemId),
        responsiblePersonId: (responsiblePersonId != null ? responsiblePersonId.value : this.responsiblePersonId),
        responsiblePerson: (responsiblePerson != null ? responsiblePerson.value : this.responsiblePerson),
        responsiblePersonEmail: (responsiblePersonEmail != null ? responsiblePersonEmail.value : this.responsiblePersonEmail),
        responsiblePersonMobilePhone: (responsiblePersonMobilePhone != null ? responsiblePersonMobilePhone.value : this.responsiblePersonMobilePhone),
        responsiblePersonOfficePhone: (responsiblePersonOfficePhone != null ? responsiblePersonOfficePhone.value : this.responsiblePersonOfficePhone),
        responsiblePersonOfficeExtension: (responsiblePersonOfficeExtension != null ? responsiblePersonOfficeExtension.value : this.responsiblePersonOfficeExtension),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle: (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null ? defaultFieldAttributes.value : this.defaultFieldAttributes));
  }
}

String? fwStandardSqlServerFwDataTypesToJson(
    enums.FwStandardSqlServerFwDataTypes? fwStandardSqlServerFwDataTypes) {
  return enums
      .$FwStandardSqlServerFwDataTypesMap[fwStandardSqlServerFwDataTypes];
}

enums.FwStandardSqlServerFwDataTypes fwStandardSqlServerFwDataTypesFromJson(
  Object? fwStandardSqlServerFwDataTypes, [
  enums.FwStandardSqlServerFwDataTypes? defaultValue,
]) {
  if (fwStandardSqlServerFwDataTypes is String) {
    return enums.$FwStandardSqlServerFwDataTypesMap.entries
        .firstWhere(
            (element) =>
                element.value.toLowerCase() ==
                fwStandardSqlServerFwDataTypes.toLowerCase(),
            orElse: () => const MapEntry(
                enums.FwStandardSqlServerFwDataTypes.swaggerGeneratedUnknown,
                ''))
        .key;
  }

  final parsedResult = defaultValue == null
      ? null
      : enums.$FwStandardSqlServerFwDataTypesMap.entries
          .firstWhereOrNull((element) => element.value == defaultValue)
          ?.key;

  return parsedResult ??
      defaultValue ??
      enums.FwStandardSqlServerFwDataTypes.swaggerGeneratedUnknown;
}

List<String> fwStandardSqlServerFwDataTypesListToJson(
    List<enums.FwStandardSqlServerFwDataTypes>?
        fwStandardSqlServerFwDataTypes) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return [];
  }

  return fwStandardSqlServerFwDataTypes
      .map((e) => enums.$FwStandardSqlServerFwDataTypesMap[e]!)
      .toList();
}

List<enums.FwStandardSqlServerFwDataTypes>
    fwStandardSqlServerFwDataTypesListFromJson(
  List? fwStandardSqlServerFwDataTypes, [
  List<enums.FwStandardSqlServerFwDataTypes>? defaultValue,
]) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return defaultValue ?? [];
  }

  return fwStandardSqlServerFwDataTypes
      .map((e) => fwStandardSqlServerFwDataTypesFromJson(e.toString()))
      .toList();
}

List<enums.FwStandardSqlServerFwDataTypes>?
    fwStandardSqlServerFwDataTypesNullableListFromJson(
  List? fwStandardSqlServerFwDataTypes, [
  List<enums.FwStandardSqlServerFwDataTypes>? defaultValue,
]) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return defaultValue;
  }

  return fwStandardSqlServerFwDataTypes
      .map((e) => fwStandardSqlServerFwDataTypesFromJson(e.toString()))
      .toList();
}

typedef $JsonFactory<T> = T Function(Map<String, dynamic> json);

class $CustomJsonDecoder {
  $CustomJsonDecoder(this.factories);

  final Map<Type, $JsonFactory> factories;

  dynamic decode<T>(dynamic entity) {
    if (entity is Iterable) {
      return _decodeList<T>(entity);
    }

    if (entity is T) {
      return entity;
    }

    if (isTypeOf<T, Map>()) {
      return entity;
    }

    if (isTypeOf<T, Iterable>()) {
      return entity;
    }

    if (entity is Map<String, dynamic>) {
      return _decodeMap<T>(entity);
    }

    return entity;
  }

  T _decodeMap<T>(Map<String, dynamic> values) {
    final jsonFactory = factories[T];
    if (jsonFactory == null || jsonFactory is! $JsonFactory<T>) {
      return throw "Could not find factory for type $T. Is '$T: $T.fromJsonFactory' included in the CustomJsonDecoder instance creation in bootstrapper.dart?";
    }

    return jsonFactory(values);
  }

  List<T> _decodeList<T>(Iterable values) =>
      values.where((v) => v != null).map<T>((v) => decode<T>(v) as T).toList();
}

class $JsonSerializableConverter extends chopper.JsonConverter {
  @override
  FutureOr<chopper.Response<ResultType>> convertResponse<ResultType, Item>(
      chopper.Response response) async {
    if (response.bodyString.isEmpty) {
      // In rare cases, when let's say 204 (no content) is returned -
      // we cannot decode the missing json with the result type specified
      return chopper.Response(response.base, null, error: response.error);
    }

    final jsonRes = await super.convertResponse(response);
    return jsonRes.copyWith<ResultType>(
        body: $jsonDecoder.decode<Item>(jsonRes.body) as ResultType);
  }
}

final $jsonDecoder = $CustomJsonDecoder(generatedMapping);

// ignore: unused_element
String? _dateToJson(DateTime? date) {
  if (date == null) {
    return null;
  }

  final year = date.year.toString();
  final month = date.month < 10 ? '0${date.month}' : date.month.toString();
  final day = date.day < 10 ? '0${date.day}' : date.day.toString();

  return '$year-$month-$day';
}

class Wrapped<T> {
  final T value;
  const Wrapped.value(this.value);
}
