// ignore_for_file: type=lint

import 'package:json_annotation/json_annotation.dart';
import 'package:collection/collection.dart';
import 'dart:convert';

import 'package:chopper/chopper.dart';

import 'client_mapping.dart';
import 'dart:async';
import 'package:chopper/chopper.dart' as chopper;
import 'reports.enums.swagger.dart' as enums;
export 'reports.enums.swagger.dart';

part 'reports.swagger.chopper.dart';
part 'reports.swagger.g.dart';

// **************************************************************************
// SwaggerChopperGenerator
// **************************************************************************

@ChopperApi()
abstract class Reports extends ChopperService {
  static Reports create({
    ChopperClient? client,
    Authenticator? authenticator,
    Uri? baseUrl,
    Iterable<dynamic>? interceptors,
  }) {
    if (client != null) {
      return _$Reports(client);
    }

    final newClient = ChopperClient(
      services: [_$Reports()],
      converter: $JsonSerializableConverter(),
      interceptors: interceptors ?? [],
      authenticator: authenticator, /*baseUrl: YOUR_BASE_URL*/
    );
    return _$Reports(newClient);
  }

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      agentbillingreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _agentbillingreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/agentbillingreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _agentbillingreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      agentbillingreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _agentbillingreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/agentbillingreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _agentbillingreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> agentbillingreportRunreportPost(
      {required WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _agentbillingreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/agentbillingreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _agentbillingreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _agentbillingreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/agentbillingreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _agentbillingreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportValidateagentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _agentbillingreportValidateagentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/agentbillingreport/validateagent/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _agentbillingreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _agentbillingreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/agentbillingreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _agentbillingreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _agentbillingreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/agentbillingreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _agentbillingreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _agentbillingreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/agentbillingreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _agentbillingreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _agentbillingreportEmptyobjectGet();
  }

  ///
  @Get(path: '/agentbillingreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _agentbillingreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _agentbillingreportPreviewGet();
  }

  ///
  @Get(path: '/agentbillingreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _agentbillingreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      aragingreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _aragingreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/aragingreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _aragingreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      aragingreportExportexcelxlsxPost(
          {required WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _aragingreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/aragingreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _aragingreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest?
                  body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> aragingreportRunreportPost(
      {required WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _aragingreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/aragingreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> _aragingreportRunreportPost(
      {@Body()
          required WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/aragingreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/aragingreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportValidatedealtypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingreportValidatedealtypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/aragingreport/validatedealtype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportValidatedealcsrBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingreportValidatedealcsrBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/aragingreport/validatedealcsr/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingreportValidatedealcsrBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/aragingreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingreportEmptyobjectGet();
  }

  ///
  @Get(path: '/aragingreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingreportPreviewGet();
  }

  ///
  @Get(path: '/aragingreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      aragingsummaryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _aragingsummaryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/aragingsummaryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _aragingsummaryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      aragingsummaryreportExportexcelxlsxPost(
          {required WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _aragingsummaryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/aragingsummaryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _aragingsummaryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> aragingsummaryreportRunreportPost(
      {required WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _aragingsummaryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/aragingsummaryreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _aragingsummaryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingsummaryreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingsummaryreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/aragingsummaryreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingsummaryreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingsummaryreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingsummaryreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/aragingsummaryreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingsummaryreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingsummaryreportValidatedealtypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingsummaryreportValidatedealtypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/aragingsummaryreport/validatedealtype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingsummaryreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingsummaryreportValidatedealcsrBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingsummaryreportValidatedealcsrBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/aragingsummaryreport/validatedealcsr/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingsummaryreportValidatedealcsrBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingsummaryreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingsummaryreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/aragingsummaryreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingsummaryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingsummaryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingsummaryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/aragingsummaryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingsummaryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingsummaryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _aragingsummaryreportPreviewGet();
  }

  ///
  @Get(path: '/aragingsummaryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _aragingsummaryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      billinganalysisreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _billinganalysisreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/billinganalysisreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _billinganalysisreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      billinganalysisreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _billinganalysisreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/billinganalysisreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _billinganalysisreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> billinganalysisreportRunreportPost(
      {required WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _billinganalysisreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/billinganalysisreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _billinganalysisreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billinganalysisreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billinganalysisreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billinganalysisreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billinganalysisreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billinganalysisreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billinganalysisreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billinganalysisreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billinganalysisreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billinganalysisreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportValidateprojectBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billinganalysisreportValidateprojectBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billinganalysisreport/validateproject/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billinganalysisreportValidateprojectBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportValidateagentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billinganalysisreportValidateagentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billinganalysisreport/validateagent/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billinganalysisreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billinganalysisreportEmptyobjectGet();
  }

  ///
  @Get(path: '/billinganalysisreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billinganalysisreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billinganalysisreportPreviewGet();
  }

  ///
  @Get(path: '/billinganalysisreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billinganalysisreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      billingprogressreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _billingprogressreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/billingprogressreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _billingprogressreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      billingprogressreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _billingprogressreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/billingprogressreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _billingprogressreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> billingprogressreportRunreportPost(
      {required WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _billingprogressreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/billingprogressreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _billingprogressreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingprogressreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingprogressreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingprogressreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingprogressreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingprogressreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingprogressreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingprogressreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingprogressreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingprogressreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidatedealcsrBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingprogressreportValidatedealcsrBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingprogressreport/validatedealcsr/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingprogressreportValidatedealcsrBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingprogressreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingprogressreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingprogressreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidatedealtypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingprogressreportValidatedealtypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingprogressreport/validatedealtype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingprogressreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidateagentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingprogressreportValidateagentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingprogressreport/validateagent/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingprogressreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingprogressreportEmptyobjectGet();
  }

  ///
  @Get(path: '/billingprogressreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingprogressreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingprogressreportPreviewGet();
  }

  ///
  @Get(path: '/billingprogressreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingprogressreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      billingschedulereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _billingschedulereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/billingschedulereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _billingschedulereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> billingschedulereportRunreportPost(
      {required WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _billingschedulereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/billingschedulereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _billingschedulereportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingschedulereportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingschedulereportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingschedulereport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingschedulereportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingschedulereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingschedulereportEmptyobjectGet();
  }

  ///
  @Get(path: '/billingschedulereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingschedulereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingschedulereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingschedulereportPreviewGet();
  }

  ///
  @Get(path: '/billingschedulereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingschedulereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      billingstatementreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _billingstatementreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/billingstatementreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _billingstatementreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      billingstatementreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _billingstatementreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/billingstatementreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _billingstatementreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> billingstatementreportRunreportPost(
      {required WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _billingstatementreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/billingstatementreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _billingstatementreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingstatementreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingstatementreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingstatementreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingstatementreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingstatementreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingstatementreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingstatementreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingstatementreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingstatementreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportValidatedealstatusBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingstatementreportValidatedealstatusBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingstatementreport/validatedealstatus/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingstatementreportValidatedealstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportValidatedealtypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingstatementreportValidatedealtypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/billingstatementreport/validatedealtype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingstatementreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingstatementreportEmptyobjectGet();
  }

  ///
  @Get(path: '/billingstatementreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingstatementreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _billingstatementreportPreviewGet();
  }

  ///
  @Get(path: '/billingstatementreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _billingstatementreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      brochureanalysisreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _brochureanalysisreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/brochureanalysisreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _brochureanalysisreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      brochureanalysisreportExportexcelxlsxPost(
          {required WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _brochureanalysisreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/brochureanalysisreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _brochureanalysisreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> brochureanalysisreportRunreportPost(
      {required WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _brochureanalysisreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/brochureanalysisreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _brochureanalysisreportRunreportPost(
      {@Body()
          required WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      brochureanalysisreportValidateoriginalshowBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _brochureanalysisreportValidateoriginalshowBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/brochureanalysisreport/validateoriginalshow/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _brochureanalysisreportValidateoriginalshowBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      brochureanalysisreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _brochureanalysisreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/brochureanalysisreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _brochureanalysisreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      brochureanalysisreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _brochureanalysisreportEmptyobjectGet();
  }

  ///
  @Get(path: '/brochureanalysisreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _brochureanalysisreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      brochureanalysisreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _brochureanalysisreportPreviewGet();
  }

  ///
  @Get(path: '/brochureanalysisreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _brochureanalysisreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      changeauditreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _changeauditreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/changeauditreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _changeauditreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      changeauditreportExportexcelxlsxPost(
          {required WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _changeauditreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/changeauditreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _changeauditreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> changeauditreportRunreportPost(
      {required WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _changeauditreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/changeauditreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _changeauditreportRunreportPost(
      {@Body()
          required WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeauditreportValidatewebusersBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _changeauditreportValidatewebusersBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/changeauditreport/validatewebusers/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _changeauditreportValidatewebusersBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeauditreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _changeauditreportEmptyobjectGet();
  }

  ///
  @Get(path: '/changeauditreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _changeauditreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeauditreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _changeauditreportPreviewGet();
  }

  ///
  @Get(path: '/changeauditreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _changeauditreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      consignedinventoryorderhistoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _consignedinventoryorderhistoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryorderhistoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _consignedinventoryorderhistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      consignedinventoryorderhistoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _consignedinventoryorderhistoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryorderhistoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _consignedinventoryorderhistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      consignedinventoryorderhistoryreportRunreportPost(
          {required WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _consignedinventoryorderhistoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryorderhistoryreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _consignedinventoryorderhistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryorderhistoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryorderhistoryreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryorderhistoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryorderhistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryorderhistoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryorderhistoryreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryorderhistoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryorderhistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryorderhistoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryorderhistoryreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryorderhistoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryorderhistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryorderhistoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryorderhistoryreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryorderhistoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryorderhistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryorderhistoryreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryorderhistoryreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryorderhistoryreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryorderhistoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryorderhistoryreportValidateconsignoragreementBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryorderhistoryreportValidateconsignoragreementBrowsePost(
        body: body);
  }

  ///
  @Post(
    path:
        '/consignedinventoryorderhistoryreport/validateconsignoragreement/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryorderhistoryreportValidateconsignoragreementBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryorderhistoryreportValidateconsignorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryorderhistoryreportValidateconsignorBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryorderhistoryreport/validateconsignor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryorderhistoryreportValidateconsignorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryorderhistoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryorderhistoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/consignedinventoryorderhistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryorderhistoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryorderhistoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryorderhistoryreportPreviewGet();
  }

  ///
  @Get(path: '/consignedinventoryorderhistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryorderhistoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      consignedinventoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _consignedinventoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _consignedinventoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      consignedinventoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _consignedinventoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _consignedinventoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> consignedinventoryreportRunreportPost(
      {required WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _consignedinventoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _consignedinventoryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryreportValidateinventorytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryreportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryreportValidateconsignoragreementBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryreportValidateconsignoragreementBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryreport/validateconsignoragreement/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryreportValidateconsignoragreementBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryreportValidateconsignorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryreportValidateconsignorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/consignedinventoryreport/validateconsignor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryreportValidateconsignorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/consignedinventoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignedinventoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignedinventoryreportPreviewGet();
  }

  ///
  @Get(path: '/consignedinventoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignedinventoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      consignorinventorystatusandlocationreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _consignorinventorystatusandlocationreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/consignorinventorystatusandlocationreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _consignorinventorystatusandlocationreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      consignorinventorystatusandlocationreportExportexcelxlsxPost(
          {required WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _consignorinventorystatusandlocationreportExportexcelxlsxPost(
        body: body);
  }

  ///
  @Post(
    path: '/consignorinventorystatusandlocationreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _consignorinventorystatusandlocationreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      consignorinventorystatusandlocationreportRunreportPost(
          {required WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _consignorinventorystatusandlocationreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/consignorinventorystatusandlocationreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _consignorinventorystatusandlocationreportRunreportPost(
          {@Body()
              required WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorinventorystatusandlocationreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorinventorystatusandlocationreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignorinventorystatusandlocationreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorinventorystatusandlocationreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorinventorystatusandlocationreportValidateconsignoragreementBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorinventorystatusandlocationreportValidateconsignoragreementBrowsePost(
        body: body);
  }

  ///
  @Post(
    path:
        '/consignorinventorystatusandlocationreport/validateconsignoragreement/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorinventorystatusandlocationreportValidateconsignoragreementBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorinventorystatusandlocationreportValidateconsignorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorinventorystatusandlocationreportValidateconsignorBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignorinventorystatusandlocationreport/validateconsignor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorinventorystatusandlocationreportValidateconsignorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorinventorystatusandlocationreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorinventorystatusandlocationreportEmptyobjectGet();
  }

  ///
  @Get(path: '/consignorinventorystatusandlocationreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorinventorystatusandlocationreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorinventorystatusandlocationreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorinventorystatusandlocationreportPreviewGet();
  }

  ///
  @Get(path: '/consignorinventorystatusandlocationreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorinventorystatusandlocationreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      consignoritemsreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _consignoritemsreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/consignoritemsreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _consignoritemsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      consignoritemsreportExportexcelxlsxPost(
          {required WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _consignoritemsreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/consignoritemsreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _consignoritemsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> consignoritemsreportRunreportPost(
      {required WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _consignoritemsreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/consignoritemsreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _consignoritemsreportRunreportPost(
      {@Body()
          required WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignoritemsreportValidateconsignoragreementBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignoritemsreportValidateconsignoragreementBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignoritemsreport/validateconsignoragreement/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignoritemsreportValidateconsignoragreementBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignoritemsreportValidateconsignorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignoritemsreportValidateconsignorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/consignoritemsreport/validateconsignor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignoritemsreportValidateconsignorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignoritemsreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignoritemsreportEmptyobjectGet();
  }

  ///
  @Get(path: '/consignoritemsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignoritemsreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignoritemsreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignoritemsreportPreviewGet();
  }

  ///
  @Get(path: '/consignoritemsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignoritemsreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      consignorsettlementreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _consignorsettlementreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/consignorsettlementreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _consignorsettlementreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      consignorsettlementreportExportexcelxlsxPost(
          {required WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _consignorsettlementreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/consignorsettlementreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _consignorsettlementreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> consignorsettlementreportRunreportPost(
      {required WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _consignorsettlementreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/consignorsettlementreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _consignorsettlementreportRunreportPost(
      {@Body()
          required WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorsettlementreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorsettlementreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignorsettlementreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorsettlementreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorsettlementreportValidateconsignoragreementBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorsettlementreportValidateconsignoragreementBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignorsettlementreport/validateconsignoragreement/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorsettlementreportValidateconsignoragreementBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorsettlementreportValidateconsignorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorsettlementreportValidateconsignorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/consignorsettlementreport/validateconsignor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorsettlementreportValidateconsignorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorsettlementreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorsettlementreportEmptyobjectGet();
  }

  ///
  @Get(path: '/consignorsettlementreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorsettlementreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorsettlementreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorsettlementreportPreviewGet();
  }

  ///
  @Get(path: '/consignorsettlementreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorsettlementreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      consignorstatementreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _consignorstatementreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/consignorstatementreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _consignorstatementreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      consignorstatementreportExportexcelxlsxPost(
          {required WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _consignorstatementreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/consignorstatementreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _consignorstatementreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> consignorstatementreportRunreportPost(
      {required WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _consignorstatementreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/consignorstatementreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _consignorstatementreportRunreportPost(
      {@Body()
          required WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorstatementreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorstatementreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignorstatementreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorstatementreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorstatementreportValidateconsignoragreementBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorstatementreportValidateconsignoragreementBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/consignorstatementreport/validateconsignoragreement/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorstatementreportValidateconsignoragreementBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorstatementreportValidateconsignorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorstatementreportValidateconsignorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/consignorstatementreport/validateconsignor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorstatementreportValidateconsignorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorstatementreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorstatementreportEmptyobjectGet();
  }

  ///
  @Get(path: '/consignorstatementreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorstatementreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      consignorstatementreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _consignorstatementreportPreviewGet();
  }

  ///
  @Get(path: '/consignorstatementreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _consignorstatementreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      containerpackinglistRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _containerpackinglistRenderPost(body: body);
  }

  ///
  @Post(
    path: '/containerpackinglist/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _containerpackinglistRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> containerpackinglistRunreportPost(
      {required WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _containerpackinglistRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/containerpackinglist/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _containerpackinglistRunreportPost(
      {@Body()
          required WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      containerpackinglistEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _containerpackinglistEmptyobjectGet();
  }

  ///
  @Get(path: '/containerpackinglist/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _containerpackinglistEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      containerpackinglistPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _containerpackinglistPreviewGet();
  }

  ///
  @Get(path: '/containerpackinglist/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _containerpackinglistPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      contractrevisionreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _contractrevisionreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/contractrevisionreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _contractrevisionreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      contractrevisionreportExportexcelxlsxPost(
          {required WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _contractrevisionreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/contractrevisionreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _contractrevisionreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> contractrevisionreportRunreportPost(
      {required WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _contractrevisionreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/contractrevisionreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _contractrevisionreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contractrevisionreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _contractrevisionreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/contractrevisionreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _contractrevisionreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contractrevisionreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _contractrevisionreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/contractrevisionreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _contractrevisionreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contractrevisionreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _contractrevisionreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/contractrevisionreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _contractrevisionreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contractrevisionreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _contractrevisionreportEmptyobjectGet();
  }

  ///
  @Get(path: '/contractrevisionreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _contractrevisionreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contractrevisionreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _contractrevisionreportPreviewGet();
  }

  ///
  @Get(path: '/contractrevisionreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _contractrevisionreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      createinvoiceprocessreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _createinvoiceprocessreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/createinvoiceprocessreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _createinvoiceprocessreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      createinvoiceprocessreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _createinvoiceprocessreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/createinvoiceprocessreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _createinvoiceprocessreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> createinvoiceprocessreportRunreportPost(
      {required WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _createinvoiceprocessreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/createinvoiceprocessreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _createinvoiceprocessreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      createinvoiceprocessreportValidateinvoicecreationbatchBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _createinvoiceprocessreportValidateinvoicecreationbatchBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/createinvoiceprocessreport/validateinvoicecreationbatch/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _createinvoiceprocessreportValidateinvoicecreationbatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      createinvoiceprocessreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _createinvoiceprocessreportEmptyobjectGet();
  }

  ///
  @Get(path: '/createinvoiceprocessreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _createinvoiceprocessreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      createinvoiceprocessreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _createinvoiceprocessreportPreviewGet();
  }

  ///
  @Get(path: '/createinvoiceprocessreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _createinvoiceprocessreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      creditsonaccountreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _creditsonaccountreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/creditsonaccountreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _creditsonaccountreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      creditsonaccountreportExportexcelxlsxPost(
          {required WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _creditsonaccountreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/creditsonaccountreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _creditsonaccountreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> creditsonaccountreportRunreportPost(
      {required WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _creditsonaccountreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/creditsonaccountreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _creditsonaccountreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditsonaccountreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _creditsonaccountreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/creditsonaccountreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _creditsonaccountreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditsonaccountreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _creditsonaccountreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/creditsonaccountreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _creditsonaccountreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditsonaccountreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _creditsonaccountreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/creditsonaccountreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _creditsonaccountreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditsonaccountreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _creditsonaccountreportEmptyobjectGet();
  }

  ///
  @Get(path: '/creditsonaccountreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _creditsonaccountreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditsonaccountreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _creditsonaccountreportPreviewGet();
  }

  ///
  @Get(path: '/creditsonaccountreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _creditsonaccountreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      crewsigninreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _crewsigninreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/crewsigninreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _crewsigninreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      crewsigninreportExportexcelxlsxPost(
          {required WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _crewsigninreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/crewsigninreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _crewsigninreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest?
                  body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> crewsigninreportRunreportPost(
      {required WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _crewsigninreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/crewsigninreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _crewsigninreportRunreportPost(
      {@Body()
          required WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _crewsigninreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/crewsigninreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _crewsigninreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _crewsigninreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/crewsigninreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _crewsigninreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _crewsigninreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/crewsigninreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _crewsigninreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _crewsigninreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/crewsigninreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _crewsigninreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _crewsigninreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/crewsigninreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _crewsigninreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _crewsigninreportEmptyobjectGet();
  }

  ///
  @Get(path: '/crewsigninreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _crewsigninreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _crewsigninreportPreviewGet();
  }

  ///
  @Get(path: '/crewsigninreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _crewsigninreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      customerrevenuebymonthreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _customerrevenuebymonthreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebymonthreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _customerrevenuebymonthreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      customerrevenuebymonthreportExportexcelxlsxPost(
          {required WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _customerrevenuebymonthreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebymonthreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _customerrevenuebymonthreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> customerrevenuebymonthreportRunreportPost(
      {required WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _customerrevenuebymonthreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebymonthreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _customerrevenuebymonthreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebymonthreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebymonthreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebymonthreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebymonthreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebymonthreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebymonthreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebymonthreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebymonthreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebymonthreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidatecustomertypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebymonthreportValidatecustomertypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebymonthreport/validatecustomertype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebymonthreportValidatecustomertypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebymonthreportValidatedepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebymonthreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebymonthreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidatedealtypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebymonthreportValidatedealtypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebymonthreport/validatedealtype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebymonthreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebymonthreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebymonthreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebymonthreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebymonthreportEmptyobjectGet();
  }

  ///
  @Get(path: '/customerrevenuebymonthreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebymonthreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebymonthreportPreviewGet();
  }

  ///
  @Get(path: '/customerrevenuebymonthreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebymonthreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      customerrevenuebytypereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _customerrevenuebytypereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebytypereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _customerrevenuebytypereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      customerrevenuebytypereportExportexcelxlsxPost(
          {required WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _customerrevenuebytypereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebytypereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _customerrevenuebytypereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> customerrevenuebytypereportRunreportPost(
      {required WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _customerrevenuebytypereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebytypereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _customerrevenuebytypereportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebytypereportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebytypereport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebytypereportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidatecurrencyBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebytypereportValidatecurrencyBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebytypereport/validatecurrency/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebytypereportValidatecurrencyBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebytypereportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebytypereport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebytypereportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebytypereportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebytypereport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebytypereportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidatedealtypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebytypereportValidatedealtypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebytypereport/validatedealtype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebytypereportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebytypereportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebytypereport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebytypereportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidateordertypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebytypereportValidateordertypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/customerrevenuebytypereport/validateordertype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebytypereportValidateordertypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebytypereportEmptyobjectGet();
  }

  ///
  @Get(path: '/customerrevenuebytypereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebytypereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _customerrevenuebytypereportPreviewGet();
  }

  ///
  @Get(path: '/customerrevenuebytypereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _customerrevenuebytypereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      dailyreceiptsreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _dailyreceiptsreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/dailyreceiptsreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _dailyreceiptsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dailyreceiptsreportExportexcelxlsxPost(
          {required WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _dailyreceiptsreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/dailyreceiptsreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _dailyreceiptsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> dailyreceiptsreportRunreportPost(
      {required WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _dailyreceiptsreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/dailyreceiptsreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _dailyreceiptsreportRunreportPost(
      {@Body()
          required WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dailyreceiptsreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dailyreceiptsreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dailyreceiptsreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dailyreceiptsreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dailyreceiptsreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dailyreceiptsreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dailyreceiptsreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dailyreceiptsreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dailyreceiptsreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportValidatepaymenttypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dailyreceiptsreportValidatepaymenttypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dailyreceiptsreport/validatepaymenttype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dailyreceiptsreportValidatepaymenttypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dailyreceiptsreportEmptyobjectGet();
  }

  ///
  @Get(path: '/dailyreceiptsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dailyreceiptsreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dailyreceiptsreportPreviewGet();
  }

  ///
  @Get(path: '/dailyreceiptsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dailyreceiptsreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      dealinvoicebatchreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _dealinvoicebatchreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/dealinvoicebatchreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _dealinvoicebatchreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dealinvoicebatchreportExportexcelxlsxPost(
          {required WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _dealinvoicebatchreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/dealinvoicebatchreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _dealinvoicebatchreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> dealinvoicebatchreportRunreportPost(
      {required WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _dealinvoicebatchreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/dealinvoicebatchreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _dealinvoicebatchreportRunreportPost(
      {@Body()
          required WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicebatchreportValidatebatchBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealinvoicebatchreportValidatebatchBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealinvoicebatchreport/validatebatch/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealinvoicebatchreportValidatebatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicebatchreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealinvoicebatchreportEmptyobjectGet();
  }

  ///
  @Get(path: '/dealinvoicebatchreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealinvoicebatchreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicebatchreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealinvoicebatchreportPreviewGet();
  }

  ///
  @Get(path: '/dealinvoicebatchreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealinvoicebatchreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      dealinvoicedetailreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _dealinvoicedetailreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/dealinvoicedetailreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _dealinvoicedetailreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dealinvoicedetailreportExportexcelxlsxPost(
          {required WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _dealinvoicedetailreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/dealinvoicedetailreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _dealinvoicedetailreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> dealinvoicedetailreportRunreportPost(
      {required WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _dealinvoicedetailreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/dealinvoicedetailreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _dealinvoicedetailreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealinvoicedetailreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealinvoicedetailreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealinvoicedetailreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealinvoicedetailreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealinvoicedetailreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealinvoicedetailreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealinvoicedetailreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealinvoicedetailreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealinvoicedetailreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealinvoicedetailreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealinvoicedetailreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealinvoicedetailreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealinvoicedetailreportEmptyobjectGet();
  }

  ///
  @Get(path: '/dealinvoicedetailreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealinvoicedetailreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealinvoicedetailreportPreviewGet();
  }

  ///
  @Get(path: '/dealinvoicedetailreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealinvoicedetailreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      dealoutstandingitemsreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _dealoutstandingitemsreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _dealoutstandingitemsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dealoutstandingitemsreportExportexcelxlsxPost(
          {required WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _dealoutstandingitemsreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _dealoutstandingitemsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> dealoutstandingitemsreportRunreportPost(
      {required WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _dealoutstandingitemsreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _dealoutstandingitemsreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidateordertypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportValidateordertypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/validateordertype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportValidateordertypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/dealoutstandingitemsreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportEmptyobjectGet();
  }

  ///
  @Get(path: '/dealoutstandingitemsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _dealoutstandingitemsreportPreviewGet();
  }

  ///
  @Get(path: '/dealoutstandingitemsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _dealoutstandingitemsreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      depreciationgldetailreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _depreciationgldetailreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/depreciationgldetailreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _depreciationgldetailreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      depreciationgldetailreportExportexcelxlsxPost(
          {required WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _depreciationgldetailreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/depreciationgldetailreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _depreciationgldetailreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> depreciationgldetailreportRunreportPost(
      {required WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _depreciationgldetailreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/depreciationgldetailreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _depreciationgldetailreportRunreportPost(
      {@Body()
          required WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      depreciationgldetailreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _depreciationgldetailreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/depreciationgldetailreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _depreciationgldetailreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      depreciationgldetailreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _depreciationgldetailreportEmptyobjectGet();
  }

  ///
  @Get(path: '/depreciationgldetailreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _depreciationgldetailreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      depreciationgldetailreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _depreciationgldetailreportPreviewGet();
  }

  ///
  @Get(path: '/depreciationgldetailreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _depreciationgldetailreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      exchangecontractreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _exchangecontractreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/exchangecontractreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _exchangecontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> exchangecontractreportRunreportPost(
      {required WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _exchangecontractreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/exchangecontractreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _exchangecontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      exchangecontractreportValidatecontractBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _exchangecontractreportValidatecontractBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/exchangecontractreport/validatecontract/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _exchangecontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      exchangecontractreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _exchangecontractreportEmptyobjectGet();
  }

  ///
  @Get(path: '/exchangecontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _exchangecontractreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      exchangecontractreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _exchangecontractreportPreviewGet();
  }

  ///
  @Get(path: '/exchangecontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _exchangecontractreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      fixedassetbookvaluereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _fixedassetbookvaluereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetbookvaluereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _fixedassetbookvaluereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      fixedassetbookvaluereportExportexcelxlsxPost(
          {required WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _fixedassetbookvaluereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetbookvaluereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _fixedassetbookvaluereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> fixedassetbookvaluereportRunreportPost(
      {required WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _fixedassetbookvaluereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetbookvaluereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _fixedassetbookvaluereportRunreportPost(
      {@Body()
          required WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetbookvaluereportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/fixedassetbookvaluereport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetbookvaluereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetbookvaluereportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetbookvaluereport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetbookvaluereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetbookvaluereportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetbookvaluereport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetbookvaluereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetbookvaluereportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetbookvaluereport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetbookvaluereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetbookvaluereportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetbookvaluereport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetbookvaluereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetbookvaluereportEmptyobjectGet();
  }

  ///
  @Get(path: '/fixedassetbookvaluereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetbookvaluereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetbookvaluereportPreviewGet();
  }

  ///
  @Get(path: '/fixedassetbookvaluereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetbookvaluereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      fixedassetdepreciationreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _fixedassetdepreciationreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetdepreciationreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _fixedassetdepreciationreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      fixedassetdepreciationreportExportexcelxlsxPost(
          {required WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _fixedassetdepreciationreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetdepreciationreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _fixedassetdepreciationreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> fixedassetdepreciationreportRunreportPost(
      {required WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _fixedassetdepreciationreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetdepreciationreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _fixedassetdepreciationreportRunreportPost(
      {@Body()
          required WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetdepreciationreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/fixedassetdepreciationreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetdepreciationreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetdepreciationreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetdepreciationreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetdepreciationreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetdepreciationreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/fixedassetdepreciationreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetdepreciationreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetdepreciationreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetdepreciationreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetdepreciationreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetdepreciationreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/fixedassetdepreciationreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetdepreciationreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetdepreciationreportEmptyobjectGet();
  }

  ///
  @Get(path: '/fixedassetdepreciationreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetdepreciationreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _fixedassetdepreciationreportPreviewGet();
  }

  ///
  @Get(path: '/fixedassetdepreciationreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _fixedassetdepreciationreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      gldistributionreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _gldistributionreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/gldistributionreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _gldistributionreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      gldistributionreportExportexcelxlsxPost(
          {required WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _gldistributionreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/gldistributionreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _gldistributionreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> gldistributionreportRunreportPost(
      {required WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _gldistributionreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/gldistributionreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _gldistributionreportRunreportPost(
      {@Body()
          required WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _gldistributionreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/gldistributionreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _gldistributionreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _gldistributionreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/gldistributionreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _gldistributionreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionreportValidateglaccountBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _gldistributionreportValidateglaccountBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/gldistributionreport/validateglaccount/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _gldistributionreportValidateglaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _gldistributionreportEmptyobjectGet();
  }

  ///
  @Get(path: '/gldistributionreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _gldistributionreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _gldistributionreportPreviewGet();
  }

  ///
  @Get(path: '/gldistributionreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _gldistributionreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributiontypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _gldistributiontypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/gldistributiontype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _gldistributiontypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      gldistributiontypeExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _gldistributiontypeExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/gldistributiontype/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _gldistributiontypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      incomegldetailreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _incomegldetailreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/incomegldetailreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _incomegldetailreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      incomegldetailreportExportexcelxlsxPost(
          {required WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _incomegldetailreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/incomegldetailreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _incomegldetailreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> incomegldetailreportRunreportPost(
      {required WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _incomegldetailreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/incomegldetailreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _incomegldetailreportRunreportPost(
      {@Body()
          required WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomegldetailreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _incomegldetailreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/incomegldetailreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _incomegldetailreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomegldetailreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _incomegldetailreportEmptyobjectGet();
  }

  ///
  @Get(path: '/incomegldetailreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _incomegldetailreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomegldetailreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _incomegldetailreportPreviewGet();
  }

  ///
  @Get(path: '/incomegldetailreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _incomegldetailreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      incomingdeliveryinstructionsRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _incomingdeliveryinstructionsRenderPost(body: body);
  }

  ///
  @Post(
    path: '/incomingdeliveryinstructions/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _incomingdeliveryinstructionsRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> incomingdeliveryinstructionsRunreportPost(
      {required WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _incomingdeliveryinstructionsRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/incomingdeliveryinstructions/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _incomingdeliveryinstructionsRunreportPost(
      {@Body()
          required WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomingdeliveryinstructionsEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _incomingdeliveryinstructionsEmptyobjectGet();
  }

  ///
  @Get(path: '/incomingdeliveryinstructions/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _incomingdeliveryinstructionsEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomingdeliveryinstructionsPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _incomingdeliveryinstructionsPreviewGet();
  }

  ///
  @Get(path: '/incomingdeliveryinstructions/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _incomingdeliveryinstructionsPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      incomingshippinglabelRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _incomingshippinglabelRenderPost(body: body);
  }

  ///
  @Post(
    path: '/incomingshippinglabel/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _incomingshippinglabelRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> incomingshippinglabelRunreportPost(
      {required WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _incomingshippinglabelRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/incomingshippinglabel/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _incomingshippinglabelRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomingshippinglabelValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _incomingshippinglabelValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/incomingshippinglabel/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _incomingshippinglabelValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomingshippinglabelEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _incomingshippinglabelEmptyobjectGet();
  }

  ///
  @Get(path: '/incomingshippinglabel/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _incomingshippinglabelEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomingshippinglabelPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _incomingshippinglabelPreviewGet();
  }

  ///
  @Get(path: '/incomingshippinglabel/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _incomingshippinglabelPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      incontractreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _incontractreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/incontractreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _incontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> incontractreportRunreportPost(
      {required WebApiModulesReportsContractReportsInContractReportInContractReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _incontractreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/incontractreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _incontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsInContractReportInContractReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incontractreportValidatecontractBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _incontractreportValidatecontractBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/incontractreport/validatecontract/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _incontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incontractreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _incontractreportEmptyobjectGet();
  }

  ///
  @Get(path: '/incontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _incontractreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incontractreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _incontractreportPreviewGet();
  }

  ///
  @Get(path: '/incontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _incontractreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      inventorybylocationreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _inventorybylocationreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/inventorybylocationreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _inventorybylocationreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorybylocationreportExportexcelxlsxPost(
          {required WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _inventorybylocationreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/inventorybylocationreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _inventorybylocationreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> inventorybylocationreportRunreportPost(
      {required WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _inventorybylocationreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/inventorybylocationreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _inventorybylocationreportRunreportPost(
      {@Body()
          required WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorybylocationreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorybylocationreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventorybylocationreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorybylocationreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorybylocationreportValidatecompanydepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorybylocationreportValidatecompanydepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorybylocationreport/validatecompanydepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorybylocationreportValidatecompanydepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorybylocationreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorybylocationreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventorybylocationreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorybylocationreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorybylocationreportValidateinventorystatusBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorybylocationreportValidateinventorystatusBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorybylocationreport/validateinventorystatus/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorybylocationreportValidateinventorystatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorybylocationreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorybylocationreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorybylocationreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorybylocationreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorybylocationreportValidateoriginalshowBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorybylocationreportValidateoriginalshowBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventorybylocationreport/validateoriginalshow/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorybylocationreportValidateoriginalshowBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorybylocationreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorybylocationreportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventorybylocationreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorybylocationreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorybylocationreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorybylocationreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventorybylocationreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorybylocationreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorybylocationreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorybylocationreportEmptyobjectGet();
  }

  ///
  @Get(path: '/inventorybylocationreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorybylocationreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorybylocationreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorybylocationreportPreviewGet();
  }

  ///
  @Get(path: '/inventorybylocationreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorybylocationreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorychangetransactiontypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorychangetransactiontypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventorychangetransactiontype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorychangetransactiontypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorychangetransactiontypeExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _inventorychangetransactiontypeExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/inventorychangetransactiontype/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _inventorychangetransactiontypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      inventoryreceiptdetailsreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _inventoryreceiptdetailsreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _inventoryreceiptdetailsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventoryreceiptdetailsreportExportexcelxlsxPost(
          {required WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _inventoryreceiptdetailsreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _inventoryreceiptdetailsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> inventoryreceiptdetailsreportRunreportPost(
      {required WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _inventoryreceiptdetailsreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _inventoryreceiptdetailsreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportValidatebuyerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportValidatebuyerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/validatebuyer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportValidatebuyerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportValidatecompanydepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportValidatecompanydepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/validatecompanydepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportValidatecompanydepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportValidateoriginalshowBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportValidateoriginalshowBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/validateoriginalshow/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportValidateoriginalshowBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportValidatereceiptBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportValidatereceiptBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/validatereceipt/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportValidatereceiptBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptdetailsreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportEmptyobjectGet();
  }

  ///
  @Get(path: '/inventoryreceiptdetailsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptdetailsreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptdetailsreportPreviewGet();
  }

  ///
  @Get(path: '/inventoryreceiptdetailsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptdetailsreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      inventoryreceiptsummaryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _inventoryreceiptsummaryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptsummaryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _inventoryreceiptsummaryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventoryreceiptsummaryreportExportexcelxlsxPost(
          {required WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _inventoryreceiptsummaryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptsummaryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _inventoryreceiptsummaryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> inventoryreceiptsummaryreportRunreportPost(
      {required WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _inventoryreceiptsummaryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptsummaryreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _inventoryreceiptsummaryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptsummaryreportValidatebuyerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptsummaryreportValidatebuyerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptsummaryreport/validatebuyer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptsummaryreportValidatebuyerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptsummaryreportValidatecompanydepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptsummaryreportValidatecompanydepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptsummaryreport/validatecompanydepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptsummaryreportValidatecompanydepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptsummaryreportValidateoriginalshowBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptsummaryreportValidateoriginalshowBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptsummaryreport/validateoriginalshow/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptsummaryreportValidateoriginalshowBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptsummaryreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptsummaryreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptsummaryreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptsummaryreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptsummaryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptsummaryreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventoryreceiptsummaryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptsummaryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptsummaryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptsummaryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/inventoryreceiptsummaryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptsummaryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventoryreceiptsummaryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventoryreceiptsummaryreportPreviewGet();
  }

  ///
  @Get(path: '/inventoryreceiptsummaryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventoryreceiptsummaryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      inventorystatusbyorderreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _inventorystatusbyorderreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbyorderreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _inventorystatusbyorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorystatusbyorderreportExportexcelxlsxPost(
          {required WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _inventorystatusbyorderreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbyorderreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _inventorystatusbyorderreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> inventorystatusbyorderreportRunreportPost(
      {required WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _inventorystatusbyorderreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbyorderreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _inventorystatusbyorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbyorderreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbyorderreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbyorderreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbyorderreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbyorderreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbyorderreportValidatedepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbyorderreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbyorderreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbyorderreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbyorderreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbyorderreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbyorderreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbyorderreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbyorderreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbyorderreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbyorderreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbyorderreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbyorderreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbyorderreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbyorderreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbyorderreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbyorderreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbyorderreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbyorderreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbyorderreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbyorderreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbyorderreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbyorderreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbyorderreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbyorderreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbyorderreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbyorderreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbyorderreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbyorderreportEmptyobjectGet();
  }

  ///
  @Get(path: '/inventorystatusbyorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbyorderreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbyorderreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbyorderreportPreviewGet();
  }

  ///
  @Get(path: '/inventorystatusbyorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbyorderreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      inventorystatusbypurchaseorderreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbypurchaseorderreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _inventorystatusbypurchaseorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorystatusbypurchaseorderreportExportexcelxlsxPost(
          {required WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _inventorystatusbypurchaseorderreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbypurchaseorderreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _inventorystatusbypurchaseorderreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      inventorystatusbypurchaseorderreportRunreportPost(
          {required WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbypurchaseorderreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _inventorystatusbypurchaseorderreportRunreportPost(
          {@Body()
              required WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbypurchaseorderreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbypurchaseorderreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbypurchaseorderreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbypurchaseorderreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportValidatedepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbypurchaseorderreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbypurchaseorderreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbypurchaseorderreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportValidatevendorBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbypurchaseorderreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbypurchaseorderreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbypurchaseorderreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportValidatedealBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbypurchaseorderreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbypurchaseorderreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbypurchaseorderreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbypurchaseorderreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbypurchaseorderreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbypurchaseorderreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbypurchaseorderreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbypurchaseorderreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbypurchaseorderreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbypurchaseorderreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbypurchaseorderreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbypurchaseorderreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/inventorystatusbypurchaseorderreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbypurchaseorderreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbypurchaseorderreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportEmptyobjectGet();
  }

  ///
  @Get(path: '/inventorystatusbypurchaseorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbypurchaseorderreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorystatusbypurchaseorderreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _inventorystatusbypurchaseorderreportPreviewGet();
  }

  ///
  @Get(path: '/inventorystatusbypurchaseorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _inventorystatusbypurchaseorderreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      invoicediscountreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _invoicediscountreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/invoicediscountreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _invoicediscountreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      invoicediscountreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _invoicediscountreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/invoicediscountreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _invoicediscountreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> invoicediscountreportRunreportPost(
      {required WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _invoicediscountreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/invoicediscountreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _invoicediscountreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicediscountreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/invoicediscountreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicediscountreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicediscountreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/invoicediscountreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicediscountreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicediscountreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/invoicediscountreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicediscountreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicediscountreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/invoicediscountreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicediscountreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportValidatediscountreasonBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicediscountreportValidatediscountreasonBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/invoicediscountreport/validatediscountreason/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicediscountreportValidatediscountreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicediscountreportEmptyobjectGet();
  }

  ///
  @Get(path: '/invoicediscountreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicediscountreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicediscountreportPreviewGet();
  }

  ///
  @Get(path: '/invoicediscountreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicediscountreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      invoicereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _invoicereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/invoicereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _invoicereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> invoicereportRunreportPost(
      {required WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _invoicereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/invoicereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> _invoicereportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicereportValidateinvoiceBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicereportValidateinvoiceBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/invoicereport/validateinvoice/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicereportValidateinvoiceBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicereportEmptyobjectGet();
  }

  ///
  @Get(path: '/invoicereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicereportPreviewGet();
  }

  ///
  @Get(path: '/invoicereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      invoicesummaryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _invoicesummaryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/invoicesummaryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _invoicesummaryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      invoicesummaryreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _invoicesummaryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/invoicesummaryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _invoicesummaryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> invoicesummaryreportRunreportPost(
      {required WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _invoicesummaryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/invoicesummaryreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _invoicesummaryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicesummaryreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/invoicesummaryreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicesummaryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicesummaryreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/invoicesummaryreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicesummaryreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicesummaryreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/invoicesummaryreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicesummaryreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicesummaryreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/invoicesummaryreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicesummaryreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicesummaryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/invoicesummaryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicesummaryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _invoicesummaryreportPreviewGet();
  }

  ///
  @Get(path: '/invoicesummaryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _invoicesummaryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      itemspurchasedbydealreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _itemspurchasedbydealreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/itemspurchasedbydealreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _itemspurchasedbydealreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      itemspurchasedbydealreportExportexcelxlsxPost(
          {required WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _itemspurchasedbydealreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/itemspurchasedbydealreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _itemspurchasedbydealreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> itemspurchasedbydealreportRunreportPost(
      {required WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _itemspurchasedbydealreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/itemspurchasedbydealreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _itemspurchasedbydealreportRunreportPost(
      {@Body()
          required WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      itemspurchasedbydealreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _itemspurchasedbydealreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/itemspurchasedbydealreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _itemspurchasedbydealreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      itemspurchasedbydealreportValidatecompanydepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _itemspurchasedbydealreportValidatecompanydepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/itemspurchasedbydealreport/validatecompanydepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _itemspurchasedbydealreportValidatecompanydepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      itemspurchasedbydealreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _itemspurchasedbydealreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/itemspurchasedbydealreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _itemspurchasedbydealreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      itemspurchasedbydealreportValidateinventorystatusBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _itemspurchasedbydealreportValidateinventorystatusBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/itemspurchasedbydealreport/validateinventorystatus/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _itemspurchasedbydealreportValidateinventorystatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      itemspurchasedbydealreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _itemspurchasedbydealreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/itemspurchasedbydealreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _itemspurchasedbydealreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      itemspurchasedbydealreportValidateoriginalshowBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _itemspurchasedbydealreportValidateoriginalshowBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/itemspurchasedbydealreport/validateoriginalshow/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _itemspurchasedbydealreportValidateoriginalshowBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      itemspurchasedbydealreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _itemspurchasedbydealreportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/itemspurchasedbydealreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _itemspurchasedbydealreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      itemspurchasedbydealreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _itemspurchasedbydealreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/itemspurchasedbydealreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _itemspurchasedbydealreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      itemspurchasedbydealreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _itemspurchasedbydealreportEmptyobjectGet();
  }

  ///
  @Get(path: '/itemspurchasedbydealreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _itemspurchasedbydealreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      itemspurchasedbydealreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _itemspurchasedbydealreportPreviewGet();
  }

  ///
  @Get(path: '/itemspurchasedbydealreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _itemspurchasedbydealreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      latereturnsreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _latereturnsreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/latereturnsreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _latereturnsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      latereturnsreportExportexcelxlsxPost(
          {required WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _latereturnsreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/latereturnsreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _latereturnsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> latereturnsreportRunreportPost(
      {required WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _latereturnsreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/latereturnsreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _latereturnsreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _latereturnsreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/latereturnsreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _latereturnsreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _latereturnsreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/latereturnsreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _latereturnsreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _latereturnsreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/latereturnsreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _latereturnsreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _latereturnsreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/latereturnsreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _latereturnsreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _latereturnsreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/latereturnsreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _latereturnsreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _latereturnsreportValidateinventorytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/latereturnsreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _latereturnsreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidatecontactBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _latereturnsreportValidatecontactBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/latereturnsreport/validatecontact/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _latereturnsreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _latereturnsreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/latereturnsreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _latereturnsreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _latereturnsreportEmptyobjectGet();
  }

  ///
  @Get(path: '/latereturnsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _latereturnsreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _latereturnsreportPreviewGet();
  }

  ///
  @Get(path: '/latereturnsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _latereturnsreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      lostcontractreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _lostcontractreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/lostcontractreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _lostcontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> lostcontractreportRunreportPost(
      {required WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _lostcontractreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/lostcontractreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _lostcontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      lostcontractreportValidatecontractBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _lostcontractreportValidatecontractBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/lostcontractreport/validatecontract/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _lostcontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      lostcontractreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _lostcontractreportEmptyobjectGet();
  }

  ///
  @Get(path: '/lostcontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _lostcontractreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      lostcontractreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _lostcontractreportPreviewGet();
  }

  ///
  @Get(path: '/lostcontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _lostcontractreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      orderconflictreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _orderconflictreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/orderconflictreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _orderconflictreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      orderconflictreportExportexcelxlsxPost(
          {required WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _orderconflictreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/orderconflictreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _orderconflictreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> orderconflictreportRunreportPost(
      {required WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _orderconflictreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/orderconflictreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _orderconflictreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderconflictreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/orderconflictreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderconflictreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderconflictreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/orderconflictreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderconflictreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderconflictreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/orderconflictreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderconflictreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderconflictreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/orderconflictreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderconflictreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderconflictreportValidateinventorytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/orderconflictreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderconflictreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderconflictreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/orderconflictreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderconflictreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderconflictreportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/orderconflictreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderconflictreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderconflictreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/orderconflictreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderconflictreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderconflictreportEmptyobjectGet();
  }

  ///
  @Get(path: '/orderconflictreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderconflictreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderconflictreportPreviewGet();
  }

  ///
  @Get(path: '/orderconflictreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderconflictreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      orderreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _orderreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/orderreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _orderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> orderreportRunreportPost(
      {required WebApiModulesReportsOrderReportsOrderReportOrderReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _orderreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/orderreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> _orderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOrderReportOrderReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/orderreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderreportEmptyobjectGet();
  }

  ///
  @Get(path: '/orderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderreportPreviewGet();
  }

  ///
  @Get(path: '/orderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      ordersbydealreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _ordersbydealreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/ordersbydealreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _ordersbydealreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      ordersbydealreportExportexcelxlsxPost(
          {required WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _ordersbydealreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/ordersbydealreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _ordersbydealreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> ordersbydealreportRunreportPost(
      {required WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _ordersbydealreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/ordersbydealreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _ordersbydealreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _ordersbydealreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/ordersbydealreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _ordersbydealreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _ordersbydealreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/ordersbydealreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _ordersbydealreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _ordersbydealreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/ordersbydealreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _ordersbydealreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidatedealtypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _ordersbydealreportValidatedealtypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/ordersbydealreport/validatedealtype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _ordersbydealreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidatedealstatusBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _ordersbydealreportValidatedealstatusBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/ordersbydealreport/validatedealstatus/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _ordersbydealreportValidatedealstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _ordersbydealreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/ordersbydealreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _ordersbydealreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _ordersbydealreportEmptyobjectGet();
  }

  ///
  @Get(path: '/ordersbydealreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _ordersbydealreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _ordersbydealreportPreviewGet();
  }

  ///
  @Get(path: '/ordersbydealreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _ordersbydealreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      orderstatusdetailreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _orderstatusdetailreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/orderstatusdetailreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _orderstatusdetailreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> orderstatusdetailreportRunreportPost(
      {required WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _orderstatusdetailreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/orderstatusdetailreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _orderstatusdetailreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatusdetailreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderstatusdetailreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/orderstatusdetailreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderstatusdetailreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatusdetailreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderstatusdetailreportEmptyobjectGet();
  }

  ///
  @Get(path: '/orderstatusdetailreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderstatusdetailreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatusdetailreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderstatusdetailreportPreviewGet();
  }

  ///
  @Get(path: '/orderstatusdetailreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderstatusdetailreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      orderstatussummaryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _orderstatussummaryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/orderstatussummaryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _orderstatussummaryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> orderstatussummaryreportRunreportPost(
      {required WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _orderstatussummaryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/orderstatussummaryreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _orderstatussummaryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatussummaryreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderstatussummaryreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/orderstatussummaryreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderstatussummaryreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatussummaryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderstatussummaryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/orderstatussummaryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderstatussummaryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatussummaryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _orderstatussummaryreportPreviewGet();
  }

  ///
  @Get(path: '/orderstatussummaryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _orderstatussummaryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      ordervaluesheetreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _ordervaluesheetreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/ordervaluesheetreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _ordervaluesheetreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> ordervaluesheetreportRunreportPost(
      {required WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _ordervaluesheetreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/ordervaluesheetreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _ordervaluesheetreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordervaluesheetreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _ordervaluesheetreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/ordervaluesheetreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _ordervaluesheetreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordervaluesheetreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _ordervaluesheetreportEmptyobjectGet();
  }

  ///
  @Get(path: '/ordervaluesheetreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _ordervaluesheetreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordervaluesheetreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _ordervaluesheetreportPreviewGet();
  }

  ///
  @Get(path: '/ordervaluesheetreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _ordervaluesheetreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      outcontractreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _outcontractreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/outcontractreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _outcontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> outcontractreportRunreportPost(
      {required WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _outcontractreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/outcontractreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _outcontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outcontractreportValidatecontractBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outcontractreportValidatecontractBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/outcontractreport/validatecontract/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outcontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outcontractreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outcontractreportEmptyobjectGet();
  }

  ///
  @Get(path: '/outcontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outcontractreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outcontractreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outcontractreportPreviewGet();
  }

  ///
  @Get(path: '/outcontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outcontractreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      outgoingdeliveryinstructionsRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _outgoingdeliveryinstructionsRenderPost(body: body);
  }

  ///
  @Post(
    path: '/outgoingdeliveryinstructions/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _outgoingdeliveryinstructionsRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> outgoingdeliveryinstructionsRunreportPost(
      {required WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _outgoingdeliveryinstructionsRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/outgoingdeliveryinstructions/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _outgoingdeliveryinstructionsRunreportPost(
      {@Body()
          required WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outgoingdeliveryinstructionsEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outgoingdeliveryinstructionsEmptyobjectGet();
  }

  ///
  @Get(path: '/outgoingdeliveryinstructions/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outgoingdeliveryinstructionsEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outgoingdeliveryinstructionsPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outgoingdeliveryinstructionsPreviewGet();
  }

  ///
  @Get(path: '/outgoingdeliveryinstructions/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outgoingdeliveryinstructionsPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      outgoingshippinglabelRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _outgoingshippinglabelRenderPost(body: body);
  }

  ///
  @Post(
    path: '/outgoingshippinglabel/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _outgoingshippinglabelRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> outgoingshippinglabelRunreportPost(
      {required WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _outgoingshippinglabelRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/outgoingshippinglabel/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _outgoingshippinglabelRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outgoingshippinglabelValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outgoingshippinglabelValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/outgoingshippinglabel/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outgoingshippinglabelValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outgoingshippinglabelEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outgoingshippinglabelEmptyobjectGet();
  }

  ///
  @Get(path: '/outgoingshippinglabel/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outgoingshippinglabelEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outgoingshippinglabelPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outgoingshippinglabelPreviewGet();
  }

  ///
  @Get(path: '/outgoingshippinglabel/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outgoingshippinglabelPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      outstandingsubrentalreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _outstandingsubrentalreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/outstandingsubrentalreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _outstandingsubrentalreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      outstandingsubrentalreportExportexcelxlsxPost(
          {required WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _outstandingsubrentalreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/outstandingsubrentalreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _outstandingsubrentalreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> outstandingsubrentalreportRunreportPost(
      {required WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _outstandingsubrentalreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/outstandingsubrentalreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _outstandingsubrentalreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outstandingsubrentalreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/outstandingsubrentalreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outstandingsubrentalreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outstandingsubrentalreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/outstandingsubrentalreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outstandingsubrentalreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outstandingsubrentalreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/outstandingsubrentalreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outstandingsubrentalreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outstandingsubrentalreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/outstandingsubrentalreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outstandingsubrentalreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatedealtypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outstandingsubrentalreportValidatedealtypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/outstandingsubrentalreport/validatedealtype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outstandingsubrentalreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outstandingsubrentalreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/outstandingsubrentalreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outstandingsubrentalreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outstandingsubrentalreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/outstandingsubrentalreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outstandingsubrentalreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outstandingsubrentalreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/outstandingsubrentalreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outstandingsubrentalreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outstandingsubrentalreportEmptyobjectGet();
  }

  ///
  @Get(path: '/outstandingsubrentalreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outstandingsubrentalreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _outstandingsubrentalreportPreviewGet();
  }

  ///
  @Get(path: '/outstandingsubrentalreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _outstandingsubrentalreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventoryattributesreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _partsinventoryattributesreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventoryattributesreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _partsinventoryattributesreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventoryattributesreportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _partsinventoryattributesreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventoryattributesreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _partsinventoryattributesreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      partsinventoryattributesreportRunreportPost(
          {required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _partsinventoryattributesreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventoryattributesreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _partsinventoryattributesreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryattributesreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventoryattributesreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryattributesreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryattributesreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventoryattributesreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryattributesreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryattributesreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventoryattributesreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryattributesreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryattributesreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventoryattributesreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryattributesreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportValidateattributeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryattributesreportValidateattributeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventoryattributesreport/validateattribute/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryattributesreportValidateattributeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryattributesreportEmptyobjectGet();
  }

  ///
  @Get(path: '/partsinventoryattributesreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryattributesreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryattributesreportPreviewGet();
  }

  ///
  @Get(path: '/partsinventoryattributesreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryattributesreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventorycatalogreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _partsinventorycatalogreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorycatalogreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _partsinventorycatalogreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventorycatalogreportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _partsinventorycatalogreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorycatalogreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _partsinventorycatalogreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> partsinventorycatalogreportRunreportPost(
      {required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _partsinventorycatalogreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorycatalogreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _partsinventorycatalogreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorycatalogreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorycatalogreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorycatalogreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorycatalogreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorycatalogreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorycatalogreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorycatalogreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorycatalogreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorycatalogreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorycatalogreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorycatalogreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorycatalogreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidatewarehousecatalogBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorycatalogreportValidatewarehousecatalogBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorycatalogreport/validatewarehousecatalog/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorycatalogreportValidatewarehousecatalogBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorycatalogreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorycatalogreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorycatalogreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorycatalogreportEmptyobjectGet();
  }

  ///
  @Get(path: '/partsinventorycatalogreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorycatalogreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorycatalogreportPreviewGet();
  }

  ///
  @Get(path: '/partsinventorycatalogreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorycatalogreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventorychangereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _partsinventorychangereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorychangereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _partsinventorychangereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventorychangereportExportexcelxlsxPost(
          {required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _partsinventorychangereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorychangereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _partsinventorychangereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> partsinventorychangereportRunreportPost(
      {required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _partsinventorychangereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorychangereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _partsinventorychangereportRunreportPost(
      {@Body()
          required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorychangereportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorychangereport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorychangereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorychangereportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorychangereport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorychangereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorychangereportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorychangereport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorychangereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidatetransactiontypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorychangereportValidatetransactiontypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorychangereport/validatetransactiontype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorychangereportValidatetransactiontypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorychangereportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorychangereport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorychangereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorychangereportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorychangereport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorychangereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorychangereportEmptyobjectGet();
  }

  ///
  @Get(path: '/partsinventorychangereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorychangereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorychangereportPreviewGet();
  }

  ///
  @Get(path: '/partsinventorychangereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorychangereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventorypurchasehistoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _partsinventorypurchasehistoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorypurchasehistoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _partsinventorypurchasehistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventorypurchasehistoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _partsinventorypurchasehistoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorypurchasehistoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _partsinventorypurchasehistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      partsinventorypurchasehistoryreportRunreportPost(
          {required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _partsinventorypurchasehistoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorypurchasehistoryreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _partsinventorypurchasehistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorypurchasehistoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorypurchasehistoryreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorypurchasehistoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorypurchasehistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorypurchasehistoryreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorypurchasehistoryreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorypurchasehistoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorypurchasehistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorypurchasehistoryreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorypurchasehistoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorypurchasehistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorypurchasehistoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/partsinventorypurchasehistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorypurchasehistoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorypurchasehistoryreportPreviewGet();
  }

  ///
  @Get(path: '/partsinventorypurchasehistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorypurchasehistoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventoryreorderreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _partsinventoryreorderreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventoryreorderreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _partsinventoryreorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventoryreorderreportExportexcelxlsxPost(
          {required WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _partsinventoryreorderreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventoryreorderreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _partsinventoryreorderreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> partsinventoryreorderreportRunreportPost(
      {required WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _partsinventoryreorderreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventoryreorderreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _partsinventoryreorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryreorderreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventoryreorderreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryreorderreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryreorderreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/partsinventoryreorderreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryreorderreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryreorderreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventoryreorderreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryreorderreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryreorderreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/partsinventoryreorderreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryreorderreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryreorderreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/partsinventoryreorderreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryreorderreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryreorderreportEmptyobjectGet();
  }

  ///
  @Get(path: '/partsinventoryreorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryreorderreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventoryreorderreportPreviewGet();
  }

  ///
  @Get(path: '/partsinventoryreorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventoryreorderreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventorytransactionreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _partsinventorytransactionreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorytransactionreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _partsinventorytransactionreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventorytransactionreportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _partsinventorytransactionreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorytransactionreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _partsinventorytransactionreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      partsinventorytransactionreportRunreportPost(
          {required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _partsinventorytransactionreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/partsinventorytransactionreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _partsinventorytransactionreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorytransactionreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorytransactionreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorytransactionreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorytransactionreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorytransactionreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorytransactionreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorytransactionreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorytransactionreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorytransactionreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorytransactionreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorytransactionreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorytransactionreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorytransactionreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/partsinventorytransactionreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorytransactionreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorytransactionreportEmptyobjectGet();
  }

  ///
  @Get(path: '/partsinventorytransactionreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorytransactionreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _partsinventorytransactionreportPreviewGet();
  }

  ///
  @Get(path: '/partsinventorytransactionreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _partsinventorytransactionreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventorycountsheetreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _physicalinventorycountsheetreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventorycountsheetreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _physicalinventorycountsheetreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventorycountsheetreportExportexcelxlsxPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _physicalinventorycountsheetreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventorycountsheetreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _physicalinventorycountsheetreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventorycountsheetreportRunreportPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _physicalinventorycountsheetreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventorycountsheetreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _physicalinventorycountsheetreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorycountsheetreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorycountsheetreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorycountsheetreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorycountsheetreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorycountsheetreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorycountsheetreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorycountsheetreportValidatedepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorycountsheetreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorycountsheetreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorycountsheetreportValidatecustomerBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorycountsheetreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorycountsheetreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorycountsheetreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventorycountsheetreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorycountsheetreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorycountsheetreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorycountsheetreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorycountsheetreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatecontactBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorycountsheetreportValidatecontactBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorycountsheetreport/validatecontact/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorycountsheetreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorycountsheetreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorycountsheetreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorycountsheetreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorycountsheetreportEmptyobjectGet();
  }

  ///
  @Get(path: '/physicalinventorycountsheetreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorycountsheetreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorycountsheetreportPreviewGet();
  }

  ///
  @Get(path: '/physicalinventorycountsheetreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorycountsheetreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventorydiscrepancyreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _physicalinventorydiscrepancyreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventorydiscrepancyreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _physicalinventorydiscrepancyreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventorydiscrepancyreportExportexcelxlsxPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _physicalinventorydiscrepancyreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventorydiscrepancyreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _physicalinventorydiscrepancyreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportRunreportPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest?
              body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorydiscrepancyreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventorydiscrepancyreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorydiscrepancyreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorydiscrepancyreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorydiscrepancyreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorydiscrepancyreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorydiscrepancyreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorydiscrepancyreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorydiscrepancyreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorydiscrepancyreportValidatedepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorydiscrepancyreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorydiscrepancyreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorydiscrepancyreportValidatecustomerBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorydiscrepancyreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorydiscrepancyreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorydiscrepancyreportValidatedealBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorydiscrepancyreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorydiscrepancyreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorydiscrepancyreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorydiscrepancyreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorydiscrepancyreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidatecontactBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorydiscrepancyreportValidatecontactBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventorydiscrepancyreport/validatecontact/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorydiscrepancyreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorydiscrepancyreportEmptyobjectGet();
  }

  ///
  @Get(path: '/physicalinventorydiscrepancyreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorydiscrepancyreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventorydiscrepancyreportPreviewGet();
  }

  ///
  @Get(path: '/physicalinventorydiscrepancyreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventorydiscrepancyreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventoryexceptionreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _physicalinventoryexceptionreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryexceptionreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _physicalinventoryexceptionreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventoryexceptionreportExportexcelxlsxPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _physicalinventoryexceptionreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryexceptionreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _physicalinventoryexceptionreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventoryexceptionreportRunreportPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _physicalinventoryexceptionreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryexceptionreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _physicalinventoryexceptionreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryexceptionreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryexceptionreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryexceptionreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryexceptionreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryexceptionreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryexceptionreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryexceptionreportValidatedepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryexceptionreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryexceptionreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryexceptionreportValidatecustomerBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryexceptionreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryexceptionreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryexceptionreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryexceptionreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryexceptionreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryexceptionreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryexceptionreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryexceptionreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidatecontactBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryexceptionreportValidatecontactBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryexceptionreport/validatecontact/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryexceptionreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryexceptionreportEmptyobjectGet();
  }

  ///
  @Get(path: '/physicalinventoryexceptionreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryexceptionreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryexceptionreportPreviewGet();
  }

  ///
  @Get(path: '/physicalinventoryexceptionreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryexceptionreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventoryprescanprogressreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _physicalinventoryprescanprogressreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryprescanprogressreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _physicalinventoryprescanprogressreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventoryprescanprogressreportExportexcelxlsxPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _physicalinventoryprescanprogressreportExportexcelxlsxPost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryprescanprogressreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _physicalinventoryprescanprogressreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventoryprescanprogressreportRunreportPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _physicalinventoryprescanprogressreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryprescanprogressreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _physicalinventoryprescanprogressreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryprescanprogressreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path:
        '/physicalinventoryprescanprogressreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryprescanprogressreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryprescanprogressreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryprescanprogressreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryprescanprogressreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryprescanprogressreportValidatedepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryprescanprogressreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryprescanprogressreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryprescanprogressreportValidatecustomerBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryprescanprogressreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryprescanprogressreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryprescanprogressreportValidatedealBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryprescanprogressreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryprescanprogressreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryprescanprogressreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path:
        '/physicalinventoryprescanprogressreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryprescanprogressreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatecontactBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryprescanprogressreportValidatecontactBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryprescanprogressreport/validatecontact/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryprescanprogressreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryprescanprogressreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryprescanprogressreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryprescanprogressreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryprescanprogressreportEmptyobjectGet();
  }

  ///
  @Get(path: '/physicalinventoryprescanprogressreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryprescanprogressreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryprescanprogressreportPreviewGet();
  }

  ///
  @Get(path: '/physicalinventoryprescanprogressreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryprescanprogressreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventoryreconciliationreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _physicalinventoryreconciliationreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryreconciliationreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _physicalinventoryreconciliationreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventoryreconciliationreportExportexcelxlsxPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _physicalinventoryreconciliationreportExportexcelxlsxPost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryreconciliationreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _physicalinventoryreconciliationreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventoryreconciliationreportRunreportPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _physicalinventoryreconciliationreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryreconciliationreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _physicalinventoryreconciliationreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryreconciliationreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryreconciliationreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryreconciliationreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryreconciliationreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryreconciliationreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryreconciliationreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryreconciliationreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryreconciliationreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryreconciliationreportValidatecontactBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryreconciliationreportValidatecontactBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryreconciliationreport/validatecontact/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryreconciliationreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryreconciliationreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryreconciliationreportEmptyobjectGet();
  }

  ///
  @Get(path: '/physicalinventoryreconciliationreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryreconciliationreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryreconciliationreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryreconciliationreportPreviewGet();
  }

  ///
  @Get(path: '/physicalinventoryreconciliationreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryreconciliationreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventoryrecountanalysisreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _physicalinventoryrecountanalysisreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryrecountanalysisreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _physicalinventoryrecountanalysisreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventoryrecountanalysisreportExportexcelxlsxPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _physicalinventoryrecountanalysisreportExportexcelxlsxPost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryrecountanalysisreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _physicalinventoryrecountanalysisreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventoryrecountanalysisreportRunreportPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _physicalinventoryrecountanalysisreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryrecountanalysisreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _physicalinventoryrecountanalysisreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryrecountanalysisreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path:
        '/physicalinventoryrecountanalysisreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryrecountanalysisreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryrecountanalysisreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryrecountanalysisreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryrecountanalysisreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryrecountanalysisreportValidatedepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryrecountanalysisreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryrecountanalysisreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryrecountanalysisreportValidatecustomerBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryrecountanalysisreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryrecountanalysisreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryrecountanalysisreportValidatedealBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryrecountanalysisreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryrecountanalysisreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryrecountanalysisreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path:
        '/physicalinventoryrecountanalysisreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryrecountanalysisreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidatecontactBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryrecountanalysisreportValidatecontactBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryrecountanalysisreport/validatecontact/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryrecountanalysisreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryrecountanalysisreportEmptyobjectGet();
  }

  ///
  @Get(path: '/physicalinventoryrecountanalysisreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryrecountanalysisreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryrecountanalysisreportPreviewGet();
  }

  ///
  @Get(path: '/physicalinventoryrecountanalysisreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryrecountanalysisreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventoryresultsreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _physicalinventoryresultsreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryresultsreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _physicalinventoryresultsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventoryresultsreportExportexcelxlsxPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _physicalinventoryresultsreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryresultsreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _physicalinventoryresultsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventoryresultsreportRunreportPost(
          {required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _physicalinventoryresultsreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryresultsreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _physicalinventoryresultsreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryresultsreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryresultsreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryresultsreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryresultsreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryresultsreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryresultsreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/physicalinventoryresultsreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryresultsreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryresultsreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryresultsreportEmptyobjectGet();
  }

  ///
  @Get(path: '/physicalinventoryresultsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryresultsreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryresultsreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _physicalinventoryresultsreportPreviewGet();
  }

  ///
  @Get(path: '/physicalinventoryresultsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _physicalinventoryresultsreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      picklistreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _picklistreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/picklistreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _picklistreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> picklistreportRunreportPost(
      {required WebApiModulesReportsOrderReportsPickListReportPickListReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _picklistreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/picklistreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> _picklistreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsPickListReportPickListReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      picklistreportValidatepicklistBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _picklistreportValidatepicklistBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/picklistreport/validatepicklist/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _picklistreportValidatepicklistBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      picklistreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _picklistreportEmptyobjectGet();
  }

  ///
  @Get(path: '/picklistreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _picklistreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      picklistreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _picklistreportPreviewGet();
  }

  ///
  @Get(path: '/picklistreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _picklistreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      profitlossreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _profitlossreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/profitlossreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _profitlossreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      profitlossreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _profitlossreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/profitlossreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _profitlossreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest?
                  body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> profitlossreportRunreportPost(
      {required WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _profitlossreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/profitlossreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _profitlossreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _profitlossreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/profitlossreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _profitlossreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _profitlossreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/profitlossreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _profitlossreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _profitlossreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/profitlossreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _profitlossreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidateagentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _profitlossreportValidateagentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/profitlossreport/validateagent/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _profitlossreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _profitlossreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/profitlossreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _profitlossreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _profitlossreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/profitlossreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _profitlossreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _profitlossreportEmptyobjectGet();
  }

  ///
  @Get(path: '/profitlossreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _profitlossreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _profitlossreportPreviewGet();
  }

  ///
  @Get(path: '/profitlossreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _profitlossreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      projectmanagerbillingreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _projectmanagerbillingreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/projectmanagerbillingreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _projectmanagerbillingreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      projectmanagerbillingreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _projectmanagerbillingreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/projectmanagerbillingreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _projectmanagerbillingreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> projectmanagerbillingreportRunreportPost(
      {required WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _projectmanagerbillingreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/projectmanagerbillingreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _projectmanagerbillingreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _projectmanagerbillingreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/projectmanagerbillingreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _projectmanagerbillingreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _projectmanagerbillingreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/projectmanagerbillingreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _projectmanagerbillingreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _projectmanagerbillingreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/projectmanagerbillingreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _projectmanagerbillingreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportValidateprojectmanagerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _projectmanagerbillingreportValidateprojectmanagerBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/projectmanagerbillingreport/validateprojectmanager/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _projectmanagerbillingreportValidateprojectmanagerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _projectmanagerbillingreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/projectmanagerbillingreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _projectmanagerbillingreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _projectmanagerbillingreportEmptyobjectGet();
  }

  ///
  @Get(path: '/projectmanagerbillingreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _projectmanagerbillingreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _projectmanagerbillingreportPreviewGet();
  }

  ///
  @Get(path: '/projectmanagerbillingreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _projectmanagerbillingreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchasegldetailreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _purchasegldetailreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/purchasegldetailreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _purchasegldetailreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      purchasegldetailreportExportexcelxlsxPost(
          {required WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _purchasegldetailreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/purchasegldetailreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _purchasegldetailreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchasegldetailreportRunreportPost(
      {required WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _purchasegldetailreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/purchasegldetailreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _purchasegldetailreportRunreportPost(
      {@Body()
          required WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchasegldetailreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchasegldetailreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchasegldetailreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchasegldetailreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchasegldetailreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchasegldetailreportEmptyobjectGet();
  }

  ///
  @Get(path: '/purchasegldetailreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchasegldetailreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchasegldetailreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchasegldetailreportPreviewGet();
  }

  ///
  @Get(path: '/purchasegldetailreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchasegldetailreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseorderaccrualsRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _purchaseorderaccrualsRenderPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderaccruals/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _purchaseorderaccrualsRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      purchaseorderaccrualsExportexcelxlsxPost(
          {required WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _purchaseorderaccrualsExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderaccruals/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _purchaseorderaccrualsExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchaseorderaccrualsRunreportPost(
      {required WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _purchaseorderaccrualsRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderaccruals/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _purchaseorderaccrualsRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderaccrualsValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderaccrualsValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderaccruals/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderaccrualsValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderaccrualsValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderaccrualsValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderaccruals/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderaccrualsValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderaccrualsValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderaccrualsValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderaccruals/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderaccrualsValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderaccrualsEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderaccrualsEmptyobjectGet();
  }

  ///
  @Get(path: '/purchaseorderaccruals/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderaccrualsEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderaccrualsPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderaccrualsPreviewGet();
  }

  ///
  @Get(path: '/purchaseorderaccruals/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderaccrualsPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseordermasterreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _purchaseordermasterreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordermasterreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _purchaseordermasterreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      purchaseordermasterreportExportexcelxlsxPost(
          {required WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _purchaseordermasterreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordermasterreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _purchaseordermasterreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchaseordermasterreportRunreportPost(
      {required WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _purchaseordermasterreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordermasterreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _purchaseordermasterreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordermasterreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordermasterreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordermasterreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordermasterreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordermasterreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordermasterreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordermasterreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordermasterreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordermasterreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordermasterreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordermasterreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordermasterreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordermasterreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordermasterreportEmptyobjectGet();
  }

  ///
  @Get(path: '/purchaseordermasterreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordermasterreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordermasterreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordermasterreportPreviewGet();
  }

  ///
  @Get(path: '/purchaseordermasterreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordermasterreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseorderpaymentschedulereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _purchaseorderpaymentschedulereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderpaymentschedulereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _purchaseorderpaymentschedulereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      purchaseorderpaymentschedulereportExportexcelxlsxPost(
          {required WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _purchaseorderpaymentschedulereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderpaymentschedulereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _purchaseorderpaymentschedulereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      purchaseorderpaymentschedulereportRunreportPost(
          {required WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _purchaseorderpaymentschedulereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderpaymentschedulereport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _purchaseorderpaymentschedulereportRunreportPost(
          {@Body()
              required WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderpaymentschedulereportValidatepurchaseorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderpaymentschedulereportValidatepurchaseorderBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/purchaseorderpaymentschedulereport/validatepurchaseorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderpaymentschedulereportValidatepurchaseorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderpaymentschedulereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderpaymentschedulereportEmptyobjectGet();
  }

  ///
  @Get(path: '/purchaseorderpaymentschedulereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderpaymentschedulereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderpaymentschedulereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderpaymentschedulereportPreviewGet();
  }

  ///
  @Get(path: '/purchaseorderpaymentschedulereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderpaymentschedulereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseorderreceivelistRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _purchaseorderreceivelistRenderPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderreceivelist/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _purchaseorderreceivelistRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      purchaseorderreceivelistExportexcelxlsxPost(
          {required WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _purchaseorderreceivelistExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderreceivelist/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _purchaseorderreceivelistExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchaseorderreceivelistRunreportPost(
      {required WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _purchaseorderreceivelistRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderreceivelist/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _purchaseorderreceivelistRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreceivelistEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderreceivelistEmptyobjectGet();
  }

  ///
  @Get(path: '/purchaseorderreceivelist/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderreceivelistEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreceivelistPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderreceivelistPreviewGet();
  }

  ///
  @Get(path: '/purchaseorderreceivelist/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderreceivelistPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseorderreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _purchaseorderreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _purchaseorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchaseorderreportRunreportPost(
      {required WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _purchaseorderreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _purchaseorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreportValidatepurchaseorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderreportValidatepurchaseorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderreport/validatepurchaseorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderreportValidatepurchaseorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderreportEmptyobjectGet();
  }

  ///
  @Get(path: '/purchaseorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderreportPreviewGet();
  }

  ///
  @Get(path: '/purchaseorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseorderreturnlistRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _purchaseorderreturnlistRenderPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderreturnlist/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _purchaseorderreturnlistRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      purchaseorderreturnlistExportexcelxlsxPost(
          {required WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _purchaseorderreturnlistExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderreturnlist/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _purchaseorderreturnlistExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchaseorderreturnlistRunreportPost(
      {required WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _purchaseorderreturnlistRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderreturnlist/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _purchaseorderreturnlistRunreportPost(
      {@Body()
          required WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreturnlistEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderreturnlistEmptyobjectGet();
  }

  ///
  @Get(path: '/purchaseorderreturnlist/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderreturnlistEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreturnlistPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderreturnlistPreviewGet();
  }

  ///
  @Get(path: '/purchaseorderreturnlist/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderreturnlistPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseorderstatusdetailreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _purchaseorderstatusdetailreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderstatusdetailreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _purchaseorderstatusdetailreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      purchaseorderstatusdetailreportRunreportPost(
          {required WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _purchaseorderstatusdetailreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderstatusdetailreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _purchaseorderstatusdetailreportRunreportPost(
          {@Body()
              required WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderstatusdetailreportValidatepurchaseorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderstatusdetailreportValidatepurchaseorderBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/purchaseorderstatusdetailreport/validatepurchaseorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderstatusdetailreportValidatepurchaseorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderstatusdetailreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderstatusdetailreportEmptyobjectGet();
  }

  ///
  @Get(path: '/purchaseorderstatusdetailreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderstatusdetailreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderstatusdetailreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderstatusdetailreportPreviewGet();
  }

  ///
  @Get(path: '/purchaseorderstatusdetailreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderstatusdetailreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseorderstatussummaryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _purchaseorderstatussummaryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderstatussummaryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _purchaseorderstatussummaryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      purchaseorderstatussummaryreportRunreportPost(
          {required WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _purchaseorderstatussummaryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseorderstatussummaryreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _purchaseorderstatussummaryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderstatussummaryreportValidatepurchaseorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderstatussummaryreportValidatepurchaseorderBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/purchaseorderstatussummaryreport/validatepurchaseorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderstatussummaryreportValidatepurchaseorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderstatussummaryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderstatussummaryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/purchaseorderstatussummaryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderstatussummaryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderstatussummaryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseorderstatussummaryreportPreviewGet();
  }

  ///
  @Get(path: '/purchaseorderstatussummaryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseorderstatussummaryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseordersummaryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _purchaseordersummaryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordersummaryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _purchaseordersummaryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      purchaseordersummaryreportExportexcelxlsxPost(
          {required WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _purchaseordersummaryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordersummaryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _purchaseordersummaryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchaseordersummaryreportRunreportPost(
      {required WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _purchaseordersummaryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordersummaryreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _purchaseordersummaryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordersummaryreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordersummaryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordersummaryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportValidateprojectBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordersummaryreportValidateprojectBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordersummaryreport/validateproject/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordersummaryreportValidateprojectBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordersummaryreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordersummaryreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordersummaryreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordersummaryreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/purchaseordersummaryreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordersummaryreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportValidatepoapprovalstatusBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordersummaryreportValidatepoapprovalstatusBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/purchaseordersummaryreport/validatepoapprovalstatus/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordersummaryreportValidatepoapprovalstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordersummaryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/purchaseordersummaryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordersummaryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _purchaseordersummaryreportPreviewGet();
  }

  ///
  @Get(path: '/purchaseordersummaryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _purchaseordersummaryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      quikactivityreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _quikactivityreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/quikactivityreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _quikactivityreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      quikactivityreportExportexcelxlsxPost(
          {required WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _quikactivityreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/quikactivityreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _quikactivityreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> quikactivityreportRunreportPost(
      {required WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _quikactivityreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/quikactivityreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _quikactivityreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikactivityreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quikactivityreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikactivityreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikactivityreportValidateinventorytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quikactivityreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikactivityreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportValidateactivitytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikactivityreportValidateactivitytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quikactivityreport/validateactivitytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikactivityreportValidateactivitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikactivityreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quikactivityreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikactivityreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportValidateagentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikactivityreportValidateagentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quikactivityreport/validateagent/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikactivityreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikactivityreportEmptyobjectGet();
  }

  ///
  @Get(path: '/quikactivityreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikactivityreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikactivityreportPreviewGet();
  }

  ///
  @Get(path: '/quikactivityreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikactivityreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      quikincontractreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _quikincontractreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/quikincontractreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _quikincontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> quikincontractreportRunreportPost(
      {required WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _quikincontractreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/quikincontractreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _quikincontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikincontractreportValidatecontractBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikincontractreportValidatecontractBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quikincontractreport/validatecontract/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikincontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikincontractreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikincontractreportEmptyobjectGet();
  }

  ///
  @Get(path: '/quikincontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikincontractreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikincontractreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikincontractreportPreviewGet();
  }

  ///
  @Get(path: '/quikincontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikincontractreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      quikreceiptreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _quikreceiptreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/quikreceiptreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _quikreceiptreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      quikreceiptreportExportexcelxlsxPost(
          {required WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _quikreceiptreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/quikreceiptreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _quikreceiptreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest?
                  body});

  ///
  Future<
          chopper.Response<
              WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL>>
      quikreceiptreportRunreportPost(
          {required WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL,
        () =>
            WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL
                .fromJsonFactory);

    return _quikreceiptreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/quikreceiptreport/runreport',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL>>
      _quikreceiptreportRunreportPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikreceiptreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikreceiptreportEmptyobjectGet();
  }

  ///
  @Get(path: '/quikreceiptreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikreceiptreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikreceiptreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quikreceiptreportPreviewGet();
  }

  ///
  @Get(path: '/quikreceiptreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quikreceiptreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      quotebillingschedulereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _quotebillingschedulereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/quotebillingschedulereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _quotebillingschedulereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> quotebillingschedulereportRunreportPost(
      {required WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _quotebillingschedulereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/quotebillingschedulereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _quotebillingschedulereportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quotebillingschedulereportValidatequoteBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quotebillingschedulereportValidatequoteBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quotebillingschedulereport/validatequote/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quotebillingschedulereportValidatequoteBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quotebillingschedulereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quotebillingschedulereportEmptyobjectGet();
  }

  ///
  @Get(path: '/quotebillingschedulereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quotebillingschedulereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quotebillingschedulereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quotebillingschedulereportPreviewGet();
  }

  ///
  @Get(path: '/quotebillingschedulereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quotebillingschedulereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      quoteordermasterreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _quoteordermasterreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/quoteordermasterreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _quoteordermasterreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      quoteordermasterreportExportexcelxlsxPost(
          {required WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _quoteordermasterreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/quoteordermasterreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _quoteordermasterreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> quoteordermasterreportRunreportPost(
      {required WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _quoteordermasterreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/quoteordermasterreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _quoteordermasterreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quoteordermasterreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quoteordermasterreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quoteordermasterreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quoteordermasterreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quoteordermasterreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quoteordermasterreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quoteordermasterreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quoteordermasterreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quoteordermasterreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidatedealtypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quoteordermasterreportValidatedealtypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quoteordermasterreport/validatedealtype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quoteordermasterreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidatedealstatusBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quoteordermasterreportValidatedealstatusBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quoteordermasterreport/validatedealstatus/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quoteordermasterreportValidatedealstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quoteordermasterreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quoteordermasterreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quoteordermasterreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quoteordermasterreportEmptyobjectGet();
  }

  ///
  @Get(path: '/quoteordermasterreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quoteordermasterreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quoteordermasterreportPreviewGet();
  }

  ///
  @Get(path: '/quoteordermasterreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quoteordermasterreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      quotereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _quotereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/quotereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _quotereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> quotereportRunreportPost(
      {required WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _quotereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/quotereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> _quotereportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quotereportValidatequoteBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quotereportValidatequoteBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/quotereport/validatequote/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quotereportValidatequoteBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quotereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quotereportEmptyobjectGet();
  }

  ///
  @Get(path: '/quotereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quotereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quotereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _quotereportPreviewGet();
  }

  ///
  @Get(path: '/quotereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _quotereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rateupdatereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rateupdatereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rateupdatereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rateupdatereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rateupdatereportExportexcelxlsxPost(
          {required WebApiModulesReportsRateUpdateReportRateUpdateReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rateupdatereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rateupdatereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rateupdatereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRateUpdateReportRateUpdateReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rateupdatereportRunreportPost(
          {required WebApiModulesReportsRateUpdateReportRateUpdateReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rateupdatereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rateupdatereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _rateupdatereportRunreportPost(
      {@Body()
          required WebApiModulesReportsRateUpdateReportRateUpdateReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdatereportValidatebatchBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdatereportValidatebatchBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rateupdatereport/validatebatch/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdatereportValidatebatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdatereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdatereportEmptyobjectGet();
  }

  ///
  @Get(path: '/rateupdatereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdatereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdatereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rateupdatereportPreviewGet();
  }

  ///
  @Get(path: '/rateupdatereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rateupdatereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      receiptbatchreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _receiptbatchreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/receiptbatchreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _receiptbatchreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      receiptbatchreportExportexcelxlsxPost(
          {required WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _receiptbatchreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/receiptbatchreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _receiptbatchreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> receiptbatchreportRunreportPost(
      {required WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _receiptbatchreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/receiptbatchreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _receiptbatchreportRunreportPost(
      {@Body()
          required WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptbatchreportValidatebatchBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _receiptbatchreportValidatebatchBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/receiptbatchreport/validatebatch/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _receiptbatchreportValidatebatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptbatchreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _receiptbatchreportEmptyobjectGet();
  }

  ///
  @Get(path: '/receiptbatchreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _receiptbatchreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptbatchreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _receiptbatchreportPreviewGet();
  }

  ///
  @Get(path: '/receiptbatchreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _receiptbatchreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      receiptreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _receiptreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/receiptreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _receiptreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      receiptreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _receiptreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/receiptreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _receiptreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest?
                  body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> receiptreportRunreportPost(
      {required WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _receiptreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/receiptreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> _receiptreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptreportValidatereceiptBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _receiptreportValidatereceiptBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/receiptreport/validatereceipt/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _receiptreportValidatereceiptBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _receiptreportEmptyobjectGet();
  }

  ///
  @Get(path: '/receiptreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _receiptreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _receiptreportPreviewGet();
  }

  ///
  @Get(path: '/receiptreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _receiptreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      receivecontractreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _receivecontractreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/receivecontractreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _receivecontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> receivecontractreportRunreportPost(
      {required WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _receivecontractreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/receivecontractreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _receivecontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receivecontractreportValidatecontractBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _receivecontractreportValidatecontractBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/receivecontractreport/validatecontract/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _receivecontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receivecontractreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _receivecontractreportEmptyobjectGet();
  }

  ///
  @Get(path: '/receivecontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _receivecontractreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receivecontractreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _receivecontractreportPreviewGet();
  }

  ///
  @Get(path: '/receivecontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _receivecontractreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryactivitybydatereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventoryactivitybydatereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryactivitybydatereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventoryactivitybydatereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryactivitybydatereportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventoryactivitybydatereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryactivitybydatereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventoryactivitybydatereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryactivitybydatereportRunreportPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventoryactivitybydatereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryactivitybydatereport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventoryactivitybydatereportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryactivitybydatereportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryactivitybydatereport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryactivitybydatereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryactivitybydatereportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryactivitybydatereport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryactivitybydatereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryactivitybydatereportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryactivitybydatereport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryactivitybydatereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryactivitybydatereportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryactivitybydatereport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryactivitybydatereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryactivitybydatereportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryactivitybydatereport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryactivitybydatereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryactivitybydatereportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventoryactivitybydatereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryactivitybydatereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryactivitybydatereportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventoryactivitybydatereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryactivitybydatereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryassetattributereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventoryassetattributereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryassetattributereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventoryassetattributereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryassetattributereportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventoryassetattributereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryassetattributereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventoryassetattributereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryassetattributereportRunreportPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventoryassetattributereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryassetattributereport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventoryassetattributereportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryassetattributereportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryassetattributereportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryassetattributereport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryassetattributereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryassetattributereportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryassetattributereportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryassetattributereport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryassetattributereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryassetattributereportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryassetattributereportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryassetattributereport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryassetattributereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryassetattributereportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryassetattributereportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryassetattributereport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryassetattributereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryassetattributereportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryassetattributereportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryassetattributereport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryassetattributereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryassetattributereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryassetattributereportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventoryassetattributereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryassetattributereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryassetattributereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryassetattributereportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventoryassetattributereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryassetattributereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryattributesreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventoryattributesreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryattributesreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventoryattributesreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryattributesreportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventoryattributesreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryattributesreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventoryattributesreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryattributesreportRunreportPost(
          {required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventoryattributesreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryattributesreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventoryattributesreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryattributesreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryattributesreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryattributesreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryattributesreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryattributesreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryattributesreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryattributesreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryattributesreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryattributesreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryattributesreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryattributesreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryattributesreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportValidateattributeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryattributesreportValidateattributeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryattributesreport/validateattribute/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryattributesreportValidateattributeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryattributesreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventoryattributesreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryattributesreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryattributesreportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventoryattributesreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryattributesreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryavailabilityreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventoryavailabilityreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryavailabilityreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventoryavailabilityreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryavailabilityreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventoryavailabilityreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryavailabilityreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventoryavailabilityreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryavailabilityreportRunreportPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventoryavailabilityreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryavailabilityreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventoryavailabilityreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryavailabilityreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryavailabilityreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryavailabilityreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportValidaterentalcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryavailabilityreportValidaterentalcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryavailabilityreport/validaterentalcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryavailabilityreportValidaterentalcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryavailabilityreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryavailabilityreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryavailabilityreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportValidaterentalinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryavailabilityreportValidaterentalinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryavailabilityreport/validaterentalinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryavailabilityreportValidaterentalinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryavailabilityreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryavailabilityreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryavailabilityreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryavailabilityreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventoryavailabilityreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryavailabilityreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryavailabilityreportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventoryavailabilityreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryavailabilityreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorycatalogreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventorycatalogreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorycatalogreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventorycatalogreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorycatalogreportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventorycatalogreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorycatalogreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventorycatalogreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventorycatalogreportRunreportPost(
      {required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventorycatalogreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorycatalogreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _rentalinventorycatalogreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorycatalogreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorycatalogreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorycatalogreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorycatalogreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorycatalogreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorycatalogreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorycatalogreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorycatalogreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorycatalogreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidatewarehousecatalogBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorycatalogreportValidatewarehousecatalogBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorycatalogreport/validatewarehousecatalog/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorycatalogreportValidatewarehousecatalogBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorycatalogreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorycatalogreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorycatalogreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorycatalogreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorycatalogreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorycatalogreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorycatalogreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventorycatalogreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorycatalogreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorycatalogreportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventorycatalogreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorycatalogreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorychangereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventorychangereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorychangereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventorychangereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorychangereportExportexcelxlsxPost(
          {required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventorychangereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorychangereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventorychangereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventorychangereportRunreportPost(
      {required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventorychangereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorychangereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _rentalinventorychangereportRunreportPost(
      {@Body()
          required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorychangereportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorychangereport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorychangereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorychangereportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorychangereport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorychangereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorychangereportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorychangereport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorychangereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidatetransactiontypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorychangereportValidatetransactiontypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorychangereport/validatetransactiontype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorychangereportValidatetransactiontypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorychangereportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorychangereport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorychangereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorychangereportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorychangereport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorychangereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorychangereportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventorychangereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorychangereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorychangereportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventorychangereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorychangereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorymasterreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventorymasterreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymasterreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventorymasterreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorymasterreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventorymasterreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymasterreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventorymasterreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventorymasterreportRunreportPost(
      {required WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventorymasterreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymasterreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _rentalinventorymasterreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymasterreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymasterreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymasterreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymasterreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymasterreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymasterreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymasterreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymasterreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymasterreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymasterreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymasterreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymasterreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymasterreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymasterreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymasterreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymasterreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventorymasterreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymasterreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymasterreportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventorymasterreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymasterreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorymovementreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventorymovementreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymovementreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventorymovementreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorymovementreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventorymovementreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymovementreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventorymovementreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventorymovementreportRunreportPost(
      {required WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventorymovementreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymovementreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventorymovementreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymovementreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymovementreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymovementreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymovementreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymovementreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymovementreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymovementreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymovementreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymovementreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymovementreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymovementreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymovementreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymovementreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorymovementreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymovementreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymovementreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventorymovementreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymovementreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorymovementreportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventorymovementreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorymovementreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryoutagereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventoryoutagereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryoutagereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventoryoutagereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryoutagereportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventoryoutagereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryoutagereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventoryoutagereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventoryoutagereportRunreportPost(
      {required WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventoryoutagereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryoutagereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _rentalinventoryoutagereportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryoutagereportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryoutagereportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryoutagereport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryoutagereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryoutagereportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryoutagereportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryoutagereport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryoutagereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryoutagereportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryoutagereportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryoutagereport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryoutagereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryoutagereportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryoutagereportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryoutagereport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryoutagereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryoutagereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryoutagereportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventoryoutagereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryoutagereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryoutagereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryoutagereportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventoryoutagereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryoutagereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorypurchasehistoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventorypurchasehistoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorypurchasehistoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventorypurchasehistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorypurchasehistoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventorypurchasehistoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorypurchasehistoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventorypurchasehistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventorypurchasehistoryreportRunreportPost(
          {required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventorypurchasehistoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorypurchasehistoryreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventorypurchasehistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorypurchasehistoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorypurchasehistoryreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorypurchasehistoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorypurchasehistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorypurchasehistoryreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorypurchasehistoryreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorypurchasehistoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorypurchasehistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorypurchasehistoryreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorypurchasehistoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorypurchasehistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorypurchasehistoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventorypurchasehistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorypurchasehistoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorypurchasehistoryreportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventorypurchasehistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorypurchasehistoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryqcrequiredreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventoryqcrequiredreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryqcrequiredreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventoryqcrequiredreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryqcrequiredreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventoryqcrequiredreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryqcrequiredreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventoryqcrequiredreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryqcrequiredreportRunreportPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventoryqcrequiredreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryqcrequiredreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventoryqcrequiredreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryqcrequiredreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryqcrequiredreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryqcrequiredreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryqcrequiredreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryqcrequiredreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryqcrequiredreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryqcrequiredreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryqcrequiredreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryqcrequiredreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryqcrequiredreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryqcrequiredreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryqcrequiredreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryqcrequiredreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryqcrequiredreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryqcrequiredreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryqcrequiredreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventoryqcrequiredreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryqcrequiredreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryqcrequiredreportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventoryqcrequiredreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryqcrequiredreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryrepairhistoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventoryrepairhistoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryrepairhistoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventoryrepairhistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryrepairhistoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventoryrepairhistoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryrepairhistoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventoryrepairhistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryrepairhistoryreportRunreportPost(
          {required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventoryrepairhistoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryrepairhistoryreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventoryrepairhistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryrepairhistoryreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryrepairhistoryreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryrepairhistoryreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryrepairhistoryreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryrepairhistoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryrepairhistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryrepairhistoryreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryrepairhistoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryrepairhistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryrepairhistoryreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryrepairhistoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryrepairhistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryrepairhistoryreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryrepairhistoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryrepairhistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryrepairhistoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventoryrepairhistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryrepairhistoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryrepairhistoryreportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventoryrepairhistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryrepairhistoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorystatusandrevenuereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventorystatusandrevenuereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorystatusandrevenuereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventorystatusandrevenuereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorystatusandrevenuereportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventorystatusandrevenuereportExportexcelxlsxPost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorystatusandrevenuereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventorystatusandrevenuereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventorystatusandrevenuereportRunreportPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventorystatusandrevenuereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorystatusandrevenuereport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventorystatusandrevenuereportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorystatusandrevenuereportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorystatusandrevenuereport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorystatusandrevenuereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorystatusandrevenuereportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorystatusandrevenuereport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorystatusandrevenuereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorystatusandrevenuereportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorystatusandrevenuereport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorystatusandrevenuereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorystatusandrevenuereportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorystatusandrevenuereport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorystatusandrevenuereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorystatusandrevenuereportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventorystatusandrevenuereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorystatusandrevenuereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorystatusandrevenuereportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventorystatusandrevenuereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorystatusandrevenuereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorysummarybyrankreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventorysummarybyrankreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorysummarybyrankreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventorysummarybyrankreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorysummarybyrankreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventorysummarybyrankreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorysummarybyrankreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventorysummarybyrankreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventorysummarybyrankreportRunreportPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventorysummarybyrankreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventorysummarybyrankreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventorysummarybyrankreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorysummarybyrankreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorysummarybyrankreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventorysummarybyrankreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorysummarybyrankreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorysummarybyrankreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorysummarybyrankreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventorysummarybyrankreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorysummarybyrankreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorysummarybyrankreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventorysummarybyrankreportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventorysummarybyrankreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventorysummarybyrankreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryunuseditemsreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventoryunuseditemsreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryunuseditemsreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventoryunuseditemsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryunuseditemsreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventoryunuseditemsreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryunuseditemsreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventoryunuseditemsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryunuseditemsreportRunreportPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventoryunuseditemsreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryunuseditemsreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventoryunuseditemsreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryunuseditemsreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryunuseditemsreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryunuseditemsreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryunuseditemsreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryunuseditemsreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryunuseditemsreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryunuseditemsreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryunuseditemsreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryunuseditemsreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryunuseditemsreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryunuseditemsreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryunuseditemsreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryunuseditemsreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryunuseditemsreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryunuseditemsreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryunuseditemsreportValidatedepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryunuseditemsreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryunuseditemsreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryunuseditemsreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryunuseditemsreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryunuseditemsreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryunuseditemsreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventoryunuseditemsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryunuseditemsreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryunuseditemsreportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventoryunuseditemsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryunuseditemsreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryusagebycustomerreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventoryusagebycustomerreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagebycustomerreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventoryusagebycustomerreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryusagebycustomerreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventoryusagebycustomerreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagebycustomerreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventoryusagebycustomerreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryusagebycustomerreportRunreportPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventoryusagebycustomerreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagebycustomerreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentalinventoryusagebycustomerreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagebycustomerreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagebycustomerreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagebycustomerreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagebycustomerreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagebycustomerreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagebycustomerreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagebycustomerreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagebycustomerreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagebycustomerreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagebycustomerreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagebycustomerreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagebycustomerreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagebycustomerreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagebycustomerreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagebycustomerreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagebycustomerreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagebycustomerreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagebycustomerreportValidatecustomerBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagebycustomerreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagebycustomerreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagebycustomerreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagebycustomerreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventoryusagebycustomerreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagebycustomerreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagebycustomerreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagebycustomerreportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventoryusagebycustomerreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagebycustomerreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryusagereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventoryusagereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventoryusagereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryusagereportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventoryusagereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventoryusagereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventoryusagereportRunreportPost(
      {required WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventoryusagereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _rentalinventoryusagereportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagereportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagereport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagereportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagereport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagereportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagereport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagereportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryusagereport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagereportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventoryusagereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryusagereportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventoryusagereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryusagereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryvaluereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentalinventoryvaluereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryvaluereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentalinventoryvaluereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryvaluereportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentalinventoryvaluereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryvaluereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentalinventoryvaluereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventoryvaluereportRunreportPost(
      {required WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentalinventoryvaluereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryvaluereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _rentalinventoryvaluereportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryvaluereportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryvaluereport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryvaluereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryvaluereportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryvaluereport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryvaluereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryvaluereportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryvaluereport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryvaluereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryvaluereportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryvaluereport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryvaluereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryvaluereportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/rentalinventoryvaluereport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryvaluereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryvaluereportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentalinventoryvaluereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryvaluereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentalinventoryvaluereportPreviewGet();
  }

  ///
  @Get(path: '/rentalinventoryvaluereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentalinventoryvaluereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentallostanddamagedbillinghistoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/rentallostanddamagedbillinghistoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _rentallostanddamagedbillinghistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentallostanddamagedbillinghistoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportExportexcelxlsxPost(
        body: body);
  }

  ///
  @Post(
    path: '/rentallostanddamagedbillinghistoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _rentallostanddamagedbillinghistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentallostanddamagedbillinghistoryreportRunreportPost(
          {required WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/rentallostanddamagedbillinghistoryreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _rentallostanddamagedbillinghistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path:
        '/rentallostanddamagedbillinghistoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentallostanddamagedbillinghistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentallostanddamagedbillinghistoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentallostanddamagedbillinghistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentallostanddamagedbillinghistoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentallostanddamagedbillinghistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentallostanddamagedbillinghistoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentallostanddamagedbillinghistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidateretiredreasonBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportValidateretiredreasonBrowsePost(
        body: body);
  }

  ///
  @Post(
    path:
        '/rentallostanddamagedbillinghistoryreport/validateretiredreason/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentallostanddamagedbillinghistoryreportValidateretiredreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportValidatecustomerBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentallostanddamagedbillinghistoryreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentallostanddamagedbillinghistoryreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidateunretiredreasonBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportValidateunretiredreasonBrowsePost(
        body: body);
  }

  ///
  @Post(
    path:
        '/rentallostanddamagedbillinghistoryreport/validateunretiredreason/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentallostanddamagedbillinghistoryreportValidateunretiredreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportValidatedealBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/rentallostanddamagedbillinghistoryreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentallostanddamagedbillinghistoryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/rentallostanddamagedbillinghistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentallostanddamagedbillinghistoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _rentallostanddamagedbillinghistoryreportPreviewGet();
  }

  ///
  @Get(path: '/rentallostanddamagedbillinghistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _rentallostanddamagedbillinghistoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      repairorderreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _repairorderreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/repairorderreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _repairorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> repairorderreportRunreportPost(
      {required WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _repairorderreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/repairorderreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _repairorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderreportEmptyobjectGet();
  }

  ///
  @Get(path: '/repairorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderreportPreviewGet();
  }

  ///
  @Get(path: '/repairorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      repairorderstatusreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _repairorderstatusreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _repairorderstatusreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      repairorderstatusreportExportexcelxlsxPost(
          {required WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _repairorderstatusreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _repairorderstatusreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> repairorderstatusreportRunreportPost(
      {required WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _repairorderstatusreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _repairorderstatusreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderstatusreportValidateinventorytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderstatusreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderstatusreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderstatusreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderstatusreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderstatusreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderstatusreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderstatusreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderstatusreportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderstatusreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderstatusreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderstatusreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidaterepairitemstatusBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderstatusreportValidaterepairitemstatusBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/validaterepairitemstatus/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderstatusreportValidaterepairitemstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderstatusreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderstatusreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatevendorrepairitemstatusBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderstatusreportValidatevendorrepairitemstatusBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/repairorderstatusreport/validatevendorrepairitemstatus/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderstatusreportValidatevendorrepairitemstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderstatusreportEmptyobjectGet();
  }

  ///
  @Get(path: '/repairorderstatusreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderstatusreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairorderstatusreportPreviewGet();
  }

  ///
  @Get(path: '/repairorderstatusreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairorderstatusreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      repairtagRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _repairtagRenderPost(body: body);
  }

  ///
  @Post(
    path: '/repairtag/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _repairtagRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      repairtagExportexcelxlsxPost(
          {required WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _repairtagExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/repairtag/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _repairtagExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>> repairtagRunreportPost(
      {required WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _repairtagRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/repairtag/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>> _repairtagRunreportPost(
      {@Body()
          required WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairtagEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairtagEmptyobjectGet();
  }

  ///
  @Get(path: '/repairtag/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairtagEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairtagPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _repairtagPreviewGet();
  }

  ///
  @Get(path: '/repairtag/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _repairtagPreviewGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      reportsettingsBrowsePost({required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _reportsettingsBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/reportsettings/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _reportsettingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      reportsettingsExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _reportsettingsExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/reportsettings/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _reportsettingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic>>
      reportsettingsGet({
    int? pageno,
    int? pagesize,
    String? sort,
    List<FwStandardModelsFwQueryFilter>? filter,
  }) {
    generatedMapping.putIfAbsent(
        FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic,
        () =>
            FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic
                .fromJsonFactory);

    return _reportsettingsGet(
        pageno: pageno, pagesize: pagesize, sort: sort, filter: filter);
  }

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/reportsettings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic>>
      _reportsettingsGet({
    @Query('pageno') int? pageno,
    @Query('pagesize') int? pagesize,
    @Query('sort') String? sort,
    @Query('filter') List<FwStandardModelsFwQueryFilter>? filter,
  });

  ///
  Future<
          chopper
              .Response<WebApiModulesReportsSharedReportSettingsReportSettings>>
      reportsettingsPost(
          {required WebApiModulesReportsSharedReportSettingsReportSettings?
              body}) {
    generatedMapping.putIfAbsent(
        WebApiModulesReportsSharedReportSettingsReportSettings,
        () => WebApiModulesReportsSharedReportSettingsReportSettings
            .fromJsonFactory);

    return _reportsettingsPost(body: body);
  }

  ///
  @Post(
    path: '/reportsettings',
    optionalBody: true,
  )
  Future<
          chopper
              .Response<WebApiModulesReportsSharedReportSettingsReportSettings>>
      _reportsettingsPost(
          {@Body()
              required WebApiModulesReportsSharedReportSettingsReportSettings?
                  body});

  ///
  ///@param id
  Future<
          chopper
              .Response<WebApiModulesReportsSharedReportSettingsReportSettings>>
      reportsettingsIdGet({required String? id}) {
    generatedMapping.putIfAbsent(
        WebApiModulesReportsSharedReportSettingsReportSettings,
        () => WebApiModulesReportsSharedReportSettingsReportSettings
            .fromJsonFactory);

    return _reportsettingsIdGet(id: id);
  }

  ///
  ///@param id
  @Get(path: '/reportsettings/{id}')
  Future<
          chopper
              .Response<WebApiModulesReportsSharedReportSettingsReportSettings>>
      _reportsettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  Future<
          chopper
              .Response<WebApiModulesReportsSharedReportSettingsReportSettings>>
      reportsettingsIdPut({
    required String? id,
    required WebApiModulesReportsSharedReportSettingsReportSettings? body,
  }) {
    generatedMapping.putIfAbsent(
        WebApiModulesReportsSharedReportSettingsReportSettings,
        () => WebApiModulesReportsSharedReportSettingsReportSettings
            .fromJsonFactory);

    return _reportsettingsIdPut(id: id, body: body);
  }

  ///
  ///@param id
  @Put(
    path: '/reportsettings/{id}',
    optionalBody: true,
  )
  Future<
          chopper
              .Response<WebApiModulesReportsSharedReportSettingsReportSettings>>
      _reportsettingsIdPut({
    @Path('id')
        required String? id,
    @Body()
        required WebApiModulesReportsSharedReportSettingsReportSettings? body,
  });

  ///
  ///@param id
  Future<chopper.Response<bool>> reportsettingsIdDelete({required String? id}) {
    return _reportsettingsIdDelete(id: id);
  }

  ///
  ///@param id
  @Delete(path: '/reportsettings/{id}')
  Future<chopper.Response<bool>> _reportsettingsIdDelete(
      {@Path('id') required String? id});

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      retiredrentalinventoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _retiredrentalinventoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/retiredrentalinventoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _retiredrentalinventoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      retiredrentalinventoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _retiredrentalinventoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/retiredrentalinventoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _retiredrentalinventoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> retiredrentalinventoryreportRunreportPost(
      {required WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _retiredrentalinventoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/retiredrentalinventoryreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _retiredrentalinventoryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _retiredrentalinventoryreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/retiredrentalinventoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _retiredrentalinventoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _retiredrentalinventoryreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/retiredrentalinventoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _retiredrentalinventoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _retiredrentalinventoryreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/retiredrentalinventoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _retiredrentalinventoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _retiredrentalinventoryreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/retiredrentalinventoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _retiredrentalinventoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _retiredrentalinventoryreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/retiredrentalinventoryreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _retiredrentalinventoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidateretiredreasonBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _retiredrentalinventoryreportValidateretiredreasonBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/retiredrentalinventoryreport/validateretiredreason/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _retiredrentalinventoryreportValidateretiredreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _retiredrentalinventoryreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/retiredrentalinventoryreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _retiredrentalinventoryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _retiredrentalinventoryreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/retiredrentalinventoryreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _retiredrentalinventoryreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _retiredrentalinventoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/retiredrentalinventoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _retiredrentalinventoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _retiredrentalinventoryreportPreviewGet();
  }

  ///
  @Get(path: '/retiredrentalinventoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _retiredrentalinventoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      returncontractreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _returncontractreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/returncontractreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _returncontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> returncontractreportRunreportPost(
      {required WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _returncontractreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/returncontractreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _returncontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returncontractreportValidatecontractBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returncontractreportValidatecontractBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returncontractreport/validatecontract/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returncontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returncontractreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returncontractreportEmptyobjectGet();
  }

  ///
  @Get(path: '/returncontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returncontractreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returncontractreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returncontractreportPreviewGet();
  }

  ///
  @Get(path: '/returncontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returncontractreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      returnedtoinventoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _returnedtoinventoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/returnedtoinventoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _returnedtoinventoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      returnedtoinventoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _returnedtoinventoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/returnedtoinventoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _returnedtoinventoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> returnedtoinventoryreportRunreportPost(
      {required WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _returnedtoinventoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/returnedtoinventoryreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _returnedtoinventoryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnedtoinventoryreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/returnedtoinventoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnedtoinventoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnedtoinventoryreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnedtoinventoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnedtoinventoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnedtoinventoryreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnedtoinventoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnedtoinventoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnedtoinventoryreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnedtoinventoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnedtoinventoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnedtoinventoryreportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnedtoinventoryreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnedtoinventoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidateuserBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnedtoinventoryreportValidateuserBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnedtoinventoryreport/validateuser/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnedtoinventoryreportValidateuserBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnedtoinventoryreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnedtoinventoryreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnedtoinventoryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnedtoinventoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/returnedtoinventoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnedtoinventoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnedtoinventoryreportPreviewGet();
  }

  ///
  @Get(path: '/returnedtoinventoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnedtoinventoryreportPreviewGet();

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      returnlistreportExportexcelxlsxPost(
          {required WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _returnlistreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/returnlistreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _returnlistreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      returnlistreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _returnlistreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/returnlistreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _returnlistreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> returnlistreportRunreportPost(
      {required WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _returnlistreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/returnlistreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _returnlistreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnlistreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnlistreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnlistreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnlistreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnlistreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnlistreportEmptyobjectGet();
  }

  ///
  @Get(path: '/returnlistreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnlistreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnlistreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnlistreportPreviewGet();
  }

  ///
  @Get(path: '/returnlistreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnlistreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetperiodBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnonassetperiodBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetperiod/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnonassetperiodBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      returnonassetperiodExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _returnonassetperiodExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetperiod/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _returnonassetperiodExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      returnonassetreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _returnonassetreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _returnonassetreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      returnonassetreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _returnonassetreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _returnonassetreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> returnonassetreportRunreportPost(
      {required WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _returnonassetreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _returnonassetreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnonassetreportValidateinventorytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnonassetreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnonassetreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnonassetreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnonassetreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnonassetreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnonassetreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnonassetreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnonassetreportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnonassetreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnonassetreportEmptyobjectGet();
  }

  ///
  @Get(path: '/returnonassetreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnonassetreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnonassetreportPreviewGet();
  }

  ///
  @Get(path: '/returnonassetreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnonassetreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetyearBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnonassetyearBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetyear/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnonassetyearBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      returnonassetyearExportexcelxlsxPost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _returnonassetyearExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/returnonassetyear/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _returnonassetyearExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      returnreceiptreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _returnreceiptreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/returnreceiptreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _returnreceiptreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      returnreceiptreportExportexcelxlsxPost(
          {required WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _returnreceiptreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/returnreceiptreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _returnreceiptreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> returnreceiptreportRunreportPost(
      {required WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _returnreceiptreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/returnreceiptreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _returnreceiptreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnreceiptreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnreceiptreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnreceiptreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnreceiptreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnreceiptreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnreceiptreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnreceiptreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnreceiptreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnreceiptreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnreceiptreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnreceiptreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnreceiptreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnreceiptreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnreceiptreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnreceiptreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnreceiptreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/returnreceiptreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnreceiptreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnreceiptreportEmptyobjectGet();
  }

  ///
  @Get(path: '/returnreceiptreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnreceiptreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _returnreceiptreportPreviewGet();
  }

  ///
  @Get(path: '/returnreceiptreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _returnreceiptreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      revenuereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _revenuereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/revenuereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _revenuereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      revenuereportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _revenuereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/revenuereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _revenuereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest?
                  body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> revenuereportRunreportPost(
      {required WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _revenuereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/revenuereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> _revenuereportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      revenuereportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _revenuereportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/revenuereport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _revenuereportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      revenuereportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _revenuereportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/revenuereport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _revenuereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      revenuereportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _revenuereportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/revenuereport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _revenuereportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      revenuereportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _revenuereportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/revenuereport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _revenuereportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      revenuereportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _revenuereportValidateinventorytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/revenuereport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _revenuereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      revenuereportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _revenuereportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/revenuereport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _revenuereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      revenuereportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _revenuereportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/revenuereport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _revenuereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      revenuereportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _revenuereportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/revenuereport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _revenuereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      revenuereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _revenuereportEmptyobjectGet();
  }

  ///
  @Get(path: '/revenuereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _revenuereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      revenuereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _revenuereportPreviewGet();
  }

  ///
  @Get(path: '/revenuereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _revenuereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesbackorderreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salesbackorderreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salesbackorderreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salesbackorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesbackorderreportExportexcelxlsxPost(
          {required WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salesbackorderreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salesbackorderreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salesbackorderreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesbackorderreportRunreportPost(
      {required WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salesbackorderreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salesbackorderreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _salesbackorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesbackorderreportValidateinventorytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesbackorderreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesbackorderreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesbackorderreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesbackorderreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesbackorderreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesbackorderreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesbackorderreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesbackorderreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesbackorderreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesbackorderreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesbackorderreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesbackorderreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesbackorderreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesbackorderreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesbackorderreportEmptyobjectGet();
  }

  ///
  @Get(path: '/salesbackorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesbackorderreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesbackorderreportPreviewGet();
  }

  ///
  @Get(path: '/salesbackorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesbackorderreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      saleshistoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _saleshistoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/saleshistoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _saleshistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      saleshistoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _saleshistoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/saleshistoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _saleshistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> saleshistoryreportRunreportPost(
      {required WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _saleshistoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/saleshistoryreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _saleshistoryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _saleshistoryreportValidateinventorytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/saleshistoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _saleshistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _saleshistoryreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/saleshistoryreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _saleshistoryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _saleshistoryreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/saleshistoryreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _saleshistoryreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _saleshistoryreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/saleshistoryreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _saleshistoryreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _saleshistoryreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/saleshistoryreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _saleshistoryreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _saleshistoryreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/saleshistoryreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _saleshistoryreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _saleshistoryreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/saleshistoryreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _saleshistoryreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _saleshistoryreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/saleshistoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _saleshistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _saleshistoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/saleshistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _saleshistoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _saleshistoryreportPreviewGet();
  }

  ///
  @Get(path: '/saleshistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _saleshistoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventoryattributesreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salesinventoryattributesreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryattributesreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salesinventoryattributesreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventoryattributesreportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salesinventoryattributesreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryattributesreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salesinventoryattributesreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      salesinventoryattributesreportRunreportPost(
          {required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salesinventoryattributesreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryattributesreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _salesinventoryattributesreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryattributesreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryattributesreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryattributesreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryattributesreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryattributesreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryattributesreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportValidateattributeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryattributesreportValidateattributeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryattributesreport/validateattribute/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryattributesreportValidateattributeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryattributesreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryattributesreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryattributesreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryattributesreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryattributesreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryattributesreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryattributesreportEmptyobjectGet();
  }

  ///
  @Get(path: '/salesinventoryattributesreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryattributesreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryattributesreportPreviewGet();
  }

  ///
  @Get(path: '/salesinventoryattributesreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryattributesreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventorycatalogreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salesinventorycatalogreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorycatalogreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salesinventorycatalogreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventorycatalogreportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salesinventorycatalogreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorycatalogreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salesinventorycatalogreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesinventorycatalogreportRunreportPost(
      {required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salesinventorycatalogreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorycatalogreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _salesinventorycatalogreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorycatalogreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorycatalogreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorycatalogreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorycatalogreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorycatalogreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorycatalogreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorycatalogreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorycatalogreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorycatalogreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorycatalogreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorycatalogreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorycatalogreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorycatalogreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorycatalogreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorycatalogreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidatewarehousecatalogBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorycatalogreportValidatewarehousecatalogBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorycatalogreport/validatewarehousecatalog/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorycatalogreportValidatewarehousecatalogBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorycatalogreportEmptyobjectGet();
  }

  ///
  @Get(path: '/salesinventorycatalogreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorycatalogreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorycatalogreportPreviewGet();
  }

  ///
  @Get(path: '/salesinventorycatalogreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorycatalogreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventorychangereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salesinventorychangereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorychangereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salesinventorychangereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventorychangereportExportexcelxlsxPost(
          {required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salesinventorychangereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorychangereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salesinventorychangereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesinventorychangereportRunreportPost(
      {required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salesinventorychangereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorychangereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _salesinventorychangereportRunreportPost(
      {@Body()
          required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorychangereportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorychangereport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorychangereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorychangereportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorychangereport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorychangereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorychangereportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorychangereport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorychangereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidatetransactiontypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorychangereportValidatetransactiontypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorychangereport/validatetransactiontype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorychangereportValidatetransactiontypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorychangereportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorychangereport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorychangereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorychangereportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorychangereport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorychangereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorychangereportEmptyobjectGet();
  }

  ///
  @Get(path: '/salesinventorychangereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorychangereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorychangereportPreviewGet();
  }

  ///
  @Get(path: '/salesinventorychangereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorychangereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventorymasterreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salesinventorymasterreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorymasterreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salesinventorymasterreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventorymasterreportExportexcelxlsxPost(
          {required WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salesinventorymasterreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorymasterreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salesinventorymasterreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesinventorymasterreportRunreportPost(
      {required WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salesinventorymasterreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorymasterreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _salesinventorymasterreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorymasterreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorymasterreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorymasterreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorymasterreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorymasterreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorymasterreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorymasterreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorymasterreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorymasterreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorymasterreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorymasterreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorymasterreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorymasterreportEmptyobjectGet();
  }

  ///
  @Get(path: '/salesinventorymasterreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorymasterreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorymasterreportPreviewGet();
  }

  ///
  @Get(path: '/salesinventorymasterreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorymasterreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventorypurchasehistoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salesinventorypurchasehistoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorypurchasehistoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salesinventorypurchasehistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventorypurchasehistoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salesinventorypurchasehistoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorypurchasehistoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salesinventorypurchasehistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      salesinventorypurchasehistoryreportRunreportPost(
          {required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salesinventorypurchasehistoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorypurchasehistoryreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _salesinventorypurchasehistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorypurchasehistoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorypurchasehistoryreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorypurchasehistoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorypurchasehistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorypurchasehistoryreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorypurchasehistoryreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorypurchasehistoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorypurchasehistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorypurchasehistoryreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorypurchasehistoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorypurchasehistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorypurchasehistoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/salesinventorypurchasehistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorypurchasehistoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorypurchasehistoryreportPreviewGet();
  }

  ///
  @Get(path: '/salesinventorypurchasehistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorypurchasehistoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventoryreorderreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salesinventoryreorderreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryreorderreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salesinventoryreorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventoryreorderreportExportexcelxlsxPost(
          {required WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salesinventoryreorderreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryreorderreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salesinventoryreorderreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesinventoryreorderreportRunreportPost(
      {required WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salesinventoryreorderreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryreorderreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _salesinventoryreorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryreorderreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryreorderreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryreorderreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryreorderreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryreorderreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryreorderreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryreorderreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryreorderreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryreorderreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryreorderreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryreorderreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryreorderreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryreorderreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryreorderreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryreorderreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryreorderreportEmptyobjectGet();
  }

  ///
  @Get(path: '/salesinventoryreorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryreorderreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryreorderreportPreviewGet();
  }

  ///
  @Get(path: '/salesinventoryreorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryreorderreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventoryrepairhistoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salesinventoryrepairhistoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryrepairhistoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salesinventoryrepairhistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventoryrepairhistoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salesinventoryrepairhistoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryrepairhistoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salesinventoryrepairhistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      salesinventoryrepairhistoryreportRunreportPost(
          {required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salesinventoryrepairhistoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventoryrepairhistoryreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _salesinventoryrepairhistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryrepairhistoryreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryrepairhistoryreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryrepairhistoryreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryrepairhistoryreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryrepairhistoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryrepairhistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryrepairhistoryreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryrepairhistoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryrepairhistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryrepairhistoryreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryrepairhistoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryrepairhistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryrepairhistoryreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventoryrepairhistoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryrepairhistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryrepairhistoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/salesinventoryrepairhistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryrepairhistoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventoryrepairhistoryreportPreviewGet();
  }

  ///
  @Get(path: '/salesinventoryrepairhistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventoryrepairhistoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventorytransactionreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salesinventorytransactionreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorytransactionreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salesinventorytransactionreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventorytransactionreportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salesinventorytransactionreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorytransactionreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salesinventorytransactionreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      salesinventorytransactionreportRunreportPost(
          {required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salesinventorytransactionreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salesinventorytransactionreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _salesinventorytransactionreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorytransactionreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorytransactionreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorytransactionreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorytransactionreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorytransactionreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorytransactionreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorytransactionreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorytransactionreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorytransactionreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorytransactionreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorytransactionreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorytransactionreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorytransactionreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesinventorytransactionreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorytransactionreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorytransactionreportEmptyobjectGet();
  }

  ///
  @Get(path: '/salesinventorytransactionreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorytransactionreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesinventorytransactionreportPreviewGet();
  }

  ///
  @Get(path: '/salesinventorytransactionreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesinventorytransactionreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesquotebillingreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salesquotebillingreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salesquotebillingreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salesquotebillingreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesquotebillingreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salesquotebillingreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salesquotebillingreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salesquotebillingreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesquotebillingreportRunreportPost(
      {required WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salesquotebillingreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salesquotebillingreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _salesquotebillingreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesquotebillingreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesquotebillingreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesquotebillingreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesquotebillingreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesquotebillingreportValidateagentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesquotebillingreportValidateagentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesquotebillingreport/validateagent/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesquotebillingreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesquotebillingreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesquotebillingreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesquotebillingreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesquotebillingreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesquotebillingreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesquotebillingreportEmptyobjectGet();
  }

  ///
  @Get(path: '/salesquotebillingreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesquotebillingreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesquotebillingreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesquotebillingreportPreviewGet();
  }

  ///
  @Get(path: '/salesquotebillingreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesquotebillingreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesrepresentativebillingreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salesrepresentativebillingreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salesrepresentativebillingreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salesrepresentativebillingreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesrepresentativebillingreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salesrepresentativebillingreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salesrepresentativebillingreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salesrepresentativebillingreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      salesrepresentativebillingreportRunreportPost(
          {required WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salesrepresentativebillingreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salesrepresentativebillingreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _salesrepresentativebillingreportRunreportPost(
          {@Body()
              required WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesrepresentativebillingreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salesrepresentativebillingreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesrepresentativebillingreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesrepresentativebillingreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesrepresentativebillingreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesrepresentativebillingreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportValidatesalesrepresentativeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesrepresentativebillingreportValidatesalesrepresentativeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path:
        '/salesrepresentativebillingreport/validatesalesrepresentative/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesrepresentativebillingreportValidatesalesrepresentativeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesrepresentativebillingreportValidatedepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesrepresentativebillingreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesrepresentativebillingreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesrepresentativebillingreportValidatecustomerBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/salesrepresentativebillingreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesrepresentativebillingreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesrepresentativebillingreportEmptyobjectGet();
  }

  ///
  @Get(path: '/salesrepresentativebillingreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesrepresentativebillingreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salesrepresentativebillingreportPreviewGet();
  }

  ///
  @Get(path: '/salesrepresentativebillingreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salesrepresentativebillingreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salestaxcanadareportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salestaxcanadareportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salestaxcanadareport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salestaxcanadareportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salestaxcanadareportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salestaxcanadareportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salestaxcanadareport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salestaxcanadareportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salestaxcanadareportRunreportPost(
      {required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salestaxcanadareportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salestaxcanadareport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _salestaxcanadareportRunreportPost(
      {@Body()
          required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxcanadareportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salestaxcanadareportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salestaxcanadareport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salestaxcanadareportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxcanadareportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salestaxcanadareportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salestaxcanadareport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salestaxcanadareportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxcanadareportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salestaxcanadareportEmptyobjectGet();
  }

  ///
  @Get(path: '/salestaxcanadareport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salestaxcanadareportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxcanadareportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salestaxcanadareportPreviewGet();
  }

  ///
  @Get(path: '/salestaxcanadareport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salestaxcanadareportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salestaxusareportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _salestaxusareportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/salestaxusareport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _salestaxusareportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salestaxusareportExportexcelxlsxPost(
          {required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _salestaxusareportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/salestaxusareport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _salestaxusareportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salestaxusareportRunreportPost(
      {required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _salestaxusareportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/salestaxusareport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _salestaxusareportRunreportPost(
      {@Body()
          required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxusareportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salestaxusareportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salestaxusareport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salestaxusareportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxusareportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salestaxusareportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/salestaxusareport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salestaxusareportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxusareportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salestaxusareportEmptyobjectGet();
  }

  ///
  @Get(path: '/salestaxusareport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salestaxusareportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxusareportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _salestaxusareportPreviewGet();
  }

  ///
  @Get(path: '/salestaxusareport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _salestaxusareportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      setbrochurereportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _setbrochurereportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/setbrochurereport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _setbrochurereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      setbrochurereportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _setbrochurereportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/setbrochurereport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _setbrochurereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> setbrochurereportRunreportPost(
      {required WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _setbrochurereportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/setbrochurereport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _setbrochurereportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      setbrochurereportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _setbrochurereportEmptyobjectGet();
  }

  ///
  @Get(path: '/setbrochurereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _setbrochurereportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      setbrochurereportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _setbrochurereportPreviewGet();
  }

  ///
  @Get(path: '/setbrochurereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _setbrochurereportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      storagecontainerlabelRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _storagecontainerlabelRenderPost(body: body);
  }

  ///
  @Post(
    path: '/storagecontainerlabel/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _storagecontainerlabelRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      storagecontainerlabelExportexcelxlsxPost(
          {required WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _storagecontainerlabelExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/storagecontainerlabel/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _storagecontainerlabelExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> storagecontainerlabelRunreportPost(
      {required WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _storagecontainerlabelRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/storagecontainerlabel/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _storagecontainerlabelRunreportPost(
      {@Body()
          required WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      storagecontainerlabelEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _storagecontainerlabelEmptyobjectGet();
  }

  ///
  @Get(path: '/storagecontainerlabel/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _storagecontainerlabelEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      storagecontainerlabelPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _storagecontainerlabelPreviewGet();
  }

  ///
  @Get(path: '/storagecontainerlabel/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _storagecontainerlabelPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      subitemstatusreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _subitemstatusreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/subitemstatusreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _subitemstatusreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      subitemstatusreportExportexcelxlsxPost(
          {required WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _subitemstatusreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/subitemstatusreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _subitemstatusreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> subitemstatusreportRunreportPost(
      {required WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _subitemstatusreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/subitemstatusreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _subitemstatusreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subitemstatusreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subitemstatusreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subitemstatusreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subitemstatusreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subitemstatusreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subitemstatusreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subitemstatusreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subitemstatusreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subitemstatusreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subitemstatusreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subitemstatusreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subitemstatusreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subitemstatusreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subitemstatusreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subitemstatusreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidatepoclassificationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subitemstatusreportValidatepoclassificationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subitemstatusreport/validatepoclassification/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subitemstatusreportValidatepoclassificationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subitemstatusreportEmptyobjectGet();
  }

  ///
  @Get(path: '/subitemstatusreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subitemstatusreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subitemstatusreportPreviewGet();
  }

  ///
  @Get(path: '/subitemstatusreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subitemstatusreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      subprofitabilityreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _subprofitabilityreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/subprofitabilityreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _subprofitabilityreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      subprofitabilityreportExportexcelxlsxPost(
          {required WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _subprofitabilityreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/subprofitabilityreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _subprofitabilityreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> subprofitabilityreportRunreportPost(
      {required WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _subprofitabilityreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/subprofitabilityreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _subprofitabilityreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subprofitabilityreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subprofitabilityreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subprofitabilityreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subprofitabilityreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subprofitabilityreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subprofitabilityreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidatecustomerBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subprofitabilityreportValidatecustomerBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subprofitabilityreport/validatecustomer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subprofitabilityreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidateorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subprofitabilityreportValidateorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subprofitabilityreport/validateorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subprofitabilityreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subprofitabilityreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subprofitabilityreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subprofitabilityreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidatepoclassificationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subprofitabilityreportValidatepoclassificationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/subprofitabilityreport/validatepoclassification/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subprofitabilityreportValidatepoclassificationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subprofitabilityreportEmptyobjectGet();
  }

  ///
  @Get(path: '/subprofitabilityreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subprofitabilityreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subprofitabilityreportPreviewGet();
  }

  ///
  @Get(path: '/subprofitabilityreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subprofitabilityreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      subrentalbillinganalysisreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _subrentalbillinganalysisreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/subrentalbillinganalysisreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _subrentalbillinganalysisreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      subrentalbillinganalysisreportExportexcelxlsxPost(
          {required WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _subrentalbillinganalysisreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/subrentalbillinganalysisreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _subrentalbillinganalysisreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      subrentalbillinganalysisreportRunreportPost(
          {required WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _subrentalbillinganalysisreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/subrentalbillinganalysisreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _subrentalbillinganalysisreportRunreportPost(
          {@Body()
              required WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subrentalbillinganalysisreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subrentalbillinganalysisreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subrentalbillinganalysisreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subrentalbillinganalysisreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/subrentalbillinganalysisreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subrentalbillinganalysisreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidatepurchaseorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subrentalbillinganalysisreportValidatepurchaseorderBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/subrentalbillinganalysisreport/validatepurchaseorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subrentalbillinganalysisreportValidatepurchaseorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidatepoclassificationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subrentalbillinganalysisreportValidatepoclassificationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/subrentalbillinganalysisreport/validatepoclassification/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subrentalbillinganalysisreportValidatepoclassificationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subrentalbillinganalysisreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subrentalbillinganalysisreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subrentalbillinganalysisreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subrentalbillinganalysisreportValidatedepartmentBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/subrentalbillinganalysisreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subrentalbillinganalysisreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subrentalbillinganalysisreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/subrentalbillinganalysisreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subrentalbillinganalysisreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subrentalbillinganalysisreportEmptyobjectGet();
  }

  ///
  @Get(path: '/subrentalbillinganalysisreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subrentalbillinganalysisreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subrentalbillinganalysisreportPreviewGet();
  }

  ///
  @Get(path: '/subrentalbillinganalysisreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subrentalbillinganalysisreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      subsalesstageditemsreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _subsalesstageditemsreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/subsalesstageditemsreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _subsalesstageditemsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      subsalesstageditemsreportExportexcelxlsxPost(
          {required WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _subsalesstageditemsreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/subsalesstageditemsreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _subsalesstageditemsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> subsalesstageditemsreportRunreportPost(
      {required WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _subsalesstageditemsreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/subsalesstageditemsreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _subsalesstageditemsreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subsalesstageditemsreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subsalesstageditemsreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subsalesstageditemsreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subsalesstageditemsreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subsalesstageditemsreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subsalesstageditemsreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subsalesstageditemsreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subsalesstageditemsreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subsalesstageditemsreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subsalesstageditemsreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/subsalesstageditemsreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subsalesstageditemsreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subsalesstageditemsreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subsalesstageditemsreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subsalesstageditemsreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subsalesstageditemsreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subsalesstageditemsreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subsalesstageditemsreportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subsalesstageditemsreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subsalesstageditemsreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subsalesstageditemsreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subsalesstageditemsreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/subsalesstageditemsreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subsalesstageditemsreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subsalesstageditemsreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subsalesstageditemsreportEmptyobjectGet();
  }

  ///
  @Get(path: '/subsalesstageditemsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subsalesstageditemsreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subsalesstageditemsreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _subsalesstageditemsreportPreviewGet();
  }

  ///
  @Get(path: '/subsalesstageditemsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _subsalesstageditemsreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      taxespaidreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _taxespaidreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/taxespaidreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _taxespaidreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      taxespaidreportExportexcelxlsxPost(
          {required WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _taxespaidreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/taxespaidreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _taxespaidreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest?
                  body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> taxespaidreportRunreportPost(
      {required WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _taxespaidreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/taxespaidreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> _taxespaidreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxespaidreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _taxespaidreportValidateofficelocationBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/taxespaidreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _taxespaidreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxespaidreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _taxespaidreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/taxespaidreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _taxespaidreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxespaidreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _taxespaidreportEmptyobjectGet();
  }

  ///
  @Get(path: '/taxespaidreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _taxespaidreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxespaidreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _taxespaidreportPreviewGet();
  }

  ///
  @Get(path: '/taxespaidreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _taxespaidreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      transferfixedassetownershipreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _transferfixedassetownershipreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/transferfixedassetownershipreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _transferfixedassetownershipreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      transferfixedassetownershipreportExportexcelxlsxPost(
          {required WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _transferfixedassetownershipreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/transferfixedassetownershipreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _transferfixedassetownershipreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      transferfixedassetownershipreportRunreportPost(
          {required WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _transferfixedassetownershipreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/transferfixedassetownershipreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _transferfixedassetownershipreportRunreportPost(
          {@Body()
              required WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferfixedassetownershipreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferfixedassetownershipreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/transferfixedassetownershipreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferfixedassetownershipreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferfixedassetownershipreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferfixedassetownershipreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/transferfixedassetownershipreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferfixedassetownershipreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferfixedassetownershipreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferfixedassetownershipreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/transferfixedassetownershipreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferfixedassetownershipreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferfixedassetownershipreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferfixedassetownershipreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/transferfixedassetownershipreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferfixedassetownershipreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferfixedassetownershipreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferfixedassetownershipreportEmptyobjectGet();
  }

  ///
  @Get(path: '/transferfixedassetownershipreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferfixedassetownershipreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferfixedassetownershipreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferfixedassetownershipreportPreviewGet();
  }

  ///
  @Get(path: '/transferfixedassetownershipreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferfixedassetownershipreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      transfermanifestreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _transfermanifestreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/transfermanifestreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _transfermanifestreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> transfermanifestreportRunreportPost(
      {required WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _transfermanifestreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/transfermanifestreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _transfermanifestreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transfermanifestreportValidatemanifestBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transfermanifestreportValidatemanifestBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/transfermanifestreport/validatemanifest/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transfermanifestreportValidatemanifestBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transfermanifestreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transfermanifestreportEmptyobjectGet();
  }

  ///
  @Get(path: '/transfermanifestreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transfermanifestreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transfermanifestreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transfermanifestreportPreviewGet();
  }

  ///
  @Get(path: '/transfermanifestreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transfermanifestreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      transferorderreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _transferorderreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/transferorderreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _transferorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> transferorderreportRunreportPost(
      {required WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _transferorderreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/transferorderreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _transferorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferorderreportValidatetransferorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferorderreportValidatetransferorderBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/transferorderreport/validatetransferorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferorderreportValidatetransferorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferorderreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferorderreportEmptyobjectGet();
  }

  ///
  @Get(path: '/transferorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferorderreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferorderreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferorderreportPreviewGet();
  }

  ///
  @Get(path: '/transferorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferorderreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      transferreceiptreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _transferreceiptreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/transferreceiptreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _transferreceiptreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> transferreceiptreportRunreportPost(
      {required WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _transferreceiptreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/transferreceiptreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _transferreceiptreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreceiptreportValidatereceiptBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreceiptreportValidatereceiptBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/transferreceiptreport/validatereceipt/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreceiptreportValidatereceiptBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreceiptreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreceiptreportEmptyobjectGet();
  }

  ///
  @Get(path: '/transferreceiptreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreceiptreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreceiptreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreceiptreportPreviewGet();
  }

  ///
  @Get(path: '/transferreceiptreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreceiptreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      transferreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _transferreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/transferreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _transferreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      transferreportExportexcelxlsxPost(
          {required WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _transferreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/transferreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _transferreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest?
                  body});

  ///
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> transferreportRunreportPost(
      {required WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _transferreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/transferreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> _transferreportRunreportPost(
      {@Body()
          required WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreportValidateinventorytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/transferreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreportValidatecategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/transferreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreportValidatesubcategoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/transferreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreportValidateinventoryBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/transferreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatetransferBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreportValidatetransferBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/transferreport/validatetransfer/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreportValidatetransferBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatetowarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreportValidatetowarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/transferreport/validatetowarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreportValidatetowarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatefromwarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreportValidatefromwarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/transferreport/validatefromwarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreportValidatefromwarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/transferreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreportEmptyobjectGet();
  }

  ///
  @Get(path: '/transferreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _transferreportPreviewGet();
  }

  ///
  @Get(path: '/transferreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _transferreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      unretiredrentalinventoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _unretiredrentalinventoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/unretiredrentalinventoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _unretiredrentalinventoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      unretiredrentalinventoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _unretiredrentalinventoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/unretiredrentalinventoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _unretiredrentalinventoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      unretiredrentalinventoryreportRunreportPost(
          {required WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _unretiredrentalinventoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/unretiredrentalinventoryreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _unretiredrentalinventoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _unretiredrentalinventoryreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/unretiredrentalinventoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _unretiredrentalinventoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _unretiredrentalinventoryreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/unretiredrentalinventoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _unretiredrentalinventoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _unretiredrentalinventoryreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/unretiredrentalinventoryreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _unretiredrentalinventoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _unretiredrentalinventoryreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/unretiredrentalinventoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _unretiredrentalinventoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidateunretiredreasonBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _unretiredrentalinventoryreportValidateunretiredreasonBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/unretiredrentalinventoryreport/validateunretiredreason/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _unretiredrentalinventoryreportValidateunretiredreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _unretiredrentalinventoryreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/unretiredrentalinventoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _unretiredrentalinventoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _unretiredrentalinventoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/unretiredrentalinventoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _unretiredrentalinventoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _unretiredrentalinventoryreportPreviewGet();
  }

  ///
  @Get(path: '/unretiredrentalinventoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _unretiredrentalinventoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      valueofoutrentalinventoryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _valueofoutrentalinventoryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/valueofoutrentalinventoryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _valueofoutrentalinventoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      valueofoutrentalinventoryreportExportexcelxlsxPost(
          {required WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _valueofoutrentalinventoryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/valueofoutrentalinventoryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _valueofoutrentalinventoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest?
                  body});

  ///
  Future<chopper.Response<WebApiDataAppReportResponse>>
      valueofoutrentalinventoryreportRunreportPost(
          {required WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _valueofoutrentalinventoryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/valueofoutrentalinventoryreport/runreport',
    optionalBody: true,
  )
  Future<chopper.Response<WebApiDataAppReportResponse>>
      _valueofoutrentalinventoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest?
                  body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportValidateinventorytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _valueofoutrentalinventoryreportValidateinventorytypeBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/valueofoutrentalinventoryreport/validateinventorytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _valueofoutrentalinventoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportValidatecategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _valueofoutrentalinventoryreportValidatecategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/valueofoutrentalinventoryreport/validatecategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _valueofoutrentalinventoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _valueofoutrentalinventoryreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/valueofoutrentalinventoryreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _valueofoutrentalinventoryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportValidatesubcategoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _valueofoutrentalinventoryreportValidatesubcategoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/valueofoutrentalinventoryreport/validatesubcategory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _valueofoutrentalinventoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportValidateinventoryBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _valueofoutrentalinventoryreportValidateinventoryBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/valueofoutrentalinventoryreport/validateinventory/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _valueofoutrentalinventoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _valueofoutrentalinventoryreportValidatewarehouseBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/valueofoutrentalinventoryreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _valueofoutrentalinventoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _valueofoutrentalinventoryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/valueofoutrentalinventoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _valueofoutrentalinventoryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _valueofoutrentalinventoryreportPreviewGet();
  }

  ///
  @Get(path: '/valueofoutrentalinventoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _valueofoutrentalinventoryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      vendorinvoicebatchreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _vendorinvoicebatchreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicebatchreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _vendorinvoicebatchreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vendorinvoicebatchreportExportexcelxlsxPost(
          {required WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _vendorinvoicebatchreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicebatchreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _vendorinvoicebatchreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> vendorinvoicebatchreportRunreportPost(
      {required WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _vendorinvoicebatchreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicebatchreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _vendorinvoicebatchreportRunreportPost(
      {@Body()
          required WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicebatchreportValidatebatchBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _vendorinvoicebatchreportValidatebatchBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicebatchreport/validatebatch/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _vendorinvoicebatchreportValidatebatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicebatchreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _vendorinvoicebatchreportEmptyobjectGet();
  }

  ///
  @Get(path: '/vendorinvoicebatchreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _vendorinvoicebatchreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicebatchreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _vendorinvoicebatchreportPreviewGet();
  }

  ///
  @Get(path: '/vendorinvoicebatchreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _vendorinvoicebatchreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      vendorinvoicesummaryreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _vendorinvoicesummaryreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicesummaryreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _vendorinvoicesummaryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vendorinvoicesummaryreportExportexcelxlsxPost(
          {required WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _vendorinvoicesummaryreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicesummaryreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _vendorinvoicesummaryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> vendorinvoicesummaryreportRunreportPost(
      {required WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _vendorinvoicesummaryreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicesummaryreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _vendorinvoicesummaryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportValidatepurchaseorderBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _vendorinvoicesummaryreportValidatepurchaseorderBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicesummaryreport/validatepurchaseorder/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _vendorinvoicesummaryreportValidatepurchaseorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportValidateofficelocationBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _vendorinvoicesummaryreportValidateofficelocationBrowsePost(
        body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicesummaryreport/validateofficelocation/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _vendorinvoicesummaryreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _vendorinvoicesummaryreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicesummaryreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _vendorinvoicesummaryreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportValidatedealBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _vendorinvoicesummaryreportValidatedealBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicesummaryreport/validatedeal/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _vendorinvoicesummaryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportValidatevendorBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _vendorinvoicesummaryreportValidatevendorBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/vendorinvoicesummaryreport/validatevendor/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _vendorinvoicesummaryreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _vendorinvoicesummaryreportEmptyobjectGet();
  }

  ///
  @Get(path: '/vendorinvoicesummaryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _vendorinvoicesummaryreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _vendorinvoicesummaryreportPreviewGet();
  }

  ///
  @Get(path: '/vendorinvoicesummaryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _vendorinvoicesummaryreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      warehousedispatchreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _warehousedispatchreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/warehousedispatchreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _warehousedispatchreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehousedispatchreportExportexcelxlsxPost(
          {required WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _warehousedispatchreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/warehousedispatchreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _warehousedispatchreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> warehousedispatchreportRunreportPost(
      {required WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _warehousedispatchreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/warehousedispatchreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _warehousedispatchreportRunreportPost(
      {@Body()
          required WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehousedispatchreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehousedispatchreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehousedispatchreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehousedispatchreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehousedispatchreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehousedispatchreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportValidateactivitytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehousedispatchreportValidateactivitytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehousedispatchreport/validateactivitytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehousedispatchreportValidateactivitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportValidateagentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehousedispatchreportValidateagentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehousedispatchreport/validateagent/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehousedispatchreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehousedispatchreportEmptyobjectGet();
  }

  ///
  @Get(path: '/warehousedispatchreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehousedispatchreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehousedispatchreportPreviewGet();
  }

  ///
  @Get(path: '/warehousedispatchreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehousedispatchreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      warehouseinboundreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _warehouseinboundreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/warehouseinboundreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _warehouseinboundreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehouseinboundreportExportexcelxlsxPost(
          {required WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _warehouseinboundreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/warehouseinboundreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _warehouseinboundreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> warehouseinboundreportRunreportPost(
      {required WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _warehouseinboundreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/warehouseinboundreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _warehouseinboundreportRunreportPost(
      {@Body()
          required WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseinboundreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehouseinboundreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseinboundreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseinboundreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehouseinboundreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseinboundreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportValidateactivitytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseinboundreportValidateactivitytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehouseinboundreport/validateactivitytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseinboundreportValidateactivitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportValidateagentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseinboundreportValidateagentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehouseinboundreport/validateagent/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseinboundreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseinboundreportEmptyobjectGet();
  }

  ///
  @Get(path: '/warehouseinboundreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseinboundreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseinboundreportPreviewGet();
  }

  ///
  @Get(path: '/warehouseinboundreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseinboundreportPreviewGet();

  ///
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      warehouseoutboundreportRenderPost(
          {required FwStandardReportingFwReportRenderRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardReportingFwReportRenderResponse,
        () => FwStandardReportingFwReportRenderResponse.fromJsonFactory);

    return _warehouseoutboundreportRenderPost(body: body);
  }

  ///
  @Post(
    path: '/warehouseoutboundreport/render',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      _warehouseoutboundreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehouseoutboundreportExportexcelxlsxPost(
          {required WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest?
              body}) {
    generatedMapping.putIfAbsent(
        FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult,
        () =>
            FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
                .fromJsonFactory);

    return _warehouseoutboundreportExportexcelxlsxPost(body: body);
  }

  ///
  @Post(
    path: '/warehouseoutboundreport/exportexcelxlsx',
    optionalBody: true,
  )
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      _warehouseoutboundreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest?
                  body});

  ///
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> warehouseoutboundreportRunreportPost(
      {required WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest?
          body}) {
    generatedMapping.putIfAbsent(WebApiDataAppReportResponse,
        () => WebApiDataAppReportResponse.fromJsonFactory);

    return _warehouseoutboundreportRunreportPost(body: body);
  }

  ///
  @Post(
    path: '/warehouseoutboundreport/runreport',
    optionalBody: true,
  )
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> _warehouseoutboundreportRunreportPost(
      {@Body()
          required WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest?
              body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportValidatewarehouseBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseoutboundreportValidatewarehouseBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehouseoutboundreport/validatewarehouse/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseoutboundreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportValidatedepartmentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseoutboundreportValidatedepartmentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehouseoutboundreport/validatedepartment/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseoutboundreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportValidateactivitytypeBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseoutboundreportValidateactivitytypeBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehouseoutboundreport/validateactivitytype/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseoutboundreportValidateactivitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportValidateagentBrowsePost(
          {required FwStandardModelsBrowseRequest? body}) {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseoutboundreportValidateagentBrowsePost(body: body);
  }

  ///
  @Post(
    path: '/warehouseoutboundreport/validateagent/browse',
    optionalBody: true,
  )
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseoutboundreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportEmptyobjectGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseoutboundreportEmptyobjectGet();
  }

  ///
  @Get(path: '/warehouseoutboundreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseoutboundreportEmptyobjectGet();

  ///
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportPreviewGet() {
    generatedMapping.putIfAbsent(FwStandardSqlServerFwJsonDataTable,
        () => FwStandardSqlServerFwJsonDataTable.fromJsonFactory);

    return _warehouseoutboundreportPreviewGet();
  }

  ///
  @Get(path: '/warehouseoutboundreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      _warehouseoutboundreportPreviewGet();
}

@JsonSerializable(explicitToJson: true)
class FwCoreApiSwashbuckleBadRequestResponse {
  FwCoreApiSwashbuckleBadRequestResponse();

  factory FwCoreApiSwashbuckleBadRequestResponse.fromJson(
          Map<String, dynamic> json) =>
      _$FwCoreApiSwashbuckleBadRequestResponseFromJson(json);

  static const toJsonFactory = _$FwCoreApiSwashbuckleBadRequestResponseToJson;
  Map<String, dynamic> toJson() =>
      _$FwCoreApiSwashbuckleBadRequestResponseToJson(this);

  static const fromJsonFactory =
      _$FwCoreApiSwashbuckleBadRequestResponseFromJson;

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode => runtimeType.hashCode;
}

@JsonSerializable(explicitToJson: true)
class FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult {
  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult({
    this.downloadUrl,
  });

  factory FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult.fromJson(
          Map<String, dynamic> json) =>
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultFromJson(
          json);

  static const toJsonFactory =
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultToJson;
  Map<String, dynamic> toJson() =>
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultToJson(
          this);

  @JsonKey(name: 'downloadUrl', includeIfNull: false)
  final String? downloadUrl;
  static const fromJsonFactory =
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult &&
            (identical(other.downloadUrl, downloadUrl) ||
                const DeepCollectionEquality()
                    .equals(other.downloadUrl, downloadUrl)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(downloadUrl) ^ runtimeType.hashCode;
}

extension $FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultExtension
    on FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult {
  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
      copyWith({String? downloadUrl}) {
    return FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult(
        downloadUrl: downloadUrl ?? this.downloadUrl);
  }

  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
      copyWithWrapped({Wrapped<String?>? downloadUrl}) {
    return FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult(
        downloadUrl:
            (downloadUrl != null ? downloadUrl.value : this.downloadUrl));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardBusinessLogicFwBusinessLogicFieldDefinition {
  FwStandardBusinessLogicFwBusinessLogicFieldDefinition({
    this.name,
    this.dataType,
  });

  factory FwStandardBusinessLogicFwBusinessLogicFieldDefinition.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionFromJson(json);

  static const toJsonFactory =
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionToJson(this);

  @JsonKey(name: 'Name', includeIfNull: false)
  final String? name;
  @JsonKey(
    name: 'DataType',
    includeIfNull: false,
    toJson: fwStandardSqlServerFwDataTypesToJson,
    fromJson: fwStandardSqlServerFwDataTypesFromJson,
  )
  final enums.FwStandardSqlServerFwDataTypes? dataType;
  static const fromJsonFactory =
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardBusinessLogicFwBusinessLogicFieldDefinition &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.dataType, dataType) ||
                const DeepCollectionEquality()
                    .equals(other.dataType, dataType)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(name) ^
      const DeepCollectionEquality().hash(dataType) ^
      runtimeType.hashCode;
}

extension $FwStandardBusinessLogicFwBusinessLogicFieldDefinitionExtension
    on FwStandardBusinessLogicFwBusinessLogicFieldDefinition {
  FwStandardBusinessLogicFwBusinessLogicFieldDefinition copyWith(
      {String? name, enums.FwStandardSqlServerFwDataTypes? dataType}) {
    return FwStandardBusinessLogicFwBusinessLogicFieldDefinition(
        name: name ?? this.name, dataType: dataType ?? this.dataType);
  }

  FwStandardBusinessLogicFwBusinessLogicFieldDefinition copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<enums.FwStandardSqlServerFwDataTypes?>? dataType}) {
    return FwStandardBusinessLogicFwBusinessLogicFieldDefinition(
        name: (name != null ? name.value : this.name),
        dataType: (dataType != null ? dataType.value : this.dataType));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardDataFwCustomValue {
  FwStandardDataFwCustomValue({
    this.fieldName,
    this.fieldValue,
    this.fieldType,
  });

  factory FwStandardDataFwCustomValue.fromJson(Map<String, dynamic> json) =>
      _$FwStandardDataFwCustomValueFromJson(json);

  static const toJsonFactory = _$FwStandardDataFwCustomValueToJson;
  Map<String, dynamic> toJson() => _$FwStandardDataFwCustomValueToJson(this);

  @JsonKey(name: 'FieldName', includeIfNull: false)
  final String? fieldName;
  @JsonKey(name: 'FieldValue', includeIfNull: false)
  final String? fieldValue;
  @JsonKey(name: 'FieldType', includeIfNull: false)
  final String? fieldType;
  static const fromJsonFactory = _$FwStandardDataFwCustomValueFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardDataFwCustomValue &&
            (identical(other.fieldName, fieldName) ||
                const DeepCollectionEquality()
                    .equals(other.fieldName, fieldName)) &&
            (identical(other.fieldValue, fieldValue) ||
                const DeepCollectionEquality()
                    .equals(other.fieldValue, fieldValue)) &&
            (identical(other.fieldType, fieldType) ||
                const DeepCollectionEquality()
                    .equals(other.fieldType, fieldType)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fieldName) ^
      const DeepCollectionEquality().hash(fieldValue) ^
      const DeepCollectionEquality().hash(fieldType) ^
      runtimeType.hashCode;
}

extension $FwStandardDataFwCustomValueExtension on FwStandardDataFwCustomValue {
  FwStandardDataFwCustomValue copyWith(
      {String? fieldName, String? fieldValue, String? fieldType}) {
    return FwStandardDataFwCustomValue(
        fieldName: fieldName ?? this.fieldName,
        fieldValue: fieldValue ?? this.fieldValue,
        fieldType: fieldType ?? this.fieldType);
  }

  FwStandardDataFwCustomValue copyWithWrapped(
      {Wrapped<String?>? fieldName,
      Wrapped<String?>? fieldValue,
      Wrapped<String?>? fieldType}) {
    return FwStandardDataFwCustomValue(
        fieldName: (fieldName != null ? fieldName.value : this.fieldName),
        fieldValue: (fieldValue != null ? fieldValue.value : this.fieldValue),
        fieldType: (fieldType != null ? fieldType.value : this.fieldType));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardDataFwDefaultAttribute {
  FwStandardDataFwDefaultAttribute({
    this.fieldName,
    this.attributeName,
    this.defaultValue,
  });

  factory FwStandardDataFwDefaultAttribute.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardDataFwDefaultAttributeFromJson(json);

  static const toJsonFactory = _$FwStandardDataFwDefaultAttributeToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardDataFwDefaultAttributeToJson(this);

  @JsonKey(name: 'FieldName', includeIfNull: false)
  final String? fieldName;
  @JsonKey(name: 'AttributeName', includeIfNull: false)
  final String? attributeName;
  @JsonKey(name: 'DefaultValue', includeIfNull: false)
  final String? defaultValue;
  static const fromJsonFactory = _$FwStandardDataFwDefaultAttributeFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardDataFwDefaultAttribute &&
            (identical(other.fieldName, fieldName) ||
                const DeepCollectionEquality()
                    .equals(other.fieldName, fieldName)) &&
            (identical(other.attributeName, attributeName) ||
                const DeepCollectionEquality()
                    .equals(other.attributeName, attributeName)) &&
            (identical(other.defaultValue, defaultValue) ||
                const DeepCollectionEquality()
                    .equals(other.defaultValue, defaultValue)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fieldName) ^
      const DeepCollectionEquality().hash(attributeName) ^
      const DeepCollectionEquality().hash(defaultValue) ^
      runtimeType.hashCode;
}

extension $FwStandardDataFwDefaultAttributeExtension
    on FwStandardDataFwDefaultAttribute {
  FwStandardDataFwDefaultAttribute copyWith(
      {String? fieldName, String? attributeName, String? defaultValue}) {
    return FwStandardDataFwDefaultAttribute(
        fieldName: fieldName ?? this.fieldName,
        attributeName: attributeName ?? this.attributeName,
        defaultValue: defaultValue ?? this.defaultValue);
  }

  FwStandardDataFwDefaultAttribute copyWithWrapped(
      {Wrapped<String?>? fieldName,
      Wrapped<String?>? attributeName,
      Wrapped<String?>? defaultValue}) {
    return FwStandardDataFwDefaultAttribute(
        fieldName: (fieldName != null ? fieldName.value : this.fieldName),
        attributeName:
            (attributeName != null ? attributeName.value : this.attributeName),
        defaultValue:
            (defaultValue != null ? defaultValue.value : this.defaultValue));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardDataFwReportLoader {
  FwStandardDataFwReportLoader({
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.dateFields,
    this.custom,
    this.defaultFieldAttributes,
    this.translation,
  });

  factory FwStandardDataFwReportLoader.fromJson(Map<String, dynamic> json) =>
      _$FwStandardDataFwReportLoaderFromJson(json);

  static const toJsonFactory = _$FwStandardDataFwReportLoaderToJson;
  Map<String, dynamic> toJson() => _$FwStandardDataFwReportLoaderToJson(this);

  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  @JsonKey(
      name: '_Translation',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwTranslatedValue>[])
  final List<FwStandardDataFwTranslatedValue>? translation;
  static const fromJsonFactory = _$FwStandardDataFwReportLoaderFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardDataFwReportLoader &&
            (identical(other.printDate, printDate) ||
                const DeepCollectionEquality()
                    .equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) ||
                const DeepCollectionEquality()
                    .equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.printDateTime, printDateTime)) &&
            (identical(other.dateFields, dateFields) ||
                const DeepCollectionEquality()
                    .equals(other.dateFields, dateFields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)) &&
            (identical(other.translation, translation) ||
                const DeepCollectionEquality()
                    .equals(other.translation, translation)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      const DeepCollectionEquality().hash(translation) ^
      runtimeType.hashCode;
}

extension $FwStandardDataFwReportLoaderExtension
    on FwStandardDataFwReportLoader {
  FwStandardDataFwReportLoader copyWith(
      {String? printDate,
      String? printTime,
      String? printDateTime,
      List<String>? dateFields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes,
      List<FwStandardDataFwTranslatedValue>? translation}) {
    return FwStandardDataFwReportLoader(
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        dateFields: dateFields ?? this.dateFields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes,
        translation: translation ?? this.translation);
  }

  FwStandardDataFwReportLoader copyWithWrapped(
      {Wrapped<String?>? printDate,
      Wrapped<String?>? printTime,
      Wrapped<String?>? printDateTime,
      Wrapped<List<String>?>? dateFields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>? defaultFieldAttributes,
      Wrapped<List<FwStandardDataFwTranslatedValue>?>? translation}) {
    return FwStandardDataFwReportLoader(
        printDate: (printDate != null ? printDate.value : this.printDate),
        printTime: (printTime != null ? printTime.value : this.printTime),
        printDateTime:
            (printDateTime != null ? printDateTime.value : this.printDateTime),
        dateFields: (dateFields != null ? dateFields.value : this.dateFields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes),
        translation:
            (translation != null ? translation.value : this.translation));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardDataFwTranslatedValue {
  FwStandardDataFwTranslatedValue({
    this.fieldName,
    this.translatedValue,
    this.untranslatedValue,
    this.isTranslated,
    this.userIsTranslating,
  });

  factory FwStandardDataFwTranslatedValue.fromJson(Map<String, dynamic> json) =>
      _$FwStandardDataFwTranslatedValueFromJson(json);

  static const toJsonFactory = _$FwStandardDataFwTranslatedValueToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardDataFwTranslatedValueToJson(this);

  @JsonKey(name: 'FieldName', includeIfNull: false)
  final String? fieldName;
  @JsonKey(name: 'TranslatedValue', includeIfNull: false)
  final String? translatedValue;
  @JsonKey(name: 'UntranslatedValue', includeIfNull: false)
  final String? untranslatedValue;
  @JsonKey(name: 'IsTranslated', includeIfNull: false)
  final bool? isTranslated;
  @JsonKey(name: 'UserIsTranslating', includeIfNull: false)
  final bool? userIsTranslating;
  static const fromJsonFactory = _$FwStandardDataFwTranslatedValueFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardDataFwTranslatedValue &&
            (identical(other.fieldName, fieldName) ||
                const DeepCollectionEquality()
                    .equals(other.fieldName, fieldName)) &&
            (identical(other.translatedValue, translatedValue) ||
                const DeepCollectionEquality()
                    .equals(other.translatedValue, translatedValue)) &&
            (identical(other.untranslatedValue, untranslatedValue) ||
                const DeepCollectionEquality()
                    .equals(other.untranslatedValue, untranslatedValue)) &&
            (identical(other.isTranslated, isTranslated) ||
                const DeepCollectionEquality()
                    .equals(other.isTranslated, isTranslated)) &&
            (identical(other.userIsTranslating, userIsTranslating) ||
                const DeepCollectionEquality()
                    .equals(other.userIsTranslating, userIsTranslating)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fieldName) ^
      const DeepCollectionEquality().hash(translatedValue) ^
      const DeepCollectionEquality().hash(untranslatedValue) ^
      const DeepCollectionEquality().hash(isTranslated) ^
      const DeepCollectionEquality().hash(userIsTranslating) ^
      runtimeType.hashCode;
}

extension $FwStandardDataFwTranslatedValueExtension
    on FwStandardDataFwTranslatedValue {
  FwStandardDataFwTranslatedValue copyWith(
      {String? fieldName,
      String? translatedValue,
      String? untranslatedValue,
      bool? isTranslated,
      bool? userIsTranslating}) {
    return FwStandardDataFwTranslatedValue(
        fieldName: fieldName ?? this.fieldName,
        translatedValue: translatedValue ?? this.translatedValue,
        untranslatedValue: untranslatedValue ?? this.untranslatedValue,
        isTranslated: isTranslated ?? this.isTranslated,
        userIsTranslating: userIsTranslating ?? this.userIsTranslating);
  }

  FwStandardDataFwTranslatedValue copyWithWrapped(
      {Wrapped<String?>? fieldName,
      Wrapped<String?>? translatedValue,
      Wrapped<String?>? untranslatedValue,
      Wrapped<bool?>? isTranslated,
      Wrapped<bool?>? userIsTranslating}) {
    return FwStandardDataFwTranslatedValue(
        fieldName: (fieldName != null ? fieldName.value : this.fieldName),
        translatedValue: (translatedValue != null
            ? translatedValue.value
            : this.translatedValue),
        untranslatedValue: (untranslatedValue != null
            ? untranslatedValue.value
            : this.untranslatedValue),
        isTranslated:
            (isTranslated != null ? isTranslated.value : this.isTranslated),
        userIsTranslating: (userIsTranslating != null
            ? userIsTranslating.value
            : this.userIsTranslating));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsBrowseRequest {
  FwStandardModelsBrowseRequest({
    this.miscfields,
    this.module,
    this.options,
    this.orderby,
    this.orderbydirection,
    this.top,
    this.pageno,
    this.pagesize,
    this.searchfieldoperators,
    this.searchfields,
    this.searchfieldvalues,
    this.searchfieldtypes,
    this.searchseparators,
    this.searchcondition,
    this.searchconjunctions,
    this.searchgroupings,
    this.uniqueids,
    this.boundids,
    this.filterfields,
    this.activeview,
    this.emptyobject,
    this.forexcel,
    this.includeallcolumns,
    this.fields,
    this.totalfields,
    this.activeviewfields,
  });

  factory FwStandardModelsBrowseRequest.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsBrowseRequestFromJson(json);

  static const toJsonFactory = _$FwStandardModelsBrowseRequestToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsBrowseRequestToJson(this);

  @JsonKey(name: 'miscfields', includeIfNull: false)
  final dynamic miscfields;
  @JsonKey(name: 'module', includeIfNull: false)
  final String? module;
  @JsonKey(name: 'options', includeIfNull: false)
  final dynamic options;
  @JsonKey(name: 'orderby', includeIfNull: false)
  final String? orderby;
  @JsonKey(name: 'orderbydirection', includeIfNull: false)
  final String? orderbydirection;
  @JsonKey(name: 'top', includeIfNull: false)
  final int? top;
  @JsonKey(name: 'pageno', includeIfNull: false)
  final int? pageno;
  @JsonKey(name: 'pagesize', includeIfNull: false)
  final int? pagesize;
  @JsonKey(
      name: 'searchfieldoperators',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? searchfieldoperators;
  @JsonKey(name: 'searchfields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfields;
  @JsonKey(
      name: 'searchfieldvalues', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfieldvalues;
  @JsonKey(
      name: 'searchfieldtypes', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfieldtypes;
  @JsonKey(
      name: 'searchseparators', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchseparators;
  @JsonKey(
      name: 'searchcondition', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchcondition;
  @JsonKey(
      name: 'searchconjunctions',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? searchconjunctions;
  @JsonKey(name: 'searchgroupings', includeIfNull: false, defaultValue: <int>[])
  final List<int>? searchgroupings;
  @JsonKey(name: 'uniqueids', includeIfNull: false)
  final dynamic uniqueids;
  @JsonKey(name: 'boundids', includeIfNull: false)
  final dynamic boundids;
  @JsonKey(name: 'filterfields', includeIfNull: false)
  final Map<String, dynamic>? filterfields;
  @JsonKey(name: 'activeview', includeIfNull: false)
  final String? activeview;
  @JsonKey(name: 'emptyobject', includeIfNull: false)
  final bool? emptyobject;
  @JsonKey(name: 'forexcel', includeIfNull: false)
  final bool? forexcel;
  @JsonKey(name: 'includeallcolumns', includeIfNull: false)
  final bool? includeallcolumns;
  @JsonKey(
      name: 'fields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? fields;
  @JsonKey(name: 'totalfields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? totalfields;
  @JsonKey(name: 'activeviewfields', includeIfNull: false)
  final Map<String, dynamic>? activeviewfields;
  static const fromJsonFactory = _$FwStandardModelsBrowseRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsBrowseRequest &&
            (identical(other.miscfields, miscfields) ||
                const DeepCollectionEquality()
                    .equals(other.miscfields, miscfields)) &&
            (identical(other.module, module) ||
                const DeepCollectionEquality().equals(other.module, module)) &&
            (identical(other.options, options) ||
                const DeepCollectionEquality()
                    .equals(other.options, options)) &&
            (identical(other.orderby, orderby) ||
                const DeepCollectionEquality()
                    .equals(other.orderby, orderby)) &&
            (identical(other.orderbydirection, orderbydirection) ||
                const DeepCollectionEquality()
                    .equals(other.orderbydirection, orderbydirection)) &&
            (identical(other.top, top) ||
                const DeepCollectionEquality().equals(other.top, top)) &&
            (identical(other.pageno, pageno) ||
                const DeepCollectionEquality().equals(other.pageno, pageno)) &&
            (identical(other.pagesize, pagesize) ||
                const DeepCollectionEquality()
                    .equals(other.pagesize, pagesize)) &&
            (identical(other.searchfieldoperators, searchfieldoperators) ||
                const DeepCollectionEquality().equals(
                    other.searchfieldoperators, searchfieldoperators)) &&
            (identical(other.searchfields, searchfields) ||
                const DeepCollectionEquality()
                    .equals(other.searchfields, searchfields)) &&
            (identical(other.searchfieldvalues, searchfieldvalues) ||
                const DeepCollectionEquality()
                    .equals(other.searchfieldvalues, searchfieldvalues)) &&
            (identical(other.searchfieldtypes, searchfieldtypes) ||
                const DeepCollectionEquality()
                    .equals(other.searchfieldtypes, searchfieldtypes)) &&
            (identical(other.searchseparators, searchseparators) ||
                const DeepCollectionEquality()
                    .equals(other.searchseparators, searchseparators)) &&
            (identical(other.searchcondition, searchcondition) ||
                const DeepCollectionEquality()
                    .equals(other.searchcondition, searchcondition)) &&
            (identical(other.searchconjunctions, searchconjunctions) ||
                const DeepCollectionEquality()
                    .equals(other.searchconjunctions, searchconjunctions)) &&
            (identical(other.searchgroupings, searchgroupings) ||
                const DeepCollectionEquality()
                    .equals(other.searchgroupings, searchgroupings)) &&
            (identical(other.uniqueids, uniqueids) ||
                const DeepCollectionEquality()
                    .equals(other.uniqueids, uniqueids)) &&
            (identical(other.boundids, boundids) ||
                const DeepCollectionEquality()
                    .equals(other.boundids, boundids)) &&
            (identical(other.filterfields, filterfields) ||
                const DeepCollectionEquality()
                    .equals(other.filterfields, filterfields)) &&
            (identical(other.activeview, activeview) ||
                const DeepCollectionEquality()
                    .equals(other.activeview, activeview)) &&
            (identical(other.emptyobject, emptyobject) ||
                const DeepCollectionEquality()
                    .equals(other.emptyobject, emptyobject)) &&
            (identical(other.forexcel, forexcel) ||
                const DeepCollectionEquality()
                    .equals(other.forexcel, forexcel)) &&
            (identical(other.includeallcolumns, includeallcolumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeallcolumns, includeallcolumns)) &&
            (identical(other.fields, fields) || const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.totalfields, totalfields) || const DeepCollectionEquality().equals(other.totalfields, totalfields)) &&
            (identical(other.activeviewfields, activeviewfields) || const DeepCollectionEquality().equals(other.activeviewfields, activeviewfields)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(miscfields) ^
      const DeepCollectionEquality().hash(module) ^
      const DeepCollectionEquality().hash(options) ^
      const DeepCollectionEquality().hash(orderby) ^
      const DeepCollectionEquality().hash(orderbydirection) ^
      const DeepCollectionEquality().hash(top) ^
      const DeepCollectionEquality().hash(pageno) ^
      const DeepCollectionEquality().hash(pagesize) ^
      const DeepCollectionEquality().hash(searchfieldoperators) ^
      const DeepCollectionEquality().hash(searchfields) ^
      const DeepCollectionEquality().hash(searchfieldvalues) ^
      const DeepCollectionEquality().hash(searchfieldtypes) ^
      const DeepCollectionEquality().hash(searchseparators) ^
      const DeepCollectionEquality().hash(searchcondition) ^
      const DeepCollectionEquality().hash(searchconjunctions) ^
      const DeepCollectionEquality().hash(searchgroupings) ^
      const DeepCollectionEquality().hash(uniqueids) ^
      const DeepCollectionEquality().hash(boundids) ^
      const DeepCollectionEquality().hash(filterfields) ^
      const DeepCollectionEquality().hash(activeview) ^
      const DeepCollectionEquality().hash(emptyobject) ^
      const DeepCollectionEquality().hash(forexcel) ^
      const DeepCollectionEquality().hash(includeallcolumns) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(totalfields) ^
      const DeepCollectionEquality().hash(activeviewfields) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsBrowseRequestExtension
    on FwStandardModelsBrowseRequest {
  FwStandardModelsBrowseRequest copyWith(
      {dynamic miscfields,
      String? module,
      dynamic options,
      String? orderby,
      String? orderbydirection,
      int? top,
      int? pageno,
      int? pagesize,
      List<String>? searchfieldoperators,
      List<String>? searchfields,
      List<String>? searchfieldvalues,
      List<String>? searchfieldtypes,
      List<String>? searchseparators,
      List<String>? searchcondition,
      List<String>? searchconjunctions,
      List<int>? searchgroupings,
      dynamic uniqueids,
      dynamic boundids,
      Map<String, dynamic>? filterfields,
      String? activeview,
      bool? emptyobject,
      bool? forexcel,
      bool? includeallcolumns,
      List<FwStandardModelsCheckBoxListItem>? fields,
      List<String>? totalfields,
      Map<String, dynamic>? activeviewfields}) {
    return FwStandardModelsBrowseRequest(
        miscfields: miscfields ?? this.miscfields,
        module: module ?? this.module,
        options: options ?? this.options,
        orderby: orderby ?? this.orderby,
        orderbydirection: orderbydirection ?? this.orderbydirection,
        top: top ?? this.top,
        pageno: pageno ?? this.pageno,
        pagesize: pagesize ?? this.pagesize,
        searchfieldoperators: searchfieldoperators ?? this.searchfieldoperators,
        searchfields: searchfields ?? this.searchfields,
        searchfieldvalues: searchfieldvalues ?? this.searchfieldvalues,
        searchfieldtypes: searchfieldtypes ?? this.searchfieldtypes,
        searchseparators: searchseparators ?? this.searchseparators,
        searchcondition: searchcondition ?? this.searchcondition,
        searchconjunctions: searchconjunctions ?? this.searchconjunctions,
        searchgroupings: searchgroupings ?? this.searchgroupings,
        uniqueids: uniqueids ?? this.uniqueids,
        boundids: boundids ?? this.boundids,
        filterfields: filterfields ?? this.filterfields,
        activeview: activeview ?? this.activeview,
        emptyobject: emptyobject ?? this.emptyobject,
        forexcel: forexcel ?? this.forexcel,
        includeallcolumns: includeallcolumns ?? this.includeallcolumns,
        fields: fields ?? this.fields,
        totalfields: totalfields ?? this.totalfields,
        activeviewfields: activeviewfields ?? this.activeviewfields);
  }

  FwStandardModelsBrowseRequest copyWithWrapped(
      {Wrapped<dynamic>? miscfields,
      Wrapped<String?>? module,
      Wrapped<dynamic>? options,
      Wrapped<String?>? orderby,
      Wrapped<String?>? orderbydirection,
      Wrapped<int?>? top,
      Wrapped<int?>? pageno,
      Wrapped<int?>? pagesize,
      Wrapped<List<String>?>? searchfieldoperators,
      Wrapped<List<String>?>? searchfields,
      Wrapped<List<String>?>? searchfieldvalues,
      Wrapped<List<String>?>? searchfieldtypes,
      Wrapped<List<String>?>? searchseparators,
      Wrapped<List<String>?>? searchcondition,
      Wrapped<List<String>?>? searchconjunctions,
      Wrapped<List<int>?>? searchgroupings,
      Wrapped<dynamic>? uniqueids,
      Wrapped<dynamic>? boundids,
      Wrapped<Map<String, dynamic>?>? filterfields,
      Wrapped<String?>? activeview,
      Wrapped<bool?>? emptyobject,
      Wrapped<bool?>? forexcel,
      Wrapped<bool?>? includeallcolumns,
      Wrapped<List<FwStandardModelsCheckBoxListItem>?>? fields,
      Wrapped<List<String>?>? totalfields,
      Wrapped<Map<String, dynamic>?>? activeviewfields}) {
    return FwStandardModelsBrowseRequest(
        miscfields: (miscfields != null ? miscfields.value : this.miscfields),
        module: (module != null ? module.value : this.module),
        options: (options != null ? options.value : this.options),
        orderby: (orderby != null ? orderby.value : this.orderby),
        orderbydirection: (orderbydirection != null
            ? orderbydirection.value
            : this.orderbydirection),
        top: (top != null ? top.value : this.top),
        pageno: (pageno != null ? pageno.value : this.pageno),
        pagesize: (pagesize != null ? pagesize.value : this.pagesize),
        searchfieldoperators: (searchfieldoperators != null
            ? searchfieldoperators.value
            : this.searchfieldoperators),
        searchfields:
            (searchfields != null ? searchfields.value : this.searchfields),
        searchfieldvalues: (searchfieldvalues != null
            ? searchfieldvalues.value
            : this.searchfieldvalues),
        searchfieldtypes: (searchfieldtypes != null
            ? searchfieldtypes.value
            : this.searchfieldtypes),
        searchseparators: (searchseparators != null
            ? searchseparators.value
            : this.searchseparators),
        searchcondition: (searchcondition != null
            ? searchcondition.value
            : this.searchcondition),
        searchconjunctions: (searchconjunctions != null
            ? searchconjunctions.value
            : this.searchconjunctions),
        searchgroupings: (searchgroupings != null
            ? searchgroupings.value
            : this.searchgroupings),
        uniqueids: (uniqueids != null ? uniqueids.value : this.uniqueids),
        boundids: (boundids != null ? boundids.value : this.boundids),
        filterfields:
            (filterfields != null ? filterfields.value : this.filterfields),
        activeview: (activeview != null ? activeview.value : this.activeview),
        emptyobject:
            (emptyobject != null ? emptyobject.value : this.emptyobject),
        forexcel: (forexcel != null ? forexcel.value : this.forexcel),
        includeallcolumns: (includeallcolumns != null
            ? includeallcolumns.value
            : this.includeallcolumns),
        fields: (fields != null ? fields.value : this.fields),
        totalfields:
            (totalfields != null ? totalfields.value : this.totalfields),
        activeviewfields: (activeviewfields != null
            ? activeviewfields.value
            : this.activeviewfields));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsCheckBoxListItem {
  FwStandardModelsCheckBoxListItem({
    this.value,
    this.text,
    this.selected,
  });

  factory FwStandardModelsCheckBoxListItem.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsCheckBoxListItemFromJson(json);

  static const toJsonFactory = _$FwStandardModelsCheckBoxListItemToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsCheckBoxListItemToJson(this);

  @JsonKey(name: 'value', includeIfNull: false)
  final String? value;
  @JsonKey(name: 'text', includeIfNull: false)
  final String? text;
  @JsonKey(name: 'selected', includeIfNull: false)
  final bool? selected;
  static const fromJsonFactory = _$FwStandardModelsCheckBoxListItemFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsCheckBoxListItem &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)) &&
            (identical(other.text, text) ||
                const DeepCollectionEquality().equals(other.text, text)) &&
            (identical(other.selected, selected) ||
                const DeepCollectionEquality()
                    .equals(other.selected, selected)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(value) ^
      const DeepCollectionEquality().hash(text) ^
      const DeepCollectionEquality().hash(selected) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsCheckBoxListItemExtension
    on FwStandardModelsCheckBoxListItem {
  FwStandardModelsCheckBoxListItem copyWith(
      {String? value, String? text, bool? selected}) {
    return FwStandardModelsCheckBoxListItem(
        value: value ?? this.value,
        text: text ?? this.text,
        selected: selected ?? this.selected);
  }

  FwStandardModelsCheckBoxListItem copyWithWrapped(
      {Wrapped<String?>? value,
      Wrapped<String?>? text,
      Wrapped<bool?>? selected}) {
    return FwStandardModelsCheckBoxListItem(
        value: (value != null ? value.value : this.value),
        text: (text != null ? text.value : this.text),
        selected: (selected != null ? selected.value : this.selected));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwApiException {
  FwStandardModelsFwApiException({
    this.statusCode,
    this.message,
    this.stackTrace,
  });

  factory FwStandardModelsFwApiException.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsFwApiExceptionFromJson(json);

  static const toJsonFactory = _$FwStandardModelsFwApiExceptionToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsFwApiExceptionToJson(this);

  @JsonKey(name: 'StatusCode', includeIfNull: false)
  final int? statusCode;
  @JsonKey(name: 'Message', includeIfNull: false)
  final String? message;
  @JsonKey(name: 'StackTrace', includeIfNull: false)
  final String? stackTrace;
  static const fromJsonFactory = _$FwStandardModelsFwApiExceptionFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwApiException &&
            (identical(other.statusCode, statusCode) ||
                const DeepCollectionEquality()
                    .equals(other.statusCode, statusCode)) &&
            (identical(other.message, message) ||
                const DeepCollectionEquality()
                    .equals(other.message, message)) &&
            (identical(other.stackTrace, stackTrace) ||
                const DeepCollectionEquality()
                    .equals(other.stackTrace, stackTrace)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(statusCode) ^
      const DeepCollectionEquality().hash(message) ^
      const DeepCollectionEquality().hash(stackTrace) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwApiExceptionExtension
    on FwStandardModelsFwApiException {
  FwStandardModelsFwApiException copyWith(
      {int? statusCode, String? message, String? stackTrace}) {
    return FwStandardModelsFwApiException(
        statusCode: statusCode ?? this.statusCode,
        message: message ?? this.message,
        stackTrace: stackTrace ?? this.stackTrace);
  }

  FwStandardModelsFwApiException copyWithWrapped(
      {Wrapped<int?>? statusCode,
      Wrapped<String?>? message,
      Wrapped<String?>? stackTrace}) {
    return FwStandardModelsFwApiException(
        statusCode: (statusCode != null ? statusCode.value : this.statusCode),
        message: (message != null ? message.value : this.message),
        stackTrace: (stackTrace != null ? stackTrace.value : this.stackTrace));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryFilter {
  FwStandardModelsFwQueryFilter({
    required this.field,
    required this.op,
    this.value,
  });

  factory FwStandardModelsFwQueryFilter.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryFilterFromJson(json);

  static const toJsonFactory = _$FwStandardModelsFwQueryFilterToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsFwQueryFilterToJson(this);

  @JsonKey(name: 'Field', includeIfNull: false)
  final String field;
  @JsonKey(name: 'Op', includeIfNull: false)
  final String op;
  @JsonKey(name: 'Value', includeIfNull: false)
  final String? value;
  static const fromJsonFactory = _$FwStandardModelsFwQueryFilterFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryFilter &&
            (identical(other.field, field) ||
                const DeepCollectionEquality().equals(other.field, field)) &&
            (identical(other.op, op) ||
                const DeepCollectionEquality().equals(other.op, op)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(field) ^
      const DeepCollectionEquality().hash(op) ^
      const DeepCollectionEquality().hash(value) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryFilterExtension
    on FwStandardModelsFwQueryFilter {
  FwStandardModelsFwQueryFilter copyWith(
      {String? field, String? op, String? value}) {
    return FwStandardModelsFwQueryFilter(
        field: field ?? this.field,
        op: op ?? this.op,
        value: value ?? this.value);
  }

  FwStandardModelsFwQueryFilter copyWithWrapped(
      {Wrapped<String>? field, Wrapped<String>? op, Wrapped<String?>? value}) {
    return FwStandardModelsFwQueryFilter(
        field: (field != null ? field.value : this.field),
        op: (op != null ? op.value : this.op),
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogicFromJson(
          json);

  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogicToJson(
          this);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesReportsSharedReportSettingsReportSettings>[])
  final List<WebApiModulesReportsSharedReportSettingsReportSettings>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogicFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic
      copyWith(
          {List<WebApiModulesReportsSharedReportSettingsReportSettings>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }

  FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic
      copyWithWrapped(
          {Wrapped<
                  List<
                      WebApiModulesReportsSharedReportSettingsReportSettings>?>?
              items,
          Wrapped<int?>? pageNo,
          Wrapped<int?>? pageSize,
          Wrapped<int?>? totalItems,
          Wrapped<String?>? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic(
        items: (items != null ? items.value : this.items),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalItems: (totalItems != null ? totalItems.value : this.totalItems),
        sort: (sort != null ? sort.value : this.sort));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsSelectedCheckBoxListItem {
  FwStandardModelsSelectedCheckBoxListItem({
    this.value,
  });

  factory FwStandardModelsSelectedCheckBoxListItem.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsSelectedCheckBoxListItemFromJson(json);

  static const toJsonFactory = _$FwStandardModelsSelectedCheckBoxListItemToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsSelectedCheckBoxListItemToJson(this);

  @JsonKey(name: 'value', includeIfNull: false)
  final String? value;
  static const fromJsonFactory =
      _$FwStandardModelsSelectedCheckBoxListItemFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsSelectedCheckBoxListItem &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(value) ^ runtimeType.hashCode;
}

extension $FwStandardModelsSelectedCheckBoxListItemExtension
    on FwStandardModelsSelectedCheckBoxListItem {
  FwStandardModelsSelectedCheckBoxListItem copyWith({String? value}) {
    return FwStandardModelsSelectedCheckBoxListItem(value: value ?? this.value);
  }

  FwStandardModelsSelectedCheckBoxListItem copyWithWrapped(
      {Wrapped<String?>? value}) {
    return FwStandardModelsSelectedCheckBoxListItem(
        value: (value != null ? value.value : this.value));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader {
  FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader({
    this.customReportCssId,
    this.description,
    this.css,
    this.isGlobal,
    this.inactive,
    this.active,
    this.custom,
    this.defaultFieldAttributes,
    this.translation,
  });

  factory FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModulesAdministratorCustomReportCssCustomReportCssLoaderFromJson(
          json);

  static const toJsonFactory =
      _$FwStandardModulesAdministratorCustomReportCssCustomReportCssLoaderToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModulesAdministratorCustomReportCssCustomReportCssLoaderToJson(
          this);

  @JsonKey(name: 'CustomReportCssId', includeIfNull: false)
  final int? customReportCssId;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Css', includeIfNull: false)
  final String? css;
  @JsonKey(name: 'IsGlobal', includeIfNull: false)
  final bool? isGlobal;
  @JsonKey(name: 'Inactive', includeIfNull: false)
  final bool? inactive;
  @JsonKey(name: 'Active', includeIfNull: false)
  final bool? active;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  @JsonKey(
      name: '_Translation',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwTranslatedValue>[])
  final List<FwStandardDataFwTranslatedValue>? translation;
  static const fromJsonFactory =
      _$FwStandardModulesAdministratorCustomReportCssCustomReportCssLoaderFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader &&
            (identical(other.customReportCssId, customReportCssId) ||
                const DeepCollectionEquality()
                    .equals(other.customReportCssId, customReportCssId)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.css, css) ||
                const DeepCollectionEquality().equals(other.css, css)) &&
            (identical(other.isGlobal, isGlobal) ||
                const DeepCollectionEquality()
                    .equals(other.isGlobal, isGlobal)) &&
            (identical(other.inactive, inactive) ||
                const DeepCollectionEquality()
                    .equals(other.inactive, inactive)) &&
            (identical(other.active, active) ||
                const DeepCollectionEquality().equals(other.active, active)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)) &&
            (identical(other.translation, translation) ||
                const DeepCollectionEquality()
                    .equals(other.translation, translation)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(customReportCssId) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(css) ^
      const DeepCollectionEquality().hash(isGlobal) ^
      const DeepCollectionEquality().hash(inactive) ^
      const DeepCollectionEquality().hash(active) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      const DeepCollectionEquality().hash(translation) ^
      runtimeType.hashCode;
}

extension $FwStandardModulesAdministratorCustomReportCssCustomReportCssLoaderExtension
    on FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader {
  FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader copyWith(
      {int? customReportCssId,
      String? description,
      String? css,
      bool? isGlobal,
      bool? inactive,
      bool? active,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes,
      List<FwStandardDataFwTranslatedValue>? translation}) {
    return FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader(
        customReportCssId: customReportCssId ?? this.customReportCssId,
        description: description ?? this.description,
        css: css ?? this.css,
        isGlobal: isGlobal ?? this.isGlobal,
        inactive: inactive ?? this.inactive,
        active: active ?? this.active,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes,
        translation: translation ?? this.translation);
  }

  FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader
      copyWithWrapped(
          {Wrapped<int?>? customReportCssId,
          Wrapped<String?>? description,
          Wrapped<String?>? css,
          Wrapped<bool?>? isGlobal,
          Wrapped<bool?>? inactive,
          Wrapped<bool?>? active,
          Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
          Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
              defaultFieldAttributes,
          Wrapped<List<FwStandardDataFwTranslatedValue>?>? translation}) {
    return FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader(
        customReportCssId: (customReportCssId != null
            ? customReportCssId.value
            : this.customReportCssId),
        description:
            (description != null ? description.value : this.description),
        css: (css != null ? css.value : this.css),
        isGlobal: (isGlobal != null ? isGlobal.value : this.isGlobal),
        inactive: (inactive != null ? inactive.value : this.inactive),
        active: (active != null ? active.value : this.active),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes),
        translation:
            (translation != null ? translation.value : this.translation));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardReportingFwReportEmailInfo {
  FwStandardReportingFwReportEmailInfo({
    this.from,
    this.to,
    this.cc,
    this.subject,
    this.body,
  });

  factory FwStandardReportingFwReportEmailInfo.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardReportingFwReportEmailInfoFromJson(json);

  static const toJsonFactory = _$FwStandardReportingFwReportEmailInfoToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardReportingFwReportEmailInfoToJson(this);

  @JsonKey(name: 'from', includeIfNull: false)
  final String? from;
  @JsonKey(name: 'to', includeIfNull: false)
  final String? to;
  @JsonKey(name: 'cc', includeIfNull: false)
  final String? cc;
  @JsonKey(name: 'subject', includeIfNull: false)
  final String? subject;
  @JsonKey(name: 'body', includeIfNull: false)
  final String? body;
  static const fromJsonFactory = _$FwStandardReportingFwReportEmailInfoFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardReportingFwReportEmailInfo &&
            (identical(other.from, from) ||
                const DeepCollectionEquality().equals(other.from, from)) &&
            (identical(other.to, to) ||
                const DeepCollectionEquality().equals(other.to, to)) &&
            (identical(other.cc, cc) ||
                const DeepCollectionEquality().equals(other.cc, cc)) &&
            (identical(other.subject, subject) ||
                const DeepCollectionEquality()
                    .equals(other.subject, subject)) &&
            (identical(other.body, body) ||
                const DeepCollectionEquality().equals(other.body, body)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(from) ^
      const DeepCollectionEquality().hash(to) ^
      const DeepCollectionEquality().hash(cc) ^
      const DeepCollectionEquality().hash(subject) ^
      const DeepCollectionEquality().hash(body) ^
      runtimeType.hashCode;
}

extension $FwStandardReportingFwReportEmailInfoExtension
    on FwStandardReportingFwReportEmailInfo {
  FwStandardReportingFwReportEmailInfo copyWith(
      {String? from, String? to, String? cc, String? subject, String? body}) {
    return FwStandardReportingFwReportEmailInfo(
        from: from ?? this.from,
        to: to ?? this.to,
        cc: cc ?? this.cc,
        subject: subject ?? this.subject,
        body: body ?? this.body);
  }

  FwStandardReportingFwReportEmailInfo copyWithWrapped(
      {Wrapped<String?>? from,
      Wrapped<String?>? to,
      Wrapped<String?>? cc,
      Wrapped<String?>? subject,
      Wrapped<String?>? body}) {
    return FwStandardReportingFwReportEmailInfo(
        from: (from != null ? from.value : this.from),
        to: (to != null ? to.value : this.to),
        cc: (cc != null ? cc.value : this.cc),
        subject: (subject != null ? subject.value : this.subject),
        body: (body != null ? body.value : this.body));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardReportingFwReportRenderRequest {
  FwStandardReportingFwReportRenderRequest({
    this.renderMode,
    this.parameters,
    this.email,
    this.downloadPdfAsAttachment,
    this.emailImageOptions,
  });

  factory FwStandardReportingFwReportRenderRequest.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardReportingFwReportRenderRequestFromJson(json);

  static const toJsonFactory = _$FwStandardReportingFwReportRenderRequestToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardReportingFwReportRenderRequestToJson(this);

  @JsonKey(name: 'renderMode', includeIfNull: false)
  final String? renderMode;
  @JsonKey(name: 'parameters', includeIfNull: false)
  final Map<String, dynamic>? parameters;
  @JsonKey(name: 'email', includeIfNull: false)
  final FwStandardReportingFwReportEmailInfo? email;
  @JsonKey(name: 'downloadPdfAsAttachment', includeIfNull: false)
  final bool? downloadPdfAsAttachment;
  @JsonKey(name: 'emailImageOptions', includeIfNull: false)
  final FwStandardReportingFwReportRenderRequestEmailImageOptions?
      emailImageOptions;
  static const fromJsonFactory =
      _$FwStandardReportingFwReportRenderRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardReportingFwReportRenderRequest &&
            (identical(other.renderMode, renderMode) ||
                const DeepCollectionEquality()
                    .equals(other.renderMode, renderMode)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)) &&
            (identical(other.email, email) ||
                const DeepCollectionEquality().equals(other.email, email)) &&
            (identical(
                    other.downloadPdfAsAttachment, downloadPdfAsAttachment) ||
                const DeepCollectionEquality().equals(
                    other.downloadPdfAsAttachment, downloadPdfAsAttachment)) &&
            (identical(other.emailImageOptions, emailImageOptions) ||
                const DeepCollectionEquality()
                    .equals(other.emailImageOptions, emailImageOptions)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(renderMode) ^
      const DeepCollectionEquality().hash(parameters) ^
      const DeepCollectionEquality().hash(email) ^
      const DeepCollectionEquality().hash(downloadPdfAsAttachment) ^
      const DeepCollectionEquality().hash(emailImageOptions) ^
      runtimeType.hashCode;
}

extension $FwStandardReportingFwReportRenderRequestExtension
    on FwStandardReportingFwReportRenderRequest {
  FwStandardReportingFwReportRenderRequest copyWith(
      {String? renderMode,
      Map<String, dynamic>? parameters,
      FwStandardReportingFwReportEmailInfo? email,
      bool? downloadPdfAsAttachment,
      FwStandardReportingFwReportRenderRequestEmailImageOptions?
          emailImageOptions}) {
    return FwStandardReportingFwReportRenderRequest(
        renderMode: renderMode ?? this.renderMode,
        parameters: parameters ?? this.parameters,
        email: email ?? this.email,
        downloadPdfAsAttachment:
            downloadPdfAsAttachment ?? this.downloadPdfAsAttachment,
        emailImageOptions: emailImageOptions ?? this.emailImageOptions);
  }

  FwStandardReportingFwReportRenderRequest copyWithWrapped(
      {Wrapped<String?>? renderMode,
      Wrapped<Map<String, dynamic>?>? parameters,
      Wrapped<FwStandardReportingFwReportEmailInfo?>? email,
      Wrapped<bool?>? downloadPdfAsAttachment,
      Wrapped<FwStandardReportingFwReportRenderRequestEmailImageOptions?>?
          emailImageOptions}) {
    return FwStandardReportingFwReportRenderRequest(
        renderMode: (renderMode != null ? renderMode.value : this.renderMode),
        parameters: (parameters != null ? parameters.value : this.parameters),
        email: (email != null ? email.value : this.email),
        downloadPdfAsAttachment: (downloadPdfAsAttachment != null
            ? downloadPdfAsAttachment.value
            : this.downloadPdfAsAttachment),
        emailImageOptions: (emailImageOptions != null
            ? emailImageOptions.value
            : this.emailImageOptions));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardReportingFwReportRenderRequestEmailImageOptions {
  FwStandardReportingFwReportRenderRequestEmailImageOptions({
    this.width,
    this.height,
  });

  factory FwStandardReportingFwReportRenderRequestEmailImageOptions.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardReportingFwReportRenderRequestEmailImageOptionsFromJson(json);

  static const toJsonFactory =
      _$FwStandardReportingFwReportRenderRequestEmailImageOptionsToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardReportingFwReportRenderRequestEmailImageOptionsToJson(this);

  @JsonKey(name: 'Width', includeIfNull: false)
  final int? width;
  @JsonKey(name: 'Height', includeIfNull: false)
  final int? height;
  static const fromJsonFactory =
      _$FwStandardReportingFwReportRenderRequestEmailImageOptionsFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardReportingFwReportRenderRequestEmailImageOptions &&
            (identical(other.width, width) ||
                const DeepCollectionEquality().equals(other.width, width)) &&
            (identical(other.height, height) ||
                const DeepCollectionEquality().equals(other.height, height)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(width) ^
      const DeepCollectionEquality().hash(height) ^
      runtimeType.hashCode;
}

extension $FwStandardReportingFwReportRenderRequestEmailImageOptionsExtension
    on FwStandardReportingFwReportRenderRequestEmailImageOptions {
  FwStandardReportingFwReportRenderRequestEmailImageOptions copyWith(
      {int? width, int? height}) {
    return FwStandardReportingFwReportRenderRequestEmailImageOptions(
        width: width ?? this.width, height: height ?? this.height);
  }

  FwStandardReportingFwReportRenderRequestEmailImageOptions copyWithWrapped(
      {Wrapped<int?>? width, Wrapped<int?>? height}) {
    return FwStandardReportingFwReportRenderRequestEmailImageOptions(
        width: (width != null ? width.value : this.width),
        height: (height != null ? height.value : this.height));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardReportingFwReportRenderResponse {
  FwStandardReportingFwReportRenderResponse({
    this.renderMode,
    this.htmlReportUrl,
    this.pdfReportUrl,
    this.consoleOutput,
    this.draftDownloadUrl,
  });

  factory FwStandardReportingFwReportRenderResponse.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardReportingFwReportRenderResponseFromJson(json);

  static const toJsonFactory =
      _$FwStandardReportingFwReportRenderResponseToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardReportingFwReportRenderResponseToJson(this);

  @JsonKey(name: 'renderMode', includeIfNull: false)
  final String? renderMode;
  @JsonKey(name: 'htmlReportUrl', includeIfNull: false)
  final String? htmlReportUrl;
  @JsonKey(name: 'pdfReportUrl', includeIfNull: false)
  final String? pdfReportUrl;
  @JsonKey(name: 'consoleOutput', includeIfNull: false)
  final String? consoleOutput;
  @JsonKey(name: 'draftDownloadUrl', includeIfNull: false)
  final String? draftDownloadUrl;
  static const fromJsonFactory =
      _$FwStandardReportingFwReportRenderResponseFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardReportingFwReportRenderResponse &&
            (identical(other.renderMode, renderMode) ||
                const DeepCollectionEquality()
                    .equals(other.renderMode, renderMode)) &&
            (identical(other.htmlReportUrl, htmlReportUrl) ||
                const DeepCollectionEquality()
                    .equals(other.htmlReportUrl, htmlReportUrl)) &&
            (identical(other.pdfReportUrl, pdfReportUrl) ||
                const DeepCollectionEquality()
                    .equals(other.pdfReportUrl, pdfReportUrl)) &&
            (identical(other.consoleOutput, consoleOutput) ||
                const DeepCollectionEquality()
                    .equals(other.consoleOutput, consoleOutput)) &&
            (identical(other.draftDownloadUrl, draftDownloadUrl) ||
                const DeepCollectionEquality()
                    .equals(other.draftDownloadUrl, draftDownloadUrl)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(renderMode) ^
      const DeepCollectionEquality().hash(htmlReportUrl) ^
      const DeepCollectionEquality().hash(pdfReportUrl) ^
      const DeepCollectionEquality().hash(consoleOutput) ^
      const DeepCollectionEquality().hash(draftDownloadUrl) ^
      runtimeType.hashCode;
}

extension $FwStandardReportingFwReportRenderResponseExtension
    on FwStandardReportingFwReportRenderResponse {
  FwStandardReportingFwReportRenderResponse copyWith(
      {String? renderMode,
      String? htmlReportUrl,
      String? pdfReportUrl,
      String? consoleOutput,
      String? draftDownloadUrl}) {
    return FwStandardReportingFwReportRenderResponse(
        renderMode: renderMode ?? this.renderMode,
        htmlReportUrl: htmlReportUrl ?? this.htmlReportUrl,
        pdfReportUrl: pdfReportUrl ?? this.pdfReportUrl,
        consoleOutput: consoleOutput ?? this.consoleOutput,
        draftDownloadUrl: draftDownloadUrl ?? this.draftDownloadUrl);
  }

  FwStandardReportingFwReportRenderResponse copyWithWrapped(
      {Wrapped<String?>? renderMode,
      Wrapped<String?>? htmlReportUrl,
      Wrapped<String?>? pdfReportUrl,
      Wrapped<String?>? consoleOutput,
      Wrapped<String?>? draftDownloadUrl}) {
    return FwStandardReportingFwReportRenderResponse(
        renderMode: (renderMode != null ? renderMode.value : this.renderMode),
        htmlReportUrl:
            (htmlReportUrl != null ? htmlReportUrl.value : this.htmlReportUrl),
        pdfReportUrl:
            (pdfReportUrl != null ? pdfReportUrl.value : this.pdfReportUrl),
        consoleOutput:
            (consoleOutput != null ? consoleOutput.value : this.consoleOutput),
        draftDownloadUrl: (draftDownloadUrl != null
            ? draftDownloadUrl.value
            : this.draftDownloadUrl));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardSqlServerFwDateTime {
  FwStandardSqlServerFwDateTime({
    this.val,
  });

  factory FwStandardSqlServerFwDateTime.fromJson(Map<String, dynamic> json) =>
      _$FwStandardSqlServerFwDateTimeFromJson(json);

  static const toJsonFactory = _$FwStandardSqlServerFwDateTimeToJson;
  Map<String, dynamic> toJson() => _$FwStandardSqlServerFwDateTimeToJson(this);

  @JsonKey(name: 'Val', includeIfNull: false)
  final String? val;
  static const fromJsonFactory = _$FwStandardSqlServerFwDateTimeFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardSqlServerFwDateTime &&
            (identical(other.val, val) ||
                const DeepCollectionEquality().equals(other.val, val)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(val) ^ runtimeType.hashCode;
}

extension $FwStandardSqlServerFwDateTimeExtension
    on FwStandardSqlServerFwDateTime {
  FwStandardSqlServerFwDateTime copyWith({String? val}) {
    return FwStandardSqlServerFwDateTime(val: val ?? this.val);
  }

  FwStandardSqlServerFwDateTime copyWithWrapped({Wrapped<String?>? val}) {
    return FwStandardSqlServerFwDateTime(
        val: (val != null ? val.value : this.val));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardSqlServerFwJsonDataTable {
  FwStandardSqlServerFwJsonDataTable({
    this.columnIndex,
    this.totals,
    this.columns,
    this.rows,
    this.pageNo,
    this.pageSize,
    this.totalPages,
    this.totalRows,
    this.dateFields,
    this.columnNameByIndex,
    this.translation,
  });

  factory FwStandardSqlServerFwJsonDataTable.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardSqlServerFwJsonDataTableFromJson(json);

  static const toJsonFactory = _$FwStandardSqlServerFwJsonDataTableToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardSqlServerFwJsonDataTableToJson(this);

  @JsonKey(name: 'ColumnIndex', includeIfNull: false)
  final Map<String, dynamic>? columnIndex;
  @JsonKey(name: 'Totals', includeIfNull: false)
  final Map<String, dynamic>? totals;
  @JsonKey(
      name: 'Columns',
      includeIfNull: false,
      defaultValue: <FwStandardSqlServerFwJsonDataTableColumn>[])
  final List<FwStandardSqlServerFwJsonDataTableColumn>? columns;
  @JsonKey(name: 'Rows', includeIfNull: false, defaultValue: <List<Object?>>[])
  final List<List<Object?>>? rows;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalPages', includeIfNull: false)
  final int? totalPages;
  @JsonKey(name: 'TotalRows', includeIfNull: false)
  final int? totalRows;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(name: 'ColumnNameByIndex', includeIfNull: false)
  final Map<String, dynamic>? columnNameByIndex;
  @JsonKey(
      name: '_Translation',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwTranslatedValue>[])
  final List<FwStandardDataFwTranslatedValue>? translation;
  static const fromJsonFactory = _$FwStandardSqlServerFwJsonDataTableFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardSqlServerFwJsonDataTable &&
            (identical(other.columnIndex, columnIndex) ||
                const DeepCollectionEquality()
                    .equals(other.columnIndex, columnIndex)) &&
            (identical(other.totals, totals) ||
                const DeepCollectionEquality().equals(other.totals, totals)) &&
            (identical(other.columns, columns) ||
                const DeepCollectionEquality()
                    .equals(other.columns, columns)) &&
            (identical(other.rows, rows) ||
                const DeepCollectionEquality().equals(other.rows, rows)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalPages, totalPages) ||
                const DeepCollectionEquality()
                    .equals(other.totalPages, totalPages)) &&
            (identical(other.totalRows, totalRows) ||
                const DeepCollectionEquality()
                    .equals(other.totalRows, totalRows)) &&
            (identical(other.dateFields, dateFields) ||
                const DeepCollectionEquality()
                    .equals(other.dateFields, dateFields)) &&
            (identical(other.columnNameByIndex, columnNameByIndex) ||
                const DeepCollectionEquality()
                    .equals(other.columnNameByIndex, columnNameByIndex)) &&
            (identical(other.translation, translation) ||
                const DeepCollectionEquality()
                    .equals(other.translation, translation)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(columnIndex) ^
      const DeepCollectionEquality().hash(totals) ^
      const DeepCollectionEquality().hash(columns) ^
      const DeepCollectionEquality().hash(rows) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalPages) ^
      const DeepCollectionEquality().hash(totalRows) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(columnNameByIndex) ^
      const DeepCollectionEquality().hash(translation) ^
      runtimeType.hashCode;
}

extension $FwStandardSqlServerFwJsonDataTableExtension
    on FwStandardSqlServerFwJsonDataTable {
  FwStandardSqlServerFwJsonDataTable copyWith(
      {Map<String, dynamic>? columnIndex,
      Map<String, dynamic>? totals,
      List<FwStandardSqlServerFwJsonDataTableColumn>? columns,
      List<List<Object?>>? rows,
      int? pageNo,
      int? pageSize,
      int? totalPages,
      int? totalRows,
      List<String>? dateFields,
      Map<String, dynamic>? columnNameByIndex,
      List<FwStandardDataFwTranslatedValue>? translation}) {
    return FwStandardSqlServerFwJsonDataTable(
        columnIndex: columnIndex ?? this.columnIndex,
        totals: totals ?? this.totals,
        columns: columns ?? this.columns,
        rows: rows ?? this.rows,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalPages: totalPages ?? this.totalPages,
        totalRows: totalRows ?? this.totalRows,
        dateFields: dateFields ?? this.dateFields,
        columnNameByIndex: columnNameByIndex ?? this.columnNameByIndex,
        translation: translation ?? this.translation);
  }

  FwStandardSqlServerFwJsonDataTable copyWithWrapped(
      {Wrapped<Map<String, dynamic>?>? columnIndex,
      Wrapped<Map<String, dynamic>?>? totals,
      Wrapped<List<FwStandardSqlServerFwJsonDataTableColumn>?>? columns,
      Wrapped<List<List<Object?>>?>? rows,
      Wrapped<int?>? pageNo,
      Wrapped<int?>? pageSize,
      Wrapped<int?>? totalPages,
      Wrapped<int?>? totalRows,
      Wrapped<List<String>?>? dateFields,
      Wrapped<Map<String, dynamic>?>? columnNameByIndex,
      Wrapped<List<FwStandardDataFwTranslatedValue>?>? translation}) {
    return FwStandardSqlServerFwJsonDataTable(
        columnIndex:
            (columnIndex != null ? columnIndex.value : this.columnIndex),
        totals: (totals != null ? totals.value : this.totals),
        columns: (columns != null ? columns.value : this.columns),
        rows: (rows != null ? rows.value : this.rows),
        pageNo: (pageNo != null ? pageNo.value : this.pageNo),
        pageSize: (pageSize != null ? pageSize.value : this.pageSize),
        totalPages: (totalPages != null ? totalPages.value : this.totalPages),
        totalRows: (totalRows != null ? totalRows.value : this.totalRows),
        dateFields: (dateFields != null ? dateFields.value : this.dateFields),
        columnNameByIndex: (columnNameByIndex != null
            ? columnNameByIndex.value
            : this.columnNameByIndex),
        translation:
            (translation != null ? translation.value : this.translation));
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardSqlServerFwJsonDataTableColumn {
  FwStandardSqlServerFwJsonDataTableColumn({
    this.name,
    this.dataField,
    this.dataType,
    this.isUniqueId,
    this.isVisible,
  });

  factory FwStandardSqlServerFwJsonDataTableColumn.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardSqlServerFwJsonDataTableColumnFromJson(json);

  static const toJsonFactory = _$FwStandardSqlServerFwJsonDataTableColumnToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardSqlServerFwJsonDataTableColumnToJson(this);

  @JsonKey(name: 'Name', includeIfNull: false)
  final String? name;
  @JsonKey(name: 'DataField', includeIfNull: false)
  final String? dataField;
  @JsonKey(
    name: 'DataType',
    includeIfNull: false,
    toJson: fwStandardSqlServerFwDataTypesToJson,
    fromJson: fwStandardSqlServerFwDataTypesFromJson,
  )
  final enums.FwStandardSqlServerFwDataTypes? dataType;
  @JsonKey(name: 'IsUniqueId', includeIfNull: false)
  final bool? isUniqueId;
  @JsonKey(name: 'IsVisible', includeIfNull: false)
  final bool? isVisible;
  static const fromJsonFactory =
      _$FwStandardSqlServerFwJsonDataTableColumnFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardSqlServerFwJsonDataTableColumn &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.dataField, dataField) ||
                const DeepCollectionEquality()
                    .equals(other.dataField, dataField)) &&
            (identical(other.dataType, dataType) ||
                const DeepCollectionEquality()
                    .equals(other.dataType, dataType)) &&
            (identical(other.isUniqueId, isUniqueId) ||
                const DeepCollectionEquality()
                    .equals(other.isUniqueId, isUniqueId)) &&
            (identical(other.isVisible, isVisible) ||
                const DeepCollectionEquality()
                    .equals(other.isVisible, isVisible)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(name) ^
      const DeepCollectionEquality().hash(dataField) ^
      const DeepCollectionEquality().hash(dataType) ^
      const DeepCollectionEquality().hash(isUniqueId) ^
      const DeepCollectionEquality().hash(isVisible) ^
      runtimeType.hashCode;
}

extension $FwStandardSqlServerFwJsonDataTableColumnExtension
    on FwStandardSqlServerFwJsonDataTableColumn {
  FwStandardSqlServerFwJsonDataTableColumn copyWith(
      {String? name,
      String? dataField,
      enums.FwStandardSqlServerFwDataTypes? dataType,
      bool? isUniqueId,
      bool? isVisible}) {
    return FwStandardSqlServerFwJsonDataTableColumn(
        name: name ?? this.name,
        dataField: dataField ?? this.dataField,
        dataType: dataType ?? this.dataType,
        isUniqueId: isUniqueId ?? this.isUniqueId,
        isVisible: isVisible ?? this.isVisible);
  }

  FwStandardSqlServerFwJsonDataTableColumn copyWithWrapped(
      {Wrapped<String?>? name,
      Wrapped<String?>? dataField,
      Wrapped<enums.FwStandardSqlServerFwDataTypes?>? dataType,
      Wrapped<bool?>? isUniqueId,
      Wrapped<bool?>? isVisible}) {
    return FwStandardSqlServerFwJsonDataTableColumn(
        name: (name != null ? name.value : this.name),
        dataField: (dataField != null ? dataField.value : this.dataField),
        dataType: (dataType != null ? dataType.value : this.dataType),
        isUniqueId: (isUniqueId != null ? isUniqueId.value : this.isUniqueId),
        isVisible: (isVisible != null ? isVisible.value : this.isVisible));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiDataAppReportResponse {
  WebApiDataAppReportResponse({
    this.dataTable,
    this.dataObject,
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.customReportTemplate,
    this.globalCssRules,
    this.globalStyle,
    this.emailTemplate,
  });

  factory WebApiDataAppReportResponse.fromJson(Map<String, dynamic> json) =>
      _$WebApiDataAppReportResponseFromJson(json);

  static const toJsonFactory = _$WebApiDataAppReportResponseToJson;
  Map<String, dynamic> toJson() => _$WebApiDataAppReportResponseToJson(this);

  @JsonKey(name: 'DataTable', includeIfNull: false)
  final FwStandardSqlServerFwJsonDataTable? dataTable;
  @JsonKey(name: 'DataObject', includeIfNull: false)
  final FwStandardDataFwReportLoader? dataObject;
  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'CustomReportTemplate', includeIfNull: false)
  final String? customReportTemplate;
  @JsonKey(
      name: 'GlobalCssRules',
      includeIfNull: false,
      defaultValue: <FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader>[])
  final List<
          FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader>?
      globalCssRules;
  @JsonKey(name: 'GlobalStyle', includeIfNull: false)
  final String? globalStyle;
  @JsonKey(name: 'EmailTemplate', includeIfNull: false)
  final String? emailTemplate;
  static const fromJsonFactory = _$WebApiDataAppReportResponseFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiDataAppReportResponse &&
            (identical(other.dataTable, dataTable) ||
                const DeepCollectionEquality()
                    .equals(other.dataTable, dataTable)) &&
            (identical(other.dataObject, dataObject) ||
                const DeepCollectionEquality()
                    .equals(other.dataObject, dataObject)) &&
            (identical(other.printDate, printDate) ||
                const DeepCollectionEquality()
                    .equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) ||
                const DeepCollectionEquality()
                    .equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.printDateTime, printDateTime)) &&
            (identical(other.customReportTemplate, customReportTemplate) ||
                const DeepCollectionEquality().equals(
                    other.customReportTemplate, customReportTemplate)) &&
            (identical(other.globalCssRules, globalCssRules) ||
                const DeepCollectionEquality()
                    .equals(other.globalCssRules, globalCssRules)) &&
            (identical(other.globalStyle, globalStyle) ||
                const DeepCollectionEquality()
                    .equals(other.globalStyle, globalStyle)) &&
            (identical(other.emailTemplate, emailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.emailTemplate, emailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(dataTable) ^
      const DeepCollectionEquality().hash(dataObject) ^
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(customReportTemplate) ^
      const DeepCollectionEquality().hash(globalCssRules) ^
      const DeepCollectionEquality().hash(globalStyle) ^
      const DeepCollectionEquality().hash(emailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiDataAppReportResponseExtension on WebApiDataAppReportResponse {
  WebApiDataAppReportResponse copyWith(
      {FwStandardSqlServerFwJsonDataTable? dataTable,
      FwStandardDataFwReportLoader? dataObject,
      String? printDate,
      String? printTime,
      String? printDateTime,
      String? customReportTemplate,
      List<FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader>?
          globalCssRules,
      String? globalStyle,
      String? emailTemplate}) {
    return WebApiDataAppReportResponse(
        dataTable: dataTable ?? this.dataTable,
        dataObject: dataObject ?? this.dataObject,
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        customReportTemplate: customReportTemplate ?? this.customReportTemplate,
        globalCssRules: globalCssRules ?? this.globalCssRules,
        globalStyle: globalStyle ?? this.globalStyle,
        emailTemplate: emailTemplate ?? this.emailTemplate);
  }

  WebApiDataAppReportResponse copyWithWrapped(
      {Wrapped<FwStandardSqlServerFwJsonDataTable?>? dataTable,
      Wrapped<FwStandardDataFwReportLoader?>? dataObject,
      Wrapped<String?>? printDate,
      Wrapped<String?>? printTime,
      Wrapped<String?>? printDateTime,
      Wrapped<String?>? customReportTemplate,
      Wrapped<
              List<
                  FwStandardModulesAdministratorCustomReportCssCustomReportCssLoader>?>?
          globalCssRules,
      Wrapped<String?>? globalStyle,
      Wrapped<String?>? emailTemplate}) {
    return WebApiDataAppReportResponse(
        dataTable: (dataTable != null ? dataTable.value : this.dataTable),
        dataObject: (dataObject != null ? dataObject.value : this.dataObject),
        printDate: (printDate != null ? printDate.value : this.printDate),
        printTime: (printTime != null ? printTime.value : this.printTime),
        printDateTime:
            (printDateTime != null ? printDateTime.value : this.printDateTime),
        customReportTemplate: (customReportTemplate != null
            ? customReportTemplate.value
            : this.customReportTemplate),
        globalCssRules: (globalCssRules != null
            ? globalCssRules.value
            : this.globalCssRules),
        globalStyle:
            (globalStyle != null ? globalStyle.value : this.globalStyle),
        emailTemplate:
            (emailTemplate != null ? emailTemplate.value : this.emailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest {
  WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest({
    this.asOfDate,
    this.officeLocationId,
    this.customerId,
    this.dealCsrId,
    this.dealTypeId,
    this.dealId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequestToJson(
          this);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealCsrId', includeIfNull: false)
  final String? dealCsrId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealCsrId, dealCsrId) ||
                const DeepCollectionEquality()
                    .equals(other.dealCsrId, dealCsrId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealCsrId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequestExtension
    on WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest {
  WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest
      copyWith(
          {DateTime? asOfDate,
          String? officeLocationId,
          String? customerId,
          String? dealCsrId,
          String? dealTypeId,
          String? dealId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealCsrId: dealCsrId ?? this.dealCsrId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealId: dealId ?? this.dealId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? asOfDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealCsrId,
          Wrapped<String?>? dealTypeId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest(
        asOfDate: (asOfDate != null ? asOfDate.value : this.asOfDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealCsrId: (dealCsrId != null ? dealCsrId.value : this.dealCsrId),
        dealTypeId: (dealTypeId != null ? dealTypeId.value : this.dealTypeId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest {
  WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest({
    this.asOfDate,
    this.officeLocationId,
    this.customerId,
    this.dealCsrId,
    this.dealTypeId,
    this.dealId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequestToJson(
          this);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealCsrId', includeIfNull: false)
  final String? dealCsrId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealCsrId, dealCsrId) ||
                const DeepCollectionEquality()
                    .equals(other.dealCsrId, dealCsrId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealCsrId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequestExtension
    on WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest {
  WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest
      copyWith(
          {DateTime? asOfDate,
          String? officeLocationId,
          String? customerId,
          String? dealCsrId,
          String? dealTypeId,
          String? dealId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealCsrId: dealCsrId ?? this.dealCsrId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealId: dealId ?? this.dealId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? asOfDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealCsrId,
          Wrapped<String?>? dealTypeId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsArAgingSummaryReportArAgingSummaryReportRequest(
        asOfDate: (asOfDate != null ? asOfDate.value : this.asOfDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealCsrId: (dealCsrId != null ? dealCsrId.value : this.dealCsrId),
        dealTypeId: (dealTypeId != null ? dealTypeId.value : this.dealTypeId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest {
  WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.customerId,
    this.dealId,
    this.paymentTypeId,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'PaymentTypeId', includeIfNull: false)
  final String? paymentTypeId;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.paymentTypeId, paymentTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.paymentTypeId, paymentTypeId)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(paymentTypeId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequestExtension
    on WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest {
  WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? customerId,
          String? dealId,
          String? paymentTypeId,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        paymentTypeId: paymentTypeId ?? this.paymentTypeId,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? paymentTypeId,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        paymentTypeId:
            (paymentTypeId != null ? paymentTypeId.value : this.paymentTypeId),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest {
  WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequestExtension
    on WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest {
  WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsDepreciationGlDetailReportDepreciationGlDetailReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest {
  WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.glDistributionType,
    this.glAccountId,
    this.excludeGlAccountId,
    this.dealId,
    this.isSomeDetail,
    this.isFullDetail,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'GlDistributionType', includeIfNull: false)
  final String? glDistributionType;
  @JsonKey(name: 'GlAccountId', includeIfNull: false)
  final String? glAccountId;
  @JsonKey(name: 'ExcludeGlAccountId', includeIfNull: false)
  final String? excludeGlAccountId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'IsSomeDetail', includeIfNull: false)
  final bool? isSomeDetail;
  @JsonKey(name: 'IsFullDetail', includeIfNull: false)
  final bool? isFullDetail;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.glDistributionType, glDistributionType) ||
                const DeepCollectionEquality()
                    .equals(other.glDistributionType, glDistributionType)) &&
            (identical(other.glAccountId, glAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.glAccountId, glAccountId)) &&
            (identical(other.excludeGlAccountId, excludeGlAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.excludeGlAccountId, excludeGlAccountId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.isSomeDetail, isSomeDetail) ||
                const DeepCollectionEquality()
                    .equals(other.isSomeDetail, isSomeDetail)) &&
            (identical(other.isFullDetail, isFullDetail) ||
                const DeepCollectionEquality()
                    .equals(other.isFullDetail, isFullDetail)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(glDistributionType) ^
      const DeepCollectionEquality().hash(glAccountId) ^
      const DeepCollectionEquality().hash(excludeGlAccountId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(isSomeDetail) ^
      const DeepCollectionEquality().hash(isFullDetail) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequestExtension
    on WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest {
  WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? glDistributionType,
          String? glAccountId,
          String? excludeGlAccountId,
          String? dealId,
          bool? isSomeDetail,
          bool? isFullDetail,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        glDistributionType: glDistributionType ?? this.glDistributionType,
        glAccountId: glAccountId ?? this.glAccountId,
        excludeGlAccountId: excludeGlAccountId ?? this.excludeGlAccountId,
        dealId: dealId ?? this.dealId,
        isSomeDetail: isSomeDetail ?? this.isSomeDetail,
        isFullDetail: isFullDetail ?? this.isFullDetail,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? glDistributionType,
          Wrapped<String?>? glAccountId,
          Wrapped<String?>? excludeGlAccountId,
          Wrapped<String?>? dealId,
          Wrapped<bool?>? isSomeDetail,
          Wrapped<bool?>? isFullDetail,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        glDistributionType: (glDistributionType != null
            ? glDistributionType.value
            : this.glDistributionType),
        glAccountId:
            (glAccountId != null ? glAccountId.value : this.glAccountId),
        excludeGlAccountId: (excludeGlAccountId != null
            ? excludeGlAccountId.value
            : this.excludeGlAccountId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        isSomeDetail:
            (isSomeDetail != null ? isSomeDetail.value : this.isSomeDetail),
        isFullDetail:
            (isFullDetail != null ? isFullDetail.value : this.isFullDetail),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest {
  WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequestExtension
    on WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest {
  WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsAccountingReportsPurchaseGlDetailReportPurchaseGlDetailReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest {
  WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.officeLocationId,
    this.departmentId,
    this.agentId,
    this.customerId,
    this.dealId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequestExtension
    on WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest {
  WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          String? officeLocationId,
          String? departmentId,
          String? agentId,
          String? customerId,
          String? dealId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<bool?>? includeNoCharge,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? agentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        includeNoCharge: (includeNoCharge != null
            ? includeNoCharge.value
            : this.includeNoCharge),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        agentId: (agentId != null ? agentId.value : this.agentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest {
  WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.officeLocationId,
    this.customerId,
    this.dealId,
    this.projectId,
    this.agentId,
    this.status,
    this.includeFilter,
    this.includeTaxFilter,
    this.excludeOrdersBilledInTotal,
    this.excludeZeroOrderTotal,
    this.includeProjectStatus,
    this.includeCreditsInvoiced,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'ProjectId', includeIfNull: false)
  final String? projectId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(
      name: 'Status',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? status;
  @JsonKey(
      name: 'IncludeFilter',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? includeFilter;
  @JsonKey(
      name: 'IncludeTaxFilter',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? includeTaxFilter;
  @JsonKey(name: 'ExcludeOrdersBilledInTotal', includeIfNull: false)
  final bool? excludeOrdersBilledInTotal;
  @JsonKey(name: 'ExcludeZeroOrderTotal', includeIfNull: false)
  final bool? excludeZeroOrderTotal;
  @JsonKey(name: 'IncludeProjectStatus', includeIfNull: false)
  final bool? includeProjectStatus;
  @JsonKey(name: 'IncludeCreditsInvoiced', includeIfNull: false)
  final bool? includeCreditsInvoiced;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.projectId, projectId) ||
                const DeepCollectionEquality()
                    .equals(other.projectId, projectId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.includeFilter, includeFilter) ||
                const DeepCollectionEquality()
                    .equals(other.includeFilter, includeFilter)) &&
            (identical(other.includeTaxFilter, includeTaxFilter) ||
                const DeepCollectionEquality()
                    .equals(other.includeTaxFilter, includeTaxFilter)) &&
            (identical(other.excludeOrdersBilledInTotal, excludeOrdersBilledInTotal) ||
                const DeepCollectionEquality().equals(
                    other.excludeOrdersBilledInTotal,
                    excludeOrdersBilledInTotal)) &&
            (identical(other.excludeZeroOrderTotal, excludeZeroOrderTotal) ||
                const DeepCollectionEquality().equals(
                    other.excludeZeroOrderTotal, excludeZeroOrderTotal)) &&
            (identical(other.includeProjectStatus, includeProjectStatus) ||
                const DeepCollectionEquality().equals(
                    other.includeProjectStatus, includeProjectStatus)) &&
            (identical(other.includeCreditsInvoiced, includeCreditsInvoiced) ||
                const DeepCollectionEquality().equals(
                    other.includeCreditsInvoiced, includeCreditsInvoiced)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(projectId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(includeFilter) ^
      const DeepCollectionEquality().hash(includeTaxFilter) ^
      const DeepCollectionEquality().hash(excludeOrdersBilledInTotal) ^
      const DeepCollectionEquality().hash(excludeZeroOrderTotal) ^
      const DeepCollectionEquality().hash(includeProjectStatus) ^
      const DeepCollectionEquality().hash(includeCreditsInvoiced) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequestExtension
    on WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest {
  WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          String? officeLocationId,
          String? customerId,
          String? dealId,
          String? projectId,
          String? agentId,
          List<FwStandardModelsSelectedCheckBoxListItem>? status,
          List<FwStandardModelsSelectedCheckBoxListItem>? includeFilter,
          List<FwStandardModelsSelectedCheckBoxListItem>? includeTaxFilter,
          bool? excludeOrdersBilledInTotal,
          bool? excludeZeroOrderTotal,
          bool? includeProjectStatus,
          bool? includeCreditsInvoiced,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        projectId: projectId ?? this.projectId,
        agentId: agentId ?? this.agentId,
        status: status ?? this.status,
        includeFilter: includeFilter ?? this.includeFilter,
        includeTaxFilter: includeTaxFilter ?? this.includeTaxFilter,
        excludeOrdersBilledInTotal:
            excludeOrdersBilledInTotal ?? this.excludeOrdersBilledInTotal,
        excludeZeroOrderTotal:
            excludeZeroOrderTotal ?? this.excludeZeroOrderTotal,
        includeProjectStatus: includeProjectStatus ?? this.includeProjectStatus,
        includeCreditsInvoiced:
            includeCreditsInvoiced ?? this.includeCreditsInvoiced,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? projectId,
          Wrapped<String?>? agentId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? status,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              includeFilter,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              includeTaxFilter,
          Wrapped<bool?>? excludeOrdersBilledInTotal,
          Wrapped<bool?>? excludeZeroOrderTotal,
          Wrapped<bool?>? includeProjectStatus,
          Wrapped<bool?>? includeCreditsInvoiced,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        projectId: (projectId != null ? projectId.value : this.projectId),
        agentId: (agentId != null ? agentId.value : this.agentId),
        status: (status != null ? status.value : this.status),
        includeFilter:
            (includeFilter != null ? includeFilter.value : this.includeFilter),
        includeTaxFilter: (includeTaxFilter != null
            ? includeTaxFilter.value
            : this.includeTaxFilter),
        excludeOrdersBilledInTotal: (excludeOrdersBilledInTotal != null
            ? excludeOrdersBilledInTotal.value
            : this.excludeOrdersBilledInTotal),
        excludeZeroOrderTotal: (excludeZeroOrderTotal != null
            ? excludeZeroOrderTotal.value
            : this.excludeZeroOrderTotal),
        includeProjectStatus: (includeProjectStatus != null
            ? includeProjectStatus.value
            : this.includeProjectStatus),
        includeCreditsInvoiced: (includeCreditsInvoiced != null
            ? includeCreditsInvoiced.value
            : this.includeCreditsInvoiced),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest {
  WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest({
    this.asOfDate,
    this.statuses,
    this.includeCredits,
    this.excludeBilled100,
    this.officeLocationId,
    this.departmentId,
    this.dealCsrId,
    this.customerId,
    this.dealTypeId,
    this.dealId,
    this.agentId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequestToJson(
          this);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'IncludeCredits', includeIfNull: false)
  final bool? includeCredits;
  @JsonKey(name: 'ExcludeBilled100', includeIfNull: false)
  final bool? excludeBilled100;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealCsrId', includeIfNull: false)
  final String? dealCsrId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.includeCredits, includeCredits) ||
                const DeepCollectionEquality()
                    .equals(other.includeCredits, includeCredits)) &&
            (identical(other.excludeBilled100, excludeBilled100) ||
                const DeepCollectionEquality()
                    .equals(other.excludeBilled100, excludeBilled100)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealCsrId, dealCsrId) ||
                const DeepCollectionEquality()
                    .equals(other.dealCsrId, dealCsrId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(includeCredits) ^
      const DeepCollectionEquality().hash(excludeBilled100) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealCsrId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequestExtension
    on WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest {
  WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest
      copyWith(
          {DateTime? asOfDate,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          bool? includeCredits,
          bool? excludeBilled100,
          String? officeLocationId,
          String? departmentId,
          String? dealCsrId,
          String? customerId,
          String? dealTypeId,
          String? dealId,
          String? agentId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        statuses: statuses ?? this.statuses,
        includeCredits: includeCredits ?? this.includeCredits,
        excludeBilled100: excludeBilled100 ?? this.excludeBilled100,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        dealCsrId: dealCsrId ?? this.dealCsrId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealId: dealId ?? this.dealId,
        agentId: agentId ?? this.agentId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? asOfDate,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<bool?>? includeCredits,
          Wrapped<bool?>? excludeBilled100,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? dealCsrId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealTypeId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? agentId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest(
        asOfDate: (asOfDate != null ? asOfDate.value : this.asOfDate),
        statuses: (statuses != null ? statuses.value : this.statuses),
        includeCredits: (includeCredits != null
            ? includeCredits.value
            : this.includeCredits),
        excludeBilled100: (excludeBilled100 != null
            ? excludeBilled100.value
            : this.excludeBilled100),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        dealCsrId: (dealCsrId != null ? dealCsrId.value : this.dealCsrId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealTypeId: (dealTypeId != null ? dealTypeId.value : this.dealTypeId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        agentId: (agentId != null ? agentId.value : this.agentId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequest {
  WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequest({
    this.orderId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequestToJson(
          this);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequestExtension
    on WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequest {
  WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequest
      copyWith(
          {String? orderId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequest(
        orderId: orderId ?? this.orderId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequest
      copyWithWrapped(
          {Wrapped<String?>? orderId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingBillingScheduleReportBillingScheduleReportRequest(
        orderId: (orderId != null ? orderId.value : this.orderId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest {
  WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest({
    this.fromDate,
    this.toDate,
    this.includeNoCharge,
    this.includePaidInvoices,
    this.includeZeroBalance,
    this.paymentsThroughToday,
    this.hidePaymentDetails,
    this.officeLocationId,
    this.dealStatusId,
    this.dealTypeId,
    this.customerId,
    this.dealId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'IncludePaidInvoices', includeIfNull: false)
  final bool? includePaidInvoices;
  @JsonKey(name: 'IncludeZeroBalance', includeIfNull: false)
  final bool? includeZeroBalance;
  @JsonKey(name: 'PaymentsThroughToday', includeIfNull: false)
  final bool? paymentsThroughToday;
  @JsonKey(name: 'HidePaymentDetails', includeIfNull: false)
  final bool? hidePaymentDetails;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DealStatusId', includeIfNull: false)
  final String? dealStatusId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.includePaidInvoices, includePaidInvoices) ||
                const DeepCollectionEquality()
                    .equals(other.includePaidInvoices, includePaidInvoices)) &&
            (identical(other.includeZeroBalance, includeZeroBalance) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroBalance, includeZeroBalance)) &&
            (identical(other.paymentsThroughToday, paymentsThroughToday) ||
                const DeepCollectionEquality().equals(
                    other.paymentsThroughToday, paymentsThroughToday)) &&
            (identical(other.hidePaymentDetails, hidePaymentDetails) ||
                const DeepCollectionEquality()
                    .equals(other.hidePaymentDetails, hidePaymentDetails)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.dealStatusId, dealStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.dealStatusId, dealStatusId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(includePaidInvoices) ^
      const DeepCollectionEquality().hash(includeZeroBalance) ^
      const DeepCollectionEquality().hash(paymentsThroughToday) ^
      const DeepCollectionEquality().hash(hidePaymentDetails) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(dealStatusId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequestExtension
    on WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest {
  WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? includeNoCharge,
          bool? includePaidInvoices,
          bool? includeZeroBalance,
          bool? paymentsThroughToday,
          bool? hidePaymentDetails,
          String? officeLocationId,
          String? dealStatusId,
          String? dealTypeId,
          String? customerId,
          String? dealId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        includePaidInvoices: includePaidInvoices ?? this.includePaidInvoices,
        includeZeroBalance: includeZeroBalance ?? this.includeZeroBalance,
        paymentsThroughToday: paymentsThroughToday ?? this.paymentsThroughToday,
        hidePaymentDetails: hidePaymentDetails ?? this.hidePaymentDetails,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        dealStatusId: dealStatusId ?? this.dealStatusId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<bool?>? includeNoCharge,
          Wrapped<bool?>? includePaidInvoices,
          Wrapped<bool?>? includeZeroBalance,
          Wrapped<bool?>? paymentsThroughToday,
          Wrapped<bool?>? hidePaymentDetails,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? dealStatusId,
          Wrapped<String?>? dealTypeId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        includeNoCharge: (includeNoCharge != null
            ? includeNoCharge.value
            : this.includeNoCharge),
        includePaidInvoices: (includePaidInvoices != null
            ? includePaidInvoices.value
            : this.includePaidInvoices),
        includeZeroBalance: (includeZeroBalance != null
            ? includeZeroBalance.value
            : this.includeZeroBalance),
        paymentsThroughToday: (paymentsThroughToday != null
            ? paymentsThroughToday.value
            : this.paymentsThroughToday),
        hidePaymentDetails: (hidePaymentDetails != null
            ? hidePaymentDetails.value
            : this.hidePaymentDetails),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        dealStatusId:
            (dealStatusId != null ? dealStatusId.value : this.dealStatusId),
        dealTypeId: (dealTypeId != null ? dealTypeId.value : this.dealTypeId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest {
  WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest({
    this.invoiceCreationBatchId,
    this.exceptionsOnly,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequestToJson(
          this);

  @JsonKey(name: 'InvoiceCreationBatchId', includeIfNull: false)
  final String? invoiceCreationBatchId;
  @JsonKey(name: 'ExceptionsOnly', includeIfNull: false)
  final bool? exceptionsOnly;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest &&
            (identical(other.invoiceCreationBatchId, invoiceCreationBatchId) ||
                const DeepCollectionEquality().equals(
                    other.invoiceCreationBatchId, invoiceCreationBatchId)) &&
            (identical(other.exceptionsOnly, exceptionsOnly) ||
                const DeepCollectionEquality()
                    .equals(other.exceptionsOnly, exceptionsOnly)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invoiceCreationBatchId) ^
      const DeepCollectionEquality().hash(exceptionsOnly) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequestExtension
    on WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest {
  WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest
      copyWith(
          {String? invoiceCreationBatchId,
          bool? exceptionsOnly,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest(
        invoiceCreationBatchId:
            invoiceCreationBatchId ?? this.invoiceCreationBatchId,
        exceptionsOnly: exceptionsOnly ?? this.exceptionsOnly,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest
      copyWithWrapped(
          {Wrapped<String?>? invoiceCreationBatchId,
          Wrapped<bool?>? exceptionsOnly,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest(
        invoiceCreationBatchId: (invoiceCreationBatchId != null
            ? invoiceCreationBatchId.value
            : this.invoiceCreationBatchId),
        exceptionsOnly: (exceptionsOnly != null
            ? exceptionsOnly.value
            : this.exceptionsOnly),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest {
  WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.discountPercent,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.discountReasonId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'DiscountPercent', includeIfNull: false)
  final int? discountPercent;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'DiscountReasonId', includeIfNull: false)
  final String? discountReasonId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.discountPercent, discountPercent) ||
                const DeepCollectionEquality()
                    .equals(other.discountPercent, discountPercent)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.discountReasonId, discountReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.discountReasonId, discountReasonId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(discountPercent) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(discountReasonId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequestExtension
    on WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest {
  WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          int? discountPercent,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? discountReasonId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        discountPercent: discountPercent ?? this.discountPercent,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        discountReasonId: discountReasonId ?? this.discountReasonId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<int?>? discountPercent,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? discountReasonId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        discountPercent: (discountPercent != null
            ? discountPercent.value
            : this.discountPercent),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        discountReasonId: (discountReasonId != null
            ? discountReasonId.value
            : this.discountReasonId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest {
  WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest({
    this.invoiceId,
    this.rollUpPeriods,
    this.printZeroExtended,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingInvoiceReportInvoiceReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingInvoiceReportInvoiceReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingInvoiceReportInvoiceReportRequestToJson(
          this);

  @JsonKey(name: 'InvoiceId', includeIfNull: false)
  final String? invoiceId;
  @JsonKey(name: 'RollUpPeriods', includeIfNull: false)
  final bool? rollUpPeriods;
  @JsonKey(name: 'PrintZeroExtended', includeIfNull: false)
  final bool? printZeroExtended;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingInvoiceReportInvoiceReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest &&
            (identical(other.invoiceId, invoiceId) ||
                const DeepCollectionEquality()
                    .equals(other.invoiceId, invoiceId)) &&
            (identical(other.rollUpPeriods, rollUpPeriods) ||
                const DeepCollectionEquality()
                    .equals(other.rollUpPeriods, rollUpPeriods)) &&
            (identical(other.printZeroExtended, printZeroExtended) ||
                const DeepCollectionEquality()
                    .equals(other.printZeroExtended, printZeroExtended)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invoiceId) ^
      const DeepCollectionEquality().hash(rollUpPeriods) ^
      const DeepCollectionEquality().hash(printZeroExtended) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingInvoiceReportInvoiceReportRequestExtension
    on WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest {
  WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest copyWith(
      {String? invoiceId,
      bool? rollUpPeriods,
      bool? printZeroExtended,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest(
        invoiceId: invoiceId ?? this.invoiceId,
        rollUpPeriods: rollUpPeriods ?? this.rollUpPeriods,
        printZeroExtended: printZeroExtended ?? this.printZeroExtended,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest copyWithWrapped(
      {Wrapped<String?>? invoiceId,
      Wrapped<bool?>? rollUpPeriods,
      Wrapped<bool?>? printZeroExtended,
      Wrapped<String?>? userDepartmentId,
      Wrapped<String?>? userLocationId,
      Wrapped<String?>? userWarehouseId,
      Wrapped<String?>? customReportLayoutId,
      Wrapped<bool?>? isSummary,
      Wrapped<bool?>? includeSubHeadingsAndSubTotals,
      Wrapped<bool?>? includeIdColumns,
      Wrapped<String?>? locale,
      Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
      Wrapped<String?>? reportName,
      Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest(
        invoiceId: (invoiceId != null ? invoiceId.value : this.invoiceId),
        rollUpPeriods:
            (rollUpPeriods != null ? rollUpPeriods.value : this.rollUpPeriods),
        printZeroExtended: (printZeroExtended != null
            ? printZeroExtended.value
            : this.printZeroExtended),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest {
  WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.statuses,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequestExtension
    on WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest {
  WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        statuses: statuses ?? this.statuses,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<bool?>? includeNoCharge,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        includeNoCharge: (includeNoCharge != null
            ? includeNoCharge.value
            : this.includeNoCharge),
        statuses: (statuses != null ? statuses.value : this.statuses),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest {
  WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest({
    this.fromDate,
    this.toDate,
    this.dateField,
    this.officeLocationId,
    this.departmentId,
    this.agentId,
    this.customerId,
    this.dealId,
    this.orderId,
    this.statuses,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingProfitLossReportProfitLossReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingProfitLossReportProfitLossReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingProfitLossReportProfitLossReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateField', includeIfNull: false)
  final String? dateField;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingProfitLossReportProfitLossReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateField, dateField) ||
                const DeepCollectionEquality()
                    .equals(other.dateField, dateField)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateField) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingProfitLossReportProfitLossReportRequestExtension
    on WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest {
  WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest copyWith(
      {DateTime? fromDate,
      DateTime? toDate,
      String? dateField,
      String? officeLocationId,
      String? departmentId,
      String? agentId,
      String? customerId,
      String? dealId,
      String? orderId,
      List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateField: dateField ?? this.dateField,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        statuses: statuses ?? this.statuses,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateField,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? agentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? orderId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateField: (dateField != null ? dateField.value : this.dateField),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        agentId: (agentId != null ? agentId.value : this.agentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        statuses: (statuses != null ? statuses.value : this.statuses),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest {
  WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.officeLocationId,
    this.departmentId,
    this.projectManagerId,
    this.customerId,
    this.dealId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'ProjectManagerId', includeIfNull: false)
  final String? projectManagerId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.projectManagerId, projectManagerId) ||
                const DeepCollectionEquality()
                    .equals(other.projectManagerId, projectManagerId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(projectManagerId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequestExtension
    on WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest {
  WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          String? officeLocationId,
          String? departmentId,
          String? projectManagerId,
          String? customerId,
          String? dealId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        projectManagerId: projectManagerId ?? this.projectManagerId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<bool?>? includeNoCharge,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? projectManagerId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        includeNoCharge: (includeNoCharge != null
            ? includeNoCharge.value
            : this.includeNoCharge),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        projectManagerId: (projectManagerId != null
            ? projectManagerId.value
            : this.projectManagerId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequest {
  WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequest({
    this.quoteId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequestToJson(
          this);

  @JsonKey(name: 'QuoteId', includeIfNull: false)
  final String? quoteId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequest &&
            (identical(other.quoteId, quoteId) ||
                const DeepCollectionEquality()
                    .equals(other.quoteId, quoteId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(quoteId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequestExtension
    on WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequest {
  WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequest
      copyWith(
          {String? quoteId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequest(
        quoteId: quoteId ?? this.quoteId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequest
      copyWithWrapped(
          {Wrapped<String?>? quoteId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingQuoteBillingScheduleReportQuoteBillingScheduleReportRequest(
        quoteId: (quoteId != null ? quoteId.value : this.quoteId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest {
  WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest({
    this.fromDate,
    this.toDate,
    this.dateField,
    this.officeLocationId,
    this.agentId,
    this.dealId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateField', includeIfNull: false)
  final String? dateField;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateField, dateField) ||
                const DeepCollectionEquality()
                    .equals(other.dateField, dateField)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateField) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequestExtension
    on WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest {
  WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateField,
          String? officeLocationId,
          String? agentId,
          String? dealId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateField: dateField ?? this.dateField,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        agentId: agentId ?? this.agentId,
        dealId: dealId ?? this.dealId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateField,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? agentId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateField: (dateField != null ? dateField.value : this.dateField),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        agentId: (agentId != null ? agentId.value : this.agentId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest {
  WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.officeLocationId,
    this.departmentId,
    this.salesRepresentativeId,
    this.customerId,
    this.dealId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'SalesRepresentativeId', includeIfNull: false)
  final String? salesRepresentativeId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.salesRepresentativeId, salesRepresentativeId) ||
                const DeepCollectionEquality().equals(
                    other.salesRepresentativeId, salesRepresentativeId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(salesRepresentativeId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequestExtension
    on WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest {
  WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          String? officeLocationId,
          String? departmentId,
          String? salesRepresentativeId,
          String? customerId,
          String? dealId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        salesRepresentativeId:
            salesRepresentativeId ?? this.salesRepresentativeId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<bool?>? includeNoCharge,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? salesRepresentativeId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        includeNoCharge: (includeNoCharge != null
            ? includeNoCharge.value
            : this.includeNoCharge),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        salesRepresentativeId: (salesRepresentativeId != null
            ? salesRepresentativeId.value
            : this.salesRepresentativeId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest {
  WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.officeLocationId,
    this.departmentId,
    this.statuses,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequestExtension
    on WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest {
  WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest copyWith(
      {DateTime? fromDate,
      DateTime? toDate,
      String? dateType,
      String? officeLocationId,
      String? departmentId,
      List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        statuses: statuses ?? this.statuses,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingTaxesPaidReportTaxesPaidReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        statuses: (statuses != null ? statuses.value : this.statuses),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest {
  WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest({
    this.receiptId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequestToJson(
          this);

  @JsonKey(name: 'ReceiptId', includeIfNull: false)
  final String? receiptId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest &&
            (identical(other.receiptId, receiptId) ||
                const DeepCollectionEquality()
                    .equals(other.receiptId, receiptId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(receiptId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequestExtension
    on WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest {
  WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest copyWith(
      {String? receiptId,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest(
        receiptId: receiptId ?? this.receiptId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest
      copyWithWrapped(
          {Wrapped<String?>? receiptId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingReportsReceiptReportReceiptReportRequest(
        receiptId: (receiptId != null ? receiptId.value : this.receiptId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest {
  WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.customerId,
    this.dealId,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequestExtension
    on WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest {
  WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest copyWith(
      {DateTime? fromDate,
      DateTime? toDate,
      String? officeLocationId,
      String? customerId,
      String? dealId,
      String? warehouseId,
      String? inventoryTypeId,
      String? categoryId,
      String? subCategoryId,
      String? inventoryId,
      List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
      List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsBillingReportsRevenueReportRevenueReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest {
  WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest({
    this.fromDate,
    this.toDate,
    this.hoursOffsetFromUTC,
    this.moduleName,
    this.webUsersId,
    this.keyword,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'HoursOffsetFromUTC', includeIfNull: false)
  final int? hoursOffsetFromUTC;
  @JsonKey(name: 'ModuleName', includeIfNull: false)
  final String? moduleName;
  @JsonKey(name: 'WebUsersId', includeIfNull: false)
  final String? webUsersId;
  @JsonKey(name: 'Keyword', includeIfNull: false)
  final String? keyword;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.hoursOffsetFromUTC, hoursOffsetFromUTC) ||
                const DeepCollectionEquality()
                    .equals(other.hoursOffsetFromUTC, hoursOffsetFromUTC)) &&
            (identical(other.moduleName, moduleName) ||
                const DeepCollectionEquality()
                    .equals(other.moduleName, moduleName)) &&
            (identical(other.webUsersId, webUsersId) ||
                const DeepCollectionEquality()
                    .equals(other.webUsersId, webUsersId)) &&
            (identical(other.keyword, keyword) ||
                const DeepCollectionEquality()
                    .equals(other.keyword, keyword)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(hoursOffsetFromUTC) ^
      const DeepCollectionEquality().hash(moduleName) ^
      const DeepCollectionEquality().hash(webUsersId) ^
      const DeepCollectionEquality().hash(keyword) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequestExtension
    on WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest {
  WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          int? hoursOffsetFromUTC,
          String? moduleName,
          String? webUsersId,
          String? keyword,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        hoursOffsetFromUTC: hoursOffsetFromUTC ?? this.hoursOffsetFromUTC,
        moduleName: moduleName ?? this.moduleName,
        webUsersId: webUsersId ?? this.webUsersId,
        keyword: keyword ?? this.keyword,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<int?>? hoursOffsetFromUTC,
          Wrapped<String?>? moduleName,
          Wrapped<String?>? webUsersId,
          Wrapped<String?>? keyword,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        hoursOffsetFromUTC: (hoursOffsetFromUTC != null
            ? hoursOffsetFromUTC.value
            : this.hoursOffsetFromUTC),
        moduleName: (moduleName != null ? moduleName.value : this.moduleName),
        webUsersId: (webUsersId != null ? webUsersId.value : this.webUsersId),
        keyword: (keyword != null ? keyword.value : this.keyword),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest({
    this.batchId,
    this.batchNumber,
    this.batchDate,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequestToJson(
          this);

  @JsonKey(name: 'BatchId', includeIfNull: false)
  final String? batchId;
  @JsonKey(name: 'BatchNumber', includeIfNull: false)
  final String? batchNumber;
  @JsonKey(name: 'BatchDate', includeIfNull: false)
  final DateTime? batchDate;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest &&
            (identical(other.batchId, batchId) ||
                const DeepCollectionEquality()
                    .equals(other.batchId, batchId)) &&
            (identical(other.batchNumber, batchNumber) ||
                const DeepCollectionEquality()
                    .equals(other.batchNumber, batchNumber)) &&
            (identical(other.batchDate, batchDate) ||
                const DeepCollectionEquality()
                    .equals(other.batchDate, batchDate)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batchId) ^
      const DeepCollectionEquality().hash(batchNumber) ^
      const DeepCollectionEquality().hash(batchDate) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequestExtension
    on WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest
      copyWith(
          {String? batchId,
          String? batchNumber,
          DateTime? batchDate,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest(
        batchId: batchId ?? this.batchId,
        batchNumber: batchNumber ?? this.batchNumber,
        batchDate: batchDate ?? this.batchDate,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest
      copyWithWrapped(
          {Wrapped<String?>? batchId,
          Wrapped<String?>? batchNumber,
          Wrapped<DateTime?>? batchDate,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest(
        batchId: (batchId != null ? batchId.value : this.batchId),
        batchNumber:
            (batchNumber != null ? batchNumber.value : this.batchNumber),
        batchDate: (batchDate != null ? batchDate.value : this.batchDate),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest({
    this.batchId,
    this.batchNumber,
    this.batchDate,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequestToJson(
          this);

  @JsonKey(name: 'BatchId', includeIfNull: false)
  final String? batchId;
  @JsonKey(name: 'BatchNumber', includeIfNull: false)
  final String? batchNumber;
  @JsonKey(name: 'BatchDate', includeIfNull: false)
  final DateTime? batchDate;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest &&
            (identical(other.batchId, batchId) ||
                const DeepCollectionEquality()
                    .equals(other.batchId, batchId)) &&
            (identical(other.batchNumber, batchNumber) ||
                const DeepCollectionEquality()
                    .equals(other.batchNumber, batchNumber)) &&
            (identical(other.batchDate, batchDate) ||
                const DeepCollectionEquality()
                    .equals(other.batchDate, batchDate)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batchId) ^
      const DeepCollectionEquality().hash(batchNumber) ^
      const DeepCollectionEquality().hash(batchDate) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequestExtension
    on WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest
      copyWith(
          {String? batchId,
          String? batchNumber,
          DateTime? batchDate,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest(
        batchId: batchId ?? this.batchId,
        batchNumber: batchNumber ?? this.batchNumber,
        batchDate: batchDate ?? this.batchDate,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest
      copyWithWrapped(
          {Wrapped<String?>? batchId,
          Wrapped<String?>? batchNumber,
          Wrapped<DateTime?>? batchDate,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest(
        batchId: (batchId != null ? batchId.value : this.batchId),
        batchNumber:
            (batchNumber != null ? batchNumber.value : this.batchNumber),
        batchDate: (batchDate != null ? batchDate.value : this.batchDate),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest({
    this.batchId,
    this.batchNumber,
    this.batchDate,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequestToJson(
          this);

  @JsonKey(name: 'BatchId', includeIfNull: false)
  final String? batchId;
  @JsonKey(name: 'BatchNumber', includeIfNull: false)
  final String? batchNumber;
  @JsonKey(name: 'BatchDate', includeIfNull: false)
  final DateTime? batchDate;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest &&
            (identical(other.batchId, batchId) ||
                const DeepCollectionEquality()
                    .equals(other.batchId, batchId)) &&
            (identical(other.batchNumber, batchNumber) ||
                const DeepCollectionEquality()
                    .equals(other.batchNumber, batchNumber)) &&
            (identical(other.batchDate, batchDate) ||
                const DeepCollectionEquality()
                    .equals(other.batchDate, batchDate)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batchId) ^
      const DeepCollectionEquality().hash(batchNumber) ^
      const DeepCollectionEquality().hash(batchDate) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequestExtension
    on WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest
      copyWith(
          {String? batchId,
          String? batchNumber,
          DateTime? batchDate,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest(
        batchId: batchId ?? this.batchId,
        batchNumber: batchNumber ?? this.batchNumber,
        batchDate: batchDate ?? this.batchDate,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest
      copyWithWrapped(
          {Wrapped<String?>? batchId,
          Wrapped<String?>? batchNumber,
          Wrapped<DateTime?>? batchDate,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest(
        batchId: (batchId != null ? batchId.value : this.batchId),
        batchNumber:
            (batchNumber != null ? batchNumber.value : this.batchNumber),
        batchDate: (batchDate != null ? batchDate.value : this.batchDate),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest {
  WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.consignorId,
    this.consignorAgreementId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'ConsignorId', includeIfNull: false)
  final String? consignorId;
  @JsonKey(name: 'ConsignorAgreementId', includeIfNull: false)
  final String? consignorAgreementId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.consignorId, consignorId) ||
                const DeepCollectionEquality()
                    .equals(other.consignorId, consignorId)) &&
            (identical(other.consignorAgreementId, consignorAgreementId) ||
                const DeepCollectionEquality().equals(
                    other.consignorAgreementId, consignorAgreementId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(consignorId) ^
      const DeepCollectionEquality().hash(consignorAgreementId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequestExtension
    on WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest {
  WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? consignorId,
          String? consignorAgreementId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        consignorId: consignorId ?? this.consignorId,
        consignorAgreementId: consignorAgreementId ?? this.consignorAgreementId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? consignorId,
          Wrapped<String?>? consignorAgreementId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsConsignedInventoryOrderHistoryReportConsignedInventoryOrderHistoryReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        consignorId:
            (consignorId != null ? consignorId.value : this.consignorId),
        consignorAgreementId: (consignorAgreementId != null
            ? consignorAgreementId.value
            : this.consignorAgreementId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest {
  WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest({
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.consignorId,
    this.consignorAgreementId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequestToJson(
          this);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'ConsignorId', includeIfNull: false)
  final String? consignorId;
  @JsonKey(name: 'ConsignorAgreementId', includeIfNull: false)
  final String? consignorAgreementId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.consignorId, consignorId) ||
                const DeepCollectionEquality()
                    .equals(other.consignorId, consignorId)) &&
            (identical(other.consignorAgreementId, consignorAgreementId) ||
                const DeepCollectionEquality().equals(
                    other.consignorAgreementId, consignorAgreementId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(consignorId) ^
      const DeepCollectionEquality().hash(consignorAgreementId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequestExtension
    on WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest {
  WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest
      copyWith(
          {String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? consignorId,
          String? consignorAgreementId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest(
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        consignorId: consignorId ?? this.consignorId,
        consignorAgreementId: consignorAgreementId ?? this.consignorAgreementId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest
      copyWithWrapped(
          {Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? consignorId,
          Wrapped<String?>? consignorAgreementId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsConsignedInventoryReportConsignedInventoryReportRequest(
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        consignorId:
            (consignorId != null ? consignorId.value : this.consignorId),
        consignorAgreementId: (consignorAgreementId != null
            ? consignorAgreementId.value
            : this.consignorAgreementId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest {
  WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest({
    this.consignorId,
    this.consignorAgreementId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequestToJson(
          this);

  @JsonKey(name: 'ConsignorId', includeIfNull: false)
  final String? consignorId;
  @JsonKey(name: 'ConsignorAgreementId', includeIfNull: false)
  final String? consignorAgreementId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest &&
            (identical(other.consignorId, consignorId) ||
                const DeepCollectionEquality()
                    .equals(other.consignorId, consignorId)) &&
            (identical(other.consignorAgreementId, consignorAgreementId) ||
                const DeepCollectionEquality().equals(
                    other.consignorAgreementId, consignorAgreementId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(consignorId) ^
      const DeepCollectionEquality().hash(consignorAgreementId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequestExtension
    on WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest {
  WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest
      copyWith(
          {String? consignorId,
          String? consignorAgreementId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest(
        consignorId: consignorId ?? this.consignorId,
        consignorAgreementId: consignorAgreementId ?? this.consignorAgreementId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest
      copyWithWrapped(
          {Wrapped<String?>? consignorId,
          Wrapped<String?>? consignorAgreementId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsConsignmentReportsConsignorItemsReportConsignorItemsReportRequest(
        consignorId:
            (consignorId != null ? consignorId.value : this.consignorId),
        consignorAgreementId: (consignorAgreementId != null
            ? consignorAgreementId.value
            : this.consignorAgreementId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest {
  WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest({
    this.warehouseId,
    this.consignorId,
    this.consignorAgreementId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequestToJson(
          this);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'ConsignorId', includeIfNull: false)
  final String? consignorId;
  @JsonKey(name: 'ConsignorAgreementId', includeIfNull: false)
  final String? consignorAgreementId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.consignorId, consignorId) ||
                const DeepCollectionEquality()
                    .equals(other.consignorId, consignorId)) &&
            (identical(other.consignorAgreementId, consignorAgreementId) ||
                const DeepCollectionEquality().equals(
                    other.consignorAgreementId, consignorAgreementId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(consignorId) ^
      const DeepCollectionEquality().hash(consignorAgreementId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequestExtension
    on WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest {
  WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest
      copyWith(
          {String? warehouseId,
          String? consignorId,
          String? consignorAgreementId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest(
        warehouseId: warehouseId ?? this.warehouseId,
        consignorId: consignorId ?? this.consignorId,
        consignorAgreementId: consignorAgreementId ?? this.consignorAgreementId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest
      copyWithWrapped(
          {Wrapped<String?>? warehouseId,
          Wrapped<String?>? consignorId,
          Wrapped<String?>? consignorAgreementId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsConsignorInventoryStatusAndLocationReportConsignorInventoryStatusAndLocationReportRequest(
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        consignorId:
            (consignorId != null ? consignorId.value : this.consignorId),
        consignorAgreementId: (consignorAgreementId != null
            ? consignorAgreementId.value
            : this.consignorAgreementId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest {
  WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.consignorId,
    this.consignorAgreementId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'ConsignorId', includeIfNull: false)
  final String? consignorId;
  @JsonKey(name: 'ConsignorAgreementId', includeIfNull: false)
  final String? consignorAgreementId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.consignorId, consignorId) ||
                const DeepCollectionEquality()
                    .equals(other.consignorId, consignorId)) &&
            (identical(other.consignorAgreementId, consignorAgreementId) ||
                const DeepCollectionEquality().equals(
                    other.consignorAgreementId, consignorAgreementId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(consignorId) ^
      const DeepCollectionEquality().hash(consignorAgreementId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequestExtension
    on WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest {
  WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? consignorId,
          String? consignorAgreementId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        consignorId: consignorId ?? this.consignorId,
        consignorAgreementId: consignorAgreementId ?? this.consignorAgreementId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? consignorId,
          Wrapped<String?>? consignorAgreementId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsConsignorSettlementReportConsignorSettlementReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        consignorId:
            (consignorId != null ? consignorId.value : this.consignorId),
        consignorAgreementId: (consignorAgreementId != null
            ? consignorAgreementId.value
            : this.consignorAgreementId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest {
  WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest({
    this.fromDate,
    this.toDate,
    this.includeUnpaidFees,
    this.officeLocationId,
    this.consignorId,
    this.consignorAgreementId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IncludeUnpaidFees', includeIfNull: false)
  final bool? includeUnpaidFees;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'ConsignorId', includeIfNull: false)
  final String? consignorId;
  @JsonKey(name: 'ConsignorAgreementId', includeIfNull: false)
  final String? consignorAgreementId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.includeUnpaidFees, includeUnpaidFees) ||
                const DeepCollectionEquality()
                    .equals(other.includeUnpaidFees, includeUnpaidFees)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.consignorId, consignorId) ||
                const DeepCollectionEquality()
                    .equals(other.consignorId, consignorId)) &&
            (identical(other.consignorAgreementId, consignorAgreementId) ||
                const DeepCollectionEquality().equals(
                    other.consignorAgreementId, consignorAgreementId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(includeUnpaidFees) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(consignorId) ^
      const DeepCollectionEquality().hash(consignorAgreementId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequestExtension
    on WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest {
  WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? includeUnpaidFees,
          String? officeLocationId,
          String? consignorId,
          String? consignorAgreementId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        includeUnpaidFees: includeUnpaidFees ?? this.includeUnpaidFees,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        consignorId: consignorId ?? this.consignorId,
        consignorAgreementId: consignorAgreementId ?? this.consignorAgreementId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<bool?>? includeUnpaidFees,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? consignorId,
          Wrapped<String?>? consignorAgreementId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsConsignorStatementReportConsignorStatementReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        includeUnpaidFees: (includeUnpaidFees != null
            ? includeUnpaidFees.value
            : this.includeUnpaidFees),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        consignorId:
            (consignorId != null ? consignorId.value : this.consignorId),
        consignorAgreementId: (consignorAgreementId != null
            ? consignorAgreementId.value
            : this.consignorAgreementId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest {
  WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest({
    this.fromDate,
    this.toDate,
    this.filterDates,
    this.daysChanged,
    this.officeLocationId,
    this.departmentId,
    this.userId,
    this.dealId,
    this.revisionTypes,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'FilterDates', includeIfNull: false)
  final bool? filterDates;
  @JsonKey(name: 'DaysChanged', includeIfNull: false)
  final int? daysChanged;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'UserId', includeIfNull: false)
  final String? userId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(
      name: 'RevisionTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? revisionTypes;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.filterDates, filterDates) ||
                const DeepCollectionEquality()
                    .equals(other.filterDates, filterDates)) &&
            (identical(other.daysChanged, daysChanged) ||
                const DeepCollectionEquality()
                    .equals(other.daysChanged, daysChanged)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.revisionTypes, revisionTypes) ||
                const DeepCollectionEquality()
                    .equals(other.revisionTypes, revisionTypes)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(filterDates) ^
      const DeepCollectionEquality().hash(daysChanged) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(revisionTypes) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequestExtension
    on WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest {
  WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? filterDates,
          int? daysChanged,
          String? officeLocationId,
          String? departmentId,
          String? userId,
          String? dealId,
          List<FwStandardModelsSelectedCheckBoxListItem>? revisionTypes,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        filterDates: filterDates ?? this.filterDates,
        daysChanged: daysChanged ?? this.daysChanged,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        userId: userId ?? this.userId,
        dealId: dealId ?? this.dealId,
        revisionTypes: revisionTypes ?? this.revisionTypes,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<bool?>? filterDates,
          Wrapped<int?>? daysChanged,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? userId,
          Wrapped<String?>? dealId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              revisionTypes,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        filterDates:
            (filterDates != null ? filterDates.value : this.filterDates),
        daysChanged:
            (daysChanged != null ? daysChanged.value : this.daysChanged),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        userId: (userId != null ? userId.value : this.userId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        revisionTypes:
            (revisionTypes != null ? revisionTypes.value : this.revisionTypes),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest {
  WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest({
    this.contractId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequestToJson(
          this);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequestExtension
    on WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest {
  WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest
      copyWith(
          {String? contractId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest(
        contractId: contractId ?? this.contractId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest
      copyWithWrapped(
          {Wrapped<String?>? contractId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest(
        contractId: (contractId != null ? contractId.value : this.contractId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsInContractReportInContractReportRequest {
  WebApiModulesReportsContractReportsInContractReportInContractReportRequest({
    this.showSwappedItems,
    this.exchangeContractId,
    this.contractId,
    this.appLanguageId,
    this.contractType,
    this.includeSubVendor,
    this.showImages,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsContractReportsInContractReportInContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsInContractReportInContractReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsInContractReportInContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsInContractReportInContractReportRequestToJson(
          this);

  @JsonKey(name: 'ShowSwappedItems', includeIfNull: false)
  final bool? showSwappedItems;
  @JsonKey(name: 'ExchangeContractId', includeIfNull: false)
  final String? exchangeContractId;
  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'ContractType', includeIfNull: false)
  final String? contractType;
  @JsonKey(name: 'IncludeSubVendor', includeIfNull: false)
  final bool? includeSubVendor;
  @JsonKey(name: 'ShowImages', includeIfNull: false)
  final bool? showImages;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsInContractReportInContractReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsInContractReportInContractReportRequest &&
            (identical(other.showSwappedItems, showSwappedItems) ||
                const DeepCollectionEquality()
                    .equals(other.showSwappedItems, showSwappedItems)) &&
            (identical(other.exchangeContractId, exchangeContractId) ||
                const DeepCollectionEquality()
                    .equals(other.exchangeContractId, exchangeContractId)) &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.contractType, contractType) ||
                const DeepCollectionEquality()
                    .equals(other.contractType, contractType)) &&
            (identical(other.includeSubVendor, includeSubVendor) ||
                const DeepCollectionEquality()
                    .equals(other.includeSubVendor, includeSubVendor)) &&
            (identical(other.showImages, showImages) ||
                const DeepCollectionEquality()
                    .equals(other.showImages, showImages)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(showSwappedItems) ^
      const DeepCollectionEquality().hash(exchangeContractId) ^
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(contractType) ^
      const DeepCollectionEquality().hash(includeSubVendor) ^
      const DeepCollectionEquality().hash(showImages) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsInContractReportInContractReportRequestExtension
    on WebApiModulesReportsContractReportsInContractReportInContractReportRequest {
  WebApiModulesReportsContractReportsInContractReportInContractReportRequest
      copyWith(
          {bool? showSwappedItems,
          String? exchangeContractId,
          String? contractId,
          String? appLanguageId,
          String? contractType,
          bool? includeSubVendor,
          bool? showImages,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsInContractReportInContractReportRequest(
        showSwappedItems: showSwappedItems ?? this.showSwappedItems,
        exchangeContractId: exchangeContractId ?? this.exchangeContractId,
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        contractType: contractType ?? this.contractType,
        includeSubVendor: includeSubVendor ?? this.includeSubVendor,
        showImages: showImages ?? this.showImages,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsContractReportsInContractReportInContractReportRequest
      copyWithWrapped(
          {Wrapped<bool?>? showSwappedItems,
          Wrapped<String?>? exchangeContractId,
          Wrapped<String?>? contractId,
          Wrapped<String?>? appLanguageId,
          Wrapped<String?>? contractType,
          Wrapped<bool?>? includeSubVendor,
          Wrapped<bool?>? showImages,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsInContractReportInContractReportRequest(
        showSwappedItems: (showSwappedItems != null
            ? showSwappedItems.value
            : this.showSwappedItems),
        exchangeContractId: (exchangeContractId != null
            ? exchangeContractId.value
            : this.exchangeContractId),
        contractId: (contractId != null ? contractId.value : this.contractId),
        appLanguageId:
            (appLanguageId != null ? appLanguageId.value : this.appLanguageId),
        contractType:
            (contractType != null ? contractType.value : this.contractType),
        includeSubVendor: (includeSubVendor != null
            ? includeSubVendor.value
            : this.includeSubVendor),
        showImages: (showImages != null ? showImages.value : this.showImages),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest {
  WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest({
    this.contractId,
    this.appLanguageId,
    this.contractType,
    this.includeSubVendor,
    this.showImages,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsLostContractReportLostContractReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsLostContractReportLostContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsLostContractReportLostContractReportRequestToJson(
          this);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'ContractType', includeIfNull: false)
  final String? contractType;
  @JsonKey(name: 'IncludeSubVendor', includeIfNull: false)
  final bool? includeSubVendor;
  @JsonKey(name: 'ShowImages', includeIfNull: false)
  final bool? showImages;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsLostContractReportLostContractReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.contractType, contractType) ||
                const DeepCollectionEquality()
                    .equals(other.contractType, contractType)) &&
            (identical(other.includeSubVendor, includeSubVendor) ||
                const DeepCollectionEquality()
                    .equals(other.includeSubVendor, includeSubVendor)) &&
            (identical(other.showImages, showImages) ||
                const DeepCollectionEquality()
                    .equals(other.showImages, showImages)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(contractType) ^
      const DeepCollectionEquality().hash(includeSubVendor) ^
      const DeepCollectionEquality().hash(showImages) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsLostContractReportLostContractReportRequestExtension
    on WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest {
  WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? contractType,
          bool? includeSubVendor,
          bool? showImages,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        contractType: contractType ?? this.contractType,
        includeSubVendor: includeSubVendor ?? this.includeSubVendor,
        showImages: showImages ?? this.showImages,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest
      copyWithWrapped(
          {Wrapped<String?>? contractId,
          Wrapped<String?>? appLanguageId,
          Wrapped<String?>? contractType,
          Wrapped<bool?>? includeSubVendor,
          Wrapped<bool?>? showImages,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest(
        contractId: (contractId != null ? contractId.value : this.contractId),
        appLanguageId:
            (appLanguageId != null ? appLanguageId.value : this.appLanguageId),
        contractType:
            (contractType != null ? contractType.value : this.contractType),
        includeSubVendor: (includeSubVendor != null
            ? includeSubVendor.value
            : this.includeSubVendor),
        showImages: (showImages != null ? showImages.value : this.showImages),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest {
  WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest({
    this.contractId,
    this.appLanguageId,
    this.contractType,
    this.includeSubVendor,
    this.showImages,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsOutContractReportOutContractReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsOutContractReportOutContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsOutContractReportOutContractReportRequestToJson(
          this);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'ContractType', includeIfNull: false)
  final String? contractType;
  @JsonKey(name: 'IncludeSubVendor', includeIfNull: false)
  final bool? includeSubVendor;
  @JsonKey(name: 'ShowImages', includeIfNull: false)
  final bool? showImages;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsOutContractReportOutContractReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.contractType, contractType) ||
                const DeepCollectionEquality()
                    .equals(other.contractType, contractType)) &&
            (identical(other.includeSubVendor, includeSubVendor) ||
                const DeepCollectionEquality()
                    .equals(other.includeSubVendor, includeSubVendor)) &&
            (identical(other.showImages, showImages) ||
                const DeepCollectionEquality()
                    .equals(other.showImages, showImages)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(contractType) ^
      const DeepCollectionEquality().hash(includeSubVendor) ^
      const DeepCollectionEquality().hash(showImages) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsOutContractReportOutContractReportRequestExtension
    on WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest {
  WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? contractType,
          bool? includeSubVendor,
          bool? showImages,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        contractType: contractType ?? this.contractType,
        includeSubVendor: includeSubVendor ?? this.includeSubVendor,
        showImages: showImages ?? this.showImages,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest
      copyWithWrapped(
          {Wrapped<String?>? contractId,
          Wrapped<String?>? appLanguageId,
          Wrapped<String?>? contractType,
          Wrapped<bool?>? includeSubVendor,
          Wrapped<bool?>? showImages,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest(
        contractId: (contractId != null ? contractId.value : this.contractId),
        appLanguageId:
            (appLanguageId != null ? appLanguageId.value : this.appLanguageId),
        contractType:
            (contractType != null ? contractType.value : this.contractType),
        includeSubVendor: (includeSubVendor != null
            ? includeSubVendor.value
            : this.includeSubVendor),
        showImages: (showImages != null ? showImages.value : this.showImages),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequest {
  WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequest({
    this.showSwappedItems,
    this.exchangeContractId,
    this.contractId,
    this.appLanguageId,
    this.contractType,
    this.includeSubVendor,
    this.showImages,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequestToJson(
          this);

  @JsonKey(name: 'ShowSwappedItems', includeIfNull: false)
  final bool? showSwappedItems;
  @JsonKey(name: 'ExchangeContractId', includeIfNull: false)
  final String? exchangeContractId;
  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'ContractType', includeIfNull: false)
  final String? contractType;
  @JsonKey(name: 'IncludeSubVendor', includeIfNull: false)
  final bool? includeSubVendor;
  @JsonKey(name: 'ShowImages', includeIfNull: false)
  final bool? showImages;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequest &&
            (identical(other.showSwappedItems, showSwappedItems) ||
                const DeepCollectionEquality()
                    .equals(other.showSwappedItems, showSwappedItems)) &&
            (identical(other.exchangeContractId, exchangeContractId) ||
                const DeepCollectionEquality()
                    .equals(other.exchangeContractId, exchangeContractId)) &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.contractType, contractType) ||
                const DeepCollectionEquality()
                    .equals(other.contractType, contractType)) &&
            (identical(other.includeSubVendor, includeSubVendor) ||
                const DeepCollectionEquality()
                    .equals(other.includeSubVendor, includeSubVendor)) &&
            (identical(other.showImages, showImages) ||
                const DeepCollectionEquality()
                    .equals(other.showImages, showImages)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(showSwappedItems) ^
      const DeepCollectionEquality().hash(exchangeContractId) ^
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(contractType) ^
      const DeepCollectionEquality().hash(includeSubVendor) ^
      const DeepCollectionEquality().hash(showImages) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequestExtension
    on WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequest {
  WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequest
      copyWith(
          {bool? showSwappedItems,
          String? exchangeContractId,
          String? contractId,
          String? appLanguageId,
          String? contractType,
          bool? includeSubVendor,
          bool? showImages,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequest(
        showSwappedItems: showSwappedItems ?? this.showSwappedItems,
        exchangeContractId: exchangeContractId ?? this.exchangeContractId,
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        contractType: contractType ?? this.contractType,
        includeSubVendor: includeSubVendor ?? this.includeSubVendor,
        showImages: showImages ?? this.showImages,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequest
      copyWithWrapped(
          {Wrapped<bool?>? showSwappedItems,
          Wrapped<String?>? exchangeContractId,
          Wrapped<String?>? contractId,
          Wrapped<String?>? appLanguageId,
          Wrapped<String?>? contractType,
          Wrapped<bool?>? includeSubVendor,
          Wrapped<bool?>? showImages,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsQuikInContractReportQuikInContractReportRequest(
        showSwappedItems: (showSwappedItems != null
            ? showSwappedItems.value
            : this.showSwappedItems),
        exchangeContractId: (exchangeContractId != null
            ? exchangeContractId.value
            : this.exchangeContractId),
        contractId: (contractId != null ? contractId.value : this.contractId),
        appLanguageId:
            (appLanguageId != null ? appLanguageId.value : this.appLanguageId),
        contractType:
            (contractType != null ? contractType.value : this.contractType),
        includeSubVendor: (includeSubVendor != null
            ? includeSubVendor.value
            : this.includeSubVendor),
        showImages: (showImages != null ? showImages.value : this.showImages),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest {
  WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest({
    this.contractId,
    this.appLanguageId,
    this.contractType,
    this.includeSubVendor,
    this.showImages,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequestToJson(
          this);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'ContractType', includeIfNull: false)
  final String? contractType;
  @JsonKey(name: 'IncludeSubVendor', includeIfNull: false)
  final bool? includeSubVendor;
  @JsonKey(name: 'ShowImages', includeIfNull: false)
  final bool? showImages;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.contractType, contractType) ||
                const DeepCollectionEquality()
                    .equals(other.contractType, contractType)) &&
            (identical(other.includeSubVendor, includeSubVendor) ||
                const DeepCollectionEquality()
                    .equals(other.includeSubVendor, includeSubVendor)) &&
            (identical(other.showImages, showImages) ||
                const DeepCollectionEquality()
                    .equals(other.showImages, showImages)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(contractType) ^
      const DeepCollectionEquality().hash(includeSubVendor) ^
      const DeepCollectionEquality().hash(showImages) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequestExtension
    on WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest {
  WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? contractType,
          bool? includeSubVendor,
          bool? showImages,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        contractType: contractType ?? this.contractType,
        includeSubVendor: includeSubVendor ?? this.includeSubVendor,
        showImages: showImages ?? this.showImages,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest
      copyWithWrapped(
          {Wrapped<String?>? contractId,
          Wrapped<String?>? appLanguageId,
          Wrapped<String?>? contractType,
          Wrapped<bool?>? includeSubVendor,
          Wrapped<bool?>? showImages,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest(
        contractId: (contractId != null ? contractId.value : this.contractId),
        appLanguageId:
            (appLanguageId != null ? appLanguageId.value : this.appLanguageId),
        contractType:
            (contractType != null ? contractType.value : this.contractType),
        includeSubVendor: (includeSubVendor != null
            ? includeSubVendor.value
            : this.includeSubVendor),
        showImages: (showImages != null ? showImages.value : this.showImages),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest {
  WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest({
    this.contractId,
    this.appLanguageId,
    this.contractType,
    this.includeSubVendor,
    this.showImages,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequestToJson(
          this);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'ContractType', includeIfNull: false)
  final String? contractType;
  @JsonKey(name: 'IncludeSubVendor', includeIfNull: false)
  final bool? includeSubVendor;
  @JsonKey(name: 'ShowImages', includeIfNull: false)
  final bool? showImages;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.contractType, contractType) ||
                const DeepCollectionEquality()
                    .equals(other.contractType, contractType)) &&
            (identical(other.includeSubVendor, includeSubVendor) ||
                const DeepCollectionEquality()
                    .equals(other.includeSubVendor, includeSubVendor)) &&
            (identical(other.showImages, showImages) ||
                const DeepCollectionEquality()
                    .equals(other.showImages, showImages)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(contractType) ^
      const DeepCollectionEquality().hash(includeSubVendor) ^
      const DeepCollectionEquality().hash(showImages) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequestExtension
    on WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest {
  WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? contractType,
          bool? includeSubVendor,
          bool? showImages,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        contractType: contractType ?? this.contractType,
        includeSubVendor: includeSubVendor ?? this.includeSubVendor,
        showImages: showImages ?? this.showImages,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest
      copyWithWrapped(
          {Wrapped<String?>? contractId,
          Wrapped<String?>? appLanguageId,
          Wrapped<String?>? contractType,
          Wrapped<bool?>? includeSubVendor,
          Wrapped<bool?>? showImages,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest(
        contractId: (contractId != null ? contractId.value : this.contractId),
        appLanguageId:
            (appLanguageId != null ? appLanguageId.value : this.appLanguageId),
        contractType:
            (contractType != null ? contractType.value : this.contractType),
        includeSubVendor: (includeSubVendor != null
            ? includeSubVendor.value
            : this.includeSubVendor),
        showImages: (showImages != null ? showImages.value : this.showImages),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest {
  WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest({
    this.dealId,
    this.departmentId,
    this.orderId,
    this.sortBy,
    this.printBarcodeMode,
    this.includeSales,
    this.warehouseId,
    this.contractId,
    this.orderIds,
    this.includeTrackedByBarcode,
    this.printBarcodes,
    this.paginateByInventoryType,
    this.addBoxforMeterReading,
    this.printICodeColumn,
    this.printAisleShelf,
    this.printOut,
    this.printIn,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsReturnListReportReturnListReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsReturnListReportReturnListReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsReturnListReportReturnListReportRequestToJson(
          this);

  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'SortBy', includeIfNull: false)
  final String? sortBy;
  @JsonKey(name: 'PrintBarcodeMode', includeIfNull: false)
  final bool? printBarcodeMode;
  @JsonKey(name: 'IncludeSales', includeIfNull: false)
  final bool? includeSales;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'OrderIds', includeIfNull: false)
  final String? orderIds;
  @JsonKey(name: 'IncludeTrackedByBarcode', includeIfNull: false)
  final bool? includeTrackedByBarcode;
  @JsonKey(name: 'PrintBarcodes', includeIfNull: false)
  final bool? printBarcodes;
  @JsonKey(name: 'PaginateByInventoryType', includeIfNull: false)
  final bool? paginateByInventoryType;
  @JsonKey(name: 'AddBoxforMeterReading', includeIfNull: false)
  final bool? addBoxforMeterReading;
  @JsonKey(name: 'PrintICodeColumn', includeIfNull: false)
  final bool? printICodeColumn;
  @JsonKey(name: 'PrintAisleShelf', includeIfNull: false)
  final bool? printAisleShelf;
  @JsonKey(name: 'PrintOut', includeIfNull: false)
  final bool? printOut;
  @JsonKey(name: 'PrintIn', includeIfNull: false)
  final bool? printIn;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsReturnListReportReturnListReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.printBarcodeMode, printBarcodeMode) ||
                const DeepCollectionEquality()
                    .equals(other.printBarcodeMode, printBarcodeMode)) &&
            (identical(other.includeSales, includeSales) ||
                const DeepCollectionEquality()
                    .equals(other.includeSales, includeSales)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.orderIds, orderIds) ||
                const DeepCollectionEquality()
                    .equals(other.orderIds, orderIds)) &&
            (identical(other.includeTrackedByBarcode, includeTrackedByBarcode) ||
                const DeepCollectionEquality().equals(
                    other.includeTrackedByBarcode, includeTrackedByBarcode)) &&
            (identical(other.printBarcodes, printBarcodes) ||
                const DeepCollectionEquality()
                    .equals(other.printBarcodes, printBarcodes)) &&
            (identical(other.paginateByInventoryType, paginateByInventoryType) ||
                const DeepCollectionEquality().equals(
                    other.paginateByInventoryType, paginateByInventoryType)) &&
            (identical(other.addBoxforMeterReading, addBoxforMeterReading) ||
                const DeepCollectionEquality().equals(
                    other.addBoxforMeterReading, addBoxforMeterReading)) &&
            (identical(other.printICodeColumn, printICodeColumn) ||
                const DeepCollectionEquality()
                    .equals(other.printICodeColumn, printICodeColumn)) &&
            (identical(other.printAisleShelf, printAisleShelf) ||
                const DeepCollectionEquality()
                    .equals(other.printAisleShelf, printAisleShelf)) &&
            (identical(other.printOut, printOut) ||
                const DeepCollectionEquality().equals(other.printOut, printOut)) &&
            (identical(other.printIn, printIn) || const DeepCollectionEquality().equals(other.printIn, printIn)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(printBarcodeMode) ^
      const DeepCollectionEquality().hash(includeSales) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(orderIds) ^
      const DeepCollectionEquality().hash(includeTrackedByBarcode) ^
      const DeepCollectionEquality().hash(printBarcodes) ^
      const DeepCollectionEquality().hash(paginateByInventoryType) ^
      const DeepCollectionEquality().hash(addBoxforMeterReading) ^
      const DeepCollectionEquality().hash(printICodeColumn) ^
      const DeepCollectionEquality().hash(printAisleShelf) ^
      const DeepCollectionEquality().hash(printOut) ^
      const DeepCollectionEquality().hash(printIn) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsReturnListReportReturnListReportRequestExtension
    on WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest {
  WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest
      copyWith(
          {String? dealId,
          String? departmentId,
          String? orderId,
          String? sortBy,
          bool? printBarcodeMode,
          bool? includeSales,
          String? warehouseId,
          String? contractId,
          String? orderIds,
          bool? includeTrackedByBarcode,
          bool? printBarcodes,
          bool? paginateByInventoryType,
          bool? addBoxforMeterReading,
          bool? printICodeColumn,
          bool? printAisleShelf,
          bool? printOut,
          bool? printIn,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest(
        dealId: dealId ?? this.dealId,
        departmentId: departmentId ?? this.departmentId,
        orderId: orderId ?? this.orderId,
        sortBy: sortBy ?? this.sortBy,
        printBarcodeMode: printBarcodeMode ?? this.printBarcodeMode,
        includeSales: includeSales ?? this.includeSales,
        warehouseId: warehouseId ?? this.warehouseId,
        contractId: contractId ?? this.contractId,
        orderIds: orderIds ?? this.orderIds,
        includeTrackedByBarcode:
            includeTrackedByBarcode ?? this.includeTrackedByBarcode,
        printBarcodes: printBarcodes ?? this.printBarcodes,
        paginateByInventoryType:
            paginateByInventoryType ?? this.paginateByInventoryType,
        addBoxforMeterReading:
            addBoxforMeterReading ?? this.addBoxforMeterReading,
        printICodeColumn: printICodeColumn ?? this.printICodeColumn,
        printAisleShelf: printAisleShelf ?? this.printAisleShelf,
        printOut: printOut ?? this.printOut,
        printIn: printIn ?? this.printIn,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest
      copyWithWrapped(
          {Wrapped<String?>? dealId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? orderId,
          Wrapped<String?>? sortBy,
          Wrapped<bool?>? printBarcodeMode,
          Wrapped<bool?>? includeSales,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? contractId,
          Wrapped<String?>? orderIds,
          Wrapped<bool?>? includeTrackedByBarcode,
          Wrapped<bool?>? printBarcodes,
          Wrapped<bool?>? paginateByInventoryType,
          Wrapped<bool?>? addBoxforMeterReading,
          Wrapped<bool?>? printICodeColumn,
          Wrapped<bool?>? printAisleShelf,
          Wrapped<bool?>? printOut,
          Wrapped<bool?>? printIn,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest(
        dealId: (dealId != null ? dealId.value : this.dealId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        printBarcodeMode: (printBarcodeMode != null
            ? printBarcodeMode.value
            : this.printBarcodeMode),
        includeSales:
            (includeSales != null ? includeSales.value : this.includeSales),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        contractId: (contractId != null ? contractId.value : this.contractId),
        orderIds: (orderIds != null ? orderIds.value : this.orderIds),
        includeTrackedByBarcode: (includeTrackedByBarcode != null
            ? includeTrackedByBarcode.value
            : this.includeTrackedByBarcode),
        printBarcodes:
            (printBarcodes != null ? printBarcodes.value : this.printBarcodes),
        paginateByInventoryType: (paginateByInventoryType != null
            ? paginateByInventoryType.value
            : this.paginateByInventoryType),
        addBoxforMeterReading: (addBoxforMeterReading != null
            ? addBoxforMeterReading.value
            : this.addBoxforMeterReading),
        printICodeColumn: (printICodeColumn != null
            ? printICodeColumn.value
            : this.printICodeColumn),
        printAisleShelf: (printAisleShelf != null
            ? printAisleShelf.value
            : this.printAisleShelf),
        printOut: (printOut != null ? printOut.value : this.printOut),
        printIn: (printIn != null ? printIn.value : this.printIn),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest {
  WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest({
    this.contractId,
    this.appLanguageId,
    this.contractType,
    this.includeSubVendor,
    this.showImages,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequestToJson(
          this);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'ContractType', includeIfNull: false)
  final String? contractType;
  @JsonKey(name: 'IncludeSubVendor', includeIfNull: false)
  final bool? includeSubVendor;
  @JsonKey(name: 'ShowImages', includeIfNull: false)
  final bool? showImages;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.contractType, contractType) ||
                const DeepCollectionEquality()
                    .equals(other.contractType, contractType)) &&
            (identical(other.includeSubVendor, includeSubVendor) ||
                const DeepCollectionEquality()
                    .equals(other.includeSubVendor, includeSubVendor)) &&
            (identical(other.showImages, showImages) ||
                const DeepCollectionEquality()
                    .equals(other.showImages, showImages)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(contractType) ^
      const DeepCollectionEquality().hash(includeSubVendor) ^
      const DeepCollectionEquality().hash(showImages) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequestExtension
    on WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest {
  WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? contractType,
          bool? includeSubVendor,
          bool? showImages,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        contractType: contractType ?? this.contractType,
        includeSubVendor: includeSubVendor ?? this.includeSubVendor,
        showImages: showImages ?? this.showImages,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest
      copyWithWrapped(
          {Wrapped<String?>? contractId,
          Wrapped<String?>? appLanguageId,
          Wrapped<String?>? contractType,
          Wrapped<bool?>? includeSubVendor,
          Wrapped<bool?>? showImages,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest(
        contractId: (contractId != null ? contractId.value : this.contractId),
        appLanguageId:
            (appLanguageId != null ? appLanguageId.value : this.appLanguageId),
        contractType:
            (contractType != null ? contractType.value : this.contractType),
        includeSubVendor: (includeSubVendor != null
            ? includeSubVendor.value
            : this.includeSubVendor),
        showImages: (showImages != null ? showImages.value : this.showImages),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest {
  WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest({
    this.contractId,
    this.appLanguageId,
    this.contractType,
    this.includeSubVendor,
    this.showImages,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequestToJson(
          this);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'ContractType', includeIfNull: false)
  final String? contractType;
  @JsonKey(name: 'IncludeSubVendor', includeIfNull: false)
  final bool? includeSubVendor;
  @JsonKey(name: 'ShowImages', includeIfNull: false)
  final bool? showImages;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.contractType, contractType) ||
                const DeepCollectionEquality()
                    .equals(other.contractType, contractType)) &&
            (identical(other.includeSubVendor, includeSubVendor) ||
                const DeepCollectionEquality()
                    .equals(other.includeSubVendor, includeSubVendor)) &&
            (identical(other.showImages, showImages) ||
                const DeepCollectionEquality()
                    .equals(other.showImages, showImages)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(contractType) ^
      const DeepCollectionEquality().hash(includeSubVendor) ^
      const DeepCollectionEquality().hash(showImages) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequestExtension
    on WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest {
  WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? contractType,
          bool? includeSubVendor,
          bool? showImages,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        contractType: contractType ?? this.contractType,
        includeSubVendor: includeSubVendor ?? this.includeSubVendor,
        showImages: showImages ?? this.showImages,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest
      copyWithWrapped(
          {Wrapped<String?>? contractId,
          Wrapped<String?>? appLanguageId,
          Wrapped<String?>? contractType,
          Wrapped<bool?>? includeSubVendor,
          Wrapped<bool?>? showImages,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest(
        contractId: (contractId != null ? contractId.value : this.contractId),
        appLanguageId:
            (appLanguageId != null ? appLanguageId.value : this.appLanguageId),
        contractType:
            (contractType != null ? contractType.value : this.contractType),
        includeSubVendor: (includeSubVendor != null
            ? includeSubVendor.value
            : this.includeSubVendor),
        showImages: (showImages != null ? showImages.value : this.showImages),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest {
  WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.orderId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequestExtension
    on WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest {
  WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? orderId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? orderId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest {
  WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest({
    this.officeLocationId,
    this.customerId,
    this.dealId,
    this.onlyRemaining,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequestToJson(
          this);

  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OnlyRemaining', includeIfNull: false)
  final bool? onlyRemaining;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.onlyRemaining, onlyRemaining) ||
                const DeepCollectionEquality()
                    .equals(other.onlyRemaining, onlyRemaining)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(onlyRemaining) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequestExtension
    on WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest {
  WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest
      copyWith(
          {String? officeLocationId,
          String? customerId,
          String? dealId,
          bool? onlyRemaining,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest(
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        onlyRemaining: onlyRemaining ?? this.onlyRemaining,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest
      copyWithWrapped(
          {Wrapped<String?>? officeLocationId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<bool?>? onlyRemaining,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest(
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        onlyRemaining:
            (onlyRemaining != null ? onlyRemaining.value : this.onlyRemaining),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest {
  WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.departmentId,
    this.customerTypeId,
    this.customerId,
    this.dealTypeId,
    this.dealId,
    this.inventoryTypeId,
    this.revenueTypes,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerTypeId', includeIfNull: false)
  final String? customerTypeId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(
      name: 'RevenueTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? revenueTypes;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerTypeId, customerTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.customerTypeId, customerTypeId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.revenueTypes, revenueTypes) ||
                const DeepCollectionEquality()
                    .equals(other.revenueTypes, revenueTypes)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerTypeId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(revenueTypes) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequestExtension
    on WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest {
  WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? departmentId,
          String? customerTypeId,
          String? customerId,
          String? dealTypeId,
          String? dealId,
          String? inventoryTypeId,
          List<FwStandardModelsSelectedCheckBoxListItem>? revenueTypes,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerTypeId: customerTypeId ?? this.customerTypeId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealId: dealId ?? this.dealId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        revenueTypes: revenueTypes ?? this.revenueTypes,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerTypeId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealTypeId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              revenueTypes,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerTypeId: (customerTypeId != null
            ? customerTypeId.value
            : this.customerTypeId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealTypeId: (dealTypeId != null ? dealTypeId.value : this.dealTypeId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        revenueTypes:
            (revenueTypes != null ? revenueTypes.value : this.revenueTypes),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest {
  WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealTypeId,
    this.dealId,
    this.orderTypeId,
    this.currencyId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderTypeId', includeIfNull: false)
  final String? orderTypeId;
  @JsonKey(name: 'CurrencyId', includeIfNull: false)
  final String? currencyId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderTypeId, orderTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeId, orderTypeId)) &&
            (identical(other.currencyId, currencyId) ||
                const DeepCollectionEquality()
                    .equals(other.currencyId, currencyId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderTypeId) ^
      const DeepCollectionEquality().hash(currencyId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequestExtension
    on WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest {
  WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealTypeId,
          String? dealId,
          String? orderTypeId,
          String? currencyId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealId: dealId ?? this.dealId,
        orderTypeId: orderTypeId ?? this.orderTypeId,
        currencyId: currencyId ?? this.currencyId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealTypeId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? orderTypeId,
          Wrapped<String?>? currencyId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealTypeId: (dealTypeId != null ? dealTypeId.value : this.dealTypeId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        orderTypeId:
            (orderTypeId != null ? orderTypeId.value : this.orderTypeId),
        currencyId: (currencyId != null ? currencyId.value : this.currencyId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest {
  WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.deductVendorItemCost,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.noCharge,
    this.billedHiatus,
    this.billableFlat,
    this.statuses,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'DeductVendorItemCost', includeIfNull: false)
  final bool? deductVendorItemCost;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'NoCharge', includeIfNull: false)
  final String? noCharge;
  @JsonKey(name: 'BilledHiatus', includeIfNull: false)
  final String? billedHiatus;
  @JsonKey(name: 'BillableFlat', includeIfNull: false)
  final String? billableFlat;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.deductVendorItemCost, deductVendorItemCost) ||
                const DeepCollectionEquality().equals(
                    other.deductVendorItemCost, deductVendorItemCost)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.noCharge, noCharge) ||
                const DeepCollectionEquality()
                    .equals(other.noCharge, noCharge)) &&
            (identical(other.billedHiatus, billedHiatus) ||
                const DeepCollectionEquality()
                    .equals(other.billedHiatus, billedHiatus)) &&
            (identical(other.billableFlat, billableFlat) ||
                const DeepCollectionEquality()
                    .equals(other.billableFlat, billableFlat)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(deductVendorItemCost) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(noCharge) ^
      const DeepCollectionEquality().hash(billedHiatus) ^
      const DeepCollectionEquality().hash(billableFlat) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequestExtension
    on WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest {
  WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          bool? deductVendorItemCost,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? noCharge,
          String? billedHiatus,
          String? billableFlat,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        deductVendorItemCost: deductVendorItemCost ?? this.deductVendorItemCost,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        noCharge: noCharge ?? this.noCharge,
        billedHiatus: billedHiatus ?? this.billedHiatus,
        billableFlat: billableFlat ?? this.billableFlat,
        statuses: statuses ?? this.statuses,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<bool?>? includeNoCharge,
          Wrapped<bool?>? deductVendorItemCost,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? noCharge,
          Wrapped<String?>? billedHiatus,
          Wrapped<String?>? billableFlat,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        includeNoCharge: (includeNoCharge != null
            ? includeNoCharge.value
            : this.includeNoCharge),
        deductVendorItemCost: (deductVendorItemCost != null
            ? deductVendorItemCost.value
            : this.deductVendorItemCost),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        noCharge: (noCharge != null ? noCharge.value : this.noCharge),
        billedHiatus:
            (billedHiatus != null ? billedHiatus.value : this.billedHiatus),
        billableFlat:
            (billableFlat != null ? billableFlat.value : this.billableFlat),
        statuses: (statuses != null ? statuses.value : this.statuses),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest {
  WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeValueCost,
    this.itemsToInclude,
    this.filterDates,
    this.includeFullImages,
    this.includeThumbnailImages,
    this.excludePendingExchanges,
    this.includeContainersOnly,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.orderUnitId,
    this.orderTypeId,
    this.orderId,
    this.contractId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeValueCost', includeIfNull: false)
  final String? includeValueCost;
  @JsonKey(name: 'ItemsToInclude', includeIfNull: false)
  final String? itemsToInclude;
  @JsonKey(name: 'FilterDates', includeIfNull: false)
  final bool? filterDates;
  @JsonKey(name: 'IncludeFullImages', includeIfNull: false)
  final bool? includeFullImages;
  @JsonKey(name: 'IncludeThumbnailImages', includeIfNull: false)
  final bool? includeThumbnailImages;
  @JsonKey(name: 'ExcludePendingExchanges', includeIfNull: false)
  final bool? excludePendingExchanges;
  @JsonKey(name: 'IncludeContainersOnly', includeIfNull: false)
  final bool? includeContainersOnly;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderUnitId', includeIfNull: false)
  final String? orderUnitId;
  @JsonKey(name: 'OrderTypeId', includeIfNull: false)
  final String? orderTypeId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeValueCost, includeValueCost) ||
                const DeepCollectionEquality()
                    .equals(other.includeValueCost, includeValueCost)) &&
            (identical(other.itemsToInclude, itemsToInclude) ||
                const DeepCollectionEquality()
                    .equals(other.itemsToInclude, itemsToInclude)) &&
            (identical(other.filterDates, filterDates) ||
                const DeepCollectionEquality()
                    .equals(other.filterDates, filterDates)) &&
            (identical(other.includeFullImages, includeFullImages) ||
                const DeepCollectionEquality()
                    .equals(other.includeFullImages, includeFullImages)) &&
            (identical(other.includeThumbnailImages, includeThumbnailImages) ||
                const DeepCollectionEquality().equals(
                    other.includeThumbnailImages, includeThumbnailImages)) &&
            (identical(other.excludePendingExchanges, excludePendingExchanges) ||
                const DeepCollectionEquality().equals(
                    other.excludePendingExchanges, excludePendingExchanges)) &&
            (identical(other.includeContainersOnly, includeContainersOnly) ||
                const DeepCollectionEquality().equals(
                    other.includeContainersOnly, includeContainersOnly)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderUnitId, orderUnitId) ||
                const DeepCollectionEquality()
                    .equals(other.orderUnitId, orderUnitId)) &&
            (identical(other.orderTypeId, orderTypeId) ||
                const DeepCollectionEquality().equals(other.orderTypeId, orderTypeId)) &&
            (identical(other.orderId, orderId) || const DeepCollectionEquality().equals(other.orderId, orderId)) &&
            (identical(other.contractId, contractId) || const DeepCollectionEquality().equals(other.contractId, contractId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) || const DeepCollectionEquality().equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) || const DeepCollectionEquality().equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) || const DeepCollectionEquality().equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) || const DeepCollectionEquality().equals(other.inventoryId, inventoryId)) &&
            (identical(other.sortBy, sortBy) || const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeValueCost) ^
      const DeepCollectionEquality().hash(itemsToInclude) ^
      const DeepCollectionEquality().hash(filterDates) ^
      const DeepCollectionEquality().hash(includeFullImages) ^
      const DeepCollectionEquality().hash(includeThumbnailImages) ^
      const DeepCollectionEquality().hash(excludePendingExchanges) ^
      const DeepCollectionEquality().hash(includeContainersOnly) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderUnitId) ^
      const DeepCollectionEquality().hash(orderTypeId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequestExtension
    on WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest {
  WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          String? includeValueCost,
          String? itemsToInclude,
          bool? filterDates,
          bool? includeFullImages,
          bool? includeThumbnailImages,
          bool? excludePendingExchanges,
          bool? includeContainersOnly,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? orderUnitId,
          String? orderTypeId,
          String? orderId,
          String? contractId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeValueCost: includeValueCost ?? this.includeValueCost,
        itemsToInclude: itemsToInclude ?? this.itemsToInclude,
        filterDates: filterDates ?? this.filterDates,
        includeFullImages: includeFullImages ?? this.includeFullImages,
        includeThumbnailImages:
            includeThumbnailImages ?? this.includeThumbnailImages,
        excludePendingExchanges:
            excludePendingExchanges ?? this.excludePendingExchanges,
        includeContainersOnly:
            includeContainersOnly ?? this.includeContainersOnly,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderUnitId: orderUnitId ?? this.orderUnitId,
        orderTypeId: orderTypeId ?? this.orderTypeId,
        orderId: orderId ?? this.orderId,
        contractId: contractId ?? this.contractId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<String?>? includeValueCost,
          Wrapped<String?>? itemsToInclude,
          Wrapped<bool?>? filterDates,
          Wrapped<bool?>? includeFullImages,
          Wrapped<bool?>? includeThumbnailImages,
          Wrapped<bool?>? excludePendingExchanges,
          Wrapped<bool?>? includeContainersOnly,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? orderUnitId,
          Wrapped<String?>? orderTypeId,
          Wrapped<String?>? orderId,
          Wrapped<String?>? contractId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        includeValueCost: (includeValueCost != null
            ? includeValueCost.value
            : this.includeValueCost),
        itemsToInclude: (itemsToInclude != null
            ? itemsToInclude.value
            : this.itemsToInclude),
        filterDates:
            (filterDates != null ? filterDates.value : this.filterDates),
        includeFullImages: (includeFullImages != null
            ? includeFullImages.value
            : this.includeFullImages),
        includeThumbnailImages: (includeThumbnailImages != null
            ? includeThumbnailImages.value
            : this.includeThumbnailImages),
        excludePendingExchanges: (excludePendingExchanges != null
            ? excludePendingExchanges.value
            : this.excludePendingExchanges),
        includeContainersOnly: (includeContainersOnly != null
            ? includeContainersOnly.value
            : this.includeContainersOnly),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        orderUnitId:
            (orderUnitId != null ? orderUnitId.value : this.orderUnitId),
        orderTypeId:
            (orderTypeId != null ? orderTypeId.value : this.orderTypeId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        contractId: (contractId != null ? contractId.value : this.contractId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest {
  WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest({
    this.filterDatesOrderCreate,
    this.orderCreateFromDate,
    this.orderCreateToDate,
    this.filterDatesOrderStart,
    this.orderStartFromDate,
    this.orderStartToDate,
    this.filterDatesDealCredit,
    this.dealCreditFromDate,
    this.dealCreditToDate,
    this.filterDatesDealInsurance,
    this.dealInsuranceFromDate,
    this.dealInsuranceToDate,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealTypeId,
    this.dealStatusId,
    this.dealId,
    this.noCharge,
    this.orderType,
    this.quoteStatus,
    this.orderStatus,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequestToJson(
          this);

  @JsonKey(name: 'FilterDatesOrderCreate', includeIfNull: false)
  final bool? filterDatesOrderCreate;
  @JsonKey(name: 'OrderCreateFromDate', includeIfNull: false)
  final DateTime? orderCreateFromDate;
  @JsonKey(name: 'OrderCreateToDate', includeIfNull: false)
  final DateTime? orderCreateToDate;
  @JsonKey(name: 'FilterDatesOrderStart', includeIfNull: false)
  final bool? filterDatesOrderStart;
  @JsonKey(name: 'OrderStartFromDate', includeIfNull: false)
  final DateTime? orderStartFromDate;
  @JsonKey(name: 'OrderStartToDate', includeIfNull: false)
  final DateTime? orderStartToDate;
  @JsonKey(name: 'FilterDatesDealCredit', includeIfNull: false)
  final bool? filterDatesDealCredit;
  @JsonKey(name: 'DealCreditFromDate', includeIfNull: false)
  final DateTime? dealCreditFromDate;
  @JsonKey(name: 'DealCreditToDate', includeIfNull: false)
  final DateTime? dealCreditToDate;
  @JsonKey(name: 'FilterDatesDealInsurance', includeIfNull: false)
  final bool? filterDatesDealInsurance;
  @JsonKey(name: 'DealInsuranceFromDate', includeIfNull: false)
  final DateTime? dealInsuranceFromDate;
  @JsonKey(name: 'DealInsuranceToDate', includeIfNull: false)
  final DateTime? dealInsuranceToDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealStatusId', includeIfNull: false)
  final String? dealStatusId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'NoCharge', includeIfNull: false)
  final String? noCharge;
  @JsonKey(
      name: 'OrderType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderType;
  @JsonKey(
      name: 'QuoteStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? quoteStatus;
  @JsonKey(
      name: 'OrderStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderStatus;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest &&
            (identical(other.filterDatesOrderCreate, filterDatesOrderCreate) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesOrderCreate, filterDatesOrderCreate)) &&
            (identical(other.orderCreateFromDate, orderCreateFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.orderCreateFromDate, orderCreateFromDate)) &&
            (identical(other.orderCreateToDate, orderCreateToDate) ||
                const DeepCollectionEquality()
                    .equals(other.orderCreateToDate, orderCreateToDate)) &&
            (identical(other.filterDatesOrderStart, filterDatesOrderStart) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesOrderStart, filterDatesOrderStart)) &&
            (identical(other.orderStartFromDate, orderStartFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.orderStartFromDate, orderStartFromDate)) &&
            (identical(other.orderStartToDate, orderStartToDate) ||
                const DeepCollectionEquality()
                    .equals(other.orderStartToDate, orderStartToDate)) &&
            (identical(other.filterDatesDealCredit, filterDatesDealCredit) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesDealCredit, filterDatesDealCredit)) &&
            (identical(other.dealCreditFromDate, dealCreditFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.dealCreditFromDate, dealCreditFromDate)) &&
            (identical(other.dealCreditToDate, dealCreditToDate) ||
                const DeepCollectionEquality()
                    .equals(other.dealCreditToDate, dealCreditToDate)) &&
            (identical(other.filterDatesDealInsurance, filterDatesDealInsurance) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesDealInsurance,
                    filterDatesDealInsurance)) &&
            (identical(other.dealInsuranceFromDate, dealInsuranceFromDate) ||
                const DeepCollectionEquality().equals(
                    other.dealInsuranceFromDate, dealInsuranceFromDate)) &&
            (identical(other.dealInsuranceToDate, dealInsuranceToDate) ||
                const DeepCollectionEquality()
                    .equals(other.dealInsuranceToDate, dealInsuranceToDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) || const DeepCollectionEquality().equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) || const DeepCollectionEquality().equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealStatusId, dealStatusId) || const DeepCollectionEquality().equals(other.dealStatusId, dealStatusId)) &&
            (identical(other.dealId, dealId) || const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.noCharge, noCharge) || const DeepCollectionEquality().equals(other.noCharge, noCharge)) &&
            (identical(other.orderType, orderType) || const DeepCollectionEquality().equals(other.orderType, orderType)) &&
            (identical(other.quoteStatus, quoteStatus) || const DeepCollectionEquality().equals(other.quoteStatus, quoteStatus)) &&
            (identical(other.orderStatus, orderStatus) || const DeepCollectionEquality().equals(other.orderStatus, orderStatus)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(filterDatesOrderCreate) ^
      const DeepCollectionEquality().hash(orderCreateFromDate) ^
      const DeepCollectionEquality().hash(orderCreateToDate) ^
      const DeepCollectionEquality().hash(filterDatesOrderStart) ^
      const DeepCollectionEquality().hash(orderStartFromDate) ^
      const DeepCollectionEquality().hash(orderStartToDate) ^
      const DeepCollectionEquality().hash(filterDatesDealCredit) ^
      const DeepCollectionEquality().hash(dealCreditFromDate) ^
      const DeepCollectionEquality().hash(dealCreditToDate) ^
      const DeepCollectionEquality().hash(filterDatesDealInsurance) ^
      const DeepCollectionEquality().hash(dealInsuranceFromDate) ^
      const DeepCollectionEquality().hash(dealInsuranceToDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealStatusId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(noCharge) ^
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(quoteStatus) ^
      const DeepCollectionEquality().hash(orderStatus) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequestExtension
    on WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest {
  WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest
      copyWith(
          {bool? filterDatesOrderCreate,
          DateTime? orderCreateFromDate,
          DateTime? orderCreateToDate,
          bool? filterDatesOrderStart,
          DateTime? orderStartFromDate,
          DateTime? orderStartToDate,
          bool? filterDatesDealCredit,
          DateTime? dealCreditFromDate,
          DateTime? dealCreditToDate,
          bool? filterDatesDealInsurance,
          DateTime? dealInsuranceFromDate,
          DateTime? dealInsuranceToDate,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealTypeId,
          String? dealStatusId,
          String? dealId,
          String? noCharge,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderType,
          List<FwStandardModelsSelectedCheckBoxListItem>? quoteStatus,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderStatus,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest(
        filterDatesOrderCreate:
            filterDatesOrderCreate ?? this.filterDatesOrderCreate,
        orderCreateFromDate: orderCreateFromDate ?? this.orderCreateFromDate,
        orderCreateToDate: orderCreateToDate ?? this.orderCreateToDate,
        filterDatesOrderStart:
            filterDatesOrderStart ?? this.filterDatesOrderStart,
        orderStartFromDate: orderStartFromDate ?? this.orderStartFromDate,
        orderStartToDate: orderStartToDate ?? this.orderStartToDate,
        filterDatesDealCredit:
            filterDatesDealCredit ?? this.filterDatesDealCredit,
        dealCreditFromDate: dealCreditFromDate ?? this.dealCreditFromDate,
        dealCreditToDate: dealCreditToDate ?? this.dealCreditToDate,
        filterDatesDealInsurance:
            filterDatesDealInsurance ?? this.filterDatesDealInsurance,
        dealInsuranceFromDate:
            dealInsuranceFromDate ?? this.dealInsuranceFromDate,
        dealInsuranceToDate: dealInsuranceToDate ?? this.dealInsuranceToDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealStatusId: dealStatusId ?? this.dealStatusId,
        dealId: dealId ?? this.dealId,
        noCharge: noCharge ?? this.noCharge,
        orderType: orderType ?? this.orderType,
        quoteStatus: quoteStatus ?? this.quoteStatus,
        orderStatus: orderStatus ?? this.orderStatus,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest
      copyWithWrapped(
          {Wrapped<bool?>? filterDatesOrderCreate,
          Wrapped<DateTime?>? orderCreateFromDate,
          Wrapped<DateTime?>? orderCreateToDate,
          Wrapped<bool?>? filterDatesOrderStart,
          Wrapped<DateTime?>? orderStartFromDate,
          Wrapped<DateTime?>? orderStartToDate,
          Wrapped<bool?>? filterDatesDealCredit,
          Wrapped<DateTime?>? dealCreditFromDate,
          Wrapped<DateTime?>? dealCreditToDate,
          Wrapped<bool?>? filterDatesDealInsurance,
          Wrapped<DateTime?>? dealInsuranceFromDate,
          Wrapped<DateTime?>? dealInsuranceToDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealTypeId,
          Wrapped<String?>? dealStatusId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? noCharge,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? orderType,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? quoteStatus,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? orderStatus,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest(
        filterDatesOrderCreate: (filterDatesOrderCreate != null
            ? filterDatesOrderCreate.value
            : this.filterDatesOrderCreate),
        orderCreateFromDate: (orderCreateFromDate != null
            ? orderCreateFromDate.value
            : this.orderCreateFromDate),
        orderCreateToDate: (orderCreateToDate != null
            ? orderCreateToDate.value
            : this.orderCreateToDate),
        filterDatesOrderStart: (filterDatesOrderStart != null
            ? filterDatesOrderStart.value
            : this.filterDatesOrderStart),
        orderStartFromDate: (orderStartFromDate != null
            ? orderStartFromDate.value
            : this.orderStartFromDate),
        orderStartToDate: (orderStartToDate != null
            ? orderStartToDate.value
            : this.orderStartToDate),
        filterDatesDealCredit: (filterDatesDealCredit != null
            ? filterDatesDealCredit.value
            : this.filterDatesDealCredit),
        dealCreditFromDate: (dealCreditFromDate != null
            ? dealCreditFromDate.value
            : this.dealCreditFromDate),
        dealCreditToDate: (dealCreditToDate != null
            ? dealCreditToDate.value
            : this.dealCreditToDate),
        filterDatesDealInsurance: (filterDatesDealInsurance != null
            ? filterDatesDealInsurance.value
            : this.filterDatesDealInsurance),
        dealInsuranceFromDate: (dealInsuranceFromDate != null
            ? dealInsuranceFromDate.value
            : this.dealInsuranceFromDate),
        dealInsuranceToDate: (dealInsuranceToDate != null
            ? dealInsuranceToDate.value
            : this.dealInsuranceToDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealTypeId: (dealTypeId != null ? dealTypeId.value : this.dealTypeId),
        dealStatusId:
            (dealStatusId != null ? dealStatusId.value : this.dealStatusId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        noCharge: (noCharge != null ? noCharge.value : this.noCharge),
        orderType: (orderType != null ? orderType.value : this.orderType),
        quoteStatus:
            (quoteStatus != null ? quoteStatus.value : this.quoteStatus),
        orderStatus:
            (orderStatus != null ? orderStatus.value : this.orderStatus),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest {
  WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest({
    this.fromDate,
    this.toDate,
    this.onlyIncludeItemsStillUnassigned,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.categoryId,
    this.inventoryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OnlyIncludeItemsStillUnassigned', includeIfNull: false)
  final bool? onlyIncludeItemsStillUnassigned;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.onlyIncludeItemsStillUnassigned, onlyIncludeItemsStillUnassigned) ||
                const DeepCollectionEquality().equals(
                    other.onlyIncludeItemsStillUnassigned,
                    onlyIncludeItemsStillUnassigned)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(onlyIncludeItemsStillUnassigned) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequestExtension
    on WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest {
  WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? onlyIncludeItemsStillUnassigned,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? categoryId,
          String? inventoryId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        onlyIncludeItemsStillUnassigned: onlyIncludeItemsStillUnassigned ??
            this.onlyIncludeItemsStillUnassigned,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<bool?>? onlyIncludeItemsStillUnassigned,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        onlyIncludeItemsStillUnassigned:
            (onlyIncludeItemsStillUnassigned != null
                ? onlyIncludeItemsStillUnassigned.value
                : this.onlyIncludeItemsStillUnassigned),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest {
  WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest({
    this.asOfDate,
    this.ranks,
    this.trackedBys,
    this.excludeFullyDepreciated,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequestToJson(
          this);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'ExcludeFullyDepreciated', includeIfNull: false)
  final bool? excludeFullyDepreciated;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.excludeFullyDepreciated, excludeFullyDepreciated) ||
                const DeepCollectionEquality().equals(
                    other.excludeFullyDepreciated, excludeFullyDepreciated)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(excludeFullyDepreciated) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequestExtension
    on WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest {
  WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest copyWith(
      {DateTime? asOfDate,
      List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
      List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
      bool? excludeFullyDepreciated,
      String? warehouseId,
      String? inventoryTypeId,
      String? categoryId,
      String? subCategoryId,
      String? inventoryId,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        excludeFullyDepreciated:
            excludeFullyDepreciated ?? this.excludeFullyDepreciated,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? asOfDate,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<bool?>? excludeFullyDepreciated,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest(
        asOfDate: (asOfDate != null ? asOfDate.value : this.asOfDate),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        excludeFullyDepreciated: (excludeFullyDepreciated != null
            ? excludeFullyDepreciated.value
            : this.excludeFullyDepreciated),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest {
  WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequestExtension
    on WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest {
  WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest {
  WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequestExtension
    on WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest {
  WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest copyWith(
      {DateTime? fromDate,
      DateTime? toDate,
      String? officeLocationId,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsIncomeGlDetailReportIncomeGlDetailReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest {
  WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest({
    this.inDeliveryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequestToJson(
          this);

  @JsonKey(name: 'InDeliveryId', includeIfNull: false)
  final String? inDeliveryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest &&
            (identical(other.inDeliveryId, inDeliveryId) ||
                const DeepCollectionEquality()
                    .equals(other.inDeliveryId, inDeliveryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(inDeliveryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequestExtension
    on WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest {
  WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest
      copyWith(
          {String? inDeliveryId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest(
        inDeliveryId: inDeliveryId ?? this.inDeliveryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest
      copyWithWrapped(
          {Wrapped<String?>? inDeliveryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest(
        inDeliveryId:
            (inDeliveryId != null ? inDeliveryId.value : this.inDeliveryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest {
  WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.changeType,
    this.fixedAsset,
    this.ranks,
    this.trackedBys,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'ChangeType', includeIfNull: false)
  final String? changeType;
  @JsonKey(
    name: 'FixedAsset',
    includeIfNull: false,
    toJson: webApiIncludeExcludeAllToJson,
    fromJson: webApiIncludeExcludeAllFromJson,
  )
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.changeType, changeType) ||
                const DeepCollectionEquality()
                    .equals(other.changeType, changeType)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(changeType) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequestExtension
    on WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest {
  WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? changeType,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        changeType: changeType ?? this.changeType,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? changeType,
          Wrapped<enums.WebApiIncludeExcludeAll?>? fixedAsset,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        changeType: (changeType != null ? changeType.value : this.changeType),
        fixedAsset: (fixedAsset != null ? fixedAsset.value : this.fixedAsset),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest {
  WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.fixedAsset,
    this.ranks,
    this.trackedBys,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
    name: 'FixedAsset',
    includeIfNull: false,
    toJson: webApiIncludeExcludeAllToJson,
    fromJson: webApiIncludeExcludeAllFromJson,
  )
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequestExtension
    on WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest {
  WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<enums.WebApiIncludeExcludeAll?>? fixedAsset,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        fixedAsset: (fixedAsset != null ? fixedAsset.value : this.fixedAsset),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest {
  WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.fromWarehouseId,
    this.toWarehouseId,
    this.departmentId,
    this.transferId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.statuses,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'FromWarehouseId', includeIfNull: false)
  final String? fromWarehouseId;
  @JsonKey(name: 'ToWarehouseId', includeIfNull: false)
  final String? toWarehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'TransferId', includeIfNull: false)
  final String? transferId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.fromWarehouseId, fromWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.fromWarehouseId, fromWarehouseId)) &&
            (identical(other.toWarehouseId, toWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.toWarehouseId, toWarehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.transferId, transferId) ||
                const DeepCollectionEquality()
                    .equals(other.transferId, transferId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(fromWarehouseId) ^
      const DeepCollectionEquality().hash(toWarehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(transferId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequestExtension
    on WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest {
  WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          String? fromWarehouseId,
          String? toWarehouseId,
          String? departmentId,
          String? transferId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        fromWarehouseId: fromWarehouseId ?? this.fromWarehouseId,
        toWarehouseId: toWarehouseId ?? this.toWarehouseId,
        departmentId: departmentId ?? this.departmentId,
        transferId: transferId ?? this.transferId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        statuses: statuses ?? this.statuses,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<String?>? fromWarehouseId,
          Wrapped<String?>? toWarehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? transferId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        fromWarehouseId: (fromWarehouseId != null
            ? fromWarehouseId.value
            : this.fromWarehouseId),
        toWarehouseId:
            (toWarehouseId != null ? toWarehouseId.value : this.toWarehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        transferId: (transferId != null ? transferId.value : this.transferId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        statuses: (statuses != null ? statuses.value : this.statuses),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest {
  WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest({
    this.orderId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequestToJson(
          this);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequestExtension
    on WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest {
  WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest
      copyWith(
          {String? orderId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest(
        orderId: orderId ?? this.orderId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest
      copyWithWrapped(
          {Wrapped<String?>? orderId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest(
        orderId: (orderId != null ? orderId.value : this.orderId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest {
  WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest({
    this.orderType,
    this.view,
    this.searchDatesBy,
    this.fromDate,
    this.toDate,
    this.statuses,
    this.activities,
    this.warehouseId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.inventoryTypeId,
    this.inventoryId,
    this.categoryId,
    this.subCategoryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequestToJson(
          this);

  @JsonKey(name: 'OrderType', includeIfNull: false)
  final String? orderType;
  @JsonKey(name: 'View', includeIfNull: false)
  final String? view;
  @JsonKey(
      name: 'SearchDatesBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? searchDatesBy;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final String? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final String? toDate;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(
      name: 'Activities',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? activities;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest &&
            (identical(other.orderType, orderType) ||
                const DeepCollectionEquality()
                    .equals(other.orderType, orderType)) &&
            (identical(other.view, view) ||
                const DeepCollectionEquality().equals(other.view, view)) &&
            (identical(other.searchDatesBy, searchDatesBy) ||
                const DeepCollectionEquality()
                    .equals(other.searchDatesBy, searchDatesBy)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.activities, activities) ||
                const DeepCollectionEquality()
                    .equals(other.activities, activities)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(view) ^
      const DeepCollectionEquality().hash(searchDatesBy) ^
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(activities) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequestExtension
    on WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest {
  WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest
      copyWith(
          {String? orderType,
          String? view,
          List<FwStandardModelsSelectedCheckBoxListItem>? searchDatesBy,
          String? fromDate,
          String? toDate,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          List<FwStandardModelsSelectedCheckBoxListItem>? activities,
          String? warehouseId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? inventoryTypeId,
          String? inventoryId,
          String? categoryId,
          String? subCategoryId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest(
        orderType: orderType ?? this.orderType,
        view: view ?? this.view,
        searchDatesBy: searchDatesBy ?? this.searchDatesBy,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        statuses: statuses ?? this.statuses,
        activities: activities ?? this.activities,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        inventoryId: inventoryId ?? this.inventoryId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest
      copyWithWrapped(
          {Wrapped<String?>? orderType,
          Wrapped<String?>? view,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              searchDatesBy,
          Wrapped<String?>? fromDate,
          Wrapped<String?>? toDate,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? activities,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsInventoryStatusByOrderReportInventoryStatusByOrderReportRequest(
        orderType: (orderType != null ? orderType.value : this.orderType),
        view: (view != null ? view.value : this.view),
        searchDatesBy:
            (searchDatesBy != null ? searchDatesBy.value : this.searchDatesBy),
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        statuses: (statuses != null ? statuses.value : this.statuses),
        activities: (activities != null ? activities.value : this.activities),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest {
  WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest({
    this.reportType,
    this.days,
    this.dueBackDate,
    this.officeLocationId,
    this.warehouseId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.inventoryTypeId,
    this.orderedByContactId,
    this.orderId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequestToJson(
          this);

  @JsonKey(name: 'ReportType', includeIfNull: false)
  final String? reportType;
  @JsonKey(name: 'Days', includeIfNull: false)
  final int? days;
  @JsonKey(name: 'DueBackDate', includeIfNull: false)
  final DateTime? dueBackDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'OrderedByContactId', includeIfNull: false)
  final String? orderedByContactId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest &&
            (identical(other.reportType, reportType) ||
                const DeepCollectionEquality()
                    .equals(other.reportType, reportType)) &&
            (identical(other.days, days) ||
                const DeepCollectionEquality().equals(other.days, days)) &&
            (identical(other.dueBackDate, dueBackDate) ||
                const DeepCollectionEquality()
                    .equals(other.dueBackDate, dueBackDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.orderedByContactId, orderedByContactId) ||
                const DeepCollectionEquality()
                    .equals(other.orderedByContactId, orderedByContactId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(reportType) ^
      const DeepCollectionEquality().hash(days) ^
      const DeepCollectionEquality().hash(dueBackDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(orderedByContactId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequestExtension
    on WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest {
  WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest
      copyWith(
          {String? reportType,
          int? days,
          DateTime? dueBackDate,
          String? officeLocationId,
          String? warehouseId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? inventoryTypeId,
          String? orderedByContactId,
          String? orderId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest(
        reportType: reportType ?? this.reportType,
        days: days ?? this.days,
        dueBackDate: dueBackDate ?? this.dueBackDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        orderedByContactId: orderedByContactId ?? this.orderedByContactId,
        orderId: orderId ?? this.orderId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest
      copyWithWrapped(
          {Wrapped<String?>? reportType,
          Wrapped<int?>? days,
          Wrapped<DateTime?>? dueBackDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? orderedByContactId,
          Wrapped<String?>? orderId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest(
        reportType: (reportType != null ? reportType.value : this.reportType),
        days: (days != null ? days.value : this.days),
        dueBackDate:
            (dueBackDate != null ? dueBackDate.value : this.dueBackDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        orderedByContactId: (orderedByContactId != null
            ? orderedByContactId.value
            : this.orderedByContactId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest {
  WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest({
    this.fromDate,
    this.toDate,
    this.availableFor,
    this.conflictType,
    this.warehouseId,
    this.departmentId,
    this.dealId,
    this.orderId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.classifications,
    this.ranks,
    this.trackedBys,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'AvailableFor', includeIfNull: false)
  final String? availableFor;
  @JsonKey(name: 'ConflictType', includeIfNull: false)
  final String? conflictType;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Classifications',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? classifications;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.availableFor, availableFor) ||
                const DeepCollectionEquality()
                    .equals(other.availableFor, availableFor)) &&
            (identical(other.conflictType, conflictType) ||
                const DeepCollectionEquality()
                    .equals(other.conflictType, conflictType)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.classifications, classifications) ||
                const DeepCollectionEquality()
                    .equals(other.classifications, classifications)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(availableFor) ^
      const DeepCollectionEquality().hash(conflictType) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(classifications) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequestExtension
    on WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest {
  WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? availableFor,
          String? conflictType,
          String? warehouseId,
          String? departmentId,
          String? dealId,
          String? orderId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? classifications,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        availableFor: availableFor ?? this.availableFor,
        conflictType: conflictType ?? this.conflictType,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        classifications: classifications ?? this.classifications,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? availableFor,
          Wrapped<String?>? conflictType,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? orderId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              classifications,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        availableFor:
            (availableFor != null ? availableFor.value : this.availableFor),
        conflictType:
            (conflictType != null ? conflictType.value : this.conflictType),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        classifications: (classifications != null
            ? classifications.value
            : this.classifications),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOrderReportOrderReportRequest {
  WebApiModulesReportsOrderReportsOrderReportOrderReportRequest({
    this.orderId,
    this.id,
    this.reportView,
    this.printEntireGroup,
    this.printInventoryType,
    this.printCategory,
    this.printTotalReplacementCost,
    this.printInventoryTypeSubTotal,
    this.printCategorySubTotal,
    this.printZeroExtended,
    this.printLineItemNotes,
    this.printSplitLines,
    this.printGrandTotal,
    this.printGrossTotal,
    this.printGrandDiscount,
    this.printGrandWeekly,
    this.printGrandMonthly,
    this.printGrandPeriod,
    this.printGrandHiatus,
    this.printActivityWeekly,
    this.printActivityMonthly,
    this.printActivityPeriod,
    this.languageId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsOrderReportOrderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOrderReportOrderReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderReportOrderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOrderReportOrderReportRequestToJson(
          this);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'Id', includeIfNull: false)
  final String? id;
  @JsonKey(
    name: 'ReportView',
    includeIfNull: false,
    toJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeToJson,
    fromJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson,
  )
  final enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
      reportView;
  @JsonKey(name: 'PrintEntireGroup', includeIfNull: false)
  final bool? printEntireGroup;
  @JsonKey(name: 'PrintInventoryType', includeIfNull: false)
  final bool? printInventoryType;
  @JsonKey(name: 'PrintCategory', includeIfNull: false)
  final bool? printCategory;
  @JsonKey(name: 'PrintTotalReplacementCost', includeIfNull: false)
  final bool? printTotalReplacementCost;
  @JsonKey(name: 'PrintInventoryTypeSubTotal', includeIfNull: false)
  final bool? printInventoryTypeSubTotal;
  @JsonKey(name: 'PrintCategorySubTotal', includeIfNull: false)
  final bool? printCategorySubTotal;
  @JsonKey(name: 'PrintZeroExtended', includeIfNull: false)
  final bool? printZeroExtended;
  @JsonKey(name: 'PrintLineItemNotes', includeIfNull: false)
  final bool? printLineItemNotes;
  @JsonKey(name: 'PrintSplitLines', includeIfNull: false)
  final bool? printSplitLines;
  @JsonKey(name: 'PrintGrandTotal', includeIfNull: false)
  final bool? printGrandTotal;
  @JsonKey(name: 'PrintGrossTotal', includeIfNull: false)
  final bool? printGrossTotal;
  @JsonKey(name: 'PrintGrandDiscount', includeIfNull: false)
  final bool? printGrandDiscount;
  @JsonKey(name: 'PrintGrandWeekly', includeIfNull: false)
  final bool? printGrandWeekly;
  @JsonKey(name: 'PrintGrandMonthly', includeIfNull: false)
  final bool? printGrandMonthly;
  @JsonKey(name: 'PrintGrandPeriod', includeIfNull: false)
  final bool? printGrandPeriod;
  @JsonKey(name: 'PrintGrandHiatus', includeIfNull: false)
  final bool? printGrandHiatus;
  @JsonKey(name: 'PrintActivityWeekly', includeIfNull: false)
  final bool? printActivityWeekly;
  @JsonKey(name: 'PrintActivityMonthly', includeIfNull: false)
  final bool? printActivityMonthly;
  @JsonKey(name: 'PrintActivityPeriod', includeIfNull: false)
  final bool? printActivityPeriod;
  @JsonKey(name: 'LanguageId', includeIfNull: false)
  final String? languageId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderReportOrderReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOrderReportOrderReportRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.reportView, reportView) ||
                const DeepCollectionEquality()
                    .equals(other.reportView, reportView)) &&
            (identical(other.printEntireGroup, printEntireGroup) ||
                const DeepCollectionEquality()
                    .equals(other.printEntireGroup, printEntireGroup)) &&
            (identical(other.printInventoryType, printInventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.printInventoryType, printInventoryType)) &&
            (identical(other.printCategory, printCategory) ||
                const DeepCollectionEquality()
                    .equals(other.printCategory, printCategory)) &&
            (identical(other.printTotalReplacementCost, printTotalReplacementCost) ||
                const DeepCollectionEquality().equals(
                    other.printTotalReplacementCost,
                    printTotalReplacementCost)) &&
            (identical(other.printInventoryTypeSubTotal, printInventoryTypeSubTotal) ||
                const DeepCollectionEquality().equals(
                    other.printInventoryTypeSubTotal,
                    printInventoryTypeSubTotal)) &&
            (identical(other.printCategorySubTotal, printCategorySubTotal) ||
                const DeepCollectionEquality().equals(
                    other.printCategorySubTotal, printCategorySubTotal)) &&
            (identical(other.printZeroExtended, printZeroExtended) ||
                const DeepCollectionEquality()
                    .equals(other.printZeroExtended, printZeroExtended)) &&
            (identical(other.printLineItemNotes, printLineItemNotes) ||
                const DeepCollectionEquality()
                    .equals(other.printLineItemNotes, printLineItemNotes)) &&
            (identical(other.printSplitLines, printSplitLines) ||
                const DeepCollectionEquality()
                    .equals(other.printSplitLines, printSplitLines)) &&
            (identical(other.printGrandTotal, printGrandTotal) ||
                const DeepCollectionEquality().equals(other.printGrandTotal, printGrandTotal)) &&
            (identical(other.printGrossTotal, printGrossTotal) || const DeepCollectionEquality().equals(other.printGrossTotal, printGrossTotal)) &&
            (identical(other.printGrandDiscount, printGrandDiscount) || const DeepCollectionEquality().equals(other.printGrandDiscount, printGrandDiscount)) &&
            (identical(other.printGrandWeekly, printGrandWeekly) || const DeepCollectionEquality().equals(other.printGrandWeekly, printGrandWeekly)) &&
            (identical(other.printGrandMonthly, printGrandMonthly) || const DeepCollectionEquality().equals(other.printGrandMonthly, printGrandMonthly)) &&
            (identical(other.printGrandPeriod, printGrandPeriod) || const DeepCollectionEquality().equals(other.printGrandPeriod, printGrandPeriod)) &&
            (identical(other.printGrandHiatus, printGrandHiatus) || const DeepCollectionEquality().equals(other.printGrandHiatus, printGrandHiatus)) &&
            (identical(other.printActivityWeekly, printActivityWeekly) || const DeepCollectionEquality().equals(other.printActivityWeekly, printActivityWeekly)) &&
            (identical(other.printActivityMonthly, printActivityMonthly) || const DeepCollectionEquality().equals(other.printActivityMonthly, printActivityMonthly)) &&
            (identical(other.printActivityPeriod, printActivityPeriod) || const DeepCollectionEquality().equals(other.printActivityPeriod, printActivityPeriod)) &&
            (identical(other.languageId, languageId) || const DeepCollectionEquality().equals(other.languageId, languageId)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(id) ^
      const DeepCollectionEquality().hash(reportView) ^
      const DeepCollectionEquality().hash(printEntireGroup) ^
      const DeepCollectionEquality().hash(printInventoryType) ^
      const DeepCollectionEquality().hash(printCategory) ^
      const DeepCollectionEquality().hash(printTotalReplacementCost) ^
      const DeepCollectionEquality().hash(printInventoryTypeSubTotal) ^
      const DeepCollectionEquality().hash(printCategorySubTotal) ^
      const DeepCollectionEquality().hash(printZeroExtended) ^
      const DeepCollectionEquality().hash(printLineItemNotes) ^
      const DeepCollectionEquality().hash(printSplitLines) ^
      const DeepCollectionEquality().hash(printGrandTotal) ^
      const DeepCollectionEquality().hash(printGrossTotal) ^
      const DeepCollectionEquality().hash(printGrandDiscount) ^
      const DeepCollectionEquality().hash(printGrandWeekly) ^
      const DeepCollectionEquality().hash(printGrandMonthly) ^
      const DeepCollectionEquality().hash(printGrandPeriod) ^
      const DeepCollectionEquality().hash(printGrandHiatus) ^
      const DeepCollectionEquality().hash(printActivityWeekly) ^
      const DeepCollectionEquality().hash(printActivityMonthly) ^
      const DeepCollectionEquality().hash(printActivityPeriod) ^
      const DeepCollectionEquality().hash(languageId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOrderReportOrderReportRequestExtension
    on WebApiModulesReportsOrderReportsOrderReportOrderReportRequest {
  WebApiModulesReportsOrderReportsOrderReportOrderReportRequest copyWith(
      {String? orderId,
      String? id,
      enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
          reportView,
      bool? printEntireGroup,
      bool? printInventoryType,
      bool? printCategory,
      bool? printTotalReplacementCost,
      bool? printInventoryTypeSubTotal,
      bool? printCategorySubTotal,
      bool? printZeroExtended,
      bool? printLineItemNotes,
      bool? printSplitLines,
      bool? printGrandTotal,
      bool? printGrossTotal,
      bool? printGrandDiscount,
      bool? printGrandWeekly,
      bool? printGrandMonthly,
      bool? printGrandPeriod,
      bool? printGrandHiatus,
      bool? printActivityWeekly,
      bool? printActivityMonthly,
      bool? printActivityPeriod,
      String? languageId,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOrderReportOrderReportRequest(
        orderId: orderId ?? this.orderId,
        id: id ?? this.id,
        reportView: reportView ?? this.reportView,
        printEntireGroup: printEntireGroup ?? this.printEntireGroup,
        printInventoryType: printInventoryType ?? this.printInventoryType,
        printCategory: printCategory ?? this.printCategory,
        printTotalReplacementCost:
            printTotalReplacementCost ?? this.printTotalReplacementCost,
        printInventoryTypeSubTotal:
            printInventoryTypeSubTotal ?? this.printInventoryTypeSubTotal,
        printCategorySubTotal:
            printCategorySubTotal ?? this.printCategorySubTotal,
        printZeroExtended: printZeroExtended ?? this.printZeroExtended,
        printLineItemNotes: printLineItemNotes ?? this.printLineItemNotes,
        printSplitLines: printSplitLines ?? this.printSplitLines,
        printGrandTotal: printGrandTotal ?? this.printGrandTotal,
        printGrossTotal: printGrossTotal ?? this.printGrossTotal,
        printGrandDiscount: printGrandDiscount ?? this.printGrandDiscount,
        printGrandWeekly: printGrandWeekly ?? this.printGrandWeekly,
        printGrandMonthly: printGrandMonthly ?? this.printGrandMonthly,
        printGrandPeriod: printGrandPeriod ?? this.printGrandPeriod,
        printGrandHiatus: printGrandHiatus ?? this.printGrandHiatus,
        printActivityWeekly: printActivityWeekly ?? this.printActivityWeekly,
        printActivityMonthly: printActivityMonthly ?? this.printActivityMonthly,
        printActivityPeriod: printActivityPeriod ?? this.printActivityPeriod,
        languageId: languageId ?? this.languageId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsOrderReportOrderReportRequest copyWithWrapped(
      {Wrapped<String?>? orderId,
      Wrapped<String?>? id,
      Wrapped<enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?>?
          reportView,
      Wrapped<bool?>? printEntireGroup,
      Wrapped<bool?>? printInventoryType,
      Wrapped<bool?>? printCategory,
      Wrapped<bool?>? printTotalReplacementCost,
      Wrapped<bool?>? printInventoryTypeSubTotal,
      Wrapped<bool?>? printCategorySubTotal,
      Wrapped<bool?>? printZeroExtended,
      Wrapped<bool?>? printLineItemNotes,
      Wrapped<bool?>? printSplitLines,
      Wrapped<bool?>? printGrandTotal,
      Wrapped<bool?>? printGrossTotal,
      Wrapped<bool?>? printGrandDiscount,
      Wrapped<bool?>? printGrandWeekly,
      Wrapped<bool?>? printGrandMonthly,
      Wrapped<bool?>? printGrandPeriod,
      Wrapped<bool?>? printGrandHiatus,
      Wrapped<bool?>? printActivityWeekly,
      Wrapped<bool?>? printActivityMonthly,
      Wrapped<bool?>? printActivityPeriod,
      Wrapped<String?>? languageId,
      Wrapped<String?>? userDepartmentId,
      Wrapped<String?>? userLocationId,
      Wrapped<String?>? userWarehouseId,
      Wrapped<String?>? customReportLayoutId,
      Wrapped<bool?>? isSummary,
      Wrapped<bool?>? includeSubHeadingsAndSubTotals,
      Wrapped<bool?>? includeIdColumns,
      Wrapped<String?>? locale,
      Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
      Wrapped<String?>? reportName,
      Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOrderReportOrderReportRequest(
        orderId: (orderId != null ? orderId.value : this.orderId),
        id: (id != null ? id.value : this.id),
        reportView: (reportView != null ? reportView.value : this.reportView),
        printEntireGroup: (printEntireGroup != null
            ? printEntireGroup.value
            : this.printEntireGroup),
        printInventoryType: (printInventoryType != null
            ? printInventoryType.value
            : this.printInventoryType),
        printCategory:
            (printCategory != null ? printCategory.value : this.printCategory),
        printTotalReplacementCost: (printTotalReplacementCost != null
            ? printTotalReplacementCost.value
            : this.printTotalReplacementCost),
        printInventoryTypeSubTotal: (printInventoryTypeSubTotal != null
            ? printInventoryTypeSubTotal.value
            : this.printInventoryTypeSubTotal),
        printCategorySubTotal: (printCategorySubTotal != null
            ? printCategorySubTotal.value
            : this.printCategorySubTotal),
        printZeroExtended: (printZeroExtended != null
            ? printZeroExtended.value
            : this.printZeroExtended),
        printLineItemNotes: (printLineItemNotes != null
            ? printLineItemNotes.value
            : this.printLineItemNotes),
        printSplitLines: (printSplitLines != null
            ? printSplitLines.value
            : this.printSplitLines),
        printGrandTotal: (printGrandTotal != null
            ? printGrandTotal.value
            : this.printGrandTotal),
        printGrossTotal: (printGrossTotal != null
            ? printGrossTotal.value
            : this.printGrossTotal),
        printGrandDiscount: (printGrandDiscount != null
            ? printGrandDiscount.value
            : this.printGrandDiscount),
        printGrandWeekly: (printGrandWeekly != null
            ? printGrandWeekly.value
            : this.printGrandWeekly),
        printGrandMonthly: (printGrandMonthly != null
            ? printGrandMonthly.value
            : this.printGrandMonthly),
        printGrandPeriod: (printGrandPeriod != null
            ? printGrandPeriod.value
            : this.printGrandPeriod),
        printGrandHiatus: (printGrandHiatus != null
            ? printGrandHiatus.value
            : this.printGrandHiatus),
        printActivityWeekly: (printActivityWeekly != null
            ? printActivityWeekly.value
            : this.printActivityWeekly),
        printActivityMonthly: (printActivityMonthly != null
            ? printActivityMonthly.value
            : this.printActivityMonthly),
        printActivityPeriod: (printActivityPeriod != null
            ? printActivityPeriod.value
            : this.printActivityPeriod),
        languageId: (languageId != null ? languageId.value : this.languageId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest {
  WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest({
    this.orderId,
    this.view,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequestToJson(
          this);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'View', includeIfNull: false)
  final String? view;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.view, view) ||
                const DeepCollectionEquality().equals(other.view, view)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(view) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequestExtension
    on WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest {
  WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest
      copyWith(
          {String? orderId,
          String? view,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest(
        orderId: orderId ?? this.orderId,
        view: view ?? this.view,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest
      copyWithWrapped(
          {Wrapped<String?>? orderId,
          Wrapped<String?>? view,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest(
        orderId: (orderId != null ? orderId.value : this.orderId),
        view: (view != null ? view.value : this.view),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest {
  WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest({
    this.orderId,
    this.view,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequestToJson(
          this);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'View', includeIfNull: false)
  final String? view;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.view, view) ||
                const DeepCollectionEquality().equals(other.view, view)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(view) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequestExtension
    on WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest {
  WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest
      copyWith(
          {String? orderId,
          String? view,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest(
        orderId: orderId ?? this.orderId,
        view: view ?? this.view,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest
      copyWithWrapped(
          {Wrapped<String?>? orderId,
          Wrapped<String?>? view,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest(
        orderId: (orderId != null ? orderId.value : this.orderId),
        view: (view != null ? view.value : this.view),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest {
  WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest({
    this.orderId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequestToJson(
          this);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequestExtension
    on WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest {
  WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest
      copyWith(
          {String? orderId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest(
        orderId: orderId ?? this.orderId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest
      copyWithWrapped(
          {Wrapped<String?>? orderId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest(
        orderId: (orderId != null ? orderId.value : this.orderId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest {
  WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest({
    this.warehouseId,
    this.departmentId,
    this.customerId,
    this.dealTypeId,
    this.dealId,
    this.vendorId,
    this.categoryId,
    this.inventoryId,
    this.onlyIncludeICodesWithQuantityAvail,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequestToJson(
          this);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'OnlyIncludeICodesWithQuantityAvail', includeIfNull: false)
  final bool? onlyIncludeICodesWithQuantityAvail;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.onlyIncludeICodesWithQuantityAvail, onlyIncludeICodesWithQuantityAvail) ||
                const DeepCollectionEquality().equals(
                    other.onlyIncludeICodesWithQuantityAvail,
                    onlyIncludeICodesWithQuantityAvail)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(onlyIncludeICodesWithQuantityAvail) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequestExtension
    on WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest {
  WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest
      copyWith(
          {String? warehouseId,
          String? departmentId,
          String? customerId,
          String? dealTypeId,
          String? dealId,
          String? vendorId,
          String? categoryId,
          String? inventoryId,
          bool? onlyIncludeICodesWithQuantityAvail,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest(
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealId: dealId ?? this.dealId,
        vendorId: vendorId ?? this.vendorId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        onlyIncludeICodesWithQuantityAvail:
            onlyIncludeICodesWithQuantityAvail ??
                this.onlyIncludeICodesWithQuantityAvail,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest
      copyWithWrapped(
          {Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealTypeId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? vendorId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<bool?>? onlyIncludeICodesWithQuantityAvail,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest(
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealTypeId: (dealTypeId != null ? dealTypeId.value : this.dealTypeId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        onlyIncludeICodesWithQuantityAvail:
            (onlyIncludeICodesWithQuantityAvail != null
                ? onlyIncludeICodesWithQuantityAvail.value
                : this.onlyIncludeICodesWithQuantityAvail),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsPickListReportPickListReportRequest {
  WebApiModulesReportsOrderReportsPickListReportPickListReportRequest({
    this.pickListId,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsPickListReportPickListReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsPickListReportPickListReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsPickListReportPickListReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsPickListReportPickListReportRequestToJson(
          this);

  @JsonKey(name: 'PickListId', includeIfNull: false)
  final String? pickListId;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsPickListReportPickListReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsPickListReportPickListReportRequest &&
            (identical(other.pickListId, pickListId) ||
                const DeepCollectionEquality()
                    .equals(other.pickListId, pickListId)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(pickListId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsPickListReportPickListReportRequestExtension
    on WebApiModulesReportsOrderReportsPickListReportPickListReportRequest {
  WebApiModulesReportsOrderReportsPickListReportPickListReportRequest copyWith(
      {String? pickListId,
      List<FwStandardModelsCheckBoxListItem>? sortBy,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsPickListReportPickListReportRequest(
        pickListId: pickListId ?? this.pickListId,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsPickListReportPickListReportRequest
      copyWithWrapped(
          {Wrapped<String?>? pickListId,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsPickListReportPickListReportRequest(
        pickListId: (pickListId != null ? pickListId.value : this.pickListId),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest {
  WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest({
    this.fromDate,
    this.toDate,
    this.orderType,
    this.warehouseId,
    this.departmentId,
    this.activityTypeId,
    this.inventoryTypeId,
    this.agentId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(
      name: 'OrderType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderType;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final String? activityTypeId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.orderType, orderType) ||
                const DeepCollectionEquality()
                    .equals(other.orderType, orderType)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(activityTypeId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequestExtension
    on WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest {
  WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderType,
          String? warehouseId,
          String? departmentId,
          String? activityTypeId,
          String? inventoryTypeId,
          String? agentId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        orderType: orderType ?? this.orderType,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        agentId: agentId ?? this.agentId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? orderType,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? activityTypeId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? agentId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        orderType: (orderType != null ? orderType.value : this.orderType),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        activityTypeId: (activityTypeId != null
            ? activityTypeId.value
            : this.activityTypeId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        agentId: (agentId != null ? agentId.value : this.agentId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest {
  WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.filterDates,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealTypeId,
    this.dealStatusId,
    this.dealId,
    this.agentId,
    this.orderType,
    this.quoteStatus,
    this.orderStatus,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'FilterDates', includeIfNull: false)
  final bool? filterDates;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealStatusId', includeIfNull: false)
  final String? dealStatusId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(
      name: 'OrderType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderType;
  @JsonKey(
      name: 'QuoteStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? quoteStatus;
  @JsonKey(
      name: 'OrderStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderStatus;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.filterDates, filterDates) ||
                const DeepCollectionEquality()
                    .equals(other.filterDates, filterDates)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealStatusId, dealStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.dealStatusId, dealStatusId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.orderType, orderType) ||
                const DeepCollectionEquality()
                    .equals(other.orderType, orderType)) &&
            (identical(other.quoteStatus, quoteStatus) ||
                const DeepCollectionEquality()
                    .equals(other.quoteStatus, quoteStatus)) &&
            (identical(other.orderStatus, orderStatus) ||
                const DeepCollectionEquality()
                    .equals(other.orderStatus, orderStatus)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(filterDates) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealStatusId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(quoteStatus) ^
      const DeepCollectionEquality().hash(orderStatus) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequestExtension
    on WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest {
  WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? filterDates,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealTypeId,
          String? dealStatusId,
          String? dealId,
          String? agentId,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderType,
          List<FwStandardModelsSelectedCheckBoxListItem>? quoteStatus,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderStatus,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        filterDates: filterDates ?? this.filterDates,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealStatusId: dealStatusId ?? this.dealStatusId,
        dealId: dealId ?? this.dealId,
        agentId: agentId ?? this.agentId,
        orderType: orderType ?? this.orderType,
        quoteStatus: quoteStatus ?? this.quoteStatus,
        orderStatus: orderStatus ?? this.orderStatus,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<bool?>? filterDates,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealTypeId,
          Wrapped<String?>? dealStatusId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? agentId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? orderType,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? quoteStatus,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? orderStatus,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        filterDates:
            (filterDates != null ? filterDates.value : this.filterDates),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealTypeId: (dealTypeId != null ? dealTypeId.value : this.dealTypeId),
        dealStatusId:
            (dealStatusId != null ? dealStatusId.value : this.dealStatusId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        agentId: (agentId != null ? agentId.value : this.agentId),
        orderType: (orderType != null ? orderType.value : this.orderType),
        quoteStatus:
            (quoteStatus != null ? quoteStatus.value : this.quoteStatus),
        orderStatus:
            (orderStatus != null ? orderStatus.value : this.orderStatus),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest {
  WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest({
    this.quoteId,
    this.id,
    this.reportView,
    this.printEntireGroup,
    this.printInventoryType,
    this.printCategory,
    this.printTotalReplacementCost,
    this.printInventoryTypeSubTotal,
    this.printCategorySubTotal,
    this.printZeroExtended,
    this.printLineItemNotes,
    this.printSplitLines,
    this.printGrandTotal,
    this.printGrossTotal,
    this.printGrandDiscount,
    this.printGrandWeekly,
    this.printGrandMonthly,
    this.printGrandPeriod,
    this.printGrandHiatus,
    this.printActivityWeekly,
    this.printActivityMonthly,
    this.printActivityPeriod,
    this.languageId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequestToJson(
          this);

  @JsonKey(name: 'QuoteId', includeIfNull: false)
  final String? quoteId;
  @JsonKey(name: 'Id', includeIfNull: false)
  final String? id;
  @JsonKey(
    name: 'ReportView',
    includeIfNull: false,
    toJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeToJson,
    fromJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson,
  )
  final enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
      reportView;
  @JsonKey(name: 'PrintEntireGroup', includeIfNull: false)
  final bool? printEntireGroup;
  @JsonKey(name: 'PrintInventoryType', includeIfNull: false)
  final bool? printInventoryType;
  @JsonKey(name: 'PrintCategory', includeIfNull: false)
  final bool? printCategory;
  @JsonKey(name: 'PrintTotalReplacementCost', includeIfNull: false)
  final bool? printTotalReplacementCost;
  @JsonKey(name: 'PrintInventoryTypeSubTotal', includeIfNull: false)
  final bool? printInventoryTypeSubTotal;
  @JsonKey(name: 'PrintCategorySubTotal', includeIfNull: false)
  final bool? printCategorySubTotal;
  @JsonKey(name: 'PrintZeroExtended', includeIfNull: false)
  final bool? printZeroExtended;
  @JsonKey(name: 'PrintLineItemNotes', includeIfNull: false)
  final bool? printLineItemNotes;
  @JsonKey(name: 'PrintSplitLines', includeIfNull: false)
  final bool? printSplitLines;
  @JsonKey(name: 'PrintGrandTotal', includeIfNull: false)
  final bool? printGrandTotal;
  @JsonKey(name: 'PrintGrossTotal', includeIfNull: false)
  final bool? printGrossTotal;
  @JsonKey(name: 'PrintGrandDiscount', includeIfNull: false)
  final bool? printGrandDiscount;
  @JsonKey(name: 'PrintGrandWeekly', includeIfNull: false)
  final bool? printGrandWeekly;
  @JsonKey(name: 'PrintGrandMonthly', includeIfNull: false)
  final bool? printGrandMonthly;
  @JsonKey(name: 'PrintGrandPeriod', includeIfNull: false)
  final bool? printGrandPeriod;
  @JsonKey(name: 'PrintGrandHiatus', includeIfNull: false)
  final bool? printGrandHiatus;
  @JsonKey(name: 'PrintActivityWeekly', includeIfNull: false)
  final bool? printActivityWeekly;
  @JsonKey(name: 'PrintActivityMonthly', includeIfNull: false)
  final bool? printActivityMonthly;
  @JsonKey(name: 'PrintActivityPeriod', includeIfNull: false)
  final bool? printActivityPeriod;
  @JsonKey(name: 'LanguageId', includeIfNull: false)
  final String? languageId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest &&
            (identical(other.quoteId, quoteId) ||
                const DeepCollectionEquality()
                    .equals(other.quoteId, quoteId)) &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.reportView, reportView) ||
                const DeepCollectionEquality()
                    .equals(other.reportView, reportView)) &&
            (identical(other.printEntireGroup, printEntireGroup) ||
                const DeepCollectionEquality()
                    .equals(other.printEntireGroup, printEntireGroup)) &&
            (identical(other.printInventoryType, printInventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.printInventoryType, printInventoryType)) &&
            (identical(other.printCategory, printCategory) ||
                const DeepCollectionEquality()
                    .equals(other.printCategory, printCategory)) &&
            (identical(other.printTotalReplacementCost, printTotalReplacementCost) ||
                const DeepCollectionEquality().equals(
                    other.printTotalReplacementCost,
                    printTotalReplacementCost)) &&
            (identical(other.printInventoryTypeSubTotal, printInventoryTypeSubTotal) ||
                const DeepCollectionEquality().equals(
                    other.printInventoryTypeSubTotal,
                    printInventoryTypeSubTotal)) &&
            (identical(other.printCategorySubTotal, printCategorySubTotal) ||
                const DeepCollectionEquality().equals(
                    other.printCategorySubTotal, printCategorySubTotal)) &&
            (identical(other.printZeroExtended, printZeroExtended) ||
                const DeepCollectionEquality()
                    .equals(other.printZeroExtended, printZeroExtended)) &&
            (identical(other.printLineItemNotes, printLineItemNotes) ||
                const DeepCollectionEquality()
                    .equals(other.printLineItemNotes, printLineItemNotes)) &&
            (identical(other.printSplitLines, printSplitLines) ||
                const DeepCollectionEquality()
                    .equals(other.printSplitLines, printSplitLines)) &&
            (identical(other.printGrandTotal, printGrandTotal) ||
                const DeepCollectionEquality().equals(other.printGrandTotal, printGrandTotal)) &&
            (identical(other.printGrossTotal, printGrossTotal) || const DeepCollectionEquality().equals(other.printGrossTotal, printGrossTotal)) &&
            (identical(other.printGrandDiscount, printGrandDiscount) || const DeepCollectionEquality().equals(other.printGrandDiscount, printGrandDiscount)) &&
            (identical(other.printGrandWeekly, printGrandWeekly) || const DeepCollectionEquality().equals(other.printGrandWeekly, printGrandWeekly)) &&
            (identical(other.printGrandMonthly, printGrandMonthly) || const DeepCollectionEquality().equals(other.printGrandMonthly, printGrandMonthly)) &&
            (identical(other.printGrandPeriod, printGrandPeriod) || const DeepCollectionEquality().equals(other.printGrandPeriod, printGrandPeriod)) &&
            (identical(other.printGrandHiatus, printGrandHiatus) || const DeepCollectionEquality().equals(other.printGrandHiatus, printGrandHiatus)) &&
            (identical(other.printActivityWeekly, printActivityWeekly) || const DeepCollectionEquality().equals(other.printActivityWeekly, printActivityWeekly)) &&
            (identical(other.printActivityMonthly, printActivityMonthly) || const DeepCollectionEquality().equals(other.printActivityMonthly, printActivityMonthly)) &&
            (identical(other.printActivityPeriod, printActivityPeriod) || const DeepCollectionEquality().equals(other.printActivityPeriod, printActivityPeriod)) &&
            (identical(other.languageId, languageId) || const DeepCollectionEquality().equals(other.languageId, languageId)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(quoteId) ^
      const DeepCollectionEquality().hash(id) ^
      const DeepCollectionEquality().hash(reportView) ^
      const DeepCollectionEquality().hash(printEntireGroup) ^
      const DeepCollectionEquality().hash(printInventoryType) ^
      const DeepCollectionEquality().hash(printCategory) ^
      const DeepCollectionEquality().hash(printTotalReplacementCost) ^
      const DeepCollectionEquality().hash(printInventoryTypeSubTotal) ^
      const DeepCollectionEquality().hash(printCategorySubTotal) ^
      const DeepCollectionEquality().hash(printZeroExtended) ^
      const DeepCollectionEquality().hash(printLineItemNotes) ^
      const DeepCollectionEquality().hash(printSplitLines) ^
      const DeepCollectionEquality().hash(printGrandTotal) ^
      const DeepCollectionEquality().hash(printGrossTotal) ^
      const DeepCollectionEquality().hash(printGrandDiscount) ^
      const DeepCollectionEquality().hash(printGrandWeekly) ^
      const DeepCollectionEquality().hash(printGrandMonthly) ^
      const DeepCollectionEquality().hash(printGrandPeriod) ^
      const DeepCollectionEquality().hash(printGrandHiatus) ^
      const DeepCollectionEquality().hash(printActivityWeekly) ^
      const DeepCollectionEquality().hash(printActivityMonthly) ^
      const DeepCollectionEquality().hash(printActivityPeriod) ^
      const DeepCollectionEquality().hash(languageId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequestExtension
    on WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest {
  WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest copyWith(
      {String? quoteId,
      String? id,
      enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
          reportView,
      bool? printEntireGroup,
      bool? printInventoryType,
      bool? printCategory,
      bool? printTotalReplacementCost,
      bool? printInventoryTypeSubTotal,
      bool? printCategorySubTotal,
      bool? printZeroExtended,
      bool? printLineItemNotes,
      bool? printSplitLines,
      bool? printGrandTotal,
      bool? printGrossTotal,
      bool? printGrandDiscount,
      bool? printGrandWeekly,
      bool? printGrandMonthly,
      bool? printGrandPeriod,
      bool? printGrandHiatus,
      bool? printActivityWeekly,
      bool? printActivityMonthly,
      bool? printActivityPeriod,
      String? languageId,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest(
        quoteId: quoteId ?? this.quoteId,
        id: id ?? this.id,
        reportView: reportView ?? this.reportView,
        printEntireGroup: printEntireGroup ?? this.printEntireGroup,
        printInventoryType: printInventoryType ?? this.printInventoryType,
        printCategory: printCategory ?? this.printCategory,
        printTotalReplacementCost:
            printTotalReplacementCost ?? this.printTotalReplacementCost,
        printInventoryTypeSubTotal:
            printInventoryTypeSubTotal ?? this.printInventoryTypeSubTotal,
        printCategorySubTotal:
            printCategorySubTotal ?? this.printCategorySubTotal,
        printZeroExtended: printZeroExtended ?? this.printZeroExtended,
        printLineItemNotes: printLineItemNotes ?? this.printLineItemNotes,
        printSplitLines: printSplitLines ?? this.printSplitLines,
        printGrandTotal: printGrandTotal ?? this.printGrandTotal,
        printGrossTotal: printGrossTotal ?? this.printGrossTotal,
        printGrandDiscount: printGrandDiscount ?? this.printGrandDiscount,
        printGrandWeekly: printGrandWeekly ?? this.printGrandWeekly,
        printGrandMonthly: printGrandMonthly ?? this.printGrandMonthly,
        printGrandPeriod: printGrandPeriod ?? this.printGrandPeriod,
        printGrandHiatus: printGrandHiatus ?? this.printGrandHiatus,
        printActivityWeekly: printActivityWeekly ?? this.printActivityWeekly,
        printActivityMonthly: printActivityMonthly ?? this.printActivityMonthly,
        printActivityPeriod: printActivityPeriod ?? this.printActivityPeriod,
        languageId: languageId ?? this.languageId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest copyWithWrapped(
      {Wrapped<String?>? quoteId,
      Wrapped<String?>? id,
      Wrapped<enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?>?
          reportView,
      Wrapped<bool?>? printEntireGroup,
      Wrapped<bool?>? printInventoryType,
      Wrapped<bool?>? printCategory,
      Wrapped<bool?>? printTotalReplacementCost,
      Wrapped<bool?>? printInventoryTypeSubTotal,
      Wrapped<bool?>? printCategorySubTotal,
      Wrapped<bool?>? printZeroExtended,
      Wrapped<bool?>? printLineItemNotes,
      Wrapped<bool?>? printSplitLines,
      Wrapped<bool?>? printGrandTotal,
      Wrapped<bool?>? printGrossTotal,
      Wrapped<bool?>? printGrandDiscount,
      Wrapped<bool?>? printGrandWeekly,
      Wrapped<bool?>? printGrandMonthly,
      Wrapped<bool?>? printGrandPeriod,
      Wrapped<bool?>? printGrandHiatus,
      Wrapped<bool?>? printActivityWeekly,
      Wrapped<bool?>? printActivityMonthly,
      Wrapped<bool?>? printActivityPeriod,
      Wrapped<String?>? languageId,
      Wrapped<String?>? userDepartmentId,
      Wrapped<String?>? userLocationId,
      Wrapped<String?>? userWarehouseId,
      Wrapped<String?>? customReportLayoutId,
      Wrapped<bool?>? isSummary,
      Wrapped<bool?>? includeSubHeadingsAndSubTotals,
      Wrapped<bool?>? includeIdColumns,
      Wrapped<String?>? locale,
      Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
      Wrapped<String?>? reportName,
      Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest(
        quoteId: (quoteId != null ? quoteId.value : this.quoteId),
        id: (id != null ? id.value : this.id),
        reportView: (reportView != null ? reportView.value : this.reportView),
        printEntireGroup: (printEntireGroup != null
            ? printEntireGroup.value
            : this.printEntireGroup),
        printInventoryType: (printInventoryType != null
            ? printInventoryType.value
            : this.printInventoryType),
        printCategory:
            (printCategory != null ? printCategory.value : this.printCategory),
        printTotalReplacementCost: (printTotalReplacementCost != null
            ? printTotalReplacementCost.value
            : this.printTotalReplacementCost),
        printInventoryTypeSubTotal: (printInventoryTypeSubTotal != null
            ? printInventoryTypeSubTotal.value
            : this.printInventoryTypeSubTotal),
        printCategorySubTotal: (printCategorySubTotal != null
            ? printCategorySubTotal.value
            : this.printCategorySubTotal),
        printZeroExtended: (printZeroExtended != null
            ? printZeroExtended.value
            : this.printZeroExtended),
        printLineItemNotes: (printLineItemNotes != null
            ? printLineItemNotes.value
            : this.printLineItemNotes),
        printSplitLines: (printSplitLines != null
            ? printSplitLines.value
            : this.printSplitLines),
        printGrandTotal: (printGrandTotal != null
            ? printGrandTotal.value
            : this.printGrandTotal),
        printGrossTotal: (printGrossTotal != null
            ? printGrossTotal.value
            : this.printGrossTotal),
        printGrandDiscount: (printGrandDiscount != null
            ? printGrandDiscount.value
            : this.printGrandDiscount),
        printGrandWeekly: (printGrandWeekly != null
            ? printGrandWeekly.value
            : this.printGrandWeekly),
        printGrandMonthly: (printGrandMonthly != null
            ? printGrandMonthly.value
            : this.printGrandMonthly),
        printGrandPeriod: (printGrandPeriod != null
            ? printGrandPeriod.value
            : this.printGrandPeriod),
        printGrandHiatus: (printGrandHiatus != null
            ? printGrandHiatus.value
            : this.printGrandHiatus),
        printActivityWeekly: (printActivityWeekly != null
            ? printActivityWeekly.value
            : this.printActivityWeekly),
        printActivityMonthly: (printActivityMonthly != null
            ? printActivityMonthly.value
            : this.printActivityMonthly),
        printActivityPeriod: (printActivityPeriod != null
            ? printActivityPeriod.value
            : this.printActivityPeriod),
        languageId: (languageId != null ? languageId.value : this.languageId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest {
  WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.officeLocationId,
    this.departmentId,
    this.agentId,
    this.customerId,
    this.dealId,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequestExtension
    on WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest {
  WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          String? officeLocationId,
          String? departmentId,
          String? agentId,
          String? customerId,
          String? dealId,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<bool?>? includeNoCharge,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? agentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        includeNoCharge: (includeNoCharge != null
            ? includeNoCharge.value
            : this.includeNoCharge),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        agentId: (agentId != null ? agentId.value : this.agentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest {
  WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest({
    this.orderId,
    this.rentalValue,
    this.weightInCase,
    this.excludeZeroValueItems,
    this.filterBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequestToJson(
          this);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'RentalValue', includeIfNull: false)
  final String? rentalValue;
  @JsonKey(name: 'WeightInCase', includeIfNull: false)
  final bool? weightInCase;
  @JsonKey(name: 'ExcludeZeroValueItems', includeIfNull: false)
  final bool? excludeZeroValueItems;
  @JsonKey(name: 'FilterBy', includeIfNull: false)
  final String? filterBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.rentalValue, rentalValue) ||
                const DeepCollectionEquality()
                    .equals(other.rentalValue, rentalValue)) &&
            (identical(other.weightInCase, weightInCase) ||
                const DeepCollectionEquality()
                    .equals(other.weightInCase, weightInCase)) &&
            (identical(other.excludeZeroValueItems, excludeZeroValueItems) ||
                const DeepCollectionEquality().equals(
                    other.excludeZeroValueItems, excludeZeroValueItems)) &&
            (identical(other.filterBy, filterBy) ||
                const DeepCollectionEquality()
                    .equals(other.filterBy, filterBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(rentalValue) ^
      const DeepCollectionEquality().hash(weightInCase) ^
      const DeepCollectionEquality().hash(excludeZeroValueItems) ^
      const DeepCollectionEquality().hash(filterBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequestExtension
    on WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest {
  WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest
      copyWith(
          {String? orderId,
          String? rentalValue,
          bool? weightInCase,
          bool? excludeZeroValueItems,
          String? filterBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest(
        orderId: orderId ?? this.orderId,
        rentalValue: rentalValue ?? this.rentalValue,
        weightInCase: weightInCase ?? this.weightInCase,
        excludeZeroValueItems:
            excludeZeroValueItems ?? this.excludeZeroValueItems,
        filterBy: filterBy ?? this.filterBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest
      copyWithWrapped(
          {Wrapped<String?>? orderId,
          Wrapped<String?>? rentalValue,
          Wrapped<bool?>? weightInCase,
          Wrapped<bool?>? excludeZeroValueItems,
          Wrapped<String?>? filterBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest(
        orderId: (orderId != null ? orderId.value : this.orderId),
        rentalValue:
            (rentalValue != null ? rentalValue.value : this.rentalValue),
        weightInCase:
            (weightInCase != null ? weightInCase.value : this.weightInCase),
        excludeZeroValueItems: (excludeZeroValueItems != null
            ? excludeZeroValueItems.value
            : this.excludeZeroValueItems),
        filterBy: (filterBy != null ? filterBy.value : this.filterBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest {
  WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest({
    this.outDeliveryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequestToJson(
          this);

  @JsonKey(name: 'OutDeliveryId', includeIfNull: false)
  final String? outDeliveryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest &&
            (identical(other.outDeliveryId, outDeliveryId) ||
                const DeepCollectionEquality()
                    .equals(other.outDeliveryId, outDeliveryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(outDeliveryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequestExtension
    on WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest {
  WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest
      copyWith(
          {String? outDeliveryId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest(
        outDeliveryId: outDeliveryId ?? this.outDeliveryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest
      copyWithWrapped(
          {Wrapped<String?>? outDeliveryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest(
        outDeliveryId:
            (outDeliveryId != null ? outDeliveryId.value : this.outDeliveryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest {
  WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest({
    this.reorderPointMode,
    this.includeZeroReorderPoint,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequestToJson(
          this);

  @JsonKey(name: 'ReorderPointMode', includeIfNull: false)
  final String? reorderPointMode;
  @JsonKey(name: 'IncludeZeroReorderPoint', includeIfNull: false)
  final bool? includeZeroReorderPoint;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest &&
            (identical(other.reorderPointMode, reorderPointMode) ||
                const DeepCollectionEquality()
                    .equals(other.reorderPointMode, reorderPointMode)) &&
            (identical(other.includeZeroReorderPoint, includeZeroReorderPoint) ||
                const DeepCollectionEquality().equals(
                    other.includeZeroReorderPoint, includeZeroReorderPoint)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(reorderPointMode) ^
      const DeepCollectionEquality().hash(includeZeroReorderPoint) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequestExtension
    on WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest {
  WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest
      copyWith(
          {String? reorderPointMode,
          bool? includeZeroReorderPoint,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest(
        reorderPointMode: reorderPointMode ?? this.reorderPointMode,
        includeZeroReorderPoint:
            includeZeroReorderPoint ?? this.includeZeroReorderPoint,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest
      copyWithWrapped(
          {Wrapped<String?>? reorderPointMode,
          Wrapped<bool?>? includeZeroReorderPoint,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest(
        reorderPointMode: (reorderPointMode != null
            ? reorderPointMode.value
            : this.reorderPointMode),
        includeZeroReorderPoint: (includeZeroReorderPoint != null
            ? includeZeroReorderPoint.value
            : this.includeZeroReorderPoint),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest({
    this.physicalInventoryId,
    this.warehouseId,
    this.spaceIds,
    this.inventoryDepartmentIds,
    this.categoryIds,
    this.masterIds,
    this.isSpace,
    this.isRecount,
    this.includeCompleteKits,
    this.includeCompleteKitReferences,
    this.excludeOptionalAccessories,
    this.trackedBys,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequestToJson(
          this);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(name: 'IsSpace', includeIfNull: false)
  final bool? isSpace;
  @JsonKey(name: 'isRecount', includeIfNull: false)
  final bool? isRecount;
  @JsonKey(name: 'IncludeCompleteKits', includeIfNull: false)
  final bool? includeCompleteKits;
  @JsonKey(name: 'IncludeCompleteKitReferences', includeIfNull: false)
  final bool? includeCompleteKitReferences;
  @JsonKey(name: 'ExcludeOptionalAccessories', includeIfNull: false)
  final bool? excludeOptionalAccessories;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.isSpace, isSpace) ||
                const DeepCollectionEquality()
                    .equals(other.isSpace, isSpace)) &&
            (identical(other.isRecount, isRecount) ||
                const DeepCollectionEquality()
                    .equals(other.isRecount, isRecount)) &&
            (identical(other.includeCompleteKits, includeCompleteKits) ||
                const DeepCollectionEquality()
                    .equals(other.includeCompleteKits, includeCompleteKits)) &&
            (identical(other.includeCompleteKitReferences, includeCompleteKitReferences) ||
                const DeepCollectionEquality().equals(
                    other.includeCompleteKitReferences,
                    includeCompleteKitReferences)) &&
            (identical(other.excludeOptionalAccessories, excludeOptionalAccessories) ||
                const DeepCollectionEquality().equals(
                    other.excludeOptionalAccessories,
                    excludeOptionalAccessories)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(isSpace) ^
      const DeepCollectionEquality().hash(isRecount) ^
      const DeepCollectionEquality().hash(includeCompleteKits) ^
      const DeepCollectionEquality().hash(includeCompleteKitReferences) ^
      const DeepCollectionEquality().hash(excludeOptionalAccessories) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest
      copyWith(
          {String? physicalInventoryId,
          String? warehouseId,
          String? spaceIds,
          String? inventoryDepartmentIds,
          String? categoryIds,
          String? masterIds,
          bool? isSpace,
          bool? isRecount,
          bool? includeCompleteKits,
          bool? includeCompleteKitReferences,
          bool? excludeOptionalAccessories,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        warehouseId: warehouseId ?? this.warehouseId,
        spaceIds: spaceIds ?? this.spaceIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        categoryIds: categoryIds ?? this.categoryIds,
        masterIds: masterIds ?? this.masterIds,
        isSpace: isSpace ?? this.isSpace,
        isRecount: isRecount ?? this.isRecount,
        includeCompleteKits: includeCompleteKits ?? this.includeCompleteKits,
        includeCompleteKitReferences:
            includeCompleteKitReferences ?? this.includeCompleteKitReferences,
        excludeOptionalAccessories:
            excludeOptionalAccessories ?? this.excludeOptionalAccessories,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest
      copyWithWrapped(
          {Wrapped<String?>? physicalInventoryId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? spaceIds,
          Wrapped<String?>? inventoryDepartmentIds,
          Wrapped<String?>? categoryIds,
          Wrapped<String?>? masterIds,
          Wrapped<bool?>? isSpace,
          Wrapped<bool?>? isRecount,
          Wrapped<bool?>? includeCompleteKits,
          Wrapped<bool?>? includeCompleteKitReferences,
          Wrapped<bool?>? excludeOptionalAccessories,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? trackedBys,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest(
        physicalInventoryId: (physicalInventoryId != null
            ? physicalInventoryId.value
            : this.physicalInventoryId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        spaceIds: (spaceIds != null ? spaceIds.value : this.spaceIds),
        inventoryDepartmentIds: (inventoryDepartmentIds != null
            ? inventoryDepartmentIds.value
            : this.inventoryDepartmentIds),
        categoryIds:
            (categoryIds != null ? categoryIds.value : this.categoryIds),
        masterIds: (masterIds != null ? masterIds.value : this.masterIds),
        isSpace: (isSpace != null ? isSpace.value : this.isSpace),
        isRecount: (isRecount != null ? isRecount.value : this.isRecount),
        includeCompleteKits: (includeCompleteKits != null
            ? includeCompleteKits.value
            : this.includeCompleteKits),
        includeCompleteKitReferences: (includeCompleteKitReferences != null
            ? includeCompleteKitReferences.value
            : this.includeCompleteKitReferences),
        excludeOptionalAccessories: (excludeOptionalAccessories != null
            ? excludeOptionalAccessories.value
            : this.excludeOptionalAccessories),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest({
    this.physicalInventoryId,
    this.consignorIds,
    this.categoryIds,
    this.masterIds,
    this.includeIcodesThatAreNotDiscrepancies,
    this.printBarcodeSerialNotCounted,
    this.isSpace,
    this.inventoryDepartmentIds,
    this.spaceIds,
    this.trackedBys,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequestToJson(
          this);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'ConsignorIds', includeIfNull: false)
  final String? consignorIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(name: 'IncludeIcodesThatAreNotDiscrepancies', includeIfNull: false)
  final bool? includeIcodesThatAreNotDiscrepancies;
  @JsonKey(name: 'PrintBarcodeSerialNotCounted', includeIfNull: false)
  final bool? printBarcodeSerialNotCounted;
  @JsonKey(name: 'IsSpace', includeIfNull: false)
  final bool? isSpace;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.consignorIds, consignorIds) ||
                const DeepCollectionEquality()
                    .equals(other.consignorIds, consignorIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.includeIcodesThatAreNotDiscrepancies, includeIcodesThatAreNotDiscrepancies) ||
                const DeepCollectionEquality().equals(
                    other.includeIcodesThatAreNotDiscrepancies,
                    includeIcodesThatAreNotDiscrepancies)) &&
            (identical(other.printBarcodeSerialNotCounted, printBarcodeSerialNotCounted) ||
                const DeepCollectionEquality().equals(
                    other.printBarcodeSerialNotCounted,
                    printBarcodeSerialNotCounted)) &&
            (identical(other.isSpace, isSpace) ||
                const DeepCollectionEquality()
                    .equals(other.isSpace, isSpace)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(consignorIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality()
          .hash(includeIcodesThatAreNotDiscrepancies) ^
      const DeepCollectionEquality().hash(printBarcodeSerialNotCounted) ^
      const DeepCollectionEquality().hash(isSpace) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest
      copyWith(
          {String? physicalInventoryId,
          String? consignorIds,
          String? categoryIds,
          String? masterIds,
          bool? includeIcodesThatAreNotDiscrepancies,
          bool? printBarcodeSerialNotCounted,
          bool? isSpace,
          String? inventoryDepartmentIds,
          String? spaceIds,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        consignorIds: consignorIds ?? this.consignorIds,
        categoryIds: categoryIds ?? this.categoryIds,
        masterIds: masterIds ?? this.masterIds,
        includeIcodesThatAreNotDiscrepancies:
            includeIcodesThatAreNotDiscrepancies ??
                this.includeIcodesThatAreNotDiscrepancies,
        printBarcodeSerialNotCounted:
            printBarcodeSerialNotCounted ?? this.printBarcodeSerialNotCounted,
        isSpace: isSpace ?? this.isSpace,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        spaceIds: spaceIds ?? this.spaceIds,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest
      copyWithWrapped(
          {Wrapped<String?>? physicalInventoryId,
          Wrapped<String?>? consignorIds,
          Wrapped<String?>? categoryIds,
          Wrapped<String?>? masterIds,
          Wrapped<bool?>? includeIcodesThatAreNotDiscrepancies,
          Wrapped<bool?>? printBarcodeSerialNotCounted,
          Wrapped<bool?>? isSpace,
          Wrapped<String?>? inventoryDepartmentIds,
          Wrapped<String?>? spaceIds,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? trackedBys,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest(
        physicalInventoryId: (physicalInventoryId != null
            ? physicalInventoryId.value
            : this.physicalInventoryId),
        consignorIds:
            (consignorIds != null ? consignorIds.value : this.consignorIds),
        categoryIds:
            (categoryIds != null ? categoryIds.value : this.categoryIds),
        masterIds: (masterIds != null ? masterIds.value : this.masterIds),
        includeIcodesThatAreNotDiscrepancies:
            (includeIcodesThatAreNotDiscrepancies != null
                ? includeIcodesThatAreNotDiscrepancies.value
                : this.includeIcodesThatAreNotDiscrepancies),
        printBarcodeSerialNotCounted: (printBarcodeSerialNotCounted != null
            ? printBarcodeSerialNotCounted.value
            : this.printBarcodeSerialNotCounted),
        isSpace: (isSpace != null ? isSpace.value : this.isSpace),
        inventoryDepartmentIds: (inventoryDepartmentIds != null
            ? inventoryDepartmentIds.value
            : this.inventoryDepartmentIds),
        spaceIds: (spaceIds != null ? spaceIds.value : this.spaceIds),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest({
    this.physicalInventoryId,
    this.categoryIds,
    this.inventoryDepartmentIds,
    this.spaceIds,
    this.masterIds,
    this.includeZeroOwned,
    this.trackedBys,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequestToJson(
          this);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(name: 'IncludeZeroOwned', includeIfNull: false)
  final bool? includeZeroOwned;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.includeZeroOwned, includeZeroOwned) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroOwned, includeZeroOwned)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(includeZeroOwned) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest
      copyWith(
          {String? physicalInventoryId,
          String? categoryIds,
          String? inventoryDepartmentIds,
          String? spaceIds,
          String? masterIds,
          bool? includeZeroOwned,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        categoryIds: categoryIds ?? this.categoryIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        spaceIds: spaceIds ?? this.spaceIds,
        masterIds: masterIds ?? this.masterIds,
        includeZeroOwned: includeZeroOwned ?? this.includeZeroOwned,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest
      copyWithWrapped(
          {Wrapped<String?>? physicalInventoryId,
          Wrapped<String?>? categoryIds,
          Wrapped<String?>? inventoryDepartmentIds,
          Wrapped<String?>? spaceIds,
          Wrapped<String?>? masterIds,
          Wrapped<bool?>? includeZeroOwned,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? trackedBys,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest(
        physicalInventoryId: (physicalInventoryId != null
            ? physicalInventoryId.value
            : this.physicalInventoryId),
        categoryIds:
            (categoryIds != null ? categoryIds.value : this.categoryIds),
        inventoryDepartmentIds: (inventoryDepartmentIds != null
            ? inventoryDepartmentIds.value
            : this.inventoryDepartmentIds),
        spaceIds: (spaceIds != null ? spaceIds.value : this.spaceIds),
        masterIds: (masterIds != null ? masterIds.value : this.masterIds),
        includeZeroOwned: (includeZeroOwned != null
            ? includeZeroOwned.value
            : this.includeZeroOwned),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest({
    this.physicalInventoryId,
    this.warehouseId,
    this.spaceIds,
    this.inventoryDepartmentIds,
    this.categoryIds,
    this.masterIds,
    this.trackedBys,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequestToJson(
          this);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest
      copyWith(
          {String? physicalInventoryId,
          String? warehouseId,
          String? spaceIds,
          String? inventoryDepartmentIds,
          String? categoryIds,
          String? masterIds,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        warehouseId: warehouseId ?? this.warehouseId,
        spaceIds: spaceIds ?? this.spaceIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        categoryIds: categoryIds ?? this.categoryIds,
        masterIds: masterIds ?? this.masterIds,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest
      copyWithWrapped(
          {Wrapped<String?>? physicalInventoryId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? spaceIds,
          Wrapped<String?>? inventoryDepartmentIds,
          Wrapped<String?>? categoryIds,
          Wrapped<String?>? masterIds,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? trackedBys,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest(
        physicalInventoryId: (physicalInventoryId != null
            ? physicalInventoryId.value
            : this.physicalInventoryId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        spaceIds: (spaceIds != null ? spaceIds.value : this.spaceIds),
        inventoryDepartmentIds: (inventoryDepartmentIds != null
            ? inventoryDepartmentIds.value
            : this.inventoryDepartmentIds),
        categoryIds:
            (categoryIds != null ? categoryIds.value : this.categoryIds),
        masterIds: (masterIds != null ? masterIds.value : this.masterIds),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest({
    this.physicalInventoryId,
    this.fromDate,
    this.toDate,
    this.availableFor,
    this.itemsCounted,
    this.includeOrders,
    this.includeOrderBarcodes,
    this.includeCountedBarcodes,
    this.excludeZeroCostExtended,
    this.onlyChangedItems,
    this.trackedbyIds,
    this.spaceIds,
    this.masterIds,
    this.inventoryDepartmentIds,
    this.categoryIds,
    this.trackedBys,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequestToJson(
          this);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final FwStandardSqlServerFwDateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final FwStandardSqlServerFwDateTime? toDate;
  @JsonKey(name: 'AvailableFor', includeIfNull: false)
  final String? availableFor;
  @JsonKey(name: 'ItemsCounted', includeIfNull: false)
  final bool? itemsCounted;
  @JsonKey(name: 'IncludeOrders', includeIfNull: false)
  final bool? includeOrders;
  @JsonKey(name: 'IncludeOrderBarcodes', includeIfNull: false)
  final bool? includeOrderBarcodes;
  @JsonKey(name: 'IncludeCountedBarcodes', includeIfNull: false)
  final bool? includeCountedBarcodes;
  @JsonKey(name: 'ExcludeZeroCostExtended', includeIfNull: false)
  final bool? excludeZeroCostExtended;
  @JsonKey(name: 'OnlyChangedItems', includeIfNull: false)
  final bool? onlyChangedItems;
  @JsonKey(name: 'TrackedbyIds', includeIfNull: false)
  final String? trackedbyIds;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.availableFor, availableFor) ||
                const DeepCollectionEquality()
                    .equals(other.availableFor, availableFor)) &&
            (identical(other.itemsCounted, itemsCounted) ||
                const DeepCollectionEquality()
                    .equals(other.itemsCounted, itemsCounted)) &&
            (identical(other.includeOrders, includeOrders) ||
                const DeepCollectionEquality()
                    .equals(other.includeOrders, includeOrders)) &&
            (identical(other.includeOrderBarcodes, includeOrderBarcodes) ||
                const DeepCollectionEquality().equals(
                    other.includeOrderBarcodes, includeOrderBarcodes)) &&
            (identical(other.includeCountedBarcodes, includeCountedBarcodes) ||
                const DeepCollectionEquality().equals(
                    other.includeCountedBarcodes, includeCountedBarcodes)) &&
            (identical(other.excludeZeroCostExtended, excludeZeroCostExtended) ||
                const DeepCollectionEquality().equals(
                    other.excludeZeroCostExtended, excludeZeroCostExtended)) &&
            (identical(other.onlyChangedItems, onlyChangedItems) ||
                const DeepCollectionEquality()
                    .equals(other.onlyChangedItems, onlyChangedItems)) &&
            (identical(other.trackedbyIds, trackedbyIds) ||
                const DeepCollectionEquality()
                    .equals(other.trackedbyIds, trackedbyIds)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.trackedBys, trackedBys) || const DeepCollectionEquality().equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) || const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(availableFor) ^
      const DeepCollectionEquality().hash(itemsCounted) ^
      const DeepCollectionEquality().hash(includeOrders) ^
      const DeepCollectionEquality().hash(includeOrderBarcodes) ^
      const DeepCollectionEquality().hash(includeCountedBarcodes) ^
      const DeepCollectionEquality().hash(excludeZeroCostExtended) ^
      const DeepCollectionEquality().hash(onlyChangedItems) ^
      const DeepCollectionEquality().hash(trackedbyIds) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest
      copyWith(
          {String? physicalInventoryId,
          FwStandardSqlServerFwDateTime? fromDate,
          FwStandardSqlServerFwDateTime? toDate,
          String? availableFor,
          bool? itemsCounted,
          bool? includeOrders,
          bool? includeOrderBarcodes,
          bool? includeCountedBarcodes,
          bool? excludeZeroCostExtended,
          bool? onlyChangedItems,
          String? trackedbyIds,
          String? spaceIds,
          String? masterIds,
          String? inventoryDepartmentIds,
          String? categoryIds,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        availableFor: availableFor ?? this.availableFor,
        itemsCounted: itemsCounted ?? this.itemsCounted,
        includeOrders: includeOrders ?? this.includeOrders,
        includeOrderBarcodes: includeOrderBarcodes ?? this.includeOrderBarcodes,
        includeCountedBarcodes:
            includeCountedBarcodes ?? this.includeCountedBarcodes,
        excludeZeroCostExtended:
            excludeZeroCostExtended ?? this.excludeZeroCostExtended,
        onlyChangedItems: onlyChangedItems ?? this.onlyChangedItems,
        trackedbyIds: trackedbyIds ?? this.trackedbyIds,
        spaceIds: spaceIds ?? this.spaceIds,
        masterIds: masterIds ?? this.masterIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        categoryIds: categoryIds ?? this.categoryIds,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest
      copyWithWrapped(
          {Wrapped<String?>? physicalInventoryId,
          Wrapped<FwStandardSqlServerFwDateTime?>? fromDate,
          Wrapped<FwStandardSqlServerFwDateTime?>? toDate,
          Wrapped<String?>? availableFor,
          Wrapped<bool?>? itemsCounted,
          Wrapped<bool?>? includeOrders,
          Wrapped<bool?>? includeOrderBarcodes,
          Wrapped<bool?>? includeCountedBarcodes,
          Wrapped<bool?>? excludeZeroCostExtended,
          Wrapped<bool?>? onlyChangedItems,
          Wrapped<String?>? trackedbyIds,
          Wrapped<String?>? spaceIds,
          Wrapped<String?>? masterIds,
          Wrapped<String?>? inventoryDepartmentIds,
          Wrapped<String?>? categoryIds,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? trackedBys,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest(
        physicalInventoryId: (physicalInventoryId != null
            ? physicalInventoryId.value
            : this.physicalInventoryId),
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        availableFor:
            (availableFor != null ? availableFor.value : this.availableFor),
        itemsCounted:
            (itemsCounted != null ? itemsCounted.value : this.itemsCounted),
        includeOrders:
            (includeOrders != null ? includeOrders.value : this.includeOrders),
        includeOrderBarcodes: (includeOrderBarcodes != null
            ? includeOrderBarcodes.value
            : this.includeOrderBarcodes),
        includeCountedBarcodes: (includeCountedBarcodes != null
            ? includeCountedBarcodes.value
            : this.includeCountedBarcodes),
        excludeZeroCostExtended: (excludeZeroCostExtended != null
            ? excludeZeroCostExtended.value
            : this.excludeZeroCostExtended),
        onlyChangedItems: (onlyChangedItems != null
            ? onlyChangedItems.value
            : this.onlyChangedItems),
        trackedbyIds:
            (trackedbyIds != null ? trackedbyIds.value : this.trackedbyIds),
        spaceIds: (spaceIds != null ? spaceIds.value : this.spaceIds),
        masterIds: (masterIds != null ? masterIds.value : this.masterIds),
        inventoryDepartmentIds: (inventoryDepartmentIds != null
            ? inventoryDepartmentIds.value
            : this.inventoryDepartmentIds),
        categoryIds:
            (categoryIds != null ? categoryIds.value : this.categoryIds),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest({
    this.physicalInventoryId,
    this.spaceIds,
    this.categoryIds,
    this.masterIds,
    this.inventoryDepartmentIds,
    this.includeIdenticalCounts,
    this.trackedBys,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequestToJson(
          this);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'IncludeIdenticalCounts', includeIfNull: false)
  final bool? includeIdenticalCounts;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.includeIdenticalCounts, includeIdenticalCounts) ||
                const DeepCollectionEquality().equals(
                    other.includeIdenticalCounts, includeIdenticalCounts)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(includeIdenticalCounts) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest
      copyWith(
          {String? physicalInventoryId,
          String? spaceIds,
          String? categoryIds,
          String? masterIds,
          String? inventoryDepartmentIds,
          bool? includeIdenticalCounts,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        spaceIds: spaceIds ?? this.spaceIds,
        categoryIds: categoryIds ?? this.categoryIds,
        masterIds: masterIds ?? this.masterIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        includeIdenticalCounts:
            includeIdenticalCounts ?? this.includeIdenticalCounts,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest
      copyWithWrapped(
          {Wrapped<String?>? physicalInventoryId,
          Wrapped<String?>? spaceIds,
          Wrapped<String?>? categoryIds,
          Wrapped<String?>? masterIds,
          Wrapped<String?>? inventoryDepartmentIds,
          Wrapped<bool?>? includeIdenticalCounts,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? trackedBys,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest(
        physicalInventoryId: (physicalInventoryId != null
            ? physicalInventoryId.value
            : this.physicalInventoryId),
        spaceIds: (spaceIds != null ? spaceIds.value : this.spaceIds),
        categoryIds:
            (categoryIds != null ? categoryIds.value : this.categoryIds),
        masterIds: (masterIds != null ? masterIds.value : this.masterIds),
        inventoryDepartmentIds: (inventoryDepartmentIds != null
            ? inventoryDepartmentIds.value
            : this.inventoryDepartmentIds),
        includeIdenticalCounts: (includeIdenticalCounts != null
            ? includeIdenticalCounts.value
            : this.includeIdenticalCounts),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest({
    this.physicalInventoryId,
    this.includeNoChangeItems,
    this.showRetiredBarcodes,
    this.trackedBys,
    this.spaceIds,
    this.inventoryDepartmentIds,
    this.categoryIds,
    this.masterIds,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequestToJson(
          this);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'IncludeNoChangeItems', includeIfNull: false)
  final bool? includeNoChangeItems;
  @JsonKey(name: 'ShowRetiredBarcodes', includeIfNull: false)
  final bool? showRetiredBarcodes;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.includeNoChangeItems, includeNoChangeItems) ||
                const DeepCollectionEquality().equals(
                    other.includeNoChangeItems, includeNoChangeItems)) &&
            (identical(other.showRetiredBarcodes, showRetiredBarcodes) ||
                const DeepCollectionEquality()
                    .equals(other.showRetiredBarcodes, showRetiredBarcodes)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(includeNoChangeItems) ^
      const DeepCollectionEquality().hash(showRetiredBarcodes) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest
      copyWith(
          {String? physicalInventoryId,
          bool? includeNoChangeItems,
          bool? showRetiredBarcodes,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          String? spaceIds,
          String? inventoryDepartmentIds,
          String? categoryIds,
          String? masterIds,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        includeNoChangeItems: includeNoChangeItems ?? this.includeNoChangeItems,
        showRetiredBarcodes: showRetiredBarcodes ?? this.showRetiredBarcodes,
        trackedBys: trackedBys ?? this.trackedBys,
        spaceIds: spaceIds ?? this.spaceIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        categoryIds: categoryIds ?? this.categoryIds,
        masterIds: masterIds ?? this.masterIds,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest
      copyWithWrapped(
          {Wrapped<String?>? physicalInventoryId,
          Wrapped<bool?>? includeNoChangeItems,
          Wrapped<bool?>? showRetiredBarcodes,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? trackedBys,
          Wrapped<String?>? spaceIds,
          Wrapped<String?>? inventoryDepartmentIds,
          Wrapped<String?>? categoryIds,
          Wrapped<String?>? masterIds,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest(
        physicalInventoryId: (physicalInventoryId != null
            ? physicalInventoryId.value
            : this.physicalInventoryId),
        includeNoChangeItems: (includeNoChangeItems != null
            ? includeNoChangeItems.value
            : this.includeNoChangeItems),
        showRetiredBarcodes: (showRetiredBarcodes != null
            ? showRetiredBarcodes.value
            : this.showRetiredBarcodes),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        spaceIds: (spaceIds != null ? spaceIds.value : this.spaceIds),
        inventoryDepartmentIds: (inventoryDepartmentIds != null
            ? inventoryDepartmentIds.value
            : this.inventoryDepartmentIds),
        categoryIds:
            (categoryIds != null ? categoryIds.value : this.categoryIds),
        masterIds: (masterIds != null ? masterIds.value : this.masterIds),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest {
  WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest({
    this.sortBy,
    this.warehouseId,
    this.originalShowId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequestToJson(
          this);

  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.originalShowId, originalShowId) ||
                const DeepCollectionEquality()
                    .equals(other.originalShowId, originalShowId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(originalShowId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequestExtension
    on WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest {
  WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest
      copyWith(
          {List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? warehouseId,
          String? originalShowId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest(
        sortBy: sortBy ?? this.sortBy,
        warehouseId: warehouseId ?? this.warehouseId,
        originalShowId: originalShowId ?? this.originalShowId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest
      copyWithWrapped(
          {Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? originalShowId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPropsWardrobeReportsBrochureAnalysisReportBrochureAnalysisReportRequest(
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        originalShowId: (originalShowId != null
            ? originalShowId.value
            : this.originalShowId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest {
  WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest({
    this.reportType,
    this.asOfDate,
    this.showMissingAisleShelfOnly,
    this.fromAisleShelf,
    this.toAisleShelf,
    this.sortBy,
    this.departmentId,
    this.warehouseId,
    this.originalShowId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.inventoryStatusId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequestToJson(
          this);

  @JsonKey(
      name: 'ReportType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? reportType;
  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final String? asOfDate;
  @JsonKey(name: 'ShowMissingAisleShelfOnly', includeIfNull: false)
  final bool? showMissingAisleShelfOnly;
  @JsonKey(name: 'FromAisleShelf', includeIfNull: false)
  final String? fromAisleShelf;
  @JsonKey(name: 'ToAisleShelf', includeIfNull: false)
  final String? toAisleShelf;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'InventoryStatusId', includeIfNull: false)
  final String? inventoryStatusId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest &&
            (identical(other.reportType, reportType) ||
                const DeepCollectionEquality()
                    .equals(other.reportType, reportType)) &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.showMissingAisleShelfOnly, showMissingAisleShelfOnly) ||
                const DeepCollectionEquality().equals(
                    other.showMissingAisleShelfOnly,
                    showMissingAisleShelfOnly)) &&
            (identical(other.fromAisleShelf, fromAisleShelf) ||
                const DeepCollectionEquality()
                    .equals(other.fromAisleShelf, fromAisleShelf)) &&
            (identical(other.toAisleShelf, toAisleShelf) ||
                const DeepCollectionEquality()
                    .equals(other.toAisleShelf, toAisleShelf)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.originalShowId, originalShowId) ||
                const DeepCollectionEquality()
                    .equals(other.originalShowId, originalShowId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.inventoryStatusId, inventoryStatusId) || const DeepCollectionEquality().equals(other.inventoryStatusId, inventoryStatusId)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(reportType) ^
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(showMissingAisleShelfOnly) ^
      const DeepCollectionEquality().hash(fromAisleShelf) ^
      const DeepCollectionEquality().hash(toAisleShelf) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(originalShowId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(inventoryStatusId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequestExtension
    on WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest {
  WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest
      copyWith(
          {List<FwStandardModelsSelectedCheckBoxListItem>? reportType,
          String? asOfDate,
          bool? showMissingAisleShelfOnly,
          String? fromAisleShelf,
          String? toAisleShelf,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? departmentId,
          String? warehouseId,
          String? originalShowId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? inventoryStatusId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest(
        reportType: reportType ?? this.reportType,
        asOfDate: asOfDate ?? this.asOfDate,
        showMissingAisleShelfOnly:
            showMissingAisleShelfOnly ?? this.showMissingAisleShelfOnly,
        fromAisleShelf: fromAisleShelf ?? this.fromAisleShelf,
        toAisleShelf: toAisleShelf ?? this.toAisleShelf,
        sortBy: sortBy ?? this.sortBy,
        departmentId: departmentId ?? this.departmentId,
        warehouseId: warehouseId ?? this.warehouseId,
        originalShowId: originalShowId ?? this.originalShowId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        inventoryStatusId: inventoryStatusId ?? this.inventoryStatusId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest
      copyWithWrapped(
          {Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? reportType,
          Wrapped<String?>? asOfDate,
          Wrapped<bool?>? showMissingAisleShelfOnly,
          Wrapped<String?>? fromAisleShelf,
          Wrapped<String?>? toAisleShelf,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? originalShowId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? inventoryStatusId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPropsWardrobeReportsInventoryByLocationReportInventoryByLocationReportRequest(
        reportType: (reportType != null ? reportType.value : this.reportType),
        asOfDate: (asOfDate != null ? asOfDate.value : this.asOfDate),
        showMissingAisleShelfOnly: (showMissingAisleShelfOnly != null
            ? showMissingAisleShelfOnly.value
            : this.showMissingAisleShelfOnly),
        fromAisleShelf: (fromAisleShelf != null
            ? fromAisleShelf.value
            : this.fromAisleShelf),
        toAisleShelf:
            (toAisleShelf != null ? toAisleShelf.value : this.toAisleShelf),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        originalShowId: (originalShowId != null
            ? originalShowId.value
            : this.originalShowId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        inventoryStatusId: (inventoryStatusId != null
            ? inventoryStatusId.value
            : this.inventoryStatusId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest {
  WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest({
    this.reportType,
    this.fromDate,
    this.toDate,
    this.sortBy,
    this.departmentId,
    this.warehouseId,
    this.originalShowId,
    this.vendorId,
    this.inventoryReceiptId,
    this.buyerId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.showImages,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequestToJson(
          this);

  @JsonKey(
      name: 'ReportType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? reportType;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final String? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final String? toDate;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'InventoryReceiptId', includeIfNull: false)
  final String? inventoryReceiptId;
  @JsonKey(name: 'BuyerId', includeIfNull: false)
  final String? buyerId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'ShowImages', includeIfNull: false)
  final bool? showImages;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest &&
            (identical(other.reportType, reportType) ||
                const DeepCollectionEquality()
                    .equals(other.reportType, reportType)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.originalShowId, originalShowId) ||
                const DeepCollectionEquality()
                    .equals(other.originalShowId, originalShowId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.inventoryReceiptId, inventoryReceiptId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryReceiptId, inventoryReceiptId)) &&
            (identical(other.buyerId, buyerId) ||
                const DeepCollectionEquality()
                    .equals(other.buyerId, buyerId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.showImages, showImages) ||
                const DeepCollectionEquality()
                    .equals(other.showImages, showImages)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(reportType) ^
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(originalShowId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(inventoryReceiptId) ^
      const DeepCollectionEquality().hash(buyerId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(showImages) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequestExtension
    on WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest {
  WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest
      copyWith(
          {List<FwStandardModelsSelectedCheckBoxListItem>? reportType,
          String? fromDate,
          String? toDate,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? departmentId,
          String? warehouseId,
          String? originalShowId,
          String? vendorId,
          String? inventoryReceiptId,
          String? buyerId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          bool? showImages,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest(
        reportType: reportType ?? this.reportType,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        sortBy: sortBy ?? this.sortBy,
        departmentId: departmentId ?? this.departmentId,
        warehouseId: warehouseId ?? this.warehouseId,
        originalShowId: originalShowId ?? this.originalShowId,
        vendorId: vendorId ?? this.vendorId,
        inventoryReceiptId: inventoryReceiptId ?? this.inventoryReceiptId,
        buyerId: buyerId ?? this.buyerId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        showImages: showImages ?? this.showImages,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest
      copyWithWrapped(
          {Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? reportType,
          Wrapped<String?>? fromDate,
          Wrapped<String?>? toDate,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? originalShowId,
          Wrapped<String?>? vendorId,
          Wrapped<String?>? inventoryReceiptId,
          Wrapped<String?>? buyerId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<bool?>? showImages,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPropsWardrobeReportsInventoryReceiptDetailsReportInventoryReceiptDetailsReportRequest(
        reportType: (reportType != null ? reportType.value : this.reportType),
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        originalShowId: (originalShowId != null
            ? originalShowId.value
            : this.originalShowId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        inventoryReceiptId: (inventoryReceiptId != null
            ? inventoryReceiptId.value
            : this.inventoryReceiptId),
        buyerId: (buyerId != null ? buyerId.value : this.buyerId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        showImages: (showImages != null ? showImages.value : this.showImages),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest {
  WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest({
    this.reportType,
    this.fromDate,
    this.toDate,
    this.sortBy,
    this.departmentId,
    this.warehouseId,
    this.originalShowId,
    this.vendorId,
    this.buyerId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequestToJson(
          this);

  @JsonKey(
      name: 'ReportType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? reportType;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final String? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final String? toDate;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'BuyerId', includeIfNull: false)
  final String? buyerId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest &&
            (identical(other.reportType, reportType) ||
                const DeepCollectionEquality()
                    .equals(other.reportType, reportType)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.originalShowId, originalShowId) ||
                const DeepCollectionEquality()
                    .equals(other.originalShowId, originalShowId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.buyerId, buyerId) ||
                const DeepCollectionEquality()
                    .equals(other.buyerId, buyerId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(reportType) ^
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(originalShowId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(buyerId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequestExtension
    on WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest {
  WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest
      copyWith(
          {List<FwStandardModelsSelectedCheckBoxListItem>? reportType,
          String? fromDate,
          String? toDate,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? departmentId,
          String? warehouseId,
          String? originalShowId,
          String? vendorId,
          String? buyerId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest(
        reportType: reportType ?? this.reportType,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        sortBy: sortBy ?? this.sortBy,
        departmentId: departmentId ?? this.departmentId,
        warehouseId: warehouseId ?? this.warehouseId,
        originalShowId: originalShowId ?? this.originalShowId,
        vendorId: vendorId ?? this.vendorId,
        buyerId: buyerId ?? this.buyerId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest
      copyWithWrapped(
          {Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? reportType,
          Wrapped<String?>? fromDate,
          Wrapped<String?>? toDate,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? originalShowId,
          Wrapped<String?>? vendorId,
          Wrapped<String?>? buyerId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPropsWardrobeReportsInventoryReceiptSummaryReportInventoryReceiptSummaryReportRequest(
        reportType: (reportType != null ? reportType.value : this.reportType),
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        originalShowId: (originalShowId != null
            ? originalShowId.value
            : this.originalShowId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        buyerId: (buyerId != null ? buyerId.value : this.buyerId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest {
  WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest({
    this.reportType,
    this.trackedBy,
    this.costRangeFrom,
    this.costRangeTo,
    this.sortBy,
    this.departmentId,
    this.warehouseId,
    this.originalShowId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.inventoryStatusId,
    this.showImages,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequestToJson(
          this);

  @JsonKey(
      name: 'ReportType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? reportType;
  @JsonKey(
      name: 'TrackedBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBy;
  @JsonKey(name: 'CostRangeFrom', includeIfNull: false)
  final double? costRangeFrom;
  @JsonKey(name: 'CostRangeTo', includeIfNull: false)
  final double? costRangeTo;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'InventoryStatusId', includeIfNull: false)
  final String? inventoryStatusId;
  @JsonKey(name: 'ShowImages', includeIfNull: false)
  final bool? showImages;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest &&
            (identical(other.reportType, reportType) ||
                const DeepCollectionEquality()
                    .equals(other.reportType, reportType)) &&
            (identical(other.trackedBy, trackedBy) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBy, trackedBy)) &&
            (identical(other.costRangeFrom, costRangeFrom) ||
                const DeepCollectionEquality()
                    .equals(other.costRangeFrom, costRangeFrom)) &&
            (identical(other.costRangeTo, costRangeTo) ||
                const DeepCollectionEquality()
                    .equals(other.costRangeTo, costRangeTo)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.originalShowId, originalShowId) ||
                const DeepCollectionEquality()
                    .equals(other.originalShowId, originalShowId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.inventoryStatusId, inventoryStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryStatusId, inventoryStatusId)) &&
            (identical(other.showImages, showImages) ||
                const DeepCollectionEquality()
                    .equals(other.showImages, showImages)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(reportType) ^
      const DeepCollectionEquality().hash(trackedBy) ^
      const DeepCollectionEquality().hash(costRangeFrom) ^
      const DeepCollectionEquality().hash(costRangeTo) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(originalShowId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(inventoryStatusId) ^
      const DeepCollectionEquality().hash(showImages) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequestExtension
    on WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest {
  WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest
      copyWith(
          {List<FwStandardModelsSelectedCheckBoxListItem>? reportType,
          List<FwStandardModelsCheckBoxListItem>? trackedBy,
          double? costRangeFrom,
          double? costRangeTo,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? departmentId,
          String? warehouseId,
          String? originalShowId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? inventoryStatusId,
          bool? showImages,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest(
        reportType: reportType ?? this.reportType,
        trackedBy: trackedBy ?? this.trackedBy,
        costRangeFrom: costRangeFrom ?? this.costRangeFrom,
        costRangeTo: costRangeTo ?? this.costRangeTo,
        sortBy: sortBy ?? this.sortBy,
        departmentId: departmentId ?? this.departmentId,
        warehouseId: warehouseId ?? this.warehouseId,
        originalShowId: originalShowId ?? this.originalShowId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        inventoryStatusId: inventoryStatusId ?? this.inventoryStatusId,
        showImages: showImages ?? this.showImages,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest
      copyWithWrapped(
          {Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? reportType,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? trackedBy,
          Wrapped<double?>? costRangeFrom,
          Wrapped<double?>? costRangeTo,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? originalShowId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? inventoryStatusId,
          Wrapped<bool?>? showImages,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPropsWardrobeReportsItemsPurchasedByDealReportItemsPurchasedByDealReportRequest(
        reportType: (reportType != null ? reportType.value : this.reportType),
        trackedBy: (trackedBy != null ? trackedBy.value : this.trackedBy),
        costRangeFrom:
            (costRangeFrom != null ? costRangeFrom.value : this.costRangeFrom),
        costRangeTo:
            (costRangeTo != null ? costRangeTo.value : this.costRangeTo),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        originalShowId: (originalShowId != null
            ? originalShowId.value
            : this.originalShowId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        inventoryStatusId: (inventoryStatusId != null
            ? inventoryStatusId.value
            : this.inventoryStatusId),
        showImages: (showImages != null ? showImages.value : this.showImages),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest {
  WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest({
    this.purchaseOrderId,
    this.warehouseId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequestToJson(
          this);

  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequestExtension
    on WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest {
  WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest
      copyWith(
          {String? purchaseOrderId,
          String? warehouseId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest(
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        warehouseId: warehouseId ?? this.warehouseId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest
      copyWithWrapped(
          {Wrapped<String?>? purchaseOrderId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest(
        purchaseOrderId: (purchaseOrderId != null
            ? purchaseOrderId.value
            : this.purchaseOrderId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRateUpdateReportRateUpdateReportRequest {
  WebApiModulesReportsRateUpdateReportRateUpdateReportRequest({
    this.pendingModificationsOnly,
    this.rateUpdateBatchId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRateUpdateReportRateUpdateReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRateUpdateReportRateUpdateReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRateUpdateReportRateUpdateReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRateUpdateReportRateUpdateReportRequestToJson(this);

  @JsonKey(name: 'PendingModificationsOnly', includeIfNull: false)
  final bool? pendingModificationsOnly;
  @JsonKey(name: 'RateUpdateBatchId', includeIfNull: false)
  final String? rateUpdateBatchId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRateUpdateReportRateUpdateReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRateUpdateReportRateUpdateReportRequest &&
            (identical(other.pendingModificationsOnly, pendingModificationsOnly) ||
                const DeepCollectionEquality().equals(
                    other.pendingModificationsOnly,
                    pendingModificationsOnly)) &&
            (identical(other.rateUpdateBatchId, rateUpdateBatchId) ||
                const DeepCollectionEquality()
                    .equals(other.rateUpdateBatchId, rateUpdateBatchId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(pendingModificationsOnly) ^
      const DeepCollectionEquality().hash(rateUpdateBatchId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRateUpdateReportRateUpdateReportRequestExtension
    on WebApiModulesReportsRateUpdateReportRateUpdateReportRequest {
  WebApiModulesReportsRateUpdateReportRateUpdateReportRequest copyWith(
      {bool? pendingModificationsOnly,
      String? rateUpdateBatchId,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsRateUpdateReportRateUpdateReportRequest(
        pendingModificationsOnly:
            pendingModificationsOnly ?? this.pendingModificationsOnly,
        rateUpdateBatchId: rateUpdateBatchId ?? this.rateUpdateBatchId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRateUpdateReportRateUpdateReportRequest copyWithWrapped(
      {Wrapped<bool?>? pendingModificationsOnly,
      Wrapped<String?>? rateUpdateBatchId,
      Wrapped<String?>? userDepartmentId,
      Wrapped<String?>? userLocationId,
      Wrapped<String?>? userWarehouseId,
      Wrapped<String?>? customReportLayoutId,
      Wrapped<bool?>? isSummary,
      Wrapped<bool?>? includeSubHeadingsAndSubTotals,
      Wrapped<bool?>? includeIdColumns,
      Wrapped<String?>? locale,
      Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
      Wrapped<String?>? reportName,
      Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRateUpdateReportRateUpdateReportRequest(
        pendingModificationsOnly: (pendingModificationsOnly != null
            ? pendingModificationsOnly.value
            : this.pendingModificationsOnly),
        rateUpdateBatchId: (rateUpdateBatchId != null
            ? rateUpdateBatchId.value
            : this.rateUpdateBatchId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.fixedAsset,
    this.excludeMigrates,
    this.ownershipTypes,
    this.ranks,
    this.trackedBys,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
    name: 'FixedAsset',
    includeIfNull: false,
    toJson: webApiIncludeExcludeAllToJson,
    fromJson: webApiIncludeExcludeAllFromJson,
  )
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(name: 'ExcludeMigrates', includeIfNull: false)
  final bool? excludeMigrates;
  @JsonKey(
      name: 'OwnershipTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.excludeMigrates, excludeMigrates) ||
                const DeepCollectionEquality()
                    .equals(other.excludeMigrates, excludeMigrates)) &&
            (identical(other.ownershipTypes, ownershipTypes) ||
                const DeepCollectionEquality()
                    .equals(other.ownershipTypes, ownershipTypes)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(excludeMigrates) ^
      const DeepCollectionEquality().hash(ownershipTypes) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          bool? excludeMigrates,
          List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        excludeMigrates: excludeMigrates ?? this.excludeMigrates,
        ownershipTypes: ownershipTypes ?? this.ownershipTypes,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<enums.WebApiIncludeExcludeAll?>? fixedAsset,
          Wrapped<bool?>? excludeMigrates,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              ownershipTypes,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        fixedAsset: (fixedAsset != null ? fixedAsset.value : this.fixedAsset),
        excludeMigrates: (excludeMigrates != null
            ? excludeMigrates.value
            : this.excludeMigrates),
        ownershipTypes: (ownershipTypes != null
            ? ownershipTypes.value
            : this.ownershipTypes),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest({
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.ranks,
    this.fixedAsset,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequestToJson(
          this);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
    name: 'FixedAsset',
    includeIfNull: false,
    toJson: webApiIncludeExcludeAllToJson,
    fromJson: webApiIncludeExcludeAllFromJson,
  )
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest
      copyWith(
          {String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest(
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest
      copyWithWrapped(
          {Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<enums.WebApiIncludeExcludeAll?>? fixedAsset,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryAssetAttributeReportRentalInventoryAssetAttributeReportRequest(
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        fixedAsset: (fixedAsset != null ? fixedAsset.value : this.fixedAsset),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest({
    this.fromDate,
    this.toDate,
    this.isDetail,
    this.includeZeroQuantity,
    this.onlyIncludeLowAndNegative,
    this.onlyIncludeNegative,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.classifications,
    this.ranks,
    this.trackedBys,
    this.fixedAsset,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IsDetail', includeIfNull: false)
  final bool? isDetail;
  @JsonKey(name: 'IncludeZeroQuantity', includeIfNull: false)
  final bool? includeZeroQuantity;
  @JsonKey(name: 'OnlyIncludeLowAndNegative', includeIfNull: false)
  final bool? onlyIncludeLowAndNegative;
  @JsonKey(name: 'OnlyIncludeNegative', includeIfNull: false)
  final bool? onlyIncludeNegative;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Classifications',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? classifications;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
    name: 'FixedAsset',
    includeIfNull: false,
    toJson: webApiIncludeExcludeAllToJson,
    fromJson: webApiIncludeExcludeAllFromJson,
  )
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.isDetail, isDetail) ||
                const DeepCollectionEquality()
                    .equals(other.isDetail, isDetail)) &&
            (identical(other.includeZeroQuantity, includeZeroQuantity) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroQuantity, includeZeroQuantity)) &&
            (identical(other.onlyIncludeLowAndNegative, onlyIncludeLowAndNegative) ||
                const DeepCollectionEquality().equals(
                    other.onlyIncludeLowAndNegative,
                    onlyIncludeLowAndNegative)) &&
            (identical(other.onlyIncludeNegative, onlyIncludeNegative) ||
                const DeepCollectionEquality()
                    .equals(other.onlyIncludeNegative, onlyIncludeNegative)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.classifications, classifications) ||
                const DeepCollectionEquality()
                    .equals(other.classifications, classifications)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.fixedAsset, fixedAsset) || const DeepCollectionEquality().equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(isDetail) ^
      const DeepCollectionEquality().hash(includeZeroQuantity) ^
      const DeepCollectionEquality().hash(onlyIncludeLowAndNegative) ^
      const DeepCollectionEquality().hash(onlyIncludeNegative) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(classifications) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? isDetail,
          bool? includeZeroQuantity,
          bool? onlyIncludeLowAndNegative,
          bool? onlyIncludeNegative,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? classifications,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        isDetail: isDetail ?? this.isDetail,
        includeZeroQuantity: includeZeroQuantity ?? this.includeZeroQuantity,
        onlyIncludeLowAndNegative:
            onlyIncludeLowAndNegative ?? this.onlyIncludeLowAndNegative,
        onlyIncludeNegative: onlyIncludeNegative ?? this.onlyIncludeNegative,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        classifications: classifications ?? this.classifications,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<bool?>? isDetail,
          Wrapped<bool?>? includeZeroQuantity,
          Wrapped<bool?>? onlyIncludeLowAndNegative,
          Wrapped<bool?>? onlyIncludeNegative,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              classifications,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<enums.WebApiIncludeExcludeAll?>? fixedAsset,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        isDetail: (isDetail != null ? isDetail.value : this.isDetail),
        includeZeroQuantity: (includeZeroQuantity != null
            ? includeZeroQuantity.value
            : this.includeZeroQuantity),
        onlyIncludeLowAndNegative: (onlyIncludeLowAndNegative != null
            ? onlyIncludeLowAndNegative.value
            : this.onlyIncludeLowAndNegative),
        onlyIncludeNegative: (onlyIncludeNegative != null
            ? onlyIncludeNegative.value
            : this.onlyIncludeNegative),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        classifications: (classifications != null
            ? classifications.value
            : this.classifications),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        fixedAsset: (fixedAsset != null ? fixedAsset.value : this.fixedAsset),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest({
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.originalShowId,
    this.ranks,
    this.trackedBys,
    this.ownershipTypes,
    this.fixedAsset,
    this.includeRetiredSerializedItems,
    this.includeItemsReceivedInDateRange,
    this.receiveFromDate,
    this.receiveToDate,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequestToJson(
          this);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'OwnershipTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes;
  @JsonKey(
    name: 'FixedAsset',
    includeIfNull: false,
    toJson: webApiIncludeExcludeAllToJson,
    fromJson: webApiIncludeExcludeAllFromJson,
  )
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(name: 'IncludeRetiredSerializedItems', includeIfNull: false)
  final bool? includeRetiredSerializedItems;
  @JsonKey(name: 'IncludeItemsReceivedInDateRange', includeIfNull: false)
  final bool? includeItemsReceivedInDateRange;
  @JsonKey(name: 'ReceiveFromDate', includeIfNull: false)
  final DateTime? receiveFromDate;
  @JsonKey(name: 'ReceiveToDate', includeIfNull: false)
  final DateTime? receiveToDate;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.originalShowId, originalShowId) ||
                const DeepCollectionEquality()
                    .equals(other.originalShowId, originalShowId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.ownershipTypes, ownershipTypes) ||
                const DeepCollectionEquality()
                    .equals(other.ownershipTypes, ownershipTypes)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.includeRetiredSerializedItems, includeRetiredSerializedItems) ||
                const DeepCollectionEquality().equals(
                    other.includeRetiredSerializedItems,
                    includeRetiredSerializedItems)) &&
            (identical(other.includeItemsReceivedInDateRange, includeItemsReceivedInDateRange) ||
                const DeepCollectionEquality().equals(
                    other.includeItemsReceivedInDateRange,
                    includeItemsReceivedInDateRange)) &&
            (identical(other.receiveFromDate, receiveFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.receiveFromDate, receiveFromDate)) &&
            (identical(other.receiveToDate, receiveToDate) ||
                const DeepCollectionEquality()
                    .equals(other.receiveToDate, receiveToDate)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(originalShowId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(ownershipTypes) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(includeRetiredSerializedItems) ^
      const DeepCollectionEquality().hash(includeItemsReceivedInDateRange) ^
      const DeepCollectionEquality().hash(receiveFromDate) ^
      const DeepCollectionEquality().hash(receiveToDate) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest
      copyWith(
          {String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? originalShowId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          bool? includeRetiredSerializedItems,
          bool? includeItemsReceivedInDateRange,
          DateTime? receiveFromDate,
          DateTime? receiveToDate,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest(
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        originalShowId: originalShowId ?? this.originalShowId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        ownershipTypes: ownershipTypes ?? this.ownershipTypes,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        includeRetiredSerializedItems:
            includeRetiredSerializedItems ?? this.includeRetiredSerializedItems,
        includeItemsReceivedInDateRange: includeItemsReceivedInDateRange ??
            this.includeItemsReceivedInDateRange,
        receiveFromDate: receiveFromDate ?? this.receiveFromDate,
        receiveToDate: receiveToDate ?? this.receiveToDate,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest
      copyWithWrapped(
          {Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? originalShowId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              ownershipTypes,
          Wrapped<enums.WebApiIncludeExcludeAll?>? fixedAsset,
          Wrapped<bool?>? includeRetiredSerializedItems,
          Wrapped<bool?>? includeItemsReceivedInDateRange,
          Wrapped<DateTime?>? receiveFromDate,
          Wrapped<DateTime?>? receiveToDate,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest(
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        originalShowId: (originalShowId != null
            ? originalShowId.value
            : this.originalShowId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        ownershipTypes: (ownershipTypes != null
            ? ownershipTypes.value
            : this.ownershipTypes),
        fixedAsset: (fixedAsset != null ? fixedAsset.value : this.fixedAsset),
        includeRetiredSerializedItems: (includeRetiredSerializedItems != null
            ? includeRetiredSerializedItems.value
            : this.includeRetiredSerializedItems),
        includeItemsReceivedInDateRange:
            (includeItemsReceivedInDateRange != null
                ? includeItemsReceivedInDateRange.value
                : this.includeItemsReceivedInDateRange),
        receiveFromDate: (receiveFromDate != null
            ? receiveFromDate.value
            : this.receiveFromDate),
        receiveToDate:
            (receiveToDate != null ? receiveToDate.value : this.receiveToDate),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest({
    this.fromDate,
    this.toDate,
    this.includeZeroOwned,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.value,
    this.ranks,
    this.trackedBys,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IncludeZeroOwned', includeIfNull: false)
  final bool? includeZeroOwned;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'Value', includeIfNull: false)
  final String? value;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.includeZeroOwned, includeZeroOwned) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroOwned, includeZeroOwned)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(includeZeroOwned) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(value) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? includeZeroOwned,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? value,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        includeZeroOwned: includeZeroOwned ?? this.includeZeroOwned,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        value: value ?? this.value,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<bool?>? includeZeroOwned,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? value,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        includeZeroOwned: (includeZeroOwned != null
            ? includeZeroOwned.value
            : this.includeZeroOwned),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        value: (value != null ? value.value : this.value),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.ranks,
    this.outageFilterMode,
    this.outageFilterAmount,
    this.filterDatesByOutagePercent,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(name: 'OutageFilterMode', includeIfNull: false)
  final String? outageFilterMode;
  @JsonKey(name: 'OutageFilterAmount', includeIfNull: false)
  final double? outageFilterAmount;
  @JsonKey(name: 'FilterDatesByOutagePercent', includeIfNull: false)
  final bool? filterDatesByOutagePercent;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.outageFilterMode, outageFilterMode) ||
                const DeepCollectionEquality()
                    .equals(other.outageFilterMode, outageFilterMode)) &&
            (identical(other.outageFilterAmount, outageFilterAmount) ||
                const DeepCollectionEquality()
                    .equals(other.outageFilterAmount, outageFilterAmount)) &&
            (identical(other.filterDatesByOutagePercent, filterDatesByOutagePercent) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesByOutagePercent,
                    filterDatesByOutagePercent)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(outageFilterMode) ^
      const DeepCollectionEquality().hash(outageFilterAmount) ^
      const DeepCollectionEquality().hash(filterDatesByOutagePercent) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          String? outageFilterMode,
          double? outageFilterAmount,
          bool? filterDatesByOutagePercent,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        outageFilterMode: outageFilterMode ?? this.outageFilterMode,
        outageFilterAmount: outageFilterAmount ?? this.outageFilterAmount,
        filterDatesByOutagePercent:
            filterDatesByOutagePercent ?? this.filterDatesByOutagePercent,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<String?>? outageFilterMode,
          Wrapped<double?>? outageFilterAmount,
          Wrapped<bool?>? filterDatesByOutagePercent,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryOutageReportRentalInventoryOutageReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        outageFilterMode: (outageFilterMode != null
            ? outageFilterMode.value
            : this.outageFilterMode),
        outageFilterAmount: (outageFilterAmount != null
            ? outageFilterAmount.value
            : this.outageFilterAmount),
        filterDatesByOutagePercent: (filterDatesByOutagePercent != null
            ? filterDatesByOutagePercent.value
            : this.filterDatesByOutagePercent),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest({
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequestToJson(
          this);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest
      copyWith(
          {String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest(
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest
      copyWithWrapped(
          {Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest(
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest({
    this.includePeriodRevenue,
    this.revenueFromDate,
    this.revenueToDate,
    this.revenueFilterMode,
    this.revenueFilterAmount,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.includeNotRentedSince,
    this.notRentedSinceDate,
    this.includeZeroOwned,
    this.showStagedAndOut,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequestToJson(
          this);

  @JsonKey(name: 'IncludePeriodRevenue', includeIfNull: false)
  final bool? includePeriodRevenue;
  @JsonKey(name: 'RevenueFromDate', includeIfNull: false)
  final DateTime? revenueFromDate;
  @JsonKey(name: 'RevenueToDate', includeIfNull: false)
  final DateTime? revenueToDate;
  @JsonKey(name: 'RevenueFilterMode', includeIfNull: false)
  final String? revenueFilterMode;
  @JsonKey(name: 'RevenueFilterAmount', includeIfNull: false)
  final double? revenueFilterAmount;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'IncludeNotRentedSince', includeIfNull: false)
  final bool? includeNotRentedSince;
  @JsonKey(name: 'NotRentedSinceDate', includeIfNull: false)
  final DateTime? notRentedSinceDate;
  @JsonKey(name: 'IncludeZeroOwned', includeIfNull: false)
  final bool? includeZeroOwned;
  @JsonKey(name: 'ShowStagedAndOut', includeIfNull: false)
  final bool? showStagedAndOut;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest &&
            (identical(other.includePeriodRevenue, includePeriodRevenue) ||
                const DeepCollectionEquality().equals(
                    other.includePeriodRevenue, includePeriodRevenue)) &&
            (identical(other.revenueFromDate, revenueFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFromDate, revenueFromDate)) &&
            (identical(other.revenueToDate, revenueToDate) ||
                const DeepCollectionEquality()
                    .equals(other.revenueToDate, revenueToDate)) &&
            (identical(other.revenueFilterMode, revenueFilterMode) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFilterMode, revenueFilterMode)) &&
            (identical(other.revenueFilterAmount, revenueFilterAmount) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFilterAmount, revenueFilterAmount)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.includeNotRentedSince, includeNotRentedSince) ||
                const DeepCollectionEquality().equals(
                    other.includeNotRentedSince, includeNotRentedSince)) &&
            (identical(other.notRentedSinceDate, notRentedSinceDate) ||
                const DeepCollectionEquality()
                    .equals(other.notRentedSinceDate, notRentedSinceDate)) &&
            (identical(other.includeZeroOwned, includeZeroOwned) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroOwned, includeZeroOwned)) &&
            (identical(other.showStagedAndOut, showStagedAndOut) ||
                const DeepCollectionEquality()
                    .equals(other.showStagedAndOut, showStagedAndOut)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(includePeriodRevenue) ^
      const DeepCollectionEquality().hash(revenueFromDate) ^
      const DeepCollectionEquality().hash(revenueToDate) ^
      const DeepCollectionEquality().hash(revenueFilterMode) ^
      const DeepCollectionEquality().hash(revenueFilterAmount) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(includeNotRentedSince) ^
      const DeepCollectionEquality().hash(notRentedSinceDate) ^
      const DeepCollectionEquality().hash(includeZeroOwned) ^
      const DeepCollectionEquality().hash(showStagedAndOut) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest
      copyWith(
          {bool? includePeriodRevenue,
          DateTime? revenueFromDate,
          DateTime? revenueToDate,
          String? revenueFilterMode,
          double? revenueFilterAmount,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          bool? includeNotRentedSince,
          DateTime? notRentedSinceDate,
          bool? includeZeroOwned,
          bool? showStagedAndOut,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest(
        includePeriodRevenue: includePeriodRevenue ?? this.includePeriodRevenue,
        revenueFromDate: revenueFromDate ?? this.revenueFromDate,
        revenueToDate: revenueToDate ?? this.revenueToDate,
        revenueFilterMode: revenueFilterMode ?? this.revenueFilterMode,
        revenueFilterAmount: revenueFilterAmount ?? this.revenueFilterAmount,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        includeNotRentedSince:
            includeNotRentedSince ?? this.includeNotRentedSince,
        notRentedSinceDate: notRentedSinceDate ?? this.notRentedSinceDate,
        includeZeroOwned: includeZeroOwned ?? this.includeZeroOwned,
        showStagedAndOut: showStagedAndOut ?? this.showStagedAndOut,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest
      copyWithWrapped(
          {Wrapped<bool?>? includePeriodRevenue,
          Wrapped<DateTime?>? revenueFromDate,
          Wrapped<DateTime?>? revenueToDate,
          Wrapped<String?>? revenueFilterMode,
          Wrapped<double?>? revenueFilterAmount,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<bool?>? includeNotRentedSince,
          Wrapped<DateTime?>? notRentedSinceDate,
          Wrapped<bool?>? includeZeroOwned,
          Wrapped<bool?>? showStagedAndOut,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest(
        includePeriodRevenue: (includePeriodRevenue != null
            ? includePeriodRevenue.value
            : this.includePeriodRevenue),
        revenueFromDate: (revenueFromDate != null
            ? revenueFromDate.value
            : this.revenueFromDate),
        revenueToDate:
            (revenueToDate != null ? revenueToDate.value : this.revenueToDate),
        revenueFilterMode: (revenueFilterMode != null
            ? revenueFilterMode.value
            : this.revenueFilterMode),
        revenueFilterAmount: (revenueFilterAmount != null
            ? revenueFilterAmount.value
            : this.revenueFilterAmount),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        includeNotRentedSince: (includeNotRentedSince != null
            ? includeNotRentedSince.value
            : this.includeNotRentedSince),
        notRentedSinceDate: (notRentedSinceDate != null
            ? notRentedSinceDate.value
            : this.notRentedSinceDate),
        includeZeroOwned: (includeZeroOwned != null
            ? includeZeroOwned.value
            : this.includeZeroOwned),
        showStagedAndOut: (showStagedAndOut != null
            ? showStagedAndOut.value
            : this.showStagedAndOut),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest({
    this.asOfDate,
    this.warehouseId,
    this.ranks,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequestToJson(
          this);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest
      copyWith(
          {DateTime? asOfDate,
          String? warehouseId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        warehouseId: warehouseId ?? this.warehouseId,
        ranks: ranks ?? this.ranks,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? asOfDate,
          Wrapped<String?>? warehouseId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventorySummaryByRankReportRentalInventorySummaryByRankReportRequest(
        asOfDate: (asOfDate != null ? asOfDate.value : this.asOfDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest({
    this.asOfDate,
    this.includeZeroQuantity,
    this.daysUnused,
    this.warehouseId,
    this.departmentId,
    this.dealId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.trackedBys,
    this.sortBy,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequestToJson(
          this);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(name: 'IncludeZeroQuantity', includeIfNull: false)
  final bool? includeZeroQuantity;
  @JsonKey(name: 'DaysUnused', includeIfNull: false)
  final int? daysUnused;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.includeZeroQuantity, includeZeroQuantity) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroQuantity, includeZeroQuantity)) &&
            (identical(other.daysUnused, daysUnused) ||
                const DeepCollectionEquality()
                    .equals(other.daysUnused, daysUnused)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(includeZeroQuantity) ^
      const DeepCollectionEquality().hash(daysUnused) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest
      copyWith(
          {DateTime? asOfDate,
          bool? includeZeroQuantity,
          int? daysUnused,
          String? warehouseId,
          String? departmentId,
          String? dealId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        includeZeroQuantity: includeZeroQuantity ?? this.includeZeroQuantity,
        daysUnused: daysUnused ?? this.daysUnused,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        dealId: dealId ?? this.dealId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? asOfDate,
          Wrapped<bool?>? includeZeroQuantity,
          Wrapped<int?>? daysUnused,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest(
        asOfDate: (asOfDate != null ? asOfDate.value : this.asOfDate),
        includeZeroQuantity: (includeZeroQuantity != null
            ? includeZeroQuantity.value
            : this.includeZeroQuantity),
        daysUnused: (daysUnused != null ? daysUnused.value : this.daysUnused),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest({
    this.fromDate,
    this.toDate,
    this.utilizationFilterMode,
    this.utilizationFilterAmount,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.customerId,
    this.ranks,
    this.trackedBys,
    this.excludeZeroOwned,
    this.filterDatesByUtilizationPercent,
    this.onlyIncludeItemsThatAreTheMainItemOfAComplete,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'UtilizationFilterMode', includeIfNull: false)
  final String? utilizationFilterMode;
  @JsonKey(name: 'UtilizationFilterAmount', includeIfNull: false)
  final double? utilizationFilterAmount;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'ExcludeZeroOwned', includeIfNull: false)
  final bool? excludeZeroOwned;
  @JsonKey(name: 'FilterDatesByUtilizationPercent', includeIfNull: false)
  final bool? filterDatesByUtilizationPercent;
  @JsonKey(
      name: 'OnlyIncludeItemsThatAreTheMainItemOfAComplete',
      includeIfNull: false)
  final bool? onlyIncludeItemsThatAreTheMainItemOfAComplete;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.utilizationFilterMode, utilizationFilterMode) ||
                const DeepCollectionEquality().equals(
                    other.utilizationFilterMode, utilizationFilterMode)) &&
            (identical(other.utilizationFilterAmount, utilizationFilterAmount) ||
                const DeepCollectionEquality().equals(
                    other.utilizationFilterAmount, utilizationFilterAmount)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.excludeZeroOwned, excludeZeroOwned) ||
                const DeepCollectionEquality()
                    .equals(other.excludeZeroOwned, excludeZeroOwned)) &&
            (identical(other.filterDatesByUtilizationPercent, filterDatesByUtilizationPercent) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesByUtilizationPercent,
                    filterDatesByUtilizationPercent)) &&
            (identical(other.onlyIncludeItemsThatAreTheMainItemOfAComplete, onlyIncludeItemsThatAreTheMainItemOfAComplete) ||
                const DeepCollectionEquality().equals(other.onlyIncludeItemsThatAreTheMainItemOfAComplete, onlyIncludeItemsThatAreTheMainItemOfAComplete)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(utilizationFilterMode) ^
      const DeepCollectionEquality().hash(utilizationFilterAmount) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(excludeZeroOwned) ^
      const DeepCollectionEquality().hash(filterDatesByUtilizationPercent) ^
      const DeepCollectionEquality()
          .hash(onlyIncludeItemsThatAreTheMainItemOfAComplete) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? utilizationFilterMode,
          double? utilizationFilterAmount,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          String? customerId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          bool? excludeZeroOwned,
          bool? filterDatesByUtilizationPercent,
          bool? onlyIncludeItemsThatAreTheMainItemOfAComplete,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        utilizationFilterMode:
            utilizationFilterMode ?? this.utilizationFilterMode,
        utilizationFilterAmount:
            utilizationFilterAmount ?? this.utilizationFilterAmount,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customerId: customerId ?? this.customerId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        excludeZeroOwned: excludeZeroOwned ?? this.excludeZeroOwned,
        filterDatesByUtilizationPercent: filterDatesByUtilizationPercent ??
            this.filterDatesByUtilizationPercent,
        onlyIncludeItemsThatAreTheMainItemOfAComplete:
            onlyIncludeItemsThatAreTheMainItemOfAComplete ??
                this.onlyIncludeItemsThatAreTheMainItemOfAComplete,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? utilizationFilterMode,
          Wrapped<double?>? utilizationFilterAmount,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? customerId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<bool?>? excludeZeroOwned,
          Wrapped<bool?>? filterDatesByUtilizationPercent,
          Wrapped<bool?>? onlyIncludeItemsThatAreTheMainItemOfAComplete,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageByCustomerReportRentalInventoryUsageByCustomerReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        utilizationFilterMode: (utilizationFilterMode != null
            ? utilizationFilterMode.value
            : this.utilizationFilterMode),
        utilizationFilterAmount: (utilizationFilterAmount != null
            ? utilizationFilterAmount.value
            : this.utilizationFilterAmount),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        excludeZeroOwned: (excludeZeroOwned != null
            ? excludeZeroOwned.value
            : this.excludeZeroOwned),
        filterDatesByUtilizationPercent:
            (filterDatesByUtilizationPercent != null
                ? filterDatesByUtilizationPercent.value
                : this.filterDatesByUtilizationPercent),
        onlyIncludeItemsThatAreTheMainItemOfAComplete:
            (onlyIncludeItemsThatAreTheMainItemOfAComplete != null
                ? onlyIncludeItemsThatAreTheMainItemOfAComplete.value
                : this.onlyIncludeItemsThatAreTheMainItemOfAComplete),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest({
    this.fromDate,
    this.toDate,
    this.utilizationFilterMode,
    this.utilizationFilterAmount,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.excludeZeroOwned,
    this.filterDatesByUtilizationPercent,
    this.onlyIncludeItemsThatAreTheMainItemOfAComplete,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'UtilizationFilterMode', includeIfNull: false)
  final String? utilizationFilterMode;
  @JsonKey(name: 'UtilizationFilterAmount', includeIfNull: false)
  final double? utilizationFilterAmount;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'ExcludeZeroOwned', includeIfNull: false)
  final bool? excludeZeroOwned;
  @JsonKey(name: 'FilterDatesByUtilizationPercent', includeIfNull: false)
  final bool? filterDatesByUtilizationPercent;
  @JsonKey(
      name: 'OnlyIncludeItemsThatAreTheMainItemOfAComplete',
      includeIfNull: false)
  final bool? onlyIncludeItemsThatAreTheMainItemOfAComplete;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.utilizationFilterMode, utilizationFilterMode) ||
                const DeepCollectionEquality().equals(
                    other.utilizationFilterMode, utilizationFilterMode)) &&
            (identical(other.utilizationFilterAmount, utilizationFilterAmount) ||
                const DeepCollectionEquality().equals(
                    other.utilizationFilterAmount, utilizationFilterAmount)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.excludeZeroOwned, excludeZeroOwned) ||
                const DeepCollectionEquality()
                    .equals(other.excludeZeroOwned, excludeZeroOwned)) &&
            (identical(other.filterDatesByUtilizationPercent, filterDatesByUtilizationPercent) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesByUtilizationPercent,
                    filterDatesByUtilizationPercent)) &&
            (identical(other.onlyIncludeItemsThatAreTheMainItemOfAComplete, onlyIncludeItemsThatAreTheMainItemOfAComplete) ||
                const DeepCollectionEquality().equals(
                    other.onlyIncludeItemsThatAreTheMainItemOfAComplete,
                    onlyIncludeItemsThatAreTheMainItemOfAComplete)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(utilizationFilterMode) ^
      const DeepCollectionEquality().hash(utilizationFilterAmount) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(excludeZeroOwned) ^
      const DeepCollectionEquality().hash(filterDatesByUtilizationPercent) ^
      const DeepCollectionEquality()
          .hash(onlyIncludeItemsThatAreTheMainItemOfAComplete) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? utilizationFilterMode,
          double? utilizationFilterAmount,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          bool? excludeZeroOwned,
          bool? filterDatesByUtilizationPercent,
          bool? onlyIncludeItemsThatAreTheMainItemOfAComplete,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        utilizationFilterMode:
            utilizationFilterMode ?? this.utilizationFilterMode,
        utilizationFilterAmount:
            utilizationFilterAmount ?? this.utilizationFilterAmount,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        excludeZeroOwned: excludeZeroOwned ?? this.excludeZeroOwned,
        filterDatesByUtilizationPercent: filterDatesByUtilizationPercent ??
            this.filterDatesByUtilizationPercent,
        onlyIncludeItemsThatAreTheMainItemOfAComplete:
            onlyIncludeItemsThatAreTheMainItemOfAComplete ??
                this.onlyIncludeItemsThatAreTheMainItemOfAComplete,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? utilizationFilterMode,
          Wrapped<double?>? utilizationFilterAmount,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<bool?>? excludeZeroOwned,
          Wrapped<bool?>? filterDatesByUtilizationPercent,
          Wrapped<bool?>? onlyIncludeItemsThatAreTheMainItemOfAComplete,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        utilizationFilterMode: (utilizationFilterMode != null
            ? utilizationFilterMode.value
            : this.utilizationFilterMode),
        utilizationFilterAmount: (utilizationFilterAmount != null
            ? utilizationFilterAmount.value
            : this.utilizationFilterAmount),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        excludeZeroOwned: (excludeZeroOwned != null
            ? excludeZeroOwned.value
            : this.excludeZeroOwned),
        filterDatesByUtilizationPercent:
            (filterDatesByUtilizationPercent != null
                ? filterDatesByUtilizationPercent.value
                : this.filterDatesByUtilizationPercent),
        onlyIncludeItemsThatAreTheMainItemOfAComplete:
            (onlyIncludeItemsThatAreTheMainItemOfAComplete != null
                ? onlyIncludeItemsThatAreTheMainItemOfAComplete.value
                : this.onlyIncludeItemsThatAreTheMainItemOfAComplete),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest({
    this.fromDate,
    this.toDate,
    this.includeOwned,
    this.includeConsigned,
    this.includeZeroQuantity,
    this.groupByICode,
    this.quantityValueBasedOn,
    this.serializedValueBasedOn,
    this.ranks,
    this.trackedBys,
    this.summary,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IncludeOwned', includeIfNull: false)
  final bool? includeOwned;
  @JsonKey(name: 'IncludeConsigned', includeIfNull: false)
  final bool? includeConsigned;
  @JsonKey(name: 'IncludeZeroQuantity', includeIfNull: false)
  final bool? includeZeroQuantity;
  @JsonKey(name: 'GroupByICode', includeIfNull: false)
  final bool? groupByICode;
  @JsonKey(name: 'QuantityValueBasedOn', includeIfNull: false)
  final String? quantityValueBasedOn;
  @JsonKey(name: 'SerializedValueBasedOn', includeIfNull: false)
  final String? serializedValueBasedOn;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'Summary', includeIfNull: false)
  final bool? summary;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.includeOwned, includeOwned) ||
                const DeepCollectionEquality()
                    .equals(other.includeOwned, includeOwned)) &&
            (identical(other.includeConsigned, includeConsigned) ||
                const DeepCollectionEquality()
                    .equals(other.includeConsigned, includeConsigned)) &&
            (identical(other.includeZeroQuantity, includeZeroQuantity) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroQuantity, includeZeroQuantity)) &&
            (identical(other.groupByICode, groupByICode) ||
                const DeepCollectionEquality()
                    .equals(other.groupByICode, groupByICode)) &&
            (identical(other.quantityValueBasedOn, quantityValueBasedOn) ||
                const DeepCollectionEquality().equals(
                    other.quantityValueBasedOn, quantityValueBasedOn)) &&
            (identical(other.serializedValueBasedOn, serializedValueBasedOn) ||
                const DeepCollectionEquality().equals(
                    other.serializedValueBasedOn, serializedValueBasedOn)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.summary, summary) ||
                const DeepCollectionEquality()
                    .equals(other.summary, summary)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(includeOwned) ^
      const DeepCollectionEquality().hash(includeConsigned) ^
      const DeepCollectionEquality().hash(includeZeroQuantity) ^
      const DeepCollectionEquality().hash(groupByICode) ^
      const DeepCollectionEquality().hash(quantityValueBasedOn) ^
      const DeepCollectionEquality().hash(serializedValueBasedOn) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(summary) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? includeOwned,
          bool? includeConsigned,
          bool? includeZeroQuantity,
          bool? groupByICode,
          String? quantityValueBasedOn,
          String? serializedValueBasedOn,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          bool? summary,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        includeOwned: includeOwned ?? this.includeOwned,
        includeConsigned: includeConsigned ?? this.includeConsigned,
        includeZeroQuantity: includeZeroQuantity ?? this.includeZeroQuantity,
        groupByICode: groupByICode ?? this.groupByICode,
        quantityValueBasedOn: quantityValueBasedOn ?? this.quantityValueBasedOn,
        serializedValueBasedOn:
            serializedValueBasedOn ?? this.serializedValueBasedOn,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        summary: summary ?? this.summary,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<bool?>? includeOwned,
          Wrapped<bool?>? includeConsigned,
          Wrapped<bool?>? includeZeroQuantity,
          Wrapped<bool?>? groupByICode,
          Wrapped<String?>? quantityValueBasedOn,
          Wrapped<String?>? serializedValueBasedOn,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<bool?>? summary,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        includeOwned:
            (includeOwned != null ? includeOwned.value : this.includeOwned),
        includeConsigned: (includeConsigned != null
            ? includeConsigned.value
            : this.includeConsigned),
        includeZeroQuantity: (includeZeroQuantity != null
            ? includeZeroQuantity.value
            : this.includeZeroQuantity),
        groupByICode:
            (groupByICode != null ? groupByICode.value : this.groupByICode),
        quantityValueBasedOn: (quantityValueBasedOn != null
            ? quantityValueBasedOn.value
            : this.quantityValueBasedOn),
        serializedValueBasedOn: (serializedValueBasedOn != null
            ? serializedValueBasedOn.value
            : this.serializedValueBasedOn),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        summary: (summary != null ? summary.value : this.summary),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest({
    this.fromDate,
    this.toDate,
    this.excludeRetiredItems,
    this.excludeUnretiredItems,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.customerId,
    this.dealId,
    this.retiredReasonId,
    this.unretiredReasonId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'ExcludeRetiredItems', includeIfNull: false)
  final bool? excludeRetiredItems;
  @JsonKey(name: 'ExcludeUnretiredItems', includeIfNull: false)
  final bool? excludeUnretiredItems;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'RetiredReasonId', includeIfNull: false)
  final String? retiredReasonId;
  @JsonKey(name: 'UnretiredReasonId', includeIfNull: false)
  final String? unretiredReasonId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.excludeRetiredItems, excludeRetiredItems) ||
                const DeepCollectionEquality()
                    .equals(other.excludeRetiredItems, excludeRetiredItems)) &&
            (identical(other.excludeUnretiredItems, excludeUnretiredItems) ||
                const DeepCollectionEquality().equals(
                    other.excludeUnretiredItems, excludeUnretiredItems)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.retiredReasonId, retiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.retiredReasonId, retiredReasonId)) &&
            (identical(other.unretiredReasonId, unretiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.unretiredReasonId, unretiredReasonId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(excludeRetiredItems) ^
      const DeepCollectionEquality().hash(excludeUnretiredItems) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(retiredReasonId) ^
      const DeepCollectionEquality().hash(unretiredReasonId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? excludeRetiredItems,
          bool? excludeUnretiredItems,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          String? customerId,
          String? dealId,
          String? retiredReasonId,
          String? unretiredReasonId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        excludeRetiredItems: excludeRetiredItems ?? this.excludeRetiredItems,
        excludeUnretiredItems:
            excludeUnretiredItems ?? this.excludeUnretiredItems,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        retiredReasonId: retiredReasonId ?? this.retiredReasonId,
        unretiredReasonId: unretiredReasonId ?? this.unretiredReasonId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<bool?>? excludeRetiredItems,
          Wrapped<bool?>? excludeUnretiredItems,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? retiredReasonId,
          Wrapped<String?>? unretiredReasonId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        excludeRetiredItems: (excludeRetiredItems != null
            ? excludeRetiredItems.value
            : this.excludeRetiredItems),
        excludeUnretiredItems: (excludeUnretiredItems != null
            ? excludeUnretiredItems.value
            : this.excludeUnretiredItems),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        retiredReasonId: (retiredReasonId != null
            ? retiredReasonId.value
            : this.retiredReasonId),
        unretiredReasonId: (unretiredReasonId != null
            ? unretiredReasonId.value
            : this.unretiredReasonId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest({
    this.fromDate,
    this.toDate,
    this.includeUnretired,
    this.ranks,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.customerId,
    this.dealId,
    this.retiredReasonId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IncludeUnretired', includeIfNull: false)
  final bool? includeUnretired;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'RetiredReasonId', includeIfNull: false)
  final String? retiredReasonId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.includeUnretired, includeUnretired) ||
                const DeepCollectionEquality()
                    .equals(other.includeUnretired, includeUnretired)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.retiredReasonId, retiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.retiredReasonId, retiredReasonId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(includeUnretired) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(retiredReasonId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? includeUnretired,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? customerId,
          String? dealId,
          String? retiredReasonId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        includeUnretired: includeUnretired ?? this.includeUnretired,
        ranks: ranks ?? this.ranks,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        retiredReasonId: retiredReasonId ?? this.retiredReasonId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<bool?>? includeUnretired,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? retiredReasonId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        includeUnretired: (includeUnretired != null
            ? includeUnretired.value
            : this.includeUnretired),
        ranks: (ranks != null ? ranks.value : this.ranks),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        retiredReasonId: (retiredReasonId != null
            ? retiredReasonId.value
            : this.retiredReasonId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.dealId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.userId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UserId', includeIfNull: false)
  final String? userId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? dealId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? userId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        dealId: dealId ?? this.dealId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        userId: userId ?? this.userId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? userId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        userId: (userId != null ? userId.value : this.userId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest {
  WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest({
    this.usePeriodSelector,
    this.reportYear,
    this.reportPeriod,
    this.useDateRange,
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.includeZeroCurrentOwned,
    this.includeZeroAverageOwned,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequestToJson(
          this);

  @JsonKey(name: 'UsePeriodSelector', includeIfNull: false)
  final bool? usePeriodSelector;
  @JsonKey(name: 'ReportYear', includeIfNull: false)
  final String? reportYear;
  @JsonKey(name: 'ReportPeriod', includeIfNull: false)
  final String? reportPeriod;
  @JsonKey(name: 'UseDateRange', includeIfNull: false)
  final bool? useDateRange;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'IncludeZeroCurrentOwned', includeIfNull: false)
  final bool? includeZeroCurrentOwned;
  @JsonKey(name: 'IncludeZeroAverageOwned', includeIfNull: false)
  final bool? includeZeroAverageOwned;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest &&
            (identical(other.usePeriodSelector, usePeriodSelector) ||
                const DeepCollectionEquality()
                    .equals(other.usePeriodSelector, usePeriodSelector)) &&
            (identical(other.reportYear, reportYear) ||
                const DeepCollectionEquality()
                    .equals(other.reportYear, reportYear)) &&
            (identical(other.reportPeriod, reportPeriod) ||
                const DeepCollectionEquality()
                    .equals(other.reportPeriod, reportPeriod)) &&
            (identical(other.useDateRange, useDateRange) ||
                const DeepCollectionEquality()
                    .equals(other.useDateRange, useDateRange)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.includeZeroCurrentOwned, includeZeroCurrentOwned) ||
                const DeepCollectionEquality().equals(
                    other.includeZeroCurrentOwned, includeZeroCurrentOwned)) &&
            (identical(other.includeZeroAverageOwned, includeZeroAverageOwned) ||
                const DeepCollectionEquality().equals(
                    other.includeZeroAverageOwned, includeZeroAverageOwned)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(usePeriodSelector) ^
      const DeepCollectionEquality().hash(reportYear) ^
      const DeepCollectionEquality().hash(reportPeriod) ^
      const DeepCollectionEquality().hash(useDateRange) ^
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(includeZeroCurrentOwned) ^
      const DeepCollectionEquality().hash(includeZeroAverageOwned) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest {
  WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest
      copyWith(
          {bool? usePeriodSelector,
          String? reportYear,
          String? reportPeriod,
          bool? useDateRange,
          DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          bool? includeZeroCurrentOwned,
          bool? includeZeroAverageOwned,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest(
        usePeriodSelector: usePeriodSelector ?? this.usePeriodSelector,
        reportYear: reportYear ?? this.reportYear,
        reportPeriod: reportPeriod ?? this.reportPeriod,
        useDateRange: useDateRange ?? this.useDateRange,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        includeZeroCurrentOwned:
            includeZeroCurrentOwned ?? this.includeZeroCurrentOwned,
        includeZeroAverageOwned:
            includeZeroAverageOwned ?? this.includeZeroAverageOwned,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest
      copyWithWrapped(
          {Wrapped<bool?>? usePeriodSelector,
          Wrapped<String?>? reportYear,
          Wrapped<String?>? reportPeriod,
          Wrapped<bool?>? useDateRange,
          Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<bool?>? includeZeroCurrentOwned,
          Wrapped<bool?>? includeZeroAverageOwned,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest(
        usePeriodSelector: (usePeriodSelector != null
            ? usePeriodSelector.value
            : this.usePeriodSelector),
        reportYear: (reportYear != null ? reportYear.value : this.reportYear),
        reportPeriod:
            (reportPeriod != null ? reportPeriod.value : this.reportPeriod),
        useDateRange:
            (useDateRange != null ? useDateRange.value : this.useDateRange),
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        includeZeroCurrentOwned: (includeZeroCurrentOwned != null
            ? includeZeroCurrentOwned.value
            : this.includeZeroCurrentOwned),
        includeZeroAverageOwned: (includeZeroAverageOwned != null
            ? includeZeroAverageOwned.value
            : this.includeZeroAverageOwned),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest {
  WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest({
    this.brochureId,
    this.summary,
    this.includeValue,
    this.printOneImagePerPage,
    this.printHeader,
    this.headerTitle,
    this.printFooter,
    this.sortBy,
    this.dealIds,
    this.orderIds,
    this.setIds,
    this.imageId,
    this.uniqueId1,
    this.uniqueId2,
    this.uniqueId3,
    this.iCode,
    this.description,
    this.barcode,
    this.value,
    this.quanity,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequestToJson(
          this);

  @JsonKey(name: 'BrochureId', includeIfNull: false)
  final String? brochureId;
  @JsonKey(name: 'Summary', includeIfNull: false)
  final bool? summary;
  @JsonKey(name: 'IncludeValue', includeIfNull: false)
  final String? includeValue;
  @JsonKey(name: 'PrintOneImagePerPage', includeIfNull: false)
  final bool? printOneImagePerPage;
  @JsonKey(name: 'PrintHeader', includeIfNull: false)
  final bool? printHeader;
  @JsonKey(name: 'HeaderTitle', includeIfNull: false)
  final String? headerTitle;
  @JsonKey(name: 'PrintFooter', includeIfNull: false)
  final bool? printFooter;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'DealIds', includeIfNull: false)
  final String? dealIds;
  @JsonKey(name: 'OrderIds', includeIfNull: false)
  final String? orderIds;
  @JsonKey(name: 'SetIds', includeIfNull: false)
  final String? setIds;
  @JsonKey(name: 'ImageId', includeIfNull: false)
  final String? imageId;
  @JsonKey(name: 'UniqueId1', includeIfNull: false)
  final String? uniqueId1;
  @JsonKey(name: 'UniqueId2', includeIfNull: false)
  final String? uniqueId2;
  @JsonKey(name: 'UniqueId3', includeIfNull: false)
  final String? uniqueId3;
  @JsonKey(name: 'ICode', includeIfNull: false)
  final String? iCode;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Barcode', includeIfNull: false)
  final String? barcode;
  @JsonKey(name: 'Value', includeIfNull: false)
  final String? value;
  @JsonKey(name: 'Quanity', includeIfNull: false)
  final int? quanity;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest &&
            (identical(other.brochureId, brochureId) ||
                const DeepCollectionEquality()
                    .equals(other.brochureId, brochureId)) &&
            (identical(other.summary, summary) ||
                const DeepCollectionEquality()
                    .equals(other.summary, summary)) &&
            (identical(other.includeValue, includeValue) ||
                const DeepCollectionEquality()
                    .equals(other.includeValue, includeValue)) &&
            (identical(other.printOneImagePerPage, printOneImagePerPage) ||
                const DeepCollectionEquality().equals(
                    other.printOneImagePerPage, printOneImagePerPage)) &&
            (identical(other.printHeader, printHeader) ||
                const DeepCollectionEquality()
                    .equals(other.printHeader, printHeader)) &&
            (identical(other.headerTitle, headerTitle) ||
                const DeepCollectionEquality()
                    .equals(other.headerTitle, headerTitle)) &&
            (identical(other.printFooter, printFooter) ||
                const DeepCollectionEquality()
                    .equals(other.printFooter, printFooter)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.dealIds, dealIds) ||
                const DeepCollectionEquality()
                    .equals(other.dealIds, dealIds)) &&
            (identical(other.orderIds, orderIds) ||
                const DeepCollectionEquality()
                    .equals(other.orderIds, orderIds)) &&
            (identical(other.setIds, setIds) ||
                const DeepCollectionEquality().equals(other.setIds, setIds)) &&
            (identical(other.imageId, imageId) ||
                const DeepCollectionEquality()
                    .equals(other.imageId, imageId)) &&
            (identical(other.uniqueId1, uniqueId1) ||
                const DeepCollectionEquality()
                    .equals(other.uniqueId1, uniqueId1)) &&
            (identical(other.uniqueId2, uniqueId2) ||
                const DeepCollectionEquality()
                    .equals(other.uniqueId2, uniqueId2)) &&
            (identical(other.uniqueId3, uniqueId3) ||
                const DeepCollectionEquality()
                    .equals(other.uniqueId3, uniqueId3)) &&
            (identical(other.iCode, iCode) ||
                const DeepCollectionEquality().equals(other.iCode, iCode)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.barcode, barcode) || const DeepCollectionEquality().equals(other.barcode, barcode)) &&
            (identical(other.value, value) || const DeepCollectionEquality().equals(other.value, value)) &&
            (identical(other.quanity, quanity) || const DeepCollectionEquality().equals(other.quanity, quanity)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(brochureId) ^
      const DeepCollectionEquality().hash(summary) ^
      const DeepCollectionEquality().hash(includeValue) ^
      const DeepCollectionEquality().hash(printOneImagePerPage) ^
      const DeepCollectionEquality().hash(printHeader) ^
      const DeepCollectionEquality().hash(headerTitle) ^
      const DeepCollectionEquality().hash(printFooter) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(dealIds) ^
      const DeepCollectionEquality().hash(orderIds) ^
      const DeepCollectionEquality().hash(setIds) ^
      const DeepCollectionEquality().hash(imageId) ^
      const DeepCollectionEquality().hash(uniqueId1) ^
      const DeepCollectionEquality().hash(uniqueId2) ^
      const DeepCollectionEquality().hash(uniqueId3) ^
      const DeepCollectionEquality().hash(iCode) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(barcode) ^
      const DeepCollectionEquality().hash(value) ^
      const DeepCollectionEquality().hash(quanity) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest {
  WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest
      copyWith(
          {String? brochureId,
          bool? summary,
          String? includeValue,
          bool? printOneImagePerPage,
          bool? printHeader,
          String? headerTitle,
          bool? printFooter,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? dealIds,
          String? orderIds,
          String? setIds,
          String? imageId,
          String? uniqueId1,
          String? uniqueId2,
          String? uniqueId3,
          String? iCode,
          String? description,
          String? barcode,
          String? value,
          int? quanity,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest(
        brochureId: brochureId ?? this.brochureId,
        summary: summary ?? this.summary,
        includeValue: includeValue ?? this.includeValue,
        printOneImagePerPage: printOneImagePerPage ?? this.printOneImagePerPage,
        printHeader: printHeader ?? this.printHeader,
        headerTitle: headerTitle ?? this.headerTitle,
        printFooter: printFooter ?? this.printFooter,
        sortBy: sortBy ?? this.sortBy,
        dealIds: dealIds ?? this.dealIds,
        orderIds: orderIds ?? this.orderIds,
        setIds: setIds ?? this.setIds,
        imageId: imageId ?? this.imageId,
        uniqueId1: uniqueId1 ?? this.uniqueId1,
        uniqueId2: uniqueId2 ?? this.uniqueId2,
        uniqueId3: uniqueId3 ?? this.uniqueId3,
        iCode: iCode ?? this.iCode,
        description: description ?? this.description,
        barcode: barcode ?? this.barcode,
        value: value ?? this.value,
        quanity: quanity ?? this.quanity,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest
      copyWithWrapped(
          {Wrapped<String?>? brochureId,
          Wrapped<bool?>? summary,
          Wrapped<String?>? includeValue,
          Wrapped<bool?>? printOneImagePerPage,
          Wrapped<bool?>? printHeader,
          Wrapped<String?>? headerTitle,
          Wrapped<bool?>? printFooter,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? dealIds,
          Wrapped<String?>? orderIds,
          Wrapped<String?>? setIds,
          Wrapped<String?>? imageId,
          Wrapped<String?>? uniqueId1,
          Wrapped<String?>? uniqueId2,
          Wrapped<String?>? uniqueId3,
          Wrapped<String?>? iCode,
          Wrapped<String?>? description,
          Wrapped<String?>? barcode,
          Wrapped<String?>? value,
          Wrapped<int?>? quanity,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsSetBrochureSetBrochureReportRequest(
        brochureId: (brochureId != null ? brochureId.value : this.brochureId),
        summary: (summary != null ? summary.value : this.summary),
        includeValue:
            (includeValue != null ? includeValue.value : this.includeValue),
        printOneImagePerPage: (printOneImagePerPage != null
            ? printOneImagePerPage.value
            : this.printOneImagePerPage),
        printHeader:
            (printHeader != null ? printHeader.value : this.printHeader),
        headerTitle:
            (headerTitle != null ? headerTitle.value : this.headerTitle),
        printFooter:
            (printFooter != null ? printFooter.value : this.printFooter),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        dealIds: (dealIds != null ? dealIds.value : this.dealIds),
        orderIds: (orderIds != null ? orderIds.value : this.orderIds),
        setIds: (setIds != null ? setIds.value : this.setIds),
        imageId: (imageId != null ? imageId.value : this.imageId),
        uniqueId1: (uniqueId1 != null ? uniqueId1.value : this.uniqueId1),
        uniqueId2: (uniqueId2 != null ? uniqueId2.value : this.uniqueId2),
        uniqueId3: (uniqueId3 != null ? uniqueId3.value : this.uniqueId3),
        iCode: (iCode != null ? iCode.value : this.iCode),
        description:
            (description != null ? description.value : this.description),
        barcode: (barcode != null ? barcode.value : this.barcode),
        value: (value != null ? value.value : this.value),
        quanity: (quanity != null ? quanity.value : this.quanity),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.unretiredReasonId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UnretiredReasonId', includeIfNull: false)
  final String? unretiredReasonId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.unretiredReasonId, unretiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.unretiredReasonId, unretiredReasonId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(unretiredReasonId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? unretiredReasonId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        unretiredReasonId: unretiredReasonId ?? this.unretiredReasonId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? unretiredReasonId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        unretiredReasonId: (unretiredReasonId != null
            ? unretiredReasonId.value
            : this.unretiredReasonId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest({
    this.asOfDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.dealId,
    this.excludeHiatus,
    this.ownershipTypes,
    this.trackedBys,
    this.ranks,
    this.fixedAsset,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequestToJson(
          this);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'ExcludeHiatus', includeIfNull: false)
  final bool? excludeHiatus;
  @JsonKey(
      name: 'OwnershipTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
    name: 'FixedAsset',
    includeIfNull: false,
    toJson: webApiIncludeExcludeAllToJson,
    fromJson: webApiIncludeExcludeAllFromJson,
  )
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.excludeHiatus, excludeHiatus) ||
                const DeepCollectionEquality()
                    .equals(other.excludeHiatus, excludeHiatus)) &&
            (identical(other.ownershipTypes, ownershipTypes) ||
                const DeepCollectionEquality()
                    .equals(other.ownershipTypes, ownershipTypes)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(excludeHiatus) ^
      const DeepCollectionEquality().hash(ownershipTypes) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest
      copyWith(
          {DateTime? asOfDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? dealId,
          bool? excludeHiatus,
          List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        dealId: dealId ?? this.dealId,
        excludeHiatus: excludeHiatus ?? this.excludeHiatus,
        ownershipTypes: ownershipTypes ?? this.ownershipTypes,
        trackedBys: trackedBys ?? this.trackedBys,
        ranks: ranks ?? this.ranks,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? asOfDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? dealId,
          Wrapped<bool?>? excludeHiatus,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              ownershipTypes,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<enums.WebApiIncludeExcludeAll?>? fixedAsset,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest(
        asOfDate: (asOfDate != null ? asOfDate.value : this.asOfDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        excludeHiatus:
            (excludeHiatus != null ? excludeHiatus.value : this.excludeHiatus),
        ownershipTypes: (ownershipTypes != null
            ? ownershipTypes.value
            : this.ownershipTypes),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        ranks: (ranks != null ? ranks.value : this.ranks),
        fixedAsset: (fixedAsset != null ? fixedAsset.value : this.fixedAsset),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest {
  WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest({
    this.repairOrderStatus,
    this.priority,
    this.billable,
    this.billed,
    this.owned,
    this.daysInRepair,
    this.daysInRepairFilterMode,
    this.includeOutsideRepairsOnly,
    this.includeDamageNotes,
    this.includeCorrectionNotes,
    this.warehouseId,
    this.departmentId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.repairItemStatusId,
    this.vendorId,
    this.vendorRepairItemStatusId,
    this.dealId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequestToJson(
          this);

  @JsonKey(
      name: 'RepairOrderStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? repairOrderStatus;
  @JsonKey(
      name: 'Priority',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? priority;
  @JsonKey(name: 'Billable', includeIfNull: false)
  final bool? billable;
  @JsonKey(name: 'Billed', includeIfNull: false)
  final bool? billed;
  @JsonKey(name: 'Owned', includeIfNull: false)
  final bool? owned;
  @JsonKey(name: 'DaysInRepair', includeIfNull: false)
  final int? daysInRepair;
  @JsonKey(name: 'DaysInRepairFilterMode', includeIfNull: false)
  final String? daysInRepairFilterMode;
  @JsonKey(name: 'IncludeOutsideRepairsOnly', includeIfNull: false)
  final bool? includeOutsideRepairsOnly;
  @JsonKey(name: 'IncludeDamageNotes', includeIfNull: false)
  final bool? includeDamageNotes;
  @JsonKey(name: 'IncludeCorrectionNotes', includeIfNull: false)
  final bool? includeCorrectionNotes;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'RepairItemStatusId', includeIfNull: false)
  final String? repairItemStatusId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'VendorRepairItemStatusId', includeIfNull: false)
  final String? vendorRepairItemStatusId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest &&
            (identical(other.repairOrderStatus, repairOrderStatus) ||
                const DeepCollectionEquality()
                    .equals(other.repairOrderStatus, repairOrderStatus)) &&
            (identical(other.priority, priority) ||
                const DeepCollectionEquality()
                    .equals(other.priority, priority)) &&
            (identical(other.billable, billable) ||
                const DeepCollectionEquality()
                    .equals(other.billable, billable)) &&
            (identical(other.billed, billed) ||
                const DeepCollectionEquality().equals(other.billed, billed)) &&
            (identical(other.owned, owned) ||
                const DeepCollectionEquality().equals(other.owned, owned)) &&
            (identical(other.daysInRepair, daysInRepair) ||
                const DeepCollectionEquality()
                    .equals(other.daysInRepair, daysInRepair)) &&
            (identical(other.daysInRepairFilterMode, daysInRepairFilterMode) ||
                const DeepCollectionEquality().equals(
                    other.daysInRepairFilterMode, daysInRepairFilterMode)) &&
            (identical(other.includeOutsideRepairsOnly, includeOutsideRepairsOnly) ||
                const DeepCollectionEquality().equals(
                    other.includeOutsideRepairsOnly,
                    includeOutsideRepairsOnly)) &&
            (identical(other.includeDamageNotes, includeDamageNotes) ||
                const DeepCollectionEquality()
                    .equals(other.includeDamageNotes, includeDamageNotes)) &&
            (identical(other.includeCorrectionNotes, includeCorrectionNotes) ||
                const DeepCollectionEquality().equals(
                    other.includeCorrectionNotes, includeCorrectionNotes)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) || const DeepCollectionEquality().equals(other.inventoryId, inventoryId)) &&
            (identical(other.repairItemStatusId, repairItemStatusId) || const DeepCollectionEquality().equals(other.repairItemStatusId, repairItemStatusId)) &&
            (identical(other.vendorId, vendorId) || const DeepCollectionEquality().equals(other.vendorId, vendorId)) &&
            (identical(other.vendorRepairItemStatusId, vendorRepairItemStatusId) || const DeepCollectionEquality().equals(other.vendorRepairItemStatusId, vendorRepairItemStatusId)) &&
            (identical(other.dealId, dealId) || const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.userDepartmentId, userDepartmentId) || const DeepCollectionEquality().equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) || const DeepCollectionEquality().equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) || const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(repairOrderStatus) ^
      const DeepCollectionEquality().hash(priority) ^
      const DeepCollectionEquality().hash(billable) ^
      const DeepCollectionEquality().hash(billed) ^
      const DeepCollectionEquality().hash(owned) ^
      const DeepCollectionEquality().hash(daysInRepair) ^
      const DeepCollectionEquality().hash(daysInRepairFilterMode) ^
      const DeepCollectionEquality().hash(includeOutsideRepairsOnly) ^
      const DeepCollectionEquality().hash(includeDamageNotes) ^
      const DeepCollectionEquality().hash(includeCorrectionNotes) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(repairItemStatusId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(vendorRepairItemStatusId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequestExtension
    on WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest {
  WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest
      copyWith(
          {List<FwStandardModelsSelectedCheckBoxListItem>? repairOrderStatus,
          List<FwStandardModelsSelectedCheckBoxListItem>? priority,
          bool? billable,
          bool? billed,
          bool? owned,
          int? daysInRepair,
          String? daysInRepairFilterMode,
          bool? includeOutsideRepairsOnly,
          bool? includeDamageNotes,
          bool? includeCorrectionNotes,
          String? warehouseId,
          String? departmentId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? repairItemStatusId,
          String? vendorId,
          String? vendorRepairItemStatusId,
          String? dealId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest(
        repairOrderStatus: repairOrderStatus ?? this.repairOrderStatus,
        priority: priority ?? this.priority,
        billable: billable ?? this.billable,
        billed: billed ?? this.billed,
        owned: owned ?? this.owned,
        daysInRepair: daysInRepair ?? this.daysInRepair,
        daysInRepairFilterMode:
            daysInRepairFilterMode ?? this.daysInRepairFilterMode,
        includeOutsideRepairsOnly:
            includeOutsideRepairsOnly ?? this.includeOutsideRepairsOnly,
        includeDamageNotes: includeDamageNotes ?? this.includeDamageNotes,
        includeCorrectionNotes:
            includeCorrectionNotes ?? this.includeCorrectionNotes,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        repairItemStatusId: repairItemStatusId ?? this.repairItemStatusId,
        vendorId: vendorId ?? this.vendorId,
        vendorRepairItemStatusId:
            vendorRepairItemStatusId ?? this.vendorRepairItemStatusId,
        dealId: dealId ?? this.dealId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest
      copyWithWrapped(
          {Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              repairOrderStatus,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? priority,
          Wrapped<bool?>? billable,
          Wrapped<bool?>? billed,
          Wrapped<bool?>? owned,
          Wrapped<int?>? daysInRepair,
          Wrapped<String?>? daysInRepairFilterMode,
          Wrapped<bool?>? includeOutsideRepairsOnly,
          Wrapped<bool?>? includeDamageNotes,
          Wrapped<bool?>? includeCorrectionNotes,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? repairItemStatusId,
          Wrapped<String?>? vendorId,
          Wrapped<String?>? vendorRepairItemStatusId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest(
        repairOrderStatus: (repairOrderStatus != null
            ? repairOrderStatus.value
            : this.repairOrderStatus),
        priority: (priority != null ? priority.value : this.priority),
        billable: (billable != null ? billable.value : this.billable),
        billed: (billed != null ? billed.value : this.billed),
        owned: (owned != null ? owned.value : this.owned),
        daysInRepair:
            (daysInRepair != null ? daysInRepair.value : this.daysInRepair),
        daysInRepairFilterMode: (daysInRepairFilterMode != null
            ? daysInRepairFilterMode.value
            : this.daysInRepairFilterMode),
        includeOutsideRepairsOnly: (includeOutsideRepairsOnly != null
            ? includeOutsideRepairsOnly.value
            : this.includeOutsideRepairsOnly),
        includeDamageNotes: (includeDamageNotes != null
            ? includeDamageNotes.value
            : this.includeDamageNotes),
        includeCorrectionNotes: (includeCorrectionNotes != null
            ? includeCorrectionNotes.value
            : this.includeCorrectionNotes),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        repairItemStatusId: (repairItemStatusId != null
            ? repairItemStatusId.value
            : this.repairItemStatusId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        vendorRepairItemStatusId: (vendorRepairItemStatusId != null
            ? vendorRepairItemStatusId.value
            : this.vendorRepairItemStatusId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest {
  WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest({
    this.repairId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequestToJson(
          this);

  @JsonKey(name: 'RepairId', includeIfNull: false)
  final String? repairId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest &&
            (identical(other.repairId, repairId) ||
                const DeepCollectionEquality()
                    .equals(other.repairId, repairId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(repairId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequestExtension
    on WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest {
  WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest copyWith(
      {String? repairId,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest(
        repairId: repairId ?? this.repairId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest
      copyWithWrapped(
          {Wrapped<String?>? repairId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest(
        repairId: (repairId != null ? repairId.value : this.repairId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest {
  WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest({
    this.repairId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequestToJson(
          this);

  @JsonKey(name: 'RepairId', includeIfNull: false)
  final String? repairId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest &&
            (identical(other.repairId, repairId) ||
                const DeepCollectionEquality()
                    .equals(other.repairId, repairId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(repairId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequestExtension
    on WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest {
  WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest
      copyWith(
          {String? repairId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest(
        repairId: repairId ?? this.repairId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest
      copyWithWrapped(
          {Wrapped<String?>? repairId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest(
        repairId: (repairId != null ? repairId.value : this.repairId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest({
    this.vendorId,
    this.dealId,
    this.warehouseId,
    this.inventoryTypeId,
    this.customerId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequestToJson(
          this);

  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequestExtension
    on WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest
      copyWith(
          {String? vendorId,
          String? dealId,
          String? warehouseId,
          String? inventoryTypeId,
          String? customerId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest(
        vendorId: vendorId ?? this.vendorId,
        dealId: dealId ?? this.dealId,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        customerId: customerId ?? this.customerId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest
      copyWithWrapped(
          {Wrapped<String?>? vendorId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest(
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest({
    this.fromDate,
    this.toDate,
    this.summary,
    this.includeSalesTax,
    this.statuses,
    this.officeLocationId,
    this.warehouseId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.orderId,
    this.vendorId,
    this.inventoryTypeId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'Summary', includeIfNull: false)
  final bool? summary;
  @JsonKey(name: 'IncludeSalesTax', includeIfNull: false)
  final bool? includeSalesTax;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.summary, summary) ||
                const DeepCollectionEquality()
                    .equals(other.summary, summary)) &&
            (identical(other.includeSalesTax, includeSalesTax) ||
                const DeepCollectionEquality()
                    .equals(other.includeSalesTax, includeSalesTax)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality()
                    .equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(summary) ^
      const DeepCollectionEquality().hash(includeSalesTax) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequestExtension
    on WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? summary,
          bool? includeSalesTax,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? officeLocationId,
          String? warehouseId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? orderId,
          String? vendorId,
          String? inventoryTypeId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        summary: summary ?? this.summary,
        includeSalesTax: includeSalesTax ?? this.includeSalesTax,
        statuses: statuses ?? this.statuses,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        vendorId: vendorId ?? this.vendorId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<bool?>? summary,
          Wrapped<bool?>? includeSalesTax,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? orderId,
          Wrapped<String?>? vendorId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        summary: (summary != null ? summary.value : this.summary),
        includeSalesTax: (includeSalesTax != null
            ? includeSalesTax.value
            : this.includeSalesTax),
        statuses: (statuses != null ? statuses.value : this.statuses),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest({
    this.includePeriodRevenue,
    this.revenueFromDate,
    this.revenueToDate,
    this.revenueFilterMode,
    this.revenueFilterAmount,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.ranks,
    this.excludeZeroOwned,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequestToJson(
          this);

  @JsonKey(name: 'IncludePeriodRevenue', includeIfNull: false)
  final bool? includePeriodRevenue;
  @JsonKey(name: 'RevenueFromDate', includeIfNull: false)
  final DateTime? revenueFromDate;
  @JsonKey(name: 'RevenueToDate', includeIfNull: false)
  final DateTime? revenueToDate;
  @JsonKey(name: 'RevenueFilterMode', includeIfNull: false)
  final String? revenueFilterMode;
  @JsonKey(name: 'RevenueFilterAmount', includeIfNull: false)
  final double? revenueFilterAmount;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(name: 'ExcludeZeroOwned', includeIfNull: false)
  final bool? excludeZeroOwned;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest &&
            (identical(other.includePeriodRevenue, includePeriodRevenue) ||
                const DeepCollectionEquality().equals(
                    other.includePeriodRevenue, includePeriodRevenue)) &&
            (identical(other.revenueFromDate, revenueFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFromDate, revenueFromDate)) &&
            (identical(other.revenueToDate, revenueToDate) ||
                const DeepCollectionEquality()
                    .equals(other.revenueToDate, revenueToDate)) &&
            (identical(other.revenueFilterMode, revenueFilterMode) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFilterMode, revenueFilterMode)) &&
            (identical(other.revenueFilterAmount, revenueFilterAmount) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFilterAmount, revenueFilterAmount)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.excludeZeroOwned, excludeZeroOwned) ||
                const DeepCollectionEquality()
                    .equals(other.excludeZeroOwned, excludeZeroOwned)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(includePeriodRevenue) ^
      const DeepCollectionEquality().hash(revenueFromDate) ^
      const DeepCollectionEquality().hash(revenueToDate) ^
      const DeepCollectionEquality().hash(revenueFilterMode) ^
      const DeepCollectionEquality().hash(revenueFilterAmount) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(excludeZeroOwned) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequestExtension
    on WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest
      copyWith(
          {bool? includePeriodRevenue,
          DateTime? revenueFromDate,
          DateTime? revenueToDate,
          String? revenueFilterMode,
          double? revenueFilterAmount,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          bool? excludeZeroOwned,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest(
        includePeriodRevenue: includePeriodRevenue ?? this.includePeriodRevenue,
        revenueFromDate: revenueFromDate ?? this.revenueFromDate,
        revenueToDate: revenueToDate ?? this.revenueToDate,
        revenueFilterMode: revenueFilterMode ?? this.revenueFilterMode,
        revenueFilterAmount: revenueFilterAmount ?? this.revenueFilterAmount,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        excludeZeroOwned: excludeZeroOwned ?? this.excludeZeroOwned,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest
      copyWithWrapped(
          {Wrapped<bool?>? includePeriodRevenue,
          Wrapped<DateTime?>? revenueFromDate,
          Wrapped<DateTime?>? revenueToDate,
          Wrapped<String?>? revenueFilterMode,
          Wrapped<double?>? revenueFilterAmount,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<bool?>? excludeZeroOwned,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest(
        includePeriodRevenue: (includePeriodRevenue != null
            ? includePeriodRevenue.value
            : this.includePeriodRevenue),
        revenueFromDate: (revenueFromDate != null
            ? revenueFromDate.value
            : this.revenueFromDate),
        revenueToDate:
            (revenueToDate != null ? revenueToDate.value : this.revenueToDate),
        revenueFilterMode: (revenueFilterMode != null
            ? revenueFilterMode.value
            : this.revenueFilterMode),
        revenueFilterAmount: (revenueFilterAmount != null
            ? revenueFilterAmount.value
            : this.revenueFilterAmount),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        ranks: (ranks != null ? ranks.value : this.ranks),
        excludeZeroOwned: (excludeZeroOwned != null
            ? excludeZeroOwned.value
            : this.excludeZeroOwned),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest({
    this.reorderPointMode,
    this.includeZeroReorderPoint,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequestToJson(
          this);

  @JsonKey(name: 'ReorderPointMode', includeIfNull: false)
  final String? reorderPointMode;
  @JsonKey(name: 'IncludeZeroReorderPoint', includeIfNull: false)
  final bool? includeZeroReorderPoint;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest &&
            (identical(other.reorderPointMode, reorderPointMode) ||
                const DeepCollectionEquality()
                    .equals(other.reorderPointMode, reorderPointMode)) &&
            (identical(other.includeZeroReorderPoint, includeZeroReorderPoint) ||
                const DeepCollectionEquality().equals(
                    other.includeZeroReorderPoint, includeZeroReorderPoint)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(reorderPointMode) ^
      const DeepCollectionEquality().hash(includeZeroReorderPoint) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequestExtension
    on WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest
      copyWith(
          {String? reorderPointMode,
          bool? includeZeroReorderPoint,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest(
        reorderPointMode: reorderPointMode ?? this.reorderPointMode,
        includeZeroReorderPoint:
            includeZeroReorderPoint ?? this.includeZeroReorderPoint,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest
      copyWithWrapped(
          {Wrapped<String?>? reorderPointMode,
          Wrapped<bool?>? includeZeroReorderPoint,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest(
        reorderPointMode: (reorderPointMode != null
            ? reorderPointMode.value
            : this.reorderPointMode),
        includeZeroReorderPoint: (includeZeroReorderPoint != null
            ? includeZeroReorderPoint.value
            : this.includeZeroReorderPoint),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest {
  WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest({
    this.sortBy,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.attributeId,
    this.fixedAsset,
    this.ranks,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequestToJson(
          this);

  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'AttributeId', includeIfNull: false)
  final String? attributeId;
  @JsonKey(
    name: 'FixedAsset',
    includeIfNull: false,
    toJson: webApiIncludeExcludeAllToJson,
    fromJson: webApiIncludeExcludeAllFromJson,
  )
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.attributeId, attributeId) ||
                const DeepCollectionEquality()
                    .equals(other.attributeId, attributeId)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(attributeId) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequestExtension
    on WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest {
  WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest
      copyWith(
          {List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? attributeId,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest(
        sortBy: sortBy ?? this.sortBy,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        attributeId: attributeId ?? this.attributeId,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        ranks: ranks ?? this.ranks,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest
      copyWithWrapped(
          {Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? attributeId,
          Wrapped<enums.WebApiIncludeExcludeAll?>? fixedAsset,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest(
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        attributeId:
            (attributeId != null ? attributeId.value : this.attributeId),
        fixedAsset: (fixedAsset != null ? fixedAsset.value : this.fixedAsset),
        ranks: (ranks != null ? ranks.value : this.ranks),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest {
  WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest({
    this.classifications,
    this.trackedBys,
    this.ranks,
    this.fixedAsset,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.warehouseCatalogId,
    this.includeZeroQuantity,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequestToJson(
          this);

  @JsonKey(
      name: 'Classifications',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? classifications;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
    name: 'FixedAsset',
    includeIfNull: false,
    toJson: webApiIncludeExcludeAllToJson,
    fromJson: webApiIncludeExcludeAllFromJson,
  )
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'WarehouseCatalogId', includeIfNull: false)
  final String? warehouseCatalogId;
  @JsonKey(name: 'IncludeZeroQuantity', includeIfNull: false)
  final bool? includeZeroQuantity;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest &&
            (identical(other.classifications, classifications) ||
                const DeepCollectionEquality()
                    .equals(other.classifications, classifications)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.warehouseCatalogId, warehouseCatalogId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCatalogId, warehouseCatalogId)) &&
            (identical(other.includeZeroQuantity, includeZeroQuantity) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroQuantity, includeZeroQuantity)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(classifications) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(warehouseCatalogId) ^
      const DeepCollectionEquality().hash(includeZeroQuantity) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequestExtension
    on WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest {
  WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest
      copyWith(
          {List<FwStandardModelsSelectedCheckBoxListItem>? classifications,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? warehouseCatalogId,
          bool? includeZeroQuantity,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest(
        classifications: classifications ?? this.classifications,
        trackedBys: trackedBys ?? this.trackedBys,
        ranks: ranks ?? this.ranks,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        warehouseCatalogId: warehouseCatalogId ?? this.warehouseCatalogId,
        includeZeroQuantity: includeZeroQuantity ?? this.includeZeroQuantity,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest
      copyWithWrapped(
          {Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              classifications,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<enums.WebApiIncludeExcludeAll?>? fixedAsset,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? warehouseCatalogId,
          Wrapped<bool?>? includeZeroQuantity,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest(
        classifications: (classifications != null
            ? classifications.value
            : this.classifications),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        ranks: (ranks != null ? ranks.value : this.ranks),
        fixedAsset: (fixedAsset != null ? fixedAsset.value : this.fixedAsset),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        warehouseCatalogId: (warehouseCatalogId != null
            ? warehouseCatalogId.value
            : this.warehouseCatalogId),
        includeZeroQuantity: (includeZeroQuantity != null
            ? includeZeroQuantity.value
            : this.includeZeroQuantity),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest {
  WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest({
    this.purchasedFromDate,
    this.purchasedToDate,
    this.receivedFromDate,
    this.receivedToDate,
    this.trackedBys,
    this.ranks,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.originalShowId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequestToJson(
          this);

  @JsonKey(name: 'PurchasedFromDate', includeIfNull: false)
  final DateTime? purchasedFromDate;
  @JsonKey(name: 'PurchasedToDate', includeIfNull: false)
  final DateTime? purchasedToDate;
  @JsonKey(name: 'ReceivedFromDate', includeIfNull: false)
  final DateTime? receivedFromDate;
  @JsonKey(name: 'ReceivedToDate', includeIfNull: false)
  final DateTime? receivedToDate;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'OriginalShowId', includeIfNull: false)
  final String? originalShowId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest &&
            (identical(other.purchasedFromDate, purchasedFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.purchasedFromDate, purchasedFromDate)) &&
            (identical(other.purchasedToDate, purchasedToDate) ||
                const DeepCollectionEquality()
                    .equals(other.purchasedToDate, purchasedToDate)) &&
            (identical(other.receivedFromDate, receivedFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.receivedFromDate, receivedFromDate)) &&
            (identical(other.receivedToDate, receivedToDate) ||
                const DeepCollectionEquality()
                    .equals(other.receivedToDate, receivedToDate)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.originalShowId, originalShowId) ||
                const DeepCollectionEquality()
                    .equals(other.originalShowId, originalShowId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(purchasedFromDate) ^
      const DeepCollectionEquality().hash(purchasedToDate) ^
      const DeepCollectionEquality().hash(receivedFromDate) ^
      const DeepCollectionEquality().hash(receivedToDate) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(originalShowId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequestExtension
    on WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest {
  WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest
      copyWith(
          {DateTime? purchasedFromDate,
          DateTime? purchasedToDate,
          DateTime? receivedFromDate,
          DateTime? receivedToDate,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? originalShowId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest(
        purchasedFromDate: purchasedFromDate ?? this.purchasedFromDate,
        purchasedToDate: purchasedToDate ?? this.purchasedToDate,
        receivedFromDate: receivedFromDate ?? this.receivedFromDate,
        receivedToDate: receivedToDate ?? this.receivedToDate,
        trackedBys: trackedBys ?? this.trackedBys,
        ranks: ranks ?? this.ranks,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        originalShowId: originalShowId ?? this.originalShowId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? purchasedFromDate,
          Wrapped<DateTime?>? purchasedToDate,
          Wrapped<DateTime?>? receivedFromDate,
          Wrapped<DateTime?>? receivedToDate,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? trackedBys,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? ranks,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? originalShowId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest(
        purchasedFromDate: (purchasedFromDate != null
            ? purchasedFromDate.value
            : this.purchasedFromDate),
        purchasedToDate: (purchasedToDate != null
            ? purchasedToDate.value
            : this.purchasedToDate),
        receivedFromDate: (receivedFromDate != null
            ? receivedFromDate.value
            : this.receivedFromDate),
        receivedToDate: (receivedToDate != null
            ? receivedToDate.value
            : this.receivedToDate),
        trackedBys: (trackedBys != null ? trackedBys.value : this.trackedBys),
        ranks: (ranks != null ? ranks.value : this.ranks),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        originalShowId: (originalShowId != null
            ? originalShowId.value
            : this.originalShowId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest {
  WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest({
    this.fromDate,
    this.toDate,
    this.transactionTypes,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(
      name: 'TransactionTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? transactionTypes;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.transactionTypes, transactionTypes) ||
                const DeepCollectionEquality()
                    .equals(other.transactionTypes, transactionTypes)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(transactionTypes) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequestExtension
    on WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest {
  WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          List<FwStandardModelsSelectedCheckBoxListItem>? transactionTypes,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        transactionTypes: transactionTypes ?? this.transactionTypes,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              transactionTypes,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        transactionTypes: (transactionTypes != null
            ? transactionTypes.value
            : this.transactionTypes),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedReportSettingsReportSettings {
  WebApiModulesReportsSharedReportSettingsReportSettings({
    this.id,
    this.webUserId,
    this.reportName,
    this.description,
    this.settings,
    this.excelSettings,
    this.dateStamp,
    this.auditNote,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
    this.translation,
  });

  factory WebApiModulesReportsSharedReportSettingsReportSettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedReportSettingsReportSettingsFromJson(json);

  static const toJsonFactory =
      _$WebApiModulesReportsSharedReportSettingsReportSettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedReportSettingsReportSettingsToJson(this);

  @JsonKey(name: 'Id', includeIfNull: false)
  final int? id;
  @JsonKey(name: 'WebUserId', includeIfNull: false)
  final String? webUserId;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Settings', includeIfNull: false)
  final String? settings;
  @JsonKey(name: 'ExcelSettings', includeIfNull: false)
  final String? excelSettings;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'AuditNote', includeIfNull: false)
  final String? auditNote;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  @JsonKey(
      name: '_Translation',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwTranslatedValue>[])
  final List<FwStandardDataFwTranslatedValue>? translation;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedReportSettingsReportSettingsFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedReportSettingsReportSettings &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.webUserId, webUserId) ||
                const DeepCollectionEquality()
                    .equals(other.webUserId, webUserId)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.settings, settings) ||
                const DeepCollectionEquality()
                    .equals(other.settings, settings)) &&
            (identical(other.excelSettings, excelSettings) ||
                const DeepCollectionEquality()
                    .equals(other.excelSettings, excelSettings)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.auditNote, auditNote) ||
                const DeepCollectionEquality()
                    .equals(other.auditNote, auditNote)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)) &&
            (identical(other.translation, translation) ||
                const DeepCollectionEquality()
                    .equals(other.translation, translation)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(id) ^
      const DeepCollectionEquality().hash(webUserId) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(settings) ^
      const DeepCollectionEquality().hash(excelSettings) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(auditNote) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      const DeepCollectionEquality().hash(translation) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedReportSettingsReportSettingsExtension
    on WebApiModulesReportsSharedReportSettingsReportSettings {
  WebApiModulesReportsSharedReportSettingsReportSettings copyWith(
      {int? id,
      String? webUserId,
      String? reportName,
      String? description,
      String? settings,
      String? excelSettings,
      String? dateStamp,
      String? auditNote,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes,
      List<FwStandardDataFwTranslatedValue>? translation}) {
    return WebApiModulesReportsSharedReportSettingsReportSettings(
        id: id ?? this.id,
        webUserId: webUserId ?? this.webUserId,
        reportName: reportName ?? this.reportName,
        description: description ?? this.description,
        settings: settings ?? this.settings,
        excelSettings: excelSettings ?? this.excelSettings,
        dateStamp: dateStamp ?? this.dateStamp,
        auditNote: auditNote ?? this.auditNote,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes,
        translation: translation ?? this.translation);
  }

  WebApiModulesReportsSharedReportSettingsReportSettings copyWithWrapped(
      {Wrapped<int?>? id,
      Wrapped<String?>? webUserId,
      Wrapped<String?>? reportName,
      Wrapped<String?>? description,
      Wrapped<String?>? settings,
      Wrapped<String?>? excelSettings,
      Wrapped<String?>? dateStamp,
      Wrapped<String?>? auditNote,
      Wrapped<String?>? recordTitle,
      Wrapped<List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>?>?
          fields,
      Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
      Wrapped<List<FwStandardDataFwDefaultAttribute>?>? defaultFieldAttributes,
      Wrapped<List<FwStandardDataFwTranslatedValue>?>? translation}) {
    return WebApiModulesReportsSharedReportSettingsReportSettings(
        id: (id != null ? id.value : this.id),
        webUserId: (webUserId != null ? webUserId.value : this.webUserId),
        reportName: (reportName != null ? reportName.value : this.reportName),
        description:
            (description != null ? description.value : this.description),
        settings: (settings != null ? settings.value : this.settings),
        excelSettings:
            (excelSettings != null ? excelSettings.value : this.excelSettings),
        dateStamp: (dateStamp != null ? dateStamp.value : this.dateStamp),
        auditNote: (auditNote != null ? auditNote.value : this.auditNote),
        recordTitle:
            (recordTitle != null ? recordTitle.value : this.recordTitle),
        fields: (fields != null ? fields.value : this.fields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes),
        translation:
            (translation != null ? translation.value : this.translation));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest {
  WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.officeLocationId,
    this.departmentId,
    this.statuses,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequestExtension
    on WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest {
  WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest copyWith(
      {DateTime? fromDate,
      DateTime? toDate,
      String? dateType,
      String? officeLocationId,
      String? departmentId,
      List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
      String? userDepartmentId,
      String? userLocationId,
      String? userWarehouseId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      String? reportName,
      bool? useEmailTemplate}) {
    return WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        statuses: statuses ?? this.statuses,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest copyWithWrapped(
      {Wrapped<DateTime?>? fromDate,
      Wrapped<DateTime?>? toDate,
      Wrapped<String?>? dateType,
      Wrapped<String?>? officeLocationId,
      Wrapped<String?>? departmentId,
      Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
      Wrapped<String?>? userDepartmentId,
      Wrapped<String?>? userLocationId,
      Wrapped<String?>? userWarehouseId,
      Wrapped<String?>? customReportLayoutId,
      Wrapped<bool?>? isSummary,
      Wrapped<bool?>? includeSubHeadingsAndSubTotals,
      Wrapped<bool?>? includeIdColumns,
      Wrapped<String?>? locale,
      Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
      Wrapped<String?>? reportName,
      Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        statuses: (statuses != null ? statuses.value : this.statuses),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest {
  WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest({
    this.fromDate,
    this.toDate,
    this.fromWarehouseId,
    this.toWarehouseId,
    this.transferId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'FromWarehouseId', includeIfNull: false)
  final String? fromWarehouseId;
  @JsonKey(name: 'ToWarehouseId', includeIfNull: false)
  final String? toWarehouseId;
  @JsonKey(name: 'TransferId', includeIfNull: false)
  final String? transferId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.fromWarehouseId, fromWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.fromWarehouseId, fromWarehouseId)) &&
            (identical(other.toWarehouseId, toWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.toWarehouseId, toWarehouseId)) &&
            (identical(other.transferId, transferId) ||
                const DeepCollectionEquality()
                    .equals(other.transferId, transferId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(fromWarehouseId) ^
      const DeepCollectionEquality().hash(toWarehouseId) ^
      const DeepCollectionEquality().hash(transferId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequestExtension
    on WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest {
  WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? fromWarehouseId,
          String? toWarehouseId,
          String? transferId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        fromWarehouseId: fromWarehouseId ?? this.fromWarehouseId,
        toWarehouseId: toWarehouseId ?? this.toWarehouseId,
        transferId: transferId ?? this.transferId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? fromWarehouseId,
          Wrapped<String?>? toWarehouseId,
          Wrapped<String?>? transferId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsTransferFixedAssetOwnershipReportTransferFixedAssetOwnershipReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        fromWarehouseId: (fromWarehouseId != null
            ? fromWarehouseId.value
            : this.fromWarehouseId),
        toWarehouseId:
            (toWarehouseId != null ? toWarehouseId.value : this.toWarehouseId),
        transferId: (transferId != null ? transferId.value : this.transferId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequest {
  WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequest({
    this.transferId,
    this.reportView,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequestToJson(
          this);

  @JsonKey(name: 'TransferId', includeIfNull: false)
  final String? transferId;
  @JsonKey(
    name: 'ReportView',
    includeIfNull: false,
    toJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeToJson,
    fromJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson,
  )
  final enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
      reportView;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequest &&
            (identical(other.transferId, transferId) ||
                const DeepCollectionEquality()
                    .equals(other.transferId, transferId)) &&
            (identical(other.reportView, reportView) ||
                const DeepCollectionEquality()
                    .equals(other.reportView, reportView)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(transferId) ^
      const DeepCollectionEquality().hash(reportView) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequestExtension
    on WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequest {
  WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequest
      copyWith(
          {String? transferId,
          enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
              reportView,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequest(
        transferId: transferId ?? this.transferId,
        reportView: reportView ?? this.reportView,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequest
      copyWithWrapped(
          {Wrapped<String?>? transferId,
          Wrapped<
                  enums
                      .WebApiModulesReportsOrderReportsOrderReportReportViewType?>?
              reportView,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsTransferReportsTransferOrderReportTransferOrderReportRequest(
        transferId: (transferId != null ? transferId.value : this.transferId),
        reportView: (reportView != null ? reportView.value : this.reportView),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest {
  WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest({
    this.orderType,
    this.searchDatesBy,
    this.fromDate,
    this.toDate,
    this.statuses,
    this.activities,
    this.warehouseId,
    this.departmentId,
    this.vendorId,
    this.pOTypeId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequestToJson(
          this);

  @JsonKey(name: 'OrderType', includeIfNull: false)
  final String? orderType;
  @JsonKey(
      name: 'SearchDatesBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? searchDatesBy;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final String? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final String? toDate;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(
      name: 'Activities',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? activities;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'POTypeId', includeIfNull: false)
  final String? pOTypeId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest &&
            (identical(other.orderType, orderType) ||
                const DeepCollectionEquality()
                    .equals(other.orderType, orderType)) &&
            (identical(other.searchDatesBy, searchDatesBy) ||
                const DeepCollectionEquality()
                    .equals(other.searchDatesBy, searchDatesBy)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.activities, activities) ||
                const DeepCollectionEquality()
                    .equals(other.activities, activities)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.pOTypeId, pOTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.pOTypeId, pOTypeId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality().equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(searchDatesBy) ^
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(activities) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(pOTypeId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequestExtension
    on WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest {
  WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest
      copyWith(
          {String? orderType,
          List<FwStandardModelsSelectedCheckBoxListItem>? searchDatesBy,
          String? fromDate,
          String? toDate,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          List<FwStandardModelsSelectedCheckBoxListItem>? activities,
          String? warehouseId,
          String? departmentId,
          String? vendorId,
          String? pOTypeId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest(
        orderType: orderType ?? this.orderType,
        searchDatesBy: searchDatesBy ?? this.searchDatesBy,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        statuses: statuses ?? this.statuses,
        activities: activities ?? this.activities,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        vendorId: vendorId ?? this.vendorId,
        pOTypeId: pOTypeId ?? this.pOTypeId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest
      copyWithWrapped(
          {Wrapped<String?>? orderType,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              searchDatesBy,
          Wrapped<String?>? fromDate,
          Wrapped<String?>? toDate,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? activities,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? vendorId,
          Wrapped<String?>? pOTypeId,
          Wrapped<String?>? inventoryTypeId,
          Wrapped<String?>? categoryId,
          Wrapped<String?>? subCategoryId,
          Wrapped<String?>? inventoryId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsInventoryStatusByPurchaseOrderReportInventoryStatusByPurchaseOrderReportRequest(
        orderType: (orderType != null ? orderType.value : this.orderType),
        searchDatesBy:
            (searchDatesBy != null ? searchDatesBy.value : this.searchDatesBy),
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        statuses: (statuses != null ? statuses.value : this.statuses),
        activities: (activities != null ? activities.value : this.activities),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        pOTypeId: (pOTypeId != null ? pOTypeId.value : this.pOTypeId),
        inventoryTypeId: (inventoryTypeId != null
            ? inventoryTypeId.value
            : this.inventoryTypeId),
        categoryId: (categoryId != null ? categoryId.value : this.categoryId),
        subCategoryId:
            (subCategoryId != null ? subCategoryId.value : this.subCategoryId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.departmentId,
    this.vendorId,
    this.statuses,
    this.activities,
    this.accrualsThrough,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(
      name: 'Activities',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? activities;
  @JsonKey(name: 'AccrualsThrough', includeIfNull: false)
  final DateTime? accrualsThrough;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.activities, activities) ||
                const DeepCollectionEquality()
                    .equals(other.activities, activities)) &&
            (identical(other.accrualsThrough, accrualsThrough) ||
                const DeepCollectionEquality()
                    .equals(other.accrualsThrough, accrualsThrough)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(activities) ^
      const DeepCollectionEquality().hash(accrualsThrough) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? departmentId,
          String? vendorId,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          List<FwStandardModelsSelectedCheckBoxListItem>? activities,
          DateTime? accrualsThrough,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        vendorId: vendorId ?? this.vendorId,
        statuses: statuses ?? this.statuses,
        activities: activities ?? this.activities,
        accrualsThrough: accrualsThrough ?? this.accrualsThrough,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? vendorId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? activities,
          Wrapped<DateTime?>? accrualsThrough,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderAccrualsPurchaseOrderAccrualsRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        statuses: (statuses != null ? statuses.value : this.statuses),
        activities: (activities != null ? activities.value : this.activities),
        accrualsThrough: (accrualsThrough != null
            ? accrualsThrough.value
            : this.accrualsThrough),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.departmentId,
    this.vendorId,
    this.statuses,
    this.activities,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(
      name: 'Activities',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? activities;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.activities, activities) ||
                const DeepCollectionEquality()
                    .equals(other.activities, activities)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(activities) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? departmentId,
          String? vendorId,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          List<FwStandardModelsSelectedCheckBoxListItem>? activities,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        vendorId: vendorId ?? this.vendorId,
        statuses: statuses ?? this.statuses,
        activities: activities ?? this.activities,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? vendorId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? activities,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        statuses: (statuses != null ? statuses.value : this.statuses),
        activities: (activities != null ? activities.value : this.activities),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest({
    this.purchaseOrderId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequestToJson(
          this);

  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest
      copyWith(
          {String? purchaseOrderId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest(
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest
      copyWithWrapped(
          {Wrapped<String?>? purchaseOrderId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderPaymentScheduleReportPurchaseOrderPaymentScheduleReportRequest(
        purchaseOrderId: (purchaseOrderId != null
            ? purchaseOrderId.value
            : this.purchaseOrderId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest({
    this.purchaseOrderId,
    this.warehouseId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequestToJson(
          this);

  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest
      copyWith(
          {String? purchaseOrderId,
          String? warehouseId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest(
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        warehouseId: warehouseId ?? this.warehouseId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest
      copyWithWrapped(
          {Wrapped<String?>? purchaseOrderId,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest(
        purchaseOrderId: (purchaseOrderId != null
            ? purchaseOrderId.value
            : this.purchaseOrderId),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest({
    this.purchaseOrderId,
    this.reportView,
    this.excludeZeroConsignorFee,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequestToJson(
          this);

  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(
    name: 'ReportView',
    includeIfNull: false,
    toJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeToJson,
    fromJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson,
  )
  final enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
      reportView;
  @JsonKey(name: 'ExcludeZeroConsignorFee', includeIfNull: false)
  final bool? excludeZeroConsignorFee;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.reportView, reportView) ||
                const DeepCollectionEquality()
                    .equals(other.reportView, reportView)) &&
            (identical(other.excludeZeroConsignorFee, excludeZeroConsignorFee) ||
                const DeepCollectionEquality().equals(
                    other.excludeZeroConsignorFee, excludeZeroConsignorFee)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(reportView) ^
      const DeepCollectionEquality().hash(excludeZeroConsignorFee) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest
      copyWith(
          {String? purchaseOrderId,
          enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
              reportView,
          bool? excludeZeroConsignorFee,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest(
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        reportView: reportView ?? this.reportView,
        excludeZeroConsignorFee:
            excludeZeroConsignorFee ?? this.excludeZeroConsignorFee,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest
      copyWithWrapped(
          {Wrapped<String?>? purchaseOrderId,
          Wrapped<
                  enums
                      .WebApiModulesReportsOrderReportsOrderReportReportViewType?>?
              reportView,
          Wrapped<bool?>? excludeZeroConsignorFee,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest(
        purchaseOrderId: (purchaseOrderId != null
            ? purchaseOrderId.value
            : this.purchaseOrderId),
        reportView: (reportView != null ? reportView.value : this.reportView),
        excludeZeroConsignorFee: (excludeZeroConsignorFee != null
            ? excludeZeroConsignorFee.value
            : this.excludeZeroConsignorFee),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequest({
    this.purchaseOrderId,
    this.view,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequestToJson(
          this);

  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'View', includeIfNull: false)
  final String? view;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequest &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.view, view) ||
                const DeepCollectionEquality().equals(other.view, view)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(view) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequest
      copyWith(
          {String? purchaseOrderId,
          String? view,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequest(
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        view: view ?? this.view,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequest
      copyWithWrapped(
          {Wrapped<String?>? purchaseOrderId,
          Wrapped<String?>? view,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderStatusDetailReportPurchaseOrderStatusDetailReportRequest(
        purchaseOrderId: (purchaseOrderId != null
            ? purchaseOrderId.value
            : this.purchaseOrderId),
        view: (view != null ? view.value : this.view),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequest({
    this.purchaseOrderId,
    this.view,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequestToJson(
          this);

  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'View', includeIfNull: false)
  final String? view;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequest &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.view, view) ||
                const DeepCollectionEquality().equals(other.view, view)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(view) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequest
      copyWith(
          {String? purchaseOrderId,
          String? view,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequest(
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        view: view ?? this.view,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequest
      copyWithWrapped(
          {Wrapped<String?>? purchaseOrderId,
          Wrapped<String?>? view,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderStatusSummaryReportPurchaseOrderStatusSummaryReportRequest(
        purchaseOrderId: (purchaseOrderId != null
            ? purchaseOrderId.value
            : this.purchaseOrderId),
        view: (view != null ? view.value : this.view),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.projectId,
    this.vendorId,
    this.departmentId,
    this.poApprovalStatusId,
    this.status,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'ProjectId', includeIfNull: false)
  final String? projectId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'PoApprovalStatusId', includeIfNull: false)
  final String? poApprovalStatusId;
  @JsonKey(
      name: 'Status',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? status;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.projectId, projectId) ||
                const DeepCollectionEquality()
                    .equals(other.projectId, projectId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.poApprovalStatusId, poApprovalStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.poApprovalStatusId, poApprovalStatusId)) &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(projectId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(poApprovalStatusId) ^
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? projectId,
          String? vendorId,
          String? departmentId,
          String? poApprovalStatusId,
          List<FwStandardModelsSelectedCheckBoxListItem>? status,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        projectId: projectId ?? this.projectId,
        vendorId: vendorId ?? this.vendorId,
        departmentId: departmentId ?? this.departmentId,
        poApprovalStatusId: poApprovalStatusId ?? this.poApprovalStatusId,
        status: status ?? this.status,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? projectId,
          Wrapped<String?>? vendorId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? poApprovalStatusId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? status,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        projectId: (projectId != null ? projectId.value : this.projectId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        poApprovalStatusId: (poApprovalStatusId != null
            ? poApprovalStatusId.value
            : this.poApprovalStatusId),
        status: (status != null ? status.value : this.status),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest {
  WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.officeLocationId,
    this.customerId,
    this.dealId,
    this.orderId,
    this.vendorId,
    this.poClassificationId,
    this.recType,
    this.statuses,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'PoClassificationId', includeIfNull: false)
  final String? poClassificationId;
  @JsonKey(
      name: 'RecType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? recType;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.poClassificationId, poClassificationId) ||
                const DeepCollectionEquality()
                    .equals(other.poClassificationId, poClassificationId)) &&
            (identical(other.recType, recType) ||
                const DeepCollectionEquality()
                    .equals(other.recType, recType)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(poClassificationId) ^
      const DeepCollectionEquality().hash(recType) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequestExtension
    on WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest {
  WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          String? officeLocationId,
          String? customerId,
          String? dealId,
          String? orderId,
          String? vendorId,
          String? poClassificationId,
          List<FwStandardModelsSelectedCheckBoxListItem>? recType,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        vendorId: vendorId ?? this.vendorId,
        poClassificationId: poClassificationId ?? this.poClassificationId,
        recType: recType ?? this.recType,
        statuses: statuses ?? this.statuses,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? orderId,
          Wrapped<String?>? vendorId,
          Wrapped<String?>? poClassificationId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? recType,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        poClassificationId: (poClassificationId != null
            ? poClassificationId.value
            : this.poClassificationId),
        recType: (recType != null ? recType.value : this.recType),
        statuses: (statuses != null ? statuses.value : this.statuses),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest {
  WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.customerId,
    this.dealId,
    this.orderId,
    this.vendorId,
    this.poClassificationId,
    this.recType,
    this.statuses,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'PoClassificationId', includeIfNull: false)
  final String? poClassificationId;
  @JsonKey(
      name: 'RecType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? recType;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.poClassificationId, poClassificationId) ||
                const DeepCollectionEquality()
                    .equals(other.poClassificationId, poClassificationId)) &&
            (identical(other.recType, recType) ||
                const DeepCollectionEquality()
                    .equals(other.recType, recType)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(poClassificationId) ^
      const DeepCollectionEquality().hash(recType) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequestExtension
    on WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest {
  WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? customerId,
          String? dealId,
          String? orderId,
          String? vendorId,
          String? poClassificationId,
          List<FwStandardModelsSelectedCheckBoxListItem>? recType,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        vendorId: vendorId ?? this.vendorId,
        poClassificationId: poClassificationId ?? this.poClassificationId,
        recType: recType ?? this.recType,
        statuses: statuses ?? this.statuses,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? customerId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? orderId,
          Wrapped<String?>? vendorId,
          Wrapped<String?>? poClassificationId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? recType,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        customerId: (customerId != null ? customerId.value : this.customerId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        orderId: (orderId != null ? orderId.value : this.orderId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        poClassificationId: (poClassificationId != null
            ? poClassificationId.value
            : this.poClassificationId),
        recType: (recType != null ? recType.value : this.recType),
        statuses: (statuses != null ? statuses.value : this.statuses),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest {
  WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.departmentId,
    this.dealId,
    this.vendorId,
    this.poClassificationId,
    this.purchaseOrderId,
    this.inventoryId,
    this.invoiceStatus,
    this.purchaseOrderStatus,
    this.includeVendorTax,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'PoClassificationId', includeIfNull: false)
  final String? poClassificationId;
  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'InvoiceStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? invoiceStatus;
  @JsonKey(
      name: 'PurchaseOrderStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? purchaseOrderStatus;
  @JsonKey(name: 'IncludeVendorTax', includeIfNull: false)
  final bool? includeVendorTax;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.poClassificationId, poClassificationId) ||
                const DeepCollectionEquality()
                    .equals(other.poClassificationId, poClassificationId)) &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.invoiceStatus, invoiceStatus) ||
                const DeepCollectionEquality()
                    .equals(other.invoiceStatus, invoiceStatus)) &&
            (identical(other.purchaseOrderStatus, purchaseOrderStatus) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderStatus, purchaseOrderStatus)) &&
            (identical(other.includeVendorTax, includeVendorTax) ||
                const DeepCollectionEquality()
                    .equals(other.includeVendorTax, includeVendorTax)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(poClassificationId) ^
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(invoiceStatus) ^
      const DeepCollectionEquality().hash(purchaseOrderStatus) ^
      const DeepCollectionEquality().hash(includeVendorTax) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequestExtension
    on WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest {
  WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? departmentId,
          String? dealId,
          String? vendorId,
          String? poClassificationId,
          String? purchaseOrderId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? invoiceStatus,
          List<FwStandardModelsSelectedCheckBoxListItem>? purchaseOrderStatus,
          bool? includeVendorTax,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        dealId: dealId ?? this.dealId,
        vendorId: vendorId ?? this.vendorId,
        poClassificationId: poClassificationId ?? this.poClassificationId,
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        inventoryId: inventoryId ?? this.inventoryId,
        invoiceStatus: invoiceStatus ?? this.invoiceStatus,
        purchaseOrderStatus: purchaseOrderStatus ?? this.purchaseOrderStatus,
        includeVendorTax: includeVendorTax ?? this.includeVendorTax,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? vendorId,
          Wrapped<String?>? poClassificationId,
          Wrapped<String?>? purchaseOrderId,
          Wrapped<String?>? inventoryId,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              invoiceStatus,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>?
              purchaseOrderStatus,
          Wrapped<bool?>? includeVendorTax,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        poClassificationId: (poClassificationId != null
            ? poClassificationId.value
            : this.poClassificationId),
        purchaseOrderId: (purchaseOrderId != null
            ? purchaseOrderId.value
            : this.purchaseOrderId),
        inventoryId:
            (inventoryId != null ? inventoryId.value : this.inventoryId),
        invoiceStatus:
            (invoiceStatus != null ? invoiceStatus.value : this.invoiceStatus),
        purchaseOrderStatus: (purchaseOrderStatus != null
            ? purchaseOrderStatus.value
            : this.purchaseOrderStatus),
        includeVendorTax: (includeVendorTax != null
            ? includeVendorTax.value
            : this.includeVendorTax),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest {
  WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.statuses,
    this.includeAccruals,
    this.accrualFromDate,
    this.accrualToDate,
    this.accrualsOnly,
    this.officeLocationId,
    this.departmentId,
    this.dealId,
    this.vendorId,
    this.purchaseOrderId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'IncludeAccruals', includeIfNull: false)
  final bool? includeAccruals;
  @JsonKey(name: 'AccrualFromDate', includeIfNull: false)
  final DateTime? accrualFromDate;
  @JsonKey(name: 'AccrualToDate', includeIfNull: false)
  final DateTime? accrualToDate;
  @JsonKey(name: 'AccrualsOnly', includeIfNull: false)
  final bool? accrualsOnly;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.includeAccruals, includeAccruals) ||
                const DeepCollectionEquality()
                    .equals(other.includeAccruals, includeAccruals)) &&
            (identical(other.accrualFromDate, accrualFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.accrualFromDate, accrualFromDate)) &&
            (identical(other.accrualToDate, accrualToDate) ||
                const DeepCollectionEquality()
                    .equals(other.accrualToDate, accrualToDate)) &&
            (identical(other.accrualsOnly, accrualsOnly) ||
                const DeepCollectionEquality()
                    .equals(other.accrualsOnly, accrualsOnly)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality()
                    .equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(includeAccruals) ^
      const DeepCollectionEquality().hash(accrualFromDate) ^
      const DeepCollectionEquality().hash(accrualToDate) ^
      const DeepCollectionEquality().hash(accrualsOnly) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequestExtension
    on WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest {
  WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          bool? includeAccruals,
          DateTime? accrualFromDate,
          DateTime? accrualToDate,
          bool? accrualsOnly,
          String? officeLocationId,
          String? departmentId,
          String? dealId,
          String? vendorId,
          String? purchaseOrderId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        statuses: statuses ?? this.statuses,
        includeAccruals: includeAccruals ?? this.includeAccruals,
        accrualFromDate: accrualFromDate ?? this.accrualFromDate,
        accrualToDate: accrualToDate ?? this.accrualToDate,
        accrualsOnly: accrualsOnly ?? this.accrualsOnly,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        dealId: dealId ?? this.dealId,
        vendorId: vendorId ?? this.vendorId,
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? dateType,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? statuses,
          Wrapped<bool?>? includeAccruals,
          Wrapped<DateTime?>? accrualFromDate,
          Wrapped<DateTime?>? accrualToDate,
          Wrapped<bool?>? accrualsOnly,
          Wrapped<String?>? officeLocationId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? dealId,
          Wrapped<String?>? vendorId,
          Wrapped<String?>? purchaseOrderId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        dateType: (dateType != null ? dateType.value : this.dateType),
        statuses: (statuses != null ? statuses.value : this.statuses),
        includeAccruals: (includeAccruals != null
            ? includeAccruals.value
            : this.includeAccruals),
        accrualFromDate: (accrualFromDate != null
            ? accrualFromDate.value
            : this.accrualFromDate),
        accrualToDate:
            (accrualToDate != null ? accrualToDate.value : this.accrualToDate),
        accrualsOnly:
            (accrualsOnly != null ? accrualsOnly.value : this.accrualsOnly),
        officeLocationId: (officeLocationId != null
            ? officeLocationId.value
            : this.officeLocationId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        dealId: (dealId != null ? dealId.value : this.dealId),
        vendorId: (vendorId != null ? vendorId.value : this.vendorId),
        purchaseOrderId: (purchaseOrderId != null
            ? purchaseOrderId.value
            : this.purchaseOrderId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest {
  WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest({
    this.containerItemId,
    this.appLanguageId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequestToJson(
          this);

  @JsonKey(name: 'ContainerItemId', includeIfNull: false)
  final String? containerItemId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest &&
            (identical(other.containerItemId, containerItemId) ||
                const DeepCollectionEquality()
                    .equals(other.containerItemId, containerItemId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(containerItemId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequestExtension
    on WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest {
  WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest
      copyWith(
          {String? containerItemId,
          String? appLanguageId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest(
        containerItemId: containerItemId ?? this.containerItemId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest
      copyWithWrapped(
          {Wrapped<String?>? containerItemId,
          Wrapped<String?>? appLanguageId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest(
        containerItemId: (containerItemId != null
            ? containerItemId.value
            : this.containerItemId),
        appLanguageId:
            (appLanguageId != null ? appLanguageId.value : this.appLanguageId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData({
    this.personSignature,
    this.quikReceiptId,
    this.quikReceiptTermsConditionsHtml,
    this.personPrintedName,
    this.note,
  });

  factory WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaDataFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaDataToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaDataToJson(
          this);

  @JsonKey(name: 'PersonSignature', includeIfNull: false)
  final String? personSignature;
  @JsonKey(name: 'QuikReceiptId', includeIfNull: false)
  final String? quikReceiptId;
  @JsonKey(name: 'QuikReceiptTermsConditionsHtml', includeIfNull: false)
  final String? quikReceiptTermsConditionsHtml;
  @JsonKey(name: 'PersonPrintedName', includeIfNull: false)
  final String? personPrintedName;
  @JsonKey(name: 'Note', includeIfNull: false)
  final String? note;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaDataFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData &&
            (identical(other.personSignature, personSignature) ||
                const DeepCollectionEquality()
                    .equals(other.personSignature, personSignature)) &&
            (identical(other.quikReceiptId, quikReceiptId) ||
                const DeepCollectionEquality()
                    .equals(other.quikReceiptId, quikReceiptId)) &&
            (identical(other.quikReceiptTermsConditionsHtml,
                    quikReceiptTermsConditionsHtml) ||
                const DeepCollectionEquality().equals(
                    other.quikReceiptTermsConditionsHtml,
                    quikReceiptTermsConditionsHtml)) &&
            (identical(other.personPrintedName, personPrintedName) ||
                const DeepCollectionEquality()
                    .equals(other.personPrintedName, personPrintedName)) &&
            (identical(other.note, note) ||
                const DeepCollectionEquality().equals(other.note, note)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(personSignature) ^
      const DeepCollectionEquality().hash(quikReceiptId) ^
      const DeepCollectionEquality().hash(quikReceiptTermsConditionsHtml) ^
      const DeepCollectionEquality().hash(personPrintedName) ^
      const DeepCollectionEquality().hash(note) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaDataExtension
    on WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData
      copyWith(
          {String? personSignature,
          String? quikReceiptId,
          String? quikReceiptTermsConditionsHtml,
          String? personPrintedName,
          String? note}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData(
        personSignature: personSignature ?? this.personSignature,
        quikReceiptId: quikReceiptId ?? this.quikReceiptId,
        quikReceiptTermsConditionsHtml: quikReceiptTermsConditionsHtml ??
            this.quikReceiptTermsConditionsHtml,
        personPrintedName: personPrintedName ?? this.personPrintedName,
        note: note ?? this.note);
  }

  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData
      copyWithWrapped(
          {Wrapped<String?>? personSignature,
          Wrapped<String?>? quikReceiptId,
          Wrapped<String?>? quikReceiptTermsConditionsHtml,
          Wrapped<String?>? personPrintedName,
          Wrapped<String?>? note}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData(
        personSignature: (personSignature != null
            ? personSignature.value
            : this.personSignature),
        quikReceiptId:
            (quikReceiptId != null ? quikReceiptId.value : this.quikReceiptId),
        quikReceiptTermsConditionsHtml: (quikReceiptTermsConditionsHtml != null
            ? quikReceiptTermsConditionsHtml.value
            : this.quikReceiptTermsConditionsHtml),
        personPrintedName: (personPrintedName != null
            ? personPrintedName.value
            : this.personPrintedName),
        note: (note != null ? note.value : this.note));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL({
    this.rowType,
    this.description,
    this.quantity,
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.dateFields,
    this.custom,
    this.defaultFieldAttributes,
    this.translation,
  });

  factory WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemLFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemLToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemLToJson(
          this);

  @JsonKey(name: 'RowType', includeIfNull: false)
  final String? rowType;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Quantity', includeIfNull: false)
  final String? quantity;
  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  @JsonKey(
      name: '_Translation',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwTranslatedValue>[])
  final List<FwStandardDataFwTranslatedValue>? translation;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemLFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL &&
            (identical(other.rowType, rowType) ||
                const DeepCollectionEquality()
                    .equals(other.rowType, rowType)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.quantity, quantity) ||
                const DeepCollectionEquality()
                    .equals(other.quantity, quantity)) &&
            (identical(other.printDate, printDate) ||
                const DeepCollectionEquality()
                    .equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) ||
                const DeepCollectionEquality()
                    .equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.printDateTime, printDateTime)) &&
            (identical(other.dateFields, dateFields) ||
                const DeepCollectionEquality()
                    .equals(other.dateFields, dateFields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)) &&
            (identical(other.translation, translation) ||
                const DeepCollectionEquality()
                    .equals(other.translation, translation)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(rowType) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(quantity) ^
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      const DeepCollectionEquality().hash(translation) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemLExtension
    on WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL
      copyWith(
          {String? rowType,
          String? description,
          String? quantity,
          String? printDate,
          String? printTime,
          String? printDateTime,
          List<String>? dateFields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes,
          List<FwStandardDataFwTranslatedValue>? translation}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL(
        rowType: rowType ?? this.rowType,
        description: description ?? this.description,
        quantity: quantity ?? this.quantity,
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        dateFields: dateFields ?? this.dateFields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes,
        translation: translation ?? this.translation);
  }

  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL
      copyWithWrapped(
          {Wrapped<String?>? rowType,
          Wrapped<String?>? description,
          Wrapped<String?>? quantity,
          Wrapped<String?>? printDate,
          Wrapped<String?>? printTime,
          Wrapped<String?>? printDateTime,
          Wrapped<List<String>?>? dateFields,
          Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
          Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
              defaultFieldAttributes,
          Wrapped<List<FwStandardDataFwTranslatedValue>?>? translation}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL(
        rowType: (rowType != null ? rowType.value : this.rowType),
        description:
            (description != null ? description.value : this.description),
        quantity: (quantity != null ? quantity.value : this.quantity),
        printDate: (printDate != null ? printDate.value : this.printDate),
        printTime: (printTime != null ? printTime.value : this.printTime),
        printDateTime:
            (printDateTime != null ? printDateTime.value : this.printDateTime),
        dateFields: (dateFields != null ? dateFields.value : this.dateFields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null
            ? defaultFieldAttributes.value
            : this.defaultFieldAttributes),
        translation:
            (translation != null ? translation.value : this.translation));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL({
    this.sessionNo,
    this.customer,
    this.warehouseId,
    this.estRentFrom,
    this.estRentTo,
    this.quikReceiptTermsConditionsId,
    this.items,
    this.metaData,
    this.dealId,
    this.deal,
    this.dealNumber,
    this.dealNumberAndDeal,
    this.orderId,
    this.orderNumber,
    this.orderDate,
    this.orderPoNumber,
    this.orderType,
    this.orderDescription,
    this.orderNumberAndDescription,
    this.orderLocation,
    this.rowType,
    this.contractId,
    this.contractNumber,
    this.contractDate,
    this.contractTime,
    this.contractDateAndTime,
    this.contractType,
    this.exchangeContractId,
    this.hasPendingExchange,
    this.hasRental,
    this.hasSales,
    this.inputByUserId,
    this.billingDate,
    this.officeLocation,
    this.officeLocationCompany,
    this.officeLocationAddress1,
    this.officeLocationAddress2,
    this.officeLocationCityStateZipCode,
    this.officeLocationCityStateZipCodeCountry,
    this.officeLocationPhone,
    this.officeLocationFax,
    this.warehouse,
    this.warehouseAddress1,
    this.warehouseAddress2,
    this.warehouseCityStateZipCode,
    this.warehouseCityStateZipCodeCountry,
    this.warehousePhone,
    this.warehouseFax,
    this.issuedToCompany,
    this.issuedToAttentionTo1,
    this.issuedToAttentionTo2,
    this.issuedToAddress1,
    this.issuedToAddress2,
    this.issuedToCity,
    this.issuedToState,
    this.issuedToZipCode,
    this.issuedToCountry,
    this.issuedToPhone,
    this.issuedToFax,
    this.usageDates,
    this.billingCycle,
    this.paymentTerms,
    this.agent,
    this.agentEmail,
    this.agentPhoneAndExtension,
    this.agentFax,
    this.department,
    this.deliveryContact,
    this.deliveryLocation,
    this.deliveryAddress1,
    this.deliveryAddress2,
    this.deliveryCity,
    this.deliveryState,
    this.deliveryZip,
    this.deliveryCityStateZipCode,
    this.deliveryCountry,
    this.deliveryContactPhone,
    this.termsAndConditionsId,
    this.termsAndConditionsHtml,
    this.termsAndConditionsNewPage,
    this.personPrintName,
    this.personSignature,
    this.note,
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.dateFields,
    this.custom,
    this.defaultFieldAttributes,
    this.translation,
  });

  factory WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportLFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportLToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportLToJson(
          this);

  @JsonKey(name: 'SessionNo', includeIfNull: false)
  final int? sessionNo;
  @JsonKey(name: 'Customer', includeIfNull: false)
  final String? customer;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'EstRentFrom', includeIfNull: false)
  final String? estRentFrom;
  @JsonKey(name: 'EstRentTo', includeIfNull: false)
  final String? estRentTo;
  @JsonKey(name: 'QuikReceiptTermsConditionsId', includeIfNull: false)
  final String? quikReceiptTermsConditionsId;
  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL>[])
  final List<
          WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL>?
      items;
  @JsonKey(name: 'MetaData', includeIfNull: false)
  final WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData?
      metaData;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'Deal', includeIfNull: false)
  final String? deal;
  @JsonKey(name: 'DealNumber', includeIfNull: false)
  final String? dealNumber;
  @JsonKey(name: 'DealNumberAndDeal', includeIfNull: false)
  final String? dealNumberAndDeal;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'OrderNumber', includeIfNull: false)
  final String? orderNumber;
  @JsonKey(name: 'OrderDate', includeIfNull: false)
  final String? orderDate;
  @JsonKey(name: 'OrderPoNumber', includeIfNull: false)
  final String? orderPoNumber;
  @JsonKey(name: 'OrderType', includeIfNull: false)
  final String? orderType;
  @JsonKey(name: 'OrderDescription', includeIfNull: false)
  final String? orderDescription;
  @JsonKey(name: 'OrderNumberAndDescription', includeIfNull: false)
  final String? orderNumberAndDescription;
  @JsonKey(name: 'OrderLocation', includeIfNull: false)
  final String? orderLocation;
  @JsonKey(name: 'RowType', includeIfNull: false)
  final String? rowType;
  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'ContractNumber', includeIfNull: false)
  final String? contractNumber;
  @JsonKey(name: 'ContractDate', includeIfNull: false)
  final String? contractDate;
  @JsonKey(name: 'ContractTime', includeIfNull: false)
  final String? contractTime;
  @JsonKey(name: 'ContractDateAndTime', includeIfNull: false)
  final String? contractDateAndTime;
  @JsonKey(name: 'ContractType', includeIfNull: false)
  final String? contractType;
  @JsonKey(name: 'ExchangeContractId', includeIfNull: false)
  final String? exchangeContractId;
  @JsonKey(name: 'HasPendingExchange', includeIfNull: false)
  final bool? hasPendingExchange;
  @JsonKey(name: 'HasRental', includeIfNull: false)
  final bool? hasRental;
  @JsonKey(name: 'HasSales', includeIfNull: false)
  final bool? hasSales;
  @JsonKey(name: 'InputByUserId', includeIfNull: false)
  final String? inputByUserId;
  @JsonKey(name: 'BillingDate', includeIfNull: false)
  final String? billingDate;
  @JsonKey(name: 'OfficeLocation', includeIfNull: false)
  final String? officeLocation;
  @JsonKey(name: 'OfficeLocationCompany', includeIfNull: false)
  final String? officeLocationCompany;
  @JsonKey(name: 'OfficeLocationAddress1', includeIfNull: false)
  final String? officeLocationAddress1;
  @JsonKey(name: 'OfficeLocationAddress2', includeIfNull: false)
  final String? officeLocationAddress2;
  @JsonKey(name: 'OfficeLocationCityStateZipCode', includeIfNull: false)
  final String? officeLocationCityStateZipCode;
  @JsonKey(name: 'OfficeLocationCityStateZipCodeCountry', includeIfNull: false)
  final String? officeLocationCityStateZipCodeCountry;
  @JsonKey(name: 'OfficeLocationPhone', includeIfNull: false)
  final String? officeLocationPhone;
  @JsonKey(name: 'OfficeLocationFax', includeIfNull: false)
  final String? officeLocationFax;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'WarehouseAddress1', includeIfNull: false)
  final String? warehouseAddress1;
  @JsonKey(name: 'WarehouseAddress2', includeIfNull: false)
  final String? warehouseAddress2;
  @JsonKey(name: 'WarehouseCityStateZipCode', includeIfNull: false)
  final String? warehouseCityStateZipCode;
  @JsonKey(name: 'WarehouseCityStateZipCodeCountry', includeIfNull: false)
  final String? warehouseCityStateZipCodeCountry;
  @JsonKey(name: 'WarehousePhone', includeIfNull: false)
  final String? warehousePhone;
  @JsonKey(name: 'WarehouseFax', includeIfNull: false)
  final String? warehouseFax;
  @JsonKey(name: 'IssuedToCompany', includeIfNull: false)
  final String? issuedToCompany;
  @JsonKey(name: 'IssuedToAttentionTo1', includeIfNull: false)
  final String? issuedToAttentionTo1;
  @JsonKey(name: 'IssuedToAttentionTo2', includeIfNull: false)
  final String? issuedToAttentionTo2;
  @JsonKey(name: 'IssuedToAddress1', includeIfNull: false)
  final String? issuedToAddress1;
  @JsonKey(name: 'IssuedToAddress2', includeIfNull: false)
  final String? issuedToAddress2;
  @JsonKey(name: 'IssuedToCity', includeIfNull: false)
  final String? issuedToCity;
  @JsonKey(name: 'IssuedToState', includeIfNull: false)
  final String? issuedToState;
  @JsonKey(name: 'IssuedToZipCode', includeIfNull: false)
  final String? issuedToZipCode;
  @JsonKey(name: 'IssuedToCountry', includeIfNull: false)
  final String? issuedToCountry;
  @JsonKey(name: 'IssuedToPhone', includeIfNull: false)
  final String? issuedToPhone;
  @JsonKey(name: 'IssuedToFax', includeIfNull: false)
  final String? issuedToFax;
  @JsonKey(name: 'UsageDates', includeIfNull: false)
  final String? usageDates;
  @JsonKey(name: 'BillingCycle', includeIfNull: false)
  final String? billingCycle;
  @JsonKey(name: 'PaymentTerms', includeIfNull: false)
  final String? paymentTerms;
  @JsonKey(name: 'Agent', includeIfNull: false)
  final String? agent;
  @JsonKey(name: 'AgentEmail', includeIfNull: false)
  final String? agentEmail;
  @JsonKey(name: 'AgentPhoneAndExtension', includeIfNull: false)
  final String? agentPhoneAndExtension;
  @JsonKey(name: 'AgentFax', includeIfNull: false)
  final String? agentFax;
  @JsonKey(name: 'Department', includeIfNull: false)
  final String? department;
  @JsonKey(name: 'DeliveryContact', includeIfNull: false)
  final String? deliveryContact;
  @JsonKey(name: 'DeliveryLocation', includeIfNull: false)
  final String? deliveryLocation;
  @JsonKey(name: 'DeliveryAddress1', includeIfNull: false)
  final String? deliveryAddress1;
  @JsonKey(name: 'DeliveryAddress2', includeIfNull: false)
  final String? deliveryAddress2;
  @JsonKey(name: 'DeliveryCity', includeIfNull: false)
  final String? deliveryCity;
  @JsonKey(name: 'DeliveryState', includeIfNull: false)
  final String? deliveryState;
  @JsonKey(name: 'DeliveryZip', includeIfNull: false)
  final String? deliveryZip;
  @JsonKey(name: 'DeliveryCityStateZipCode', includeIfNull: false)
  final String? deliveryCityStateZipCode;
  @JsonKey(name: 'DeliveryCountry', includeIfNull: false)
  final String? deliveryCountry;
  @JsonKey(name: 'DeliveryContactPhone', includeIfNull: false)
  final String? deliveryContactPhone;
  @JsonKey(name: 'TermsAndConditionsId', includeIfNull: false)
  final String? termsAndConditionsId;
  @JsonKey(name: 'TermsAndConditionsHtml', includeIfNull: false)
  final String? termsAndConditionsHtml;
  @JsonKey(name: 'TermsAndConditionsNewPage', includeIfNull: false)
  final bool? termsAndConditionsNewPage;
  @JsonKey(name: 'PersonPrintName', includeIfNull: false)
  final String? personPrintName;
  @JsonKey(name: 'PersonSignature', includeIfNull: false)
  final String? personSignature;
  @JsonKey(name: 'Note', includeIfNull: false)
  final String? note;
  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  @JsonKey(
      name: '_Translation',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwTranslatedValue>[])
  final List<FwStandardDataFwTranslatedValue>? translation;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportLFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL &&
            (identical(other.sessionNo, sessionNo) ||
                const DeepCollectionEquality()
                    .equals(other.sessionNo, sessionNo)) &&
            (identical(other.customer, customer) ||
                const DeepCollectionEquality()
                    .equals(other.customer, customer)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.estRentFrom, estRentFrom) ||
                const DeepCollectionEquality()
                    .equals(other.estRentFrom, estRentFrom)) &&
            (identical(other.estRentTo, estRentTo) ||
                const DeepCollectionEquality()
                    .equals(other.estRentTo, estRentTo)) &&
            (identical(other.quikReceiptTermsConditionsId, quikReceiptTermsConditionsId) ||
                const DeepCollectionEquality().equals(
                    other.quikReceiptTermsConditionsId,
                    quikReceiptTermsConditionsId)) &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.metaData, metaData) ||
                const DeepCollectionEquality()
                    .equals(other.metaData, metaData)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.deal, deal) ||
                const DeepCollectionEquality().equals(other.deal, deal)) &&
            (identical(other.dealNumber, dealNumber) ||
                const DeepCollectionEquality()
                    .equals(other.dealNumber, dealNumber)) &&
            (identical(other.dealNumberAndDeal, dealNumberAndDeal) ||
                const DeepCollectionEquality()
                    .equals(other.dealNumberAndDeal, dealNumberAndDeal)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.orderNumber, orderNumber) ||
                const DeepCollectionEquality()
                    .equals(other.orderNumber, orderNumber)) &&
            (identical(other.orderDate, orderDate) ||
                const DeepCollectionEquality()
                    .equals(other.orderDate, orderDate)) &&
            (identical(other.orderPoNumber, orderPoNumber) || const DeepCollectionEquality().equals(other.orderPoNumber, orderPoNumber)) &&
            (identical(other.orderType, orderType) || const DeepCollectionEquality().equals(other.orderType, orderType)) &&
            (identical(other.orderDescription, orderDescription) || const DeepCollectionEquality().equals(other.orderDescription, orderDescription)) &&
            (identical(other.orderNumberAndDescription, orderNumberAndDescription) || const DeepCollectionEquality().equals(other.orderNumberAndDescription, orderNumberAndDescription)) &&
            (identical(other.orderLocation, orderLocation) || const DeepCollectionEquality().equals(other.orderLocation, orderLocation)) &&
            (identical(other.rowType, rowType) || const DeepCollectionEquality().equals(other.rowType, rowType)) &&
            (identical(other.contractId, contractId) || const DeepCollectionEquality().equals(other.contractId, contractId)) &&
            (identical(other.contractNumber, contractNumber) || const DeepCollectionEquality().equals(other.contractNumber, contractNumber)) &&
            (identical(other.contractDate, contractDate) || const DeepCollectionEquality().equals(other.contractDate, contractDate)) &&
            (identical(other.contractTime, contractTime) || const DeepCollectionEquality().equals(other.contractTime, contractTime)) &&
            (identical(other.contractDateAndTime, contractDateAndTime) || const DeepCollectionEquality().equals(other.contractDateAndTime, contractDateAndTime)) &&
            (identical(other.contractType, contractType) || const DeepCollectionEquality().equals(other.contractType, contractType)) &&
            (identical(other.exchangeContractId, exchangeContractId) || const DeepCollectionEquality().equals(other.exchangeContractId, exchangeContractId)) &&
            (identical(other.hasPendingExchange, hasPendingExchange) || const DeepCollectionEquality().equals(other.hasPendingExchange, hasPendingExchange)) &&
            (identical(other.hasRental, hasRental) || const DeepCollectionEquality().equals(other.hasRental, hasRental)) &&
            (identical(other.hasSales, hasSales) || const DeepCollectionEquality().equals(other.hasSales, hasSales)) &&
            (identical(other.inputByUserId, inputByUserId) || const DeepCollectionEquality().equals(other.inputByUserId, inputByUserId)) &&
            (identical(other.billingDate, billingDate) || const DeepCollectionEquality().equals(other.billingDate, billingDate)) &&
            (identical(other.officeLocation, officeLocation) || const DeepCollectionEquality().equals(other.officeLocation, officeLocation)) &&
            (identical(other.officeLocationCompany, officeLocationCompany) || const DeepCollectionEquality().equals(other.officeLocationCompany, officeLocationCompany)) &&
            (identical(other.officeLocationAddress1, officeLocationAddress1) || const DeepCollectionEquality().equals(other.officeLocationAddress1, officeLocationAddress1)) &&
            (identical(other.officeLocationAddress2, officeLocationAddress2) || const DeepCollectionEquality().equals(other.officeLocationAddress2, officeLocationAddress2)) &&
            (identical(other.officeLocationCityStateZipCode, officeLocationCityStateZipCode) || const DeepCollectionEquality().equals(other.officeLocationCityStateZipCode, officeLocationCityStateZipCode)) &&
            (identical(other.officeLocationCityStateZipCodeCountry, officeLocationCityStateZipCodeCountry) || const DeepCollectionEquality().equals(other.officeLocationCityStateZipCodeCountry, officeLocationCityStateZipCodeCountry)) &&
            (identical(other.officeLocationPhone, officeLocationPhone) || const DeepCollectionEquality().equals(other.officeLocationPhone, officeLocationPhone)) &&
            (identical(other.officeLocationFax, officeLocationFax) || const DeepCollectionEquality().equals(other.officeLocationFax, officeLocationFax)) &&
            (identical(other.warehouse, warehouse) || const DeepCollectionEquality().equals(other.warehouse, warehouse)) &&
            (identical(other.warehouseAddress1, warehouseAddress1) || const DeepCollectionEquality().equals(other.warehouseAddress1, warehouseAddress1)) &&
            (identical(other.warehouseAddress2, warehouseAddress2) || const DeepCollectionEquality().equals(other.warehouseAddress2, warehouseAddress2)) &&
            (identical(other.warehouseCityStateZipCode, warehouseCityStateZipCode) || const DeepCollectionEquality().equals(other.warehouseCityStateZipCode, warehouseCityStateZipCode)) &&
            (identical(other.warehouseCityStateZipCodeCountry, warehouseCityStateZipCodeCountry) || const DeepCollectionEquality().equals(other.warehouseCityStateZipCodeCountry, warehouseCityStateZipCodeCountry)) &&
            (identical(other.warehousePhone, warehousePhone) || const DeepCollectionEquality().equals(other.warehousePhone, warehousePhone)) &&
            (identical(other.warehouseFax, warehouseFax) || const DeepCollectionEquality().equals(other.warehouseFax, warehouseFax)) &&
            (identical(other.issuedToCompany, issuedToCompany) || const DeepCollectionEquality().equals(other.issuedToCompany, issuedToCompany)) &&
            (identical(other.issuedToAttentionTo1, issuedToAttentionTo1) || const DeepCollectionEquality().equals(other.issuedToAttentionTo1, issuedToAttentionTo1)) &&
            (identical(other.issuedToAttentionTo2, issuedToAttentionTo2) || const DeepCollectionEquality().equals(other.issuedToAttentionTo2, issuedToAttentionTo2)) &&
            (identical(other.issuedToAddress1, issuedToAddress1) || const DeepCollectionEquality().equals(other.issuedToAddress1, issuedToAddress1)) &&
            (identical(other.issuedToAddress2, issuedToAddress2) || const DeepCollectionEquality().equals(other.issuedToAddress2, issuedToAddress2)) &&
            (identical(other.issuedToCity, issuedToCity) || const DeepCollectionEquality().equals(other.issuedToCity, issuedToCity)) &&
            (identical(other.issuedToState, issuedToState) || const DeepCollectionEquality().equals(other.issuedToState, issuedToState)) &&
            (identical(other.issuedToZipCode, issuedToZipCode) || const DeepCollectionEquality().equals(other.issuedToZipCode, issuedToZipCode)) &&
            (identical(other.issuedToCountry, issuedToCountry) || const DeepCollectionEquality().equals(other.issuedToCountry, issuedToCountry)) &&
            (identical(other.issuedToPhone, issuedToPhone) || const DeepCollectionEquality().equals(other.issuedToPhone, issuedToPhone)) &&
            (identical(other.issuedToFax, issuedToFax) || const DeepCollectionEquality().equals(other.issuedToFax, issuedToFax)) &&
            (identical(other.usageDates, usageDates) || const DeepCollectionEquality().equals(other.usageDates, usageDates)) &&
            (identical(other.billingCycle, billingCycle) || const DeepCollectionEquality().equals(other.billingCycle, billingCycle)) &&
            (identical(other.paymentTerms, paymentTerms) || const DeepCollectionEquality().equals(other.paymentTerms, paymentTerms)) &&
            (identical(other.agent, agent) || const DeepCollectionEquality().equals(other.agent, agent)) &&
            (identical(other.agentEmail, agentEmail) || const DeepCollectionEquality().equals(other.agentEmail, agentEmail)) &&
            (identical(other.agentPhoneAndExtension, agentPhoneAndExtension) || const DeepCollectionEquality().equals(other.agentPhoneAndExtension, agentPhoneAndExtension)) &&
            (identical(other.agentFax, agentFax) || const DeepCollectionEquality().equals(other.agentFax, agentFax)) &&
            (identical(other.department, department) || const DeepCollectionEquality().equals(other.department, department)) &&
            (identical(other.deliveryContact, deliveryContact) || const DeepCollectionEquality().equals(other.deliveryContact, deliveryContact)) &&
            (identical(other.deliveryLocation, deliveryLocation) || const DeepCollectionEquality().equals(other.deliveryLocation, deliveryLocation)) &&
            (identical(other.deliveryAddress1, deliveryAddress1) || const DeepCollectionEquality().equals(other.deliveryAddress1, deliveryAddress1)) &&
            (identical(other.deliveryAddress2, deliveryAddress2) || const DeepCollectionEquality().equals(other.deliveryAddress2, deliveryAddress2)) &&
            (identical(other.deliveryCity, deliveryCity) || const DeepCollectionEquality().equals(other.deliveryCity, deliveryCity)) &&
            (identical(other.deliveryState, deliveryState) || const DeepCollectionEquality().equals(other.deliveryState, deliveryState)) &&
            (identical(other.deliveryZip, deliveryZip) || const DeepCollectionEquality().equals(other.deliveryZip, deliveryZip)) &&
            (identical(other.deliveryCityStateZipCode, deliveryCityStateZipCode) || const DeepCollectionEquality().equals(other.deliveryCityStateZipCode, deliveryCityStateZipCode)) &&
            (identical(other.deliveryCountry, deliveryCountry) || const DeepCollectionEquality().equals(other.deliveryCountry, deliveryCountry)) &&
            (identical(other.deliveryContactPhone, deliveryContactPhone) || const DeepCollectionEquality().equals(other.deliveryContactPhone, deliveryContactPhone)) &&
            (identical(other.termsAndConditionsId, termsAndConditionsId) || const DeepCollectionEquality().equals(other.termsAndConditionsId, termsAndConditionsId)) &&
            (identical(other.termsAndConditionsHtml, termsAndConditionsHtml) || const DeepCollectionEquality().equals(other.termsAndConditionsHtml, termsAndConditionsHtml)) &&
            (identical(other.termsAndConditionsNewPage, termsAndConditionsNewPage) || const DeepCollectionEquality().equals(other.termsAndConditionsNewPage, termsAndConditionsNewPage)) &&
            (identical(other.personPrintName, personPrintName) || const DeepCollectionEquality().equals(other.personPrintName, personPrintName)) &&
            (identical(other.personSignature, personSignature) || const DeepCollectionEquality().equals(other.personSignature, personSignature)) &&
            (identical(other.note, note) || const DeepCollectionEquality().equals(other.note, note)) &&
            (identical(other.printDate, printDate) || const DeepCollectionEquality().equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) || const DeepCollectionEquality().equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) || const DeepCollectionEquality().equals(other.printDateTime, printDateTime)) &&
            (identical(other.dateFields, dateFields) || const DeepCollectionEquality().equals(other.dateFields, dateFields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)) &&
            (identical(other.translation, translation) || const DeepCollectionEquality().equals(other.translation, translation)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionNo) ^
      const DeepCollectionEquality().hash(customer) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(estRentFrom) ^
      const DeepCollectionEquality().hash(estRentTo) ^
      const DeepCollectionEquality().hash(quikReceiptTermsConditionsId) ^
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(metaData) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(deal) ^
      const DeepCollectionEquality().hash(dealNumber) ^
      const DeepCollectionEquality().hash(dealNumberAndDeal) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(orderNumber) ^
      const DeepCollectionEquality().hash(orderDate) ^
      const DeepCollectionEquality().hash(orderPoNumber) ^
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(orderDescription) ^
      const DeepCollectionEquality().hash(orderNumberAndDescription) ^
      const DeepCollectionEquality().hash(orderLocation) ^
      const DeepCollectionEquality().hash(rowType) ^
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(contractNumber) ^
      const DeepCollectionEquality().hash(contractDate) ^
      const DeepCollectionEquality().hash(contractTime) ^
      const DeepCollectionEquality().hash(contractDateAndTime) ^
      const DeepCollectionEquality().hash(contractType) ^
      const DeepCollectionEquality().hash(exchangeContractId) ^
      const DeepCollectionEquality().hash(hasPendingExchange) ^
      const DeepCollectionEquality().hash(hasRental) ^
      const DeepCollectionEquality().hash(hasSales) ^
      const DeepCollectionEquality().hash(inputByUserId) ^
      const DeepCollectionEquality().hash(billingDate) ^
      const DeepCollectionEquality().hash(officeLocation) ^
      const DeepCollectionEquality().hash(officeLocationCompany) ^
      const DeepCollectionEquality().hash(officeLocationAddress1) ^
      const DeepCollectionEquality().hash(officeLocationAddress2) ^
      const DeepCollectionEquality().hash(officeLocationCityStateZipCode) ^
      const DeepCollectionEquality()
          .hash(officeLocationCityStateZipCodeCountry) ^
      const DeepCollectionEquality().hash(officeLocationPhone) ^
      const DeepCollectionEquality().hash(officeLocationFax) ^
      const DeepCollectionEquality().hash(warehouse) ^
      const DeepCollectionEquality().hash(warehouseAddress1) ^
      const DeepCollectionEquality().hash(warehouseAddress2) ^
      const DeepCollectionEquality().hash(warehouseCityStateZipCode) ^
      const DeepCollectionEquality().hash(warehouseCityStateZipCodeCountry) ^
      const DeepCollectionEquality().hash(warehousePhone) ^
      const DeepCollectionEquality().hash(warehouseFax) ^
      const DeepCollectionEquality().hash(issuedToCompany) ^
      const DeepCollectionEquality().hash(issuedToAttentionTo1) ^
      const DeepCollectionEquality().hash(issuedToAttentionTo2) ^
      const DeepCollectionEquality().hash(issuedToAddress1) ^
      const DeepCollectionEquality().hash(issuedToAddress2) ^
      const DeepCollectionEquality().hash(issuedToCity) ^
      const DeepCollectionEquality().hash(issuedToState) ^
      const DeepCollectionEquality().hash(issuedToZipCode) ^
      const DeepCollectionEquality().hash(issuedToCountry) ^
      const DeepCollectionEquality().hash(issuedToPhone) ^
      const DeepCollectionEquality().hash(issuedToFax) ^
      const DeepCollectionEquality().hash(usageDates) ^
      const DeepCollectionEquality().hash(billingCycle) ^
      const DeepCollectionEquality().hash(paymentTerms) ^
      const DeepCollectionEquality().hash(agent) ^
      const DeepCollectionEquality().hash(agentEmail) ^
      const DeepCollectionEquality().hash(agentPhoneAndExtension) ^
      const DeepCollectionEquality().hash(agentFax) ^
      const DeepCollectionEquality().hash(department) ^
      const DeepCollectionEquality().hash(deliveryContact) ^
      const DeepCollectionEquality().hash(deliveryLocation) ^
      const DeepCollectionEquality().hash(deliveryAddress1) ^
      const DeepCollectionEquality().hash(deliveryAddress2) ^
      const DeepCollectionEquality().hash(deliveryCity) ^
      const DeepCollectionEquality().hash(deliveryState) ^
      const DeepCollectionEquality().hash(deliveryZip) ^
      const DeepCollectionEquality().hash(deliveryCityStateZipCode) ^
      const DeepCollectionEquality().hash(deliveryCountry) ^
      const DeepCollectionEquality().hash(deliveryContactPhone) ^
      const DeepCollectionEquality().hash(termsAndConditionsId) ^
      const DeepCollectionEquality().hash(termsAndConditionsHtml) ^
      const DeepCollectionEquality().hash(termsAndConditionsNewPage) ^
      const DeepCollectionEquality().hash(personPrintName) ^
      const DeepCollectionEquality().hash(personSignature) ^
      const DeepCollectionEquality().hash(note) ^
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      const DeepCollectionEquality().hash(translation) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportLExtension
    on WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL copyWith(
      {int? sessionNo,
      String? customer,
      String? warehouseId,
      String? estRentFrom,
      String? estRentTo,
      String? quikReceiptTermsConditionsId,
      List<WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL>?
          items,
      WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData?
          metaData,
      String? dealId,
      String? deal,
      String? dealNumber,
      String? dealNumberAndDeal,
      String? orderId,
      String? orderNumber,
      String? orderDate,
      String? orderPoNumber,
      String? orderType,
      String? orderDescription,
      String? orderNumberAndDescription,
      String? orderLocation,
      String? rowType,
      String? contractId,
      String? contractNumber,
      String? contractDate,
      String? contractTime,
      String? contractDateAndTime,
      String? contractType,
      String? exchangeContractId,
      bool? hasPendingExchange,
      bool? hasRental,
      bool? hasSales,
      String? inputByUserId,
      String? billingDate,
      String? officeLocation,
      String? officeLocationCompany,
      String? officeLocationAddress1,
      String? officeLocationAddress2,
      String? officeLocationCityStateZipCode,
      String? officeLocationCityStateZipCodeCountry,
      String? officeLocationPhone,
      String? officeLocationFax,
      String? warehouse,
      String? warehouseAddress1,
      String? warehouseAddress2,
      String? warehouseCityStateZipCode,
      String? warehouseCityStateZipCodeCountry,
      String? warehousePhone,
      String? warehouseFax,
      String? issuedToCompany,
      String? issuedToAttentionTo1,
      String? issuedToAttentionTo2,
      String? issuedToAddress1,
      String? issuedToAddress2,
      String? issuedToCity,
      String? issuedToState,
      String? issuedToZipCode,
      String? issuedToCountry,
      String? issuedToPhone,
      String? issuedToFax,
      String? usageDates,
      String? billingCycle,
      String? paymentTerms,
      String? agent,
      String? agentEmail,
      String? agentPhoneAndExtension,
      String? agentFax,
      String? department,
      String? deliveryContact,
      String? deliveryLocation,
      String? deliveryAddress1,
      String? deliveryAddress2,
      String? deliveryCity,
      String? deliveryState,
      String? deliveryZip,
      String? deliveryCityStateZipCode,
      String? deliveryCountry,
      String? deliveryContactPhone,
      String? termsAndConditionsId,
      String? termsAndConditionsHtml,
      bool? termsAndConditionsNewPage,
      String? personPrintName,
      String? personSignature,
      String? note,
      String? printDate,
      String? printTime,
      String? printDateTime,
      List<String>? dateFields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes,
      List<FwStandardDataFwTranslatedValue>? translation}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL(
        sessionNo: sessionNo ?? this.sessionNo,
        customer: customer ?? this.customer,
        warehouseId: warehouseId ?? this.warehouseId,
        estRentFrom: estRentFrom ?? this.estRentFrom,
        estRentTo: estRentTo ?? this.estRentTo,
        quikReceiptTermsConditionsId:
            quikReceiptTermsConditionsId ?? this.quikReceiptTermsConditionsId,
        items: items ?? this.items,
        metaData: metaData ?? this.metaData,
        dealId: dealId ?? this.dealId,
        deal: deal ?? this.deal,
        dealNumber: dealNumber ?? this.dealNumber,
        dealNumberAndDeal: dealNumberAndDeal ?? this.dealNumberAndDeal,
        orderId: orderId ?? this.orderId,
        orderNumber: orderNumber ?? this.orderNumber,
        orderDate: orderDate ?? this.orderDate,
        orderPoNumber: orderPoNumber ?? this.orderPoNumber,
        orderType: orderType ?? this.orderType,
        orderDescription: orderDescription ?? this.orderDescription,
        orderNumberAndDescription:
            orderNumberAndDescription ?? this.orderNumberAndDescription,
        orderLocation: orderLocation ?? this.orderLocation,
        rowType: rowType ?? this.rowType,
        contractId: contractId ?? this.contractId,
        contractNumber: contractNumber ?? this.contractNumber,
        contractDate: contractDate ?? this.contractDate,
        contractTime: contractTime ?? this.contractTime,
        contractDateAndTime: contractDateAndTime ?? this.contractDateAndTime,
        contractType: contractType ?? this.contractType,
        exchangeContractId: exchangeContractId ?? this.exchangeContractId,
        hasPendingExchange: hasPendingExchange ?? this.hasPendingExchange,
        hasRental: hasRental ?? this.hasRental,
        hasSales: hasSales ?? this.hasSales,
        inputByUserId: inputByUserId ?? this.inputByUserId,
        billingDate: billingDate ?? this.billingDate,
        officeLocation: officeLocation ?? this.officeLocation,
        officeLocationCompany:
            officeLocationCompany ?? this.officeLocationCompany,
        officeLocationAddress1:
            officeLocationAddress1 ?? this.officeLocationAddress1,
        officeLocationAddress2:
            officeLocationAddress2 ?? this.officeLocationAddress2,
        officeLocationCityStateZipCode: officeLocationCityStateZipCode ??
            this.officeLocationCityStateZipCode,
        officeLocationCityStateZipCodeCountry:
            officeLocationCityStateZipCodeCountry ??
                this.officeLocationCityStateZipCodeCountry,
        officeLocationPhone: officeLocationPhone ?? this.officeLocationPhone,
        officeLocationFax: officeLocationFax ?? this.officeLocationFax,
        warehouse: warehouse ?? this.warehouse,
        warehouseAddress1: warehouseAddress1 ?? this.warehouseAddress1,
        warehouseAddress2: warehouseAddress2 ?? this.warehouseAddress2,
        warehouseCityStateZipCode:
            warehouseCityStateZipCode ?? this.warehouseCityStateZipCode,
        warehouseCityStateZipCodeCountry: warehouseCityStateZipCodeCountry ??
            this.warehouseCityStateZipCodeCountry,
        warehousePhone: warehousePhone ?? this.warehousePhone,
        warehouseFax: warehouseFax ?? this.warehouseFax,
        issuedToCompany: issuedToCompany ?? this.issuedToCompany,
        issuedToAttentionTo1: issuedToAttentionTo1 ?? this.issuedToAttentionTo1,
        issuedToAttentionTo2: issuedToAttentionTo2 ?? this.issuedToAttentionTo2,
        issuedToAddress1: issuedToAddress1 ?? this.issuedToAddress1,
        issuedToAddress2: issuedToAddress2 ?? this.issuedToAddress2,
        issuedToCity: issuedToCity ?? this.issuedToCity,
        issuedToState: issuedToState ?? this.issuedToState,
        issuedToZipCode: issuedToZipCode ?? this.issuedToZipCode,
        issuedToCountry: issuedToCountry ?? this.issuedToCountry,
        issuedToPhone: issuedToPhone ?? this.issuedToPhone,
        issuedToFax: issuedToFax ?? this.issuedToFax,
        usageDates: usageDates ?? this.usageDates,
        billingCycle: billingCycle ?? this.billingCycle,
        paymentTerms: paymentTerms ?? this.paymentTerms,
        agent: agent ?? this.agent,
        agentEmail: agentEmail ?? this.agentEmail,
        agentPhoneAndExtension:
            agentPhoneAndExtension ?? this.agentPhoneAndExtension,
        agentFax: agentFax ?? this.agentFax,
        department: department ?? this.department,
        deliveryContact: deliveryContact ?? this.deliveryContact,
        deliveryLocation: deliveryLocation ?? this.deliveryLocation,
        deliveryAddress1: deliveryAddress1 ?? this.deliveryAddress1,
        deliveryAddress2: deliveryAddress2 ?? this.deliveryAddress2,
        deliveryCity: deliveryCity ?? this.deliveryCity,
        deliveryState: deliveryState ?? this.deliveryState,
        deliveryZip: deliveryZip ?? this.deliveryZip,
        deliveryCityStateZipCode:
            deliveryCityStateZipCode ?? this.deliveryCityStateZipCode,
        deliveryCountry: deliveryCountry ?? this.deliveryCountry,
        deliveryContactPhone: deliveryContactPhone ?? this.deliveryContactPhone,
        termsAndConditionsId: termsAndConditionsId ?? this.termsAndConditionsId,
        termsAndConditionsHtml:
            termsAndConditionsHtml ?? this.termsAndConditionsHtml,
        termsAndConditionsNewPage:
            termsAndConditionsNewPage ?? this.termsAndConditionsNewPage,
        personPrintName: personPrintName ?? this.personPrintName,
        personSignature: personSignature ?? this.personSignature,
        note: note ?? this.note,
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        dateFields: dateFields ?? this.dateFields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes,
        translation: translation ?? this.translation);
  }

  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL
      copyWithWrapped(
          {Wrapped<int?>? sessionNo,
          Wrapped<String?>? customer,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? estRentFrom,
          Wrapped<String?>? estRentTo,
          Wrapped<String?>? quikReceiptTermsConditionsId,
          Wrapped<
                  List<
                      WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL>?>?
              items,
          Wrapped<WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData?>?
              metaData,
          Wrapped<String?>? dealId,
          Wrapped<String?>? deal,
          Wrapped<String?>? dealNumber,
          Wrapped<String?>? dealNumberAndDeal,
          Wrapped<String?>? orderId,
          Wrapped<String?>? orderNumber,
          Wrapped<String?>? orderDate,
          Wrapped<String?>? orderPoNumber,
          Wrapped<String?>? orderType,
          Wrapped<String?>? orderDescription,
          Wrapped<String?>? orderNumberAndDescription,
          Wrapped<String?>? orderLocation,
          Wrapped<String?>? rowType,
          Wrapped<String?>? contractId,
          Wrapped<String?>? contractNumber,
          Wrapped<String?>? contractDate,
          Wrapped<String?>? contractTime,
          Wrapped<String?>? contractDateAndTime,
          Wrapped<String?>? contractType,
          Wrapped<String?>? exchangeContractId,
          Wrapped<bool?>? hasPendingExchange,
          Wrapped<bool?>? hasRental,
          Wrapped<bool?>? hasSales,
          Wrapped<String?>? inputByUserId,
          Wrapped<String?>? billingDate,
          Wrapped<String?>? officeLocation,
          Wrapped<String?>? officeLocationCompany,
          Wrapped<String?>? officeLocationAddress1,
          Wrapped<String?>? officeLocationAddress2,
          Wrapped<String?>? officeLocationCityStateZipCode,
          Wrapped<String?>? officeLocationCityStateZipCodeCountry,
          Wrapped<String?>? officeLocationPhone,
          Wrapped<String?>? officeLocationFax,
          Wrapped<String?>? warehouse,
          Wrapped<String?>? warehouseAddress1,
          Wrapped<String?>? warehouseAddress2,
          Wrapped<String?>? warehouseCityStateZipCode,
          Wrapped<String?>? warehouseCityStateZipCodeCountry,
          Wrapped<String?>? warehousePhone,
          Wrapped<String?>? warehouseFax,
          Wrapped<String?>? issuedToCompany,
          Wrapped<String?>? issuedToAttentionTo1,
          Wrapped<String?>? issuedToAttentionTo2,
          Wrapped<String?>? issuedToAddress1,
          Wrapped<String?>? issuedToAddress2,
          Wrapped<String?>? issuedToCity,
          Wrapped<String?>? issuedToState,
          Wrapped<String?>? issuedToZipCode,
          Wrapped<String?>? issuedToCountry,
          Wrapped<String?>? issuedToPhone,
          Wrapped<String?>? issuedToFax,
          Wrapped<String?>? usageDates,
          Wrapped<String?>? billingCycle,
          Wrapped<String?>? paymentTerms,
          Wrapped<String?>? agent,
          Wrapped<String?>? agentEmail,
          Wrapped<String?>? agentPhoneAndExtension,
          Wrapped<String?>? agentFax,
          Wrapped<String?>? department,
          Wrapped<String?>? deliveryContact,
          Wrapped<String?>? deliveryLocation,
          Wrapped<String?>? deliveryAddress1,
          Wrapped<String?>? deliveryAddress2,
          Wrapped<String?>? deliveryCity,
          Wrapped<String?>? deliveryState,
          Wrapped<String?>? deliveryZip,
          Wrapped<String?>? deliveryCityStateZipCode,
          Wrapped<String?>? deliveryCountry,
          Wrapped<String?>? deliveryContactPhone,
          Wrapped<String?>? termsAndConditionsId,
          Wrapped<String?>? termsAndConditionsHtml,
          Wrapped<bool?>? termsAndConditionsNewPage,
          Wrapped<String?>? personPrintName,
          Wrapped<String?>? personSignature,
          Wrapped<String?>? note,
          Wrapped<String?>? printDate,
          Wrapped<String?>? printTime,
          Wrapped<String?>? printDateTime,
          Wrapped<List<String>?>? dateFields,
          Wrapped<List<FwStandardDataFwCustomValue>?>? custom,
          Wrapped<List<FwStandardDataFwDefaultAttribute>?>?
              defaultFieldAttributes,
          Wrapped<List<FwStandardDataFwTranslatedValue>?>? translation}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL(
        sessionNo: (sessionNo != null ? sessionNo.value : this.sessionNo),
        customer: (customer != null ? customer.value : this.customer),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        estRentFrom:
            (estRentFrom != null ? estRentFrom.value : this.estRentFrom),
        estRentTo: (estRentTo != null ? estRentTo.value : this.estRentTo),
        quikReceiptTermsConditionsId: (quikReceiptTermsConditionsId != null
            ? quikReceiptTermsConditionsId.value
            : this.quikReceiptTermsConditionsId),
        items: (items != null ? items.value : this.items),
        metaData: (metaData != null ? metaData.value : this.metaData),
        dealId: (dealId != null ? dealId.value : this.dealId),
        deal: (deal != null ? deal.value : this.deal),
        dealNumber: (dealNumber != null ? dealNumber.value : this.dealNumber),
        dealNumberAndDeal: (dealNumberAndDeal != null
            ? dealNumberAndDeal.value
            : this.dealNumberAndDeal),
        orderId: (orderId != null ? orderId.value : this.orderId),
        orderNumber:
            (orderNumber != null ? orderNumber.value : this.orderNumber),
        orderDate: (orderDate != null ? orderDate.value : this.orderDate),
        orderPoNumber:
            (orderPoNumber != null ? orderPoNumber.value : this.orderPoNumber),
        orderType: (orderType != null ? orderType.value : this.orderType),
        orderDescription: (orderDescription != null
            ? orderDescription.value
            : this.orderDescription),
        orderNumberAndDescription: (orderNumberAndDescription != null
            ? orderNumberAndDescription.value
            : this.orderNumberAndDescription),
        orderLocation:
            (orderLocation != null ? orderLocation.value : this.orderLocation),
        rowType: (rowType != null ? rowType.value : this.rowType),
        contractId: (contractId != null ? contractId.value : this.contractId),
        contractNumber: (contractNumber != null
            ? contractNumber.value
            : this.contractNumber),
        contractDate:
            (contractDate != null ? contractDate.value : this.contractDate),
        contractTime:
            (contractTime != null ? contractTime.value : this.contractTime),
        contractDateAndTime: (contractDateAndTime != null
            ? contractDateAndTime.value
            : this.contractDateAndTime),
        contractType:
            (contractType != null ? contractType.value : this.contractType),
        exchangeContractId: (exchangeContractId != null
            ? exchangeContractId.value
            : this.exchangeContractId),
        hasPendingExchange: (hasPendingExchange != null
            ? hasPendingExchange.value
            : this.hasPendingExchange),
        hasRental: (hasRental != null ? hasRental.value : this.hasRental),
        hasSales: (hasSales != null ? hasSales.value : this.hasSales),
        inputByUserId:
            (inputByUserId != null ? inputByUserId.value : this.inputByUserId),
        billingDate:
            (billingDate != null ? billingDate.value : this.billingDate),
        officeLocation: (officeLocation != null
            ? officeLocation.value
            : this.officeLocation),
        officeLocationCompany: (officeLocationCompany != null
            ? officeLocationCompany.value
            : this.officeLocationCompany),
        officeLocationAddress1: (officeLocationAddress1 != null
            ? officeLocationAddress1.value
            : this.officeLocationAddress1),
        officeLocationAddress2: (officeLocationAddress2 != null
            ? officeLocationAddress2.value
            : this.officeLocationAddress2),
        officeLocationCityStateZipCode: (officeLocationCityStateZipCode != null
            ? officeLocationCityStateZipCode.value
            : this.officeLocationCityStateZipCode),
        officeLocationCityStateZipCodeCountry:
            (officeLocationCityStateZipCodeCountry != null
                ? officeLocationCityStateZipCodeCountry.value
                : this.officeLocationCityStateZipCodeCountry),
        officeLocationPhone: (officeLocationPhone != null
            ? officeLocationPhone.value
            : this.officeLocationPhone),
        officeLocationFax: (officeLocationFax != null
            ? officeLocationFax.value
            : this.officeLocationFax),
        warehouse: (warehouse != null ? warehouse.value : this.warehouse),
        warehouseAddress1: (warehouseAddress1 != null
            ? warehouseAddress1.value
            : this.warehouseAddress1),
        warehouseAddress2: (warehouseAddress2 != null
            ? warehouseAddress2.value
            : this.warehouseAddress2),
        warehouseCityStateZipCode: (warehouseCityStateZipCode != null
            ? warehouseCityStateZipCode.value
            : this.warehouseCityStateZipCode),
        warehouseCityStateZipCodeCountry: (warehouseCityStateZipCodeCountry != null
            ? warehouseCityStateZipCodeCountry.value
            : this.warehouseCityStateZipCodeCountry),
        warehousePhone: (warehousePhone != null
            ? warehousePhone.value
            : this.warehousePhone),
        warehouseFax:
            (warehouseFax != null ? warehouseFax.value : this.warehouseFax),
        issuedToCompany: (issuedToCompany != null
            ? issuedToCompany.value
            : this.issuedToCompany),
        issuedToAttentionTo1: (issuedToAttentionTo1 != null
            ? issuedToAttentionTo1.value
            : this.issuedToAttentionTo1),
        issuedToAttentionTo2: (issuedToAttentionTo2 != null
            ? issuedToAttentionTo2.value
            : this.issuedToAttentionTo2),
        issuedToAddress1: (issuedToAddress1 != null
            ? issuedToAddress1.value
            : this.issuedToAddress1),
        issuedToAddress2: (issuedToAddress2 != null
            ? issuedToAddress2.value
            : this.issuedToAddress2),
        issuedToCity:
            (issuedToCity != null ? issuedToCity.value : this.issuedToCity),
        issuedToState:
            (issuedToState != null ? issuedToState.value : this.issuedToState),
        issuedToZipCode: (issuedToZipCode != null
            ? issuedToZipCode.value
            : this.issuedToZipCode),
        issuedToCountry: (issuedToCountry != null
            ? issuedToCountry.value
            : this.issuedToCountry),
        issuedToPhone: (issuedToPhone != null ? issuedToPhone.value : this.issuedToPhone),
        issuedToFax: (issuedToFax != null ? issuedToFax.value : this.issuedToFax),
        usageDates: (usageDates != null ? usageDates.value : this.usageDates),
        billingCycle: (billingCycle != null ? billingCycle.value : this.billingCycle),
        paymentTerms: (paymentTerms != null ? paymentTerms.value : this.paymentTerms),
        agent: (agent != null ? agent.value : this.agent),
        agentEmail: (agentEmail != null ? agentEmail.value : this.agentEmail),
        agentPhoneAndExtension: (agentPhoneAndExtension != null ? agentPhoneAndExtension.value : this.agentPhoneAndExtension),
        agentFax: (agentFax != null ? agentFax.value : this.agentFax),
        department: (department != null ? department.value : this.department),
        deliveryContact: (deliveryContact != null ? deliveryContact.value : this.deliveryContact),
        deliveryLocation: (deliveryLocation != null ? deliveryLocation.value : this.deliveryLocation),
        deliveryAddress1: (deliveryAddress1 != null ? deliveryAddress1.value : this.deliveryAddress1),
        deliveryAddress2: (deliveryAddress2 != null ? deliveryAddress2.value : this.deliveryAddress2),
        deliveryCity: (deliveryCity != null ? deliveryCity.value : this.deliveryCity),
        deliveryState: (deliveryState != null ? deliveryState.value : this.deliveryState),
        deliveryZip: (deliveryZip != null ? deliveryZip.value : this.deliveryZip),
        deliveryCityStateZipCode: (deliveryCityStateZipCode != null ? deliveryCityStateZipCode.value : this.deliveryCityStateZipCode),
        deliveryCountry: (deliveryCountry != null ? deliveryCountry.value : this.deliveryCountry),
        deliveryContactPhone: (deliveryContactPhone != null ? deliveryContactPhone.value : this.deliveryContactPhone),
        termsAndConditionsId: (termsAndConditionsId != null ? termsAndConditionsId.value : this.termsAndConditionsId),
        termsAndConditionsHtml: (termsAndConditionsHtml != null ? termsAndConditionsHtml.value : this.termsAndConditionsHtml),
        termsAndConditionsNewPage: (termsAndConditionsNewPage != null ? termsAndConditionsNewPage.value : this.termsAndConditionsNewPage),
        personPrintName: (personPrintName != null ? personPrintName.value : this.personPrintName),
        personSignature: (personSignature != null ? personSignature.value : this.personSignature),
        note: (note != null ? note.value : this.note),
        printDate: (printDate != null ? printDate.value : this.printDate),
        printTime: (printTime != null ? printTime.value : this.printTime),
        printDateTime: (printDateTime != null ? printDateTime.value : this.printDateTime),
        dateFields: (dateFields != null ? dateFields.value : this.dateFields),
        custom: (custom != null ? custom.value : this.custom),
        defaultFieldAttributes: (defaultFieldAttributes != null ? defaultFieldAttributes.value : this.defaultFieldAttributes),
        translation: (translation != null ? translation.value : this.translation));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest({
    this.contractId,
    this.quikReceiptId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequestToJson(
          this);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'QuikReceiptId', includeIfNull: false)
  final String? quikReceiptId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.quikReceiptId, quikReceiptId) ||
                const DeepCollectionEquality()
                    .equals(other.quikReceiptId, quikReceiptId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(quikReceiptId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequestExtension
    on WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest
      copyWith(
          {String? contractId,
          String? quikReceiptId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest(
        contractId: contractId ?? this.contractId,
        quikReceiptId: quikReceiptId ?? this.quikReceiptId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest
      copyWithWrapped(
          {Wrapped<String?>? contractId,
          Wrapped<String?>? quikReceiptId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest(
        contractId: (contractId != null ? contractId.value : this.contractId),
        quikReceiptId:
            (quikReceiptId != null ? quikReceiptId.value : this.quikReceiptId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest {
  WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest({
    this.orderId,
    this.printedByUsersId,
    this.storageContainerItemId,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequestToJson(
          this);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'PrintedByUsersId', includeIfNull: false)
  final String? printedByUsersId;
  @JsonKey(name: 'StorageContainerItemId', includeIfNull: false)
  final String? storageContainerItemId;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.printedByUsersId, printedByUsersId) ||
                const DeepCollectionEquality()
                    .equals(other.printedByUsersId, printedByUsersId)) &&
            (identical(other.storageContainerItemId, storageContainerItemId) ||
                const DeepCollectionEquality().equals(
                    other.storageContainerItemId, storageContainerItemId)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(printedByUsersId) ^
      const DeepCollectionEquality().hash(storageContainerItemId) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequestExtension
    on WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest {
  WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest
      copyWith(
          {String? orderId,
          String? printedByUsersId,
          String? storageContainerItemId,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest(
        orderId: orderId ?? this.orderId,
        printedByUsersId: printedByUsersId ?? this.printedByUsersId,
        storageContainerItemId:
            storageContainerItemId ?? this.storageContainerItemId,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest
      copyWithWrapped(
          {Wrapped<String?>? orderId,
          Wrapped<String?>? printedByUsersId,
          Wrapped<String?>? storageContainerItemId,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest(
        orderId: (orderId != null ? orderId.value : this.orderId),
        printedByUsersId: (printedByUsersId != null
            ? printedByUsersId.value
            : this.printedByUsersId),
        storageContainerItemId: (storageContainerItemId != null
            ? storageContainerItemId.value
            : this.storageContainerItemId),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.departmentId,
    this.agentId,
    this.activityTypeId,
    this.sortBy,
    this.orderTypes,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final String? activityTypeId;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(
      name: 'OrderTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.orderTypes, orderTypes) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypes, orderTypes)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(activityTypeId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(orderTypes) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequestExtension
    on WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? departmentId,
          String? agentId,
          String? activityTypeId,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        sortBy: sortBy ?? this.sortBy,
        orderTypes: orderTypes ?? this.orderTypes,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? agentId,
          Wrapped<String?>? activityTypeId,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? orderTypes,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        agentId: (agentId != null ? agentId.value : this.agentId),
        activityTypeId: (activityTypeId != null
            ? activityTypeId.value
            : this.activityTypeId),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        orderTypes: (orderTypes != null ? orderTypes.value : this.orderTypes),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.departmentId,
    this.agentId,
    this.activityTypeId,
    this.sortBy,
    this.orderTypes,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final String? activityTypeId;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(
      name: 'OrderTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.orderTypes, orderTypes) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypes, orderTypes)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(activityTypeId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(orderTypes) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequestExtension
    on WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? departmentId,
          String? agentId,
          String? activityTypeId,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        sortBy: sortBy ?? this.sortBy,
        orderTypes: orderTypes ?? this.orderTypes,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? agentId,
          Wrapped<String?>? activityTypeId,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? orderTypes,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        agentId: (agentId != null ? agentId.value : this.agentId),
        activityTypeId: (activityTypeId != null
            ? activityTypeId.value
            : this.activityTypeId),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        orderTypes: (orderTypes != null ? orderTypes.value : this.orderTypes),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.departmentId,
    this.agentId,
    this.activityTypeId,
    this.sortBy,
    this.orderTypes,
    this.userDepartmentId,
    this.userLocationId,
    this.userWarehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
    this.reportName,
    this.useEmailTemplate,
  });

  factory WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequestFromJson(
          json);

  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequestToJson(
          this);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final String? activityTypeId;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(
      name: 'OrderTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes;
  @JsonKey(name: 'UserDepartmentId', includeIfNull: false)
  final String? userDepartmentId;
  @JsonKey(name: 'UserLocationId', includeIfNull: false)
  final String? userLocationId;
  @JsonKey(name: 'UserWarehouseId', includeIfNull: false)
  final String? userWarehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'UseEmailTemplate', includeIfNull: false)
  final bool? useEmailTemplate;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequestFromJson;

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.orderTypes, orderTypes) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypes, orderTypes)) &&
            (identical(other.userDepartmentId, userDepartmentId) ||
                const DeepCollectionEquality()
                    .equals(other.userDepartmentId, userDepartmentId)) &&
            (identical(other.userLocationId, userLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.userLocationId, userLocationId)) &&
            (identical(other.userWarehouseId, userWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.userWarehouseId, userWarehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)) &&
            (identical(other.reportName, reportName) || const DeepCollectionEquality().equals(other.reportName, reportName)) &&
            (identical(other.useEmailTemplate, useEmailTemplate) || const DeepCollectionEquality().equals(other.useEmailTemplate, useEmailTemplate)));
  }

  @override
  String toString() => jsonEncode(this);

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(activityTypeId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(orderTypes) ^
      const DeepCollectionEquality().hash(userDepartmentId) ^
      const DeepCollectionEquality().hash(userLocationId) ^
      const DeepCollectionEquality().hash(userWarehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(useEmailTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequestExtension
    on WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? departmentId,
          String? agentId,
          String? activityTypeId,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes,
          String? userDepartmentId,
          String? userLocationId,
          String? userWarehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields,
          String? reportName,
          bool? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        sortBy: sortBy ?? this.sortBy,
        orderTypes: orderTypes ?? this.orderTypes,
        userDepartmentId: userDepartmentId ?? this.userDepartmentId,
        userLocationId: userLocationId ?? this.userLocationId,
        userWarehouseId: userWarehouseId ?? this.userWarehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields,
        reportName: reportName ?? this.reportName,
        useEmailTemplate: useEmailTemplate ?? this.useEmailTemplate);
  }

  WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest
      copyWithWrapped(
          {Wrapped<DateTime?>? fromDate,
          Wrapped<DateTime?>? toDate,
          Wrapped<String?>? warehouseId,
          Wrapped<String?>? departmentId,
          Wrapped<String?>? agentId,
          Wrapped<String?>? activityTypeId,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? sortBy,
          Wrapped<List<FwStandardModelsSelectedCheckBoxListItem>?>? orderTypes,
          Wrapped<String?>? userDepartmentId,
          Wrapped<String?>? userLocationId,
          Wrapped<String?>? userWarehouseId,
          Wrapped<String?>? customReportLayoutId,
          Wrapped<bool?>? isSummary,
          Wrapped<bool?>? includeSubHeadingsAndSubTotals,
          Wrapped<bool?>? includeIdColumns,
          Wrapped<String?>? locale,
          Wrapped<List<FwStandardModelsCheckBoxListItem>?>? excelfields,
          Wrapped<String?>? reportName,
          Wrapped<bool?>? useEmailTemplate}) {
    return WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest(
        fromDate: (fromDate != null ? fromDate.value : this.fromDate),
        toDate: (toDate != null ? toDate.value : this.toDate),
        warehouseId:
            (warehouseId != null ? warehouseId.value : this.warehouseId),
        departmentId:
            (departmentId != null ? departmentId.value : this.departmentId),
        agentId: (agentId != null ? agentId.value : this.agentId),
        activityTypeId: (activityTypeId != null
            ? activityTypeId.value
            : this.activityTypeId),
        sortBy: (sortBy != null ? sortBy.value : this.sortBy),
        orderTypes: (orderTypes != null ? orderTypes.value : this.orderTypes),
        userDepartmentId: (userDepartmentId != null
            ? userDepartmentId.value
            : this.userDepartmentId),
        userLocationId: (userLocationId != null
            ? userLocationId.value
            : this.userLocationId),
        userWarehouseId: (userWarehouseId != null
            ? userWarehouseId.value
            : this.userWarehouseId),
        customReportLayoutId: (customReportLayoutId != null
            ? customReportLayoutId.value
            : this.customReportLayoutId),
        isSummary: (isSummary != null ? isSummary.value : this.isSummary),
        includeSubHeadingsAndSubTotals: (includeSubHeadingsAndSubTotals != null
            ? includeSubHeadingsAndSubTotals.value
            : this.includeSubHeadingsAndSubTotals),
        includeIdColumns: (includeIdColumns != null
            ? includeIdColumns.value
            : this.includeIdColumns),
        locale: (locale != null ? locale.value : this.locale),
        excelfields:
            (excelfields != null ? excelfields.value : this.excelfields),
        reportName: (reportName != null ? reportName.value : this.reportName),
        useEmailTemplate: (useEmailTemplate != null
            ? useEmailTemplate.value
            : this.useEmailTemplate));
  }
}

String? fwStandardSqlServerFwDataTypesToJson(
    enums.FwStandardSqlServerFwDataTypes? fwStandardSqlServerFwDataTypes) {
  return fwStandardSqlServerFwDataTypes?.value;
}

enums.FwStandardSqlServerFwDataTypes fwStandardSqlServerFwDataTypesFromJson(
  Object? fwStandardSqlServerFwDataTypes, [
  enums.FwStandardSqlServerFwDataTypes? defaultValue,
]) {
  return enums.FwStandardSqlServerFwDataTypes.values
          .firstWhereOrNull((e) => e.value == fwStandardSqlServerFwDataTypes) ??
      defaultValue ??
      enums.FwStandardSqlServerFwDataTypes.swaggerGeneratedUnknown;
}

List<String> fwStandardSqlServerFwDataTypesListToJson(
    List<enums.FwStandardSqlServerFwDataTypes>?
        fwStandardSqlServerFwDataTypes) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return [];
  }

  return fwStandardSqlServerFwDataTypes.map((e) => e.value!).toList();
}

List<enums.FwStandardSqlServerFwDataTypes>
    fwStandardSqlServerFwDataTypesListFromJson(
  List? fwStandardSqlServerFwDataTypes, [
  List<enums.FwStandardSqlServerFwDataTypes>? defaultValue,
]) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return defaultValue ?? [];
  }

  return fwStandardSqlServerFwDataTypes
      .map((e) => fwStandardSqlServerFwDataTypesFromJson(e.toString()))
      .toList();
}

List<enums.FwStandardSqlServerFwDataTypes>?
    fwStandardSqlServerFwDataTypesNullableListFromJson(
  List? fwStandardSqlServerFwDataTypes, [
  List<enums.FwStandardSqlServerFwDataTypes>? defaultValue,
]) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return defaultValue;
  }

  return fwStandardSqlServerFwDataTypes
      .map((e) => fwStandardSqlServerFwDataTypesFromJson(e.toString()))
      .toList();
}

String? webApiIncludeExcludeAllToJson(
    enums.WebApiIncludeExcludeAll? webApiIncludeExcludeAll) {
  return webApiIncludeExcludeAll?.value;
}

enums.WebApiIncludeExcludeAll webApiIncludeExcludeAllFromJson(
  Object? webApiIncludeExcludeAll, [
  enums.WebApiIncludeExcludeAll? defaultValue,
]) {
  return enums.WebApiIncludeExcludeAll.values
          .firstWhereOrNull((e) => e.value == webApiIncludeExcludeAll) ??
      defaultValue ??
      enums.WebApiIncludeExcludeAll.swaggerGeneratedUnknown;
}

List<String> webApiIncludeExcludeAllListToJson(
    List<enums.WebApiIncludeExcludeAll>? webApiIncludeExcludeAll) {
  if (webApiIncludeExcludeAll == null) {
    return [];
  }

  return webApiIncludeExcludeAll.map((e) => e.value!).toList();
}

List<enums.WebApiIncludeExcludeAll> webApiIncludeExcludeAllListFromJson(
  List? webApiIncludeExcludeAll, [
  List<enums.WebApiIncludeExcludeAll>? defaultValue,
]) {
  if (webApiIncludeExcludeAll == null) {
    return defaultValue ?? [];
  }

  return webApiIncludeExcludeAll
      .map((e) => webApiIncludeExcludeAllFromJson(e.toString()))
      .toList();
}

List<enums.WebApiIncludeExcludeAll>?
    webApiIncludeExcludeAllNullableListFromJson(
  List? webApiIncludeExcludeAll, [
  List<enums.WebApiIncludeExcludeAll>? defaultValue,
]) {
  if (webApiIncludeExcludeAll == null) {
    return defaultValue;
  }

  return webApiIncludeExcludeAll
      .map((e) => webApiIncludeExcludeAllFromJson(e.toString()))
      .toList();
}

String? webApiModulesReportsOrderReportsOrderReportReportViewTypeToJson(
    enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
        webApiModulesReportsOrderReportsOrderReportReportViewType) {
  return webApiModulesReportsOrderReportsOrderReportReportViewType?.value;
}

enums.WebApiModulesReportsOrderReportsOrderReportReportViewType
    webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson(
  Object? webApiModulesReportsOrderReportsOrderReportReportViewType, [
  enums.WebApiModulesReportsOrderReportsOrderReportReportViewType? defaultValue,
]) {
  return enums.WebApiModulesReportsOrderReportsOrderReportReportViewType.values
          .firstWhereOrNull((e) =>
              e.value ==
              webApiModulesReportsOrderReportsOrderReportReportViewType) ??
      defaultValue ??
      enums.WebApiModulesReportsOrderReportsOrderReportReportViewType
          .swaggerGeneratedUnknown;
}

List<String>
    webApiModulesReportsOrderReportsOrderReportReportViewTypeListToJson(
        List<enums.WebApiModulesReportsOrderReportsOrderReportReportViewType>?
            webApiModulesReportsOrderReportsOrderReportReportViewType) {
  if (webApiModulesReportsOrderReportsOrderReportReportViewType == null) {
    return [];
  }

  return webApiModulesReportsOrderReportsOrderReportReportViewType
      .map((e) => e.value!)
      .toList();
}

List<enums.WebApiModulesReportsOrderReportsOrderReportReportViewType>
    webApiModulesReportsOrderReportsOrderReportReportViewTypeListFromJson(
  List? webApiModulesReportsOrderReportsOrderReportReportViewType, [
  List<enums.WebApiModulesReportsOrderReportsOrderReportReportViewType>?
      defaultValue,
]) {
  if (webApiModulesReportsOrderReportsOrderReportReportViewType == null) {
    return defaultValue ?? [];
  }

  return webApiModulesReportsOrderReportsOrderReportReportViewType
      .map((e) =>
          webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson(
              e.toString()))
      .toList();
}

List<enums.WebApiModulesReportsOrderReportsOrderReportReportViewType>?
    webApiModulesReportsOrderReportsOrderReportReportViewTypeNullableListFromJson(
  List? webApiModulesReportsOrderReportsOrderReportReportViewType, [
  List<enums.WebApiModulesReportsOrderReportsOrderReportReportViewType>?
      defaultValue,
]) {
  if (webApiModulesReportsOrderReportsOrderReportReportViewType == null) {
    return defaultValue;
  }

  return webApiModulesReportsOrderReportsOrderReportReportViewType
      .map((e) =>
          webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson(
              e.toString()))
      .toList();
}

typedef $JsonFactory<T> = T Function(Map<String, dynamic> json);

class $CustomJsonDecoder {
  $CustomJsonDecoder(this.factories);

  final Map<Type, $JsonFactory> factories;

  dynamic decode<T>(dynamic entity) {
    if (entity is Iterable) {
      return _decodeList<T>(entity);
    }

    if (entity is T) {
      return entity;
    }

    if (isTypeOf<T, Map>()) {
      return entity;
    }

    if (isTypeOf<T, Iterable>()) {
      return entity;
    }

    if (entity is Map<String, dynamic>) {
      return _decodeMap<T>(entity);
    }

    return entity;
  }

  T _decodeMap<T>(Map<String, dynamic> values) {
    final jsonFactory = factories[T];
    if (jsonFactory == null || jsonFactory is! $JsonFactory<T>) {
      return throw "Could not find factory for type $T. Is '$T: $T.fromJsonFactory' included in the CustomJsonDecoder instance creation in bootstrapper.dart?";
    }

    return jsonFactory(values);
  }

  List<T> _decodeList<T>(Iterable values) =>
      values.where((v) => v != null).map<T>((v) => decode<T>(v) as T).toList();
}

class $JsonSerializableConverter extends chopper.JsonConverter {
  @override
  FutureOr<chopper.Response<ResultType>> convertResponse<ResultType, Item>(
      chopper.Response response) async {
    if (response.bodyString.isEmpty) {
      // In rare cases, when let's say 204 (no content) is returned -
      // we cannot decode the missing json with the result type specified
      return chopper.Response(response.base, null, error: response.error);
    }

    final jsonRes = await super.convertResponse(response);
    return jsonRes.copyWith<ResultType>(
        body: $jsonDecoder.decode<Item>(jsonRes.body) as ResultType);
  }
}

final $jsonDecoder = $CustomJsonDecoder(generatedMapping);

// ignore: unused_element
String? _dateToJson(DateTime? date) {
  if (date == null) {
    return null;
  }

  final year = date.year.toString();
  final month = date.month < 10 ? '0${date.month}' : date.month.toString();
  final day = date.day < 10 ? '0${date.day}' : date.day.toString();

  return '$year-$month-$day';
}

class Wrapped<T> {
  final T value;
  const Wrapped.value(this.value);
}
