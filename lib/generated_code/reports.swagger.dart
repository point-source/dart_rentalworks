import 'package:json_annotation/json_annotation.dart';
import 'package:collection/collection.dart';

import 'package:chopper/chopper.dart';
import 'package:chopper/chopper.dart' as chopper;
import 'reports.enums.swagger.dart' as enums;
export 'reports.enums.swagger.dart';

part 'reports.swagger.chopper.dart';
part 'reports.swagger.g.dart';

// **************************************************************************
// SwaggerChopperGenerator
// **************************************************************************

@ChopperApi()
abstract class Reports extends ChopperService {
  static Reports create([ChopperClient? client]) {
    if (client != null) {
      return _$Reports(client);
    }

    final newClient = ChopperClient(
      services: [_$Reports()],
      converter: $JsonSerializableConverter(), /*baseUrl: YOUR_BASE_URL*/
    );
    return _$Reports(newClient);
  }

  ///
  @Post(path: '/agentbillingreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      agentbillingreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/agentbillingreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      agentbillingreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest?
                  body});

  ///
  @Post(path: '/agentbillingreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> agentbillingreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest?
              body});

  ///
  @Post(path: '/agentbillingreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/agentbillingreport/validateagent/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/agentbillingreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/agentbillingreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/agentbillingreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/agentbillingreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportEmptyobjectGet();

  ///
  @Get(path: '/agentbillingreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      agentbillingreportPreviewGet();

  ///
  @Post(path: '/aragingreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      aragingreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/aragingreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      aragingreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest?
                  body});

  ///
  @Post(path: '/aragingreport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> aragingreportRunreportPost(
      {@Body()
          required WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest?
              body});

  ///
  @Post(path: '/aragingreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/aragingreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/aragingreport/validatedealtype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/aragingreport/validatedealcsr/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportValidatedealcsrBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/aragingreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/aragingreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportEmptyobjectGet();

  ///
  @Get(path: '/aragingreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      aragingreportPreviewGet();

  ///
  @Post(path: '/billinganalysisreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      billinganalysisreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/billinganalysisreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      billinganalysisreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest?
                  body});

  ///
  @Post(path: '/billinganalysisreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> billinganalysisreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest?
              body});

  ///
  @Post(path: '/billinganalysisreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billinganalysisreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billinganalysisreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billinganalysisreport/validateproject/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportValidateprojectBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billinganalysisreport/validateagent/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/billinganalysisreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportEmptyobjectGet();

  ///
  @Get(path: '/billinganalysisreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billinganalysisreportPreviewGet();

  ///
  @Post(path: '/billingprogressreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      billingprogressreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/billingprogressreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      billingprogressreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest?
                  body});

  ///
  @Post(path: '/billingprogressreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> billingprogressreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest?
              body});

  ///
  @Post(path: '/billingprogressreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingprogressreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingprogressreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingprogressreport/validatedealcsr/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidatedealcsrBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingprogressreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingprogressreport/validatedealtype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingprogressreport/validateagent/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/billingprogressreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportEmptyobjectGet();

  ///
  @Get(path: '/billingprogressreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingprogressreportPreviewGet();

  ///
  @Post(path: '/billingstatementreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      billingstatementreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/billingstatementreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      billingstatementreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest?
                  body});

  ///
  @Post(path: '/billingstatementreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> billingstatementreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest?
              body});

  ///
  @Post(path: '/billingstatementreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingstatementreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingstatementreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingstatementreport/validatedealstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportValidatedealstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/billingstatementreport/validatedealtype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/billingstatementreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportEmptyobjectGet();

  ///
  @Get(path: '/billingstatementreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      billingstatementreportPreviewGet();

  ///
  @Post(path: '/changeauditreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      changeauditreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/changeauditreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      changeauditreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest?
                  body});

  ///
  @Post(path: '/changeauditreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> changeauditreportRunreportPost(
      {@Body()
          required WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest?
              body});

  ///
  @Post(path: '/changeauditreport/validatewebusers/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeauditreportValidatewebusersBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/changeauditreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeauditreportEmptyobjectGet();

  ///
  @Get(path: '/changeauditreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      changeauditreportPreviewGet();

  ///
  @Post(path: '/containerpackinglist/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      containerpackinglistRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/containerpackinglist/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      containerpackinglistExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest?
                  body});

  ///
  @Post(path: '/containerpackinglist/runreport')
  Future<
      chopper.Response<
          FwStandardSqlServerFwJsonDataTable>> containerpackinglistRunreportPost(
      {@Body()
          required WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest?
              body});

  ///
  @Get(path: '/containerpackinglist/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      containerpackinglistEmptyobjectGet();

  ///
  @Get(path: '/containerpackinglist/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      containerpackinglistPreviewGet();

  ///
  @Post(path: '/contractrevisionreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      contractrevisionreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/contractrevisionreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      contractrevisionreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest?
                  body});

  ///
  @Post(path: '/contractrevisionreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> contractrevisionreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest?
              body});

  ///
  @Post(path: '/contractrevisionreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contractrevisionreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/contractrevisionreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contractrevisionreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/contractrevisionreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contractrevisionreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/contractrevisionreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contractrevisionreportEmptyobjectGet();

  ///
  @Get(path: '/contractrevisionreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      contractrevisionreportPreviewGet();

  ///
  @Post(path: '/createinvoiceprocessreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      createinvoiceprocessreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/createinvoiceprocessreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      createinvoiceprocessreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest?
                  body});

  ///
  @Post(path: '/createinvoiceprocessreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> createinvoiceprocessreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest?
              body});

  ///
  @Post(path: '/createinvoiceprocessreport/validateinvoicecreationbatch/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      createinvoiceprocessreportValidateinvoicecreationbatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/createinvoiceprocessreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      createinvoiceprocessreportEmptyobjectGet();

  ///
  @Get(path: '/createinvoiceprocessreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      createinvoiceprocessreportPreviewGet();

  ///
  @Post(path: '/creditsonaccountreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      creditsonaccountreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/creditsonaccountreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      creditsonaccountreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest?
                  body});

  ///
  @Post(path: '/creditsonaccountreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> creditsonaccountreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest?
              body});

  ///
  @Post(path: '/creditsonaccountreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditsonaccountreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/creditsonaccountreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditsonaccountreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/creditsonaccountreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditsonaccountreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/creditsonaccountreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditsonaccountreportEmptyobjectGet();

  ///
  @Get(path: '/creditsonaccountreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      creditsonaccountreportPreviewGet();

  ///
  @Post(path: '/crewsigninreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      crewsigninreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/crewsigninreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      crewsigninreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest?
                  body});

  ///
  @Post(path: '/crewsigninreport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> crewsigninreportRunreportPost(
      {@Body()
          required WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest?
              body});

  ///
  @Post(path: '/crewsigninreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/crewsigninreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/crewsigninreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/crewsigninreport/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/crewsigninreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/crewsigninreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportEmptyobjectGet();

  ///
  @Get(path: '/crewsigninreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      crewsigninreportPreviewGet();

  ///
  @Post(path: '/customerrevenuebymonthreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      customerrevenuebymonthreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/customerrevenuebymonthreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      customerrevenuebymonthreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest?
                  body});

  ///
  @Post(path: '/customerrevenuebymonthreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> customerrevenuebymonthreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest?
              body});

  ///
  @Post(path: '/customerrevenuebymonthreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerrevenuebymonthreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerrevenuebymonthreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerrevenuebymonthreport/validatecustomertype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidatecustomertypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerrevenuebymonthreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerrevenuebymonthreport/validatedealtype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerrevenuebymonthreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/customerrevenuebymonthreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportEmptyobjectGet();

  ///
  @Get(path: '/customerrevenuebymonthreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebymonthreportPreviewGet();

  ///
  @Post(path: '/customerrevenuebytypereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      customerrevenuebytypereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/customerrevenuebytypereport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      customerrevenuebytypereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest?
                  body});

  ///
  @Post(path: '/customerrevenuebytypereport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> customerrevenuebytypereportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest?
              body});

  ///
  @Post(path: '/customerrevenuebytypereport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerrevenuebytypereport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerrevenuebytypereport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerrevenuebytypereport/validatedealtype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerrevenuebytypereport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/customerrevenuebytypereport/validateordertype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportValidateordertypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/customerrevenuebytypereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportEmptyobjectGet();

  ///
  @Get(path: '/customerrevenuebytypereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      customerrevenuebytypereportPreviewGet();

  ///
  @Post(path: '/dailyreceiptsreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      dailyreceiptsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/dailyreceiptsreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dailyreceiptsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest?
                  body});

  ///
  @Post(path: '/dailyreceiptsreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> dailyreceiptsreportRunreportPost(
      {@Body()
          required WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest?
              body});

  ///
  @Post(path: '/dailyreceiptsreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dailyreceiptsreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dailyreceiptsreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dailyreceiptsreport/validatepaymenttype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportValidatepaymenttypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/dailyreceiptsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportEmptyobjectGet();

  ///
  @Get(path: '/dailyreceiptsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dailyreceiptsreportPreviewGet();

  ///
  @Post(path: '/dealinvoicebatchreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      dealinvoicebatchreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/dealinvoicebatchreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dealinvoicebatchreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest?
                  body});

  ///
  @Post(path: '/dealinvoicebatchreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> dealinvoicebatchreportRunreportPost(
      {@Body()
          required WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest?
              body});

  ///
  @Post(path: '/dealinvoicebatchreport/validatebatch/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicebatchreportValidatebatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/dealinvoicebatchreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicebatchreportEmptyobjectGet();

  ///
  @Get(path: '/dealinvoicebatchreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicebatchreportPreviewGet();

  ///
  @Post(path: '/dealinvoicedetailreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      dealinvoicedetailreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/dealinvoicedetailreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dealinvoicedetailreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest?
                  body});

  ///
  @Post(path: '/dealinvoicedetailreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> dealinvoicedetailreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest?
              body});

  ///
  @Post(path: '/dealinvoicedetailreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealinvoicedetailreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealinvoicedetailreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealinvoicedetailreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/dealinvoicedetailreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportEmptyobjectGet();

  ///
  @Get(path: '/dealinvoicedetailreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealinvoicedetailreportPreviewGet();

  ///
  @Post(path: '/dealoutstandingitemsreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      dealoutstandingitemsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/dealoutstandingitemsreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      dealoutstandingitemsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest?
                  body});

  ///
  @Post(path: '/dealoutstandingitemsreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> dealoutstandingitemsreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest?
              body});

  ///
  @Post(path: '/dealoutstandingitemsreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealoutstandingitemsreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealoutstandingitemsreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealoutstandingitemsreport/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealoutstandingitemsreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealoutstandingitemsreport/validateordertype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidateordertypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealoutstandingitemsreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealoutstandingitemsreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealoutstandingitemsreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/dealoutstandingitemsreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/dealoutstandingitemsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportEmptyobjectGet();

  ///
  @Get(path: '/dealoutstandingitemsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      dealoutstandingitemsreportPreviewGet();

  ///
  @Post(path: '/exchangecontractreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      exchangecontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/exchangecontractreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> exchangecontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest?
              body});

  ///
  @Post(path: '/exchangecontractreport/validatecontract/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      exchangecontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/exchangecontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      exchangecontractreportEmptyobjectGet();

  ///
  @Get(path: '/exchangecontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      exchangecontractreportPreviewGet();

  ///
  @Post(path: '/fixedassetbookvaluereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      fixedassetbookvaluereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/fixedassetbookvaluereport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      fixedassetbookvaluereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest?
                  body});

  ///
  @Post(path: '/fixedassetbookvaluereport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> fixedassetbookvaluereportRunreportPost(
      {@Body()
          required WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest?
              body});

  ///
  @Post(path: '/fixedassetbookvaluereport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/fixedassetbookvaluereport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/fixedassetbookvaluereport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/fixedassetbookvaluereport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/fixedassetbookvaluereport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/fixedassetbookvaluereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportEmptyobjectGet();

  ///
  @Get(path: '/fixedassetbookvaluereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetbookvaluereportPreviewGet();

  ///
  @Post(path: '/fixedassetdepreciationreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      fixedassetdepreciationreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/fixedassetdepreciationreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      fixedassetdepreciationreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest?
                  body});

  ///
  @Post(path: '/fixedassetdepreciationreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> fixedassetdepreciationreportRunreportPost(
      {@Body()
          required WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest?
              body});

  ///
  @Post(path: '/fixedassetdepreciationreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/fixedassetdepreciationreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/fixedassetdepreciationreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/fixedassetdepreciationreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/fixedassetdepreciationreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/fixedassetdepreciationreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportEmptyobjectGet();

  ///
  @Get(path: '/fixedassetdepreciationreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      fixedassetdepreciationreportPreviewGet();

  ///
  @Post(path: '/gldistributionreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      gldistributionreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/gldistributionreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      gldistributionreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest?
                  body});

  ///
  @Post(path: '/gldistributionreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> gldistributionreportRunreportPost(
      {@Body()
          required WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest?
              body});

  ///
  @Post(path: '/gldistributionreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/gldistributionreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/gldistributionreport/validateglaccount/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionreportValidateglaccountBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/gldistributionreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionreportEmptyobjectGet();

  ///
  @Get(path: '/gldistributionreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      gldistributionreportPreviewGet();

  ///
  @Post(path: '/incomingdeliveryinstructions/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      incomingdeliveryinstructionsRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/incomingdeliveryinstructions/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> incomingdeliveryinstructionsRunreportPost(
      {@Body()
          required WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest?
              body});

  ///
  @Get(path: '/incomingdeliveryinstructions/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomingdeliveryinstructionsEmptyobjectGet();

  ///
  @Get(path: '/incomingdeliveryinstructions/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomingdeliveryinstructionsPreviewGet();

  ///
  @Post(path: '/incomingshippinglabel/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      incomingshippinglabelRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/incomingshippinglabel/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> incomingshippinglabelRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest?
              body});

  ///
  @Post(path: '/incomingshippinglabel/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomingshippinglabelValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/incomingshippinglabel/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomingshippinglabelEmptyobjectGet();

  ///
  @Get(path: '/incomingshippinglabel/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incomingshippinglabelPreviewGet();

  ///
  @Post(path: '/incontractreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      incontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/incontractreport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> incontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsInContractReportInContractReportRequest?
              body});

  ///
  @Post(path: '/incontractreport/validatecontract/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/incontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incontractreportEmptyobjectGet();

  ///
  @Get(path: '/incontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      incontractreportPreviewGet();

  ///
  @Post(path: '/inventorychangetransactiontype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      inventorychangetransactiontypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/inventorychangetransactiontype/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      inventorychangetransactiontypeExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/inventorychangetransactiontype/emptyobject')
  Future<chopper.Response> inventorychangetransactiontypeEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/inventorychangetransactiontype/emptybrowseobject')
  Future<chopper.Response> inventorychangetransactiontypeEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/inventorychangetransactiontype/keyfieldnames')
  Future<chopper.Response> inventorychangetransactiontypeKeyfieldnamesGet();

  ///
  @Post(path: '/invoicediscountreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      invoicediscountreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/invoicediscountreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      invoicediscountreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest?
                  body});

  ///
  @Post(path: '/invoicediscountreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> invoicediscountreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest?
              body});

  ///
  @Post(path: '/invoicediscountreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/invoicediscountreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/invoicediscountreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/invoicediscountreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/invoicediscountreport/validatediscountreason/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportValidatediscountreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/invoicediscountreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportEmptyobjectGet();

  ///
  @Get(path: '/invoicediscountreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicediscountreportPreviewGet();

  ///
  @Post(path: '/invoicereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      invoicereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/invoicereport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> invoicereportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest?
              body});

  ///
  @Post(path: '/invoicereport/validateinvoice/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicereportValidateinvoiceBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/invoicereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicereportEmptyobjectGet();

  ///
  @Get(path: '/invoicereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicereportPreviewGet();

  ///
  @Post(path: '/invoicesummaryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      invoicesummaryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/invoicesummaryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      invoicesummaryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest?
                  body});

  ///
  @Post(path: '/invoicesummaryreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> invoicesummaryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest?
              body});

  ///
  @Post(path: '/invoicesummaryreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/invoicesummaryreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/invoicesummaryreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/invoicesummaryreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/invoicesummaryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportEmptyobjectGet();

  ///
  @Get(path: '/invoicesummaryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      invoicesummaryreportPreviewGet();

  ///
  @Post(path: '/latereturnsreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      latereturnsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/latereturnsreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      latereturnsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest?
                  body});

  ///
  @Post(path: '/latereturnsreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> latereturnsreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest?
              body});

  ///
  @Post(path: '/latereturnsreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/latereturnsreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/latereturnsreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/latereturnsreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/latereturnsreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/latereturnsreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/latereturnsreport/validatecontact/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/latereturnsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportEmptyobjectGet();

  ///
  @Get(path: '/latereturnsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      latereturnsreportPreviewGet();

  ///
  @Post(path: '/lostcontractreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      lostcontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/lostcontractreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> lostcontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest?
              body});

  ///
  @Post(path: '/lostcontractreport/validatecontract/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      lostcontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/lostcontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      lostcontractreportEmptyobjectGet();

  ///
  @Get(path: '/lostcontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      lostcontractreportPreviewGet();

  ///
  @Post(path: '/orderconflictreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      orderconflictreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/orderconflictreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      orderconflictreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest?
                  body});

  ///
  @Post(path: '/orderconflictreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> orderconflictreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest?
              body});

  ///
  @Post(path: '/orderconflictreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/orderconflictreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/orderconflictreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/orderconflictreport/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/orderconflictreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/orderconflictreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/orderconflictreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/orderconflictreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/orderconflictreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportEmptyobjectGet();

  ///
  @Get(path: '/orderconflictreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderconflictreportPreviewGet();

  ///
  @Post(path: '/orderreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      orderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/orderreport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> orderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOrderReportOrderReportRequest?
              body});

  ///
  @Post(path: '/orderreport/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/orderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderreportEmptyobjectGet();

  ///
  @Get(path: '/orderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderreportPreviewGet();

  ///
  @Post(path: '/ordersbydealreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      ordersbydealreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/ordersbydealreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      ordersbydealreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest?
                  body});

  ///
  @Post(path: '/ordersbydealreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> ordersbydealreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest?
              body});

  ///
  @Post(path: '/ordersbydealreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordersbydealreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordersbydealreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordersbydealreport/validatedealtype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordersbydealreport/validatedealstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidatedealstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/ordersbydealreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/ordersbydealreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportEmptyobjectGet();

  ///
  @Get(path: '/ordersbydealreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordersbydealreportPreviewGet();

  ///
  @Post(path: '/orderstatusdetailreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      orderstatusdetailreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/orderstatusdetailreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> orderstatusdetailreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest?
              body});

  ///
  @Post(path: '/orderstatusdetailreport/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatusdetailreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/orderstatusdetailreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatusdetailreportEmptyobjectGet();

  ///
  @Get(path: '/orderstatusdetailreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatusdetailreportPreviewGet();

  ///
  @Post(path: '/orderstatussummaryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      orderstatussummaryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/orderstatussummaryreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> orderstatussummaryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest?
              body});

  ///
  @Post(path: '/orderstatussummaryreport/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatussummaryreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/orderstatussummaryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatussummaryreportEmptyobjectGet();

  ///
  @Get(path: '/orderstatussummaryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      orderstatussummaryreportPreviewGet();

  ///
  @Post(path: '/ordervaluesheetreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      ordervaluesheetreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/ordervaluesheetreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> ordervaluesheetreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest?
              body});

  ///
  @Post(path: '/ordervaluesheetreport/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordervaluesheetreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/ordervaluesheetreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordervaluesheetreportEmptyobjectGet();

  ///
  @Get(path: '/ordervaluesheetreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      ordervaluesheetreportPreviewGet();

  ///
  @Post(path: '/outcontractreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      outcontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/outcontractreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> outcontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest?
              body});

  ///
  @Post(path: '/outcontractreport/validatecontract/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outcontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/outcontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outcontractreportEmptyobjectGet();

  ///
  @Get(path: '/outcontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outcontractreportPreviewGet();

  ///
  @Post(path: '/outgoingdeliveryinstructions/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      outgoingdeliveryinstructionsRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/outgoingdeliveryinstructions/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> outgoingdeliveryinstructionsRunreportPost(
      {@Body()
          required WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest?
              body});

  ///
  @Get(path: '/outgoingdeliveryinstructions/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outgoingdeliveryinstructionsEmptyobjectGet();

  ///
  @Get(path: '/outgoingdeliveryinstructions/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outgoingdeliveryinstructionsPreviewGet();

  ///
  @Post(path: '/outgoingshippinglabel/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      outgoingshippinglabelRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/outgoingshippinglabel/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> outgoingshippinglabelRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest?
              body});

  ///
  @Post(path: '/outgoingshippinglabel/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outgoingshippinglabelValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/outgoingshippinglabel/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outgoingshippinglabelEmptyobjectGet();

  ///
  @Get(path: '/outgoingshippinglabel/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outgoingshippinglabelPreviewGet();

  ///
  @Post(path: '/outstandingsubrentalreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      outstandingsubrentalreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/outstandingsubrentalreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      outstandingsubrentalreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest?
                  body});

  ///
  @Post(path: '/outstandingsubrentalreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> outstandingsubrentalreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest?
              body});

  ///
  @Post(path: '/outstandingsubrentalreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/outstandingsubrentalreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/outstandingsubrentalreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/outstandingsubrentalreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/outstandingsubrentalreport/validatedealtype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/outstandingsubrentalreport/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/outstandingsubrentalreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/outstandingsubrentalreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/outstandingsubrentalreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportEmptyobjectGet();

  ///
  @Get(path: '/outstandingsubrentalreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      outstandingsubrentalreportPreviewGet();

  ///
  @Post(path: '/partsinventoryattributesreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventoryattributesreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/partsinventoryattributesreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventoryattributesreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  @Post(path: '/partsinventoryattributesreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      partsinventoryattributesreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  @Post(path: '/partsinventoryattributesreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventoryattributesreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventoryattributesreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventoryattributesreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventoryattributesreport/validateattribute/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportValidateattributeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/partsinventoryattributesreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportEmptyobjectGet();

  ///
  @Get(path: '/partsinventoryattributesreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryattributesreportPreviewGet();

  ///
  @Post(path: '/partsinventorycatalogreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventorycatalogreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/partsinventorycatalogreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventorycatalogreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
                  body});

  ///
  @Post(path: '/partsinventorycatalogreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> partsinventorycatalogreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
              body});

  ///
  @Post(path: '/partsinventorycatalogreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorycatalogreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorycatalogreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorycatalogreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorycatalogreport/validatewarehousecatalog/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidatewarehousecatalogBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorycatalogreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/partsinventorycatalogreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportEmptyobjectGet();

  ///
  @Get(path: '/partsinventorycatalogreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorycatalogreportPreviewGet();

  ///
  @Post(path: '/partsinventorychangereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventorychangereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/partsinventorychangereport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventorychangereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
                  body});

  ///
  @Post(path: '/partsinventorychangereport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> partsinventorychangereportRunreportPost(
      {@Body()
          required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
              body});

  ///
  @Post(path: '/partsinventorychangereport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorychangereport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorychangereport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorychangereport/validatetransactiontype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidatetransactiontypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorychangereport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorychangereport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/partsinventorychangereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportEmptyobjectGet();

  ///
  @Get(path: '/partsinventorychangereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorychangereportPreviewGet();

  ///
  @Post(path: '/partsinventorypurchasehistoryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventorypurchasehistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/partsinventorypurchasehistoryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventorypurchasehistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  @Post(path: '/partsinventorypurchasehistoryreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      partsinventorypurchasehistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  @Post(
      path: '/partsinventorypurchasehistoryreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorypurchasehistoryreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorypurchasehistoryreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorypurchasehistoryreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorypurchasehistoryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/partsinventorypurchasehistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportEmptyobjectGet();

  ///
  @Get(path: '/partsinventorypurchasehistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorypurchasehistoryreportPreviewGet();

  ///
  @Post(path: '/partsinventoryreorderreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventoryreorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/partsinventoryreorderreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventoryreorderreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest?
                  body});

  ///
  @Post(path: '/partsinventoryreorderreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> partsinventoryreorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest?
              body});

  ///
  @Post(path: '/partsinventoryreorderreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventoryreorderreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventoryreorderreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventoryreorderreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventoryreorderreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/partsinventoryreorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportEmptyobjectGet();

  ///
  @Get(path: '/partsinventoryreorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventoryreorderreportPreviewGet();

  ///
  @Post(path: '/partsinventorytransactionreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      partsinventorytransactionreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/partsinventorytransactionreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      partsinventorytransactionreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
                  body});

  ///
  @Post(path: '/partsinventorytransactionreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      partsinventorytransactionreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
                  body});

  ///
  @Post(path: '/partsinventorytransactionreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorytransactionreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorytransactionreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorytransactionreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/partsinventorytransactionreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/partsinventorytransactionreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportEmptyobjectGet();

  ///
  @Get(path: '/partsinventorytransactionreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      partsinventorytransactionreportPreviewGet();

  ///
  @Post(path: '/physicalinventorycountsheetreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventorycountsheetreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/physicalinventorycountsheetreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventorycountsheetreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest?
                  body});

  ///
  @Post(path: '/physicalinventorycountsheetreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventorycountsheetreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest?
                  body});

  ///
  @Post(
      path: '/physicalinventorycountsheetreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorycountsheetreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorycountsheetreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorycountsheetreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorycountsheetreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorycountsheetreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorycountsheetreport/validatecontact/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorycountsheetreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/physicalinventorycountsheetreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportEmptyobjectGet();

  ///
  @Get(path: '/physicalinventorycountsheetreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorycountsheetreportPreviewGet();

  ///
  @Post(path: '/physicalinventorydiscrepancyreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventorydiscrepancyreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/physicalinventorydiscrepancyreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventorydiscrepancyreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest?
                  body});

  ///
  @Post(path: '/physicalinventorydiscrepancyreport/runreport')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest?
                  body});

  ///
  @Post(
      path: '/physicalinventorydiscrepancyreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorydiscrepancyreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorydiscrepancyreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorydiscrepancyreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorydiscrepancyreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path: '/physicalinventorydiscrepancyreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventorydiscrepancyreport/validatecontact/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/physicalinventorydiscrepancyreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportEmptyobjectGet();

  ///
  @Get(path: '/physicalinventorydiscrepancyreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventorydiscrepancyreportPreviewGet();

  ///
  @Post(path: '/physicalinventoryexceptionreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventoryexceptionreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/physicalinventoryexceptionreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventoryexceptionreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest?
                  body});

  ///
  @Post(path: '/physicalinventoryexceptionreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventoryexceptionreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest?
                  body});

  ///
  @Post(path: '/physicalinventoryexceptionreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryexceptionreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryexceptionreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryexceptionreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryexceptionreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryexceptionreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryexceptionreport/validatecontact/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/physicalinventoryexceptionreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportEmptyobjectGet();

  ///
  @Get(path: '/physicalinventoryexceptionreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryexceptionreportPreviewGet();

  ///
  @Post(path: '/physicalinventoryprescanprogressreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventoryprescanprogressreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/physicalinventoryprescanprogressreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventoryprescanprogressreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest?
                  body});

  ///
  @Post(path: '/physicalinventoryprescanprogressreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventoryprescanprogressreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest?
                  body});

  ///
  @Post(
      path:
          '/physicalinventoryprescanprogressreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path: '/physicalinventoryprescanprogressreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path: '/physicalinventoryprescanprogressreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryprescanprogressreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryprescanprogressreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path:
          '/physicalinventoryprescanprogressreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryprescanprogressreport/validatecontact/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryprescanprogressreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/physicalinventoryprescanprogressreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportEmptyobjectGet();

  ///
  @Get(path: '/physicalinventoryprescanprogressreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryprescanprogressreportPreviewGet();

  ///
  @Post(path: '/physicalinventoryreconciliationreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventoryreconciliationreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/physicalinventoryreconciliationreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventoryreconciliationreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest?
                  body});

  ///
  @Post(path: '/physicalinventoryreconciliationreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventoryreconciliationreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest?
                  body});

  ///
  @Post(
      path:
          '/physicalinventoryreconciliationreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryreconciliationreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryreconciliationreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryreconciliationreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryreconciliationreport/validatecontact/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryreconciliationreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/physicalinventoryreconciliationreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryreconciliationreportEmptyobjectGet();

  ///
  @Get(path: '/physicalinventoryreconciliationreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryreconciliationreportPreviewGet();

  ///
  @Post(path: '/physicalinventoryrecountanalysisreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventoryrecountanalysisreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/physicalinventoryrecountanalysisreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventoryrecountanalysisreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest?
                  body});

  ///
  @Post(path: '/physicalinventoryrecountanalysisreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventoryrecountanalysisreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest?
                  body});

  ///
  @Post(
      path:
          '/physicalinventoryrecountanalysisreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path: '/physicalinventoryrecountanalysisreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path: '/physicalinventoryrecountanalysisreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryrecountanalysisreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryrecountanalysisreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path:
          '/physicalinventoryrecountanalysisreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryrecountanalysisreport/validatecontact/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportValidatecontactBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/physicalinventoryrecountanalysisreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportEmptyobjectGet();

  ///
  @Get(path: '/physicalinventoryrecountanalysisreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryrecountanalysisreportPreviewGet();

  ///
  @Post(path: '/physicalinventoryresultsreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      physicalinventoryresultsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/physicalinventoryresultsreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      physicalinventoryresultsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest?
                  body});

  ///
  @Post(path: '/physicalinventoryresultsreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      physicalinventoryresultsreportRunreportPost(
          {@Body()
              required WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest?
                  body});

  ///
  @Post(path: '/physicalinventoryresultsreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryresultsreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/physicalinventoryresultsreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryresultsreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/physicalinventoryresultsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryresultsreportEmptyobjectGet();

  ///
  @Get(path: '/physicalinventoryresultsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      physicalinventoryresultsreportPreviewGet();

  ///
  @Post(path: '/picklistreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      picklistreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/picklistreport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> picklistreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsPickListReportPickListReportRequest?
              body});

  ///
  @Post(path: '/picklistreport/validatepicklist/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      picklistreportValidatepicklistBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/picklistreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      picklistreportEmptyobjectGet();

  ///
  @Get(path: '/picklistreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      picklistreportPreviewGet();

  ///
  @Post(path: '/profitlossreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      profitlossreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/profitlossreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      profitlossreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest?
                  body});

  ///
  @Post(path: '/profitlossreport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> profitlossreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest?
              body});

  ///
  @Post(path: '/profitlossreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/profitlossreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/profitlossreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/profitlossreport/validateagent/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/profitlossreport/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/profitlossreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/profitlossreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportEmptyobjectGet();

  ///
  @Get(path: '/profitlossreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      profitlossreportPreviewGet();

  ///
  @Post(path: '/projectmanagerbillingreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      projectmanagerbillingreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/projectmanagerbillingreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      projectmanagerbillingreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest?
                  body});

  ///
  @Post(path: '/projectmanagerbillingreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> projectmanagerbillingreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest?
              body});

  ///
  @Post(path: '/projectmanagerbillingreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/projectmanagerbillingreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/projectmanagerbillingreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/projectmanagerbillingreport/validateprojectmanager/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportValidateprojectmanagerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/projectmanagerbillingreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/projectmanagerbillingreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportEmptyobjectGet();

  ///
  @Get(path: '/projectmanagerbillingreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      projectmanagerbillingreportPreviewGet();

  ///
  @Post(path: '/purchaseordermasterreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseordermasterreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/purchaseordermasterreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      purchaseordermasterreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest?
                  body});

  ///
  @Post(path: '/purchaseordermasterreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchaseordermasterreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest?
              body});

  ///
  @Post(path: '/purchaseordermasterreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordermasterreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/purchaseordermasterreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordermasterreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/purchaseordermasterreport/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordermasterreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/purchaseordermasterreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordermasterreportEmptyobjectGet();

  ///
  @Get(path: '/purchaseordermasterreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordermasterreportPreviewGet();

  ///
  @Post(path: '/purchaseorderreceivelist/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseorderreceivelistRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/purchaseorderreceivelist/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      purchaseorderreceivelistExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest?
                  body});

  ///
  @Post(path: '/purchaseorderreceivelist/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchaseorderreceivelistRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest?
              body});

  ///
  @Get(path: '/purchaseorderreceivelist/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreceivelistEmptyobjectGet();

  ///
  @Get(path: '/purchaseorderreceivelist/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreceivelistPreviewGet();

  ///
  @Post(path: '/purchaseorderreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/purchaseorderreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchaseorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest?
              body});

  ///
  @Post(path: '/purchaseorderreport/validatepurchaseorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreportValidatepurchaseorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/purchaseorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreportEmptyobjectGet();

  ///
  @Get(path: '/purchaseorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreportPreviewGet();

  ///
  @Post(path: '/purchaseorderreturnlist/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseorderreturnlistRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/purchaseorderreturnlist/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      purchaseorderreturnlistExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest?
                  body});

  ///
  @Post(path: '/purchaseorderreturnlist/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchaseorderreturnlistRunreportPost(
      {@Body()
          required WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest?
              body});

  ///
  @Get(path: '/purchaseorderreturnlist/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreturnlistEmptyobjectGet();

  ///
  @Get(path: '/purchaseorderreturnlist/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseorderreturnlistPreviewGet();

  ///
  @Post(path: '/purchaseordersummaryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      purchaseordersummaryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/purchaseordersummaryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      purchaseordersummaryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest?
                  body});

  ///
  @Post(path: '/purchaseordersummaryreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> purchaseordersummaryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest?
              body});

  ///
  @Post(path: '/purchaseordersummaryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/purchaseordersummaryreport/validateproject/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportValidateprojectBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/purchaseordersummaryreport/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/purchaseordersummaryreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/purchaseordersummaryreport/validatepoapprovalstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportValidatepoapprovalstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/purchaseordersummaryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportEmptyobjectGet();

  ///
  @Get(path: '/purchaseordersummaryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      purchaseordersummaryreportPreviewGet();

  ///
  @Post(path: '/quikactivityreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      quikactivityreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/quikactivityreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      quikactivityreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest?
                  body});

  ///
  @Post(path: '/quikactivityreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> quikactivityreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest?
              body});

  ///
  @Post(path: '/quikactivityreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/quikactivityreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/quikactivityreport/validateactivitytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportValidateactivitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/quikactivityreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/quikactivityreport/validateagent/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/quikactivityreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportEmptyobjectGet();

  ///
  @Get(path: '/quikactivityreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikactivityreportPreviewGet();

  ///
  @Post(path: '/quikreceiptreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      quikreceiptreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/quikreceiptreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      quikreceiptreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest?
                  body});

  ///
  @Post(path: '/quikreceiptreport/runreport')
  Future<
          chopper.Response<
              WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL>>
      quikreceiptreportRunreportPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest?
                  body});

  ///
  @Get(path: '/quikreceiptreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikreceiptreportEmptyobjectGet();

  ///
  @Get(path: '/quikreceiptreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quikreceiptreportPreviewGet();

  ///
  @Post(path: '/quoteordermasterreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      quoteordermasterreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/quoteordermasterreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      quoteordermasterreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest?
                  body});

  ///
  @Post(path: '/quoteordermasterreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> quoteordermasterreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest?
              body});

  ///
  @Post(path: '/quoteordermasterreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/quoteordermasterreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/quoteordermasterreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/quoteordermasterreport/validatedealtype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidatedealtypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/quoteordermasterreport/validatedealstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidatedealstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/quoteordermasterreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/quoteordermasterreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportEmptyobjectGet();

  ///
  @Get(path: '/quoteordermasterreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quoteordermasterreportPreviewGet();

  ///
  @Post(path: '/quotereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      quotereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/quotereport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> quotereportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest?
              body});

  ///
  @Post(path: '/quotereport/validatequote/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quotereportValidatequoteBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/quotereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quotereportEmptyobjectGet();

  ///
  @Get(path: '/quotereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      quotereportPreviewGet();

  ///
  @Post(path: '/rateupdatereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rateupdatereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rateupdatereport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rateupdatereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRateUpdateReportRateUpdateReportRequest?
                  body});

  ///
  @Post(path: '/rateupdatereport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> rateupdatereportRunreportPost(
      {@Body()
          required WebApiModulesReportsRateUpdateReportRateUpdateReportRequest?
              body});

  ///
  @Post(path: '/rateupdatereport/validatebatch/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdatereportValidatebatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rateupdatereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdatereportEmptyobjectGet();

  ///
  @Get(path: '/rateupdatereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rateupdatereportPreviewGet();

  ///
  @Post(path: '/receiptbatchreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      receiptbatchreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/receiptbatchreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      receiptbatchreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest?
                  body});

  ///
  @Post(path: '/receiptbatchreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> receiptbatchreportRunreportPost(
      {@Body()
          required WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest?
              body});

  ///
  @Post(path: '/receiptbatchreport/validatebatch/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptbatchreportValidatebatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/receiptbatchreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptbatchreportEmptyobjectGet();

  ///
  @Get(path: '/receiptbatchreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptbatchreportPreviewGet();

  ///
  @Post(path: '/receiptreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      receiptreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/receiptreport/runreport')
  Future<
          chopper.Response<
              WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportL>>
      receiptreportRunreportPost(
          {@Body()
              required WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequest?
                  body});

  ///
  @Post(path: '/receiptreport/validatereceipt/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptreportValidatereceiptBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/receiptreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptreportEmptyobjectGet();

  ///
  @Get(path: '/receiptreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receiptreportPreviewGet();

  ///
  @Post(path: '/receivecontractreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      receivecontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/receivecontractreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> receivecontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest?
              body});

  ///
  @Post(path: '/receivecontractreport/validatecontract/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receivecontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/receivecontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receivecontractreportEmptyobjectGet();

  ///
  @Get(path: '/receivecontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      receivecontractreportPreviewGet();

  ///
  @Post(path: '/rentalinventoryactivitybydatereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryactivitybydatereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventoryactivitybydatereport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryactivitybydatereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryactivitybydatereport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryactivitybydatereportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest?
                  body});

  ///
  @Post(
      path: '/rentalinventoryactivitybydatereport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryactivitybydatereport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryactivitybydatereport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryactivitybydatereport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryactivitybydatereport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventoryactivitybydatereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventoryactivitybydatereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryactivitybydatereportPreviewGet();

  ///
  @Post(path: '/rentalinventoryattributesreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryattributesreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventoryattributesreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryattributesreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryattributesreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryattributesreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryattributesreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryattributesreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryattributesreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryattributesreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryattributesreport/validateattribute/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportValidateattributeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventoryattributesreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventoryattributesreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryattributesreportPreviewGet();

  ///
  @Post(path: '/rentalinventoryavailabilityreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryavailabilityreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventoryavailabilityreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryavailabilityreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryavailabilityreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryavailabilityreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryavailabilityreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path: '/rentalinventoryavailabilityreport/validaterentalcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportValidaterentalcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryavailabilityreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path: '/rentalinventoryavailabilityreport/validaterentalinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportValidaterentalinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryavailabilityreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventoryavailabilityreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventoryavailabilityreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryavailabilityreportPreviewGet();

  ///
  @Post(path: '/rentalinventorycatalogreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorycatalogreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventorycatalogreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorycatalogreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventorycatalogreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventorycatalogreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
              body});

  ///
  @Post(path: '/rentalinventorycatalogreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorycatalogreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorycatalogreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorycatalogreport/validatewarehousecatalog/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidatewarehousecatalogBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorycatalogreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorycatalogreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventorycatalogreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventorycatalogreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorycatalogreportPreviewGet();

  ///
  @Post(path: '/rentalinventorychangereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorychangereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventorychangereport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorychangereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventorychangereport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventorychangereportRunreportPost(
      {@Body()
          required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
              body});

  ///
  @Post(path: '/rentalinventorychangereport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorychangereport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorychangereport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorychangereport/validatetransactiontype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidatetransactiontypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorychangereport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorychangereport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventorychangereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventorychangereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorychangereportPreviewGet();

  ///
  @Post(path: '/rentalinventorymasterreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorymasterreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventorymasterreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorymasterreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventorymasterreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventorymasterreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest?
              body});

  ///
  @Post(path: '/rentalinventorymasterreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorymasterreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorymasterreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorymasterreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorymasterreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventorymasterreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventorymasterreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymasterreportPreviewGet();

  ///
  @Post(path: '/rentalinventorymovementreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorymovementreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventorymovementreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorymovementreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventorymovementreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventorymovementreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest?
              body});

  ///
  @Post(path: '/rentalinventorymovementreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorymovementreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorymovementreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorymovementreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorymovementreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventorymovementreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventorymovementreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorymovementreportPreviewGet();

  ///
  @Post(path: '/rentalinventorypurchasehistoryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorypurchasehistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventorypurchasehistoryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorypurchasehistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventorypurchasehistoryreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventorypurchasehistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  @Post(
      path:
          '/rentalinventorypurchasehistoryreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorypurchasehistoryreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path: '/rentalinventorypurchasehistoryreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorypurchasehistoryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorypurchasehistoryreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventorypurchasehistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventorypurchasehistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorypurchasehistoryreportPreviewGet();

  ///
  @Post(path: '/rentalinventoryqcrequiredreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryqcrequiredreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventoryqcrequiredreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryqcrequiredreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryqcrequiredreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryqcrequiredreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryqcrequiredreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryqcrequiredreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryqcrequiredreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryqcrequiredreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryqcrequiredreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventoryqcrequiredreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventoryqcrequiredreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryqcrequiredreportPreviewGet();

  ///
  @Post(path: '/rentalinventoryrepairhistoryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryrepairhistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventoryrepairhistoryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryrepairhistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryrepairhistoryreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryrepairhistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
                  body});

  ///
  @Post(
      path: '/rentalinventoryrepairhistoryreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryrepairhistoryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path: '/rentalinventoryrepairhistoryreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryrepairhistoryreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryrepairhistoryreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventoryrepairhistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventoryrepairhistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryrepairhistoryreportPreviewGet();

  ///
  @Post(path: '/rentalinventorystatusandrevenuereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventorystatusandrevenuereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventorystatusandrevenuereport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventorystatusandrevenuereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventorystatusandrevenuereport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventorystatusandrevenuereportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest?
                  body});

  ///
  @Post(
      path:
          '/rentalinventorystatusandrevenuereport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorystatusandrevenuereport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorystatusandrevenuereport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventorystatusandrevenuereport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventorystatusandrevenuereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventorystatusandrevenuereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventorystatusandrevenuereportPreviewGet();

  ///
  @Post(path: '/rentalinventoryunuseditemsreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryunuseditemsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventoryunuseditemsreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryunuseditemsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryunuseditemsreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentalinventoryunuseditemsreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryunuseditemsreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryunuseditemsreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryunuseditemsreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryunuseditemsreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryunuseditemsreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryunuseditemsreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryunuseditemsreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventoryunuseditemsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventoryunuseditemsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryunuseditemsreportPreviewGet();

  ///
  @Post(path: '/rentalinventoryusagereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryusagereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventoryusagereport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryusagereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryusagereport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventoryusagereportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest?
              body});

  ///
  @Post(path: '/rentalinventoryusagereport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryusagereport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryusagereport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryusagereport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventoryusagereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventoryusagereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryusagereportPreviewGet();

  ///
  @Post(path: '/rentalinventoryvaluereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentalinventoryvaluereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentalinventoryvaluereport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentalinventoryvaluereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest?
                  body});

  ///
  @Post(path: '/rentalinventoryvaluereport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> rentalinventoryvaluereportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest?
              body});

  ///
  @Post(path: '/rentalinventoryvaluereport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryvaluereport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryvaluereport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryvaluereport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentalinventoryvaluereport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentalinventoryvaluereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportEmptyobjectGet();

  ///
  @Get(path: '/rentalinventoryvaluereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentalinventoryvaluereportPreviewGet();

  ///
  @Post(path: '/rentallostanddamagedbillinghistoryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      rentallostanddamagedbillinghistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/rentallostanddamagedbillinghistoryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      rentallostanddamagedbillinghistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest?
                  body});

  ///
  @Post(path: '/rentallostanddamagedbillinghistoryreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      rentallostanddamagedbillinghistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest?
                  body});

  ///
  @Post(
      path:
          '/rentallostanddamagedbillinghistoryreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path: '/rentallostanddamagedbillinghistoryreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path:
          '/rentallostanddamagedbillinghistoryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path:
          '/rentallostanddamagedbillinghistoryreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path:
          '/rentallostanddamagedbillinghistoryreport/validateretiredreason/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidateretiredreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path: '/rentallostanddamagedbillinghistoryreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path:
          '/rentallostanddamagedbillinghistoryreport/validateunretiredreason/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidateunretiredreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/rentallostanddamagedbillinghistoryreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/rentallostanddamagedbillinghistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportEmptyobjectGet();

  ///
  @Get(path: '/rentallostanddamagedbillinghistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      rentallostanddamagedbillinghistoryreportPreviewGet();

  ///
  @Post(path: '/repairorderreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      repairorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/repairorderreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> repairorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest?
              body});

  ///
  @Get(path: '/repairorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderreportEmptyobjectGet();

  ///
  @Get(path: '/repairorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderreportPreviewGet();

  ///
  @Post(path: '/repairorderstatusreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      repairorderstatusreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/repairorderstatusreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      repairorderstatusreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest?
                  body});

  ///
  @Post(path: '/repairorderstatusreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> repairorderstatusreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest?
              body});

  ///
  @Post(path: '/repairorderstatusreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/repairorderstatusreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/repairorderstatusreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/repairorderstatusreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/repairorderstatusreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/repairorderstatusreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/repairorderstatusreport/validaterepairitemstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidaterepairitemstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/repairorderstatusreport/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/repairorderstatusreport/validatevendorrepairitemstatus/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportValidatevendorrepairitemstatusBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/repairorderstatusreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportEmptyobjectGet();

  ///
  @Get(path: '/repairorderstatusreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairorderstatusreportPreviewGet();

  ///
  @Post(path: '/repairtag/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      repairtagRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/repairtag/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      repairtagExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest?
                  body});

  ///
  @Post(path: '/repairtag/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>> repairtagRunreportPost(
      {@Body()
          required WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest?
              body});

  ///
  @Get(path: '/repairtag/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairtagEmptyobjectGet();

  ///
  @Get(path: '/repairtag/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      repairtagPreviewGet();

  ///
  @Post(path: '/reportsettings/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      reportsettingsBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/reportsettings/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      reportsettingsExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  ///@param pageno
  ///@param pagesize
  ///@param sort
  ///@param filter
  @Get(path: '/reportsettings')
  Future<
          chopper.Response<
              FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic>>
      reportsettingsGet(
          {@Query('pageno') int? pageno,
          @Query('pagesize') int? pagesize,
          @Query('sort') String? sort,
          @Query('filter') List<FwStandardModelsFwQueryFilter>? filter});

  ///
  @Post(path: '/reportsettings')
  Future<
          chopper
              .Response<WebApiModulesReportsSharedReportSettingsReportSettings>>
      reportsettingsPost(
          {@Body()
              required WebApiModulesReportsSharedReportSettingsReportSettings?
                  body});

  ///
  ///@param id
  @Get(path: '/reportsettings/{id}')
  Future<
          chopper
              .Response<WebApiModulesReportsSharedReportSettingsReportSettings>>
      reportsettingsIdGet({@Path('id') required String? id});

  ///
  ///@param id
  @Put(path: '/reportsettings/{id}')
  Future<
          chopper
              .Response<WebApiModulesReportsSharedReportSettingsReportSettings>>
      reportsettingsIdPut(
          {@Path('id')
              required String? id,
          @Body()
              required WebApiModulesReportsSharedReportSettingsReportSettings?
                  body});

  ///
  ///@param id
  @Delete(path: '/reportsettings/{id}')
  Future<chopper.Response<bool>> reportsettingsIdDelete(
      {@Path('id') required String? id});

  ///Get an empty object
  @Get(path: '/reportsettings/emptyobject')
  Future<chopper.Response> reportsettingsEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/reportsettings/emptybrowseobject')
  Future<chopper.Response> reportsettingsEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/reportsettings/keyfieldnames')
  Future<chopper.Response> reportsettingsKeyfieldnamesGet();

  ///
  @Post(path: '/retiredrentalinventoryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      retiredrentalinventoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/retiredrentalinventoryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      retiredrentalinventoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest?
                  body});

  ///
  @Post(path: '/retiredrentalinventoryreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> retiredrentalinventoryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest?
              body});

  ///
  @Post(path: '/retiredrentalinventoryreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/retiredrentalinventoryreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/retiredrentalinventoryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/retiredrentalinventoryreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/retiredrentalinventoryreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/retiredrentalinventoryreport/validateretiredreason/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidateretiredreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/retiredrentalinventoryreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/retiredrentalinventoryreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/retiredrentalinventoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportEmptyobjectGet();

  ///
  @Get(path: '/retiredrentalinventoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      retiredrentalinventoryreportPreviewGet();

  ///
  @Post(path: '/returncontractreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      returncontractreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/returncontractreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> returncontractreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest?
              body});

  ///
  @Post(path: '/returncontractreport/validatecontract/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returncontractreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/returncontractreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returncontractreportEmptyobjectGet();

  ///
  @Get(path: '/returncontractreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returncontractreportPreviewGet();

  ///
  @Post(path: '/returnedtoinventoryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      returnedtoinventoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/returnedtoinventoryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      returnedtoinventoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest?
                  body});

  ///
  @Post(path: '/returnedtoinventoryreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> returnedtoinventoryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest?
              body});

  ///
  @Post(path: '/returnedtoinventoryreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnedtoinventoryreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnedtoinventoryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnedtoinventoryreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnedtoinventoryreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnedtoinventoryreport/validateuser/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidateuserBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnedtoinventoryreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/returnedtoinventoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportEmptyobjectGet();

  ///
  @Get(path: '/returnedtoinventoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnedtoinventoryreportPreviewGet();

  ///
  @Post(path: '/returnlistreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      returnlistreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/returnlistreport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> returnlistreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest?
              body});

  ///
  @Post(path: '/returnlistreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnlistreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/returnlistreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnlistreportEmptyobjectGet();

  ///
  @Get(path: '/returnlistreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnlistreportPreviewGet();

  ///
  @Post(path: '/returnonassetperiod/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetperiodBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnonassetperiod/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      returnonassetperiodExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/returnonassetperiod/emptyobject')
  Future<chopper.Response> returnonassetperiodEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/returnonassetperiod/emptybrowseobject')
  Future<chopper.Response> returnonassetperiodEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/returnonassetperiod/keyfieldnames')
  Future<chopper.Response> returnonassetperiodKeyfieldnamesGet();

  ///
  @Post(path: '/returnonassetreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      returnonassetreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/returnonassetreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      returnonassetreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest?
                  body});

  ///
  @Post(path: '/returnonassetreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> returnonassetreportRunreportPost(
      {@Body()
          required WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest?
              body});

  ///
  @Post(path: '/returnonassetreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnonassetreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnonassetreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnonassetreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnonassetreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/returnonassetreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportEmptyobjectGet();

  ///
  @Get(path: '/returnonassetreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetreportPreviewGet();

  ///
  @Post(path: '/returnonassetyear/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnonassetyearBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnonassetyear/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      returnonassetyearExportexcelxlsxPost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///Get an empty object
  @Get(path: '/returnonassetyear/emptyobject')
  Future<chopper.Response> returnonassetyearEmptyobjectGet();

  ///Get an empty browse object
  @Get(path: '/returnonassetyear/emptybrowseobject')
  Future<chopper.Response> returnonassetyearEmptybrowseobjectGet();

  ///Get an array of primary key field names
  @Get(path: '/returnonassetyear/keyfieldnames')
  Future<chopper.Response> returnonassetyearKeyfieldnamesGet();

  ///
  @Post(path: '/returnreceiptreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      returnreceiptreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/returnreceiptreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      returnreceiptreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest?
                  body});

  ///
  @Post(path: '/returnreceiptreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> returnreceiptreportRunreportPost(
      {@Body()
          required WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest?
              body});

  ///
  @Post(path: '/returnreceiptreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnreceiptreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnreceiptreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnreceiptreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnreceiptreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/returnreceiptreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/returnreceiptreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportEmptyobjectGet();

  ///
  @Get(path: '/returnreceiptreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      returnreceiptreportPreviewGet();

  ///
  @Post(path: '/salesbackorderreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesbackorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salesbackorderreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesbackorderreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest?
                  body});

  ///
  @Post(path: '/salesbackorderreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesbackorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest?
              body});

  ///
  @Post(path: '/salesbackorderreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesbackorderreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesbackorderreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesbackorderreport/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesbackorderreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salesbackorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportEmptyobjectGet();

  ///
  @Get(path: '/salesbackorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesbackorderreportPreviewGet();

  ///
  @Post(path: '/saleshistoryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      saleshistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/saleshistoryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      saleshistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest?
                  body});

  ///
  @Post(path: '/saleshistoryreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> saleshistoryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest?
              body});

  ///
  @Post(path: '/saleshistoryreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/saleshistoryreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/saleshistoryreport/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/saleshistoryreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/saleshistoryreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/saleshistoryreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/saleshistoryreport/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/saleshistoryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/saleshistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportEmptyobjectGet();

  ///
  @Get(path: '/saleshistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      saleshistoryreportPreviewGet();

  ///
  @Post(path: '/salesinventoryattributesreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventoryattributesreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salesinventoryattributesreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventoryattributesreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  @Post(path: '/salesinventoryattributesreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      salesinventoryattributesreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest?
                  body});

  ///
  @Post(path: '/salesinventoryattributesreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryattributesreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryattributesreport/validateattribute/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportValidateattributeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryattributesreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryattributesreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salesinventoryattributesreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportEmptyobjectGet();

  ///
  @Get(path: '/salesinventoryattributesreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryattributesreportPreviewGet();

  ///
  @Post(path: '/salesinventorycatalogreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventorycatalogreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salesinventorycatalogreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventorycatalogreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
                  body});

  ///
  @Post(path: '/salesinventorycatalogreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesinventorycatalogreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest?
              body});

  ///
  @Post(path: '/salesinventorycatalogreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorycatalogreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorycatalogreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorycatalogreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorycatalogreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorycatalogreport/validatewarehousecatalog/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportValidatewarehousecatalogBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salesinventorycatalogreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportEmptyobjectGet();

  ///
  @Get(path: '/salesinventorycatalogreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorycatalogreportPreviewGet();

  ///
  @Post(path: '/salesinventorychangereport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventorychangereportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salesinventorychangereport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventorychangereportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
                  body});

  ///
  @Post(path: '/salesinventorychangereport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesinventorychangereportRunreportPost(
      {@Body()
          required WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest?
              body});

  ///
  @Post(path: '/salesinventorychangereport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorychangereport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorychangereport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorychangereport/validatetransactiontype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidatetransactiontypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorychangereport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorychangereport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salesinventorychangereport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportEmptyobjectGet();

  ///
  @Get(path: '/salesinventorychangereport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorychangereportPreviewGet();

  ///
  @Post(path: '/salesinventorymasterreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventorymasterreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salesinventorymasterreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventorymasterreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest?
                  body});

  ///
  @Post(path: '/salesinventorymasterreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesinventorymasterreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest?
              body});

  ///
  @Post(path: '/salesinventorymasterreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorymasterreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorymasterreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorymasterreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salesinventorymasterreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportEmptyobjectGet();

  ///
  @Get(path: '/salesinventorymasterreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorymasterreportPreviewGet();

  ///
  @Post(path: '/salesinventorypurchasehistoryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventorypurchasehistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salesinventorypurchasehistoryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventorypurchasehistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  @Post(path: '/salesinventorypurchasehistoryreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      salesinventorypurchasehistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest?
                  body});

  ///
  @Post(
      path: '/salesinventorypurchasehistoryreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorypurchasehistoryreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorypurchasehistoryreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorypurchasehistoryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorypurchasehistoryreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salesinventorypurchasehistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportEmptyobjectGet();

  ///
  @Get(path: '/salesinventorypurchasehistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorypurchasehistoryreportPreviewGet();

  ///
  @Post(path: '/salesinventoryreorderreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventoryreorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salesinventoryreorderreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventoryreorderreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest?
                  body});

  ///
  @Post(path: '/salesinventoryreorderreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesinventoryreorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest?
              body});

  ///
  @Post(path: '/salesinventoryreorderreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryreorderreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryreorderreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryreorderreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryreorderreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salesinventoryreorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportEmptyobjectGet();

  ///
  @Get(path: '/salesinventoryreorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryreorderreportPreviewGet();

  ///
  @Post(path: '/salesinventoryrepairhistoryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventoryrepairhistoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salesinventoryrepairhistoryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventoryrepairhistoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
                  body});

  ///
  @Post(path: '/salesinventoryrepairhistoryreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      salesinventoryrepairhistoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest?
                  body});

  ///
  @Post(
      path: '/salesinventoryrepairhistoryreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryrepairhistoryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryrepairhistoryreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryrepairhistoryreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventoryrepairhistoryreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salesinventoryrepairhistoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportEmptyobjectGet();

  ///
  @Get(path: '/salesinventoryrepairhistoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventoryrepairhistoryreportPreviewGet();

  ///
  @Post(path: '/salesinventorytransactionreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesinventorytransactionreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salesinventorytransactionreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesinventorytransactionreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
                  body});

  ///
  @Post(path: '/salesinventorytransactionreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      salesinventorytransactionreportRunreportPost(
          {@Body()
              required WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest?
                  body});

  ///
  @Post(path: '/salesinventorytransactionreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorytransactionreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorytransactionreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorytransactionreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesinventorytransactionreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salesinventorytransactionreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportEmptyobjectGet();

  ///
  @Get(path: '/salesinventorytransactionreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesinventorytransactionreportPreviewGet();

  ///
  @Post(path: '/salesquotebillingreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesquotebillingreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salesquotebillingreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesquotebillingreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest?
                  body});

  ///
  @Post(path: '/salesquotebillingreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salesquotebillingreportRunreportPost(
      {@Body()
          required WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest?
              body});

  ///
  @Post(path: '/salesquotebillingreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesquotebillingreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesquotebillingreport/validateagent/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesquotebillingreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesquotebillingreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesquotebillingreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salesquotebillingreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesquotebillingreportEmptyobjectGet();

  ///
  @Get(path: '/salesquotebillingreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesquotebillingreportPreviewGet();

  ///
  @Post(path: '/salesrepresentativebillingreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salesrepresentativebillingreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salesrepresentativebillingreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salesrepresentativebillingreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest?
                  body});

  ///
  @Post(path: '/salesrepresentativebillingreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      salesrepresentativebillingreportRunreportPost(
          {@Body()
              required WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest?
                  body});

  ///
  @Post(path: '/salesrepresentativebillingreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesrepresentativebillingreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(
      path:
          '/salesrepresentativebillingreport/validatesalesrepresentative/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportValidatesalesrepresentativeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesrepresentativebillingreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salesrepresentativebillingreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salesrepresentativebillingreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportEmptyobjectGet();

  ///
  @Get(path: '/salesrepresentativebillingreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salesrepresentativebillingreportPreviewGet();

  ///
  @Post(path: '/salestaxcanadareport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salestaxcanadareportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salestaxcanadareport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salestaxcanadareportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
                  body});

  ///
  @Post(path: '/salestaxcanadareport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salestaxcanadareportRunreportPost(
      {@Body()
          required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
              body});

  ///
  @Post(path: '/salestaxcanadareport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxcanadareportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salestaxcanadareport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxcanadareportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salestaxcanadareport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxcanadareportEmptyobjectGet();

  ///
  @Get(path: '/salestaxcanadareport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxcanadareportPreviewGet();

  ///
  @Post(path: '/salestaxusareport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      salestaxusareportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/salestaxusareport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      salestaxusareportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
                  body});

  ///
  @Post(path: '/salestaxusareport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> salestaxusareportRunreportPost(
      {@Body()
          required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
              body});

  ///
  @Post(path: '/salestaxusareport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxusareportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/salestaxusareport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxusareportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/salestaxusareport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxusareportEmptyobjectGet();

  ///
  @Get(path: '/salestaxusareport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      salestaxusareportPreviewGet();

  ///
  @Post(path: '/storagecontainerlabel/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      storagecontainerlabelRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/storagecontainerlabel/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      storagecontainerlabelExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest?
                  body});

  ///
  @Post(path: '/storagecontainerlabel/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> storagecontainerlabelRunreportPost(
      {@Body()
          required WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest?
              body});

  ///
  @Get(path: '/storagecontainerlabel/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      storagecontainerlabelEmptyobjectGet();

  ///
  @Get(path: '/storagecontainerlabel/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      storagecontainerlabelPreviewGet();

  ///
  @Post(path: '/subitemstatusreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      subitemstatusreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/subitemstatusreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      subitemstatusreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest?
                  body});

  ///
  @Post(path: '/subitemstatusreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> subitemstatusreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest?
              body});

  ///
  @Post(path: '/subitemstatusreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subitemstatusreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subitemstatusreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subitemstatusreport/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subitemstatusreport/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subitemstatusreport/validatepoclassification/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportValidatepoclassificationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/subitemstatusreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportEmptyobjectGet();

  ///
  @Get(path: '/subitemstatusreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subitemstatusreportPreviewGet();

  ///
  @Post(path: '/subprofitabilityreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      subprofitabilityreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/subprofitabilityreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      subprofitabilityreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest?
                  body});

  ///
  @Post(path: '/subprofitabilityreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> subprofitabilityreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest?
              body});

  ///
  @Post(path: '/subprofitabilityreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subprofitabilityreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subprofitabilityreport/validatecustomer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidatecustomerBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subprofitabilityreport/validateorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidateorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subprofitabilityreport/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subprofitabilityreport/validatepoclassification/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportValidatepoclassificationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/subprofitabilityreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportEmptyobjectGet();

  ///
  @Get(path: '/subprofitabilityreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subprofitabilityreportPreviewGet();

  ///
  @Post(path: '/subrentalbillinganalysisreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      subrentalbillinganalysisreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/subrentalbillinganalysisreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      subrentalbillinganalysisreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest?
                  body});

  ///
  @Post(path: '/subrentalbillinganalysisreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      subrentalbillinganalysisreportRunreportPost(
          {@Body()
              required WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest?
                  body});

  ///
  @Post(path: '/subrentalbillinganalysisreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subrentalbillinganalysisreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subrentalbillinganalysisreport/validatepurchaseorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidatepurchaseorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subrentalbillinganalysisreport/validatepoclassification/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidatepoclassificationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subrentalbillinganalysisreport/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subrentalbillinganalysisreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/subrentalbillinganalysisreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/subrentalbillinganalysisreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportEmptyobjectGet();

  ///
  @Get(path: '/subrentalbillinganalysisreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subrentalbillinganalysisreportPreviewGet();

  ///
  @Post(path: '/subsalesstageditemsreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      subsalesstageditemsreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/subsalesstageditemsreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      subsalesstageditemsreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest?
                  body});

  ///
  @Post(path: '/subsalesstageditemsreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> subsalesstageditemsreportRunreportPost(
      {@Body()
          required WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest?
              body});

  ///
  @Get(path: '/subsalesstageditemsreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subsalesstageditemsreportEmptyobjectGet();

  ///
  @Get(path: '/subsalesstageditemsreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      subsalesstageditemsreportPreviewGet();

  ///
  @Post(path: '/taxespaidreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      taxespaidreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/taxespaidreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      taxespaidreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
                  body});

  ///
  @Post(path: '/taxespaidreport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> taxespaidreportRunreportPost(
      {@Body()
          required WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest?
              body});

  ///
  @Post(path: '/taxespaidreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxespaidreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/taxespaidreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxespaidreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/taxespaidreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxespaidreportEmptyobjectGet();

  ///
  @Get(path: '/taxespaidreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      taxespaidreportPreviewGet();

  ///
  @Post(path: '/transfermanifestreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      transfermanifestreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/transfermanifestreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> transfermanifestreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest?
              body});

  ///
  @Post(path: '/transfermanifestreport/validatecontract/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transfermanifestreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/transfermanifestreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transfermanifestreportEmptyobjectGet();

  ///
  @Get(path: '/transfermanifestreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transfermanifestreportPreviewGet();

  ///
  @Post(path: '/transferorderreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      transferorderreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/transferorderreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> transferorderreportRunreportPost(
      {@Body()
          required WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequest?
              body});

  ///
  @Post(path: '/transferorderreport/validatetransferorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferorderreportValidatetransferorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/transferorderreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferorderreportEmptyobjectGet();

  ///
  @Get(path: '/transferorderreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferorderreportPreviewGet();

  ///
  @Post(path: '/transferreceiptreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      transferreceiptreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/transferreceiptreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> transferreceiptreportRunreportPost(
      {@Body()
          required WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest?
              body});

  ///
  @Post(path: '/transferreceiptreport/validatecontract/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreceiptreportValidatecontractBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/transferreceiptreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreceiptreportEmptyobjectGet();

  ///
  @Get(path: '/transferreceiptreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreceiptreportPreviewGet();

  ///
  @Post(path: '/transferreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      transferreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/transferreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      transferreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest?
                  body});

  ///
  @Post(path: '/transferreport/runreport')
  Future<
      chopper
          .Response<WebApiDataAppReportResponse>> transferreportRunreportPost(
      {@Body()
          required WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest?
              body});

  ///
  @Post(path: '/transferreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/transferreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/transferreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/transferreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/transferreport/validatetransfer/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatetransferBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/transferreport/validatetowarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatetowarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/transferreport/validatefromwarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatefromwarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/transferreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/transferreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportEmptyobjectGet();

  ///
  @Get(path: '/transferreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      transferreportPreviewGet();

  ///
  @Post(path: '/unretiredrentalinventoryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      unretiredrentalinventoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/unretiredrentalinventoryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      unretiredrentalinventoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest?
                  body});

  ///
  @Post(path: '/unretiredrentalinventoryreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      unretiredrentalinventoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest?
                  body});

  ///
  @Post(path: '/unretiredrentalinventoryreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/unretiredrentalinventoryreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/unretiredrentalinventoryreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/unretiredrentalinventoryreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/unretiredrentalinventoryreport/validateunretiredreason/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidateunretiredreasonBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/unretiredrentalinventoryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/unretiredrentalinventoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportEmptyobjectGet();

  ///
  @Get(path: '/unretiredrentalinventoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      unretiredrentalinventoryreportPreviewGet();

  ///
  @Post(path: '/valueofoutrentalinventoryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      valueofoutrentalinventoryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/valueofoutrentalinventoryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      valueofoutrentalinventoryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest?
                  body});

  ///
  @Post(path: '/valueofoutrentalinventoryreport/runreport')
  Future<chopper.Response<WebApiDataAppReportResponse>>
      valueofoutrentalinventoryreportRunreportPost(
          {@Body()
              required WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest?
                  body});

  ///
  @Post(path: '/valueofoutrentalinventoryreport/validateinventorytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportValidateinventorytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/valueofoutrentalinventoryreport/validatecategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportValidatecategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/valueofoutrentalinventoryreport/validatesubcategory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportValidatesubcategoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/valueofoutrentalinventoryreport/validateinventory/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportValidateinventoryBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/valueofoutrentalinventoryreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/valueofoutrentalinventoryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportEmptyobjectGet();

  ///
  @Get(path: '/valueofoutrentalinventoryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      valueofoutrentalinventoryreportPreviewGet();

  ///
  @Post(path: '/vendorinvoicebatchreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      vendorinvoicebatchreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/vendorinvoicebatchreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vendorinvoicebatchreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest?
                  body});

  ///
  @Post(path: '/vendorinvoicebatchreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> vendorinvoicebatchreportRunreportPost(
      {@Body()
          required WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest?
              body});

  ///
  @Post(path: '/vendorinvoicebatchreport/validatebatch/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicebatchreportValidatebatchBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/vendorinvoicebatchreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicebatchreportEmptyobjectGet();

  ///
  @Get(path: '/vendorinvoicebatchreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicebatchreportPreviewGet();

  ///
  @Post(path: '/vendorinvoicesummaryreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      vendorinvoicesummaryreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/vendorinvoicesummaryreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      vendorinvoicesummaryreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest?
                  body});

  ///
  @Post(path: '/vendorinvoicesummaryreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> vendorinvoicesummaryreportRunreportPost(
      {@Body()
          required WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest?
              body});

  ///
  @Post(path: '/vendorinvoicesummaryreport/validatepurchaseorder/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportValidatepurchaseorderBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorinvoicesummaryreport/validateofficelocation/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportValidateofficelocationBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorinvoicesummaryreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorinvoicesummaryreport/validatedeal/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportValidatedealBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/vendorinvoicesummaryreport/validatevendor/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportValidatevendorBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/vendorinvoicesummaryreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportEmptyobjectGet();

  ///
  @Get(path: '/vendorinvoicesummaryreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      vendorinvoicesummaryreportPreviewGet();

  ///
  @Post(path: '/warehousedispatchreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      warehousedispatchreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/warehousedispatchreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehousedispatchreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest?
                  body});

  ///
  @Post(path: '/warehousedispatchreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> warehousedispatchreportRunreportPost(
      {@Body()
          required WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest?
              body});

  ///
  @Post(path: '/warehousedispatchreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehousedispatchreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehousedispatchreport/validateactivitytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportValidateactivitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehousedispatchreport/validateagent/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/warehousedispatchreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportEmptyobjectGet();

  ///
  @Get(path: '/warehousedispatchreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehousedispatchreportPreviewGet();

  ///
  @Post(path: '/warehouseinboundreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      warehouseinboundreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/warehouseinboundreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehouseinboundreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest?
                  body});

  ///
  @Post(path: '/warehouseinboundreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> warehouseinboundreportRunreportPost(
      {@Body()
          required WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest?
              body});

  ///
  @Post(path: '/warehouseinboundreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouseinboundreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouseinboundreport/validateactivitytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportValidateactivitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouseinboundreport/validateagent/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/warehouseinboundreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportEmptyobjectGet();

  ///
  @Get(path: '/warehouseinboundreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseinboundreportPreviewGet();

  ///
  @Post(path: '/warehouseoutboundreport/render')
  Future<chopper.Response<FwStandardReportingFwReportRenderResponse>>
      warehouseoutboundreportRenderPost(
          {@Body() required FwStandardReportingFwReportRenderRequest? body});

  ///
  @Post(path: '/warehouseoutboundreport/exportexcelxlsx')
  Future<
          chopper.Response<
              FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult>>
      warehouseoutboundreportExportexcelxlsxPost(
          {@Body()
              required WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest?
                  body});

  ///
  @Post(path: '/warehouseoutboundreport/runreport')
  Future<
      chopper.Response<
          WebApiDataAppReportResponse>> warehouseoutboundreportRunreportPost(
      {@Body()
          required WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest?
              body});

  ///
  @Post(path: '/warehouseoutboundreport/validatewarehouse/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportValidatewarehouseBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouseoutboundreport/validatedepartment/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportValidatedepartmentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouseoutboundreport/validateactivitytype/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportValidateactivitytypeBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Post(path: '/warehouseoutboundreport/validateagent/browse')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportValidateagentBrowsePost(
          {@Body() required FwStandardModelsBrowseRequest? body});

  ///
  @Get(path: '/warehouseoutboundreport/emptyobject')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportEmptyobjectGet();

  ///
  @Get(path: '/warehouseoutboundreport/preview')
  Future<chopper.Response<FwStandardSqlServerFwJsonDataTable>>
      warehouseoutboundreportPreviewGet();
}

final Map<Type, Object Function(Map<String, dynamic>)>
    ReportsJsonDecoderMappings = {
  FwCoreApiSwashbuckleBadRequestResponse:
      FwCoreApiSwashbuckleBadRequestResponse.fromJsonFactory,
  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult:
      FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
          .fromJsonFactory,
  FwStandardBusinessLogicFwBusinessLogicFieldDefinition:
      FwStandardBusinessLogicFwBusinessLogicFieldDefinition.fromJsonFactory,
  FwStandardDataFwCustomValue: FwStandardDataFwCustomValue.fromJsonFactory,
  FwStandardDataFwDefaultAttribute:
      FwStandardDataFwDefaultAttribute.fromJsonFactory,
  FwStandardDataFwReportLoader: FwStandardDataFwReportLoader.fromJsonFactory,
  FwStandardModelsBrowseRequest: FwStandardModelsBrowseRequest.fromJsonFactory,
  FwStandardModelsCheckBoxListItem:
      FwStandardModelsCheckBoxListItem.fromJsonFactory,
  FwStandardModelsFwApiException:
      FwStandardModelsFwApiException.fromJsonFactory,
  FwStandardModelsFwQueryFilter: FwStandardModelsFwQueryFilter.fromJsonFactory,
  FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic:
      FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic
          .fromJsonFactory,
  FwStandardModelsSelectedCheckBoxListItem:
      FwStandardModelsSelectedCheckBoxListItem.fromJsonFactory,
  FwStandardReportingFwReportEmailInfo:
      FwStandardReportingFwReportEmailInfo.fromJsonFactory,
  FwStandardReportingFwReportRenderRequest:
      FwStandardReportingFwReportRenderRequest.fromJsonFactory,
  FwStandardReportingFwReportRenderRequestEmailImageOptions:
      FwStandardReportingFwReportRenderRequestEmailImageOptions.fromJsonFactory,
  FwStandardReportingFwReportRenderResponse:
      FwStandardReportingFwReportRenderResponse.fromJsonFactory,
  FwStandardSqlServerFwDateTime: FwStandardSqlServerFwDateTime.fromJsonFactory,
  FwStandardSqlServerFwJsonDataTable:
      FwStandardSqlServerFwJsonDataTable.fromJsonFactory,
  FwStandardSqlServerFwJsonDataTableColumn:
      FwStandardSqlServerFwJsonDataTableColumn.fromJsonFactory,
  WebApiDataAppReportResponse: WebApiDataAppReportResponse.fromJsonFactory,
  WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest:
      WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest
          .fromJsonFactory,
  WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest:
      WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest
          .fromJsonFactory,
  WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest:
      WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest:
      WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest:
      WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest:
      WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest:
      WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest:
      WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest:
      WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest:
      WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest:
      WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest:
      WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest:
      WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest:
      WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest
          .fromJsonFactory,
  WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest:
      WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest
          .fromJsonFactory,
  WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest:
      WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest
          .fromJsonFactory,
  WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest:
      WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest
          .fromJsonFactory,
  WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest:
      WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest
          .fromJsonFactory,
  WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest:
      WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest
          .fromJsonFactory,
  WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest:
      WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest
          .fromJsonFactory,
  WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest:
      WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest
          .fromJsonFactory,
  WebApiModulesReportsContractReportsInContractReportInContractReportRequest:
      WebApiModulesReportsContractReportsInContractReportInContractReportRequest
          .fromJsonFactory,
  WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest:
      WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest
          .fromJsonFactory,
  WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest:
      WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest
          .fromJsonFactory,
  WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest:
      WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest
          .fromJsonFactory,
  WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest:
      WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest
          .fromJsonFactory,
  WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest:
      WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest
          .fromJsonFactory,
  WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest:
      WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest
          .fromJsonFactory,
  WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest:
      WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest
          .fromJsonFactory,
  WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest:
      WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest
          .fromJsonFactory,
  WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest:
      WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest
          .fromJsonFactory,
  WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest:
      WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest
          .fromJsonFactory,
  WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest:
      WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest
          .fromJsonFactory,
  WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest:
      WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest
          .fromJsonFactory,
  WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest:
      WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest
          .fromJsonFactory,
  WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest:
      WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest
          .fromJsonFactory,
  WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest:
      WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest
          .fromJsonFactory,
  WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest:
      WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest
          .fromJsonFactory,
  WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest:
      WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest
          .fromJsonFactory,
  WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest:
      WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest
          .fromJsonFactory,
  WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest:
      WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest
          .fromJsonFactory,
  WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest:
      WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest:
      WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL:
      WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL
          .fromJsonFactory,
  WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL:
      WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL
          .fromJsonFactory,
  WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL:
      WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL
          .fromJsonFactory,
  WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportL:
      WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportL
          .fromJsonFactory,
  WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequest:
      WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest:
      WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest:
      WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest:
      WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsOrderReportOrderReportRequest:
      WebApiModulesReportsOrderReportsOrderReportOrderReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest:
      WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest:
      WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest:
      WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest:
      WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsPickListReportPickListReportRequest:
      WebApiModulesReportsOrderReportsPickListReportPickListReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest:
      WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest:
      WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest:
      WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest:
      WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest:
      WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest
          .fromJsonFactory,
  WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest:
      WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest
          .fromJsonFactory,
  WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest:
      WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest
          .fromJsonFactory,
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest:
      WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest
          .fromJsonFactory,
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest:
      WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest
          .fromJsonFactory,
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest:
      WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest
          .fromJsonFactory,
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest:
      WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest
          .fromJsonFactory,
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest:
      WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest
          .fromJsonFactory,
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest:
      WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest
          .fromJsonFactory,
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest:
      WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest
          .fromJsonFactory,
  WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest:
      WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest
          .fromJsonFactory,
  WebApiModulesReportsRateUpdateReportRateUpdateReportRequest:
      WebApiModulesReportsRateUpdateReportRateUpdateReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest:
      WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest:
      WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest:
      WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest:
      WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest:
      WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest:
      WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest:
      WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest:
      WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest:
      WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest:
      WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest:
      WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest:
      WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest:
      WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest:
      WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest:
      WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest:
      WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest
          .fromJsonFactory,
  WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest:
      WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest
          .fromJsonFactory,
  WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest:
      WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest
          .fromJsonFactory,
  WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest:
      WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest
          .fromJsonFactory,
  WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest:
      WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest:
      WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest
          .fromJsonFactory,
  WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest:
      WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest
          .fromJsonFactory,
  WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest:
      WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest
          .fromJsonFactory,
  WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest:
      WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest
          .fromJsonFactory,
  WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest:
      WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest:
      WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest
          .fromJsonFactory,
  WebApiModulesReportsSharedReportSettingsReportSettings:
      WebApiModulesReportsSharedReportSettingsReportSettings.fromJsonFactory,
  WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest:
      WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest
          .fromJsonFactory,
  WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest:
      WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest
          .fromJsonFactory,
  WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest:
      WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest
          .fromJsonFactory,
  WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest:
      WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest
          .fromJsonFactory,
  WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest:
      WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest:
      WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest
          .fromJsonFactory,
  WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest:
      WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest
          .fromJsonFactory,
  WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest:
      WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest
          .fromJsonFactory,
  WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest:
      WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest
          .fromJsonFactory,
  WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest:
      WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest
          .fromJsonFactory,
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData:
      WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData
          .fromJsonFactory,
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL:
      WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL
          .fromJsonFactory,
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL:
      WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL
          .fromJsonFactory,
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest:
      WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest
          .fromJsonFactory,
  WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest:
      WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest
          .fromJsonFactory,
  WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequest:
      WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequest
          .fromJsonFactory,
  WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest:
      WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest
          .fromJsonFactory,
  WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest:
      WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest
          .fromJsonFactory,
  WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest:
      WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest
          .fromJsonFactory,
};

@JsonSerializable(explicitToJson: true)
class FwCoreApiSwashbuckleBadRequestResponse {
  FwCoreApiSwashbuckleBadRequestResponse();

  factory FwCoreApiSwashbuckleBadRequestResponse.fromJson(
          Map<String, dynamic> json) =>
      _$FwCoreApiSwashbuckleBadRequestResponseFromJson(json);

  static const fromJsonFactory =
      _$FwCoreApiSwashbuckleBadRequestResponseFromJson;
  static const toJsonFactory = _$FwCoreApiSwashbuckleBadRequestResponseToJson;
  Map<String, dynamic> toJson() =>
      _$FwCoreApiSwashbuckleBadRequestResponseToJson(this);

  @override
  int get hashCode => runtimeType.hashCode;
}

@JsonSerializable(explicitToJson: true)
class FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult {
  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult({
    this.downloadUrl,
  });

  factory FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult.fromJson(
          Map<String, dynamic> json) =>
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultFromJson(
          json);

  @JsonKey(name: 'downloadUrl', includeIfNull: false)
  final String? downloadUrl;
  static const fromJsonFactory =
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultFromJson;
  static const toJsonFactory =
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultToJson;
  Map<String, dynamic> toJson() =>
      _$FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult &&
            (identical(other.downloadUrl, downloadUrl) ||
                const DeepCollectionEquality()
                    .equals(other.downloadUrl, downloadUrl)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(downloadUrl) ^ runtimeType.hashCode;
}

extension $FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResultExtension
    on FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult {
  FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult
      copyWith({String? downloadUrl}) {
    return FwCoreControllersFwDataControllerDoExportExcelXlsxExportFileAsyncResult(
        downloadUrl: downloadUrl ?? this.downloadUrl);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardBusinessLogicFwBusinessLogicFieldDefinition {
  FwStandardBusinessLogicFwBusinessLogicFieldDefinition({
    this.name,
    this.dataType,
  });

  factory FwStandardBusinessLogicFwBusinessLogicFieldDefinition.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionFromJson(json);

  @JsonKey(name: 'Name', includeIfNull: false)
  final String? name;
  @JsonKey(
      name: 'DataType',
      includeIfNull: false,
      toJson: fwStandardSqlServerFwDataTypesToJson,
      fromJson: fwStandardSqlServerFwDataTypesFromJson)
  final enums.FwStandardSqlServerFwDataTypes? dataType;
  static const fromJsonFactory =
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionFromJson;
  static const toJsonFactory =
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardBusinessLogicFwBusinessLogicFieldDefinitionToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardBusinessLogicFwBusinessLogicFieldDefinition &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.dataType, dataType) ||
                const DeepCollectionEquality()
                    .equals(other.dataType, dataType)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(name) ^
      const DeepCollectionEquality().hash(dataType) ^
      runtimeType.hashCode;
}

extension $FwStandardBusinessLogicFwBusinessLogicFieldDefinitionExtension
    on FwStandardBusinessLogicFwBusinessLogicFieldDefinition {
  FwStandardBusinessLogicFwBusinessLogicFieldDefinition copyWith(
      {String? name, enums.FwStandardSqlServerFwDataTypes? dataType}) {
    return FwStandardBusinessLogicFwBusinessLogicFieldDefinition(
        name: name ?? this.name, dataType: dataType ?? this.dataType);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardDataFwCustomValue {
  FwStandardDataFwCustomValue({
    this.fieldName,
    this.fieldValue,
    this.fieldType,
  });

  factory FwStandardDataFwCustomValue.fromJson(Map<String, dynamic> json) =>
      _$FwStandardDataFwCustomValueFromJson(json);

  @JsonKey(name: 'FieldName', includeIfNull: false)
  final String? fieldName;
  @JsonKey(name: 'FieldValue', includeIfNull: false)
  final String? fieldValue;
  @JsonKey(name: 'FieldType', includeIfNull: false)
  final String? fieldType;
  static const fromJsonFactory = _$FwStandardDataFwCustomValueFromJson;
  static const toJsonFactory = _$FwStandardDataFwCustomValueToJson;
  Map<String, dynamic> toJson() => _$FwStandardDataFwCustomValueToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardDataFwCustomValue &&
            (identical(other.fieldName, fieldName) ||
                const DeepCollectionEquality()
                    .equals(other.fieldName, fieldName)) &&
            (identical(other.fieldValue, fieldValue) ||
                const DeepCollectionEquality()
                    .equals(other.fieldValue, fieldValue)) &&
            (identical(other.fieldType, fieldType) ||
                const DeepCollectionEquality()
                    .equals(other.fieldType, fieldType)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fieldName) ^
      const DeepCollectionEquality().hash(fieldValue) ^
      const DeepCollectionEquality().hash(fieldType) ^
      runtimeType.hashCode;
}

extension $FwStandardDataFwCustomValueExtension on FwStandardDataFwCustomValue {
  FwStandardDataFwCustomValue copyWith(
      {String? fieldName, String? fieldValue, String? fieldType}) {
    return FwStandardDataFwCustomValue(
        fieldName: fieldName ?? this.fieldName,
        fieldValue: fieldValue ?? this.fieldValue,
        fieldType: fieldType ?? this.fieldType);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardDataFwDefaultAttribute {
  FwStandardDataFwDefaultAttribute({
    this.fieldName,
    this.attributeName,
    this.defaultValue,
  });

  factory FwStandardDataFwDefaultAttribute.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardDataFwDefaultAttributeFromJson(json);

  @JsonKey(name: 'FieldName', includeIfNull: false)
  final String? fieldName;
  @JsonKey(name: 'AttributeName', includeIfNull: false)
  final String? attributeName;
  @JsonKey(name: 'DefaultValue', includeIfNull: false)
  final String? defaultValue;
  static const fromJsonFactory = _$FwStandardDataFwDefaultAttributeFromJson;
  static const toJsonFactory = _$FwStandardDataFwDefaultAttributeToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardDataFwDefaultAttributeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardDataFwDefaultAttribute &&
            (identical(other.fieldName, fieldName) ||
                const DeepCollectionEquality()
                    .equals(other.fieldName, fieldName)) &&
            (identical(other.attributeName, attributeName) ||
                const DeepCollectionEquality()
                    .equals(other.attributeName, attributeName)) &&
            (identical(other.defaultValue, defaultValue) ||
                const DeepCollectionEquality()
                    .equals(other.defaultValue, defaultValue)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fieldName) ^
      const DeepCollectionEquality().hash(attributeName) ^
      const DeepCollectionEquality().hash(defaultValue) ^
      runtimeType.hashCode;
}

extension $FwStandardDataFwDefaultAttributeExtension
    on FwStandardDataFwDefaultAttribute {
  FwStandardDataFwDefaultAttribute copyWith(
      {String? fieldName, String? attributeName, String? defaultValue}) {
    return FwStandardDataFwDefaultAttribute(
        fieldName: fieldName ?? this.fieldName,
        attributeName: attributeName ?? this.attributeName,
        defaultValue: defaultValue ?? this.defaultValue);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardDataFwReportLoader {
  FwStandardDataFwReportLoader({
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.dateFields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory FwStandardDataFwReportLoader.fromJson(Map<String, dynamic> json) =>
      _$FwStandardDataFwReportLoaderFromJson(json);

  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory = _$FwStandardDataFwReportLoaderFromJson;
  static const toJsonFactory = _$FwStandardDataFwReportLoaderToJson;
  Map<String, dynamic> toJson() => _$FwStandardDataFwReportLoaderToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardDataFwReportLoader &&
            (identical(other.printDate, printDate) ||
                const DeepCollectionEquality()
                    .equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) ||
                const DeepCollectionEquality()
                    .equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.printDateTime, printDateTime)) &&
            (identical(other.dateFields, dateFields) ||
                const DeepCollectionEquality()
                    .equals(other.dateFields, dateFields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $FwStandardDataFwReportLoaderExtension
    on FwStandardDataFwReportLoader {
  FwStandardDataFwReportLoader copyWith(
      {String? printDate,
      String? printTime,
      String? printDateTime,
      List<String>? dateFields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return FwStandardDataFwReportLoader(
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        dateFields: dateFields ?? this.dateFields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsBrowseRequest {
  FwStandardModelsBrowseRequest({
    this.miscfields,
    this.module,
    this.options,
    this.orderby,
    this.orderbydirection,
    this.top,
    this.pageno,
    this.pagesize,
    this.searchfieldoperators,
    this.searchfields,
    this.searchfieldvalues,
    this.searchfieldtypes,
    this.searchseparators,
    this.searchcondition,
    this.searchconjunctions,
    this.uniqueids,
    this.boundids,
    this.filterfields,
    this.activeview,
    this.emptyobject,
    this.forexcel,
    this.excelfields,
    this.totalfields,
    this.activeviewfields,
  });

  factory FwStandardModelsBrowseRequest.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsBrowseRequestFromJson(json);

  @JsonKey(name: 'miscfields', includeIfNull: false)
  final dynamic miscfields;
  @JsonKey(name: 'module', includeIfNull: false)
  final String? module;
  @JsonKey(name: 'options', includeIfNull: false)
  final dynamic options;
  @JsonKey(name: 'orderby', includeIfNull: false)
  final String? orderby;
  @JsonKey(name: 'orderbydirection', includeIfNull: false)
  final String? orderbydirection;
  @JsonKey(name: 'top', includeIfNull: false)
  final int? top;
  @JsonKey(name: 'pageno', includeIfNull: false)
  final int? pageno;
  @JsonKey(name: 'pagesize', includeIfNull: false)
  final int? pagesize;
  @JsonKey(
      name: 'searchfieldoperators',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? searchfieldoperators;
  @JsonKey(name: 'searchfields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfields;
  @JsonKey(
      name: 'searchfieldvalues', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfieldvalues;
  @JsonKey(
      name: 'searchfieldtypes', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchfieldtypes;
  @JsonKey(
      name: 'searchseparators', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchseparators;
  @JsonKey(
      name: 'searchcondition', includeIfNull: false, defaultValue: <String>[])
  final List<String>? searchcondition;
  @JsonKey(
      name: 'searchconjunctions',
      includeIfNull: false,
      defaultValue: <String>[])
  final List<String>? searchconjunctions;
  @JsonKey(name: 'uniqueids', includeIfNull: false)
  final dynamic uniqueids;
  @JsonKey(name: 'boundids', includeIfNull: false)
  final dynamic boundids;
  @JsonKey(name: 'filterfields', includeIfNull: false)
  final Object? filterfields;
  @JsonKey(name: 'activeview', includeIfNull: false)
  final String? activeview;
  @JsonKey(name: 'emptyobject', includeIfNull: false)
  final bool? emptyobject;
  @JsonKey(name: 'forexcel', includeIfNull: false)
  final bool? forexcel;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  @JsonKey(name: 'totalfields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? totalfields;
  @JsonKey(name: 'activeviewfields', includeIfNull: false)
  final Object? activeviewfields;
  static const fromJsonFactory = _$FwStandardModelsBrowseRequestFromJson;
  static const toJsonFactory = _$FwStandardModelsBrowseRequestToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsBrowseRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsBrowseRequest &&
            (identical(other.miscfields, miscfields) ||
                const DeepCollectionEquality()
                    .equals(other.miscfields, miscfields)) &&
            (identical(other.module, module) ||
                const DeepCollectionEquality().equals(other.module, module)) &&
            (identical(other.options, options) ||
                const DeepCollectionEquality()
                    .equals(other.options, options)) &&
            (identical(other.orderby, orderby) ||
                const DeepCollectionEquality()
                    .equals(other.orderby, orderby)) &&
            (identical(other.orderbydirection, orderbydirection) ||
                const DeepCollectionEquality()
                    .equals(other.orderbydirection, orderbydirection)) &&
            (identical(other.top, top) ||
                const DeepCollectionEquality().equals(other.top, top)) &&
            (identical(other.pageno, pageno) ||
                const DeepCollectionEquality().equals(other.pageno, pageno)) &&
            (identical(other.pagesize, pagesize) ||
                const DeepCollectionEquality()
                    .equals(other.pagesize, pagesize)) &&
            (identical(other.searchfieldoperators, searchfieldoperators) ||
                const DeepCollectionEquality().equals(
                    other.searchfieldoperators, searchfieldoperators)) &&
            (identical(other.searchfields, searchfields) ||
                const DeepCollectionEquality()
                    .equals(other.searchfields, searchfields)) &&
            (identical(other.searchfieldvalues, searchfieldvalues) ||
                const DeepCollectionEquality()
                    .equals(other.searchfieldvalues, searchfieldvalues)) &&
            (identical(other.searchfieldtypes, searchfieldtypes) ||
                const DeepCollectionEquality()
                    .equals(other.searchfieldtypes, searchfieldtypes)) &&
            (identical(other.searchseparators, searchseparators) ||
                const DeepCollectionEquality()
                    .equals(other.searchseparators, searchseparators)) &&
            (identical(other.searchcondition, searchcondition) ||
                const DeepCollectionEquality()
                    .equals(other.searchcondition, searchcondition)) &&
            (identical(other.searchconjunctions, searchconjunctions) ||
                const DeepCollectionEquality()
                    .equals(other.searchconjunctions, searchconjunctions)) &&
            (identical(other.uniqueids, uniqueids) ||
                const DeepCollectionEquality()
                    .equals(other.uniqueids, uniqueids)) &&
            (identical(other.boundids, boundids) ||
                const DeepCollectionEquality()
                    .equals(other.boundids, boundids)) &&
            (identical(other.filterfields, filterfields) ||
                const DeepCollectionEquality()
                    .equals(other.filterfields, filterfields)) &&
            (identical(other.activeview, activeview) ||
                const DeepCollectionEquality()
                    .equals(other.activeview, activeview)) &&
            (identical(other.emptyobject, emptyobject) ||
                const DeepCollectionEquality()
                    .equals(other.emptyobject, emptyobject)) &&
            (identical(other.forexcel, forexcel) ||
                const DeepCollectionEquality()
                    .equals(other.forexcel, forexcel)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)) &&
            (identical(other.totalfields, totalfields) ||
                const DeepCollectionEquality()
                    .equals(other.totalfields, totalfields)) &&
            (identical(other.activeviewfields, activeviewfields) || const DeepCollectionEquality().equals(other.activeviewfields, activeviewfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(miscfields) ^
      const DeepCollectionEquality().hash(module) ^
      const DeepCollectionEquality().hash(options) ^
      const DeepCollectionEquality().hash(orderby) ^
      const DeepCollectionEquality().hash(orderbydirection) ^
      const DeepCollectionEquality().hash(top) ^
      const DeepCollectionEquality().hash(pageno) ^
      const DeepCollectionEquality().hash(pagesize) ^
      const DeepCollectionEquality().hash(searchfieldoperators) ^
      const DeepCollectionEquality().hash(searchfields) ^
      const DeepCollectionEquality().hash(searchfieldvalues) ^
      const DeepCollectionEquality().hash(searchfieldtypes) ^
      const DeepCollectionEquality().hash(searchseparators) ^
      const DeepCollectionEquality().hash(searchcondition) ^
      const DeepCollectionEquality().hash(searchconjunctions) ^
      const DeepCollectionEquality().hash(uniqueids) ^
      const DeepCollectionEquality().hash(boundids) ^
      const DeepCollectionEquality().hash(filterfields) ^
      const DeepCollectionEquality().hash(activeview) ^
      const DeepCollectionEquality().hash(emptyobject) ^
      const DeepCollectionEquality().hash(forexcel) ^
      const DeepCollectionEquality().hash(excelfields) ^
      const DeepCollectionEquality().hash(totalfields) ^
      const DeepCollectionEquality().hash(activeviewfields) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsBrowseRequestExtension
    on FwStandardModelsBrowseRequest {
  FwStandardModelsBrowseRequest copyWith(
      {dynamic? miscfields,
      String? module,
      dynamic? options,
      String? orderby,
      String? orderbydirection,
      int? top,
      int? pageno,
      int? pagesize,
      List<String>? searchfieldoperators,
      List<String>? searchfields,
      List<String>? searchfieldvalues,
      List<String>? searchfieldtypes,
      List<String>? searchseparators,
      List<String>? searchcondition,
      List<String>? searchconjunctions,
      dynamic? uniqueids,
      dynamic? boundids,
      Object? filterfields,
      String? activeview,
      bool? emptyobject,
      bool? forexcel,
      List<FwStandardModelsCheckBoxListItem>? excelfields,
      List<String>? totalfields,
      Object? activeviewfields}) {
    return FwStandardModelsBrowseRequest(
        miscfields: miscfields ?? this.miscfields,
        module: module ?? this.module,
        options: options ?? this.options,
        orderby: orderby ?? this.orderby,
        orderbydirection: orderbydirection ?? this.orderbydirection,
        top: top ?? this.top,
        pageno: pageno ?? this.pageno,
        pagesize: pagesize ?? this.pagesize,
        searchfieldoperators: searchfieldoperators ?? this.searchfieldoperators,
        searchfields: searchfields ?? this.searchfields,
        searchfieldvalues: searchfieldvalues ?? this.searchfieldvalues,
        searchfieldtypes: searchfieldtypes ?? this.searchfieldtypes,
        searchseparators: searchseparators ?? this.searchseparators,
        searchcondition: searchcondition ?? this.searchcondition,
        searchconjunctions: searchconjunctions ?? this.searchconjunctions,
        uniqueids: uniqueids ?? this.uniqueids,
        boundids: boundids ?? this.boundids,
        filterfields: filterfields ?? this.filterfields,
        activeview: activeview ?? this.activeview,
        emptyobject: emptyobject ?? this.emptyobject,
        forexcel: forexcel ?? this.forexcel,
        excelfields: excelfields ?? this.excelfields,
        totalfields: totalfields ?? this.totalfields,
        activeviewfields: activeviewfields ?? this.activeviewfields);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsCheckBoxListItem {
  FwStandardModelsCheckBoxListItem({
    this.value,
    this.text,
    this.selected,
  });

  factory FwStandardModelsCheckBoxListItem.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsCheckBoxListItemFromJson(json);

  @JsonKey(name: 'value', includeIfNull: false)
  final String? value;
  @JsonKey(name: 'text', includeIfNull: false)
  final String? text;
  @JsonKey(name: 'selected', includeIfNull: false)
  final bool? selected;
  static const fromJsonFactory = _$FwStandardModelsCheckBoxListItemFromJson;
  static const toJsonFactory = _$FwStandardModelsCheckBoxListItemToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsCheckBoxListItemToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsCheckBoxListItem &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)) &&
            (identical(other.text, text) ||
                const DeepCollectionEquality().equals(other.text, text)) &&
            (identical(other.selected, selected) ||
                const DeepCollectionEquality()
                    .equals(other.selected, selected)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(value) ^
      const DeepCollectionEquality().hash(text) ^
      const DeepCollectionEquality().hash(selected) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsCheckBoxListItemExtension
    on FwStandardModelsCheckBoxListItem {
  FwStandardModelsCheckBoxListItem copyWith(
      {String? value, String? text, bool? selected}) {
    return FwStandardModelsCheckBoxListItem(
        value: value ?? this.value,
        text: text ?? this.text,
        selected: selected ?? this.selected);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwApiException {
  FwStandardModelsFwApiException({
    this.statusCode,
    this.message,
    this.stackTrace,
  });

  factory FwStandardModelsFwApiException.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsFwApiExceptionFromJson(json);

  @JsonKey(name: 'StatusCode', includeIfNull: false)
  final int? statusCode;
  @JsonKey(name: 'Message', includeIfNull: false)
  final String? message;
  @JsonKey(name: 'StackTrace', includeIfNull: false)
  final String? stackTrace;
  static const fromJsonFactory = _$FwStandardModelsFwApiExceptionFromJson;
  static const toJsonFactory = _$FwStandardModelsFwApiExceptionToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsFwApiExceptionToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwApiException &&
            (identical(other.statusCode, statusCode) ||
                const DeepCollectionEquality()
                    .equals(other.statusCode, statusCode)) &&
            (identical(other.message, message) ||
                const DeepCollectionEquality()
                    .equals(other.message, message)) &&
            (identical(other.stackTrace, stackTrace) ||
                const DeepCollectionEquality()
                    .equals(other.stackTrace, stackTrace)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(statusCode) ^
      const DeepCollectionEquality().hash(message) ^
      const DeepCollectionEquality().hash(stackTrace) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwApiExceptionExtension
    on FwStandardModelsFwApiException {
  FwStandardModelsFwApiException copyWith(
      {int? statusCode, String? message, String? stackTrace}) {
    return FwStandardModelsFwApiException(
        statusCode: statusCode ?? this.statusCode,
        message: message ?? this.message,
        stackTrace: stackTrace ?? this.stackTrace);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryFilter {
  FwStandardModelsFwQueryFilter({
    this.field,
    this.op,
    this.value,
  });

  factory FwStandardModelsFwQueryFilter.fromJson(Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryFilterFromJson(json);

  @JsonKey(name: 'Field', includeIfNull: false)
  final String? field;
  @JsonKey(name: 'Op', includeIfNull: false)
  final String? op;
  @JsonKey(name: 'Value', includeIfNull: false)
  final String? value;
  static const fromJsonFactory = _$FwStandardModelsFwQueryFilterFromJson;
  static const toJsonFactory = _$FwStandardModelsFwQueryFilterToJson;
  Map<String, dynamic> toJson() => _$FwStandardModelsFwQueryFilterToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryFilter &&
            (identical(other.field, field) ||
                const DeepCollectionEquality().equals(other.field, field)) &&
            (identical(other.op, op) ||
                const DeepCollectionEquality().equals(other.op, op)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(field) ^
      const DeepCollectionEquality().hash(op) ^
      const DeepCollectionEquality().hash(value) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryFilterExtension
    on FwStandardModelsFwQueryFilter {
  FwStandardModelsFwQueryFilter copyWith(
      {String? field, String? op, String? value}) {
    return FwStandardModelsFwQueryFilter(
        field: field ?? this.field,
        op: op ?? this.op,
        value: value ?? this.value);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic({
    this.items,
    this.pageNo,
    this.pageSize,
    this.totalItems,
    this.sort,
  });

  factory FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogicFromJson(
          json);

  @JsonKey(
      name: 'Items',
      includeIfNull: false,
      defaultValue: <WebApiModulesReportsSharedReportSettingsReportSettings>[])
  final List<WebApiModulesReportsSharedReportSettingsReportSettings>? items;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalItems', includeIfNull: false)
  final int? totalItems;
  @JsonKey(name: 'Sort', includeIfNull: false)
  final String? sort;
  static const fromJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogicFromJson;
  static const toJsonFactory =
      _$FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogicToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogicToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalItems, totalItems) ||
                const DeepCollectionEquality()
                    .equals(other.totalItems, totalItems)) &&
            (identical(other.sort, sort) ||
                const DeepCollectionEquality().equals(other.sort, sort)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalItems) ^
      const DeepCollectionEquality().hash(sort) ^
      runtimeType.hashCode;
}

extension $FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogicExtension
    on FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic {
  FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic
      copyWith(
          {List<WebApiModulesReportsSharedReportSettingsReportSettings>? items,
          int? pageNo,
          int? pageSize,
          int? totalItems,
          String? sort}) {
    return FwStandardModelsFwQueryResponseWebApiModulesReportsSharedReportSettingsReportSettingsLogic(
        items: items ?? this.items,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalItems: totalItems ?? this.totalItems,
        sort: sort ?? this.sort);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardModelsSelectedCheckBoxListItem {
  FwStandardModelsSelectedCheckBoxListItem({
    this.value,
  });

  factory FwStandardModelsSelectedCheckBoxListItem.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardModelsSelectedCheckBoxListItemFromJson(json);

  @JsonKey(name: 'value', includeIfNull: false)
  final String? value;
  static const fromJsonFactory =
      _$FwStandardModelsSelectedCheckBoxListItemFromJson;
  static const toJsonFactory = _$FwStandardModelsSelectedCheckBoxListItemToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardModelsSelectedCheckBoxListItemToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardModelsSelectedCheckBoxListItem &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(value) ^ runtimeType.hashCode;
}

extension $FwStandardModelsSelectedCheckBoxListItemExtension
    on FwStandardModelsSelectedCheckBoxListItem {
  FwStandardModelsSelectedCheckBoxListItem copyWith({String? value}) {
    return FwStandardModelsSelectedCheckBoxListItem(value: value ?? this.value);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardReportingFwReportEmailInfo {
  FwStandardReportingFwReportEmailInfo({
    this.from,
    this.to,
    this.cc,
    this.subject,
    this.body,
  });

  factory FwStandardReportingFwReportEmailInfo.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardReportingFwReportEmailInfoFromJson(json);

  @JsonKey(name: 'from', includeIfNull: false)
  final String? from;
  @JsonKey(name: 'to', includeIfNull: false)
  final String? to;
  @JsonKey(name: 'cc', includeIfNull: false)
  final String? cc;
  @JsonKey(name: 'subject', includeIfNull: false)
  final String? subject;
  @JsonKey(name: 'body', includeIfNull: false)
  final String? body;
  static const fromJsonFactory = _$FwStandardReportingFwReportEmailInfoFromJson;
  static const toJsonFactory = _$FwStandardReportingFwReportEmailInfoToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardReportingFwReportEmailInfoToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardReportingFwReportEmailInfo &&
            (identical(other.from, from) ||
                const DeepCollectionEquality().equals(other.from, from)) &&
            (identical(other.to, to) ||
                const DeepCollectionEquality().equals(other.to, to)) &&
            (identical(other.cc, cc) ||
                const DeepCollectionEquality().equals(other.cc, cc)) &&
            (identical(other.subject, subject) ||
                const DeepCollectionEquality()
                    .equals(other.subject, subject)) &&
            (identical(other.body, body) ||
                const DeepCollectionEquality().equals(other.body, body)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(from) ^
      const DeepCollectionEquality().hash(to) ^
      const DeepCollectionEquality().hash(cc) ^
      const DeepCollectionEquality().hash(subject) ^
      const DeepCollectionEquality().hash(body) ^
      runtimeType.hashCode;
}

extension $FwStandardReportingFwReportEmailInfoExtension
    on FwStandardReportingFwReportEmailInfo {
  FwStandardReportingFwReportEmailInfo copyWith(
      {String? from, String? to, String? cc, String? subject, String? body}) {
    return FwStandardReportingFwReportEmailInfo(
        from: from ?? this.from,
        to: to ?? this.to,
        cc: cc ?? this.cc,
        subject: subject ?? this.subject,
        body: body ?? this.body);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardReportingFwReportRenderRequest {
  FwStandardReportingFwReportRenderRequest({
    this.renderMode,
    this.parameters,
    this.email,
    this.downloadPdfAsAttachment,
    this.emailImageOptions,
  });

  factory FwStandardReportingFwReportRenderRequest.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardReportingFwReportRenderRequestFromJson(json);

  @JsonKey(name: 'renderMode', includeIfNull: false)
  final String? renderMode;
  @JsonKey(name: 'parameters', includeIfNull: false)
  final Object? parameters;
  @JsonKey(name: 'email', includeIfNull: false)
  final FwStandardReportingFwReportEmailInfo? email;
  @JsonKey(name: 'downloadPdfAsAttachment', includeIfNull: false)
  final bool? downloadPdfAsAttachment;
  @JsonKey(name: 'emailImageOptions', includeIfNull: false)
  final FwStandardReportingFwReportRenderRequestEmailImageOptions?
      emailImageOptions;
  static const fromJsonFactory =
      _$FwStandardReportingFwReportRenderRequestFromJson;
  static const toJsonFactory = _$FwStandardReportingFwReportRenderRequestToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardReportingFwReportRenderRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardReportingFwReportRenderRequest &&
            (identical(other.renderMode, renderMode) ||
                const DeepCollectionEquality()
                    .equals(other.renderMode, renderMode)) &&
            (identical(other.parameters, parameters) ||
                const DeepCollectionEquality()
                    .equals(other.parameters, parameters)) &&
            (identical(other.email, email) ||
                const DeepCollectionEquality().equals(other.email, email)) &&
            (identical(
                    other.downloadPdfAsAttachment, downloadPdfAsAttachment) ||
                const DeepCollectionEquality().equals(
                    other.downloadPdfAsAttachment, downloadPdfAsAttachment)) &&
            (identical(other.emailImageOptions, emailImageOptions) ||
                const DeepCollectionEquality()
                    .equals(other.emailImageOptions, emailImageOptions)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(renderMode) ^
      const DeepCollectionEquality().hash(parameters) ^
      const DeepCollectionEquality().hash(email) ^
      const DeepCollectionEquality().hash(downloadPdfAsAttachment) ^
      const DeepCollectionEquality().hash(emailImageOptions) ^
      runtimeType.hashCode;
}

extension $FwStandardReportingFwReportRenderRequestExtension
    on FwStandardReportingFwReportRenderRequest {
  FwStandardReportingFwReportRenderRequest copyWith(
      {String? renderMode,
      Object? parameters,
      FwStandardReportingFwReportEmailInfo? email,
      bool? downloadPdfAsAttachment,
      FwStandardReportingFwReportRenderRequestEmailImageOptions?
          emailImageOptions}) {
    return FwStandardReportingFwReportRenderRequest(
        renderMode: renderMode ?? this.renderMode,
        parameters: parameters ?? this.parameters,
        email: email ?? this.email,
        downloadPdfAsAttachment:
            downloadPdfAsAttachment ?? this.downloadPdfAsAttachment,
        emailImageOptions: emailImageOptions ?? this.emailImageOptions);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardReportingFwReportRenderRequestEmailImageOptions {
  FwStandardReportingFwReportRenderRequestEmailImageOptions({
    this.width,
    this.height,
  });

  factory FwStandardReportingFwReportRenderRequestEmailImageOptions.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardReportingFwReportRenderRequestEmailImageOptionsFromJson(json);

  @JsonKey(name: 'Width', includeIfNull: false)
  final int? width;
  @JsonKey(name: 'Height', includeIfNull: false)
  final int? height;
  static const fromJsonFactory =
      _$FwStandardReportingFwReportRenderRequestEmailImageOptionsFromJson;
  static const toJsonFactory =
      _$FwStandardReportingFwReportRenderRequestEmailImageOptionsToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardReportingFwReportRenderRequestEmailImageOptionsToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardReportingFwReportRenderRequestEmailImageOptions &&
            (identical(other.width, width) ||
                const DeepCollectionEquality().equals(other.width, width)) &&
            (identical(other.height, height) ||
                const DeepCollectionEquality().equals(other.height, height)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(width) ^
      const DeepCollectionEquality().hash(height) ^
      runtimeType.hashCode;
}

extension $FwStandardReportingFwReportRenderRequestEmailImageOptionsExtension
    on FwStandardReportingFwReportRenderRequestEmailImageOptions {
  FwStandardReportingFwReportRenderRequestEmailImageOptions copyWith(
      {int? width, int? height}) {
    return FwStandardReportingFwReportRenderRequestEmailImageOptions(
        width: width ?? this.width, height: height ?? this.height);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardReportingFwReportRenderResponse {
  FwStandardReportingFwReportRenderResponse({
    this.renderMode,
    this.htmlReportUrl,
    this.pdfReportUrl,
    this.consoleOutput,
  });

  factory FwStandardReportingFwReportRenderResponse.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardReportingFwReportRenderResponseFromJson(json);

  @JsonKey(name: 'renderMode', includeIfNull: false)
  final String? renderMode;
  @JsonKey(name: 'htmlReportUrl', includeIfNull: false)
  final String? htmlReportUrl;
  @JsonKey(name: 'pdfReportUrl', includeIfNull: false)
  final String? pdfReportUrl;
  @JsonKey(name: 'consoleOutput', includeIfNull: false)
  final String? consoleOutput;
  static const fromJsonFactory =
      _$FwStandardReportingFwReportRenderResponseFromJson;
  static const toJsonFactory =
      _$FwStandardReportingFwReportRenderResponseToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardReportingFwReportRenderResponseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardReportingFwReportRenderResponse &&
            (identical(other.renderMode, renderMode) ||
                const DeepCollectionEquality()
                    .equals(other.renderMode, renderMode)) &&
            (identical(other.htmlReportUrl, htmlReportUrl) ||
                const DeepCollectionEquality()
                    .equals(other.htmlReportUrl, htmlReportUrl)) &&
            (identical(other.pdfReportUrl, pdfReportUrl) ||
                const DeepCollectionEquality()
                    .equals(other.pdfReportUrl, pdfReportUrl)) &&
            (identical(other.consoleOutput, consoleOutput) ||
                const DeepCollectionEquality()
                    .equals(other.consoleOutput, consoleOutput)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(renderMode) ^
      const DeepCollectionEquality().hash(htmlReportUrl) ^
      const DeepCollectionEquality().hash(pdfReportUrl) ^
      const DeepCollectionEquality().hash(consoleOutput) ^
      runtimeType.hashCode;
}

extension $FwStandardReportingFwReportRenderResponseExtension
    on FwStandardReportingFwReportRenderResponse {
  FwStandardReportingFwReportRenderResponse copyWith(
      {String? renderMode,
      String? htmlReportUrl,
      String? pdfReportUrl,
      String? consoleOutput}) {
    return FwStandardReportingFwReportRenderResponse(
        renderMode: renderMode ?? this.renderMode,
        htmlReportUrl: htmlReportUrl ?? this.htmlReportUrl,
        pdfReportUrl: pdfReportUrl ?? this.pdfReportUrl,
        consoleOutput: consoleOutput ?? this.consoleOutput);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardSqlServerFwDateTime {
  FwStandardSqlServerFwDateTime({
    this.val,
  });

  factory FwStandardSqlServerFwDateTime.fromJson(Map<String, dynamic> json) =>
      _$FwStandardSqlServerFwDateTimeFromJson(json);

  @JsonKey(name: 'Val', includeIfNull: false)
  final String? val;
  static const fromJsonFactory = _$FwStandardSqlServerFwDateTimeFromJson;
  static const toJsonFactory = _$FwStandardSqlServerFwDateTimeToJson;
  Map<String, dynamic> toJson() => _$FwStandardSqlServerFwDateTimeToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardSqlServerFwDateTime &&
            (identical(other.val, val) ||
                const DeepCollectionEquality().equals(other.val, val)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(val) ^ runtimeType.hashCode;
}

extension $FwStandardSqlServerFwDateTimeExtension
    on FwStandardSqlServerFwDateTime {
  FwStandardSqlServerFwDateTime copyWith({String? val}) {
    return FwStandardSqlServerFwDateTime(val: val ?? this.val);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardSqlServerFwJsonDataTable {
  FwStandardSqlServerFwJsonDataTable({
    this.columnIndex,
    this.totals,
    this.columns,
    this.rows,
    this.pageNo,
    this.pageSize,
    this.totalPages,
    this.totalRows,
    this.dateFields,
    this.columnNameByIndex,
  });

  factory FwStandardSqlServerFwJsonDataTable.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardSqlServerFwJsonDataTableFromJson(json);

  @JsonKey(name: 'ColumnIndex', includeIfNull: false)
  final Object? columnIndex;
  @JsonKey(name: 'Totals', includeIfNull: false)
  final Object? totals;
  @JsonKey(
      name: 'Columns',
      includeIfNull: false,
      defaultValue: <FwStandardSqlServerFwJsonDataTableColumn>[])
  final List<FwStandardSqlServerFwJsonDataTableColumn>? columns;
  @JsonKey(name: 'Rows', includeIfNull: false, defaultValue: <List<Object>>[])
  final List<List<Object>>? rows;
  @JsonKey(name: 'PageNo', includeIfNull: false)
  final int? pageNo;
  @JsonKey(name: 'PageSize', includeIfNull: false)
  final int? pageSize;
  @JsonKey(name: 'TotalPages', includeIfNull: false)
  final int? totalPages;
  @JsonKey(name: 'TotalRows', includeIfNull: false)
  final int? totalRows;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(name: 'ColumnNameByIndex', includeIfNull: false)
  final Object? columnNameByIndex;
  static const fromJsonFactory = _$FwStandardSqlServerFwJsonDataTableFromJson;
  static const toJsonFactory = _$FwStandardSqlServerFwJsonDataTableToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardSqlServerFwJsonDataTableToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardSqlServerFwJsonDataTable &&
            (identical(other.columnIndex, columnIndex) ||
                const DeepCollectionEquality()
                    .equals(other.columnIndex, columnIndex)) &&
            (identical(other.totals, totals) ||
                const DeepCollectionEquality().equals(other.totals, totals)) &&
            (identical(other.columns, columns) ||
                const DeepCollectionEquality()
                    .equals(other.columns, columns)) &&
            (identical(other.rows, rows) ||
                const DeepCollectionEquality().equals(other.rows, rows)) &&
            (identical(other.pageNo, pageNo) ||
                const DeepCollectionEquality().equals(other.pageNo, pageNo)) &&
            (identical(other.pageSize, pageSize) ||
                const DeepCollectionEquality()
                    .equals(other.pageSize, pageSize)) &&
            (identical(other.totalPages, totalPages) ||
                const DeepCollectionEquality()
                    .equals(other.totalPages, totalPages)) &&
            (identical(other.totalRows, totalRows) ||
                const DeepCollectionEquality()
                    .equals(other.totalRows, totalRows)) &&
            (identical(other.dateFields, dateFields) ||
                const DeepCollectionEquality()
                    .equals(other.dateFields, dateFields)) &&
            (identical(other.columnNameByIndex, columnNameByIndex) ||
                const DeepCollectionEquality()
                    .equals(other.columnNameByIndex, columnNameByIndex)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(columnIndex) ^
      const DeepCollectionEquality().hash(totals) ^
      const DeepCollectionEquality().hash(columns) ^
      const DeepCollectionEquality().hash(rows) ^
      const DeepCollectionEquality().hash(pageNo) ^
      const DeepCollectionEquality().hash(pageSize) ^
      const DeepCollectionEquality().hash(totalPages) ^
      const DeepCollectionEquality().hash(totalRows) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(columnNameByIndex) ^
      runtimeType.hashCode;
}

extension $FwStandardSqlServerFwJsonDataTableExtension
    on FwStandardSqlServerFwJsonDataTable {
  FwStandardSqlServerFwJsonDataTable copyWith(
      {Object? columnIndex,
      Object? totals,
      List<FwStandardSqlServerFwJsonDataTableColumn>? columns,
      List<List<Object>>? rows,
      int? pageNo,
      int? pageSize,
      int? totalPages,
      int? totalRows,
      List<String>? dateFields,
      Object? columnNameByIndex}) {
    return FwStandardSqlServerFwJsonDataTable(
        columnIndex: columnIndex ?? this.columnIndex,
        totals: totals ?? this.totals,
        columns: columns ?? this.columns,
        rows: rows ?? this.rows,
        pageNo: pageNo ?? this.pageNo,
        pageSize: pageSize ?? this.pageSize,
        totalPages: totalPages ?? this.totalPages,
        totalRows: totalRows ?? this.totalRows,
        dateFields: dateFields ?? this.dateFields,
        columnNameByIndex: columnNameByIndex ?? this.columnNameByIndex);
  }
}

@JsonSerializable(explicitToJson: true)
class FwStandardSqlServerFwJsonDataTableColumn {
  FwStandardSqlServerFwJsonDataTableColumn({
    this.name,
    this.dataField,
    this.dataType,
    this.isUniqueId,
    this.isVisible,
  });

  factory FwStandardSqlServerFwJsonDataTableColumn.fromJson(
          Map<String, dynamic> json) =>
      _$FwStandardSqlServerFwJsonDataTableColumnFromJson(json);

  @JsonKey(name: 'Name', includeIfNull: false)
  final String? name;
  @JsonKey(name: 'DataField', includeIfNull: false)
  final String? dataField;
  @JsonKey(
      name: 'DataType',
      includeIfNull: false,
      toJson: fwStandardSqlServerFwDataTypesToJson,
      fromJson: fwStandardSqlServerFwDataTypesFromJson)
  final enums.FwStandardSqlServerFwDataTypes? dataType;
  @JsonKey(name: 'IsUniqueId', includeIfNull: false)
  final bool? isUniqueId;
  @JsonKey(name: 'IsVisible', includeIfNull: false)
  final bool? isVisible;
  static const fromJsonFactory =
      _$FwStandardSqlServerFwJsonDataTableColumnFromJson;
  static const toJsonFactory = _$FwStandardSqlServerFwJsonDataTableColumnToJson;
  Map<String, dynamic> toJson() =>
      _$FwStandardSqlServerFwJsonDataTableColumnToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is FwStandardSqlServerFwJsonDataTableColumn &&
            (identical(other.name, name) ||
                const DeepCollectionEquality().equals(other.name, name)) &&
            (identical(other.dataField, dataField) ||
                const DeepCollectionEquality()
                    .equals(other.dataField, dataField)) &&
            (identical(other.dataType, dataType) ||
                const DeepCollectionEquality()
                    .equals(other.dataType, dataType)) &&
            (identical(other.isUniqueId, isUniqueId) ||
                const DeepCollectionEquality()
                    .equals(other.isUniqueId, isUniqueId)) &&
            (identical(other.isVisible, isVisible) ||
                const DeepCollectionEquality()
                    .equals(other.isVisible, isVisible)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(name) ^
      const DeepCollectionEquality().hash(dataField) ^
      const DeepCollectionEquality().hash(dataType) ^
      const DeepCollectionEquality().hash(isUniqueId) ^
      const DeepCollectionEquality().hash(isVisible) ^
      runtimeType.hashCode;
}

extension $FwStandardSqlServerFwJsonDataTableColumnExtension
    on FwStandardSqlServerFwJsonDataTableColumn {
  FwStandardSqlServerFwJsonDataTableColumn copyWith(
      {String? name,
      String? dataField,
      enums.FwStandardSqlServerFwDataTypes? dataType,
      bool? isUniqueId,
      bool? isVisible}) {
    return FwStandardSqlServerFwJsonDataTableColumn(
        name: name ?? this.name,
        dataField: dataField ?? this.dataField,
        dataType: dataType ?? this.dataType,
        isUniqueId: isUniqueId ?? this.isUniqueId,
        isVisible: isVisible ?? this.isVisible);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiDataAppReportResponse {
  WebApiDataAppReportResponse({
    this.dataTable,
    this.dataObject,
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.customReportTemplate,
  });

  factory WebApiDataAppReportResponse.fromJson(Map<String, dynamic> json) =>
      _$WebApiDataAppReportResponseFromJson(json);

  @JsonKey(name: 'DataTable', includeIfNull: false)
  final FwStandardSqlServerFwJsonDataTable? dataTable;
  @JsonKey(name: 'DataObject', includeIfNull: false)
  final FwStandardDataFwReportLoader? dataObject;
  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'CustomReportTemplate', includeIfNull: false)
  final String? customReportTemplate;
  static const fromJsonFactory = _$WebApiDataAppReportResponseFromJson;
  static const toJsonFactory = _$WebApiDataAppReportResponseToJson;
  Map<String, dynamic> toJson() => _$WebApiDataAppReportResponseToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiDataAppReportResponse &&
            (identical(other.dataTable, dataTable) ||
                const DeepCollectionEquality()
                    .equals(other.dataTable, dataTable)) &&
            (identical(other.dataObject, dataObject) ||
                const DeepCollectionEquality()
                    .equals(other.dataObject, dataObject)) &&
            (identical(other.printDate, printDate) ||
                const DeepCollectionEquality()
                    .equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) ||
                const DeepCollectionEquality()
                    .equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.printDateTime, printDateTime)) &&
            (identical(other.customReportTemplate, customReportTemplate) ||
                const DeepCollectionEquality()
                    .equals(other.customReportTemplate, customReportTemplate)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(dataTable) ^
      const DeepCollectionEquality().hash(dataObject) ^
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(customReportTemplate) ^
      runtimeType.hashCode;
}

extension $WebApiDataAppReportResponseExtension on WebApiDataAppReportResponse {
  WebApiDataAppReportResponse copyWith(
      {FwStandardSqlServerFwJsonDataTable? dataTable,
      FwStandardDataFwReportLoader? dataObject,
      String? printDate,
      String? printTime,
      String? printDateTime,
      String? customReportTemplate}) {
    return WebApiDataAppReportResponse(
        dataTable: dataTable ?? this.dataTable,
        dataObject: dataObject ?? this.dataObject,
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        customReportTemplate:
            customReportTemplate ?? this.customReportTemplate);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest {
  WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest({
    this.asOfDate,
    this.officeLocationId,
    this.customerId,
    this.dealCsrId,
    this.dealTypeId,
    this.dealId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequestFromJson(
          json);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealCsrId', includeIfNull: false)
  final String? dealCsrId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealCsrId, dealCsrId) ||
                const DeepCollectionEquality()
                    .equals(other.dealCsrId, dealCsrId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealCsrId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequestExtension
    on WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest {
  WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest
      copyWith(
          {DateTime? asOfDate,
          String? officeLocationId,
          String? customerId,
          String? dealCsrId,
          String? dealTypeId,
          String? dealId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsAccountingReportsArAgingReportArAgingReportRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealCsrId: dealCsrId ?? this.dealCsrId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealId: dealId ?? this.dealId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest {
  WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.customerId,
    this.dealId,
    this.paymentTypeId,
    this.sortBy,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'PaymentTypeId', includeIfNull: false)
  final String? paymentTypeId;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.paymentTypeId, paymentTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.paymentTypeId, paymentTypeId)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(paymentTypeId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequestExtension
    on WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest {
  WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? customerId,
          String? dealId,
          String? paymentTypeId,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsAccountingReportsDailyReceiptsReportDailyReceiptsReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        paymentTypeId: paymentTypeId ?? this.paymentTypeId,
        sortBy: sortBy ?? this.sortBy,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest {
  WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.glAccountId,
    this.excludeGlAccountId,
    this.dealId,
    this.isSomeDetail,
    this.isFullDetail,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'GlAccountId', includeIfNull: false)
  final String? glAccountId;
  @JsonKey(name: 'ExcludeGlAccountId', includeIfNull: false)
  final String? excludeGlAccountId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'IsSomeDetail', includeIfNull: false)
  final bool? isSomeDetail;
  @JsonKey(name: 'IsFullDetail', includeIfNull: false)
  final bool? isFullDetail;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.glAccountId, glAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.glAccountId, glAccountId)) &&
            (identical(other.excludeGlAccountId, excludeGlAccountId) ||
                const DeepCollectionEquality()
                    .equals(other.excludeGlAccountId, excludeGlAccountId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.isSomeDetail, isSomeDetail) ||
                const DeepCollectionEquality()
                    .equals(other.isSomeDetail, isSomeDetail)) &&
            (identical(other.isFullDetail, isFullDetail) ||
                const DeepCollectionEquality()
                    .equals(other.isFullDetail, isFullDetail)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(glAccountId) ^
      const DeepCollectionEquality().hash(excludeGlAccountId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(isSomeDetail) ^
      const DeepCollectionEquality().hash(isFullDetail) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequestExtension
    on WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest {
  WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? glAccountId,
          String? excludeGlAccountId,
          String? dealId,
          bool? isSomeDetail,
          bool? isFullDetail,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsAccountingReportsGlDistributionReportGlDistributionReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        glAccountId: glAccountId ?? this.glAccountId,
        excludeGlAccountId: excludeGlAccountId ?? this.excludeGlAccountId,
        dealId: dealId ?? this.dealId,
        isSomeDetail: isSomeDetail ?? this.isSomeDetail,
        isFullDetail: isFullDetail ?? this.isFullDetail,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest {
  WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.officeLocationId,
    this.departmentId,
    this.agentId,
    this.customerId,
    this.dealId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequestExtension
    on WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest {
  WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          String? officeLocationId,
          String? departmentId,
          String? agentId,
          String? customerId,
          String? dealId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingAgentBillingReportAgentBillingReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest {
  WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.officeLocationId,
    this.customerId,
    this.dealId,
    this.projectId,
    this.agentId,
    this.status,
    this.includeFilter,
    this.includeTaxFilter,
    this.excludeOrdersBilledInTotal,
    this.includeProjectStatus,
    this.includeCreditsInvoiced,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'ProjectId', includeIfNull: false)
  final String? projectId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(
      name: 'Status',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? status;
  @JsonKey(
      name: 'IncludeFilter',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? includeFilter;
  @JsonKey(
      name: 'IncludeTaxFilter',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? includeTaxFilter;
  @JsonKey(name: 'ExcludeOrdersBilledInTotal', includeIfNull: false)
  final bool? excludeOrdersBilledInTotal;
  @JsonKey(name: 'IncludeProjectStatus', includeIfNull: false)
  final bool? includeProjectStatus;
  @JsonKey(name: 'IncludeCreditsInvoiced', includeIfNull: false)
  final bool? includeCreditsInvoiced;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.projectId, projectId) ||
                const DeepCollectionEquality()
                    .equals(other.projectId, projectId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.includeFilter, includeFilter) ||
                const DeepCollectionEquality()
                    .equals(other.includeFilter, includeFilter)) &&
            (identical(other.includeTaxFilter, includeTaxFilter) ||
                const DeepCollectionEquality()
                    .equals(other.includeTaxFilter, includeTaxFilter)) &&
            (identical(other.excludeOrdersBilledInTotal, excludeOrdersBilledInTotal) ||
                const DeepCollectionEquality().equals(
                    other.excludeOrdersBilledInTotal,
                    excludeOrdersBilledInTotal)) &&
            (identical(other.includeProjectStatus, includeProjectStatus) ||
                const DeepCollectionEquality().equals(
                    other.includeProjectStatus, includeProjectStatus)) &&
            (identical(other.includeCreditsInvoiced, includeCreditsInvoiced) ||
                const DeepCollectionEquality().equals(
                    other.includeCreditsInvoiced, includeCreditsInvoiced)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(projectId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(includeFilter) ^
      const DeepCollectionEquality().hash(includeTaxFilter) ^
      const DeepCollectionEquality().hash(excludeOrdersBilledInTotal) ^
      const DeepCollectionEquality().hash(includeProjectStatus) ^
      const DeepCollectionEquality().hash(includeCreditsInvoiced) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequestExtension
    on WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest {
  WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          String? officeLocationId,
          String? customerId,
          String? dealId,
          String? projectId,
          String? agentId,
          List<FwStandardModelsSelectedCheckBoxListItem>? status,
          List<FwStandardModelsSelectedCheckBoxListItem>? includeFilter,
          List<FwStandardModelsSelectedCheckBoxListItem>? includeTaxFilter,
          bool? excludeOrdersBilledInTotal,
          bool? includeProjectStatus,
          bool? includeCreditsInvoiced,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingBillingAnalysisReportBillingAnalysisReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        projectId: projectId ?? this.projectId,
        agentId: agentId ?? this.agentId,
        status: status ?? this.status,
        includeFilter: includeFilter ?? this.includeFilter,
        includeTaxFilter: includeTaxFilter ?? this.includeTaxFilter,
        excludeOrdersBilledInTotal:
            excludeOrdersBilledInTotal ?? this.excludeOrdersBilledInTotal,
        includeProjectStatus: includeProjectStatus ?? this.includeProjectStatus,
        includeCreditsInvoiced:
            includeCreditsInvoiced ?? this.includeCreditsInvoiced,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest {
  WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest({
    this.asOfDate,
    this.statuses,
    this.includeCredits,
    this.excludeBilled100,
    this.officeLocationId,
    this.departmentId,
    this.dealCsrId,
    this.customerId,
    this.dealTypeId,
    this.dealId,
    this.agentId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequestFromJson(
          json);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'IncludeCredits', includeIfNull: false)
  final bool? includeCredits;
  @JsonKey(name: 'ExcludeBilled100', includeIfNull: false)
  final bool? excludeBilled100;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealCsrId', includeIfNull: false)
  final String? dealCsrId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.includeCredits, includeCredits) ||
                const DeepCollectionEquality()
                    .equals(other.includeCredits, includeCredits)) &&
            (identical(other.excludeBilled100, excludeBilled100) ||
                const DeepCollectionEquality()
                    .equals(other.excludeBilled100, excludeBilled100)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealCsrId, dealCsrId) ||
                const DeepCollectionEquality()
                    .equals(other.dealCsrId, dealCsrId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(includeCredits) ^
      const DeepCollectionEquality().hash(excludeBilled100) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealCsrId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequestExtension
    on WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest {
  WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest
      copyWith(
          {DateTime? asOfDate,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          bool? includeCredits,
          bool? excludeBilled100,
          String? officeLocationId,
          String? departmentId,
          String? dealCsrId,
          String? customerId,
          String? dealTypeId,
          String? dealId,
          String? agentId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingBillingProgressReportBillingProgressReportRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        statuses: statuses ?? this.statuses,
        includeCredits: includeCredits ?? this.includeCredits,
        excludeBilled100: excludeBilled100 ?? this.excludeBilled100,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        dealCsrId: dealCsrId ?? this.dealCsrId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealId: dealId ?? this.dealId,
        agentId: agentId ?? this.agentId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest {
  WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest({
    this.fromDate,
    this.toDate,
    this.includeNoCharge,
    this.includePaidInvoices,
    this.includeZeroBalance,
    this.paymentsThroughToday,
    this.officeLocationId,
    this.dealStatusId,
    this.dealTypeId,
    this.customerId,
    this.dealId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'IncludePaidInvoices', includeIfNull: false)
  final bool? includePaidInvoices;
  @JsonKey(name: 'IncludeZeroBalance', includeIfNull: false)
  final bool? includeZeroBalance;
  @JsonKey(name: 'PaymentsThroughToday', includeIfNull: false)
  final bool? paymentsThroughToday;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DealStatusId', includeIfNull: false)
  final String? dealStatusId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.includePaidInvoices, includePaidInvoices) ||
                const DeepCollectionEquality()
                    .equals(other.includePaidInvoices, includePaidInvoices)) &&
            (identical(other.includeZeroBalance, includeZeroBalance) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroBalance, includeZeroBalance)) &&
            (identical(other.paymentsThroughToday, paymentsThroughToday) ||
                const DeepCollectionEquality().equals(
                    other.paymentsThroughToday, paymentsThroughToday)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.dealStatusId, dealStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.dealStatusId, dealStatusId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(includePaidInvoices) ^
      const DeepCollectionEquality().hash(includeZeroBalance) ^
      const DeepCollectionEquality().hash(paymentsThroughToday) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(dealStatusId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequestExtension
    on WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest {
  WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? includeNoCharge,
          bool? includePaidInvoices,
          bool? includeZeroBalance,
          bool? paymentsThroughToday,
          String? officeLocationId,
          String? dealStatusId,
          String? dealTypeId,
          String? customerId,
          String? dealId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingBillingStatementReportBillingStatementReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        includePaidInvoices: includePaidInvoices ?? this.includePaidInvoices,
        includeZeroBalance: includeZeroBalance ?? this.includeZeroBalance,
        paymentsThroughToday: paymentsThroughToday ?? this.paymentsThroughToday,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        dealStatusId: dealStatusId ?? this.dealStatusId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest {
  WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest({
    this.invoiceCreationBatchId,
    this.exceptionsOnly,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequestFromJson(
          json);

  @JsonKey(name: 'InvoiceCreationBatchId', includeIfNull: false)
  final String? invoiceCreationBatchId;
  @JsonKey(name: 'ExceptionsOnly', includeIfNull: false)
  final bool? exceptionsOnly;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest &&
            (identical(other.invoiceCreationBatchId, invoiceCreationBatchId) ||
                const DeepCollectionEquality().equals(
                    other.invoiceCreationBatchId, invoiceCreationBatchId)) &&
            (identical(other.exceptionsOnly, exceptionsOnly) ||
                const DeepCollectionEquality()
                    .equals(other.exceptionsOnly, exceptionsOnly)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invoiceCreationBatchId) ^
      const DeepCollectionEquality().hash(exceptionsOnly) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequestExtension
    on WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest {
  WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest
      copyWith(
          {String? invoiceCreationBatchId,
          bool? exceptionsOnly,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingCreateInvoiceProcessReportCreateInvoiceProcessReportRequest(
        invoiceCreationBatchId:
            invoiceCreationBatchId ?? this.invoiceCreationBatchId,
        exceptionsOnly: exceptionsOnly ?? this.exceptionsOnly,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest {
  WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.discountPercent,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.discountReasonId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'DiscountPercent', includeIfNull: false)
  final int? discountPercent;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'DiscountReasonId', includeIfNull: false)
  final String? discountReasonId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.discountPercent, discountPercent) ||
                const DeepCollectionEquality()
                    .equals(other.discountPercent, discountPercent)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.discountReasonId, discountReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.discountReasonId, discountReasonId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(discountPercent) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(discountReasonId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequestExtension
    on WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest {
  WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          int? discountPercent,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? discountReasonId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingInvoiceDiscountReportInvoiceDiscountReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        discountPercent: discountPercent ?? this.discountPercent,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        discountReasonId: discountReasonId ?? this.discountReasonId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest {
  WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest({
    this.invoiceId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingInvoiceReportInvoiceReportRequestFromJson(
          json);

  @JsonKey(name: 'InvoiceId', includeIfNull: false)
  final String? invoiceId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingInvoiceReportInvoiceReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingInvoiceReportInvoiceReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingInvoiceReportInvoiceReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest &&
            (identical(other.invoiceId, invoiceId) ||
                const DeepCollectionEquality()
                    .equals(other.invoiceId, invoiceId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(invoiceId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingInvoiceReportInvoiceReportRequestExtension
    on WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest {
  WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest copyWith(
      {String? invoiceId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingInvoiceReportInvoiceReportRequest(
        invoiceId: invoiceId ?? this.invoiceId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest {
  WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.statuses,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequestExtension
    on WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest {
  WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingInvoiceSummaryReportInvoiceSummaryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        statuses: statuses ?? this.statuses,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest {
  WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest({
    this.fromDate,
    this.toDate,
    this.dateField,
    this.officeLocationId,
    this.departmentId,
    this.agentId,
    this.customerId,
    this.dealId,
    this.orderId,
    this.statuses,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingProfitLossReportProfitLossReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateField', includeIfNull: false)
  final String? dateField;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingProfitLossReportProfitLossReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingProfitLossReportProfitLossReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingProfitLossReportProfitLossReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateField, dateField) ||
                const DeepCollectionEquality()
                    .equals(other.dateField, dateField)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateField) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingProfitLossReportProfitLossReportRequestExtension
    on WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest {
  WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest copyWith(
      {DateTime? fromDate,
      DateTime? toDate,
      String? dateField,
      String? officeLocationId,
      String? departmentId,
      String? agentId,
      String? customerId,
      String? dealId,
      String? orderId,
      List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingProfitLossReportProfitLossReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateField: dateField ?? this.dateField,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        statuses: statuses ?? this.statuses,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest {
  WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.officeLocationId,
    this.departmentId,
    this.projectManagerId,
    this.customerId,
    this.dealId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'ProjectManagerId', includeIfNull: false)
  final String? projectManagerId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.projectManagerId, projectManagerId) ||
                const DeepCollectionEquality()
                    .equals(other.projectManagerId, projectManagerId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(projectManagerId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequestExtension
    on WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest {
  WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          String? officeLocationId,
          String? departmentId,
          String? projectManagerId,
          String? customerId,
          String? dealId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingProjectManagerBillingReportProjectManagerBillingReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        projectManagerId: projectManagerId ?? this.projectManagerId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest {
  WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest({
    this.fromDate,
    this.toDate,
    this.dateField,
    this.officeLocationId,
    this.agentId,
    this.dealId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateField', includeIfNull: false)
  final String? dateField;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateField, dateField) ||
                const DeepCollectionEquality()
                    .equals(other.dateField, dateField)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateField) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequestExtension
    on WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest {
  WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateField,
          String? officeLocationId,
          String? agentId,
          String? dealId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingSalesQuoteBillingReportSalesQuoteBillingReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateField: dateField ?? this.dateField,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        agentId: agentId ?? this.agentId,
        dealId: dealId ?? this.dealId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest {
  WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.officeLocationId,
    this.departmentId,
    this.salesRepresentativeId,
    this.customerId,
    this.dealId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'SalesRepresentativeId', includeIfNull: false)
  final String? salesRepresentativeId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.salesRepresentativeId, salesRepresentativeId) ||
                const DeepCollectionEquality().equals(
                    other.salesRepresentativeId, salesRepresentativeId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(salesRepresentativeId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequestExtension
    on WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest {
  WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          String? officeLocationId,
          String? departmentId,
          String? salesRepresentativeId,
          String? customerId,
          String? dealId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsBillingSalesRepresentativeBillingReportSalesRepresentativeBillingReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        salesRepresentativeId:
            salesRepresentativeId ?? this.salesRepresentativeId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest {
  WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest({
    this.fromDate,
    this.toDate,
    this.moduleName,
    this.webUsersId,
    this.keyword,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'ModuleName', includeIfNull: false)
  final String? moduleName;
  @JsonKey(name: 'WebUsersId', includeIfNull: false)
  final String? webUsersId;
  @JsonKey(name: 'Keyword', includeIfNull: false)
  final String? keyword;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.moduleName, moduleName) ||
                const DeepCollectionEquality()
                    .equals(other.moduleName, moduleName)) &&
            (identical(other.webUsersId, webUsersId) ||
                const DeepCollectionEquality()
                    .equals(other.webUsersId, webUsersId)) &&
            (identical(other.keyword, keyword) ||
                const DeepCollectionEquality()
                    .equals(other.keyword, keyword)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(moduleName) ^
      const DeepCollectionEquality().hash(webUsersId) ^
      const DeepCollectionEquality().hash(keyword) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequestExtension
    on WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest {
  WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? moduleName,
          String? webUsersId,
          String? keyword,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsChangeAuditReportsChangeAuditReportChangeAuditReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        moduleName: moduleName ?? this.moduleName,
        webUsersId: webUsersId ?? this.webUsersId,
        keyword: keyword ?? this.keyword,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest({
    this.batchId,
    this.batchNumber,
    this.batchDate,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequestFromJson(
          json);

  @JsonKey(name: 'BatchId', includeIfNull: false)
  final String? batchId;
  @JsonKey(name: 'BatchNumber', includeIfNull: false)
  final String? batchNumber;
  @JsonKey(name: 'BatchDate', includeIfNull: false)
  final DateTime? batchDate;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest &&
            (identical(other.batchId, batchId) ||
                const DeepCollectionEquality()
                    .equals(other.batchId, batchId)) &&
            (identical(other.batchNumber, batchNumber) ||
                const DeepCollectionEquality()
                    .equals(other.batchNumber, batchNumber)) &&
            (identical(other.batchDate, batchDate) ||
                const DeepCollectionEquality()
                    .equals(other.batchDate, batchDate)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batchId) ^
      const DeepCollectionEquality().hash(batchNumber) ^
      const DeepCollectionEquality().hash(batchDate) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequestExtension
    on WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest
      copyWith(
          {String? batchId,
          String? batchNumber,
          DateTime? batchDate,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsChargeProcessingReportsDealInvoiceBatchReportDealInvoiceBatchReportRequest(
        batchId: batchId ?? this.batchId,
        batchNumber: batchNumber ?? this.batchNumber,
        batchDate: batchDate ?? this.batchDate,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest({
    this.batchId,
    this.batchNumber,
    this.batchDate,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequestFromJson(
          json);

  @JsonKey(name: 'BatchId', includeIfNull: false)
  final String? batchId;
  @JsonKey(name: 'BatchNumber', includeIfNull: false)
  final String? batchNumber;
  @JsonKey(name: 'BatchDate', includeIfNull: false)
  final DateTime? batchDate;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest &&
            (identical(other.batchId, batchId) ||
                const DeepCollectionEquality()
                    .equals(other.batchId, batchId)) &&
            (identical(other.batchNumber, batchNumber) ||
                const DeepCollectionEquality()
                    .equals(other.batchNumber, batchNumber)) &&
            (identical(other.batchDate, batchDate) ||
                const DeepCollectionEquality()
                    .equals(other.batchDate, batchDate)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batchId) ^
      const DeepCollectionEquality().hash(batchNumber) ^
      const DeepCollectionEquality().hash(batchDate) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequestExtension
    on WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest
      copyWith(
          {String? batchId,
          String? batchNumber,
          DateTime? batchDate,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsChargeProcessingReportsReceiptBatchReportReceiptBatchReportRequest(
        batchId: batchId ?? this.batchId,
        batchNumber: batchNumber ?? this.batchNumber,
        batchDate: batchDate ?? this.batchDate,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest({
    this.batchId,
    this.batchNumber,
    this.batchDate,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequestFromJson(
          json);

  @JsonKey(name: 'BatchId', includeIfNull: false)
  final String? batchId;
  @JsonKey(name: 'BatchNumber', includeIfNull: false)
  final String? batchNumber;
  @JsonKey(name: 'BatchDate', includeIfNull: false)
  final DateTime? batchDate;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest &&
            (identical(other.batchId, batchId) ||
                const DeepCollectionEquality()
                    .equals(other.batchId, batchId)) &&
            (identical(other.batchNumber, batchNumber) ||
                const DeepCollectionEquality()
                    .equals(other.batchNumber, batchNumber)) &&
            (identical(other.batchDate, batchDate) ||
                const DeepCollectionEquality()
                    .equals(other.batchDate, batchDate)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(batchId) ^
      const DeepCollectionEquality().hash(batchNumber) ^
      const DeepCollectionEquality().hash(batchDate) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequestExtension
    on WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest {
  WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest
      copyWith(
          {String? batchId,
          String? batchNumber,
          DateTime? batchDate,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsChargeProcessingReportsVendorInvoiceBatchReportVendorInvoiceBatchReportRequest(
        batchId: batchId ?? this.batchId,
        batchNumber: batchNumber ?? this.batchNumber,
        batchDate: batchDate ?? this.batchDate,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest {
  WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest({
    this.fromDate,
    this.toDate,
    this.filterDates,
    this.daysChanged,
    this.officeLocationId,
    this.departmentId,
    this.userId,
    this.dealId,
    this.revisionTypes,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'FilterDates', includeIfNull: false)
  final bool? filterDates;
  @JsonKey(name: 'DaysChanged', includeIfNull: false)
  final int? daysChanged;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'UserId', includeIfNull: false)
  final String? userId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(
      name: 'RevisionTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? revisionTypes;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.filterDates, filterDates) ||
                const DeepCollectionEquality()
                    .equals(other.filterDates, filterDates)) &&
            (identical(other.daysChanged, daysChanged) ||
                const DeepCollectionEquality()
                    .equals(other.daysChanged, daysChanged)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.revisionTypes, revisionTypes) ||
                const DeepCollectionEquality()
                    .equals(other.revisionTypes, revisionTypes)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(filterDates) ^
      const DeepCollectionEquality().hash(daysChanged) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(revisionTypes) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequestExtension
    on WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest {
  WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? filterDates,
          int? daysChanged,
          String? officeLocationId,
          String? departmentId,
          String? userId,
          String? dealId,
          List<FwStandardModelsSelectedCheckBoxListItem>? revisionTypes,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsContractReportsContractRevisionReportContractRevisionReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        filterDates: filterDates ?? this.filterDates,
        daysChanged: daysChanged ?? this.daysChanged,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        userId: userId ?? this.userId,
        dealId: dealId ?? this.dealId,
        revisionTypes: revisionTypes ?? this.revisionTypes,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest {
  WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest({
    this.contractId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequestFromJson(
          json);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequestExtension
    on WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest {
  WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest
      copyWith(
          {String? contractId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsContractReportsExchangeContractReportExchangeContractReportRequest(
        contractId: contractId ?? this.contractId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsInContractReportInContractReportRequest {
  WebApiModulesReportsContractReportsInContractReportInContractReportRequest({
    this.contractId,
    this.appLanguageId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsContractReportsInContractReportInContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsInContractReportInContractReportRequestFromJson(
          json);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsInContractReportInContractReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsInContractReportInContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsInContractReportInContractReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsInContractReportInContractReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsInContractReportInContractReportRequestExtension
    on WebApiModulesReportsContractReportsInContractReportInContractReportRequest {
  WebApiModulesReportsContractReportsInContractReportInContractReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsContractReportsInContractReportInContractReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest {
  WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest({
    this.contractId,
    this.appLanguageId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsLostContractReportLostContractReportRequestFromJson(
          json);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsLostContractReportLostContractReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsLostContractReportLostContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsLostContractReportLostContractReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsLostContractReportLostContractReportRequestExtension
    on WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest {
  WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsContractReportsLostContractReportLostContractReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest {
  WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest({
    this.contractId,
    this.appLanguageId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsOutContractReportOutContractReportRequestFromJson(
          json);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsOutContractReportOutContractReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsOutContractReportOutContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsOutContractReportOutContractReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsOutContractReportOutContractReportRequestExtension
    on WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest {
  WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsContractReportsOutContractReportOutContractReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest {
  WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest({
    this.contractId,
    this.appLanguageId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequestFromJson(
          json);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequestExtension
    on WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest {
  WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsContractReportsReceiveContractReportReceiveContractReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest {
  WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest({
    this.contractId,
    this.appLanguageId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequestFromJson(
          json);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequestExtension
    on WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest {
  WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsContractReportsReturnContractReportReturnContractReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest {
  WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest({
    this.dealId,
    this.departmentId,
    this.orderId,
    this.sortBy,
    this.includeSales,
    this.warehouseId,
    this.contractId,
    this.orderIds,
    this.includeTrackedByBarcode,
    this.printBarcodes,
    this.paginateByInventoryType,
    this.addBoxforMeterReading,
    this.printICodeColumn,
    this.printAisleShelf,
    this.printOut,
    this.printIn,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsReturnListReportReturnListReportRequestFromJson(
          json);

  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'SortBy', includeIfNull: false)
  final String? sortBy;
  @JsonKey(name: 'IncludeSales', includeIfNull: false)
  final bool? includeSales;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'OrderIds', includeIfNull: false)
  final String? orderIds;
  @JsonKey(name: 'IncludeTrackedByBarcode', includeIfNull: false)
  final bool? includeTrackedByBarcode;
  @JsonKey(name: 'PrintBarcodes', includeIfNull: false)
  final bool? printBarcodes;
  @JsonKey(name: 'PaginateByInventoryType', includeIfNull: false)
  final bool? paginateByInventoryType;
  @JsonKey(name: 'AddBoxforMeterReading', includeIfNull: false)
  final bool? addBoxforMeterReading;
  @JsonKey(name: 'PrintICodeColumn', includeIfNull: false)
  final bool? printICodeColumn;
  @JsonKey(name: 'PrintAisleShelf', includeIfNull: false)
  final bool? printAisleShelf;
  @JsonKey(name: 'PrintOut', includeIfNull: false)
  final bool? printOut;
  @JsonKey(name: 'PrintIn', includeIfNull: false)
  final bool? printIn;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsReturnListReportReturnListReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsReturnListReportReturnListReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsReturnListReportReturnListReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.includeSales, includeSales) ||
                const DeepCollectionEquality()
                    .equals(other.includeSales, includeSales)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.orderIds, orderIds) ||
                const DeepCollectionEquality()
                    .equals(other.orderIds, orderIds)) &&
            (identical(other.includeTrackedByBarcode, includeTrackedByBarcode) ||
                const DeepCollectionEquality().equals(
                    other.includeTrackedByBarcode, includeTrackedByBarcode)) &&
            (identical(other.printBarcodes, printBarcodes) ||
                const DeepCollectionEquality()
                    .equals(other.printBarcodes, printBarcodes)) &&
            (identical(other.paginateByInventoryType, paginateByInventoryType) ||
                const DeepCollectionEquality().equals(
                    other.paginateByInventoryType, paginateByInventoryType)) &&
            (identical(other.addBoxforMeterReading, addBoxforMeterReading) ||
                const DeepCollectionEquality().equals(
                    other.addBoxforMeterReading, addBoxforMeterReading)) &&
            (identical(other.printICodeColumn, printICodeColumn) ||
                const DeepCollectionEquality()
                    .equals(other.printICodeColumn, printICodeColumn)) &&
            (identical(other.printAisleShelf, printAisleShelf) ||
                const DeepCollectionEquality()
                    .equals(other.printAisleShelf, printAisleShelf)) &&
            (identical(other.printOut, printOut) ||
                const DeepCollectionEquality()
                    .equals(other.printOut, printOut)) &&
            (identical(other.printIn, printIn) || const DeepCollectionEquality().equals(other.printIn, printIn)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(includeSales) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(orderIds) ^
      const DeepCollectionEquality().hash(includeTrackedByBarcode) ^
      const DeepCollectionEquality().hash(printBarcodes) ^
      const DeepCollectionEquality().hash(paginateByInventoryType) ^
      const DeepCollectionEquality().hash(addBoxforMeterReading) ^
      const DeepCollectionEquality().hash(printICodeColumn) ^
      const DeepCollectionEquality().hash(printAisleShelf) ^
      const DeepCollectionEquality().hash(printOut) ^
      const DeepCollectionEquality().hash(printIn) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsReturnListReportReturnListReportRequestExtension
    on WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest {
  WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest
      copyWith(
          {String? dealId,
          String? departmentId,
          String? orderId,
          String? sortBy,
          bool? includeSales,
          String? warehouseId,
          String? contractId,
          String? orderIds,
          bool? includeTrackedByBarcode,
          bool? printBarcodes,
          bool? paginateByInventoryType,
          bool? addBoxforMeterReading,
          bool? printICodeColumn,
          bool? printAisleShelf,
          bool? printOut,
          bool? printIn,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsContractReportsReturnListReportReturnListReportRequest(
        dealId: dealId ?? this.dealId,
        departmentId: departmentId ?? this.departmentId,
        orderId: orderId ?? this.orderId,
        sortBy: sortBy ?? this.sortBy,
        includeSales: includeSales ?? this.includeSales,
        warehouseId: warehouseId ?? this.warehouseId,
        contractId: contractId ?? this.contractId,
        orderIds: orderIds ?? this.orderIds,
        includeTrackedByBarcode:
            includeTrackedByBarcode ?? this.includeTrackedByBarcode,
        printBarcodes: printBarcodes ?? this.printBarcodes,
        paginateByInventoryType:
            paginateByInventoryType ?? this.paginateByInventoryType,
        addBoxforMeterReading:
            addBoxforMeterReading ?? this.addBoxforMeterReading,
        printICodeColumn: printICodeColumn ?? this.printICodeColumn,
        printAisleShelf: printAisleShelf ?? this.printAisleShelf,
        printOut: printOut ?? this.printOut,
        printIn: printIn ?? this.printIn,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest {
  WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest({
    this.contractId,
    this.appLanguageId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequestFromJson(
          json);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequestExtension
    on WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest {
  WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsContractReportsTransferManifestReportTransferManifestReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest {
  WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest({
    this.contractId,
    this.appLanguageId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequestFromJson(
          json);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequestExtension
    on WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest {
  WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest
      copyWith(
          {String? contractId,
          String? appLanguageId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsContractReportsTransferReceiptReportTransferReceiptReportRequest(
        contractId: contractId ?? this.contractId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest {
  WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.orderId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequestExtension
    on WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest {
  WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? orderId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsCrewReportsCrewSignInReportCrewSignInReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest {
  WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest({
    this.officeLocationId,
    this.customerId,
    this.dealId,
    this.onlyRemaining,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequestFromJson(
          json);

  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OnlyRemaining', includeIfNull: false)
  final bool? onlyRemaining;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.onlyRemaining, onlyRemaining) ||
                const DeepCollectionEquality()
                    .equals(other.onlyRemaining, onlyRemaining)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(onlyRemaining) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequestExtension
    on WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest {
  WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest
      copyWith(
          {String? officeLocationId,
          String? customerId,
          String? dealId,
          bool? onlyRemaining,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsDealReportsCreditsOnAccountReportCreditsOnAccountReportRequest(
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        onlyRemaining: onlyRemaining ?? this.onlyRemaining,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest {
  WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.departmentId,
    this.customerTypeId,
    this.customerId,
    this.dealTypeId,
    this.dealId,
    this.inventoryTypeId,
    this.revenueTypes,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerTypeId', includeIfNull: false)
  final String? customerTypeId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(
      name: 'RevenueTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? revenueTypes;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerTypeId, customerTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.customerTypeId, customerTypeId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.revenueTypes, revenueTypes) ||
                const DeepCollectionEquality()
                    .equals(other.revenueTypes, revenueTypes)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerTypeId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(revenueTypes) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequestExtension
    on WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest {
  WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? departmentId,
          String? customerTypeId,
          String? customerId,
          String? dealTypeId,
          String? dealId,
          String? inventoryTypeId,
          List<FwStandardModelsSelectedCheckBoxListItem>? revenueTypes,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsDealReportsCustomerRevenueByMonthReportCustomerRevenueByMonthReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerTypeId: customerTypeId ?? this.customerTypeId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealId: dealId ?? this.dealId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        revenueTypes: revenueTypes ?? this.revenueTypes,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest {
  WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealTypeId,
    this.dealId,
    this.orderTypeId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderTypeId', includeIfNull: false)
  final String? orderTypeId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderTypeId, orderTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeId, orderTypeId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderTypeId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequestExtension
    on WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest {
  WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealTypeId,
          String? dealId,
          String? orderTypeId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsDealReportsCustomerRevenueByTypeReportCustomerRevenueByTypeReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealId: dealId ?? this.dealId,
        orderTypeId: orderTypeId ?? this.orderTypeId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest {
  WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.deductVendorItemCost,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.noCharge,
    this.billedHiatus,
    this.billableFlat,
    this.statuses,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'DeductVendorItemCost', includeIfNull: false)
  final bool? deductVendorItemCost;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'NoCharge', includeIfNull: false)
  final String? noCharge;
  @JsonKey(name: 'BilledHiatus', includeIfNull: false)
  final String? billedHiatus;
  @JsonKey(name: 'BillableFlat', includeIfNull: false)
  final String? billableFlat;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.deductVendorItemCost, deductVendorItemCost) ||
                const DeepCollectionEquality().equals(
                    other.deductVendorItemCost, deductVendorItemCost)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.noCharge, noCharge) ||
                const DeepCollectionEquality()
                    .equals(other.noCharge, noCharge)) &&
            (identical(other.billedHiatus, billedHiatus) ||
                const DeepCollectionEquality()
                    .equals(other.billedHiatus, billedHiatus)) &&
            (identical(other.billableFlat, billableFlat) ||
                const DeepCollectionEquality()
                    .equals(other.billableFlat, billableFlat)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(deductVendorItemCost) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(noCharge) ^
      const DeepCollectionEquality().hash(billedHiatus) ^
      const DeepCollectionEquality().hash(billableFlat) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequestExtension
    on WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest {
  WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          bool? deductVendorItemCost,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? noCharge,
          String? billedHiatus,
          String? billableFlat,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsDealReportsDealInvoiceDetailReportDealInvoiceDetailReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        deductVendorItemCost: deductVendorItemCost ?? this.deductVendorItemCost,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        noCharge: noCharge ?? this.noCharge,
        billedHiatus: billedHiatus ?? this.billedHiatus,
        billableFlat: billableFlat ?? this.billableFlat,
        statuses: statuses ?? this.statuses,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest {
  WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeValueCost,
    this.filterDates,
    this.includeFullImages,
    this.includeThumbnailImages,
    this.excludePendingExchanges,
    this.includeContainersOnly,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.orderUnitId,
    this.orderTypeId,
    this.orderId,
    this.contractId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeValueCost', includeIfNull: false)
  final String? includeValueCost;
  @JsonKey(name: 'FilterDates', includeIfNull: false)
  final bool? filterDates;
  @JsonKey(name: 'IncludeFullImages', includeIfNull: false)
  final bool? includeFullImages;
  @JsonKey(name: 'IncludeThumbnailImages', includeIfNull: false)
  final bool? includeThumbnailImages;
  @JsonKey(name: 'ExcludePendingExchanges', includeIfNull: false)
  final bool? excludePendingExchanges;
  @JsonKey(name: 'IncludeContainersOnly', includeIfNull: false)
  final bool? includeContainersOnly;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderUnitId', includeIfNull: false)
  final String? orderUnitId;
  @JsonKey(name: 'OrderTypeId', includeIfNull: false)
  final String? orderTypeId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeValueCost, includeValueCost) ||
                const DeepCollectionEquality()
                    .equals(other.includeValueCost, includeValueCost)) &&
            (identical(other.filterDates, filterDates) ||
                const DeepCollectionEquality()
                    .equals(other.filterDates, filterDates)) &&
            (identical(other.includeFullImages, includeFullImages) ||
                const DeepCollectionEquality()
                    .equals(other.includeFullImages, includeFullImages)) &&
            (identical(other.includeThumbnailImages, includeThumbnailImages) ||
                const DeepCollectionEquality().equals(
                    other.includeThumbnailImages, includeThumbnailImages)) &&
            (identical(other.excludePendingExchanges, excludePendingExchanges) ||
                const DeepCollectionEquality().equals(
                    other.excludePendingExchanges, excludePendingExchanges)) &&
            (identical(other.includeContainersOnly, includeContainersOnly) ||
                const DeepCollectionEquality().equals(
                    other.includeContainersOnly, includeContainersOnly)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderUnitId, orderUnitId) ||
                const DeepCollectionEquality()
                    .equals(other.orderUnitId, orderUnitId)) &&
            (identical(other.orderTypeId, orderTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypeId, orderTypeId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality().equals(other.orderId, orderId)) &&
            (identical(other.contractId, contractId) || const DeepCollectionEquality().equals(other.contractId, contractId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) || const DeepCollectionEquality().equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) || const DeepCollectionEquality().equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) || const DeepCollectionEquality().equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) || const DeepCollectionEquality().equals(other.inventoryId, inventoryId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeValueCost) ^
      const DeepCollectionEquality().hash(filterDates) ^
      const DeepCollectionEquality().hash(includeFullImages) ^
      const DeepCollectionEquality().hash(includeThumbnailImages) ^
      const DeepCollectionEquality().hash(excludePendingExchanges) ^
      const DeepCollectionEquality().hash(includeContainersOnly) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderUnitId) ^
      const DeepCollectionEquality().hash(orderTypeId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequestExtension
    on WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest {
  WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          String? includeValueCost,
          bool? filterDates,
          bool? includeFullImages,
          bool? includeThumbnailImages,
          bool? excludePendingExchanges,
          bool? includeContainersOnly,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? orderUnitId,
          String? orderTypeId,
          String? orderId,
          String? contractId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsDealReportsDealOutstandingItemsReportDealOutstandingItemsReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeValueCost: includeValueCost ?? this.includeValueCost,
        filterDates: filterDates ?? this.filterDates,
        includeFullImages: includeFullImages ?? this.includeFullImages,
        includeThumbnailImages:
            includeThumbnailImages ?? this.includeThumbnailImages,
        excludePendingExchanges:
            excludePendingExchanges ?? this.excludePendingExchanges,
        includeContainersOnly:
            includeContainersOnly ?? this.includeContainersOnly,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderUnitId: orderUnitId ?? this.orderUnitId,
        orderTypeId: orderTypeId ?? this.orderTypeId,
        orderId: orderId ?? this.orderId,
        contractId: contractId ?? this.contractId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest {
  WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest({
    this.filterDatesOrderCreate,
    this.orderCreateFromDate,
    this.orderCreateToDate,
    this.filterDatesOrderStart,
    this.orderStartFromDate,
    this.orderStartToDate,
    this.filterDatesDealCredit,
    this.dealCreditFromDate,
    this.dealCreditToDate,
    this.filterDatesDealInsurance,
    this.dealInsuranceFromDate,
    this.dealInsuranceToDate,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealTypeId,
    this.dealStatusId,
    this.dealId,
    this.noCharge,
    this.orderType,
    this.quoteStatus,
    this.orderStatus,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequestFromJson(
          json);

  @JsonKey(name: 'FilterDatesOrderCreate', includeIfNull: false)
  final bool? filterDatesOrderCreate;
  @JsonKey(name: 'OrderCreateFromDate', includeIfNull: false)
  final DateTime? orderCreateFromDate;
  @JsonKey(name: 'OrderCreateToDate', includeIfNull: false)
  final DateTime? orderCreateToDate;
  @JsonKey(name: 'FilterDatesOrderStart', includeIfNull: false)
  final bool? filterDatesOrderStart;
  @JsonKey(name: 'OrderStartFromDate', includeIfNull: false)
  final DateTime? orderStartFromDate;
  @JsonKey(name: 'OrderStartToDate', includeIfNull: false)
  final DateTime? orderStartToDate;
  @JsonKey(name: 'FilterDatesDealCredit', includeIfNull: false)
  final bool? filterDatesDealCredit;
  @JsonKey(name: 'DealCreditFromDate', includeIfNull: false)
  final DateTime? dealCreditFromDate;
  @JsonKey(name: 'DealCreditToDate', includeIfNull: false)
  final DateTime? dealCreditToDate;
  @JsonKey(name: 'FilterDatesDealInsurance', includeIfNull: false)
  final bool? filterDatesDealInsurance;
  @JsonKey(name: 'DealInsuranceFromDate', includeIfNull: false)
  final DateTime? dealInsuranceFromDate;
  @JsonKey(name: 'DealInsuranceToDate', includeIfNull: false)
  final DateTime? dealInsuranceToDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealStatusId', includeIfNull: false)
  final String? dealStatusId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'NoCharge', includeIfNull: false)
  final String? noCharge;
  @JsonKey(
      name: 'OrderType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderType;
  @JsonKey(
      name: 'QuoteStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? quoteStatus;
  @JsonKey(
      name: 'OrderStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderStatus;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest &&
            (identical(other.filterDatesOrderCreate, filterDatesOrderCreate) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesOrderCreate, filterDatesOrderCreate)) &&
            (identical(other.orderCreateFromDate, orderCreateFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.orderCreateFromDate, orderCreateFromDate)) &&
            (identical(other.orderCreateToDate, orderCreateToDate) ||
                const DeepCollectionEquality()
                    .equals(other.orderCreateToDate, orderCreateToDate)) &&
            (identical(other.filterDatesOrderStart, filterDatesOrderStart) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesOrderStart, filterDatesOrderStart)) &&
            (identical(other.orderStartFromDate, orderStartFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.orderStartFromDate, orderStartFromDate)) &&
            (identical(other.orderStartToDate, orderStartToDate) ||
                const DeepCollectionEquality()
                    .equals(other.orderStartToDate, orderStartToDate)) &&
            (identical(other.filterDatesDealCredit, filterDatesDealCredit) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesDealCredit, filterDatesDealCredit)) &&
            (identical(other.dealCreditFromDate, dealCreditFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.dealCreditFromDate, dealCreditFromDate)) &&
            (identical(other.dealCreditToDate, dealCreditToDate) ||
                const DeepCollectionEquality()
                    .equals(other.dealCreditToDate, dealCreditToDate)) &&
            (identical(other.filterDatesDealInsurance, filterDatesDealInsurance) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesDealInsurance,
                    filterDatesDealInsurance)) &&
            (identical(other.dealInsuranceFromDate, dealInsuranceFromDate) ||
                const DeepCollectionEquality().equals(
                    other.dealInsuranceFromDate, dealInsuranceFromDate)) &&
            (identical(other.dealInsuranceToDate, dealInsuranceToDate) ||
                const DeepCollectionEquality()
                    .equals(other.dealInsuranceToDate, dealInsuranceToDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) || const DeepCollectionEquality().equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) || const DeepCollectionEquality().equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealStatusId, dealStatusId) || const DeepCollectionEquality().equals(other.dealStatusId, dealStatusId)) &&
            (identical(other.dealId, dealId) || const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.noCharge, noCharge) || const DeepCollectionEquality().equals(other.noCharge, noCharge)) &&
            (identical(other.orderType, orderType) || const DeepCollectionEquality().equals(other.orderType, orderType)) &&
            (identical(other.quoteStatus, quoteStatus) || const DeepCollectionEquality().equals(other.quoteStatus, quoteStatus)) &&
            (identical(other.orderStatus, orderStatus) || const DeepCollectionEquality().equals(other.orderStatus, orderStatus)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(filterDatesOrderCreate) ^
      const DeepCollectionEquality().hash(orderCreateFromDate) ^
      const DeepCollectionEquality().hash(orderCreateToDate) ^
      const DeepCollectionEquality().hash(filterDatesOrderStart) ^
      const DeepCollectionEquality().hash(orderStartFromDate) ^
      const DeepCollectionEquality().hash(orderStartToDate) ^
      const DeepCollectionEquality().hash(filterDatesDealCredit) ^
      const DeepCollectionEquality().hash(dealCreditFromDate) ^
      const DeepCollectionEquality().hash(dealCreditToDate) ^
      const DeepCollectionEquality().hash(filterDatesDealInsurance) ^
      const DeepCollectionEquality().hash(dealInsuranceFromDate) ^
      const DeepCollectionEquality().hash(dealInsuranceToDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealStatusId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(noCharge) ^
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(quoteStatus) ^
      const DeepCollectionEquality().hash(orderStatus) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequestExtension
    on WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest {
  WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest
      copyWith(
          {bool? filterDatesOrderCreate,
          DateTime? orderCreateFromDate,
          DateTime? orderCreateToDate,
          bool? filterDatesOrderStart,
          DateTime? orderStartFromDate,
          DateTime? orderStartToDate,
          bool? filterDatesDealCredit,
          DateTime? dealCreditFromDate,
          DateTime? dealCreditToDate,
          bool? filterDatesDealInsurance,
          DateTime? dealInsuranceFromDate,
          DateTime? dealInsuranceToDate,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealTypeId,
          String? dealStatusId,
          String? dealId,
          String? noCharge,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderType,
          List<FwStandardModelsSelectedCheckBoxListItem>? quoteStatus,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderStatus,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsDealReportsOrdersByDealReportOrdersByDealReportRequest(
        filterDatesOrderCreate:
            filterDatesOrderCreate ?? this.filterDatesOrderCreate,
        orderCreateFromDate: orderCreateFromDate ?? this.orderCreateFromDate,
        orderCreateToDate: orderCreateToDate ?? this.orderCreateToDate,
        filterDatesOrderStart:
            filterDatesOrderStart ?? this.filterDatesOrderStart,
        orderStartFromDate: orderStartFromDate ?? this.orderStartFromDate,
        orderStartToDate: orderStartToDate ?? this.orderStartToDate,
        filterDatesDealCredit:
            filterDatesDealCredit ?? this.filterDatesDealCredit,
        dealCreditFromDate: dealCreditFromDate ?? this.dealCreditFromDate,
        dealCreditToDate: dealCreditToDate ?? this.dealCreditToDate,
        filterDatesDealInsurance:
            filterDatesDealInsurance ?? this.filterDatesDealInsurance,
        dealInsuranceFromDate:
            dealInsuranceFromDate ?? this.dealInsuranceFromDate,
        dealInsuranceToDate: dealInsuranceToDate ?? this.dealInsuranceToDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealStatusId: dealStatusId ?? this.dealStatusId,
        dealId: dealId ?? this.dealId,
        noCharge: noCharge ?? this.noCharge,
        orderType: orderType ?? this.orderType,
        quoteStatus: quoteStatus ?? this.quoteStatus,
        orderStatus: orderStatus ?? this.orderStatus,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest {
  WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest({
    this.fromDate,
    this.toDate,
    this.onlyIncludeItemsStillUnassigned,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.categoryId,
    this.inventoryId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OnlyIncludeItemsStillUnassigned', includeIfNull: false)
  final bool? onlyIncludeItemsStillUnassigned;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.onlyIncludeItemsStillUnassigned, onlyIncludeItemsStillUnassigned) ||
                const DeepCollectionEquality().equals(
                    other.onlyIncludeItemsStillUnassigned,
                    onlyIncludeItemsStillUnassigned)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(onlyIncludeItemsStillUnassigned) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequestExtension
    on WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest {
  WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? onlyIncludeItemsStillUnassigned,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? categoryId,
          String? inventoryId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsDealReportsReturnReceiptReportReturnReceiptReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        onlyIncludeItemsStillUnassigned: onlyIncludeItemsStillUnassigned ??
            this.onlyIncludeItemsStillUnassigned,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest {
  WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest({
    this.asOfDate,
    this.ranks,
    this.trackedBys,
    this.excludeFullyDepreciated,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequestFromJson(
          json);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'ExcludeFullyDepreciated', includeIfNull: false)
  final bool? excludeFullyDepreciated;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.excludeFullyDepreciated, excludeFullyDepreciated) ||
                const DeepCollectionEquality().equals(
                    other.excludeFullyDepreciated, excludeFullyDepreciated)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(excludeFullyDepreciated) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequestExtension
    on WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest {
  WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest copyWith(
      {DateTime? asOfDate,
      List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
      List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
      bool? excludeFullyDepreciated,
      String? warehouseId,
      String? inventoryTypeId,
      String? categoryId,
      String? subCategoryId,
      String? inventoryId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsFixedAssetBookValueFixedAssetBookValueRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        excludeFullyDepreciated:
            excludeFullyDepreciated ?? this.excludeFullyDepreciated,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest {
  WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequestExtension
    on WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest {
  WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsFixedAssetDepreciationReportFixedAssetDepreciationReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest {
  WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest({
    this.inDeliveryId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequestFromJson(
          json);

  @JsonKey(name: 'InDeliveryId', includeIfNull: false)
  final String? inDeliveryId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest &&
            (identical(other.inDeliveryId, inDeliveryId) ||
                const DeepCollectionEquality()
                    .equals(other.inDeliveryId, inDeliveryId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(inDeliveryId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequestExtension
    on WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest {
  WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest
      copyWith(
          {String? inDeliveryId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsIncomingDeliveryInstructionsIncomingDeliveryInstructionsRequest(
        inDeliveryId: inDeliveryId ?? this.inDeliveryId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest {
  WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.transactionType,
    this.fixedAsset,
    this.ranks,
    this.trackedBys,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'TransactionType', includeIfNull: false)
  final String? transactionType;
  @JsonKey(
      name: 'FixedAsset',
      includeIfNull: false,
      toJson: webApiIncludeExcludeAllToJson,
      fromJson: webApiIncludeExcludeAllFromJson)
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.transactionType, transactionType) ||
                const DeepCollectionEquality()
                    .equals(other.transactionType, transactionType)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(transactionType) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequestExtension
    on WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest {
  WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? transactionType,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsInventoryChangeReportInventoryChangeReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        transactionType: transactionType ?? this.transactionType,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest {
  WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.fixedAsset,
    this.ranks,
    this.trackedBys,
    this.onwershipTypes,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'FixedAsset',
      includeIfNull: false,
      toJson: webApiIncludeExcludeAllToJson,
      fromJson: webApiIncludeExcludeAllFromJson)
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'OnwershipTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? onwershipTypes;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.onwershipTypes, onwershipTypes) ||
                const DeepCollectionEquality()
                    .equals(other.onwershipTypes, onwershipTypes)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(onwershipTypes) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequestExtension
    on WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest {
  WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          List<FwStandardModelsSelectedCheckBoxListItem>? onwershipTypes,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsInventoryRepairHistoryReportInventoryRepairHistoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        onwershipTypes: onwershipTypes ?? this.onwershipTypes,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest {
  WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.fromWarehouseId,
    this.toWarehouseId,
    this.departmentId,
    this.transferId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.statuses,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'FromWarehouseId', includeIfNull: false)
  final String? fromWarehouseId;
  @JsonKey(name: 'ToWarehouseId', includeIfNull: false)
  final String? toWarehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'TransferId', includeIfNull: false)
  final String? transferId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.fromWarehouseId, fromWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.fromWarehouseId, fromWarehouseId)) &&
            (identical(other.toWarehouseId, toWarehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.toWarehouseId, toWarehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.transferId, transferId) ||
                const DeepCollectionEquality()
                    .equals(other.transferId, transferId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(fromWarehouseId) ^
      const DeepCollectionEquality().hash(toWarehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(transferId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequestExtension
    on WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest {
  WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          String? fromWarehouseId,
          String? toWarehouseId,
          String? departmentId,
          String? transferId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsMultiLocationReportsTransferReportTransferReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        fromWarehouseId: fromWarehouseId ?? this.fromWarehouseId,
        toWarehouseId: toWarehouseId ?? this.toWarehouseId,
        departmentId: departmentId ?? this.departmentId,
        transferId: transferId ?? this.transferId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        statuses: statuses ?? this.statuses,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL {
  WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL({
    this.receiptId,
    this.rowType,
    this.dealNumber,
    this.dealDescription,
    this.depositAmount,
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.dateFields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealLFromJson(
          json);

  @JsonKey(name: 'ReceiptId', includeIfNull: false)
  final String? receiptId;
  @JsonKey(name: 'RowType', includeIfNull: false)
  final String? rowType;
  @JsonKey(name: 'DealNumber', includeIfNull: false)
  final String? dealNumber;
  @JsonKey(name: 'DealDescription', includeIfNull: false)
  final String? dealDescription;
  @JsonKey(name: 'DepositAmount', includeIfNull: false)
  final String? depositAmount;
  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealLFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealLToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealLToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL &&
            (identical(other.receiptId, receiptId) ||
                const DeepCollectionEquality()
                    .equals(other.receiptId, receiptId)) &&
            (identical(other.rowType, rowType) ||
                const DeepCollectionEquality()
                    .equals(other.rowType, rowType)) &&
            (identical(other.dealNumber, dealNumber) ||
                const DeepCollectionEquality()
                    .equals(other.dealNumber, dealNumber)) &&
            (identical(other.dealDescription, dealDescription) ||
                const DeepCollectionEquality()
                    .equals(other.dealDescription, dealDescription)) &&
            (identical(other.depositAmount, depositAmount) ||
                const DeepCollectionEquality()
                    .equals(other.depositAmount, depositAmount)) &&
            (identical(other.printDate, printDate) ||
                const DeepCollectionEquality()
                    .equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) ||
                const DeepCollectionEquality()
                    .equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.printDateTime, printDateTime)) &&
            (identical(other.dateFields, dateFields) ||
                const DeepCollectionEquality()
                    .equals(other.dateFields, dateFields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(receiptId) ^
      const DeepCollectionEquality().hash(rowType) ^
      const DeepCollectionEquality().hash(dealNumber) ^
      const DeepCollectionEquality().hash(dealDescription) ^
      const DeepCollectionEquality().hash(depositAmount) ^
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealLExtension
    on WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL {
  WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL
      copyWith(
          {String? receiptId,
          String? rowType,
          String? dealNumber,
          String? dealDescription,
          String? depositAmount,
          String? printDate,
          String? printTime,
          String? printDateTime,
          List<String>? dateFields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL(
        receiptId: receiptId ?? this.receiptId,
        rowType: rowType ?? this.rowType,
        dealNumber: dealNumber ?? this.dealNumber,
        dealDescription: dealDescription ?? this.dealDescription,
        depositAmount: depositAmount ?? this.depositAmount,
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        dateFields: dateFields ?? this.dateFields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL {
  WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL({
    this.rowType,
    this.arId,
    this.invoiceId,
    this.invoiceNumber,
    this.invoiceDate,
    this.orderNumber,
    this.orderDescription,
    this.invoiceTotal,
    this.applied,
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.dateFields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceLFromJson(
          json);

  @JsonKey(name: 'RowType', includeIfNull: false)
  final String? rowType;
  @JsonKey(name: 'ArId', includeIfNull: false)
  final String? arId;
  @JsonKey(name: 'InvoiceId', includeIfNull: false)
  final String? invoiceId;
  @JsonKey(name: 'InvoiceNumber', includeIfNull: false)
  final String? invoiceNumber;
  @JsonKey(name: 'InvoiceDate', includeIfNull: false)
  final String? invoiceDate;
  @JsonKey(name: 'OrderNumber', includeIfNull: false)
  final String? orderNumber;
  @JsonKey(name: 'OrderDescription', includeIfNull: false)
  final String? orderDescription;
  @JsonKey(name: 'InvoiceTotal', includeIfNull: false)
  final String? invoiceTotal;
  @JsonKey(name: 'Applied', includeIfNull: false)
  final String? applied;
  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceLFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceLToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceLToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL &&
            (identical(other.rowType, rowType) ||
                const DeepCollectionEquality()
                    .equals(other.rowType, rowType)) &&
            (identical(other.arId, arId) ||
                const DeepCollectionEquality().equals(other.arId, arId)) &&
            (identical(other.invoiceId, invoiceId) ||
                const DeepCollectionEquality()
                    .equals(other.invoiceId, invoiceId)) &&
            (identical(other.invoiceNumber, invoiceNumber) ||
                const DeepCollectionEquality()
                    .equals(other.invoiceNumber, invoiceNumber)) &&
            (identical(other.invoiceDate, invoiceDate) ||
                const DeepCollectionEquality()
                    .equals(other.invoiceDate, invoiceDate)) &&
            (identical(other.orderNumber, orderNumber) ||
                const DeepCollectionEquality()
                    .equals(other.orderNumber, orderNumber)) &&
            (identical(other.orderDescription, orderDescription) ||
                const DeepCollectionEquality()
                    .equals(other.orderDescription, orderDescription)) &&
            (identical(other.invoiceTotal, invoiceTotal) ||
                const DeepCollectionEquality()
                    .equals(other.invoiceTotal, invoiceTotal)) &&
            (identical(other.applied, applied) ||
                const DeepCollectionEquality()
                    .equals(other.applied, applied)) &&
            (identical(other.printDate, printDate) ||
                const DeepCollectionEquality()
                    .equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) ||
                const DeepCollectionEquality()
                    .equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.printDateTime, printDateTime)) &&
            (identical(other.dateFields, dateFields) ||
                const DeepCollectionEquality()
                    .equals(other.dateFields, dateFields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(rowType) ^
      const DeepCollectionEquality().hash(arId) ^
      const DeepCollectionEquality().hash(invoiceId) ^
      const DeepCollectionEquality().hash(invoiceNumber) ^
      const DeepCollectionEquality().hash(invoiceDate) ^
      const DeepCollectionEquality().hash(orderNumber) ^
      const DeepCollectionEquality().hash(orderDescription) ^
      const DeepCollectionEquality().hash(invoiceTotal) ^
      const DeepCollectionEquality().hash(applied) ^
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceLExtension
    on WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL {
  WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL
      copyWith(
          {String? rowType,
          String? arId,
          String? invoiceId,
          String? invoiceNumber,
          String? invoiceDate,
          String? orderNumber,
          String? orderDescription,
          String? invoiceTotal,
          String? applied,
          String? printDate,
          String? printTime,
          String? printDateTime,
          List<String>? dateFields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL(
        rowType: rowType ?? this.rowType,
        arId: arId ?? this.arId,
        invoiceId: invoiceId ?? this.invoiceId,
        invoiceNumber: invoiceNumber ?? this.invoiceNumber,
        invoiceDate: invoiceDate ?? this.invoiceDate,
        orderNumber: orderNumber ?? this.orderNumber,
        orderDescription: orderDescription ?? this.orderDescription,
        invoiceTotal: invoiceTotal ?? this.invoiceTotal,
        applied: applied ?? this.applied,
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        dateFields: dateFields ?? this.dateFields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL {
  WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL({
    this.receiptId,
    this.rowType,
    this.receiptDate,
    this.orderNumber,
    this.orderDescription,
    this.periodTotal,
    this.replacementCost,
    this.depositAmount,
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.dateFields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderLFromJson(
          json);

  @JsonKey(name: 'ReceiptId', includeIfNull: false)
  final String? receiptId;
  @JsonKey(name: 'RowType', includeIfNull: false)
  final String? rowType;
  @JsonKey(name: 'ReceiptDate', includeIfNull: false)
  final String? receiptDate;
  @JsonKey(name: 'OrderNumber', includeIfNull: false)
  final String? orderNumber;
  @JsonKey(name: 'OrderDescription', includeIfNull: false)
  final String? orderDescription;
  @JsonKey(name: 'PeriodTotal', includeIfNull: false)
  final String? periodTotal;
  @JsonKey(name: 'ReplacementCost', includeIfNull: false)
  final String? replacementCost;
  @JsonKey(name: 'DepositAmount', includeIfNull: false)
  final String? depositAmount;
  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderLFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderLToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderLToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL &&
            (identical(other.receiptId, receiptId) ||
                const DeepCollectionEquality()
                    .equals(other.receiptId, receiptId)) &&
            (identical(other.rowType, rowType) ||
                const DeepCollectionEquality()
                    .equals(other.rowType, rowType)) &&
            (identical(other.receiptDate, receiptDate) ||
                const DeepCollectionEquality()
                    .equals(other.receiptDate, receiptDate)) &&
            (identical(other.orderNumber, orderNumber) ||
                const DeepCollectionEquality()
                    .equals(other.orderNumber, orderNumber)) &&
            (identical(other.orderDescription, orderDescription) ||
                const DeepCollectionEquality()
                    .equals(other.orderDescription, orderDescription)) &&
            (identical(other.periodTotal, periodTotal) ||
                const DeepCollectionEquality()
                    .equals(other.periodTotal, periodTotal)) &&
            (identical(other.replacementCost, replacementCost) ||
                const DeepCollectionEquality()
                    .equals(other.replacementCost, replacementCost)) &&
            (identical(other.depositAmount, depositAmount) ||
                const DeepCollectionEquality()
                    .equals(other.depositAmount, depositAmount)) &&
            (identical(other.printDate, printDate) ||
                const DeepCollectionEquality()
                    .equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) ||
                const DeepCollectionEquality()
                    .equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.printDateTime, printDateTime)) &&
            (identical(other.dateFields, dateFields) ||
                const DeepCollectionEquality()
                    .equals(other.dateFields, dateFields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(receiptId) ^
      const DeepCollectionEquality().hash(rowType) ^
      const DeepCollectionEquality().hash(receiptDate) ^
      const DeepCollectionEquality().hash(orderNumber) ^
      const DeepCollectionEquality().hash(orderDescription) ^
      const DeepCollectionEquality().hash(periodTotal) ^
      const DeepCollectionEquality().hash(replacementCost) ^
      const DeepCollectionEquality().hash(depositAmount) ^
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderLExtension
    on WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL {
  WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL
      copyWith(
          {String? receiptId,
          String? rowType,
          String? receiptDate,
          String? orderNumber,
          String? orderDescription,
          String? periodTotal,
          String? replacementCost,
          String? depositAmount,
          String? printDate,
          String? printTime,
          String? printDateTime,
          List<String>? dateFields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL(
        receiptId: receiptId ?? this.receiptId,
        rowType: rowType ?? this.rowType,
        receiptDate: receiptDate ?? this.receiptDate,
        orderNumber: orderNumber ?? this.orderNumber,
        orderDescription: orderDescription ?? this.orderDescription,
        periodTotal: periodTotal ?? this.periodTotal,
        replacementCost: replacementCost ?? this.replacementCost,
        depositAmount: depositAmount ?? this.depositAmount,
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        dateFields: dateFields ?? this.dateFields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportL {
  WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportL({
    this.receiptId,
    this.receiptDate,
    this.locationId,
    this.locationCode,
    this.location,
    this.department,
    this.customerId,
    this.customer,
    this.dealId,
    this.deal,
    this.paymentBy,
    this.payTypeId,
    this.payType,
    this.paymentType,
    this.payTypeExportPaymentMethod,
    this.checkNumber,
    this.paymentAmount,
    this.appliedById,
    this.paymentMemo,
    this.recType,
    this.recTypeDisplay,
    this.currencyId,
    this.currencyCode,
    this.currencySymbol,
    this.locationDefaultCurrencyId,
    this.overPaymentId,
    this.orderId,
    this.authorizationCode,
    this.address1,
    this.address2,
    this.city,
    this.state,
    this.phone,
    this.zip,
    this.orderNo,
    this.orderDescription,
    this.reportType,
    this.orders,
    this.deals,
    this.invoices,
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.dateFields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportL.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportLFromJson(
          json);

  @JsonKey(name: 'ReceiptId', includeIfNull: false)
  final String? receiptId;
  @JsonKey(name: 'ReceiptDate', includeIfNull: false)
  final String? receiptDate;
  @JsonKey(name: 'LocationId', includeIfNull: false)
  final String? locationId;
  @JsonKey(name: 'LocationCode', includeIfNull: false)
  final String? locationCode;
  @JsonKey(name: 'Location', includeIfNull: false)
  final String? location;
  @JsonKey(name: 'Department', includeIfNull: false)
  final String? department;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'Customer', includeIfNull: false)
  final String? customer;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'Deal', includeIfNull: false)
  final String? deal;
  @JsonKey(name: 'PaymentBy', includeIfNull: false)
  final String? paymentBy;
  @JsonKey(name: 'PayTypeId', includeIfNull: false)
  final String? payTypeId;
  @JsonKey(name: 'PayType', includeIfNull: false)
  final String? payType;
  @JsonKey(name: 'PaymentType', includeIfNull: false)
  final String? paymentType;
  @JsonKey(name: 'PayTypeExportPaymentMethod', includeIfNull: false)
  final String? payTypeExportPaymentMethod;
  @JsonKey(name: 'CheckNumber', includeIfNull: false)
  final String? checkNumber;
  @JsonKey(name: 'PaymentAmount', includeIfNull: false)
  final String? paymentAmount;
  @JsonKey(name: 'AppliedById', includeIfNull: false)
  final String? appliedById;
  @JsonKey(name: 'PaymentMemo', includeIfNull: false)
  final String? paymentMemo;
  @JsonKey(name: 'RecType', includeIfNull: false)
  final bool? recType;
  @JsonKey(name: 'RecTypeDisplay', includeIfNull: false)
  final String? recTypeDisplay;
  @JsonKey(name: 'CurrencyId', includeIfNull: false)
  final String? currencyId;
  @JsonKey(name: 'CurrencyCode', includeIfNull: false)
  final String? currencyCode;
  @JsonKey(name: 'CurrencySymbol', includeIfNull: false)
  final bool? currencySymbol;
  @JsonKey(name: 'LocationDefaultCurrencyId', includeIfNull: false)
  final String? locationDefaultCurrencyId;
  @JsonKey(name: 'OverPaymentId', includeIfNull: false)
  final String? overPaymentId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'AuthorizationCode', includeIfNull: false)
  final String? authorizationCode;
  @JsonKey(name: 'Address1', includeIfNull: false)
  final String? address1;
  @JsonKey(name: 'Address2', includeIfNull: false)
  final String? address2;
  @JsonKey(name: 'City', includeIfNull: false)
  final String? city;
  @JsonKey(name: 'State', includeIfNull: false)
  final String? state;
  @JsonKey(name: 'Phone', includeIfNull: false)
  final String? phone;
  @JsonKey(name: 'Zip', includeIfNull: false)
  final String? zip;
  @JsonKey(name: 'OrderNo', includeIfNull: false)
  final String? orderNo;
  @JsonKey(name: 'OrderDescription', includeIfNull: false)
  final String? orderDescription;
  @JsonKey(name: 'ReportType', includeIfNull: false)
  final String? reportType;
  @JsonKey(name: 'Orders', includeIfNull: false, defaultValue: <
      WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL>[])
  final List<
          WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL>?
      orders;
  @JsonKey(name: 'Deals', includeIfNull: false, defaultValue: <
      WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL>[])
  final List<
          WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL>?
      deals;
  @JsonKey(name: 'Invoices', includeIfNull: false, defaultValue: <
      WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL>[])
  final List<
          WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL>?
      invoices;
  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportLFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportLToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportLToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportL &&
            (identical(other.receiptId, receiptId) ||
                const DeepCollectionEquality()
                    .equals(other.receiptId, receiptId)) &&
            (identical(other.receiptDate, receiptDate) ||
                const DeepCollectionEquality()
                    .equals(other.receiptDate, receiptDate)) &&
            (identical(other.locationId, locationId) ||
                const DeepCollectionEquality()
                    .equals(other.locationId, locationId)) &&
            (identical(other.locationCode, locationCode) ||
                const DeepCollectionEquality()
                    .equals(other.locationCode, locationCode)) &&
            (identical(other.location, location) ||
                const DeepCollectionEquality()
                    .equals(other.location, location)) &&
            (identical(other.department, department) ||
                const DeepCollectionEquality()
                    .equals(other.department, department)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.customer, customer) ||
                const DeepCollectionEquality()
                    .equals(other.customer, customer)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.deal, deal) ||
                const DeepCollectionEquality().equals(other.deal, deal)) &&
            (identical(other.paymentBy, paymentBy) ||
                const DeepCollectionEquality()
                    .equals(other.paymentBy, paymentBy)) &&
            (identical(other.payTypeId, payTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.payTypeId, payTypeId)) &&
            (identical(other.payType, payType) ||
                const DeepCollectionEquality()
                    .equals(other.payType, payType)) &&
            (identical(other.paymentType, paymentType) ||
                const DeepCollectionEquality()
                    .equals(other.paymentType, paymentType)) &&
            (identical(other.payTypeExportPaymentMethod, payTypeExportPaymentMethod) ||
                const DeepCollectionEquality().equals(
                    other.payTypeExportPaymentMethod,
                    payTypeExportPaymentMethod)) &&
            (identical(other.checkNumber, checkNumber) ||
                const DeepCollectionEquality()
                    .equals(other.checkNumber, checkNumber)) &&
            (identical(other.paymentAmount, paymentAmount) || const DeepCollectionEquality().equals(other.paymentAmount, paymentAmount)) &&
            (identical(other.appliedById, appliedById) || const DeepCollectionEquality().equals(other.appliedById, appliedById)) &&
            (identical(other.paymentMemo, paymentMemo) || const DeepCollectionEquality().equals(other.paymentMemo, paymentMemo)) &&
            (identical(other.recType, recType) || const DeepCollectionEquality().equals(other.recType, recType)) &&
            (identical(other.recTypeDisplay, recTypeDisplay) || const DeepCollectionEquality().equals(other.recTypeDisplay, recTypeDisplay)) &&
            (identical(other.currencyId, currencyId) || const DeepCollectionEquality().equals(other.currencyId, currencyId)) &&
            (identical(other.currencyCode, currencyCode) || const DeepCollectionEquality().equals(other.currencyCode, currencyCode)) &&
            (identical(other.currencySymbol, currencySymbol) || const DeepCollectionEquality().equals(other.currencySymbol, currencySymbol)) &&
            (identical(other.locationDefaultCurrencyId, locationDefaultCurrencyId) || const DeepCollectionEquality().equals(other.locationDefaultCurrencyId, locationDefaultCurrencyId)) &&
            (identical(other.overPaymentId, overPaymentId) || const DeepCollectionEquality().equals(other.overPaymentId, overPaymentId)) &&
            (identical(other.orderId, orderId) || const DeepCollectionEquality().equals(other.orderId, orderId)) &&
            (identical(other.authorizationCode, authorizationCode) || const DeepCollectionEquality().equals(other.authorizationCode, authorizationCode)) &&
            (identical(other.address1, address1) || const DeepCollectionEquality().equals(other.address1, address1)) &&
            (identical(other.address2, address2) || const DeepCollectionEquality().equals(other.address2, address2)) &&
            (identical(other.city, city) || const DeepCollectionEquality().equals(other.city, city)) &&
            (identical(other.state, state) || const DeepCollectionEquality().equals(other.state, state)) &&
            (identical(other.phone, phone) || const DeepCollectionEquality().equals(other.phone, phone)) &&
            (identical(other.zip, zip) || const DeepCollectionEquality().equals(other.zip, zip)) &&
            (identical(other.orderNo, orderNo) || const DeepCollectionEquality().equals(other.orderNo, orderNo)) &&
            (identical(other.orderDescription, orderDescription) || const DeepCollectionEquality().equals(other.orderDescription, orderDescription)) &&
            (identical(other.reportType, reportType) || const DeepCollectionEquality().equals(other.reportType, reportType)) &&
            (identical(other.orders, orders) || const DeepCollectionEquality().equals(other.orders, orders)) &&
            (identical(other.deals, deals) || const DeepCollectionEquality().equals(other.deals, deals)) &&
            (identical(other.invoices, invoices) || const DeepCollectionEquality().equals(other.invoices, invoices)) &&
            (identical(other.printDate, printDate) || const DeepCollectionEquality().equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) || const DeepCollectionEquality().equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) || const DeepCollectionEquality().equals(other.printDateTime, printDateTime)) &&
            (identical(other.dateFields, dateFields) || const DeepCollectionEquality().equals(other.dateFields, dateFields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(receiptId) ^
      const DeepCollectionEquality().hash(receiptDate) ^
      const DeepCollectionEquality().hash(locationId) ^
      const DeepCollectionEquality().hash(locationCode) ^
      const DeepCollectionEquality().hash(location) ^
      const DeepCollectionEquality().hash(department) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(customer) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(deal) ^
      const DeepCollectionEquality().hash(paymentBy) ^
      const DeepCollectionEquality().hash(payTypeId) ^
      const DeepCollectionEquality().hash(payType) ^
      const DeepCollectionEquality().hash(paymentType) ^
      const DeepCollectionEquality().hash(payTypeExportPaymentMethod) ^
      const DeepCollectionEquality().hash(checkNumber) ^
      const DeepCollectionEquality().hash(paymentAmount) ^
      const DeepCollectionEquality().hash(appliedById) ^
      const DeepCollectionEquality().hash(paymentMemo) ^
      const DeepCollectionEquality().hash(recType) ^
      const DeepCollectionEquality().hash(recTypeDisplay) ^
      const DeepCollectionEquality().hash(currencyId) ^
      const DeepCollectionEquality().hash(currencyCode) ^
      const DeepCollectionEquality().hash(currencySymbol) ^
      const DeepCollectionEquality().hash(locationDefaultCurrencyId) ^
      const DeepCollectionEquality().hash(overPaymentId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(authorizationCode) ^
      const DeepCollectionEquality().hash(address1) ^
      const DeepCollectionEquality().hash(address2) ^
      const DeepCollectionEquality().hash(city) ^
      const DeepCollectionEquality().hash(state) ^
      const DeepCollectionEquality().hash(phone) ^
      const DeepCollectionEquality().hash(zip) ^
      const DeepCollectionEquality().hash(orderNo) ^
      const DeepCollectionEquality().hash(orderDescription) ^
      const DeepCollectionEquality().hash(reportType) ^
      const DeepCollectionEquality().hash(orders) ^
      const DeepCollectionEquality().hash(deals) ^
      const DeepCollectionEquality().hash(invoices) ^
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportLExtension
    on WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportL {
  WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportL copyWith(
      {String? receiptId,
      String? receiptDate,
      String? locationId,
      String? locationCode,
      String? location,
      String? department,
      String? customerId,
      String? customer,
      String? dealId,
      String? deal,
      String? paymentBy,
      String? payTypeId,
      String? payType,
      String? paymentType,
      String? payTypeExportPaymentMethod,
      String? checkNumber,
      String? paymentAmount,
      String? appliedById,
      String? paymentMemo,
      bool? recType,
      String? recTypeDisplay,
      String? currencyId,
      String? currencyCode,
      bool? currencySymbol,
      String? locationDefaultCurrencyId,
      String? overPaymentId,
      String? orderId,
      String? authorizationCode,
      String? address1,
      String? address2,
      String? city,
      String? state,
      String? phone,
      String? zip,
      String? orderNo,
      String? orderDescription,
      String? reportType,
      List<WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportOrderL>?
          orders,
      List<WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportDealL>?
          deals,
      List<WebApiModulesReportsOrderDepletingDepositReceiptReportDepletingDepositReceiptReportInvoiceL>?
          invoices,
      String? printDate,
      String? printTime,
      String? printDateTime,
      List<String>? dateFields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportL(
        receiptId: receiptId ?? this.receiptId,
        receiptDate: receiptDate ?? this.receiptDate,
        locationId: locationId ?? this.locationId,
        locationCode: locationCode ?? this.locationCode,
        location: location ?? this.location,
        department: department ?? this.department,
        customerId: customerId ?? this.customerId,
        customer: customer ?? this.customer,
        dealId: dealId ?? this.dealId,
        deal: deal ?? this.deal,
        paymentBy: paymentBy ?? this.paymentBy,
        payTypeId: payTypeId ?? this.payTypeId,
        payType: payType ?? this.payType,
        paymentType: paymentType ?? this.paymentType,
        payTypeExportPaymentMethod:
            payTypeExportPaymentMethod ?? this.payTypeExportPaymentMethod,
        checkNumber: checkNumber ?? this.checkNumber,
        paymentAmount: paymentAmount ?? this.paymentAmount,
        appliedById: appliedById ?? this.appliedById,
        paymentMemo: paymentMemo ?? this.paymentMemo,
        recType: recType ?? this.recType,
        recTypeDisplay: recTypeDisplay ?? this.recTypeDisplay,
        currencyId: currencyId ?? this.currencyId,
        currencyCode: currencyCode ?? this.currencyCode,
        currencySymbol: currencySymbol ?? this.currencySymbol,
        locationDefaultCurrencyId:
            locationDefaultCurrencyId ?? this.locationDefaultCurrencyId,
        overPaymentId: overPaymentId ?? this.overPaymentId,
        orderId: orderId ?? this.orderId,
        authorizationCode: authorizationCode ?? this.authorizationCode,
        address1: address1 ?? this.address1,
        address2: address2 ?? this.address2,
        city: city ?? this.city,
        state: state ?? this.state,
        phone: phone ?? this.phone,
        zip: zip ?? this.zip,
        orderNo: orderNo ?? this.orderNo,
        orderDescription: orderDescription ?? this.orderDescription,
        reportType: reportType ?? this.reportType,
        orders: orders ?? this.orders,
        deals: deals ?? this.deals,
        invoices: invoices ?? this.invoices,
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        dateFields: dateFields ?? this.dateFields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequest {
  WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequest({
    this.receiptId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequestFromJson(
          json);

  @JsonKey(name: 'ReceiptId', includeIfNull: false)
  final String? receiptId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequest &&
            (identical(other.receiptId, receiptId) ||
                const DeepCollectionEquality()
                    .equals(other.receiptId, receiptId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(receiptId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequestExtension
    on WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequest {
  WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequest
      copyWith(
          {String? receiptId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderDepletingDepositReceiptReportReceiptReportRequest(
        receiptId: receiptId ?? this.receiptId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest {
  WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest({
    this.orderId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequestFromJson(
          json);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequestExtension
    on WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest {
  WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest
      copyWith(
          {String? orderId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsIncomingShippingLabelIncomingShippingLabelRequest(
        orderId: orderId ?? this.orderId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest {
  WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest({
    this.reportType,
    this.days,
    this.dueBackDate,
    this.officeLocationId,
    this.warehouseId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.inventoryTypeId,
    this.orderedByContactId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequestFromJson(
          json);

  @JsonKey(name: 'ReportType', includeIfNull: false)
  final String? reportType;
  @JsonKey(name: 'Days', includeIfNull: false)
  final int? days;
  @JsonKey(name: 'DueBackDate', includeIfNull: false)
  final DateTime? dueBackDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'OrderedByContactId', includeIfNull: false)
  final String? orderedByContactId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest &&
            (identical(other.reportType, reportType) ||
                const DeepCollectionEquality()
                    .equals(other.reportType, reportType)) &&
            (identical(other.days, days) ||
                const DeepCollectionEquality().equals(other.days, days)) &&
            (identical(other.dueBackDate, dueBackDate) ||
                const DeepCollectionEquality()
                    .equals(other.dueBackDate, dueBackDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.orderedByContactId, orderedByContactId) ||
                const DeepCollectionEquality()
                    .equals(other.orderedByContactId, orderedByContactId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(reportType) ^
      const DeepCollectionEquality().hash(days) ^
      const DeepCollectionEquality().hash(dueBackDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(orderedByContactId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequestExtension
    on WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest {
  WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest
      copyWith(
          {String? reportType,
          int? days,
          DateTime? dueBackDate,
          String? officeLocationId,
          String? warehouseId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? inventoryTypeId,
          String? orderedByContactId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsLateReturnsReportLateReturnsReportRequest(
        reportType: reportType ?? this.reportType,
        days: days ?? this.days,
        dueBackDate: dueBackDate ?? this.dueBackDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        orderedByContactId: orderedByContactId ?? this.orderedByContactId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest {
  WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest({
    this.fromDate,
    this.toDate,
    this.availableFor,
    this.conflictType,
    this.warehouseId,
    this.departmentId,
    this.dealId,
    this.orderId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.classifications,
    this.ranks,
    this.trackedBys,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'AvailableFor', includeIfNull: false)
  final String? availableFor;
  @JsonKey(name: 'ConflictType', includeIfNull: false)
  final String? conflictType;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Classifications',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? classifications;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.availableFor, availableFor) ||
                const DeepCollectionEquality()
                    .equals(other.availableFor, availableFor)) &&
            (identical(other.conflictType, conflictType) ||
                const DeepCollectionEquality()
                    .equals(other.conflictType, conflictType)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.classifications, classifications) ||
                const DeepCollectionEquality()
                    .equals(other.classifications, classifications)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(availableFor) ^
      const DeepCollectionEquality().hash(conflictType) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(classifications) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequestExtension
    on WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest {
  WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? availableFor,
          String? conflictType,
          String? warehouseId,
          String? departmentId,
          String? dealId,
          String? orderId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? classifications,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsOrderConflictReportOrderConflictReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        availableFor: availableFor ?? this.availableFor,
        conflictType: conflictType ?? this.conflictType,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        classifications: classifications ?? this.classifications,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOrderReportOrderReportRequest {
  WebApiModulesReportsOrderReportsOrderReportOrderReportRequest({
    this.orderId,
    this.reportView,
    this.printInventoryType,
    this.printCategory,
    this.printTotalReplacementCost,
    this.printInventoryTypeSubTotal,
    this.printCategorySubTotal,
    this.printZeroExtended,
    this.printLineItemNotes,
    this.printGrandTotal,
    this.printGrossTotal,
    this.printGrandDiscount,
    this.printGrandWeekly,
    this.printGrandPeriod,
    this.printActivityWeekly,
    this.printActivityPeriod,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsOrderReportOrderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOrderReportOrderReportRequestFromJson(
          json);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(
      name: 'ReportView',
      includeIfNull: false,
      toJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeToJson,
      fromJson:
          webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson)
  final enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
      reportView;
  @JsonKey(name: 'PrintInventoryType', includeIfNull: false)
  final bool? printInventoryType;
  @JsonKey(name: 'PrintCategory', includeIfNull: false)
  final bool? printCategory;
  @JsonKey(name: 'PrintTotalReplacementCost', includeIfNull: false)
  final bool? printTotalReplacementCost;
  @JsonKey(name: 'PrintInventoryTypeSubTotal', includeIfNull: false)
  final bool? printInventoryTypeSubTotal;
  @JsonKey(name: 'PrintCategorySubTotal', includeIfNull: false)
  final bool? printCategorySubTotal;
  @JsonKey(name: 'PrintZeroExtended', includeIfNull: false)
  final bool? printZeroExtended;
  @JsonKey(name: 'PrintLineItemNotes', includeIfNull: false)
  final bool? printLineItemNotes;
  @JsonKey(name: 'PrintGrandTotal', includeIfNull: false)
  final bool? printGrandTotal;
  @JsonKey(name: 'PrintGrossTotal', includeIfNull: false)
  final bool? printGrossTotal;
  @JsonKey(name: 'PrintGrandDiscount', includeIfNull: false)
  final bool? printGrandDiscount;
  @JsonKey(name: 'PrintGrandWeekly', includeIfNull: false)
  final bool? printGrandWeekly;
  @JsonKey(name: 'PrintGrandPeriod', includeIfNull: false)
  final bool? printGrandPeriod;
  @JsonKey(name: 'PrintActivityWeekly', includeIfNull: false)
  final bool? printActivityWeekly;
  @JsonKey(name: 'PrintActivityPeriod', includeIfNull: false)
  final bool? printActivityPeriod;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderReportOrderReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderReportOrderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOrderReportOrderReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOrderReportOrderReportRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.reportView, reportView) ||
                const DeepCollectionEquality()
                    .equals(other.reportView, reportView)) &&
            (identical(other.printInventoryType, printInventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.printInventoryType, printInventoryType)) &&
            (identical(other.printCategory, printCategory) ||
                const DeepCollectionEquality()
                    .equals(other.printCategory, printCategory)) &&
            (identical(other.printTotalReplacementCost, printTotalReplacementCost) ||
                const DeepCollectionEquality().equals(
                    other.printTotalReplacementCost,
                    printTotalReplacementCost)) &&
            (identical(other.printInventoryTypeSubTotal, printInventoryTypeSubTotal) ||
                const DeepCollectionEquality().equals(
                    other.printInventoryTypeSubTotal,
                    printInventoryTypeSubTotal)) &&
            (identical(other.printCategorySubTotal, printCategorySubTotal) ||
                const DeepCollectionEquality().equals(
                    other.printCategorySubTotal, printCategorySubTotal)) &&
            (identical(other.printZeroExtended, printZeroExtended) ||
                const DeepCollectionEquality()
                    .equals(other.printZeroExtended, printZeroExtended)) &&
            (identical(other.printLineItemNotes, printLineItemNotes) ||
                const DeepCollectionEquality()
                    .equals(other.printLineItemNotes, printLineItemNotes)) &&
            (identical(other.printGrandTotal, printGrandTotal) ||
                const DeepCollectionEquality()
                    .equals(other.printGrandTotal, printGrandTotal)) &&
            (identical(other.printGrossTotal, printGrossTotal) ||
                const DeepCollectionEquality()
                    .equals(other.printGrossTotal, printGrossTotal)) &&
            (identical(other.printGrandDiscount, printGrandDiscount) ||
                const DeepCollectionEquality().equals(other.printGrandDiscount, printGrandDiscount)) &&
            (identical(other.printGrandWeekly, printGrandWeekly) || const DeepCollectionEquality().equals(other.printGrandWeekly, printGrandWeekly)) &&
            (identical(other.printGrandPeriod, printGrandPeriod) || const DeepCollectionEquality().equals(other.printGrandPeriod, printGrandPeriod)) &&
            (identical(other.printActivityWeekly, printActivityWeekly) || const DeepCollectionEquality().equals(other.printActivityWeekly, printActivityWeekly)) &&
            (identical(other.printActivityPeriod, printActivityPeriod) || const DeepCollectionEquality().equals(other.printActivityPeriod, printActivityPeriod)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(reportView) ^
      const DeepCollectionEquality().hash(printInventoryType) ^
      const DeepCollectionEquality().hash(printCategory) ^
      const DeepCollectionEquality().hash(printTotalReplacementCost) ^
      const DeepCollectionEquality().hash(printInventoryTypeSubTotal) ^
      const DeepCollectionEquality().hash(printCategorySubTotal) ^
      const DeepCollectionEquality().hash(printZeroExtended) ^
      const DeepCollectionEquality().hash(printLineItemNotes) ^
      const DeepCollectionEquality().hash(printGrandTotal) ^
      const DeepCollectionEquality().hash(printGrossTotal) ^
      const DeepCollectionEquality().hash(printGrandDiscount) ^
      const DeepCollectionEquality().hash(printGrandWeekly) ^
      const DeepCollectionEquality().hash(printGrandPeriod) ^
      const DeepCollectionEquality().hash(printActivityWeekly) ^
      const DeepCollectionEquality().hash(printActivityPeriod) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOrderReportOrderReportRequestExtension
    on WebApiModulesReportsOrderReportsOrderReportOrderReportRequest {
  WebApiModulesReportsOrderReportsOrderReportOrderReportRequest copyWith(
      {String? orderId,
      enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
          reportView,
      bool? printInventoryType,
      bool? printCategory,
      bool? printTotalReplacementCost,
      bool? printInventoryTypeSubTotal,
      bool? printCategorySubTotal,
      bool? printZeroExtended,
      bool? printLineItemNotes,
      bool? printGrandTotal,
      bool? printGrossTotal,
      bool? printGrandDiscount,
      bool? printGrandWeekly,
      bool? printGrandPeriod,
      bool? printActivityWeekly,
      bool? printActivityPeriod,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsOrderReportOrderReportRequest(
        orderId: orderId ?? this.orderId,
        reportView: reportView ?? this.reportView,
        printInventoryType: printInventoryType ?? this.printInventoryType,
        printCategory: printCategory ?? this.printCategory,
        printTotalReplacementCost:
            printTotalReplacementCost ?? this.printTotalReplacementCost,
        printInventoryTypeSubTotal:
            printInventoryTypeSubTotal ?? this.printInventoryTypeSubTotal,
        printCategorySubTotal:
            printCategorySubTotal ?? this.printCategorySubTotal,
        printZeroExtended: printZeroExtended ?? this.printZeroExtended,
        printLineItemNotes: printLineItemNotes ?? this.printLineItemNotes,
        printGrandTotal: printGrandTotal ?? this.printGrandTotal,
        printGrossTotal: printGrossTotal ?? this.printGrossTotal,
        printGrandDiscount: printGrandDiscount ?? this.printGrandDiscount,
        printGrandWeekly: printGrandWeekly ?? this.printGrandWeekly,
        printGrandPeriod: printGrandPeriod ?? this.printGrandPeriod,
        printActivityWeekly: printActivityWeekly ?? this.printActivityWeekly,
        printActivityPeriod: printActivityPeriod ?? this.printActivityPeriod,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest {
  WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest({
    this.orderId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequestFromJson(
          json);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequestExtension
    on WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest {
  WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest
      copyWith(
          {String? orderId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsOrderStatusDetailReportOrderStatusDetailReportRequest(
        orderId: orderId ?? this.orderId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest {
  WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest({
    this.orderId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequestFromJson(
          json);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequestExtension
    on WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest {
  WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest
      copyWith(
          {String? orderId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsOrderStatusSummaryReportOrderStatusSummaryReportRequest(
        orderId: orderId ?? this.orderId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest {
  WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest({
    this.orderId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequestFromJson(
          json);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequestExtension
    on WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest {
  WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest
      copyWith(
          {String? orderId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsOutgoingShippingLabelOutgoingShippingLabelRequest(
        orderId: orderId ?? this.orderId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest {
  WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest({
    this.warehouseId,
    this.departmentId,
    this.customerId,
    this.dealTypeId,
    this.dealId,
    this.vendorId,
    this.categoryId,
    this.inventoryId,
    this.onlyIncludeICodesWithQuantityAvail,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequestFromJson(
          json);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'OnlyIncludeICodesWithQuantityAvail', includeIfNull: false)
  final bool? onlyIncludeICodesWithQuantityAvail;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.onlyIncludeICodesWithQuantityAvail, onlyIncludeICodesWithQuantityAvail) ||
                const DeepCollectionEquality().equals(
                    other.onlyIncludeICodesWithQuantityAvail,
                    onlyIncludeICodesWithQuantityAvail)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(onlyIncludeICodesWithQuantityAvail) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequestExtension
    on WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest {
  WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest
      copyWith(
          {String? warehouseId,
          String? departmentId,
          String? customerId,
          String? dealTypeId,
          String? dealId,
          String? vendorId,
          String? categoryId,
          String? inventoryId,
          bool? onlyIncludeICodesWithQuantityAvail,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsOutstandingSubRentalReportOutstandingSubRentalReportRequest(
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealId: dealId ?? this.dealId,
        vendorId: vendorId ?? this.vendorId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        onlyIncludeICodesWithQuantityAvail:
            onlyIncludeICodesWithQuantityAvail ??
                this.onlyIncludeICodesWithQuantityAvail,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsPickListReportPickListReportRequest {
  WebApiModulesReportsOrderReportsPickListReportPickListReportRequest({
    this.pickListId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsPickListReportPickListReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsPickListReportPickListReportRequestFromJson(
          json);

  @JsonKey(name: 'PickListId', includeIfNull: false)
  final String? pickListId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsPickListReportPickListReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsPickListReportPickListReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsPickListReportPickListReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsPickListReportPickListReportRequest &&
            (identical(other.pickListId, pickListId) ||
                const DeepCollectionEquality()
                    .equals(other.pickListId, pickListId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(pickListId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsPickListReportPickListReportRequestExtension
    on WebApiModulesReportsOrderReportsPickListReportPickListReportRequest {
  WebApiModulesReportsOrderReportsPickListReportPickListReportRequest copyWith(
      {String? pickListId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsPickListReportPickListReportRequest(
        pickListId: pickListId ?? this.pickListId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest {
  WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest({
    this.fromDate,
    this.toDate,
    this.orderType,
    this.warehouseId,
    this.departmentId,
    this.activityTypeId,
    this.inventoryTypeId,
    this.agentId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(
      name: 'OrderType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderType;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final String? activityTypeId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.orderType, orderType) ||
                const DeepCollectionEquality()
                    .equals(other.orderType, orderType)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(activityTypeId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequestExtension
    on WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest {
  WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderType,
          String? warehouseId,
          String? departmentId,
          String? activityTypeId,
          String? inventoryTypeId,
          String? agentId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsQuikActivityReportQuikActivityReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        orderType: orderType ?? this.orderType,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        agentId: agentId ?? this.agentId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest {
  WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.filterDates,
    this.officeLocationId,
    this.departmentId,
    this.customerId,
    this.dealTypeId,
    this.dealStatusId,
    this.dealId,
    this.agentId,
    this.orderType,
    this.quoteStatus,
    this.orderStatus,
    this.sortBy,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'FilterDates', includeIfNull: false)
  final bool? filterDates;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealTypeId', includeIfNull: false)
  final String? dealTypeId;
  @JsonKey(name: 'DealStatusId', includeIfNull: false)
  final String? dealStatusId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(
      name: 'OrderType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderType;
  @JsonKey(
      name: 'QuoteStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? quoteStatus;
  @JsonKey(
      name: 'OrderStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderStatus;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.filterDates, filterDates) ||
                const DeepCollectionEquality()
                    .equals(other.filterDates, filterDates)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealTypeId, dealTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.dealTypeId, dealTypeId)) &&
            (identical(other.dealStatusId, dealStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.dealStatusId, dealStatusId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.orderType, orderType) ||
                const DeepCollectionEquality()
                    .equals(other.orderType, orderType)) &&
            (identical(other.quoteStatus, quoteStatus) ||
                const DeepCollectionEquality()
                    .equals(other.quoteStatus, quoteStatus)) &&
            (identical(other.orderStatus, orderStatus) ||
                const DeepCollectionEquality()
                    .equals(other.orderStatus, orderStatus)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(filterDates) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealTypeId) ^
      const DeepCollectionEquality().hash(dealStatusId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(quoteStatus) ^
      const DeepCollectionEquality().hash(orderStatus) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequestExtension
    on WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest {
  WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? filterDates,
          String? officeLocationId,
          String? departmentId,
          String? customerId,
          String? dealTypeId,
          String? dealStatusId,
          String? dealId,
          String? agentId,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderType,
          List<FwStandardModelsSelectedCheckBoxListItem>? quoteStatus,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderStatus,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsQuoteOrderMasterReportQuoteOrderMasterReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        filterDates: filterDates ?? this.filterDates,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealTypeId: dealTypeId ?? this.dealTypeId,
        dealStatusId: dealStatusId ?? this.dealStatusId,
        dealId: dealId ?? this.dealId,
        agentId: agentId ?? this.agentId,
        orderType: orderType ?? this.orderType,
        quoteStatus: quoteStatus ?? this.quoteStatus,
        orderStatus: orderStatus ?? this.orderStatus,
        sortBy: sortBy ?? this.sortBy,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest {
  WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest({
    this.quoteId,
    this.reportView,
    this.printInventoryType,
    this.printCategory,
    this.printTotalReplacementCost,
    this.printInventoryTypeSubTotal,
    this.printCategorySubTotal,
    this.printZeroExtended,
    this.printLineItemNotes,
    this.printGrandTotal,
    this.printGrossTotal,
    this.printGrandDiscount,
    this.printGrandWeekly,
    this.printGrandPeriod,
    this.printActivityWeekly,
    this.printActivityPeriod,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequestFromJson(
          json);

  @JsonKey(name: 'QuoteId', includeIfNull: false)
  final String? quoteId;
  @JsonKey(
      name: 'ReportView',
      includeIfNull: false,
      toJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeToJson,
      fromJson:
          webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson)
  final enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
      reportView;
  @JsonKey(name: 'PrintInventoryType', includeIfNull: false)
  final bool? printInventoryType;
  @JsonKey(name: 'PrintCategory', includeIfNull: false)
  final bool? printCategory;
  @JsonKey(name: 'PrintTotalReplacementCost', includeIfNull: false)
  final bool? printTotalReplacementCost;
  @JsonKey(name: 'PrintInventoryTypeSubTotal', includeIfNull: false)
  final bool? printInventoryTypeSubTotal;
  @JsonKey(name: 'PrintCategorySubTotal', includeIfNull: false)
  final bool? printCategorySubTotal;
  @JsonKey(name: 'PrintZeroExtended', includeIfNull: false)
  final bool? printZeroExtended;
  @JsonKey(name: 'PrintLineItemNotes', includeIfNull: false)
  final bool? printLineItemNotes;
  @JsonKey(name: 'PrintGrandTotal', includeIfNull: false)
  final bool? printGrandTotal;
  @JsonKey(name: 'PrintGrossTotal', includeIfNull: false)
  final bool? printGrossTotal;
  @JsonKey(name: 'PrintGrandDiscount', includeIfNull: false)
  final bool? printGrandDiscount;
  @JsonKey(name: 'PrintGrandWeekly', includeIfNull: false)
  final bool? printGrandWeekly;
  @JsonKey(name: 'PrintGrandPeriod', includeIfNull: false)
  final bool? printGrandPeriod;
  @JsonKey(name: 'PrintActivityWeekly', includeIfNull: false)
  final bool? printActivityWeekly;
  @JsonKey(name: 'PrintActivityPeriod', includeIfNull: false)
  final bool? printActivityPeriod;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest &&
            (identical(other.quoteId, quoteId) ||
                const DeepCollectionEquality()
                    .equals(other.quoteId, quoteId)) &&
            (identical(other.reportView, reportView) ||
                const DeepCollectionEquality()
                    .equals(other.reportView, reportView)) &&
            (identical(other.printInventoryType, printInventoryType) ||
                const DeepCollectionEquality()
                    .equals(other.printInventoryType, printInventoryType)) &&
            (identical(other.printCategory, printCategory) ||
                const DeepCollectionEquality()
                    .equals(other.printCategory, printCategory)) &&
            (identical(other.printTotalReplacementCost, printTotalReplacementCost) ||
                const DeepCollectionEquality().equals(
                    other.printTotalReplacementCost,
                    printTotalReplacementCost)) &&
            (identical(other.printInventoryTypeSubTotal, printInventoryTypeSubTotal) ||
                const DeepCollectionEquality().equals(
                    other.printInventoryTypeSubTotal,
                    printInventoryTypeSubTotal)) &&
            (identical(other.printCategorySubTotal, printCategorySubTotal) ||
                const DeepCollectionEquality().equals(
                    other.printCategorySubTotal, printCategorySubTotal)) &&
            (identical(other.printZeroExtended, printZeroExtended) ||
                const DeepCollectionEquality()
                    .equals(other.printZeroExtended, printZeroExtended)) &&
            (identical(other.printLineItemNotes, printLineItemNotes) ||
                const DeepCollectionEquality()
                    .equals(other.printLineItemNotes, printLineItemNotes)) &&
            (identical(other.printGrandTotal, printGrandTotal) ||
                const DeepCollectionEquality()
                    .equals(other.printGrandTotal, printGrandTotal)) &&
            (identical(other.printGrossTotal, printGrossTotal) ||
                const DeepCollectionEquality()
                    .equals(other.printGrossTotal, printGrossTotal)) &&
            (identical(other.printGrandDiscount, printGrandDiscount) ||
                const DeepCollectionEquality().equals(other.printGrandDiscount, printGrandDiscount)) &&
            (identical(other.printGrandWeekly, printGrandWeekly) || const DeepCollectionEquality().equals(other.printGrandWeekly, printGrandWeekly)) &&
            (identical(other.printGrandPeriod, printGrandPeriod) || const DeepCollectionEquality().equals(other.printGrandPeriod, printGrandPeriod)) &&
            (identical(other.printActivityWeekly, printActivityWeekly) || const DeepCollectionEquality().equals(other.printActivityWeekly, printActivityWeekly)) &&
            (identical(other.printActivityPeriod, printActivityPeriod) || const DeepCollectionEquality().equals(other.printActivityPeriod, printActivityPeriod)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(quoteId) ^
      const DeepCollectionEquality().hash(reportView) ^
      const DeepCollectionEquality().hash(printInventoryType) ^
      const DeepCollectionEquality().hash(printCategory) ^
      const DeepCollectionEquality().hash(printTotalReplacementCost) ^
      const DeepCollectionEquality().hash(printInventoryTypeSubTotal) ^
      const DeepCollectionEquality().hash(printCategorySubTotal) ^
      const DeepCollectionEquality().hash(printZeroExtended) ^
      const DeepCollectionEquality().hash(printLineItemNotes) ^
      const DeepCollectionEquality().hash(printGrandTotal) ^
      const DeepCollectionEquality().hash(printGrossTotal) ^
      const DeepCollectionEquality().hash(printGrandDiscount) ^
      const DeepCollectionEquality().hash(printGrandWeekly) ^
      const DeepCollectionEquality().hash(printGrandPeriod) ^
      const DeepCollectionEquality().hash(printActivityWeekly) ^
      const DeepCollectionEquality().hash(printActivityPeriod) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequestExtension
    on WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest {
  WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest copyWith(
      {String? quoteId,
      enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
          reportView,
      bool? printInventoryType,
      bool? printCategory,
      bool? printTotalReplacementCost,
      bool? printInventoryTypeSubTotal,
      bool? printCategorySubTotal,
      bool? printZeroExtended,
      bool? printLineItemNotes,
      bool? printGrandTotal,
      bool? printGrossTotal,
      bool? printGrandDiscount,
      bool? printGrandWeekly,
      bool? printGrandPeriod,
      bool? printActivityWeekly,
      bool? printActivityPeriod,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsQuoteReportQuoteReportRequest(
        quoteId: quoteId ?? this.quoteId,
        reportView: reportView ?? this.reportView,
        printInventoryType: printInventoryType ?? this.printInventoryType,
        printCategory: printCategory ?? this.printCategory,
        printTotalReplacementCost:
            printTotalReplacementCost ?? this.printTotalReplacementCost,
        printInventoryTypeSubTotal:
            printInventoryTypeSubTotal ?? this.printInventoryTypeSubTotal,
        printCategorySubTotal:
            printCategorySubTotal ?? this.printCategorySubTotal,
        printZeroExtended: printZeroExtended ?? this.printZeroExtended,
        printLineItemNotes: printLineItemNotes ?? this.printLineItemNotes,
        printGrandTotal: printGrandTotal ?? this.printGrandTotal,
        printGrossTotal: printGrossTotal ?? this.printGrossTotal,
        printGrandDiscount: printGrandDiscount ?? this.printGrandDiscount,
        printGrandWeekly: printGrandWeekly ?? this.printGrandWeekly,
        printGrandPeriod: printGrandPeriod ?? this.printGrandPeriod,
        printActivityWeekly: printActivityWeekly ?? this.printActivityWeekly,
        printActivityPeriod: printActivityPeriod ?? this.printActivityPeriod,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest {
  WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.includeNoCharge,
    this.officeLocationId,
    this.departmentId,
    this.agentId,
    this.customerId,
    this.dealId,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'IncludeNoCharge', includeIfNull: false)
  final bool? includeNoCharge;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.includeNoCharge, includeNoCharge) ||
                const DeepCollectionEquality()
                    .equals(other.includeNoCharge, includeNoCharge)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(includeNoCharge) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequestExtension
    on WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest {
  WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          bool? includeNoCharge,
          String? officeLocationId,
          String? departmentId,
          String? agentId,
          String? customerId,
          String? dealId,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderReportsSubSalesStagedItemsReportSubSalesStagedItemsReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        includeNoCharge: includeNoCharge ?? this.includeNoCharge,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest {
  WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest({
    this.orderId,
    this.rentalValue,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequestFromJson(
          json);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'RentalValue', includeIfNull: false)
  final String? rentalValue;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.rentalValue, rentalValue) ||
                const DeepCollectionEquality()
                    .equals(other.rentalValue, rentalValue)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(rentalValue) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequestExtension
    on WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest {
  WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest
      copyWith(
          {String? orderId,
          String? rentalValue,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOrderValueSheetReportOrderValueSheetReportRequest(
        orderId: orderId ?? this.orderId,
        rentalValue: rentalValue ?? this.rentalValue,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest {
  WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest({
    this.outDeliveryId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequestFromJson(
          json);

  @JsonKey(name: 'OutDeliveryId', includeIfNull: false)
  final String? outDeliveryId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest &&
            (identical(other.outDeliveryId, outDeliveryId) ||
                const DeepCollectionEquality()
                    .equals(other.outDeliveryId, outDeliveryId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(outDeliveryId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequestExtension
    on WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest {
  WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest
      copyWith(
          {String? outDeliveryId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsOutgoingDeliveryInstructionsOutgoingDeliveryInstructionsRequest(
        outDeliveryId: outDeliveryId ?? this.outDeliveryId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest {
  WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest({
    this.reorderPointMode,
    this.includeZeroReorderPoint,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequestFromJson(
          json);

  @JsonKey(name: 'ReorderPointMode', includeIfNull: false)
  final String? reorderPointMode;
  @JsonKey(name: 'IncludeZeroReorderPoint', includeIfNull: false)
  final bool? includeZeroReorderPoint;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest &&
            (identical(other.reorderPointMode, reorderPointMode) ||
                const DeepCollectionEquality()
                    .equals(other.reorderPointMode, reorderPointMode)) &&
            (identical(other.includeZeroReorderPoint, includeZeroReorderPoint) ||
                const DeepCollectionEquality().equals(
                    other.includeZeroReorderPoint, includeZeroReorderPoint)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(reorderPointMode) ^
      const DeepCollectionEquality().hash(includeZeroReorderPoint) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequestExtension
    on WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest {
  WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest
      copyWith(
          {String? reorderPointMode,
          bool? includeZeroReorderPoint,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsPartsInventoryReportsPartsInventoryReorderReportPartsInventoryReorderReportRequest(
        reorderPointMode: reorderPointMode ?? this.reorderPointMode,
        includeZeroReorderPoint:
            includeZeroReorderPoint ?? this.includeZeroReorderPoint,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest({
    this.physicalInventoryId,
    this.warehouseId,
    this.spaceIds,
    this.inventoryDepartmentIds,
    this.categoryIds,
    this.masterIds,
    this.isSpace,
    this.isRecount,
    this.includeCompleteKits,
    this.includeCompleteKitReferences,
    this.excludeOptionalAccessories,
    this.trackedBys,
    this.sortBy,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequestFromJson(
          json);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(name: 'IsSpace', includeIfNull: false)
  final bool? isSpace;
  @JsonKey(name: 'isRecount', includeIfNull: false)
  final bool? isRecount;
  @JsonKey(name: 'IncludeCompleteKits', includeIfNull: false)
  final bool? includeCompleteKits;
  @JsonKey(name: 'IncludeCompleteKitReferences', includeIfNull: false)
  final bool? includeCompleteKitReferences;
  @JsonKey(name: 'ExcludeOptionalAccessories', includeIfNull: false)
  final bool? excludeOptionalAccessories;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.isSpace, isSpace) ||
                const DeepCollectionEquality()
                    .equals(other.isSpace, isSpace)) &&
            (identical(other.isRecount, isRecount) ||
                const DeepCollectionEquality()
                    .equals(other.isRecount, isRecount)) &&
            (identical(other.includeCompleteKits, includeCompleteKits) ||
                const DeepCollectionEquality()
                    .equals(other.includeCompleteKits, includeCompleteKits)) &&
            (identical(other.includeCompleteKitReferences, includeCompleteKitReferences) ||
                const DeepCollectionEquality().equals(
                    other.includeCompleteKitReferences,
                    includeCompleteKitReferences)) &&
            (identical(other.excludeOptionalAccessories, excludeOptionalAccessories) ||
                const DeepCollectionEquality().equals(
                    other.excludeOptionalAccessories,
                    excludeOptionalAccessories)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(isSpace) ^
      const DeepCollectionEquality().hash(isRecount) ^
      const DeepCollectionEquality().hash(includeCompleteKits) ^
      const DeepCollectionEquality().hash(includeCompleteKitReferences) ^
      const DeepCollectionEquality().hash(excludeOptionalAccessories) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest
      copyWith(
          {String? physicalInventoryId,
          String? warehouseId,
          String? spaceIds,
          String? inventoryDepartmentIds,
          String? categoryIds,
          String? masterIds,
          bool? isSpace,
          bool? isRecount,
          bool? includeCompleteKits,
          bool? includeCompleteKitReferences,
          bool? excludeOptionalAccessories,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryCountSheetReportPhysicalInventoryCountSheetReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        warehouseId: warehouseId ?? this.warehouseId,
        spaceIds: spaceIds ?? this.spaceIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        categoryIds: categoryIds ?? this.categoryIds,
        masterIds: masterIds ?? this.masterIds,
        isSpace: isSpace ?? this.isSpace,
        isRecount: isRecount ?? this.isRecount,
        includeCompleteKits: includeCompleteKits ?? this.includeCompleteKits,
        includeCompleteKitReferences:
            includeCompleteKitReferences ?? this.includeCompleteKitReferences,
        excludeOptionalAccessories:
            excludeOptionalAccessories ?? this.excludeOptionalAccessories,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest({
    this.physicalInventoryId,
    this.consignorIds,
    this.categoryIds,
    this.masterIds,
    this.includeIcodesThatAreNotDiscrepancies,
    this.printBarcodeSerialNotCounted,
    this.isSpace,
    this.inventoryDepartmentIds,
    this.spaceIds,
    this.trackedBys,
    this.sortBy,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequestFromJson(
          json);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'ConsignorIds', includeIfNull: false)
  final String? consignorIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(name: 'IncludeIcodesThatAreNotDiscrepancies', includeIfNull: false)
  final bool? includeIcodesThatAreNotDiscrepancies;
  @JsonKey(name: 'PrintBarcodeSerialNotCounted', includeIfNull: false)
  final bool? printBarcodeSerialNotCounted;
  @JsonKey(name: 'IsSpace', includeIfNull: false)
  final bool? isSpace;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.consignorIds, consignorIds) ||
                const DeepCollectionEquality()
                    .equals(other.consignorIds, consignorIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.includeIcodesThatAreNotDiscrepancies, includeIcodesThatAreNotDiscrepancies) ||
                const DeepCollectionEquality().equals(
                    other.includeIcodesThatAreNotDiscrepancies,
                    includeIcodesThatAreNotDiscrepancies)) &&
            (identical(other.printBarcodeSerialNotCounted, printBarcodeSerialNotCounted) ||
                const DeepCollectionEquality().equals(
                    other.printBarcodeSerialNotCounted,
                    printBarcodeSerialNotCounted)) &&
            (identical(other.isSpace, isSpace) ||
                const DeepCollectionEquality()
                    .equals(other.isSpace, isSpace)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality()
                    .equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(consignorIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality()
          .hash(includeIcodesThatAreNotDiscrepancies) ^
      const DeepCollectionEquality().hash(printBarcodeSerialNotCounted) ^
      const DeepCollectionEquality().hash(isSpace) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest
      copyWith(
          {String? physicalInventoryId,
          String? consignorIds,
          String? categoryIds,
          String? masterIds,
          bool? includeIcodesThatAreNotDiscrepancies,
          bool? printBarcodeSerialNotCounted,
          bool? isSpace,
          String? inventoryDepartmentIds,
          String? spaceIds,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryDiscrepancyReportPhysicalInventoryDiscrepancyReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        consignorIds: consignorIds ?? this.consignorIds,
        categoryIds: categoryIds ?? this.categoryIds,
        masterIds: masterIds ?? this.masterIds,
        includeIcodesThatAreNotDiscrepancies:
            includeIcodesThatAreNotDiscrepancies ??
                this.includeIcodesThatAreNotDiscrepancies,
        printBarcodeSerialNotCounted:
            printBarcodeSerialNotCounted ?? this.printBarcodeSerialNotCounted,
        isSpace: isSpace ?? this.isSpace,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        spaceIds: spaceIds ?? this.spaceIds,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest({
    this.physicalInventoryId,
    this.categoryIds,
    this.inventoryDepartmentIds,
    this.spaceIds,
    this.masterIds,
    this.includeZeroOwned,
    this.trackedBys,
    this.sortBy,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequestFromJson(
          json);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(name: 'IncludeZeroOwned', includeIfNull: false)
  final bool? includeZeroOwned;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.includeZeroOwned, includeZeroOwned) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroOwned, includeZeroOwned)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(includeZeroOwned) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest
      copyWith(
          {String? physicalInventoryId,
          String? categoryIds,
          String? inventoryDepartmentIds,
          String? spaceIds,
          String? masterIds,
          bool? includeZeroOwned,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryExceptionReportPhysicalInventoryExceptionReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        categoryIds: categoryIds ?? this.categoryIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        spaceIds: spaceIds ?? this.spaceIds,
        masterIds: masterIds ?? this.masterIds,
        includeZeroOwned: includeZeroOwned ?? this.includeZeroOwned,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest({
    this.physicalInventoryId,
    this.warehouseId,
    this.spaceIds,
    this.inventoryDepartmentIds,
    this.categoryIds,
    this.masterIds,
    this.trackedBys,
    this.sortBy,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequestFromJson(
          json);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest
      copyWith(
          {String? physicalInventoryId,
          String? warehouseId,
          String? spaceIds,
          String? inventoryDepartmentIds,
          String? categoryIds,
          String? masterIds,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryPrescanProgressReportPhysicalInventoryPrescanProgressReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        warehouseId: warehouseId ?? this.warehouseId,
        spaceIds: spaceIds ?? this.spaceIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        categoryIds: categoryIds ?? this.categoryIds,
        masterIds: masterIds ?? this.masterIds,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest({
    this.physicalInventoryId,
    this.fromDate,
    this.toDate,
    this.availableFor,
    this.itemsCounted,
    this.includeOrders,
    this.includeOrderBarcodes,
    this.includeCountedBarcodes,
    this.excludeZeroCostExtended,
    this.onlyChangedItems,
    this.trackedbyIds,
    this.spaceIds,
    this.masterIds,
    this.inventoryDepartmentIds,
    this.categoryIds,
    this.trackedBys,
    this.sortBy,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequestFromJson(
          json);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final FwStandardSqlServerFwDateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final FwStandardSqlServerFwDateTime? toDate;
  @JsonKey(name: 'AvailableFor', includeIfNull: false)
  final String? availableFor;
  @JsonKey(name: 'ItemsCounted', includeIfNull: false)
  final bool? itemsCounted;
  @JsonKey(name: 'IncludeOrders', includeIfNull: false)
  final bool? includeOrders;
  @JsonKey(name: 'IncludeOrderBarcodes', includeIfNull: false)
  final bool? includeOrderBarcodes;
  @JsonKey(name: 'IncludeCountedBarcodes', includeIfNull: false)
  final bool? includeCountedBarcodes;
  @JsonKey(name: 'ExcludeZeroCostExtended', includeIfNull: false)
  final bool? excludeZeroCostExtended;
  @JsonKey(name: 'OnlyChangedItems', includeIfNull: false)
  final bool? onlyChangedItems;
  @JsonKey(name: 'TrackedbyIds', includeIfNull: false)
  final String? trackedbyIds;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.availableFor, availableFor) ||
                const DeepCollectionEquality()
                    .equals(other.availableFor, availableFor)) &&
            (identical(other.itemsCounted, itemsCounted) ||
                const DeepCollectionEquality()
                    .equals(other.itemsCounted, itemsCounted)) &&
            (identical(other.includeOrders, includeOrders) ||
                const DeepCollectionEquality()
                    .equals(other.includeOrders, includeOrders)) &&
            (identical(other.includeOrderBarcodes, includeOrderBarcodes) ||
                const DeepCollectionEquality().equals(
                    other.includeOrderBarcodes, includeOrderBarcodes)) &&
            (identical(other.includeCountedBarcodes, includeCountedBarcodes) ||
                const DeepCollectionEquality().equals(
                    other.includeCountedBarcodes, includeCountedBarcodes)) &&
            (identical(other.excludeZeroCostExtended, excludeZeroCostExtended) ||
                const DeepCollectionEquality().equals(
                    other.excludeZeroCostExtended, excludeZeroCostExtended)) &&
            (identical(other.onlyChangedItems, onlyChangedItems) ||
                const DeepCollectionEquality()
                    .equals(other.onlyChangedItems, onlyChangedItems)) &&
            (identical(other.trackedbyIds, trackedbyIds) ||
                const DeepCollectionEquality()
                    .equals(other.trackedbyIds, trackedbyIds)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.trackedBys, trackedBys) || const DeepCollectionEquality().equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) || const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(availableFor) ^
      const DeepCollectionEquality().hash(itemsCounted) ^
      const DeepCollectionEquality().hash(includeOrders) ^
      const DeepCollectionEquality().hash(includeOrderBarcodes) ^
      const DeepCollectionEquality().hash(includeCountedBarcodes) ^
      const DeepCollectionEquality().hash(excludeZeroCostExtended) ^
      const DeepCollectionEquality().hash(onlyChangedItems) ^
      const DeepCollectionEquality().hash(trackedbyIds) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest
      copyWith(
          {String? physicalInventoryId,
          FwStandardSqlServerFwDateTime? fromDate,
          FwStandardSqlServerFwDateTime? toDate,
          String? availableFor,
          bool? itemsCounted,
          bool? includeOrders,
          bool? includeOrderBarcodes,
          bool? includeCountedBarcodes,
          bool? excludeZeroCostExtended,
          bool? onlyChangedItems,
          String? trackedbyIds,
          String? spaceIds,
          String? masterIds,
          String? inventoryDepartmentIds,
          String? categoryIds,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryReconciliationReportPhysicalInventoryReconciliationReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        availableFor: availableFor ?? this.availableFor,
        itemsCounted: itemsCounted ?? this.itemsCounted,
        includeOrders: includeOrders ?? this.includeOrders,
        includeOrderBarcodes: includeOrderBarcodes ?? this.includeOrderBarcodes,
        includeCountedBarcodes:
            includeCountedBarcodes ?? this.includeCountedBarcodes,
        excludeZeroCostExtended:
            excludeZeroCostExtended ?? this.excludeZeroCostExtended,
        onlyChangedItems: onlyChangedItems ?? this.onlyChangedItems,
        trackedbyIds: trackedbyIds ?? this.trackedbyIds,
        spaceIds: spaceIds ?? this.spaceIds,
        masterIds: masterIds ?? this.masterIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        categoryIds: categoryIds ?? this.categoryIds,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest({
    this.physicalInventoryId,
    this.spaceIds,
    this.categoryIds,
    this.masterIds,
    this.inventoryDepartmentIds,
    this.includeIdenticalCounts,
    this.trackedBys,
    this.sortBy,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequestFromJson(
          json);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'IncludeIdenticalCounts', includeIfNull: false)
  final bool? includeIdenticalCounts;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.includeIdenticalCounts, includeIdenticalCounts) ||
                const DeepCollectionEquality().equals(
                    other.includeIdenticalCounts, includeIdenticalCounts)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(includeIdenticalCounts) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest
      copyWith(
          {String? physicalInventoryId,
          String? spaceIds,
          String? categoryIds,
          String? masterIds,
          String? inventoryDepartmentIds,
          bool? includeIdenticalCounts,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryRecountAnalysisReportPhysicalInventoryRecountAnalysisReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        spaceIds: spaceIds ?? this.spaceIds,
        categoryIds: categoryIds ?? this.categoryIds,
        masterIds: masterIds ?? this.masterIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        includeIdenticalCounts:
            includeIdenticalCounts ?? this.includeIdenticalCounts,
        trackedBys: trackedBys ?? this.trackedBys,
        sortBy: sortBy ?? this.sortBy,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest({
    this.physicalInventoryId,
    this.includeNoChangeItems,
    this.showRetiredBarcodes,
    this.trackedBys,
    this.spaceIds,
    this.inventoryDepartmentIds,
    this.categoryIds,
    this.masterIds,
    this.sortBy,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequestFromJson(
          json);

  @JsonKey(name: 'PhysicalInventoryId', includeIfNull: false)
  final String? physicalInventoryId;
  @JsonKey(name: 'IncludeNoChangeItems', includeIfNull: false)
  final bool? includeNoChangeItems;
  @JsonKey(name: 'ShowRetiredBarcodes', includeIfNull: false)
  final bool? showRetiredBarcodes;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'SpaceIds', includeIfNull: false)
  final String? spaceIds;
  @JsonKey(name: 'InventoryDepartmentIds', includeIfNull: false)
  final String? inventoryDepartmentIds;
  @JsonKey(name: 'CategoryIds', includeIfNull: false)
  final String? categoryIds;
  @JsonKey(name: 'MasterIds', includeIfNull: false)
  final String? masterIds;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest &&
            (identical(other.physicalInventoryId, physicalInventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.physicalInventoryId, physicalInventoryId)) &&
            (identical(other.includeNoChangeItems, includeNoChangeItems) ||
                const DeepCollectionEquality().equals(
                    other.includeNoChangeItems, includeNoChangeItems)) &&
            (identical(other.showRetiredBarcodes, showRetiredBarcodes) ||
                const DeepCollectionEquality()
                    .equals(other.showRetiredBarcodes, showRetiredBarcodes)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.spaceIds, spaceIds) ||
                const DeepCollectionEquality()
                    .equals(other.spaceIds, spaceIds)) &&
            (identical(other.inventoryDepartmentIds, inventoryDepartmentIds) ||
                const DeepCollectionEquality().equals(
                    other.inventoryDepartmentIds, inventoryDepartmentIds)) &&
            (identical(other.categoryIds, categoryIds) ||
                const DeepCollectionEquality()
                    .equals(other.categoryIds, categoryIds)) &&
            (identical(other.masterIds, masterIds) ||
                const DeepCollectionEquality()
                    .equals(other.masterIds, masterIds)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(physicalInventoryId) ^
      const DeepCollectionEquality().hash(includeNoChangeItems) ^
      const DeepCollectionEquality().hash(showRetiredBarcodes) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(spaceIds) ^
      const DeepCollectionEquality().hash(inventoryDepartmentIds) ^
      const DeepCollectionEquality().hash(categoryIds) ^
      const DeepCollectionEquality().hash(masterIds) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequestExtension
    on WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest {
  WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest
      copyWith(
          {String? physicalInventoryId,
          bool? includeNoChangeItems,
          bool? showRetiredBarcodes,
          List<FwStandardModelsCheckBoxListItem>? trackedBys,
          String? spaceIds,
          String? inventoryDepartmentIds,
          String? categoryIds,
          String? masterIds,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsPhysicalInventoryReportsPhysicalInventoryResultsReportPhysicalInventoryResultsReportRequest(
        physicalInventoryId: physicalInventoryId ?? this.physicalInventoryId,
        includeNoChangeItems: includeNoChangeItems ?? this.includeNoChangeItems,
        showRetiredBarcodes: showRetiredBarcodes ?? this.showRetiredBarcodes,
        trackedBys: trackedBys ?? this.trackedBys,
        spaceIds: spaceIds ?? this.spaceIds,
        inventoryDepartmentIds:
            inventoryDepartmentIds ?? this.inventoryDepartmentIds,
        categoryIds: categoryIds ?? this.categoryIds,
        masterIds: masterIds ?? this.masterIds,
        sortBy: sortBy ?? this.sortBy,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest {
  WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest({
    this.purchaseOrderId,
    this.warehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequestFromJson(
          json);

  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequestExtension
    on WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest {
  WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest
      copyWith(
          {String? purchaseOrderId,
          String? warehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsPurchaseOrderReportsPurchaseOrderReturnListPurchaseOrderReturnListRequest(
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        warehouseId: warehouseId ?? this.warehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRateUpdateReportRateUpdateReportRequest {
  WebApiModulesReportsRateUpdateReportRateUpdateReportRequest({
    this.pendingModificationsOnly,
    this.rateUpdateBatchId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRateUpdateReportRateUpdateReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRateUpdateReportRateUpdateReportRequestFromJson(
          json);

  @JsonKey(name: 'PendingModificationsOnly', includeIfNull: false)
  final bool? pendingModificationsOnly;
  @JsonKey(name: 'RateUpdateBatchId', includeIfNull: false)
  final String? rateUpdateBatchId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRateUpdateReportRateUpdateReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRateUpdateReportRateUpdateReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRateUpdateReportRateUpdateReportRequestToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRateUpdateReportRateUpdateReportRequest &&
            (identical(
                    other.pendingModificationsOnly, pendingModificationsOnly) ||
                const DeepCollectionEquality().equals(
                    other.pendingModificationsOnly,
                    pendingModificationsOnly)) &&
            (identical(other.rateUpdateBatchId, rateUpdateBatchId) ||
                const DeepCollectionEquality()
                    .equals(other.rateUpdateBatchId, rateUpdateBatchId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(pendingModificationsOnly) ^
      const DeepCollectionEquality().hash(rateUpdateBatchId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRateUpdateReportRateUpdateReportRequestExtension
    on WebApiModulesReportsRateUpdateReportRateUpdateReportRequest {
  WebApiModulesReportsRateUpdateReportRateUpdateReportRequest copyWith(
      {bool? pendingModificationsOnly,
      String? rateUpdateBatchId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRateUpdateReportRateUpdateReportRequest(
        pendingModificationsOnly:
            pendingModificationsOnly ?? this.pendingModificationsOnly,
        rateUpdateBatchId: rateUpdateBatchId ?? this.rateUpdateBatchId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.fixedAsset,
    this.ownershipTypes,
    this.ranks,
    this.trackedBys,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'FixedAsset',
      includeIfNull: false,
      toJson: webApiIncludeExcludeAllToJson,
      fromJson: webApiIncludeExcludeAllFromJson)
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(
      name: 'OwnershipTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.ownershipTypes, ownershipTypes) ||
                const DeepCollectionEquality()
                    .equals(other.ownershipTypes, ownershipTypes)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(ownershipTypes) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryActivityByDateReportRentalInventoryActivityByDateReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        ownershipTypes: ownershipTypes ?? this.ownershipTypes,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest({
    this.fromDate,
    this.toDate,
    this.isDetail,
    this.includeZeroQuantity,
    this.onlyIncludeLowAndNegative,
    this.onlyIncludeNegative,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.classifications,
    this.ranks,
    this.trackedBys,
    this.fixedAsset,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IsDetail', includeIfNull: false)
  final bool? isDetail;
  @JsonKey(name: 'IncludeZeroQuantity', includeIfNull: false)
  final bool? includeZeroQuantity;
  @JsonKey(name: 'OnlyIncludeLowAndNegative', includeIfNull: false)
  final bool? onlyIncludeLowAndNegative;
  @JsonKey(name: 'OnlyIncludeNegative', includeIfNull: false)
  final bool? onlyIncludeNegative;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Classifications',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? classifications;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'FixedAsset',
      includeIfNull: false,
      toJson: webApiIncludeExcludeAllToJson,
      fromJson: webApiIncludeExcludeAllFromJson)
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.isDetail, isDetail) ||
                const DeepCollectionEquality()
                    .equals(other.isDetail, isDetail)) &&
            (identical(other.includeZeroQuantity, includeZeroQuantity) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroQuantity, includeZeroQuantity)) &&
            (identical(other.onlyIncludeLowAndNegative, onlyIncludeLowAndNegative) ||
                const DeepCollectionEquality().equals(
                    other.onlyIncludeLowAndNegative,
                    onlyIncludeLowAndNegative)) &&
            (identical(other.onlyIncludeNegative, onlyIncludeNegative) ||
                const DeepCollectionEquality()
                    .equals(other.onlyIncludeNegative, onlyIncludeNegative)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.classifications, classifications) ||
                const DeepCollectionEquality()
                    .equals(other.classifications, classifications)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.fixedAsset, fixedAsset) || const DeepCollectionEquality().equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(isDetail) ^
      const DeepCollectionEquality().hash(includeZeroQuantity) ^
      const DeepCollectionEquality().hash(onlyIncludeLowAndNegative) ^
      const DeepCollectionEquality().hash(onlyIncludeNegative) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(classifications) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? isDetail,
          bool? includeZeroQuantity,
          bool? onlyIncludeLowAndNegative,
          bool? onlyIncludeNegative,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? classifications,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryAvailabilityReportRentalInventoryAvailabilityReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        isDetail: isDetail ?? this.isDetail,
        includeZeroQuantity: includeZeroQuantity ?? this.includeZeroQuantity,
        onlyIncludeLowAndNegative:
            onlyIncludeLowAndNegative ?? this.onlyIncludeLowAndNegative,
        onlyIncludeNegative: onlyIncludeNegative ?? this.onlyIncludeNegative,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        classifications: classifications ?? this.classifications,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest({
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.ownershipTypes,
    this.fixedAsset,
    this.includeRetiredSerializedItems,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequestFromJson(
          json);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'OwnershipTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes;
  @JsonKey(
      name: 'FixedAsset',
      includeIfNull: false,
      toJson: webApiIncludeExcludeAllToJson,
      fromJson: webApiIncludeExcludeAllFromJson)
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(name: 'IncludeRetiredSerializedItems', includeIfNull: false)
  final bool? includeRetiredSerializedItems;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.ownershipTypes, ownershipTypes) ||
                const DeepCollectionEquality()
                    .equals(other.ownershipTypes, ownershipTypes)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.includeRetiredSerializedItems, includeRetiredSerializedItems) ||
                const DeepCollectionEquality().equals(
                    other.includeRetiredSerializedItems,
                    includeRetiredSerializedItems)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(ownershipTypes) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(includeRetiredSerializedItems) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest
      copyWith(
          {String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          bool? includeRetiredSerializedItems,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryMasterReportRentalInventoryMasterReportRequest(
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        ownershipTypes: ownershipTypes ?? this.ownershipTypes,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        includeRetiredSerializedItems:
            includeRetiredSerializedItems ?? this.includeRetiredSerializedItems,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest({
    this.fromDate,
    this.toDate,
    this.includeZeroOwned,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.value,
    this.ranks,
    this.trackedBys,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IncludeZeroOwned', includeIfNull: false)
  final bool? includeZeroOwned;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'Value', includeIfNull: false)
  final String? value;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.includeZeroOwned, includeZeroOwned) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroOwned, includeZeroOwned)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.value, value) ||
                const DeepCollectionEquality().equals(other.value, value)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(includeZeroOwned) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(value) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? includeZeroOwned,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? value,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryMovementReportRentalInventoryMovementReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        includeZeroOwned: includeZeroOwned ?? this.includeZeroOwned,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        value: value ?? this.value,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest({
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequestFromJson(
          json);

  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest
      copyWith(
          {String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryQCRequiredReportRentalInventoryQCRequiredReportRequest(
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest({
    this.includePeriodRevenue,
    this.revenueFromDate,
    this.revenueToDate,
    this.revenueFilterMode,
    this.revenueFilterAmount,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.includeNotRentedSince,
    this.notRentedSinceDate,
    this.includeZeroOwned,
    this.showStagedAndOut,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequestFromJson(
          json);

  @JsonKey(name: 'IncludePeriodRevenue', includeIfNull: false)
  final bool? includePeriodRevenue;
  @JsonKey(name: 'RevenueFromDate', includeIfNull: false)
  final DateTime? revenueFromDate;
  @JsonKey(name: 'RevenueToDate', includeIfNull: false)
  final DateTime? revenueToDate;
  @JsonKey(name: 'RevenueFilterMode', includeIfNull: false)
  final String? revenueFilterMode;
  @JsonKey(name: 'RevenueFilterAmount', includeIfNull: false)
  final double? revenueFilterAmount;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'IncludeNotRentedSince', includeIfNull: false)
  final bool? includeNotRentedSince;
  @JsonKey(name: 'NotRentedSinceDate', includeIfNull: false)
  final DateTime? notRentedSinceDate;
  @JsonKey(name: 'IncludeZeroOwned', includeIfNull: false)
  final bool? includeZeroOwned;
  @JsonKey(name: 'ShowStagedAndOut', includeIfNull: false)
  final bool? showStagedAndOut;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest &&
            (identical(other.includePeriodRevenue, includePeriodRevenue) ||
                const DeepCollectionEquality().equals(
                    other.includePeriodRevenue, includePeriodRevenue)) &&
            (identical(other.revenueFromDate, revenueFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFromDate, revenueFromDate)) &&
            (identical(other.revenueToDate, revenueToDate) ||
                const DeepCollectionEquality()
                    .equals(other.revenueToDate, revenueToDate)) &&
            (identical(other.revenueFilterMode, revenueFilterMode) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFilterMode, revenueFilterMode)) &&
            (identical(other.revenueFilterAmount, revenueFilterAmount) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFilterAmount, revenueFilterAmount)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.includeNotRentedSince, includeNotRentedSince) ||
                const DeepCollectionEquality().equals(
                    other.includeNotRentedSince, includeNotRentedSince)) &&
            (identical(other.notRentedSinceDate, notRentedSinceDate) ||
                const DeepCollectionEquality()
                    .equals(other.notRentedSinceDate, notRentedSinceDate)) &&
            (identical(other.includeZeroOwned, includeZeroOwned) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroOwned, includeZeroOwned)) &&
            (identical(other.showStagedAndOut, showStagedAndOut) ||
                const DeepCollectionEquality()
                    .equals(other.showStagedAndOut, showStagedAndOut)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality()
                    .equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(includePeriodRevenue) ^
      const DeepCollectionEquality().hash(revenueFromDate) ^
      const DeepCollectionEquality().hash(revenueToDate) ^
      const DeepCollectionEquality().hash(revenueFilterMode) ^
      const DeepCollectionEquality().hash(revenueFilterAmount) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(includeNotRentedSince) ^
      const DeepCollectionEquality().hash(notRentedSinceDate) ^
      const DeepCollectionEquality().hash(includeZeroOwned) ^
      const DeepCollectionEquality().hash(showStagedAndOut) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest
      copyWith(
          {bool? includePeriodRevenue,
          DateTime? revenueFromDate,
          DateTime? revenueToDate,
          String? revenueFilterMode,
          double? revenueFilterAmount,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          bool? includeNotRentedSince,
          DateTime? notRentedSinceDate,
          bool? includeZeroOwned,
          bool? showStagedAndOut,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryStatusAndRevenueReportRentalInventoryStatusAndRevenueReportRequest(
        includePeriodRevenue: includePeriodRevenue ?? this.includePeriodRevenue,
        revenueFromDate: revenueFromDate ?? this.revenueFromDate,
        revenueToDate: revenueToDate ?? this.revenueToDate,
        revenueFilterMode: revenueFilterMode ?? this.revenueFilterMode,
        revenueFilterAmount: revenueFilterAmount ?? this.revenueFilterAmount,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        includeNotRentedSince:
            includeNotRentedSince ?? this.includeNotRentedSince,
        notRentedSinceDate: notRentedSinceDate ?? this.notRentedSinceDate,
        includeZeroOwned: includeZeroOwned ?? this.includeZeroOwned,
        showStagedAndOut: showStagedAndOut ?? this.showStagedAndOut,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest({
    this.asOfDate,
    this.includeZeroQuantity,
    this.daysUnused,
    this.warehouseId,
    this.departmentId,
    this.dealId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.trackedBys,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequestFromJson(
          json);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(name: 'IncludeZeroQuantity', includeIfNull: false)
  final bool? includeZeroQuantity;
  @JsonKey(name: 'DaysUnused', includeIfNull: false)
  final int? daysUnused;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.includeZeroQuantity, includeZeroQuantity) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroQuantity, includeZeroQuantity)) &&
            (identical(other.daysUnused, daysUnused) ||
                const DeepCollectionEquality()
                    .equals(other.daysUnused, daysUnused)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(includeZeroQuantity) ^
      const DeepCollectionEquality().hash(daysUnused) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest
      copyWith(
          {DateTime? asOfDate,
          bool? includeZeroQuantity,
          int? daysUnused,
          String? warehouseId,
          String? departmentId,
          String? dealId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryUnusedItemsReportRentalInventoryUnusedItemsReportRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        includeZeroQuantity: includeZeroQuantity ?? this.includeZeroQuantity,
        daysUnused: daysUnused ?? this.daysUnused,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        dealId: dealId ?? this.dealId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        trackedBys: trackedBys ?? this.trackedBys,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest({
    this.fromDate,
    this.toDate,
    this.utilizationFilterMode,
    this.utilizationFilterAmount,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.excludeZeroOwned,
    this.filterDatesByUtilizationPercent,
    this.onlyIncludeItemsThatAreTheMainItemOfAComplete,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'UtilizationFilterMode', includeIfNull: false)
  final String? utilizationFilterMode;
  @JsonKey(name: 'UtilizationFilterAmount', includeIfNull: false)
  final double? utilizationFilterAmount;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'ExcludeZeroOwned', includeIfNull: false)
  final bool? excludeZeroOwned;
  @JsonKey(name: 'FilterDatesByUtilizationPercent', includeIfNull: false)
  final bool? filterDatesByUtilizationPercent;
  @JsonKey(
      name: 'OnlyIncludeItemsThatAreTheMainItemOfAComplete',
      includeIfNull: false)
  final bool? onlyIncludeItemsThatAreTheMainItemOfAComplete;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.utilizationFilterMode, utilizationFilterMode) ||
                const DeepCollectionEquality().equals(
                    other.utilizationFilterMode, utilizationFilterMode)) &&
            (identical(other.utilizationFilterAmount, utilizationFilterAmount) ||
                const DeepCollectionEquality().equals(
                    other.utilizationFilterAmount, utilizationFilterAmount)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.excludeZeroOwned, excludeZeroOwned) ||
                const DeepCollectionEquality()
                    .equals(other.excludeZeroOwned, excludeZeroOwned)) &&
            (identical(other.filterDatesByUtilizationPercent, filterDatesByUtilizationPercent) ||
                const DeepCollectionEquality().equals(
                    other.filterDatesByUtilizationPercent,
                    filterDatesByUtilizationPercent)) &&
            (identical(other.onlyIncludeItemsThatAreTheMainItemOfAComplete, onlyIncludeItemsThatAreTheMainItemOfAComplete) ||
                const DeepCollectionEquality().equals(
                    other.onlyIncludeItemsThatAreTheMainItemOfAComplete,
                    onlyIncludeItemsThatAreTheMainItemOfAComplete)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(utilizationFilterMode) ^
      const DeepCollectionEquality().hash(utilizationFilterAmount) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(excludeZeroOwned) ^
      const DeepCollectionEquality().hash(filterDatesByUtilizationPercent) ^
      const DeepCollectionEquality()
          .hash(onlyIncludeItemsThatAreTheMainItemOfAComplete) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? utilizationFilterMode,
          double? utilizationFilterAmount,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          bool? excludeZeroOwned,
          bool? filterDatesByUtilizationPercent,
          bool? onlyIncludeItemsThatAreTheMainItemOfAComplete,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryUsageReportRentalInventoryUsageReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        utilizationFilterMode:
            utilizationFilterMode ?? this.utilizationFilterMode,
        utilizationFilterAmount:
            utilizationFilterAmount ?? this.utilizationFilterAmount,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        excludeZeroOwned: excludeZeroOwned ?? this.excludeZeroOwned,
        filterDatesByUtilizationPercent: filterDatesByUtilizationPercent ??
            this.filterDatesByUtilizationPercent,
        onlyIncludeItemsThatAreTheMainItemOfAComplete:
            onlyIncludeItemsThatAreTheMainItemOfAComplete ??
                this.onlyIncludeItemsThatAreTheMainItemOfAComplete,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest({
    this.fromDate,
    this.toDate,
    this.includeOwned,
    this.includeConsigned,
    this.includeZeroQuantity,
    this.groupByICode,
    this.quantityValueBasedOn,
    this.serializedValueBasedOn,
    this.ranks,
    this.trackedBys,
    this.summary,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IncludeOwned', includeIfNull: false)
  final bool? includeOwned;
  @JsonKey(name: 'IncludeConsigned', includeIfNull: false)
  final bool? includeConsigned;
  @JsonKey(name: 'IncludeZeroQuantity', includeIfNull: false)
  final bool? includeZeroQuantity;
  @JsonKey(name: 'GroupByICode', includeIfNull: false)
  final bool? groupByICode;
  @JsonKey(name: 'QuantityValueBasedOn', includeIfNull: false)
  final String? quantityValueBasedOn;
  @JsonKey(name: 'SerializedValueBasedOn', includeIfNull: false)
  final String? serializedValueBasedOn;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'Summary', includeIfNull: false)
  final bool? summary;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.includeOwned, includeOwned) ||
                const DeepCollectionEquality()
                    .equals(other.includeOwned, includeOwned)) &&
            (identical(other.includeConsigned, includeConsigned) ||
                const DeepCollectionEquality()
                    .equals(other.includeConsigned, includeConsigned)) &&
            (identical(other.includeZeroQuantity, includeZeroQuantity) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroQuantity, includeZeroQuantity)) &&
            (identical(other.groupByICode, groupByICode) ||
                const DeepCollectionEquality()
                    .equals(other.groupByICode, groupByICode)) &&
            (identical(other.quantityValueBasedOn, quantityValueBasedOn) ||
                const DeepCollectionEquality().equals(
                    other.quantityValueBasedOn, quantityValueBasedOn)) &&
            (identical(other.serializedValueBasedOn, serializedValueBasedOn) ||
                const DeepCollectionEquality().equals(
                    other.serializedValueBasedOn, serializedValueBasedOn)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.summary, summary) ||
                const DeepCollectionEquality()
                    .equals(other.summary, summary)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(includeOwned) ^
      const DeepCollectionEquality().hash(includeConsigned) ^
      const DeepCollectionEquality().hash(includeZeroQuantity) ^
      const DeepCollectionEquality().hash(groupByICode) ^
      const DeepCollectionEquality().hash(quantityValueBasedOn) ^
      const DeepCollectionEquality().hash(serializedValueBasedOn) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(summary) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? includeOwned,
          bool? includeConsigned,
          bool? includeZeroQuantity,
          bool? groupByICode,
          String? quantityValueBasedOn,
          String? serializedValueBasedOn,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          bool? summary,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsRentalInventoryValueReportRentalInventoryValueReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        includeOwned: includeOwned ?? this.includeOwned,
        includeConsigned: includeConsigned ?? this.includeConsigned,
        includeZeroQuantity: includeZeroQuantity ?? this.includeZeroQuantity,
        groupByICode: groupByICode ?? this.groupByICode,
        quantityValueBasedOn: quantityValueBasedOn ?? this.quantityValueBasedOn,
        serializedValueBasedOn:
            serializedValueBasedOn ?? this.serializedValueBasedOn,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        summary: summary ?? this.summary,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest({
    this.fromDate,
    this.toDate,
    this.excludeRetiredItems,
    this.excludeUnretiredItems,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.customerId,
    this.dealId,
    this.retiredReasonId,
    this.unretiredReasonId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'ExcludeRetiredItems', includeIfNull: false)
  final bool? excludeRetiredItems;
  @JsonKey(name: 'ExcludeUnretiredItems', includeIfNull: false)
  final bool? excludeUnretiredItems;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'RetiredReasonId', includeIfNull: false)
  final String? retiredReasonId;
  @JsonKey(name: 'UnretiredReasonId', includeIfNull: false)
  final String? unretiredReasonId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.excludeRetiredItems, excludeRetiredItems) ||
                const DeepCollectionEquality()
                    .equals(other.excludeRetiredItems, excludeRetiredItems)) &&
            (identical(other.excludeUnretiredItems, excludeUnretiredItems) ||
                const DeepCollectionEquality().equals(
                    other.excludeUnretiredItems, excludeUnretiredItems)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.retiredReasonId, retiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.retiredReasonId, retiredReasonId)) &&
            (identical(other.unretiredReasonId, unretiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.unretiredReasonId, unretiredReasonId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(excludeRetiredItems) ^
      const DeepCollectionEquality().hash(excludeUnretiredItems) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(retiredReasonId) ^
      const DeepCollectionEquality().hash(unretiredReasonId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? excludeRetiredItems,
          bool? excludeUnretiredItems,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          String? customerId,
          String? dealId,
          String? retiredReasonId,
          String? unretiredReasonId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsRentalLostAndDamagedBillingHistoryReportRentalLostAndDamagedBillingHistoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        excludeRetiredItems: excludeRetiredItems ?? this.excludeRetiredItems,
        excludeUnretiredItems:
            excludeUnretiredItems ?? this.excludeUnretiredItems,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        retiredReasonId: retiredReasonId ?? this.retiredReasonId,
        unretiredReasonId: unretiredReasonId ?? this.unretiredReasonId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest({
    this.fromDate,
    this.toDate,
    this.includeUnretired,
    this.ranks,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.customerId,
    this.dealId,
    this.retiredReasonId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'IncludeUnretired', includeIfNull: false)
  final bool? includeUnretired;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'RetiredReasonId', includeIfNull: false)
  final String? retiredReasonId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.includeUnretired, includeUnretired) ||
                const DeepCollectionEquality()
                    .equals(other.includeUnretired, includeUnretired)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.retiredReasonId, retiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.retiredReasonId, retiredReasonId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(includeUnretired) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(retiredReasonId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? includeUnretired,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? customerId,
          String? dealId,
          String? retiredReasonId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsRetiredRentalInventoryReportRetiredRentalInventoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        includeUnretired: includeUnretired ?? this.includeUnretired,
        ranks: ranks ?? this.ranks,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        retiredReasonId: retiredReasonId ?? this.retiredReasonId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.dealId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.userId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UserId', includeIfNull: false)
  final String? userId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.userId, userId) ||
                const DeepCollectionEquality().equals(other.userId, userId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(userId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? dealId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? userId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsReturnedToInventoryReportReturnedToInventoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        dealId: dealId ?? this.dealId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        userId: userId ?? this.userId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest {
  WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest({
    this.usePeriodSelector,
    this.reportYear,
    this.reportPeriod,
    this.useDateRange,
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.ranks,
    this.trackedBys,
    this.includeZeroCurrentOwned,
    this.includeZeroAverageOwned,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequestFromJson(
          json);

  @JsonKey(name: 'UsePeriodSelector', includeIfNull: false)
  final bool? usePeriodSelector;
  @JsonKey(name: 'ReportYear', includeIfNull: false)
  final String? reportYear;
  @JsonKey(name: 'ReportPeriod', includeIfNull: false)
  final String? reportPeriod;
  @JsonKey(name: 'UseDateRange', includeIfNull: false)
  final bool? useDateRange;
  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(name: 'IncludeZeroCurrentOwned', includeIfNull: false)
  final bool? includeZeroCurrentOwned;
  @JsonKey(name: 'IncludeZeroAverageOwned', includeIfNull: false)
  final bool? includeZeroAverageOwned;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest &&
            (identical(other.usePeriodSelector, usePeriodSelector) ||
                const DeepCollectionEquality()
                    .equals(other.usePeriodSelector, usePeriodSelector)) &&
            (identical(other.reportYear, reportYear) ||
                const DeepCollectionEquality()
                    .equals(other.reportYear, reportYear)) &&
            (identical(other.reportPeriod, reportPeriod) ||
                const DeepCollectionEquality()
                    .equals(other.reportPeriod, reportPeriod)) &&
            (identical(other.useDateRange, useDateRange) ||
                const DeepCollectionEquality()
                    .equals(other.useDateRange, useDateRange)) &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.includeZeroCurrentOwned, includeZeroCurrentOwned) ||
                const DeepCollectionEquality().equals(
                    other.includeZeroCurrentOwned, includeZeroCurrentOwned)) &&
            (identical(other.includeZeroAverageOwned, includeZeroAverageOwned) ||
                const DeepCollectionEquality().equals(
                    other.includeZeroAverageOwned, includeZeroAverageOwned)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(usePeriodSelector) ^
      const DeepCollectionEquality().hash(reportYear) ^
      const DeepCollectionEquality().hash(reportPeriod) ^
      const DeepCollectionEquality().hash(useDateRange) ^
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(includeZeroCurrentOwned) ^
      const DeepCollectionEquality().hash(includeZeroAverageOwned) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest {
  WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest
      copyWith(
          {bool? usePeriodSelector,
          String? reportYear,
          String? reportPeriod,
          bool? useDateRange,
          DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          bool? includeZeroCurrentOwned,
          bool? includeZeroAverageOwned,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsReturnOnAssetReportReturnOnAssetReportRequest(
        usePeriodSelector: usePeriodSelector ?? this.usePeriodSelector,
        reportYear: reportYear ?? this.reportYear,
        reportPeriod: reportPeriod ?? this.reportPeriod,
        useDateRange: useDateRange ?? this.useDateRange,
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        trackedBys: trackedBys ?? this.trackedBys,
        includeZeroCurrentOwned:
            includeZeroCurrentOwned ?? this.includeZeroCurrentOwned,
        includeZeroAverageOwned:
            includeZeroAverageOwned ?? this.includeZeroAverageOwned,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.unretiredReasonId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'UnretiredReasonId', includeIfNull: false)
  final String? unretiredReasonId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.unretiredReasonId, unretiredReasonId) ||
                const DeepCollectionEquality()
                    .equals(other.unretiredReasonId, unretiredReasonId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(unretiredReasonId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? unretiredReasonId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsUnretiredRentalInventoryReportUnretiredRentalInventoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        unretiredReasonId: unretiredReasonId ?? this.unretiredReasonId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest({
    this.asOfDate,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.ownershipTypes,
    this.trackedBys,
    this.ranks,
    this.fixedAsset,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequestFromJson(
          json);

  @JsonKey(name: 'AsOfDate', includeIfNull: false)
  final DateTime? asOfDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'OwnershipTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'FixedAsset',
      includeIfNull: false,
      toJson: webApiIncludeExcludeAllToJson,
      fromJson: webApiIncludeExcludeAllFromJson)
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest &&
            (identical(other.asOfDate, asOfDate) ||
                const DeepCollectionEquality()
                    .equals(other.asOfDate, asOfDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ownershipTypes, ownershipTypes) ||
                const DeepCollectionEquality()
                    .equals(other.ownershipTypes, ownershipTypes)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(asOfDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ownershipTypes) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequestExtension
    on WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest {
  WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest
      copyWith(
          {DateTime? asOfDate,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ownershipTypes,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRentalInventoryReportsValueOfOutRentalInventoryReportValueOfOutRentalInventoryReportRequest(
        asOfDate: asOfDate ?? this.asOfDate,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ownershipTypes: ownershipTypes ?? this.ownershipTypes,
        trackedBys: trackedBys ?? this.trackedBys,
        ranks: ranks ?? this.ranks,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest {
  WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest({
    this.repairOrderStatus,
    this.priority,
    this.billable,
    this.billed,
    this.owned,
    this.daysInRepair,
    this.daysInRepairFilterMode,
    this.includeOutsideRepairsOnly,
    this.includeDamageNotes,
    this.warehouseId,
    this.departmentId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.repairItemStatusId,
    this.vendorId,
    this.vendorRepairItemStatusId,
    this.dealId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequestFromJson(
          json);

  @JsonKey(
      name: 'RepairOrderStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? repairOrderStatus;
  @JsonKey(
      name: 'Priority',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? priority;
  @JsonKey(name: 'Billable', includeIfNull: false)
  final bool? billable;
  @JsonKey(name: 'Billed', includeIfNull: false)
  final bool? billed;
  @JsonKey(name: 'Owned', includeIfNull: false)
  final bool? owned;
  @JsonKey(name: 'DaysInRepair', includeIfNull: false)
  final int? daysInRepair;
  @JsonKey(name: 'DaysInRepairFilterMode', includeIfNull: false)
  final String? daysInRepairFilterMode;
  @JsonKey(name: 'IncludeOutsideRepairsOnly', includeIfNull: false)
  final bool? includeOutsideRepairsOnly;
  @JsonKey(name: 'IncludeDamageNotes', includeIfNull: false)
  final bool? includeDamageNotes;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'RepairItemStatusId', includeIfNull: false)
  final String? repairItemStatusId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'VendorRepairItemStatusId', includeIfNull: false)
  final String? vendorRepairItemStatusId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest &&
            (identical(other.repairOrderStatus, repairOrderStatus) ||
                const DeepCollectionEquality()
                    .equals(other.repairOrderStatus, repairOrderStatus)) &&
            (identical(other.priority, priority) ||
                const DeepCollectionEquality()
                    .equals(other.priority, priority)) &&
            (identical(other.billable, billable) ||
                const DeepCollectionEquality()
                    .equals(other.billable, billable)) &&
            (identical(other.billed, billed) ||
                const DeepCollectionEquality().equals(other.billed, billed)) &&
            (identical(other.owned, owned) ||
                const DeepCollectionEquality().equals(other.owned, owned)) &&
            (identical(other.daysInRepair, daysInRepair) ||
                const DeepCollectionEquality()
                    .equals(other.daysInRepair, daysInRepair)) &&
            (identical(other.daysInRepairFilterMode, daysInRepairFilterMode) ||
                const DeepCollectionEquality().equals(
                    other.daysInRepairFilterMode, daysInRepairFilterMode)) &&
            (identical(other.includeOutsideRepairsOnly, includeOutsideRepairsOnly) ||
                const DeepCollectionEquality().equals(
                    other.includeOutsideRepairsOnly,
                    includeOutsideRepairsOnly)) &&
            (identical(other.includeDamageNotes, includeDamageNotes) ||
                const DeepCollectionEquality()
                    .equals(other.includeDamageNotes, includeDamageNotes)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.repairItemStatusId, repairItemStatusId) || const DeepCollectionEquality().equals(other.repairItemStatusId, repairItemStatusId)) &&
            (identical(other.vendorId, vendorId) || const DeepCollectionEquality().equals(other.vendorId, vendorId)) &&
            (identical(other.vendorRepairItemStatusId, vendorRepairItemStatusId) || const DeepCollectionEquality().equals(other.vendorRepairItemStatusId, vendorRepairItemStatusId)) &&
            (identical(other.dealId, dealId) || const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) || const DeepCollectionEquality().equals(other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) || const DeepCollectionEquality().equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) || const DeepCollectionEquality().equals(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(repairOrderStatus) ^
      const DeepCollectionEquality().hash(priority) ^
      const DeepCollectionEquality().hash(billable) ^
      const DeepCollectionEquality().hash(billed) ^
      const DeepCollectionEquality().hash(owned) ^
      const DeepCollectionEquality().hash(daysInRepair) ^
      const DeepCollectionEquality().hash(daysInRepairFilterMode) ^
      const DeepCollectionEquality().hash(includeOutsideRepairsOnly) ^
      const DeepCollectionEquality().hash(includeDamageNotes) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(repairItemStatusId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(vendorRepairItemStatusId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequestExtension
    on WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest {
  WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest
      copyWith(
          {List<FwStandardModelsSelectedCheckBoxListItem>? repairOrderStatus,
          List<FwStandardModelsSelectedCheckBoxListItem>? priority,
          bool? billable,
          bool? billed,
          bool? owned,
          int? daysInRepair,
          String? daysInRepairFilterMode,
          bool? includeOutsideRepairsOnly,
          bool? includeDamageNotes,
          String? warehouseId,
          String? departmentId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? repairItemStatusId,
          String? vendorId,
          String? vendorRepairItemStatusId,
          String? dealId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRepairOrderReportsRepairOrderStatusReportRepairOrderStatusReportRequest(
        repairOrderStatus: repairOrderStatus ?? this.repairOrderStatus,
        priority: priority ?? this.priority,
        billable: billable ?? this.billable,
        billed: billed ?? this.billed,
        owned: owned ?? this.owned,
        daysInRepair: daysInRepair ?? this.daysInRepair,
        daysInRepairFilterMode:
            daysInRepairFilterMode ?? this.daysInRepairFilterMode,
        includeOutsideRepairsOnly:
            includeOutsideRepairsOnly ?? this.includeOutsideRepairsOnly,
        includeDamageNotes: includeDamageNotes ?? this.includeDamageNotes,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        repairItemStatusId: repairItemStatusId ?? this.repairItemStatusId,
        vendorId: vendorId ?? this.vendorId,
        vendorRepairItemStatusId:
            vendorRepairItemStatusId ?? this.vendorRepairItemStatusId,
        dealId: dealId ?? this.dealId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest {
  WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest({
    this.repairId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequestFromJson(
          json);

  @JsonKey(name: 'RepairId', includeIfNull: false)
  final String? repairId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest &&
            (identical(other.repairId, repairId) ||
                const DeepCollectionEquality()
                    .equals(other.repairId, repairId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(repairId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequestExtension
    on WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest {
  WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest copyWith(
      {String? repairId,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRepairOrderReportsRepairTagRepairTagRequest(
        repairId: repairId ?? this.repairId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest {
  WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest({
    this.repairId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequestFromJson(
          json);

  @JsonKey(name: 'RepairId', includeIfNull: false)
  final String? repairId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest &&
            (identical(other.repairId, repairId) ||
                const DeepCollectionEquality()
                    .equals(other.repairId, repairId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(repairId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequestExtension
    on WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest {
  WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest
      copyWith(
          {String? repairId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsRepairReportsRepairOrderReportRepairOrderReportRequest(
        repairId: repairId ?? this.repairId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest({
    this.vendorId,
    this.dealId,
    this.warehouseId,
    this.inventoryTypeId,
    this.customerId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequestFromJson(
          json);

  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequestExtension
    on WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest
      copyWith(
          {String? vendorId,
          String? dealId,
          String? warehouseId,
          String? inventoryTypeId,
          String? customerId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsSalesInventoryReportsSalesBackorderReportSalesBackorderReportRequest(
        vendorId: vendorId ?? this.vendorId,
        dealId: dealId ?? this.dealId,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        customerId: customerId ?? this.customerId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest({
    this.fromDate,
    this.toDate,
    this.summary,
    this.includeSalesTax,
    this.statuses,
    this.officeLocationId,
    this.warehouseId,
    this.departmentId,
    this.customerId,
    this.dealId,
    this.orderId,
    this.vendorId,
    this.inventoryTypeId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'Summary', includeIfNull: false)
  final bool? summary;
  @JsonKey(name: 'IncludeSalesTax', includeIfNull: false)
  final bool? includeSalesTax;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.summary, summary) ||
                const DeepCollectionEquality()
                    .equals(other.summary, summary)) &&
            (identical(other.includeSalesTax, includeSalesTax) ||
                const DeepCollectionEquality()
                    .equals(other.includeSalesTax, includeSalesTax)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(summary) ^
      const DeepCollectionEquality().hash(includeSalesTax) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequestExtension
    on WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          bool? summary,
          bool? includeSalesTax,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? officeLocationId,
          String? warehouseId,
          String? departmentId,
          String? customerId,
          String? dealId,
          String? orderId,
          String? vendorId,
          String? inventoryTypeId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsSalesInventoryReportsSalesHistoryReportSalesHistoryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        summary: summary ?? this.summary,
        includeSalesTax: includeSalesTax ?? this.includeSalesTax,
        statuses: statuses ?? this.statuses,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        vendorId: vendorId ?? this.vendorId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest({
    this.includePeriodRevenue,
    this.revenueFromDate,
    this.revenueToDate,
    this.revenueFilterMode,
    this.revenueFilterAmount,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.inventoryId,
    this.ranks,
    this.excludeZeroOwned,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequestFromJson(
          json);

  @JsonKey(name: 'IncludePeriodRevenue', includeIfNull: false)
  final bool? includePeriodRevenue;
  @JsonKey(name: 'RevenueFromDate', includeIfNull: false)
  final DateTime? revenueFromDate;
  @JsonKey(name: 'RevenueToDate', includeIfNull: false)
  final DateTime? revenueToDate;
  @JsonKey(name: 'RevenueFilterMode', includeIfNull: false)
  final String? revenueFilterMode;
  @JsonKey(name: 'RevenueFilterAmount', includeIfNull: false)
  final double? revenueFilterAmount;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(name: 'ExcludeZeroOwned', includeIfNull: false)
  final bool? excludeZeroOwned;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest &&
            (identical(other.includePeriodRevenue, includePeriodRevenue) ||
                const DeepCollectionEquality().equals(
                    other.includePeriodRevenue, includePeriodRevenue)) &&
            (identical(other.revenueFromDate, revenueFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFromDate, revenueFromDate)) &&
            (identical(other.revenueToDate, revenueToDate) ||
                const DeepCollectionEquality()
                    .equals(other.revenueToDate, revenueToDate)) &&
            (identical(other.revenueFilterMode, revenueFilterMode) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFilterMode, revenueFilterMode)) &&
            (identical(other.revenueFilterAmount, revenueFilterAmount) ||
                const DeepCollectionEquality()
                    .equals(other.revenueFilterAmount, revenueFilterAmount)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.excludeZeroOwned, excludeZeroOwned) ||
                const DeepCollectionEquality()
                    .equals(other.excludeZeroOwned, excludeZeroOwned)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(includePeriodRevenue) ^
      const DeepCollectionEquality().hash(revenueFromDate) ^
      const DeepCollectionEquality().hash(revenueToDate) ^
      const DeepCollectionEquality().hash(revenueFilterMode) ^
      const DeepCollectionEquality().hash(revenueFilterAmount) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(excludeZeroOwned) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequestExtension
    on WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest
      copyWith(
          {bool? includePeriodRevenue,
          DateTime? revenueFromDate,
          DateTime? revenueToDate,
          String? revenueFilterMode,
          double? revenueFilterAmount,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          bool? excludeZeroOwned,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsSalesInventoryReportsSalesInventoryMasterReportSalesInventoryMasterReportRequest(
        includePeriodRevenue: includePeriodRevenue ?? this.includePeriodRevenue,
        revenueFromDate: revenueFromDate ?? this.revenueFromDate,
        revenueToDate: revenueToDate ?? this.revenueToDate,
        revenueFilterMode: revenueFilterMode ?? this.revenueFilterMode,
        revenueFilterAmount: revenueFilterAmount ?? this.revenueFilterAmount,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        ranks: ranks ?? this.ranks,
        excludeZeroOwned: excludeZeroOwned ?? this.excludeZeroOwned,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest({
    this.reorderPointMode,
    this.includeZeroReorderPoint,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequestFromJson(
          json);

  @JsonKey(name: 'ReorderPointMode', includeIfNull: false)
  final String? reorderPointMode;
  @JsonKey(name: 'IncludeZeroReorderPoint', includeIfNull: false)
  final bool? includeZeroReorderPoint;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest &&
            (identical(other.reorderPointMode, reorderPointMode) ||
                const DeepCollectionEquality()
                    .equals(other.reorderPointMode, reorderPointMode)) &&
            (identical(other.includeZeroReorderPoint, includeZeroReorderPoint) ||
                const DeepCollectionEquality().equals(
                    other.includeZeroReorderPoint, includeZeroReorderPoint)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(reorderPointMode) ^
      const DeepCollectionEquality().hash(includeZeroReorderPoint) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequestExtension
    on WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest {
  WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest
      copyWith(
          {String? reorderPointMode,
          bool? includeZeroReorderPoint,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsSalesInventoryReportsSalesInventoryReorderReportSalesInventoryReorderReportRequest(
        reorderPointMode: reorderPointMode ?? this.reorderPointMode,
        includeZeroReorderPoint:
            includeZeroReorderPoint ?? this.includeZeroReorderPoint,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest {
  WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest({
    this.sortBy,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.attributeId,
    this.fixedAsset,
    this.ranks,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequestFromJson(
          json);

  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'AttributeId', includeIfNull: false)
  final String? attributeId;
  @JsonKey(
      name: 'FixedAsset',
      includeIfNull: false,
      toJson: webApiIncludeExcludeAllToJson,
      fromJson: webApiIncludeExcludeAllFromJson)
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.attributeId, attributeId) ||
                const DeepCollectionEquality()
                    .equals(other.attributeId, attributeId)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(attributeId) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequestExtension
    on WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest {
  WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest
      copyWith(
          {List<FwStandardModelsCheckBoxListItem>? sortBy,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? attributeId,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsSharedInventoryAttributesReportInventoryAttributesReportRequest(
        sortBy: sortBy ?? this.sortBy,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        attributeId: attributeId ?? this.attributeId,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        ranks: ranks ?? this.ranks,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest {
  WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest({
    this.classifications,
    this.trackedBys,
    this.ranks,
    this.fixedAsset,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.warehouseCatalogId,
    this.includeZeroQuantity,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequestFromJson(
          json);

  @JsonKey(
      name: 'Classifications',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? classifications;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(
      name: 'FixedAsset',
      includeIfNull: false,
      toJson: webApiIncludeExcludeAllToJson,
      fromJson: webApiIncludeExcludeAllFromJson)
  final enums.WebApiIncludeExcludeAll? fixedAsset;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'WarehouseCatalogId', includeIfNull: false)
  final String? warehouseCatalogId;
  @JsonKey(name: 'IncludeZeroQuantity', includeIfNull: false)
  final bool? includeZeroQuantity;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest &&
            (identical(other.classifications, classifications) ||
                const DeepCollectionEquality()
                    .equals(other.classifications, classifications)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.fixedAsset, fixedAsset) ||
                const DeepCollectionEquality()
                    .equals(other.fixedAsset, fixedAsset)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.warehouseCatalogId, warehouseCatalogId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseCatalogId, warehouseCatalogId)) &&
            (identical(other.includeZeroQuantity, includeZeroQuantity) ||
                const DeepCollectionEquality()
                    .equals(other.includeZeroQuantity, includeZeroQuantity)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(classifications) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(fixedAsset) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(warehouseCatalogId) ^
      const DeepCollectionEquality().hash(includeZeroQuantity) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequestExtension
    on WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest {
  WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest
      copyWith(
          {List<FwStandardModelsSelectedCheckBoxListItem>? classifications,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          enums.WebApiIncludeExcludeAll? fixedAsset,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? warehouseCatalogId,
          bool? includeZeroQuantity,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsSharedInventoryCatalogReportInventoryCatalogReportRequest(
        classifications: classifications ?? this.classifications,
        trackedBys: trackedBys ?? this.trackedBys,
        ranks: ranks ?? this.ranks,
        fixedAsset: fixedAsset ?? this.fixedAsset,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        warehouseCatalogId: warehouseCatalogId ?? this.warehouseCatalogId,
        includeZeroQuantity: includeZeroQuantity ?? this.includeZeroQuantity,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest {
  WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest({
    this.purchasedFromDate,
    this.purchasedToDate,
    this.receivedFromDate,
    this.receivedToDate,
    this.trackedBys,
    this.ranks,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequestFromJson(
          json);

  @JsonKey(name: 'PurchasedFromDate', includeIfNull: false)
  final DateTime? purchasedFromDate;
  @JsonKey(name: 'PurchasedToDate', includeIfNull: false)
  final DateTime? purchasedToDate;
  @JsonKey(name: 'ReceivedFromDate', includeIfNull: false)
  final DateTime? receivedFromDate;
  @JsonKey(name: 'ReceivedToDate', includeIfNull: false)
  final DateTime? receivedToDate;
  @JsonKey(
      name: 'TrackedBys',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys;
  @JsonKey(
      name: 'Ranks',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? ranks;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest &&
            (identical(other.purchasedFromDate, purchasedFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.purchasedFromDate, purchasedFromDate)) &&
            (identical(other.purchasedToDate, purchasedToDate) ||
                const DeepCollectionEquality()
                    .equals(other.purchasedToDate, purchasedToDate)) &&
            (identical(other.receivedFromDate, receivedFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.receivedFromDate, receivedFromDate)) &&
            (identical(other.receivedToDate, receivedToDate) ||
                const DeepCollectionEquality()
                    .equals(other.receivedToDate, receivedToDate)) &&
            (identical(other.trackedBys, trackedBys) ||
                const DeepCollectionEquality()
                    .equals(other.trackedBys, trackedBys)) &&
            (identical(other.ranks, ranks) ||
                const DeepCollectionEquality().equals(other.ranks, ranks)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(purchasedFromDate) ^
      const DeepCollectionEquality().hash(purchasedToDate) ^
      const DeepCollectionEquality().hash(receivedFromDate) ^
      const DeepCollectionEquality().hash(receivedToDate) ^
      const DeepCollectionEquality().hash(trackedBys) ^
      const DeepCollectionEquality().hash(ranks) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequestExtension
    on WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest {
  WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest
      copyWith(
          {DateTime? purchasedFromDate,
          DateTime? purchasedToDate,
          DateTime? receivedFromDate,
          DateTime? receivedToDate,
          List<FwStandardModelsSelectedCheckBoxListItem>? trackedBys,
          List<FwStandardModelsSelectedCheckBoxListItem>? ranks,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsSharedInventoryPurchaseHistoryReportInventoryPurchaseHistoryReportRequest(
        purchasedFromDate: purchasedFromDate ?? this.purchasedFromDate,
        purchasedToDate: purchasedToDate ?? this.purchasedToDate,
        receivedFromDate: receivedFromDate ?? this.receivedFromDate,
        receivedToDate: receivedToDate ?? this.receivedToDate,
        trackedBys: trackedBys ?? this.trackedBys,
        ranks: ranks ?? this.ranks,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest {
  WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest({
    this.fromDate,
    this.toDate,
    this.transactionTypes,
    this.warehouseId,
    this.inventoryTypeId,
    this.categoryId,
    this.subCategoryId,
    this.inventoryId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(
      name: 'TransactionTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? transactionTypes;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'InventoryTypeId', includeIfNull: false)
  final String? inventoryTypeId;
  @JsonKey(name: 'CategoryId', includeIfNull: false)
  final String? categoryId;
  @JsonKey(name: 'SubCategoryId', includeIfNull: false)
  final String? subCategoryId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.transactionTypes, transactionTypes) ||
                const DeepCollectionEquality()
                    .equals(other.transactionTypes, transactionTypes)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.inventoryTypeId, inventoryTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryTypeId, inventoryTypeId)) &&
            (identical(other.categoryId, categoryId) ||
                const DeepCollectionEquality()
                    .equals(other.categoryId, categoryId)) &&
            (identical(other.subCategoryId, subCategoryId) ||
                const DeepCollectionEquality()
                    .equals(other.subCategoryId, subCategoryId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(transactionTypes) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(inventoryTypeId) ^
      const DeepCollectionEquality().hash(categoryId) ^
      const DeepCollectionEquality().hash(subCategoryId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequestExtension
    on WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest {
  WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          List<FwStandardModelsSelectedCheckBoxListItem>? transactionTypes,
          String? warehouseId,
          String? inventoryTypeId,
          String? categoryId,
          String? subCategoryId,
          String? inventoryId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsSharedInventoryTransactionReportInventoryTransactionReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        transactionTypes: transactionTypes ?? this.transactionTypes,
        warehouseId: warehouseId ?? this.warehouseId,
        inventoryTypeId: inventoryTypeId ?? this.inventoryTypeId,
        categoryId: categoryId ?? this.categoryId,
        subCategoryId: subCategoryId ?? this.subCategoryId,
        inventoryId: inventoryId ?? this.inventoryId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedReportSettingsReportSettings {
  WebApiModulesReportsSharedReportSettingsReportSettings({
    this.id,
    this.webUserId,
    this.reportName,
    this.description,
    this.settings,
    this.excelSettings,
    this.dateStamp,
    this.recordTitle,
    this.fields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesReportsSharedReportSettingsReportSettings.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedReportSettingsReportSettingsFromJson(json);

  @JsonKey(name: 'Id', includeIfNull: false)
  final int? id;
  @JsonKey(name: 'WebUserId', includeIfNull: false)
  final String? webUserId;
  @JsonKey(name: 'ReportName', includeIfNull: false)
  final String? reportName;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Settings', includeIfNull: false)
  final String? settings;
  @JsonKey(name: 'ExcelSettings', includeIfNull: false)
  final String? excelSettings;
  @JsonKey(name: 'DateStamp', includeIfNull: false)
  final String? dateStamp;
  @JsonKey(name: 'RecordTitle', includeIfNull: false)
  final String? recordTitle;
  @JsonKey(
      name: '_Fields',
      includeIfNull: false,
      defaultValue: <FwStandardBusinessLogicFwBusinessLogicFieldDefinition>[])
  final List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedReportSettingsReportSettingsFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsSharedReportSettingsReportSettingsToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedReportSettingsReportSettingsToJson(this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedReportSettingsReportSettings &&
            (identical(other.id, id) ||
                const DeepCollectionEquality().equals(other.id, id)) &&
            (identical(other.webUserId, webUserId) ||
                const DeepCollectionEquality()
                    .equals(other.webUserId, webUserId)) &&
            (identical(other.reportName, reportName) ||
                const DeepCollectionEquality()
                    .equals(other.reportName, reportName)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.settings, settings) ||
                const DeepCollectionEquality()
                    .equals(other.settings, settings)) &&
            (identical(other.excelSettings, excelSettings) ||
                const DeepCollectionEquality()
                    .equals(other.excelSettings, excelSettings)) &&
            (identical(other.dateStamp, dateStamp) ||
                const DeepCollectionEquality()
                    .equals(other.dateStamp, dateStamp)) &&
            (identical(other.recordTitle, recordTitle) ||
                const DeepCollectionEquality()
                    .equals(other.recordTitle, recordTitle)) &&
            (identical(other.fields, fields) ||
                const DeepCollectionEquality().equals(other.fields, fields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(id) ^
      const DeepCollectionEquality().hash(webUserId) ^
      const DeepCollectionEquality().hash(reportName) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(settings) ^
      const DeepCollectionEquality().hash(excelSettings) ^
      const DeepCollectionEquality().hash(dateStamp) ^
      const DeepCollectionEquality().hash(recordTitle) ^
      const DeepCollectionEquality().hash(fields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedReportSettingsReportSettingsExtension
    on WebApiModulesReportsSharedReportSettingsReportSettings {
  WebApiModulesReportsSharedReportSettingsReportSettings copyWith(
      {int? id,
      String? webUserId,
      String? reportName,
      String? description,
      String? settings,
      String? excelSettings,
      String? dateStamp,
      String? recordTitle,
      List<FwStandardBusinessLogicFwBusinessLogicFieldDefinition>? fields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesReportsSharedReportSettingsReportSettings(
        id: id ?? this.id,
        webUserId: webUserId ?? this.webUserId,
        reportName: reportName ?? this.reportName,
        description: description ?? this.description,
        settings: settings ?? this.settings,
        excelSettings: excelSettings ?? this.excelSettings,
        dateStamp: dateStamp ?? this.dateStamp,
        recordTitle: recordTitle ?? this.recordTitle,
        fields: fields ?? this.fields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest {
  WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.officeLocationId,
    this.departmentId,
    this.statuses,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequestExtension
    on WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest {
  WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest copyWith(
      {DateTime? fromDate,
      DateTime? toDate,
      String? dateType,
      String? officeLocationId,
      String? departmentId,
      List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
      String? customReportLayoutId,
      bool? isSummary,
      bool? includeSubHeadingsAndSubTotals,
      bool? includeIdColumns,
      String? locale,
      List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsSharedSalesTaxReportSalesTaxReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        statuses: statuses ?? this.statuses,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.departmentId,
    this.vendorId,
    this.statuses,
    this.activities,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(
      name: 'Activities',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? activities;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.activities, activities) ||
                const DeepCollectionEquality()
                    .equals(other.activities, activities)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(activities) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? departmentId,
          String? vendorId,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          List<FwStandardModelsSelectedCheckBoxListItem>? activities,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderMasterReportPurchaseOrderMasterReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        vendorId: vendorId ?? this.vendorId,
        statuses: statuses ?? this.statuses,
        activities: activities ?? this.activities,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest({
    this.purchaseOrderId,
    this.warehouseId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequestFromJson(
          json);

  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest
      copyWith(
          {String? purchaseOrderId,
          String? warehouseId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderReceiveListPurchaseOrderReceiveListRequest(
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        warehouseId: warehouseId ?? this.warehouseId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest({
    this.purchaseOrderId,
    this.reportView,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequestFromJson(
          json);

  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(
      name: 'ReportView',
      includeIfNull: false,
      toJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeToJson,
      fromJson:
          webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson)
  final enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
      reportView;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.reportView, reportView) ||
                const DeepCollectionEquality()
                    .equals(other.reportView, reportView)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(reportView) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest
      copyWith(
          {String? purchaseOrderId,
          enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
              reportView,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderReportPurchaseOrderReportRequest(
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        reportView: reportView ?? this.reportView,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.projectId,
    this.vendorId,
    this.departmentId,
    this.poApprovalStatusId,
    this.status,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'ProjectId', includeIfNull: false)
  final String? projectId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'PoApprovalStatusId', includeIfNull: false)
  final String? poApprovalStatusId;
  @JsonKey(
      name: 'Status',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? status;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.projectId, projectId) ||
                const DeepCollectionEquality()
                    .equals(other.projectId, projectId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.poApprovalStatusId, poApprovalStatusId) ||
                const DeepCollectionEquality()
                    .equals(other.poApprovalStatusId, poApprovalStatusId)) &&
            (identical(other.status, status) ||
                const DeepCollectionEquality().equals(other.status, status)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(projectId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(poApprovalStatusId) ^
      const DeepCollectionEquality().hash(status) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequestExtension
    on WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest {
  WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? projectId,
          String? vendorId,
          String? departmentId,
          String? poApprovalStatusId,
          List<FwStandardModelsSelectedCheckBoxListItem>? status,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsVendorReportsPurchaseOrderSummaryReportPurchaseOrderSummaryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        projectId: projectId ?? this.projectId,
        vendorId: vendorId ?? this.vendorId,
        departmentId: departmentId ?? this.departmentId,
        poApprovalStatusId: poApprovalStatusId ?? this.poApprovalStatusId,
        status: status ?? this.status,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest {
  WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.officeLocationId,
    this.customerId,
    this.dealId,
    this.orderId,
    this.vendorId,
    this.poClassificationId,
    this.recType,
    this.statuses,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'PoClassificationId', includeIfNull: false)
  final String? poClassificationId;
  @JsonKey(
      name: 'RecType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? recType;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.poClassificationId, poClassificationId) ||
                const DeepCollectionEquality()
                    .equals(other.poClassificationId, poClassificationId)) &&
            (identical(other.recType, recType) ||
                const DeepCollectionEquality()
                    .equals(other.recType, recType)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(poClassificationId) ^
      const DeepCollectionEquality().hash(recType) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequestExtension
    on WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest {
  WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          String? officeLocationId,
          String? customerId,
          String? dealId,
          String? orderId,
          String? vendorId,
          String? poClassificationId,
          List<FwStandardModelsSelectedCheckBoxListItem>? recType,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsVendorReportsSubItemStatusReportSubItemStatusReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        vendorId: vendorId ?? this.vendorId,
        poClassificationId: poClassificationId ?? this.poClassificationId,
        recType: recType ?? this.recType,
        statuses: statuses ?? this.statuses,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest {
  WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.customerId,
    this.dealId,
    this.orderId,
    this.vendorId,
    this.poClassificationId,
    this.recType,
    this.statuses,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'CustomerId', includeIfNull: false)
  final String? customerId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'PoClassificationId', includeIfNull: false)
  final String? poClassificationId;
  @JsonKey(
      name: 'RecType',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? recType;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.customerId, customerId) ||
                const DeepCollectionEquality()
                    .equals(other.customerId, customerId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.poClassificationId, poClassificationId) ||
                const DeepCollectionEquality()
                    .equals(other.poClassificationId, poClassificationId)) &&
            (identical(other.recType, recType) ||
                const DeepCollectionEquality()
                    .equals(other.recType, recType)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(customerId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(poClassificationId) ^
      const DeepCollectionEquality().hash(recType) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequestExtension
    on WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest {
  WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? customerId,
          String? dealId,
          String? orderId,
          String? vendorId,
          String? poClassificationId,
          List<FwStandardModelsSelectedCheckBoxListItem>? recType,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsVendorReportsSubProfitabilityReportSubProfitabilityReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        customerId: customerId ?? this.customerId,
        dealId: dealId ?? this.dealId,
        orderId: orderId ?? this.orderId,
        vendorId: vendorId ?? this.vendorId,
        poClassificationId: poClassificationId ?? this.poClassificationId,
        recType: recType ?? this.recType,
        statuses: statuses ?? this.statuses,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest {
  WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest({
    this.fromDate,
    this.toDate,
    this.officeLocationId,
    this.departmentId,
    this.dealId,
    this.vendorId,
    this.poClassificationId,
    this.purchaseOrderId,
    this.inventoryId,
    this.invoiceStatus,
    this.purchaseOrderStatus,
    this.includeVendorTax,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'PoClassificationId', includeIfNull: false)
  final String? poClassificationId;
  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'InventoryId', includeIfNull: false)
  final String? inventoryId;
  @JsonKey(
      name: 'InvoiceStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? invoiceStatus;
  @JsonKey(
      name: 'PurchaseOrderStatus',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? purchaseOrderStatus;
  @JsonKey(name: 'IncludeVendorTax', includeIfNull: false)
  final bool? includeVendorTax;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.poClassificationId, poClassificationId) ||
                const DeepCollectionEquality()
                    .equals(other.poClassificationId, poClassificationId)) &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.inventoryId, inventoryId) ||
                const DeepCollectionEquality()
                    .equals(other.inventoryId, inventoryId)) &&
            (identical(other.invoiceStatus, invoiceStatus) ||
                const DeepCollectionEquality()
                    .equals(other.invoiceStatus, invoiceStatus)) &&
            (identical(other.purchaseOrderStatus, purchaseOrderStatus) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderStatus, purchaseOrderStatus)) &&
            (identical(other.includeVendorTax, includeVendorTax) ||
                const DeepCollectionEquality()
                    .equals(other.includeVendorTax, includeVendorTax)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(poClassificationId) ^
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(inventoryId) ^
      const DeepCollectionEquality().hash(invoiceStatus) ^
      const DeepCollectionEquality().hash(purchaseOrderStatus) ^
      const DeepCollectionEquality().hash(includeVendorTax) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequestExtension
    on WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest {
  WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? officeLocationId,
          String? departmentId,
          String? dealId,
          String? vendorId,
          String? poClassificationId,
          String? purchaseOrderId,
          String? inventoryId,
          List<FwStandardModelsSelectedCheckBoxListItem>? invoiceStatus,
          List<FwStandardModelsSelectedCheckBoxListItem>? purchaseOrderStatus,
          bool? includeVendorTax,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsVendorReportsSubRentalBillingAnalysisReportSubRentalBillingAnalysisReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        dealId: dealId ?? this.dealId,
        vendorId: vendorId ?? this.vendorId,
        poClassificationId: poClassificationId ?? this.poClassificationId,
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        inventoryId: inventoryId ?? this.inventoryId,
        invoiceStatus: invoiceStatus ?? this.invoiceStatus,
        purchaseOrderStatus: purchaseOrderStatus ?? this.purchaseOrderStatus,
        includeVendorTax: includeVendorTax ?? this.includeVendorTax,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest {
  WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest({
    this.fromDate,
    this.toDate,
    this.dateType,
    this.statuses,
    this.includeAccruals,
    this.accrualFromDate,
    this.accrualToDate,
    this.accrualsOnly,
    this.officeLocationId,
    this.departmentId,
    this.dealId,
    this.vendorId,
    this.purchaseOrderId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'DateType', includeIfNull: false)
  final String? dateType;
  @JsonKey(
      name: 'Statuses',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? statuses;
  @JsonKey(name: 'IncludeAccruals', includeIfNull: false)
  final bool? includeAccruals;
  @JsonKey(name: 'AccrualFromDate', includeIfNull: false)
  final DateTime? accrualFromDate;
  @JsonKey(name: 'AccrualToDate', includeIfNull: false)
  final DateTime? accrualToDate;
  @JsonKey(name: 'AccrualsOnly', includeIfNull: false)
  final bool? accrualsOnly;
  @JsonKey(name: 'OfficeLocationId', includeIfNull: false)
  final String? officeLocationId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'VendorId', includeIfNull: false)
  final String? vendorId;
  @JsonKey(name: 'PurchaseOrderId', includeIfNull: false)
  final String? purchaseOrderId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.dateType, dateType) ||
                const DeepCollectionEquality()
                    .equals(other.dateType, dateType)) &&
            (identical(other.statuses, statuses) ||
                const DeepCollectionEquality()
                    .equals(other.statuses, statuses)) &&
            (identical(other.includeAccruals, includeAccruals) ||
                const DeepCollectionEquality()
                    .equals(other.includeAccruals, includeAccruals)) &&
            (identical(other.accrualFromDate, accrualFromDate) ||
                const DeepCollectionEquality()
                    .equals(other.accrualFromDate, accrualFromDate)) &&
            (identical(other.accrualToDate, accrualToDate) ||
                const DeepCollectionEquality()
                    .equals(other.accrualToDate, accrualToDate)) &&
            (identical(other.accrualsOnly, accrualsOnly) ||
                const DeepCollectionEquality()
                    .equals(other.accrualsOnly, accrualsOnly)) &&
            (identical(other.officeLocationId, officeLocationId) ||
                const DeepCollectionEquality()
                    .equals(other.officeLocationId, officeLocationId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.vendorId, vendorId) ||
                const DeepCollectionEquality()
                    .equals(other.vendorId, vendorId)) &&
            (identical(other.purchaseOrderId, purchaseOrderId) ||
                const DeepCollectionEquality()
                    .equals(other.purchaseOrderId, purchaseOrderId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals, includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) || const DeepCollectionEquality().equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) || const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) || const DeepCollectionEquality().equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(dateType) ^
      const DeepCollectionEquality().hash(statuses) ^
      const DeepCollectionEquality().hash(includeAccruals) ^
      const DeepCollectionEquality().hash(accrualFromDate) ^
      const DeepCollectionEquality().hash(accrualToDate) ^
      const DeepCollectionEquality().hash(accrualsOnly) ^
      const DeepCollectionEquality().hash(officeLocationId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(vendorId) ^
      const DeepCollectionEquality().hash(purchaseOrderId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequestExtension
    on WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest {
  WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? dateType,
          List<FwStandardModelsSelectedCheckBoxListItem>? statuses,
          bool? includeAccruals,
          DateTime? accrualFromDate,
          DateTime? accrualToDate,
          bool? accrualsOnly,
          String? officeLocationId,
          String? departmentId,
          String? dealId,
          String? vendorId,
          String? purchaseOrderId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsVendorReportsVendorInvoiceSummaryReportVendorInvoiceSummaryReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        dateType: dateType ?? this.dateType,
        statuses: statuses ?? this.statuses,
        includeAccruals: includeAccruals ?? this.includeAccruals,
        accrualFromDate: accrualFromDate ?? this.accrualFromDate,
        accrualToDate: accrualToDate ?? this.accrualToDate,
        accrualsOnly: accrualsOnly ?? this.accrualsOnly,
        officeLocationId: officeLocationId ?? this.officeLocationId,
        departmentId: departmentId ?? this.departmentId,
        dealId: dealId ?? this.dealId,
        vendorId: vendorId ?? this.vendorId,
        purchaseOrderId: purchaseOrderId ?? this.purchaseOrderId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest {
  WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest({
    this.containerItemId,
    this.appLanguageId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequestFromJson(
          json);

  @JsonKey(name: 'ContainerItemId', includeIfNull: false)
  final String? containerItemId;
  @JsonKey(name: 'AppLanguageId', includeIfNull: false)
  final String? appLanguageId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest &&
            (identical(other.containerItemId, containerItemId) ||
                const DeepCollectionEquality()
                    .equals(other.containerItemId, containerItemId)) &&
            (identical(other.appLanguageId, appLanguageId) ||
                const DeepCollectionEquality()
                    .equals(other.appLanguageId, appLanguageId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(containerItemId) ^
      const DeepCollectionEquality().hash(appLanguageId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequestExtension
    on WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest {
  WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest
      copyWith(
          {String? containerItemId,
          String? appLanguageId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsWarehouseReportsContainerPackingListContainerPackingListRequest(
        containerItemId: containerItemId ?? this.containerItemId,
        appLanguageId: appLanguageId ?? this.appLanguageId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData({
    this.personSignature,
    this.quikReceiptId,
    this.quikReceiptTermsConditionsHtml,
    this.personPrintedName,
    this.note,
  });

  factory WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaDataFromJson(
          json);

  @JsonKey(name: 'PersonSignature', includeIfNull: false)
  final String? personSignature;
  @JsonKey(name: 'QuikReceiptId', includeIfNull: false)
  final String? quikReceiptId;
  @JsonKey(name: 'QuikReceiptTermsConditionsHtml', includeIfNull: false)
  final String? quikReceiptTermsConditionsHtml;
  @JsonKey(name: 'PersonPrintedName', includeIfNull: false)
  final String? personPrintedName;
  @JsonKey(name: 'Note', includeIfNull: false)
  final String? note;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaDataFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaDataToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaDataToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData &&
            (identical(other.personSignature, personSignature) ||
                const DeepCollectionEquality()
                    .equals(other.personSignature, personSignature)) &&
            (identical(other.quikReceiptId, quikReceiptId) ||
                const DeepCollectionEquality()
                    .equals(other.quikReceiptId, quikReceiptId)) &&
            (identical(other.quikReceiptTermsConditionsHtml,
                    quikReceiptTermsConditionsHtml) ||
                const DeepCollectionEquality().equals(
                    other.quikReceiptTermsConditionsHtml,
                    quikReceiptTermsConditionsHtml)) &&
            (identical(other.personPrintedName, personPrintedName) ||
                const DeepCollectionEquality()
                    .equals(other.personPrintedName, personPrintedName)) &&
            (identical(other.note, note) ||
                const DeepCollectionEquality().equals(other.note, note)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(personSignature) ^
      const DeepCollectionEquality().hash(quikReceiptId) ^
      const DeepCollectionEquality().hash(quikReceiptTermsConditionsHtml) ^
      const DeepCollectionEquality().hash(personPrintedName) ^
      const DeepCollectionEquality().hash(note) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaDataExtension
    on WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData
      copyWith(
          {String? personSignature,
          String? quikReceiptId,
          String? quikReceiptTermsConditionsHtml,
          String? personPrintedName,
          String? note}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData(
        personSignature: personSignature ?? this.personSignature,
        quikReceiptId: quikReceiptId ?? this.quikReceiptId,
        quikReceiptTermsConditionsHtml: quikReceiptTermsConditionsHtml ??
            this.quikReceiptTermsConditionsHtml,
        personPrintedName: personPrintedName ?? this.personPrintedName,
        note: note ?? this.note);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL({
    this.rowType,
    this.description,
    this.quantity,
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.dateFields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemLFromJson(
          json);

  @JsonKey(name: 'RowType', includeIfNull: false)
  final String? rowType;
  @JsonKey(name: 'Description', includeIfNull: false)
  final String? description;
  @JsonKey(name: 'Quantity', includeIfNull: false)
  final String? quantity;
  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemLFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemLToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemLToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL &&
            (identical(other.rowType, rowType) ||
                const DeepCollectionEquality()
                    .equals(other.rowType, rowType)) &&
            (identical(other.description, description) ||
                const DeepCollectionEquality()
                    .equals(other.description, description)) &&
            (identical(other.quantity, quantity) ||
                const DeepCollectionEquality()
                    .equals(other.quantity, quantity)) &&
            (identical(other.printDate, printDate) ||
                const DeepCollectionEquality()
                    .equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) ||
                const DeepCollectionEquality()
                    .equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) ||
                const DeepCollectionEquality()
                    .equals(other.printDateTime, printDateTime)) &&
            (identical(other.dateFields, dateFields) ||
                const DeepCollectionEquality()
                    .equals(other.dateFields, dateFields)) &&
            (identical(other.custom, custom) ||
                const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) ||
                const DeepCollectionEquality().equals(
                    other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(rowType) ^
      const DeepCollectionEquality().hash(description) ^
      const DeepCollectionEquality().hash(quantity) ^
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemLExtension
    on WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL
      copyWith(
          {String? rowType,
          String? description,
          String? quantity,
          String? printDate,
          String? printTime,
          String? printDateTime,
          List<String>? dateFields,
          List<FwStandardDataFwCustomValue>? custom,
          List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL(
        rowType: rowType ?? this.rowType,
        description: description ?? this.description,
        quantity: quantity ?? this.quantity,
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        dateFields: dateFields ?? this.dateFields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL({
    this.sessionNo,
    this.customer,
    this.warehouseId,
    this.estRentFrom,
    this.estRentTo,
    this.quikReceiptTermsConditionsId,
    this.items,
    this.metaData,
    this.dealId,
    this.deal,
    this.dealNumber,
    this.dealNumberAndDeal,
    this.orderId,
    this.orderNumber,
    this.orderDate,
    this.orderPoNumber,
    this.orderType,
    this.orderDescription,
    this.orderNumberAndDescription,
    this.orderLocation,
    this.rowType,
    this.contractId,
    this.contractNumber,
    this.contractDate,
    this.contractTime,
    this.contractDateAndTime,
    this.contractType,
    this.hasPendingExchange,
    this.hasRental,
    this.hasSales,
    this.inputByUserId,
    this.billingDate,
    this.officeLocation,
    this.officeLocationCompany,
    this.officeLocationAddress1,
    this.officeLocationAddress2,
    this.officeLocationCityStateZipCode,
    this.officeLocationCityStateZipCodeCountry,
    this.officeLocationPhone,
    this.officeLocationFax,
    this.warehouse,
    this.warehouseAddress1,
    this.warehouseAddress2,
    this.warehouseCityStateZipCode,
    this.warehouseCityStateZipCodeCountry,
    this.warehousePhone,
    this.warehouseFax,
    this.issuedToCompany,
    this.issuedToAttentionTo1,
    this.issuedToAttentionTo2,
    this.issuedToAddress1,
    this.issuedToAddress2,
    this.issuedToCity,
    this.issuedToState,
    this.issuedToZipCode,
    this.issuedToCountry,
    this.issuedToPhone,
    this.issuedToFax,
    this.usageDates,
    this.billingCycle,
    this.paymentTerms,
    this.agent,
    this.agentEmail,
    this.agentPhoneAndExtension,
    this.agentFax,
    this.department,
    this.deliveryContact,
    this.deliveryLocation,
    this.deliveryAddress1,
    this.deliveryAddress2,
    this.deliveryCityStateZipCode,
    this.deliveryCountry,
    this.deliveryContactPhone,
    this.termsAndConditionsId,
    this.termsAndConditionsHtml,
    this.termsAndConditionsNewPage,
    this.personPrintName,
    this.personSignature,
    this.printDate,
    this.printTime,
    this.printDateTime,
    this.dateFields,
    this.custom,
    this.defaultFieldAttributes,
  });

  factory WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportLFromJson(
          json);

  @JsonKey(name: 'SessionNo', includeIfNull: false)
  final int? sessionNo;
  @JsonKey(name: 'Customer', includeIfNull: false)
  final String? customer;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'EstRentFrom', includeIfNull: false)
  final String? estRentFrom;
  @JsonKey(name: 'EstRentTo', includeIfNull: false)
  final String? estRentTo;
  @JsonKey(name: 'QuikReceiptTermsConditionsId', includeIfNull: false)
  final String? quikReceiptTermsConditionsId;
  @JsonKey(name: 'Items', includeIfNull: false, defaultValue: <
      WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL>[])
  final List<
          WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL>?
      items;
  @JsonKey(name: 'MetaData', includeIfNull: false)
  final WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData?
      metaData;
  @JsonKey(name: 'DealId', includeIfNull: false)
  final String? dealId;
  @JsonKey(name: 'Deal', includeIfNull: false)
  final String? deal;
  @JsonKey(name: 'DealNumber', includeIfNull: false)
  final String? dealNumber;
  @JsonKey(name: 'DealNumberAndDeal', includeIfNull: false)
  final String? dealNumberAndDeal;
  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'OrderNumber', includeIfNull: false)
  final String? orderNumber;
  @JsonKey(name: 'OrderDate', includeIfNull: false)
  final String? orderDate;
  @JsonKey(name: 'OrderPoNumber', includeIfNull: false)
  final String? orderPoNumber;
  @JsonKey(name: 'OrderType', includeIfNull: false)
  final String? orderType;
  @JsonKey(name: 'OrderDescription', includeIfNull: false)
  final String? orderDescription;
  @JsonKey(name: 'OrderNumberAndDescription', includeIfNull: false)
  final String? orderNumberAndDescription;
  @JsonKey(name: 'OrderLocation', includeIfNull: false)
  final String? orderLocation;
  @JsonKey(name: 'RowType', includeIfNull: false)
  final String? rowType;
  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'ContractNumber', includeIfNull: false)
  final String? contractNumber;
  @JsonKey(name: 'ContractDate', includeIfNull: false)
  final String? contractDate;
  @JsonKey(name: 'ContractTime', includeIfNull: false)
  final String? contractTime;
  @JsonKey(name: 'ContractDateAndTime', includeIfNull: false)
  final String? contractDateAndTime;
  @JsonKey(name: 'ContractType', includeIfNull: false)
  final String? contractType;
  @JsonKey(name: 'HasPendingExchange', includeIfNull: false)
  final bool? hasPendingExchange;
  @JsonKey(name: 'HasRental', includeIfNull: false)
  final bool? hasRental;
  @JsonKey(name: 'HasSales', includeIfNull: false)
  final bool? hasSales;
  @JsonKey(name: 'InputByUserId', includeIfNull: false)
  final String? inputByUserId;
  @JsonKey(name: 'BillingDate', includeIfNull: false)
  final String? billingDate;
  @JsonKey(name: 'OfficeLocation', includeIfNull: false)
  final String? officeLocation;
  @JsonKey(name: 'OfficeLocationCompany', includeIfNull: false)
  final String? officeLocationCompany;
  @JsonKey(name: 'OfficeLocationAddress1', includeIfNull: false)
  final String? officeLocationAddress1;
  @JsonKey(name: 'OfficeLocationAddress2', includeIfNull: false)
  final String? officeLocationAddress2;
  @JsonKey(name: 'OfficeLocationCityStateZipCode', includeIfNull: false)
  final String? officeLocationCityStateZipCode;
  @JsonKey(name: 'OfficeLocationCityStateZipCodeCountry', includeIfNull: false)
  final String? officeLocationCityStateZipCodeCountry;
  @JsonKey(name: 'OfficeLocationPhone', includeIfNull: false)
  final String? officeLocationPhone;
  @JsonKey(name: 'OfficeLocationFax', includeIfNull: false)
  final String? officeLocationFax;
  @JsonKey(name: 'Warehouse', includeIfNull: false)
  final String? warehouse;
  @JsonKey(name: 'WarehouseAddress1', includeIfNull: false)
  final String? warehouseAddress1;
  @JsonKey(name: 'WarehouseAddress2', includeIfNull: false)
  final String? warehouseAddress2;
  @JsonKey(name: 'WarehouseCityStateZipCode', includeIfNull: false)
  final String? warehouseCityStateZipCode;
  @JsonKey(name: 'WarehouseCityStateZipCodeCountry', includeIfNull: false)
  final String? warehouseCityStateZipCodeCountry;
  @JsonKey(name: 'WarehousePhone', includeIfNull: false)
  final String? warehousePhone;
  @JsonKey(name: 'WarehouseFax', includeIfNull: false)
  final String? warehouseFax;
  @JsonKey(name: 'IssuedToCompany', includeIfNull: false)
  final String? issuedToCompany;
  @JsonKey(name: 'IssuedToAttentionTo1', includeIfNull: false)
  final String? issuedToAttentionTo1;
  @JsonKey(name: 'IssuedToAttentionTo2', includeIfNull: false)
  final String? issuedToAttentionTo2;
  @JsonKey(name: 'IssuedToAddress1', includeIfNull: false)
  final String? issuedToAddress1;
  @JsonKey(name: 'IssuedToAddress2', includeIfNull: false)
  final String? issuedToAddress2;
  @JsonKey(name: 'IssuedToCity', includeIfNull: false)
  final String? issuedToCity;
  @JsonKey(name: 'IssuedToState', includeIfNull: false)
  final String? issuedToState;
  @JsonKey(name: 'IssuedToZipCode', includeIfNull: false)
  final String? issuedToZipCode;
  @JsonKey(name: 'IssuedToCountry', includeIfNull: false)
  final String? issuedToCountry;
  @JsonKey(name: 'IssuedToPhone', includeIfNull: false)
  final String? issuedToPhone;
  @JsonKey(name: 'IssuedToFax', includeIfNull: false)
  final String? issuedToFax;
  @JsonKey(name: 'UsageDates', includeIfNull: false)
  final String? usageDates;
  @JsonKey(name: 'BillingCycle', includeIfNull: false)
  final String? billingCycle;
  @JsonKey(name: 'PaymentTerms', includeIfNull: false)
  final String? paymentTerms;
  @JsonKey(name: 'Agent', includeIfNull: false)
  final String? agent;
  @JsonKey(name: 'AgentEmail', includeIfNull: false)
  final String? agentEmail;
  @JsonKey(name: 'AgentPhoneAndExtension', includeIfNull: false)
  final String? agentPhoneAndExtension;
  @JsonKey(name: 'AgentFax', includeIfNull: false)
  final String? agentFax;
  @JsonKey(name: 'Department', includeIfNull: false)
  final String? department;
  @JsonKey(name: 'DeliveryContact', includeIfNull: false)
  final String? deliveryContact;
  @JsonKey(name: 'DeliveryLocation', includeIfNull: false)
  final String? deliveryLocation;
  @JsonKey(name: 'DeliveryAddress1', includeIfNull: false)
  final String? deliveryAddress1;
  @JsonKey(name: 'DeliveryAddress2', includeIfNull: false)
  final String? deliveryAddress2;
  @JsonKey(name: 'DeliveryCityStateZipCode', includeIfNull: false)
  final String? deliveryCityStateZipCode;
  @JsonKey(name: 'DeliveryCountry', includeIfNull: false)
  final String? deliveryCountry;
  @JsonKey(name: 'DeliveryContactPhone', includeIfNull: false)
  final String? deliveryContactPhone;
  @JsonKey(name: 'TermsAndConditionsId', includeIfNull: false)
  final String? termsAndConditionsId;
  @JsonKey(name: 'TermsAndConditionsHtml', includeIfNull: false)
  final String? termsAndConditionsHtml;
  @JsonKey(name: 'TermsAndConditionsNewPage', includeIfNull: false)
  final bool? termsAndConditionsNewPage;
  @JsonKey(name: 'PersonPrintName', includeIfNull: false)
  final String? personPrintName;
  @JsonKey(name: 'PersonSignature', includeIfNull: false)
  final String? personSignature;
  @JsonKey(name: 'PrintDate', includeIfNull: false)
  final String? printDate;
  @JsonKey(name: 'PrintTime', includeIfNull: false)
  final String? printTime;
  @JsonKey(name: 'PrintDateTime', includeIfNull: false)
  final String? printDateTime;
  @JsonKey(name: 'DateFields', includeIfNull: false, defaultValue: <String>[])
  final List<String>? dateFields;
  @JsonKey(
      name: '_Custom',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwCustomValue>[])
  final List<FwStandardDataFwCustomValue>? custom;
  @JsonKey(
      name: '_DefaultFieldAttributes',
      includeIfNull: false,
      defaultValue: <FwStandardDataFwDefaultAttribute>[])
  final List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportLFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportLToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportLToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL &&
            (identical(other.sessionNo, sessionNo) ||
                const DeepCollectionEquality()
                    .equals(other.sessionNo, sessionNo)) &&
            (identical(other.customer, customer) ||
                const DeepCollectionEquality()
                    .equals(other.customer, customer)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.estRentFrom, estRentFrom) ||
                const DeepCollectionEquality()
                    .equals(other.estRentFrom, estRentFrom)) &&
            (identical(other.estRentTo, estRentTo) ||
                const DeepCollectionEquality()
                    .equals(other.estRentTo, estRentTo)) &&
            (identical(other.quikReceiptTermsConditionsId, quikReceiptTermsConditionsId) ||
                const DeepCollectionEquality().equals(
                    other.quikReceiptTermsConditionsId,
                    quikReceiptTermsConditionsId)) &&
            (identical(other.items, items) ||
                const DeepCollectionEquality().equals(other.items, items)) &&
            (identical(other.metaData, metaData) ||
                const DeepCollectionEquality()
                    .equals(other.metaData, metaData)) &&
            (identical(other.dealId, dealId) ||
                const DeepCollectionEquality().equals(other.dealId, dealId)) &&
            (identical(other.deal, deal) ||
                const DeepCollectionEquality().equals(other.deal, deal)) &&
            (identical(other.dealNumber, dealNumber) ||
                const DeepCollectionEquality()
                    .equals(other.dealNumber, dealNumber)) &&
            (identical(other.dealNumberAndDeal, dealNumberAndDeal) ||
                const DeepCollectionEquality()
                    .equals(other.dealNumberAndDeal, dealNumberAndDeal)) &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.orderNumber, orderNumber) ||
                const DeepCollectionEquality()
                    .equals(other.orderNumber, orderNumber)) &&
            (identical(other.orderDate, orderDate) ||
                const DeepCollectionEquality()
                    .equals(other.orderDate, orderDate)) &&
            (identical(other.orderPoNumber, orderPoNumber) || const DeepCollectionEquality().equals(other.orderPoNumber, orderPoNumber)) &&
            (identical(other.orderType, orderType) || const DeepCollectionEquality().equals(other.orderType, orderType)) &&
            (identical(other.orderDescription, orderDescription) || const DeepCollectionEquality().equals(other.orderDescription, orderDescription)) &&
            (identical(other.orderNumberAndDescription, orderNumberAndDescription) || const DeepCollectionEquality().equals(other.orderNumberAndDescription, orderNumberAndDescription)) &&
            (identical(other.orderLocation, orderLocation) || const DeepCollectionEquality().equals(other.orderLocation, orderLocation)) &&
            (identical(other.rowType, rowType) || const DeepCollectionEquality().equals(other.rowType, rowType)) &&
            (identical(other.contractId, contractId) || const DeepCollectionEquality().equals(other.contractId, contractId)) &&
            (identical(other.contractNumber, contractNumber) || const DeepCollectionEquality().equals(other.contractNumber, contractNumber)) &&
            (identical(other.contractDate, contractDate) || const DeepCollectionEquality().equals(other.contractDate, contractDate)) &&
            (identical(other.contractTime, contractTime) || const DeepCollectionEquality().equals(other.contractTime, contractTime)) &&
            (identical(other.contractDateAndTime, contractDateAndTime) || const DeepCollectionEquality().equals(other.contractDateAndTime, contractDateAndTime)) &&
            (identical(other.contractType, contractType) || const DeepCollectionEquality().equals(other.contractType, contractType)) &&
            (identical(other.hasPendingExchange, hasPendingExchange) || const DeepCollectionEquality().equals(other.hasPendingExchange, hasPendingExchange)) &&
            (identical(other.hasRental, hasRental) || const DeepCollectionEquality().equals(other.hasRental, hasRental)) &&
            (identical(other.hasSales, hasSales) || const DeepCollectionEquality().equals(other.hasSales, hasSales)) &&
            (identical(other.inputByUserId, inputByUserId) || const DeepCollectionEquality().equals(other.inputByUserId, inputByUserId)) &&
            (identical(other.billingDate, billingDate) || const DeepCollectionEquality().equals(other.billingDate, billingDate)) &&
            (identical(other.officeLocation, officeLocation) || const DeepCollectionEquality().equals(other.officeLocation, officeLocation)) &&
            (identical(other.officeLocationCompany, officeLocationCompany) || const DeepCollectionEquality().equals(other.officeLocationCompany, officeLocationCompany)) &&
            (identical(other.officeLocationAddress1, officeLocationAddress1) || const DeepCollectionEquality().equals(other.officeLocationAddress1, officeLocationAddress1)) &&
            (identical(other.officeLocationAddress2, officeLocationAddress2) || const DeepCollectionEquality().equals(other.officeLocationAddress2, officeLocationAddress2)) &&
            (identical(other.officeLocationCityStateZipCode, officeLocationCityStateZipCode) || const DeepCollectionEquality().equals(other.officeLocationCityStateZipCode, officeLocationCityStateZipCode)) &&
            (identical(other.officeLocationCityStateZipCodeCountry, officeLocationCityStateZipCodeCountry) || const DeepCollectionEquality().equals(other.officeLocationCityStateZipCodeCountry, officeLocationCityStateZipCodeCountry)) &&
            (identical(other.officeLocationPhone, officeLocationPhone) || const DeepCollectionEquality().equals(other.officeLocationPhone, officeLocationPhone)) &&
            (identical(other.officeLocationFax, officeLocationFax) || const DeepCollectionEquality().equals(other.officeLocationFax, officeLocationFax)) &&
            (identical(other.warehouse, warehouse) || const DeepCollectionEquality().equals(other.warehouse, warehouse)) &&
            (identical(other.warehouseAddress1, warehouseAddress1) || const DeepCollectionEquality().equals(other.warehouseAddress1, warehouseAddress1)) &&
            (identical(other.warehouseAddress2, warehouseAddress2) || const DeepCollectionEquality().equals(other.warehouseAddress2, warehouseAddress2)) &&
            (identical(other.warehouseCityStateZipCode, warehouseCityStateZipCode) || const DeepCollectionEquality().equals(other.warehouseCityStateZipCode, warehouseCityStateZipCode)) &&
            (identical(other.warehouseCityStateZipCodeCountry, warehouseCityStateZipCodeCountry) || const DeepCollectionEquality().equals(other.warehouseCityStateZipCodeCountry, warehouseCityStateZipCodeCountry)) &&
            (identical(other.warehousePhone, warehousePhone) || const DeepCollectionEquality().equals(other.warehousePhone, warehousePhone)) &&
            (identical(other.warehouseFax, warehouseFax) || const DeepCollectionEquality().equals(other.warehouseFax, warehouseFax)) &&
            (identical(other.issuedToCompany, issuedToCompany) || const DeepCollectionEquality().equals(other.issuedToCompany, issuedToCompany)) &&
            (identical(other.issuedToAttentionTo1, issuedToAttentionTo1) || const DeepCollectionEquality().equals(other.issuedToAttentionTo1, issuedToAttentionTo1)) &&
            (identical(other.issuedToAttentionTo2, issuedToAttentionTo2) || const DeepCollectionEquality().equals(other.issuedToAttentionTo2, issuedToAttentionTo2)) &&
            (identical(other.issuedToAddress1, issuedToAddress1) || const DeepCollectionEquality().equals(other.issuedToAddress1, issuedToAddress1)) &&
            (identical(other.issuedToAddress2, issuedToAddress2) || const DeepCollectionEquality().equals(other.issuedToAddress2, issuedToAddress2)) &&
            (identical(other.issuedToCity, issuedToCity) || const DeepCollectionEquality().equals(other.issuedToCity, issuedToCity)) &&
            (identical(other.issuedToState, issuedToState) || const DeepCollectionEquality().equals(other.issuedToState, issuedToState)) &&
            (identical(other.issuedToZipCode, issuedToZipCode) || const DeepCollectionEquality().equals(other.issuedToZipCode, issuedToZipCode)) &&
            (identical(other.issuedToCountry, issuedToCountry) || const DeepCollectionEquality().equals(other.issuedToCountry, issuedToCountry)) &&
            (identical(other.issuedToPhone, issuedToPhone) || const DeepCollectionEquality().equals(other.issuedToPhone, issuedToPhone)) &&
            (identical(other.issuedToFax, issuedToFax) || const DeepCollectionEquality().equals(other.issuedToFax, issuedToFax)) &&
            (identical(other.usageDates, usageDates) || const DeepCollectionEquality().equals(other.usageDates, usageDates)) &&
            (identical(other.billingCycle, billingCycle) || const DeepCollectionEquality().equals(other.billingCycle, billingCycle)) &&
            (identical(other.paymentTerms, paymentTerms) || const DeepCollectionEquality().equals(other.paymentTerms, paymentTerms)) &&
            (identical(other.agent, agent) || const DeepCollectionEquality().equals(other.agent, agent)) &&
            (identical(other.agentEmail, agentEmail) || const DeepCollectionEquality().equals(other.agentEmail, agentEmail)) &&
            (identical(other.agentPhoneAndExtension, agentPhoneAndExtension) || const DeepCollectionEquality().equals(other.agentPhoneAndExtension, agentPhoneAndExtension)) &&
            (identical(other.agentFax, agentFax) || const DeepCollectionEquality().equals(other.agentFax, agentFax)) &&
            (identical(other.department, department) || const DeepCollectionEquality().equals(other.department, department)) &&
            (identical(other.deliveryContact, deliveryContact) || const DeepCollectionEquality().equals(other.deliveryContact, deliveryContact)) &&
            (identical(other.deliveryLocation, deliveryLocation) || const DeepCollectionEquality().equals(other.deliveryLocation, deliveryLocation)) &&
            (identical(other.deliveryAddress1, deliveryAddress1) || const DeepCollectionEquality().equals(other.deliveryAddress1, deliveryAddress1)) &&
            (identical(other.deliveryAddress2, deliveryAddress2) || const DeepCollectionEquality().equals(other.deliveryAddress2, deliveryAddress2)) &&
            (identical(other.deliveryCityStateZipCode, deliveryCityStateZipCode) || const DeepCollectionEquality().equals(other.deliveryCityStateZipCode, deliveryCityStateZipCode)) &&
            (identical(other.deliveryCountry, deliveryCountry) || const DeepCollectionEquality().equals(other.deliveryCountry, deliveryCountry)) &&
            (identical(other.deliveryContactPhone, deliveryContactPhone) || const DeepCollectionEquality().equals(other.deliveryContactPhone, deliveryContactPhone)) &&
            (identical(other.termsAndConditionsId, termsAndConditionsId) || const DeepCollectionEquality().equals(other.termsAndConditionsId, termsAndConditionsId)) &&
            (identical(other.termsAndConditionsHtml, termsAndConditionsHtml) || const DeepCollectionEquality().equals(other.termsAndConditionsHtml, termsAndConditionsHtml)) &&
            (identical(other.termsAndConditionsNewPage, termsAndConditionsNewPage) || const DeepCollectionEquality().equals(other.termsAndConditionsNewPage, termsAndConditionsNewPage)) &&
            (identical(other.personPrintName, personPrintName) || const DeepCollectionEquality().equals(other.personPrintName, personPrintName)) &&
            (identical(other.personSignature, personSignature) || const DeepCollectionEquality().equals(other.personSignature, personSignature)) &&
            (identical(other.printDate, printDate) || const DeepCollectionEquality().equals(other.printDate, printDate)) &&
            (identical(other.printTime, printTime) || const DeepCollectionEquality().equals(other.printTime, printTime)) &&
            (identical(other.printDateTime, printDateTime) || const DeepCollectionEquality().equals(other.printDateTime, printDateTime)) &&
            (identical(other.dateFields, dateFields) || const DeepCollectionEquality().equals(other.dateFields, dateFields)) &&
            (identical(other.custom, custom) || const DeepCollectionEquality().equals(other.custom, custom)) &&
            (identical(other.defaultFieldAttributes, defaultFieldAttributes) || const DeepCollectionEquality().equals(other.defaultFieldAttributes, defaultFieldAttributes)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(sessionNo) ^
      const DeepCollectionEquality().hash(customer) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(estRentFrom) ^
      const DeepCollectionEquality().hash(estRentTo) ^
      const DeepCollectionEquality().hash(quikReceiptTermsConditionsId) ^
      const DeepCollectionEquality().hash(items) ^
      const DeepCollectionEquality().hash(metaData) ^
      const DeepCollectionEquality().hash(dealId) ^
      const DeepCollectionEquality().hash(deal) ^
      const DeepCollectionEquality().hash(dealNumber) ^
      const DeepCollectionEquality().hash(dealNumberAndDeal) ^
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(orderNumber) ^
      const DeepCollectionEquality().hash(orderDate) ^
      const DeepCollectionEquality().hash(orderPoNumber) ^
      const DeepCollectionEquality().hash(orderType) ^
      const DeepCollectionEquality().hash(orderDescription) ^
      const DeepCollectionEquality().hash(orderNumberAndDescription) ^
      const DeepCollectionEquality().hash(orderLocation) ^
      const DeepCollectionEquality().hash(rowType) ^
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(contractNumber) ^
      const DeepCollectionEquality().hash(contractDate) ^
      const DeepCollectionEquality().hash(contractTime) ^
      const DeepCollectionEquality().hash(contractDateAndTime) ^
      const DeepCollectionEquality().hash(contractType) ^
      const DeepCollectionEquality().hash(hasPendingExchange) ^
      const DeepCollectionEquality().hash(hasRental) ^
      const DeepCollectionEquality().hash(hasSales) ^
      const DeepCollectionEquality().hash(inputByUserId) ^
      const DeepCollectionEquality().hash(billingDate) ^
      const DeepCollectionEquality().hash(officeLocation) ^
      const DeepCollectionEquality().hash(officeLocationCompany) ^
      const DeepCollectionEquality().hash(officeLocationAddress1) ^
      const DeepCollectionEquality().hash(officeLocationAddress2) ^
      const DeepCollectionEquality().hash(officeLocationCityStateZipCode) ^
      const DeepCollectionEquality()
          .hash(officeLocationCityStateZipCodeCountry) ^
      const DeepCollectionEquality().hash(officeLocationPhone) ^
      const DeepCollectionEquality().hash(officeLocationFax) ^
      const DeepCollectionEquality().hash(warehouse) ^
      const DeepCollectionEquality().hash(warehouseAddress1) ^
      const DeepCollectionEquality().hash(warehouseAddress2) ^
      const DeepCollectionEquality().hash(warehouseCityStateZipCode) ^
      const DeepCollectionEquality().hash(warehouseCityStateZipCodeCountry) ^
      const DeepCollectionEquality().hash(warehousePhone) ^
      const DeepCollectionEquality().hash(warehouseFax) ^
      const DeepCollectionEquality().hash(issuedToCompany) ^
      const DeepCollectionEquality().hash(issuedToAttentionTo1) ^
      const DeepCollectionEquality().hash(issuedToAttentionTo2) ^
      const DeepCollectionEquality().hash(issuedToAddress1) ^
      const DeepCollectionEquality().hash(issuedToAddress2) ^
      const DeepCollectionEquality().hash(issuedToCity) ^
      const DeepCollectionEquality().hash(issuedToState) ^
      const DeepCollectionEquality().hash(issuedToZipCode) ^
      const DeepCollectionEquality().hash(issuedToCountry) ^
      const DeepCollectionEquality().hash(issuedToPhone) ^
      const DeepCollectionEquality().hash(issuedToFax) ^
      const DeepCollectionEquality().hash(usageDates) ^
      const DeepCollectionEquality().hash(billingCycle) ^
      const DeepCollectionEquality().hash(paymentTerms) ^
      const DeepCollectionEquality().hash(agent) ^
      const DeepCollectionEquality().hash(agentEmail) ^
      const DeepCollectionEquality().hash(agentPhoneAndExtension) ^
      const DeepCollectionEquality().hash(agentFax) ^
      const DeepCollectionEquality().hash(department) ^
      const DeepCollectionEquality().hash(deliveryContact) ^
      const DeepCollectionEquality().hash(deliveryLocation) ^
      const DeepCollectionEquality().hash(deliveryAddress1) ^
      const DeepCollectionEquality().hash(deliveryAddress2) ^
      const DeepCollectionEquality().hash(deliveryCityStateZipCode) ^
      const DeepCollectionEquality().hash(deliveryCountry) ^
      const DeepCollectionEquality().hash(deliveryContactPhone) ^
      const DeepCollectionEquality().hash(termsAndConditionsId) ^
      const DeepCollectionEquality().hash(termsAndConditionsHtml) ^
      const DeepCollectionEquality().hash(termsAndConditionsNewPage) ^
      const DeepCollectionEquality().hash(personPrintName) ^
      const DeepCollectionEquality().hash(personSignature) ^
      const DeepCollectionEquality().hash(printDate) ^
      const DeepCollectionEquality().hash(printTime) ^
      const DeepCollectionEquality().hash(printDateTime) ^
      const DeepCollectionEquality().hash(dateFields) ^
      const DeepCollectionEquality().hash(custom) ^
      const DeepCollectionEquality().hash(defaultFieldAttributes) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportLExtension
    on WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL copyWith(
      {int? sessionNo,
      String? customer,
      String? warehouseId,
      String? estRentFrom,
      String? estRentTo,
      String? quikReceiptTermsConditionsId,
      List<WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportItemL>?
          items,
      WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptMetaData?
          metaData,
      String? dealId,
      String? deal,
      String? dealNumber,
      String? dealNumberAndDeal,
      String? orderId,
      String? orderNumber,
      String? orderDate,
      String? orderPoNumber,
      String? orderType,
      String? orderDescription,
      String? orderNumberAndDescription,
      String? orderLocation,
      String? rowType,
      String? contractId,
      String? contractNumber,
      String? contractDate,
      String? contractTime,
      String? contractDateAndTime,
      String? contractType,
      bool? hasPendingExchange,
      bool? hasRental,
      bool? hasSales,
      String? inputByUserId,
      String? billingDate,
      String? officeLocation,
      String? officeLocationCompany,
      String? officeLocationAddress1,
      String? officeLocationAddress2,
      String? officeLocationCityStateZipCode,
      String? officeLocationCityStateZipCodeCountry,
      String? officeLocationPhone,
      String? officeLocationFax,
      String? warehouse,
      String? warehouseAddress1,
      String? warehouseAddress2,
      String? warehouseCityStateZipCode,
      String? warehouseCityStateZipCodeCountry,
      String? warehousePhone,
      String? warehouseFax,
      String? issuedToCompany,
      String? issuedToAttentionTo1,
      String? issuedToAttentionTo2,
      String? issuedToAddress1,
      String? issuedToAddress2,
      String? issuedToCity,
      String? issuedToState,
      String? issuedToZipCode,
      String? issuedToCountry,
      String? issuedToPhone,
      String? issuedToFax,
      String? usageDates,
      String? billingCycle,
      String? paymentTerms,
      String? agent,
      String? agentEmail,
      String? agentPhoneAndExtension,
      String? agentFax,
      String? department,
      String? deliveryContact,
      String? deliveryLocation,
      String? deliveryAddress1,
      String? deliveryAddress2,
      String? deliveryCityStateZipCode,
      String? deliveryCountry,
      String? deliveryContactPhone,
      String? termsAndConditionsId,
      String? termsAndConditionsHtml,
      bool? termsAndConditionsNewPage,
      String? personPrintName,
      String? personSignature,
      String? printDate,
      String? printTime,
      String? printDateTime,
      List<String>? dateFields,
      List<FwStandardDataFwCustomValue>? custom,
      List<FwStandardDataFwDefaultAttribute>? defaultFieldAttributes}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportL(
        sessionNo: sessionNo ?? this.sessionNo,
        customer: customer ?? this.customer,
        warehouseId: warehouseId ?? this.warehouseId,
        estRentFrom: estRentFrom ?? this.estRentFrom,
        estRentTo: estRentTo ?? this.estRentTo,
        quikReceiptTermsConditionsId:
            quikReceiptTermsConditionsId ?? this.quikReceiptTermsConditionsId,
        items: items ?? this.items,
        metaData: metaData ?? this.metaData,
        dealId: dealId ?? this.dealId,
        deal: deal ?? this.deal,
        dealNumber: dealNumber ?? this.dealNumber,
        dealNumberAndDeal: dealNumberAndDeal ?? this.dealNumberAndDeal,
        orderId: orderId ?? this.orderId,
        orderNumber: orderNumber ?? this.orderNumber,
        orderDate: orderDate ?? this.orderDate,
        orderPoNumber: orderPoNumber ?? this.orderPoNumber,
        orderType: orderType ?? this.orderType,
        orderDescription: orderDescription ?? this.orderDescription,
        orderNumberAndDescription:
            orderNumberAndDescription ?? this.orderNumberAndDescription,
        orderLocation: orderLocation ?? this.orderLocation,
        rowType: rowType ?? this.rowType,
        contractId: contractId ?? this.contractId,
        contractNumber: contractNumber ?? this.contractNumber,
        contractDate: contractDate ?? this.contractDate,
        contractTime: contractTime ?? this.contractTime,
        contractDateAndTime: contractDateAndTime ?? this.contractDateAndTime,
        contractType: contractType ?? this.contractType,
        hasPendingExchange: hasPendingExchange ?? this.hasPendingExchange,
        hasRental: hasRental ?? this.hasRental,
        hasSales: hasSales ?? this.hasSales,
        inputByUserId: inputByUserId ?? this.inputByUserId,
        billingDate: billingDate ?? this.billingDate,
        officeLocation: officeLocation ?? this.officeLocation,
        officeLocationCompany:
            officeLocationCompany ?? this.officeLocationCompany,
        officeLocationAddress1:
            officeLocationAddress1 ?? this.officeLocationAddress1,
        officeLocationAddress2:
            officeLocationAddress2 ?? this.officeLocationAddress2,
        officeLocationCityStateZipCode: officeLocationCityStateZipCode ??
            this.officeLocationCityStateZipCode,
        officeLocationCityStateZipCodeCountry:
            officeLocationCityStateZipCodeCountry ??
                this.officeLocationCityStateZipCodeCountry,
        officeLocationPhone: officeLocationPhone ?? this.officeLocationPhone,
        officeLocationFax: officeLocationFax ?? this.officeLocationFax,
        warehouse: warehouse ?? this.warehouse,
        warehouseAddress1: warehouseAddress1 ?? this.warehouseAddress1,
        warehouseAddress2: warehouseAddress2 ?? this.warehouseAddress2,
        warehouseCityStateZipCode:
            warehouseCityStateZipCode ?? this.warehouseCityStateZipCode,
        warehouseCityStateZipCodeCountry: warehouseCityStateZipCodeCountry ??
            this.warehouseCityStateZipCodeCountry,
        warehousePhone: warehousePhone ?? this.warehousePhone,
        warehouseFax: warehouseFax ?? this.warehouseFax,
        issuedToCompany: issuedToCompany ?? this.issuedToCompany,
        issuedToAttentionTo1: issuedToAttentionTo1 ?? this.issuedToAttentionTo1,
        issuedToAttentionTo2: issuedToAttentionTo2 ?? this.issuedToAttentionTo2,
        issuedToAddress1: issuedToAddress1 ?? this.issuedToAddress1,
        issuedToAddress2: issuedToAddress2 ?? this.issuedToAddress2,
        issuedToCity: issuedToCity ?? this.issuedToCity,
        issuedToState: issuedToState ?? this.issuedToState,
        issuedToZipCode: issuedToZipCode ?? this.issuedToZipCode,
        issuedToCountry: issuedToCountry ?? this.issuedToCountry,
        issuedToPhone: issuedToPhone ?? this.issuedToPhone,
        issuedToFax: issuedToFax ?? this.issuedToFax,
        usageDates: usageDates ?? this.usageDates,
        billingCycle: billingCycle ?? this.billingCycle,
        paymentTerms: paymentTerms ?? this.paymentTerms,
        agent: agent ?? this.agent,
        agentEmail: agentEmail ?? this.agentEmail,
        agentPhoneAndExtension:
            agentPhoneAndExtension ?? this.agentPhoneAndExtension,
        agentFax: agentFax ?? this.agentFax,
        department: department ?? this.department,
        deliveryContact: deliveryContact ?? this.deliveryContact,
        deliveryLocation: deliveryLocation ?? this.deliveryLocation,
        deliveryAddress1: deliveryAddress1 ?? this.deliveryAddress1,
        deliveryAddress2: deliveryAddress2 ?? this.deliveryAddress2,
        deliveryCityStateZipCode:
            deliveryCityStateZipCode ?? this.deliveryCityStateZipCode,
        deliveryCountry: deliveryCountry ?? this.deliveryCountry,
        deliveryContactPhone: deliveryContactPhone ?? this.deliveryContactPhone,
        termsAndConditionsId: termsAndConditionsId ?? this.termsAndConditionsId,
        termsAndConditionsHtml:
            termsAndConditionsHtml ?? this.termsAndConditionsHtml,
        termsAndConditionsNewPage:
            termsAndConditionsNewPage ?? this.termsAndConditionsNewPage,
        personPrintName: personPrintName ?? this.personPrintName,
        personSignature: personSignature ?? this.personSignature,
        printDate: printDate ?? this.printDate,
        printTime: printTime ?? this.printTime,
        printDateTime: printDateTime ?? this.printDateTime,
        dateFields: dateFields ?? this.dateFields,
        custom: custom ?? this.custom,
        defaultFieldAttributes:
            defaultFieldAttributes ?? this.defaultFieldAttributes);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest({
    this.contractId,
    this.quikReceiptId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequestFromJson(
          json);

  @JsonKey(name: 'ContractId', includeIfNull: false)
  final String? contractId;
  @JsonKey(name: 'QuikReceiptId', includeIfNull: false)
  final String? quikReceiptId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest &&
            (identical(other.contractId, contractId) ||
                const DeepCollectionEquality()
                    .equals(other.contractId, contractId)) &&
            (identical(other.quikReceiptId, quikReceiptId) ||
                const DeepCollectionEquality()
                    .equals(other.quikReceiptId, quikReceiptId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(contractId) ^
      const DeepCollectionEquality().hash(quikReceiptId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequestExtension
    on WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest {
  WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest
      copyWith(
          {String? contractId,
          String? quikReceiptId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsWarehouseReportsQuikReceiptReportQuikReceiptReportRequest(
        contractId: contractId ?? this.contractId,
        quikReceiptId: quikReceiptId ?? this.quikReceiptId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest {
  WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest({
    this.orderId,
    this.printedByUsersId,
    this.storageContainerItemId,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequestFromJson(
          json);

  @JsonKey(name: 'OrderId', includeIfNull: false)
  final String? orderId;
  @JsonKey(name: 'PrintedByUsersId', includeIfNull: false)
  final String? printedByUsersId;
  @JsonKey(name: 'StorageContainerItemId', includeIfNull: false)
  final String? storageContainerItemId;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest &&
            (identical(other.orderId, orderId) ||
                const DeepCollectionEquality()
                    .equals(other.orderId, orderId)) &&
            (identical(other.printedByUsersId, printedByUsersId) ||
                const DeepCollectionEquality()
                    .equals(other.printedByUsersId, printedByUsersId)) &&
            (identical(other.storageContainerItemId, storageContainerItemId) ||
                const DeepCollectionEquality().equals(
                    other.storageContainerItemId, storageContainerItemId)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(orderId) ^
      const DeepCollectionEquality().hash(printedByUsersId) ^
      const DeepCollectionEquality().hash(storageContainerItemId) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequestExtension
    on WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest {
  WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest
      copyWith(
          {String? orderId,
          String? printedByUsersId,
          String? storageContainerItemId,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsWarehouseReportsStorageContainerLabelStorageContainerLabelRequest(
        orderId: orderId ?? this.orderId,
        printedByUsersId: printedByUsersId ?? this.printedByUsersId,
        storageContainerItemId:
            storageContainerItemId ?? this.storageContainerItemId,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequest {
  WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequest({
    this.transferId,
    this.reportView,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequestFromJson(
          json);

  @JsonKey(name: 'TransferId', includeIfNull: false)
  final String? transferId;
  @JsonKey(
      name: 'ReportView',
      includeIfNull: false,
      toJson: webApiModulesReportsOrderReportsOrderReportReportViewTypeToJson,
      fromJson:
          webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson)
  final enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
      reportView;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequest &&
            (identical(other.transferId, transferId) ||
                const DeepCollectionEquality()
                    .equals(other.transferId, transferId)) &&
            (identical(other.reportView, reportView) ||
                const DeepCollectionEquality()
                    .equals(other.reportView, reportView)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(transferId) ^
      const DeepCollectionEquality().hash(reportView) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequestExtension
    on WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequest {
  WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequest
      copyWith(
          {String? transferId,
          enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
              reportView,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsWarehouseReportsTransferOrderReportTransferOrderReportRequest(
        transferId: transferId ?? this.transferId,
        reportView: reportView ?? this.reportView,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.departmentId,
    this.agentId,
    this.activityTypeId,
    this.sortBy,
    this.orderTypes,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final String? activityTypeId;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(
      name: 'OrderTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.orderTypes, orderTypes) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypes, orderTypes)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(activityTypeId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(orderTypes) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequestExtension
    on WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? departmentId,
          String? agentId,
          String? activityTypeId,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsWarehouseReportsWarehouseDispatchReportWarehouseDispatchReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        sortBy: sortBy ?? this.sortBy,
        orderTypes: orderTypes ?? this.orderTypes,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.departmentId,
    this.agentId,
    this.activityTypeId,
    this.sortBy,
    this.orderTypes,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final String? activityTypeId;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(
      name: 'OrderTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.orderTypes, orderTypes) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypes, orderTypes)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(activityTypeId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(orderTypes) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequestExtension
    on WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? departmentId,
          String? agentId,
          String? activityTypeId,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsWarehouseReportsWarehouseInboundReportWarehouseInboundReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        sortBy: sortBy ?? this.sortBy,
        orderTypes: orderTypes ?? this.orderTypes,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

@JsonSerializable(explicitToJson: true)
class WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest({
    this.fromDate,
    this.toDate,
    this.warehouseId,
    this.departmentId,
    this.agentId,
    this.activityTypeId,
    this.sortBy,
    this.orderTypes,
    this.customReportLayoutId,
    this.isSummary,
    this.includeSubHeadingsAndSubTotals,
    this.includeIdColumns,
    this.locale,
    this.excelfields,
  });

  factory WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest.fromJson(
          Map<String, dynamic> json) =>
      _$WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequestFromJson(
          json);

  @JsonKey(name: 'FromDate', includeIfNull: false)
  final DateTime? fromDate;
  @JsonKey(name: 'ToDate', includeIfNull: false)
  final DateTime? toDate;
  @JsonKey(name: 'WarehouseId', includeIfNull: false)
  final String? warehouseId;
  @JsonKey(name: 'DepartmentId', includeIfNull: false)
  final String? departmentId;
  @JsonKey(name: 'AgentId', includeIfNull: false)
  final String? agentId;
  @JsonKey(name: 'ActivityTypeId', includeIfNull: false)
  final String? activityTypeId;
  @JsonKey(
      name: 'SortBy',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? sortBy;
  @JsonKey(
      name: 'OrderTypes',
      includeIfNull: false,
      defaultValue: <FwStandardModelsSelectedCheckBoxListItem>[])
  final List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes;
  @JsonKey(name: 'CustomReportLayoutId', includeIfNull: false)
  final String? customReportLayoutId;
  @JsonKey(name: 'IsSummary', includeIfNull: false)
  final bool? isSummary;
  @JsonKey(name: 'IncludeSubHeadingsAndSubTotals', includeIfNull: false)
  final bool? includeSubHeadingsAndSubTotals;
  @JsonKey(name: 'IncludeIdColumns', includeIfNull: false)
  final bool? includeIdColumns;
  @JsonKey(name: 'Locale', includeIfNull: false)
  final String? locale;
  @JsonKey(
      name: 'excelfields',
      includeIfNull: false,
      defaultValue: <FwStandardModelsCheckBoxListItem>[])
  final List<FwStandardModelsCheckBoxListItem>? excelfields;
  static const fromJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequestFromJson;
  static const toJsonFactory =
      _$WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequestToJson;
  Map<String, dynamic> toJson() =>
      _$WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequestToJson(
          this);

  @override
  bool operator ==(dynamic other) {
    return identical(this, other) ||
        (other is WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest &&
            (identical(other.fromDate, fromDate) ||
                const DeepCollectionEquality()
                    .equals(other.fromDate, fromDate)) &&
            (identical(other.toDate, toDate) ||
                const DeepCollectionEquality().equals(other.toDate, toDate)) &&
            (identical(other.warehouseId, warehouseId) ||
                const DeepCollectionEquality()
                    .equals(other.warehouseId, warehouseId)) &&
            (identical(other.departmentId, departmentId) ||
                const DeepCollectionEquality()
                    .equals(other.departmentId, departmentId)) &&
            (identical(other.agentId, agentId) ||
                const DeepCollectionEquality()
                    .equals(other.agentId, agentId)) &&
            (identical(other.activityTypeId, activityTypeId) ||
                const DeepCollectionEquality()
                    .equals(other.activityTypeId, activityTypeId)) &&
            (identical(other.sortBy, sortBy) ||
                const DeepCollectionEquality().equals(other.sortBy, sortBy)) &&
            (identical(other.orderTypes, orderTypes) ||
                const DeepCollectionEquality()
                    .equals(other.orderTypes, orderTypes)) &&
            (identical(other.customReportLayoutId, customReportLayoutId) ||
                const DeepCollectionEquality().equals(
                    other.customReportLayoutId, customReportLayoutId)) &&
            (identical(other.isSummary, isSummary) ||
                const DeepCollectionEquality()
                    .equals(other.isSummary, isSummary)) &&
            (identical(other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals) ||
                const DeepCollectionEquality().equals(
                    other.includeSubHeadingsAndSubTotals,
                    includeSubHeadingsAndSubTotals)) &&
            (identical(other.includeIdColumns, includeIdColumns) ||
                const DeepCollectionEquality()
                    .equals(other.includeIdColumns, includeIdColumns)) &&
            (identical(other.locale, locale) ||
                const DeepCollectionEquality().equals(other.locale, locale)) &&
            (identical(other.excelfields, excelfields) ||
                const DeepCollectionEquality()
                    .equals(other.excelfields, excelfields)));
  }

  @override
  int get hashCode =>
      const DeepCollectionEquality().hash(fromDate) ^
      const DeepCollectionEquality().hash(toDate) ^
      const DeepCollectionEquality().hash(warehouseId) ^
      const DeepCollectionEquality().hash(departmentId) ^
      const DeepCollectionEquality().hash(agentId) ^
      const DeepCollectionEquality().hash(activityTypeId) ^
      const DeepCollectionEquality().hash(sortBy) ^
      const DeepCollectionEquality().hash(orderTypes) ^
      const DeepCollectionEquality().hash(customReportLayoutId) ^
      const DeepCollectionEquality().hash(isSummary) ^
      const DeepCollectionEquality().hash(includeSubHeadingsAndSubTotals) ^
      const DeepCollectionEquality().hash(includeIdColumns) ^
      const DeepCollectionEquality().hash(locale) ^
      const DeepCollectionEquality().hash(excelfields) ^
      runtimeType.hashCode;
}

extension $WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequestExtension
    on WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest {
  WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest
      copyWith(
          {DateTime? fromDate,
          DateTime? toDate,
          String? warehouseId,
          String? departmentId,
          String? agentId,
          String? activityTypeId,
          List<FwStandardModelsCheckBoxListItem>? sortBy,
          List<FwStandardModelsSelectedCheckBoxListItem>? orderTypes,
          String? customReportLayoutId,
          bool? isSummary,
          bool? includeSubHeadingsAndSubTotals,
          bool? includeIdColumns,
          String? locale,
          List<FwStandardModelsCheckBoxListItem>? excelfields}) {
    return WebApiModulesReportsWarehouseReportsWarehouseOutboundReportWarehouseOutboundReportRequest(
        fromDate: fromDate ?? this.fromDate,
        toDate: toDate ?? this.toDate,
        warehouseId: warehouseId ?? this.warehouseId,
        departmentId: departmentId ?? this.departmentId,
        agentId: agentId ?? this.agentId,
        activityTypeId: activityTypeId ?? this.activityTypeId,
        sortBy: sortBy ?? this.sortBy,
        orderTypes: orderTypes ?? this.orderTypes,
        customReportLayoutId: customReportLayoutId ?? this.customReportLayoutId,
        isSummary: isSummary ?? this.isSummary,
        includeSubHeadingsAndSubTotals: includeSubHeadingsAndSubTotals ??
            this.includeSubHeadingsAndSubTotals,
        includeIdColumns: includeIdColumns ?? this.includeIdColumns,
        locale: locale ?? this.locale,
        excelfields: excelfields ?? this.excelfields);
  }
}

String? fwStandardSqlServerFwDataTypesToJson(
    enums.FwStandardSqlServerFwDataTypes? fwStandardSqlServerFwDataTypes) {
  return enums
      .$FwStandardSqlServerFwDataTypesMap[fwStandardSqlServerFwDataTypes];
}

enums.FwStandardSqlServerFwDataTypes fwStandardSqlServerFwDataTypesFromJson(
    String? fwStandardSqlServerFwDataTypes) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return enums.FwStandardSqlServerFwDataTypes.swaggerGeneratedUnknown;
  }

  return enums.$FwStandardSqlServerFwDataTypesMap.entries
      .firstWhere(
          (element) =>
              element.value.toLowerCase() ==
              fwStandardSqlServerFwDataTypes.toLowerCase(),
          orElse: () => const MapEntry(
              enums.FwStandardSqlServerFwDataTypes.swaggerGeneratedUnknown, ''))
      .key;
}

List<String> fwStandardSqlServerFwDataTypesListToJson(
    List<enums.FwStandardSqlServerFwDataTypes>?
        fwStandardSqlServerFwDataTypes) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return [];
  }

  return fwStandardSqlServerFwDataTypes
      .map((e) => enums.$FwStandardSqlServerFwDataTypesMap[e]!)
      .toList();
}

List<enums.FwStandardSqlServerFwDataTypes>
    fwStandardSqlServerFwDataTypesListFromJson(
        List? fwStandardSqlServerFwDataTypes) {
  if (fwStandardSqlServerFwDataTypes == null) {
    return [];
  }

  return fwStandardSqlServerFwDataTypes
      .map((e) => fwStandardSqlServerFwDataTypesFromJson(e.toString()))
      .toList();
}

String? webApiIncludeExcludeAllToJson(
    enums.WebApiIncludeExcludeAll? webApiIncludeExcludeAll) {
  return enums.$WebApiIncludeExcludeAllMap[webApiIncludeExcludeAll];
}

enums.WebApiIncludeExcludeAll webApiIncludeExcludeAllFromJson(
    String? webApiIncludeExcludeAll) {
  if (webApiIncludeExcludeAll == null) {
    return enums.WebApiIncludeExcludeAll.swaggerGeneratedUnknown;
  }

  return enums.$WebApiIncludeExcludeAllMap.entries
      .firstWhere(
          (element) =>
              element.value.toLowerCase() ==
              webApiIncludeExcludeAll.toLowerCase(),
          orElse: () => const MapEntry(
              enums.WebApiIncludeExcludeAll.swaggerGeneratedUnknown, ''))
      .key;
}

List<String> webApiIncludeExcludeAllListToJson(
    List<enums.WebApiIncludeExcludeAll>? webApiIncludeExcludeAll) {
  if (webApiIncludeExcludeAll == null) {
    return [];
  }

  return webApiIncludeExcludeAll
      .map((e) => enums.$WebApiIncludeExcludeAllMap[e]!)
      .toList();
}

List<enums.WebApiIncludeExcludeAll> webApiIncludeExcludeAllListFromJson(
    List? webApiIncludeExcludeAll) {
  if (webApiIncludeExcludeAll == null) {
    return [];
  }

  return webApiIncludeExcludeAll
      .map((e) => webApiIncludeExcludeAllFromJson(e.toString()))
      .toList();
}

String? webApiModulesReportsOrderReportsOrderReportReportViewTypeToJson(
    enums.WebApiModulesReportsOrderReportsOrderReportReportViewType?
        webApiModulesReportsOrderReportsOrderReportReportViewType) {
  return enums.$WebApiModulesReportsOrderReportsOrderReportReportViewTypeMap[
      webApiModulesReportsOrderReportsOrderReportReportViewType];
}

enums.WebApiModulesReportsOrderReportsOrderReportReportViewType
    webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson(
        String? webApiModulesReportsOrderReportsOrderReportReportViewType) {
  if (webApiModulesReportsOrderReportsOrderReportReportViewType == null) {
    return enums.WebApiModulesReportsOrderReportsOrderReportReportViewType
        .swaggerGeneratedUnknown;
  }

  return enums
      .$WebApiModulesReportsOrderReportsOrderReportReportViewTypeMap.entries
      .firstWhere(
          (element) =>
              element.value.toLowerCase() ==
              webApiModulesReportsOrderReportsOrderReportReportViewType
                  .toLowerCase(),
          orElse: () => const MapEntry(
              enums.WebApiModulesReportsOrderReportsOrderReportReportViewType
                  .swaggerGeneratedUnknown,
              ''))
      .key;
}

List<String>
    webApiModulesReportsOrderReportsOrderReportReportViewTypeListToJson(
        List<enums.WebApiModulesReportsOrderReportsOrderReportReportViewType>?
            webApiModulesReportsOrderReportsOrderReportReportViewType) {
  if (webApiModulesReportsOrderReportsOrderReportReportViewType == null) {
    return [];
  }

  return webApiModulesReportsOrderReportsOrderReportReportViewType
      .map((e) => enums
          .$WebApiModulesReportsOrderReportsOrderReportReportViewTypeMap[e]!)
      .toList();
}

List<enums.WebApiModulesReportsOrderReportsOrderReportReportViewType>
    webApiModulesReportsOrderReportsOrderReportReportViewTypeListFromJson(
        List? webApiModulesReportsOrderReportsOrderReportReportViewType) {
  if (webApiModulesReportsOrderReportsOrderReportReportViewType == null) {
    return [];
  }

  return webApiModulesReportsOrderReportsOrderReportReportViewType
      .map((e) =>
          webApiModulesReportsOrderReportsOrderReportReportViewTypeFromJson(
              e.toString()))
      .toList();
}

typedef $JsonFactory<T> = T Function(Map<String, dynamic> json);

class $CustomJsonDecoder {
  $CustomJsonDecoder(this.factories);

  final Map<Type, $JsonFactory> factories;

  dynamic decode<T>(dynamic entity) {
    if (entity is Iterable) {
      return _decodeList<T>(entity);
    }

    if (entity is T) {
      return entity;
    }

    if (entity is Map<String, dynamic>) {
      return _decodeMap<T>(entity);
    }

    return entity;
  }

  T _decodeMap<T>(Map<String, dynamic> values) {
    final jsonFactory = factories[T];
    if (jsonFactory == null || jsonFactory is! $JsonFactory<T>) {
      return throw "Could not find factory for type $T. Is '$T: $T.fromJsonFactory' included in the CustomJsonDecoder instance creation in bootstrapper.dart?";
    }

    return jsonFactory(values);
  }

  List<T> _decodeList<T>(Iterable values) =>
      values.where((v) => v != null).map<T>((v) => decode<T>(v) as T).toList();
}

class $JsonSerializableConverter extends chopper.JsonConverter {
  @override
  chopper.Response<ResultType> convertResponse<ResultType, Item>(
      chopper.Response response) {
    if (response.bodyString.isEmpty) {
      // In rare cases, when let's say 204 (no content) is returned -
      // we cannot decode the missing json with the result type specified
      return chopper.Response(response.base, null, error: response.error);
    }

    final jsonRes = super.convertResponse(response);
    return jsonRes.copyWith<ResultType>(
        body: $jsonDecoder.decode<Item>(jsonRes.body) as ResultType);
  }
}

final $jsonDecoder = $CustomJsonDecoder(ReportsJsonDecoderMappings);

// ignore: unused_element
String? _dateToJson(DateTime? date) {
  if (date == null) {
    return null;
  }

  final year = date.year.toString();
  final month = date.month < 10 ? '0${date.month}' : date.month.toString();
  final day = date.day < 10 ? '0${date.day}' : date.day.toString();

  return '$year-$month-$day';
}
